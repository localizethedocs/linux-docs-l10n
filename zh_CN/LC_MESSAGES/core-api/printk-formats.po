# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-06 15:47+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../core-api/printk-formats.rst:3
msgid "How to get printk format specifiers right"
msgstr ""

#: ../../../core-api/printk-formats.rst:0
msgid "Author"
msgstr ""

#: ../../../core-api/printk-formats.rst:7
msgid "Randy Dunlap <rdunlap@infradead.org>"
msgstr ""

#: ../../../core-api/printk-formats.rst:8
msgid "Andrew Murray <amurray@mpc-data.co.uk>"
msgstr ""

#: ../../../core-api/printk-formats.rst:12
msgid "Integer types"
msgstr ""

#: ../../../core-api/printk-formats.rst:41
msgid ""
"If <type> is architecture-dependent for its size (e.g., cycles_t, tcflag_t) "
"or is dependent on a config option for its size (e.g., blk_status_t), use a "
"format specifier of its largest possible type and explicitly cast to it."
msgstr ""

#: ../../../core-api/printk-formats.rst:45
#: ../../../core-api/printk-formats.rst:202
msgid "Example::"
msgstr ""

#: ../../../core-api/printk-formats.rst:49
msgid "Reminder: sizeof() returns type size_t."
msgstr ""

#: ../../../core-api/printk-formats.rst:51
msgid ""
"The kernel's printf does not support %n. Floating point formats (%e, %f, %g, "
"%a) are also not recognized, for obvious reasons. Use of any unsupported "
"specifier or length qualifier results in a WARN and early return from "
"vsnprintf()."
msgstr ""

#: ../../../core-api/printk-formats.rst:57
msgid "Pointer types"
msgstr ""

#: ../../../core-api/printk-formats.rst:59
msgid ""
"A raw pointer value may be printed with %p which will hash the address "
"before printing. The kernel also supports extended specifiers for printing "
"pointers of different types."
msgstr ""

#: ../../../core-api/printk-formats.rst:63
msgid ""
"Some of the extended specifiers print the data on the given address instead "
"of printing the address itself. In this case, the following error messages "
"might be printed instead of the unreachable information::"
msgstr ""

#: ../../../core-api/printk-formats.rst:72
msgid "Plain Pointers"
msgstr ""

#: ../../../core-api/printk-formats.rst:78
msgid ""
"Pointers printed without a specifier extension (i.e unadorned %p) are hashed "
"to prevent leaking information about the kernel memory layout. This has the "
"added benefit of providing a unique identifier. On 64-bit machines the first "
"32 bits are zeroed. The kernel will print ``(ptrval)`` until it gathers "
"enough entropy."
msgstr ""

#: ../../../core-api/printk-formats.rst:84
msgid ""
"When possible, use specialised modifiers such as %pS or %pB (described "
"below) to avoid the need of providing an unhashed address that has to be "
"interpreted post-hoc. If not possible, and the aim of printing the address "
"is to provide more information for debugging, use %p and boot the kernel "
"with the ``no_hash_pointers`` parameter during debugging, which will print "
"all %p addresses unmodified. If you *really* always want the unmodified "
"address, see %px below."
msgstr ""

#: ../../../core-api/printk-formats.rst:92
msgid ""
"If (and only if) you are printing addresses as a content of a virtual file "
"in e.g. procfs or sysfs (using e.g. seq_printf(), not printk()) read by a "
"userspace process, use the %pK modifier described below instead of %p or %px."
msgstr ""

#: ../../../core-api/printk-formats.rst:97
msgid "Error Pointers"
msgstr ""

#: ../../../core-api/printk-formats.rst:103
msgid ""
"For printing error pointers (i.e. a pointer for which IS_ERR() is true) as a "
"symbolic error name. Error values for which no symbolic name is known are "
"printed in decimal, while a non-ERR_PTR passed as the argument to %pe gets "
"treated as ordinary %p."
msgstr ""

#: ../../../core-api/printk-formats.rst:109
msgid "Symbols/Function Pointers"
msgstr ""

#: ../../../core-api/printk-formats.rst:120
msgid ""
"The ``S`` and ``s`` specifiers are used for printing a pointer in symbolic "
"format. They result in the symbol name with (S) or without (s) offsets. If "
"KALLSYMS are disabled then the symbol address is printed instead."
msgstr ""

#: ../../../core-api/printk-formats.rst:124
msgid ""
"The ``B`` specifier results in the symbol name with offsets and should be "
"used when printing stack backtraces. The specifier takes into consideration "
"the effect of compiler optimisations which may occur when tail-calls are "
"used and marked with the noreturn GCC attribute."
msgstr ""

#: ../../../core-api/printk-formats.rst:129
msgid ""
"If the pointer is within a module, the module name and optionally build ID "
"is printed after the symbol name with an extra ``b`` appended to the end of "
"the specifier."
msgstr ""

#: ../../../core-api/printk-formats.rst:142
msgid "Probed Pointers from BPF / tracing"
msgstr ""

#: ../../../core-api/printk-formats.rst:149
msgid ""
"The ``k`` and ``u`` specifiers are used for printing prior probed memory "
"from either kernel memory (k) or user memory (u). The subsequent ``s`` "
"specifier results in printing a string. For direct use in regular "
"vsnprintf() the (k) and (u) annotation is ignored, however, when used out of "
"BPF's bpf_trace_printk(), for example, it reads the memory it is pointing to "
"without faulting."
msgstr ""

#: ../../../core-api/printk-formats.rst:156
msgid "Kernel Pointers"
msgstr ""

#: ../../../core-api/printk-formats.rst:162
msgid ""
"For printing kernel pointers which should be hidden from unprivileged users. "
"The behaviour of %pK depends on the kptr_restrict sysctl - see Documentation/"
"admin-guide/sysctl/kernel.rst for more details."
msgstr ""

#: ../../../core-api/printk-formats.rst:166
msgid ""
"This modifier is *only* intended when producing content of a file read by "
"userspace from e.g. procfs or sysfs, not for dmesg. Please refer to the "
"section about %p above for discussion about how to manage hashing pointers "
"in printk()."
msgstr ""

#: ../../../core-api/printk-formats.rst:172
msgid "Unmodified Addresses"
msgstr ""

#: ../../../core-api/printk-formats.rst:178
msgid ""
"For printing pointers when you *really* want to print the address. Please "
"consider whether or not you are leaking sensitive information about the "
"kernel memory layout before printing pointers with %px. %px is functionally "
"equivalent to %lx (or %lu). %px is preferred because it is more uniquely "
"grep'able. If in the future we need to modify the way the kernel handles "
"printing pointers we will be better equipped to find the call sites."
msgstr ""

#: ../../../core-api/printk-formats.rst:185
msgid ""
"Before using %px, consider if using %p is sufficient together with enabling "
"the ``no_hash_pointers`` kernel parameter during debugging sessions (see the "
"%p description above). One valid scenario for %px might be printing "
"information immediately before a panic, which prevents any sensitive "
"information to be exploited anyway, and with %px there would be no need to "
"reproduce the panic with no_hash_pointers."
msgstr ""

#: ../../../core-api/printk-formats.rst:193
msgid "Pointer Differences"
msgstr ""

#: ../../../core-api/printk-formats.rst:200
msgid ""
"For printing the pointer differences, use the %t modifier for ptrdiff_t."
msgstr ""

#: ../../../core-api/printk-formats.rst:207
msgid "Struct Resources"
msgstr ""

#: ../../../core-api/printk-formats.rst:220
msgid ""
"For printing struct resources. The ``R`` and ``r`` specifiers result in a "
"printed resource with (R) or without (r) a decoded flags member.  If start "
"is equal to end only print the start value."
msgstr ""

#: ../../../core-api/printk-formats.rst:224
#: ../../../core-api/printk-formats.rst:237
#: ../../../core-api/printk-formats.rst:250
#: ../../../core-api/printk-formats.rst:262
#: ../../../core-api/printk-formats.rst:338
#: ../../../core-api/printk-formats.rst:357
#: ../../../core-api/printk-formats.rst:376
#: ../../../core-api/printk-formats.rst:407
#: ../../../core-api/printk-formats.rst:433
#: ../../../core-api/printk-formats.rst:448
#: ../../../core-api/printk-formats.rst:479
#: ../../../core-api/printk-formats.rst:515
#: ../../../core-api/printk-formats.rst:566
#: ../../../core-api/printk-formats.rst:578
#: ../../../core-api/printk-formats.rst:619
#: ../../../core-api/printk-formats.rst:630
#: ../../../core-api/printk-formats.rst:642
#: ../../../core-api/printk-formats.rst:666
msgid "Passed by reference."
msgstr ""

#: ../../../core-api/printk-formats.rst:227
msgid "Physical address types phys_addr_t"
msgstr ""

#: ../../../core-api/printk-formats.rst:233
msgid ""
"For printing a phys_addr_t type (and its derivatives, such as "
"resource_size_t) which can vary based on build options, regardless of the "
"width of the CPU data path."
msgstr ""

#: ../../../core-api/printk-formats.rst:240
msgid "Struct Range"
msgstr ""

#: ../../../core-api/printk-formats.rst:247
msgid ""
"For printing struct range.  struct range holds an arbitrary range of u64 "
"values.  If start is equal to end only print the start value."
msgstr ""

#: ../../../core-api/printk-formats.rst:253
msgid "DMA address types dma_addr_t"
msgstr ""

#: ../../../core-api/printk-formats.rst:259
msgid ""
"For printing a dma_addr_t type which can vary based on build options, "
"regardless of the width of the CPU data path."
msgstr ""

#: ../../../core-api/printk-formats.rst:265
msgid "Raw buffer as an escaped string"
msgstr ""

#: ../../../core-api/printk-formats.rst:271
msgid ""
"For printing raw buffer as an escaped string. For the following buffer::"
msgstr ""

#: ../../../core-api/printk-formats.rst:275
msgid ""
"A few examples show how the conversion would be done (excluding surrounding "
"quotes)::"
msgstr ""

#: ../../../core-api/printk-formats.rst:282
msgid ""
"The conversion rules are applied according to an optional combination of "
"flags (see :c:func:`string_escape_mem` kernel documentation for the details):"
msgstr ""

#: ../../../core-api/printk-formats.rst:286
msgid "a - ESCAPE_ANY"
msgstr ""

#: ../../../core-api/printk-formats.rst:287
msgid "c - ESCAPE_SPECIAL"
msgstr ""

#: ../../../core-api/printk-formats.rst:288
msgid "h - ESCAPE_HEX"
msgstr ""

#: ../../../core-api/printk-formats.rst:289
msgid "n - ESCAPE_NULL"
msgstr ""

#: ../../../core-api/printk-formats.rst:290
msgid "o - ESCAPE_OCTAL"
msgstr ""

#: ../../../core-api/printk-formats.rst:291
msgid "p - ESCAPE_NP"
msgstr ""

#: ../../../core-api/printk-formats.rst:292
msgid "s - ESCAPE_SPACE"
msgstr ""

#: ../../../core-api/printk-formats.rst:294
msgid "By default ESCAPE_ANY_NP is used."
msgstr ""

#: ../../../core-api/printk-formats.rst:296
msgid ""
"ESCAPE_ANY_NP is the sane choice for many cases, in particularly for "
"printing SSIDs."
msgstr ""

#: ../../../core-api/printk-formats.rst:299
msgid "If field width is omitted then 1 byte only will be escaped."
msgstr ""

#: ../../../core-api/printk-formats.rst:302
msgid "Raw buffer as a hex string"
msgstr ""

#: ../../../core-api/printk-formats.rst:311
msgid ""
"For printing small buffers (up to 64 bytes long) as a hex string with a "
"certain separator. For larger buffers consider using :c:func:"
"`print_hex_dump`."
msgstr ""

#: ../../../core-api/printk-formats.rst:316
msgid "MAC/FDDI addresses"
msgstr ""

#: ../../../core-api/printk-formats.rst:326
msgid ""
"For printing 6-byte MAC/FDDI addresses in hex notation. The ``M`` and ``m`` "
"specifiers result in a printed address with (M) or without (m) byte "
"separators. The default byte separator is the colon (:)."
msgstr ""

#: ../../../core-api/printk-formats.rst:330
msgid ""
"Where FDDI addresses are concerned the ``F`` specifier can be used after the "
"``M`` specifier to use dash (-) separators instead of the default separator."
msgstr ""

#: ../../../core-api/printk-formats.rst:334
msgid ""
"For Bluetooth addresses the ``R`` specifier shall be used after the ``M`` "
"specifier to use reversed byte order suitable for visual interpretation of "
"Bluetooth addresses which are in the little endian order."
msgstr ""

#: ../../../core-api/printk-formats.rst:341
msgid "IPv4 addresses"
msgstr ""

#: ../../../core-api/printk-formats.rst:349
msgid ""
"For printing IPv4 dot-separated decimal addresses. The ``I4`` and ``i4`` "
"specifiers result in a printed address with (i4) or without (I4) leading "
"zeros."
msgstr ""

#: ../../../core-api/printk-formats.rst:353
msgid ""
"The additional ``h``, ``n``, ``b``, and ``l`` specifiers are used to specify "
"host, network, big or little endian order addresses respectively. Where no "
"specifier is provided the default network/big endian order is used."
msgstr ""

#: ../../../core-api/printk-formats.rst:360
msgid "IPv6 addresses"
msgstr ""

#: ../../../core-api/printk-formats.rst:368
msgid ""
"For printing IPv6 network-order 16-bit hex addresses. The ``I6`` and ``i6`` "
"specifiers result in a printed address with (I6) or without (i6) colon-"
"separators. Leading zeros are always used."
msgstr ""

#: ../../../core-api/printk-formats.rst:372
msgid ""
"The additional ``c`` specifier can be used with the ``I`` specifier to print "
"a compressed IPv6 address as described by https://tools.ietf.org/html/rfc5952"
msgstr ""

#: ../../../core-api/printk-formats.rst:379
msgid "IPv4/IPv6 addresses (generic, with port, flowinfo, scope)"
msgstr ""

#: ../../../core-api/printk-formats.rst:389
msgid ""
"For printing an IP address without the need to distinguish whether it's of "
"type AF_INET or AF_INET6. A pointer to a valid struct sockaddr, specified "
"through ``IS`` or ``iS``, can be passed to this format specifier."
msgstr ""

#: ../../../core-api/printk-formats.rst:393
msgid ""
"The additional ``p``, ``f``, and ``s`` specifiers are used to specify port "
"(IPv4, IPv6), flowinfo (IPv6) and scope (IPv6). Ports have a ``:`` prefix, "
"flowinfo a ``/`` and scope a ``%``, each followed by the actual value."
msgstr ""

#: ../../../core-api/printk-formats.rst:397
msgid ""
"In case of an IPv6 address the compressed IPv6 address as described by "
"https://tools.ietf.org/html/rfc5952 is being used if the additional "
"specifier ``c`` is given. The IPv6 address is surrounded by ``[``, ``]`` in "
"case of additional specifiers ``p``, ``f`` or ``s`` as suggested by https://"
"tools.ietf.org/html/draft-ietf-6man-text-addr-representation-07"
msgstr ""

#: ../../../core-api/printk-formats.rst:403
msgid ""
"In case of IPv4 addresses, the additional ``h``, ``n``, ``b``, and ``l`` "
"specifiers can be used as well and are ignored in case of an IPv6 address."
msgstr ""

#: ../../../core-api/printk-formats.rst:409
msgid "Further examples::"
msgstr ""

#: ../../../core-api/printk-formats.rst:416
msgid "UUID/GUID addresses"
msgstr ""

#: ../../../core-api/printk-formats.rst:425
msgid ""
"For printing 16-byte UUID/GUIDs addresses. The additional ``l``, ``L``, "
"``b`` and ``B`` specifiers are used to specify a little endian order in "
"lower (l) or upper case (L) hex notation - and big endian order in lower (b) "
"or upper case (B) hex notation."
msgstr ""

#: ../../../core-api/printk-formats.rst:430
msgid ""
"Where no additional specifiers are used the default big endian order with "
"lower case hex notation will be printed."
msgstr ""

#: ../../../core-api/printk-formats.rst:436
msgid "dentry names"
msgstr ""

#: ../../../core-api/printk-formats.rst:443
msgid ""
"For printing dentry name; if we race with :c:func:`d_move`, the name might "
"be a mix of old and new ones, but it won't oops.  %pd dentry is a safer "
"equivalent of %s dentry->d_name.name we used to use, %pd<n> prints ``n`` "
"last components.  %pD does the same thing for struct file."
msgstr ""

#: ../../../core-api/printk-formats.rst:451
msgid "block_device names"
msgstr ""

#: ../../../core-api/printk-formats.rst:457
msgid "For printing name of block_device pointers."
msgstr ""

#: ../../../core-api/printk-formats.rst:460
msgid "struct va_format"
msgstr ""

#: ../../../core-api/printk-formats.rst:466
msgid ""
"For printing struct va_format structures. These contain a format string and "
"va_list as follows::"
msgstr ""

#: ../../../core-api/printk-formats.rst:474
msgid "Implements a \"recursive vsnprintf\"."
msgstr ""

#: ../../../core-api/printk-formats.rst:476
msgid ""
"Do not use this feature without some mechanism to verify the correctness of "
"the format string and va_list arguments."
msgstr ""

#: ../../../core-api/printk-formats.rst:482
msgid "Device tree nodes"
msgstr ""

#: ../../../core-api/printk-formats.rst:489
msgid ""
"For printing device tree node structures. Default behaviour is equivalent to "
"%pOFf."
msgstr ""

#: ../../../core-api/printk-formats.rst:492
msgid "f - device node full_name"
msgstr ""

#: ../../../core-api/printk-formats.rst:493
msgid "n - device node name"
msgstr ""

#: ../../../core-api/printk-formats.rst:494
msgid "p - device node phandle"
msgstr ""

#: ../../../core-api/printk-formats.rst:495
msgid "P - device node path spec (name + @unit)"
msgstr ""

#: ../../../core-api/printk-formats.rst:496
msgid "F - device node flags"
msgstr ""

#: ../../../core-api/printk-formats.rst:497
msgid "c - major compatible string"
msgstr ""

#: ../../../core-api/printk-formats.rst:498
msgid "C - full compatible string"
msgstr ""

#: ../../../core-api/printk-formats.rst:500
msgid "The separator when using multiple arguments is ':'"
msgstr ""

#: ../../../core-api/printk-formats.rst:502
#: ../../../core-api/printk-formats.rst:644
msgid "Examples::"
msgstr ""

#: ../../../core-api/printk-formats.rst:518
msgid "Fwnode handles"
msgstr ""

#: ../../../core-api/printk-formats.rst:524
msgid ""
"For printing information on an fwnode_handle. The default is to print the "
"full node name, including the path. The modifiers are functionally "
"equivalent to %pOF above."
msgstr ""

#: ../../../core-api/printk-formats.rst:528
msgid "f - full name of the node, including the path"
msgstr ""

#: ../../../core-api/printk-formats.rst:529
msgid "P - the name of the node including an address (if there is one)"
msgstr ""

#: ../../../core-api/printk-formats.rst:531
msgid "Examples (ACPI)::"
msgstr ""

#: ../../../core-api/printk-formats.rst:536
msgid "Examples (OF)::"
msgstr ""

#: ../../../core-api/printk-formats.rst:542
msgid "Time and date"
msgstr ""

#: ../../../core-api/printk-formats.rst:552
msgid "For printing date and time as represented by::"
msgstr ""

#: ../../../core-api/printk-formats.rst:557
msgid "in human readable format."
msgstr ""

#: ../../../core-api/printk-formats.rst:559
msgid ""
"By default year will be incremented by 1900 and month by 1. Use %pt[RT]r "
"(raw) to suppress this behaviour."
msgstr ""

#: ../../../core-api/printk-formats.rst:562
msgid ""
"The %pt[RT]s (space) will override ISO 8601 separator by using ' ' (space) "
"instead of 'T' (Capital T) between date and time. It won't have any effect "
"when date or time is omitted."
msgstr ""

#: ../../../core-api/printk-formats.rst:569
msgid "struct clk"
msgstr ""

#: ../../../core-api/printk-formats.rst:575
msgid ""
"For printing struct clk structures. %pC prints the name of the clock (Common "
"Clock Framework) or a unique 32-bit ID (legacy clock framework)."
msgstr ""

#: ../../../core-api/printk-formats.rst:581
msgid "bitmap and its derivatives such as cpumask and nodemask"
msgstr ""

#: ../../../core-api/printk-formats.rst:588
msgid ""
"For printing bitmap and its derivatives such as cpumask and nodemask, %*pb "
"outputs the bitmap with field width as the number of bits and %*pbl output "
"the bitmap as range list with field width as the number of bits."
msgstr ""

#: ../../../core-api/printk-formats.rst:592
msgid ""
"The field width is passed by value, the bitmap is passed by reference. "
"Helper macros cpumask_pr_args() and nodemask_pr_args() are available to ease "
"printing cpumask and nodemask."
msgstr ""

#: ../../../core-api/printk-formats.rst:597
msgid "Flags bitfields such as page flags and gfp_flags"
msgstr ""

#: ../../../core-api/printk-formats.rst:605
msgid ""
"For printing flags bitfields as a collection of symbolic constants that "
"would construct the value. The type of flags is given by the third "
"character. Currently supported are:"
msgstr ""

#: ../../../core-api/printk-formats.rst:609
msgid "p - [p]age flags, expects value of type (``unsigned long *``)"
msgstr ""

#: ../../../core-api/printk-formats.rst:610
msgid "v - [v]ma_flags, expects value of type (``unsigned long *``)"
msgstr ""

#: ../../../core-api/printk-formats.rst:611
msgid "g - [g]fp_flags, expects value of type (``gfp_t *``)"
msgstr ""

#: ../../../core-api/printk-formats.rst:613
msgid "The flag names and print order depends on the particular type."
msgstr ""

#: ../../../core-api/printk-formats.rst:615
msgid ""
"Note that this format should not be used directly in the :c:func:"
"`TP_printk()` part of a tracepoint. Instead, use the show_*_flags() "
"functions from <trace/events/mmflags.h>."
msgstr ""

#: ../../../core-api/printk-formats.rst:622
msgid "Network device features"
msgstr ""

#: ../../../core-api/printk-formats.rst:628
msgid "For printing netdev_features_t."
msgstr ""

#: ../../../core-api/printk-formats.rst:633
msgid "V4L2 and DRM FourCC code (pixel format)"
msgstr ""

#: ../../../core-api/printk-formats.rst:639
msgid ""
"Print a FourCC code used by V4L2 or DRM, including format endianness and its "
"numerical value as hexadecimal."
msgstr ""

#: ../../../core-api/printk-formats.rst:651
msgid "Generic FourCC code"
msgstr ""

#: ../../../core-api/printk-formats.rst:653
msgid "::"
msgstr ""

#: ../../../core-api/printk-formats.rst:654
msgid "%p4c[h[R]lb]    gP00 (0x67503030)"
msgstr ""

#: ../../../core-api/printk-formats.rst:656
msgid ""
"Print a generic FourCC code, as both ASCII characters and its numerical "
"value as hexadecimal."
msgstr ""

#: ../../../core-api/printk-formats.rst:659
msgid ""
"The generic FourCC code is always printed in the big-endian format, the most "
"significant byte first. This is the opposite of V4L/DRM FourCCs."
msgstr ""

#: ../../../core-api/printk-formats.rst:662
msgid ""
"The additional ``h``, ``hR``, ``l``, and ``b`` specifiers define what "
"endianness is used to load the stored bytes. The data might be interpreted "
"using the host, reversed host byte order, little-endian, or big-endian."
msgstr ""

#: ../../../core-api/printk-formats.rst:668
msgid "Examples for a little-endian machine, given &(u32)0x67503030::"
msgstr ""

#: ../../../core-api/printk-formats.rst:675
msgid "Examples for a big-endian machine, given &(u32)0x67503030::"
msgstr ""

#: ../../../core-api/printk-formats.rst:683
msgid "Rust"
msgstr ""

#: ../../../core-api/printk-formats.rst:689
msgid ""
"Only intended to be used from Rust code to format ``core::fmt::Arguments``. "
"Do *not* use it from C."
msgstr ""

#: ../../../core-api/printk-formats.rst:693
msgid "Thanks"
msgstr ""

#: ../../../core-api/printk-formats.rst:695
msgid ""
"If you add other %p extensions, please extend <lib/tests/printf_kunit.c> "
"with one or more test cases, if at all feasible."
msgstr ""

#: ../../../core-api/printk-formats.rst:698
msgid "Thank you for your cooperation and attention."
msgstr ""
