# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../trace/osnoise-tracer.rst:3
msgid "OSNOISE Tracer"
msgstr ""

#: ../../../trace/osnoise-tracer.rst:5
msgid ""
"In the context of high-performance computing (HPC), the Operating System "
"Noise (*osnoise*) refers to the interference experienced by an application "
"due to activities inside the operating system. In the context of Linux, "
"NMIs, IRQs, SoftIRQs, and any other system thread can cause noise to the "
"system. Moreover, hardware-related jobs can also cause noise, for example, "
"via SMIs."
msgstr ""

#: ../../../trace/osnoise-tracer.rst:12
msgid ""
"hwlat_detector is one of the tools used to identify the most complex source "
"of noise: *hardware noise*."
msgstr ""

#: ../../../trace/osnoise-tracer.rst:15
msgid ""
"In a nutshell, the hwlat_detector creates a thread that runs periodically "
"for a given period. At the beginning of a period, the thread disables "
"interrupt and starts sampling. While running, the hwlatd thread reads the "
"time in a loop. As interrupts are disabled, threads, IRQs, and SoftIRQs "
"cannot interfere with the hwlatd thread. Hence, the cause of any gap between "
"two different reads of the time roots either on NMI or in the hardware "
"itself. At the end of the period, hwlatd enables interrupts and reports the "
"max observed gap between the reads. It also prints a NMI occurrence counter. "
"If the output does not report NMI executions, the user can conclude that the "
"hardware is the culprit for the latency. The hwlat detects the NMI execution "
"by observing the entry and exit of a NMI."
msgstr ""

#: ../../../trace/osnoise-tracer.rst:28
msgid ""
"The osnoise tracer leverages the hwlat_detector by running a similar loop "
"with preemption, SoftIRQs and IRQs enabled, thus allowing all the sources of "
"*osnoise* during its execution. Using the same approach of hwlat, osnoise "
"takes note of the entry and exit point of any source of interferences, "
"increasing a per-cpu interference counter. The osnoise tracer also saves an "
"interference counter for each source of interference. The interference "
"counter for NMI, IRQs, SoftIRQs, and threads is increased anytime the tool "
"observes these interferences' entry events. When a noise happens without any "
"interference from the operating system level, the hardware noise counter "
"increases, pointing to a hardware-related noise. In this way, osnoise can "
"account for any source of interference. At the end of the period, the "
"osnoise tracer prints the sum of all noise, the max single noise, the "
"percentage of CPU available for the thread, and the counters for the noise "
"sources."
msgstr ""

#: ../../../trace/osnoise-tracer.rst:44
msgid "Usage"
msgstr ""

#: ../../../trace/osnoise-tracer.rst:46
msgid ""
"Write the ASCII text \"osnoise\" into the current_tracer file of the tracing "
"system (generally mounted at /sys/kernel/tracing)."
msgstr ""

#: ../../../trace/osnoise-tracer.rst:49
msgid "For example::"
msgstr ""

#: ../../../trace/osnoise-tracer.rst:54
msgid "It is possible to follow the trace by reading the trace file::"
msgstr ""

#: ../../../trace/osnoise-tracer.rst:76
msgid ""
"In addition to the regular trace fields (from TASK-PID to TIMESTAMP), the "
"tracer prints a message at the end of each period for each CPU that is "
"running an osnoise/ thread. The osnoise specific fields report:"
msgstr ""

#: ../../../trace/osnoise-tracer.rst:80
msgid ""
"The RUNTIME IN US reports the amount of time in microseconds that the "
"osnoise thread kept looping reading the time."
msgstr ""

#: ../../../trace/osnoise-tracer.rst:82
msgid ""
"The NOISE IN US reports the sum of noise in microseconds observed by the "
"osnoise tracer during the associated runtime."
msgstr ""

#: ../../../trace/osnoise-tracer.rst:84
msgid ""
"The % OF CPU AVAILABLE reports the percentage of CPU available for the "
"osnoise thread during the runtime window."
msgstr ""

#: ../../../trace/osnoise-tracer.rst:86
msgid ""
"The MAX SINGLE NOISE IN US reports the maximum single noise observed during "
"the runtime window."
msgstr ""

#: ../../../trace/osnoise-tracer.rst:88
msgid ""
"The Interference counters display how many each of the respective "
"interference happened during the runtime window."
msgstr ""

#: ../../../trace/osnoise-tracer.rst:91
msgid ""
"Note that the example above shows a high number of HW noise samples. The "
"reason being is that this sample was taken on a virtual machine, and the "
"host interference is detected as a hardware interference."
msgstr ""

#: ../../../trace/osnoise-tracer.rst:96
msgid "Tracer Configuration"
msgstr ""

#: ../../../trace/osnoise-tracer.rst:98
msgid "The tracer has a set of options inside the osnoise directory, they are:"
msgstr ""

#: ../../../trace/osnoise-tracer.rst:100
msgid "osnoise/cpus: CPUs at which a osnoise thread will execute."
msgstr ""

#: ../../../trace/osnoise-tracer.rst:101
msgid "osnoise/period_us: the period of the osnoise thread."
msgstr ""

#: ../../../trace/osnoise-tracer.rst:102
msgid "osnoise/runtime_us: how long an osnoise thread will look for noise."
msgstr ""

#: ../../../trace/osnoise-tracer.rst:103
msgid ""
"osnoise/stop_tracing_us: stop the system tracing if a single noise higher "
"than the configured value happens. Writing 0 disables this option."
msgstr ""

#: ../../../trace/osnoise-tracer.rst:106
msgid ""
"osnoise/stop_tracing_total_us: stop the system tracing if total noise higher "
"than the configured value happens. Writing 0 disables this option."
msgstr ""

#: ../../../trace/osnoise-tracer.rst:109
msgid ""
"tracing_threshold: the minimum delta between two time() reads to be "
"considered as noise, in us. When set to 0, the default value will be used, "
"which is currently 1 us."
msgstr ""

#: ../../../trace/osnoise-tracer.rst:112
msgid ""
"osnoise/options: a set of on/off options that can be enabled by writing the "
"option name to the file or disabled by writing the option name preceded with "
"the 'NO\\_' prefix. For example, writing NO_OSNOISE_WORKLOAD disables the "
"OSNOISE_WORKLOAD option. The special DEAFAULTS option resets all options to "
"the default value."
msgstr ""

#: ../../../trace/osnoise-tracer.rst:119
msgid "Tracer Options"
msgstr ""

#: ../../../trace/osnoise-tracer.rst:121
msgid ""
"The osnoise/options file exposes a set of on/off configuration options for "
"the osnoise tracer. These options are:"
msgstr ""

#: ../../../trace/osnoise-tracer.rst:124
msgid "DEFAULTS: reset the options to the default value."
msgstr ""

#: ../../../trace/osnoise-tracer.rst:125
msgid ""
"OSNOISE_WORKLOAD: do not dispatch osnoise workload (see dedicated section "
"below)."
msgstr ""

#: ../../../trace/osnoise-tracer.rst:127
msgid ""
"PANIC_ON_STOP: call panic() if the tracer stops. This option serves to "
"capture a vmcore."
msgstr ""

#: ../../../trace/osnoise-tracer.rst:129
msgid ""
"OSNOISE_PREEMPT_DISABLE: disable preemption while running the osnoise "
"workload, allowing only IRQ and hardware-related noise."
msgstr ""

#: ../../../trace/osnoise-tracer.rst:131
msgid ""
"OSNOISE_IRQ_DISABLE: disable IRQs while running the osnoise workload, "
"allowing only NMIs and hardware-related noise, like hwlat tracer."
msgstr ""

#: ../../../trace/osnoise-tracer.rst:135
msgid "Additional Tracing"
msgstr ""

#: ../../../trace/osnoise-tracer.rst:137
msgid ""
"In addition to the tracer, a set of tracepoints were added to facilitate the "
"identification of the osnoise source."
msgstr ""

#: ../../../trace/osnoise-tracer.rst:140
msgid ""
"osnoise:sample_threshold: printed anytime a noise is higher than the "
"configurable tolerance_ns."
msgstr ""

#: ../../../trace/osnoise-tracer.rst:142
msgid "osnoise:nmi_noise: noise from NMI, including the duration."
msgstr ""

#: ../../../trace/osnoise-tracer.rst:143
msgid "osnoise:irq_noise: noise from an IRQ, including the duration."
msgstr ""

#: ../../../trace/osnoise-tracer.rst:144
msgid "osnoise:softirq_noise: noise from a SoftIRQ, including the duration."
msgstr ""

#: ../../../trace/osnoise-tracer.rst:146
msgid "osnoise:thread_noise: noise from a thread, including the duration."
msgstr ""

#: ../../../trace/osnoise-tracer.rst:148
msgid ""
"Note that all the values are *net values*. For example, if while osnoise is "
"running, another thread preempts the osnoise thread, it will start a "
"thread_noise duration at the start. Then, an IRQ takes place, preempting the "
"thread_noise, starting a irq_noise. When the IRQ ends its execution, it will "
"compute its duration, and this duration will be subtracted from the "
"thread_noise, in such a way as to avoid the double accounting of the IRQ "
"execution. This logic is valid for all sources of noise."
msgstr ""

#: ../../../trace/osnoise-tracer.rst:156
msgid "Here is one example of the usage of these tracepoints::"
msgstr ""

#: ../../../trace/osnoise-tracer.rst:163
msgid ""
"In this example, a noise sample of 8 microseconds was reported in the last "
"line, pointing to two interferences. Looking backward in the trace, the two "
"previous entries were about the migration thread running after a timer IRQ "
"execution. The first event is not part of the noise because it took place "
"one millisecond before."
msgstr ""

#: ../../../trace/osnoise-tracer.rst:169
msgid ""
"It is worth noticing that the sum of the duration reported in the "
"tracepoints is smaller than eight us reported in the sample_threshold. The "
"reason roots in the overhead of the entry and exit code that happens before "
"and after any interference execution. This justifies the dual approach: "
"measuring thread and tracing."
msgstr ""

#: ../../../trace/osnoise-tracer.rst:176
msgid "Running osnoise tracer without workload"
msgstr ""

#: ../../../trace/osnoise-tracer.rst:178
msgid ""
"By enabling the osnoise tracer with the NO_OSNOISE_WORKLOAD option set, the "
"osnoise: tracepoints serve to measure the execution time of any type of "
"Linux task, free from the interference of other tasks."
msgstr ""
