# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-06 15:47+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../trace/rv/monitor_synthesis.rst:2
msgid "Runtime Verification Monitor Synthesis"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:4
msgid ""
"The starting point for the application of runtime verification (RV) "
"techniques is the *specification* or *modeling* of the desired (or "
"undesired) behavior of the system under scrutiny."
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:8
msgid ""
"The formal representation needs to be then *synthesized* into a *monitor* "
"that can then be used in the analysis of the trace of the system. The "
"*monitor* connects to the system via an *instrumentation* that converts the "
"events from the *system* to the events of the *specification*."
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:14
msgid ""
"In Linux terms, the runtime verification monitors are encapsulated inside "
"the *RV monitor* abstraction. The RV monitor includes a set of instances of "
"the monitor (per-cpu monitor, per-task monitor, and so on), the helper "
"functions that glue the monitor to the system reference model, and the trace "
"output as a reaction to event parsing and exceptions, as depicted below::"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:40
msgid "RV monitor synthesis"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:42
msgid ""
"The synthesis of a specification into the Linux *RV monitor* abstraction is "
"automated by the rvgen tool and the header file containing common code for "
"creating monitors. The header files are:"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:46
msgid "rv/da_monitor.h for deterministic automaton monitor."
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:47
msgid "rv/ltl_monitor.h for linear temporal logic monitor."
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:50
msgid "rvgen"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:52
msgid ""
"The rvgen utility converts a specification into the C presentation and "
"creating the skeleton of a kernel monitor in C."
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:55
msgid ""
"For example, it is possible to transform the wip.dot model present in [1] "
"into a per-cpu monitor with the following command::"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:60
msgid "This will create a directory named wip/ with the following files:"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:62
msgid "wip.h: the wip model in C"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:63
msgid "wip.c: the RV monitor"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:65
msgid ""
"The wip.c file contains the monitor declaration and the starting point for "
"the system instrumentation."
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:68
msgid ""
"Similarly, a linear temporal logic monitor can be generated with the "
"following command::"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:73
msgid "This generates pagefault/ directory with:"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:75
msgid ""
"pagefault.h: The Buchi automaton (the non-deterministic state machine to "
"verify the specification)"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:77
msgid "pagefault.c: The skeleton for the RV monitor"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:80
msgid "Monitor header files"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:82
msgid "The header files:"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:84
msgid "`rv/da_monitor.h` for deterministic automaton monitor"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:85
msgid "`rv/ltl_monitor` for linear temporal logic monitor"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:87
msgid ""
"include common macros and static functions for implementing *Monitor "
"Instance(s)*."
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:90
msgid ""
"The benefits of having all common functionalities in a single header file "
"are 3-fold:"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:93
msgid "Reduce the code duplication;"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:94
msgid "Facilitate the bug fix/improvement;"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:95
msgid ""
"Avoid the case of developers changing the core of the monitor code to "
"manipulate the model in a (let's say) non-standard way."
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:99
msgid "rv/da_monitor.h"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:101
msgid ""
"This initial implementation presents three different types of monitor "
"instances:"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:103
msgid "``#define DECLARE_DA_MON_GLOBAL(name, type)``"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:104
msgid "``#define DECLARE_DA_MON_PER_CPU(name, type)``"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:105
msgid "``#define DECLARE_DA_MON_PER_TASK(name, type)``"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:107
msgid ""
"The first declares the functions for a global deterministic automata "
"monitor, the second for monitors with per-cpu instances, and the third with "
"per-task instances."
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:111
msgid ""
"In all cases, the 'name' argument is a string that identifies the monitor, "
"and the 'type' argument is the data type used by rvgen on the representation "
"of the model in C."
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:115
msgid ""
"For example, the wip model with two states and three events can be stored in "
"an 'unsigned char' type. Considering that the preemption control is a per-"
"cpu behavior, the monitor declaration in the 'wip.c' file is::"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:121
msgid ""
"The monitor is executed by sending events to be processed via the functions "
"presented below::"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:128
msgid ""
"The function ``da_handle_event_$(MONITOR_NAME)()`` is the regular case where "
"the event will be processed if the monitor is processing events."
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:131
msgid ""
"When a monitor is enabled, it is placed in the initial state of the "
"automata. However, the monitor does not know if the system is in the "
"*initial state*."
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:134
msgid ""
"The ``da_handle_start_event_$(MONITOR_NAME)()`` function is used to notify "
"the monitor that the system is returning to the initial state, so the "
"monitor can start monitoring the next event."
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:138
msgid ""
"The ``da_handle_start_run_event_$(MONITOR_NAME)()`` function is used to "
"notify the monitor that the system is known to be in the initial state, so "
"the monitor can start monitoring and monitor the current event."
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:142
msgid ""
"Using the wip model as example, the events \"preempt_disable\" and "
"\"sched_waking\" should be sent to monitor, respectively, via [2]::"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:148
msgid "While the event \"preempt_enabled\" will use::"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:152
msgid ""
"To notify the monitor that the system will be returning to the initial "
"state, so the system and the monitor should be in sync."
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:156
msgid "rv/ltl_monitor.h"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:157
msgid ""
"This file must be combined with the $(MODEL_NAME).h file (generated by "
"`rvgen`) to be complete. For example, for the `pagefault` monitor, the "
"`pagefault.c` source file must include::"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:164
msgid "(the skeleton monitor file generated by `rvgen` already does this)."
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:166
msgid ""
"`$(MODEL_NAME).h` (`pagefault.h` in the above example) includes the "
"implementation of the Buchi automaton - a non-deterministic state machine "
"that verifies the LTL specification. While `rv/ltl_monitor.h` includes the "
"common helper functions to interact with the Buchi automaton and to "
"implement an RV monitor. An important definition in `$(MODEL_NAME).h` is::"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:179
msgid ""
"which is the list of atomic propositions present in the LTL specification "
"(prefixed with \"LTL\\_\" to avoid name collision). This `enum` is passed to "
"the functions interacting with the Buchi automaton."
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:183
msgid ""
"While generating code, `rvgen` cannot understand the meaning of the atomic "
"propositions. Thus, that task is left for manual work. The recommended "
"practice is adding tracepoints to places where the atomic propositions "
"change; and in the tracepoints' handlers: the Buchi automaton is executed "
"using::"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:190
msgid ""
"which tells the Buchi automaton that the atomic proposition `atom` is now "
"`value`. The Buchi automaton checks whether the LTL specification is still "
"satisfied, and invokes the monitor's error tracepoint and the reactor if "
"violation is detected."
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:195
msgid ""
"Tracepoints and `ltl_atom_update()` should be used whenever possible. "
"However, it is sometimes not the most convenient. For some atomic "
"propositions which are changed in multiple places in the kernel, it is "
"cumbersome to trace all those places. Furthermore, it may not be important "
"that the atomic propositions are updated at precise times. For example, "
"considering the following linear temporal logic::"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:204
msgid ""
"This LTL states that a real-time task does not raise page faults. For this "
"specification, it is not important when `RT` changes, as long as it has the "
"correct value when `PAGEFAULT` is true.  Motivated by this case, another "
"function is introduced::"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:211
msgid ""
"This function is called whenever the Buchi automaton is triggered. "
"Therefore, it can be manually implemented to \"fetch\" `RT`::"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:219
msgid ""
"Effectively, whenever `PAGEFAULT` is updated with a call to "
"`ltl_atom_update()`, `RT` is also fetched. Thus, the LTL specification can "
"be verified without tracing `RT` everywhere."
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:223
msgid ""
"For atomic propositions which act like events, they usually need to be set "
"(or cleared) and then immediately cleared (or set). A convenient function is "
"provided::"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:229
msgid "which is equivalent to::"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:234
msgid ""
"To initialize the atomic propositions, the following function must be "
"implemented::"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:239
msgid ""
"This function is called for all running tasks when the monitor is enabled. "
"It is also called for new tasks created after the enabling the monitor. It "
"should initialize as many atomic propositions as possible, for example::"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:250
msgid ""
"Atomic propositions not initialized by `ltl_atom_init()` will stay in the "
"unknown state until relevant tracepoints are hit, which can take some time. "
"As monitoring for a task cannot be done until all atomic propositions is "
"known for the task, the monitor may need some time to start validating tasks "
"which have been running before the monitor is enabled. Therefore, it is "
"recommended to start the tasks of interest after enabling the monitor."
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:258
msgid "Final remarks"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:260
msgid ""
"With the monitor synthesis in place using the header files and rvgen, the "
"developer's work should be limited to the instrumentation of the system, "
"increasing the confidence in the overall approach."
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:264
msgid ""
"[1] For details about deterministic automata format and the translation from "
"one representation to another, see::"
msgstr ""

#: ../../../trace/rv/monitor_synthesis.rst:269
msgid ""
"[2] rvgen appends the monitor's name suffix to the events enums to avoid "
"conflicting variables when exporting the global vmlinux.h use by BPF "
"programs."
msgstr ""
