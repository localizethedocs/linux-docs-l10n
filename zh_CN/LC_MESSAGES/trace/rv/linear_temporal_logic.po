# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../trace/rv/linear_temporal_logic.rst:2
msgid "Linear temporal logic"
msgstr ""

#: ../../../trace/rv/linear_temporal_logic.rst:5
msgid "Introduction"
msgstr ""

#: ../../../trace/rv/linear_temporal_logic.rst:7
msgid ""
"Runtime verification monitor is a verification technique which checks that "
"the kernel follows a specification. It does so by using tracepoints to "
"monitor the kernel's execution trace, and verifying that the execution trace "
"sastifies the specification."
msgstr ""

#: ../../../trace/rv/linear_temporal_logic.rst:12
msgid ""
"Initially, the specification can only be written in the form of "
"deterministic automaton (DA).  However, while attempting to implement DA "
"monitors for some complex specifications, deterministic automaton is found "
"to be inappropriate as the specification language. The automaton is "
"complicated, hard to understand, and error-prone."
msgstr ""

#: ../../../trace/rv/linear_temporal_logic.rst:18
msgid ""
"Thus, RV monitors based on linear temporal logic (LTL) are introduced. This "
"type of monitor uses LTL as specification instead of DA. For some cases, "
"writing the specification as LTL is more concise and intuitive."
msgstr ""

#: ../../../trace/rv/linear_temporal_logic.rst:22
msgid "Many materials explain LTL in details. One book is::"
msgstr ""

#: ../../../trace/rv/linear_temporal_logic.rst:28
msgid "Grammar"
msgstr ""

#: ../../../trace/rv/linear_temporal_logic.rst:30
msgid ""
"Unlike some existing syntax, kernel's implementation of LTL is more verbose. "
"This is motivated by considering that the people who read the LTL "
"specifications may not be well-versed in LTL."
msgstr ""

#: ../../../trace/rv/linear_temporal_logic.rst:34
msgid "Grammar:"
msgstr ""

#: ../../../trace/rv/linear_temporal_logic.rst:35
msgid "ltl ::= opd | ( ltl ) | ltl binop ltl | unop ltl"
msgstr ""

#: ../../../trace/rv/linear_temporal_logic.rst:37
msgid "Operands (opd):"
msgstr ""

#: ../../../trace/rv/linear_temporal_logic.rst:38
msgid ""
"true, false, user-defined names consisting of upper-case characters, digits, "
"and underscore."
msgstr ""

#: ../../../trace/rv/linear_temporal_logic.rst:41
msgid "Unary Operators (unop):"
msgstr ""

#: ../../../trace/rv/linear_temporal_logic.rst:42
msgid "always eventually next not"
msgstr ""

#: ../../../trace/rv/linear_temporal_logic.rst:47
msgid "Binary Operators (binop):"
msgstr ""

#: ../../../trace/rv/linear_temporal_logic.rst:48
msgid "until and or imply equivalent"
msgstr ""

#: ../../../trace/rv/linear_temporal_logic.rst:54
msgid ""
"This grammar is ambiguous: operator precedence is not defined. Parentheses "
"must be used."
msgstr ""

#: ../../../trace/rv/linear_temporal_logic.rst:58
msgid "Example linear temporal logic"
msgstr ""

#: ../../../trace/rv/linear_temporal_logic.rst:63
msgid "means: if it is raining, going outside means having an umbrella."
msgstr ""

#: ../../../trace/rv/linear_temporal_logic.rst:69
msgid "means: if it is raining, it is going to be wet until the rain stops."
msgstr ""

#: ../../../trace/rv/linear_temporal_logic.rst:75
msgid "means: if it is raining, rain will eventually stop."
msgstr ""

#: ../../../trace/rv/linear_temporal_logic.rst:77
msgid ""
"The above examples are referring to the current time instance only. For "
"kernel verification, the `always` operator is usually desirable, to specify "
"that something is always true at the present and for all future. For "
"example::"
msgstr ""

#: ../../../trace/rv/linear_temporal_logic.rst:83
msgid "means: *all* rain eventually stops."
msgstr ""

#: ../../../trace/rv/linear_temporal_logic.rst:85
msgid ""
"In the above examples, `RAIN`, `GO_OUTSIDE`, `HAVE_UMBRELLA` and `WET` are "
"the \"atomic propositions\"."
msgstr ""

#: ../../../trace/rv/linear_temporal_logic.rst:89
msgid "Monitor synthesis"
msgstr ""

#: ../../../trace/rv/linear_temporal_logic.rst:91
msgid ""
"To synthesize an LTL into a kernel monitor, the `rvgen` tool can be used: "
"`tools/verification/rvgen`. The specification needs to be provided as a "
"file, and it must have a \"RULE = LTL\" assignment. For example::"
msgstr ""

#: ../../../trace/rv/linear_temporal_logic.rst:97
msgid ""
"which says: if `ACQUIRE`, then `RELEASE` must happen before `KILLED` or "
"`CRASHED`."
msgstr ""

#: ../../../trace/rv/linear_temporal_logic.rst:100
msgid ""
"The LTL can be broken down using sub-expressions. The above is equivalent to:"
msgstr ""

#: ../../../trace/rv/linear_temporal_logic.rst:107
msgid ""
"From this specification, `rvgen` generates the C implementation of a Buchi "
"automaton - a non-deterministic state machine which checks the "
"satisfiability of the LTL. See Documentation/trace/rv/monitor_synthesis.rst "
"for details on using `rvgen`."
msgstr ""

#: ../../../trace/rv/linear_temporal_logic.rst:113
msgid "References"
msgstr ""

#: ../../../trace/rv/linear_temporal_logic.rst:115
msgid "One book covering model checking and linear temporal logic is::"
msgstr ""

#: ../../../trace/rv/linear_temporal_logic.rst:120
msgid ""
"For an example of using linear temporal logic in software testing, see::"
msgstr ""

#: ../../../trace/rv/linear_temporal_logic.rst:128
msgid "The kernel's LTL monitor implementation is based on::"
msgstr ""
