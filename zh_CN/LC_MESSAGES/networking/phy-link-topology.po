# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../networking/phy-link-topology.rst:6
msgid "PHY link topology"
msgstr ""

#: ../../../networking/phy-link-topology.rst:9
msgid "Overview"
msgstr ""

#: ../../../networking/phy-link-topology.rst:11
msgid ""
"The PHY link topology representation in the networking stack aims at "
"representing the hardware layout for any given Ethernet link."
msgstr ""

#: ../../../networking/phy-link-topology.rst:14
msgid ""
"An Ethernet interface from userspace's point of view is nothing but a :c:"
"type:`struct net_device <net_device>`, which exposes configuration options "
"through the legacy ioctls and the ethtool netlink commands. The base "
"assumption when designing these configuration APIs were that the link looks "
"something like ::"
msgstr ""

#: ../../../networking/phy-link-topology.rst:25
msgid ""
"Commands that needs to configure the PHY will go through the net_device."
"phydev field to reach the PHY and perform the relevant configuration."
msgstr ""

#: ../../../networking/phy-link-topology.rst:28
msgid ""
"This assumption falls apart in more complex topologies that can arise when, "
"for example, using SFP transceivers (although that's not the only specific "
"case)."
msgstr ""

#: ../../../networking/phy-link-topology.rst:31
msgid ""
"Here, we have 2 basic scenarios. Either the MAC is able to output a "
"serialized interface, that can directly be fed to an SFP cage, such as "
"SGMII, 1000BaseX, 10GBaseR, etc."
msgstr ""

#: ../../../networking/phy-link-topology.rst:35
msgid ""
"The link topology then looks like this (when an SFP module is inserted) ::"
msgstr ""

#: ../../../networking/phy-link-topology.rst:41
msgid "Knowing that some modules embed a PHY, the actual link is more like ::"
msgstr ""

#: ../../../networking/phy-link-topology.rst:47
msgid ""
"In this case, the SFP PHY is handled by phylib, and registered by phylink "
"through its SFP upstream ops."
msgstr ""

#: ../../../networking/phy-link-topology.rst:50
msgid ""
"Now some Ethernet controllers aren't able to output a serialized interface, "
"so we can't directly connect them to an SFP cage. However, some PHYs can be "
"used as media-converters, to translate the non-serialized MAC MII interface "
"to a serialized MII interface fed to the SFP ::"
msgstr ""

#: ../../../networking/phy-link-topology.rst:59
msgid ""
"This is where the model of having a single net_device.phydev pointer shows "
"its limitations, as we now have 2 PHYs on the link."
msgstr ""

#: ../../../networking/phy-link-topology.rst:62
msgid ""
"The phy_link topology framework aims at providing a way to keep track of "
"every PHY on the link, for use by both kernel drivers and subsystems, but "
"also to report the topology to userspace, allowing to target individual PHYs "
"in configuration commands."
msgstr ""

#: ../../../networking/phy-link-topology.rst:68
msgid "API"
msgstr ""

#: ../../../networking/phy-link-topology.rst:70
msgid ""
"The :c:type:`struct phy_link_topology <phy_link_topology>` is a per-"
"netdevice resource, that gets initialized at netdevice creation. Once it's "
"initialized, it is then possible to register PHYs to the topology through :"
msgstr ""

#: ../../../networking/phy-link-topology.rst:74
msgid ":c:func:`phy_link_topo_add_phy`"
msgstr ""

#: ../../../networking/phy-link-topology.rst:76
msgid ""
"Besides registering the PHY to the topology, this call will also assign a "
"unique index to the PHY, which can then be reported to userspace to refer to "
"this PHY (akin to the ifindex). This index is a u32, ranging from 1 to "
"U32_MAX. The value 0 is reserved to indicate the PHY doesn't belong to any "
"topology yet."
msgstr ""

#: ../../../networking/phy-link-topology.rst:81
msgid "The PHY can then be removed from the topology through"
msgstr ""

#: ../../../networking/phy-link-topology.rst:83
msgid ":c:func:`phy_link_topo_del_phy`"
msgstr ""

#: ../../../networking/phy-link-topology.rst:85
msgid ""
"These function are already hooked into the phylib subsystem, so all PHYs "
"that are linked to a net_device through :c:func:`phy_attach_direct` will "
"automatically join the netdev's topology."
msgstr ""

#: ../../../networking/phy-link-topology.rst:89
msgid ""
"PHYs that are on a SFP module will also be automatically registered IF the "
"SFP upstream is phylink (so, no media-converter)."
msgstr ""

#: ../../../networking/phy-link-topology.rst:92
msgid ""
"PHY drivers that can be used as SFP upstream need to call :c:func:"
"`phy_sfp_attach_phy` and :c:func:`phy_sfp_detach_phy`, which can be used as "
"a .attach_phy / .detach_phy implementation for the :c:type:`struct "
"sfp_upstream_ops <sfp_upstream_ops>`."
msgstr ""

#: ../../../networking/phy-link-topology.rst:98
msgid "UAPI"
msgstr ""

#: ../../../networking/phy-link-topology.rst:100
msgid ""
"There exist a set of netlink commands to query the link topology from "
"userspace, see ``Documentation/networking/ethtool-netlink.rst``."
msgstr ""

#: ../../../networking/phy-link-topology.rst:103
msgid ""
"The whole point of having a topology representation is to assign the "
"phyindex field in :c:type:`struct phy_device <phy_device>`. This index is "
"reported to userspace using the ``ETHTOOL_MSG_PHY_GET`` ethtnl command. "
"Performing a DUMP operation will result in all PHYs from all net_device "
"being listed. The DUMP command accepts either a "
"``ETHTOOL_A_HEADER_DEV_INDEX`` or ``ETHTOOL_A_HEADER_DEV_NAME`` to be passed "
"in the request to filter the DUMP to a single net_device."
msgstr ""

#: ../../../networking/phy-link-topology.rst:110
msgid ""
"The retrieved index can then be passed as a request parameter using the "
"``ETHTOOL_A_HEADER_PHY_INDEX`` field in the following ethnl commands :"
msgstr ""

#: ../../../networking/phy-link-topology.rst:113
msgid "``ETHTOOL_MSG_STRSET_GET`` to get the stats string set from a given PHY"
msgstr ""

#: ../../../networking/phy-link-topology.rst:114
msgid ""
"``ETHTOOL_MSG_CABLE_TEST_ACT`` and ``ETHTOOL_MSG_CABLE_TEST_ACT``, to "
"perform cable testing on a given PHY on the link (most likely the outermost "
"PHY)"
msgstr ""

#: ../../../networking/phy-link-topology.rst:116
msgid ""
"``ETHTOOL_MSG_PSE_SET`` and ``ETHTOOL_MSG_PSE_GET`` for PHY-controlled PoE "
"and PSE settings"
msgstr ""

#: ../../../networking/phy-link-topology.rst:117
msgid ""
"``ETHTOOL_MSG_PLCA_GET_CFG``, ``ETHTOOL_MSG_PLCA_SET_CFG`` and "
"``ETHTOOL_MSG_PLCA_GET_STATUS`` to set the PLCA (Physical Layer Collision "
"Avoidance) parameters"
msgstr ""

#: ../../../networking/phy-link-topology.rst:120
msgid ""
"Note that the PHY index can be passed to other requests, which will silently "
"ignore it if present and irrelevant."
msgstr ""
