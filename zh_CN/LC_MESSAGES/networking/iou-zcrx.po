# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../networking/iou-zcrx.rst:5
msgid "io_uring zero copy Rx"
msgstr ""

#: ../../../networking/iou-zcrx.rst:8
msgid "Introduction"
msgstr ""

#: ../../../networking/iou-zcrx.rst:10
msgid ""
"io_uring zero copy Rx (ZC Rx) is a feature that removes kernel-to-user copy "
"on the network receive path, allowing packet data to be received directly "
"into userspace memory. This feature is different to TCP_ZEROCOPY_RECEIVE in "
"that there are no strict alignment requirements and no need to mmap()/"
"munmap(). Compared to kernel bypass solutions such as e.g. DPDK, the packet "
"headers are processed by the kernel TCP stack as normal."
msgstr ""

#: ../../../networking/iou-zcrx.rst:18
msgid "NIC HW Requirements"
msgstr ""

#: ../../../networking/iou-zcrx.rst:20
msgid ""
"Several NIC HW features are required for io_uring ZC Rx to work. For now the "
"kernel API does not configure the NIC and it must be done by the user."
msgstr ""

#: ../../../networking/iou-zcrx.rst:24
msgid "Header/data split"
msgstr ""

#: ../../../networking/iou-zcrx.rst:26
msgid ""
"Required to split packets at the L4 boundary into a header and a payload. "
"Headers are received into kernel memory as normal and processed by the TCP "
"stack as normal. Payloads are received into userspace memory directly."
msgstr ""

#: ../../../networking/iou-zcrx.rst:31
msgid "Flow steering"
msgstr ""

#: ../../../networking/iou-zcrx.rst:33
msgid ""
"Specific HW Rx queues are configured for this feature, but modern NICs "
"typically distribute flows across all HW Rx queues. Flow steering is "
"required to ensure that only desired flows are directed towards HW queues "
"that are configured for io_uring ZC Rx."
msgstr ""

#: ../../../networking/iou-zcrx.rst:39
msgid "RSS"
msgstr ""

#: ../../../networking/iou-zcrx.rst:41
msgid ""
"In addition to flow steering above, RSS is required to steer all other non-"
"zero copy flows away from queues that are configured for io_uring ZC Rx."
msgstr ""

#: ../../../networking/iou-zcrx.rst:45
msgid "Usage"
msgstr ""

#: ../../../networking/iou-zcrx.rst:48
msgid "Setup NIC"
msgstr ""

#: ../../../networking/iou-zcrx.rst:50
msgid "Must be done out of band for now."
msgstr ""

#: ../../../networking/iou-zcrx.rst:52
msgid "Ensure there are at least two queues::"
msgstr ""

#: ../../../networking/iou-zcrx.rst:56
msgid "Enable header/data split::"
msgstr ""

#: ../../../networking/iou-zcrx.rst:60
msgid "Carve out half of the HW Rx queues for zero copy using RSS::"
msgstr ""

#: ../../../networking/iou-zcrx.rst:64
msgid "Set up flow steering, bearing in mind that queues are 0-indexed::"
msgstr ""

#: ../../../networking/iou-zcrx.rst:69
msgid "Setup io_uring"
msgstr ""

#: ../../../networking/iou-zcrx.rst:71
msgid ""
"This section describes the low level io_uring kernel API. Please refer to "
"liburing documentation for how to use the higher level API."
msgstr ""

#: ../../../networking/iou-zcrx.rst:74
msgid "Create an io_uring instance with the following required setup flags::"
msgstr ""

#: ../../../networking/iou-zcrx.rst:81
msgid "Create memory area"
msgstr ""

#: ../../../networking/iou-zcrx.rst:83
msgid "Allocate userspace memory area for receiving zero copy data::"
msgstr ""

#: ../../../networking/iou-zcrx.rst:91
msgid "Create refill ring"
msgstr ""

#: ../../../networking/iou-zcrx.rst:93
msgid ""
"Allocate memory for a shared ringbuf used for returning consumed buffers::"
msgstr ""

#: ../../../networking/iou-zcrx.rst:100
msgid ""
"This refill ring consists of some space for the header, followed by an array "
"of ``struct io_uring_zcrx_rqe``::"
msgstr ""

#: ../../../networking/iou-zcrx.rst:109
msgid "Register ZC Rx"
msgstr ""

#: ../../../networking/iou-zcrx.rst:111
msgid "Fill in registration structs::"
msgstr ""

#: ../../../networking/iou-zcrx.rst:134
msgid "Register with kernel::"
msgstr ""

#: ../../../networking/iou-zcrx.rst:139
msgid "Map refill ring"
msgstr ""

#: ../../../networking/iou-zcrx.rst:141
msgid ""
"The kernel fills in fields for the refill ring in the registration ``struct "
"io_uring_zcrx_ifq_reg``. Map it into userspace::"
msgstr ""

#: ../../../networking/iou-zcrx.rst:154
msgid "Receiving data"
msgstr ""

#: ../../../networking/iou-zcrx.rst:156
msgid "Prepare a zero copy recv request::"
msgstr ""

#: ../../../networking/iou-zcrx.rst:164
msgid "Now, submit and wait::"
msgstr ""

#: ../../../networking/iou-zcrx.rst:168
msgid "Finally, process completions::"
msgstr ""

#: ../../../networking/iou-zcrx.rst:186
msgid "Recycling buffers"
msgstr ""

#: ../../../networking/iou-zcrx.rst:188
msgid "Return buffers back to the kernel to be used again::"
msgstr ""

#: ../../../networking/iou-zcrx.rst:200
msgid "Testing"
msgstr ""

#: ../../../networking/iou-zcrx.rst:202
msgid "See ``tools/testing/selftests/drivers/net/hw/iou-zcrx.c``"
msgstr ""
