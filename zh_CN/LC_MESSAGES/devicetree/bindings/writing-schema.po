# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-14 08:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../devicetree/bindings/writing-schema.rst:4
msgid "Writing Devicetree Bindings in json-schema"
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:6
msgid ""
"Devicetree bindings are written using json-schema vocabulary. Schema files "
"are written in a JSON-compatible subset of YAML. YAML is used instead of "
"JSON as it is considered more human readable and has some advantages such as "
"allowing comments (Prefixed with '#')."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:11
msgid "Also see :ref:`example-schema`."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:14
msgid "Schema Contents"
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:16
msgid ""
"Each schema doc is a structured json-schema which is defined by a set of top-"
"level properties. Generally, there is one binding defined per file. The top-"
"level json-schema properties used are:"
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:20
msgid "$id"
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:21
msgid ""
"A json-schema unique identifier string. The string must be a valid URI "
"typically containing the binding's filename and path. For DT schema, it must "
"begin with \"http://devicetree.org/schemas/\". The URL is used in "
"constructing references to other files specified in schema \"$ref\" "
"properties. A $ref value with a leading '/' will have the hostname "
"prepended. A $ref value with only a relative path or filename will be "
"prepended with the hostname and path components of the current schema file's "
"'$id' value. A URL is used even for local files, but there may not actually "
"be files present at those locations."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:30
msgid "$schema"
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:31
msgid "Indicates the meta-schema the schema file adheres to."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:33
msgid "title"
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:34
msgid ""
"A one-line description of the hardware being described in the binding schema."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:36
msgid "maintainers"
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:37
msgid ""
"A DT specific property. Contains a list of email address(es) for maintainers "
"of this binding."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:40
msgid "description"
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:41
msgid ""
"Optional. A multi-line text block containing any detailed information about "
"this hardware. It should contain things such as what the block or device "
"does, standards the device conforms to, and links to datasheets for more "
"information."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:46
msgid ""
"The YAML format has several options for defining the formatting of the text "
"block. The options are controlled with indicator characters following the "
"key (e.g. \"description: \\|\"). The minimum formatting needed for a block "
"should be used. The formatting controls can not only affect whether the YAML "
"can be parsed correctly, but are important when the text blocks are rendered "
"to another form. The options are as follows."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:53
msgid ""
"The default without any indicators is flowed, plain scalar style where "
"single line breaks and leading whitespace are stripped. Paragraphs are "
"delimited by blank lines (i.e. double line break). This style cannot contain "
"\": \" in it as it will be interpreted as a key. Any \" #\" sequence will be "
"interpreted as a comment. There's other restrictions on characters as well. "
"Most restrictions are on what the first character can be."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:60
msgid ""
"The second style is folded which is indicated by \">\" character. In "
"addition to maintaining line breaks on double line breaks, the folded style "
"also maintains leading whitespace beyond indentation of the first line. The "
"line breaks on indented lines are also maintained."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:65
msgid ""
"The third style is literal which is indicated by \"\\|\" character. The "
"literal style maintains all line breaks and whitespace (beyond indentation "
"of the first line)."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:69
msgid ""
"The above is not a complete description of YAML text blocks. More details on "
"multi-line YAML text blocks can be found online:"
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:72
msgid "https://yaml-multiline.info/"
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:74
msgid "https://www.yaml.info/learn/quote.html"
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:76
msgid "select"
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:77
msgid ""
"Optional. A json-schema used to match nodes for applying the schema. By "
"default, without 'select', nodes are matched against their possible "
"compatible-string values or node name. Most bindings should not need select."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:81
msgid "allOf"
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:82
msgid ""
"Optional. A list of other schemas to include. This is used to include other "
"schemas the binding conforms to. This may be schemas for a particular class "
"of devices such as I2C or SPI controllers."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:86
msgid "properties"
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:87
msgid ""
"A set of sub-schema defining all the DT properties for the binding. The "
"exact schema syntax depends on whether properties are known, common "
"properties (e.g. 'interrupts') or are binding/vendor-specific properties."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:92
msgid ""
"A property can also define a child DT node with child properties defined "
"under it."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:95
msgid "For more details on properties sections, see 'Property Schema' section."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:97
msgid "patternProperties"
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:98
msgid "Optional. Similar to 'properties', but names are regex."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:100
msgid "required"
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:101
msgid ""
"A list of DT properties from the 'properties' section that must always be "
"present."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:104
msgid "additionalProperties / unevaluatedProperties"
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:105
msgid ""
"Keywords controlling how schema will validate properties not matched by this "
"schema's 'properties' or 'patternProperties'. Each schema is supposed to "
"have exactly one of these keywords in top-level part, so either "
"additionalProperties or unevaluatedProperties. Nested nodes, so properties "
"being objects, are supposed to have one as well."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:111
msgid "additionalProperties: false"
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:112
msgid ""
"Most common case, where no additional schema is referenced or if this "
"binding allows subset of properties from other referenced schemas."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:115
msgid "unevaluatedProperties: false"
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:116
msgid ""
"Used when this binding references other schema whose all properties should "
"be allowed."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:119
msgid "additionalProperties: true"
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:120
msgid ""
"Top-level part: Rare case, used for schemas implementing common set of "
"properties. Such schemas are supposed to be referenced by other schemas, "
"which then use 'unevaluatedProperties: false'.  Typically bus or common-part "
"schemas."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:124
msgid ""
"Nested node: When listing only the expected compatible of the nested node "
"and there is an another schema matching that compatible which ends with one "
"of two above cases ('false')."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:129
msgid "examples"
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:130
msgid ""
"Optional. A list of one or more DTS hunks implementing this binding only. "
"Example should not contain unrelated device nodes, e.g. consumer nodes in a "
"provider binding, other nodes referenced by phandle. Note: YAML doesn't "
"allow leading tabs, so spaces must be used instead."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:135
msgid "Unless noted otherwise, all properties are required."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:138
msgid "Property Schema"
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:140
msgid ""
"The 'properties' section of the schema contains all the DT properties for a "
"binding. Each property contains a set of constraints using json-schema "
"vocabulary for that property. The properties schemas are what are used for "
"validation of DT files."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:145
msgid ""
"For common properties, only additional constraints not covered by the "
"common, binding schema need to be defined such as how many values are valid "
"or what possible values are valid."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:149
msgid ""
"Vendor-specific properties will typically need more detailed schema. With "
"the exception of boolean properties, they should have a reference to a type "
"in schemas/types.yaml. A \"description\" property is always required."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:153
msgid ""
"The Devicetree schemas don't exactly match the YAML-encoded DT data produced "
"by dtc. They are simplified to make them more compact and avoid a bunch of "
"boilerplate. The tools process the schema files to produce the final schema "
"for validation. There are currently 2 transformations the tools perform."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:158
msgid ""
"The default for arrays in json-schema is they are variable-sized and allow "
"more entries than explicitly defined. This can be restricted by defining "
"'minItems', 'maxItems', and 'additionalItems'. However, for DeviceTree "
"Schemas, a fixed size is desired in most cases, so these properties are "
"added based on the number of entries in an 'items' list."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:164
msgid ""
"The YAML Devicetree format also makes all string values an array and scalar "
"values a matrix (in order to define groupings) even when only a single value "
"is present. Single entries in schemas are fixed up to match this encoding."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:168
msgid ""
"When bindings cover multiple similar devices that differ in some properties, "
"those properties should be constrained for each device. This usually means:"
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:171
msgid ""
"In top level 'properties' define the property with the broadest constraints."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:172
msgid ""
"In 'if:then:' blocks, further narrow the constraints for those properties."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:173
msgid ""
"Do not define the properties within an 'if:then:' block (note that "
"'additionalItems' also won't allow that)."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:177
msgid "Coding style"
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:179
msgid ""
"Use YAML coding style (two-space indentation). For DTS examples in the "
"schema, preferred is four-space indentation."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:182
msgid ""
"Place entries in 'properties' and 'required' sections in the same order, "
"using style from Documentation/devicetree/bindings/dts-coding-style.rst."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:186
msgid "Testing"
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:189
msgid "Dependencies"
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:191
msgid ""
"The DT schema project must be installed in order to validate the DT schema "
"binding documents and validate DTS files using the DT schema. The DT schema "
"project can be installed with pip::"
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:197
msgid ""
"Note that 'dtschema' installation requires 'swig' and Python development "
"files installed first. On Debian/Ubuntu systems::"
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:202
msgid ""
"Several executables (dt-doc-validate, dt-mk-schema, dt-validate) will be "
"installed. Ensure they are in your PATH (~/.local/bin by default)."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:205
msgid ""
"Recommended is also to install yamllint (used by dtschema when present)."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:208
msgid "Running checks"
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:210
msgid ""
"The DT schema binding documents must be validated using the meta-schema (the "
"schema for the schema) to ensure they are both valid json-schema and valid "
"binding schema. All of the DT binding documents can be validated using the "
"``dt_binding_check`` target::"
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:217
msgid ""
"In order to perform validation of DT source files, use the ``dtbs_check`` "
"target::"
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:221
msgid ""
"Note that ``dtbs_check`` will skip any binding schema files with errors. It "
"is necessary to use ``dt_binding_check`` to get all the validation errors in "
"the binding schema files."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:225
msgid "It is possible to run both in a single command::"
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:229
msgid ""
"It is also possible to run checks with a subset of matching schema files by "
"setting the ``DT_SCHEMA_FILES`` variable to 1 or more specific schema files "
"or patterns (partial match of a fixed string). Each file or pattern should "
"be separated by ':'."
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:243
msgid "json-schema Resources"
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:246
msgid "`JSON-Schema Specifications <http://json-schema.org/>`_"
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:248
msgid "`Using JSON Schema Book <http://usingjsonschema.com/>`_"
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:253
msgid "Annotated Example Schema"
msgstr ""

#: ../../../devicetree/bindings/writing-schema.rst:255
msgid "Also available as a separate file: :download:`example-schema.yaml`"
msgstr ""
