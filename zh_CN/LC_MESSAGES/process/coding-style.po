# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../process/coding-style.rst:4
msgid "Linux kernel coding style"
msgstr ""

#: ../../../process/coding-style.rst:6
msgid ""
"This is a short document describing the preferred coding style for the linux "
"kernel.  Coding style is very personal, and I won't **force** my views on "
"anybody, but this is what goes for anything that I have to be able to "
"maintain, and I'd prefer it for most other things too.  Please at least "
"consider the points made here."
msgstr ""

#: ../../../process/coding-style.rst:12
msgid ""
"First off, I'd suggest printing out a copy of the GNU coding standards, and "
"NOT read it.  Burn them, it's a great symbolic gesture."
msgstr ""

#: ../../../process/coding-style.rst:15
msgid "Anyway, here goes:"
msgstr ""

#: ../../../process/coding-style.rst:19
msgid "1) Indentation"
msgstr ""

#: ../../../process/coding-style.rst:21
msgid ""
"Tabs are 8 characters, and thus indentations are also 8 characters. There "
"are heretic movements that try to make indentations 4 (or even 2!) "
"characters deep, and that is akin to trying to define the value of PI to be "
"3."
msgstr ""

#: ../../../process/coding-style.rst:26
msgid ""
"Rationale: The whole idea behind indentation is to clearly define where a "
"block of control starts and ends.  Especially when you've been looking at "
"your screen for 20 straight hours, you'll find it a lot easier to see how "
"the indentation works if you have large indentations."
msgstr ""

#: ../../../process/coding-style.rst:31
msgid ""
"Now, some people will claim that having 8-character indentations makes the "
"code move too far to the right, and makes it hard to read on a 80-character "
"terminal screen.  The answer to that is that if you need more than 3 levels "
"of indentation, you're screwed anyway, and should fix your program."
msgstr ""

#: ../../../process/coding-style.rst:37
msgid ""
"In short, 8-char indents make things easier to read, and have the added "
"benefit of warning you when you're nesting your functions too deep. Heed "
"that warning."
msgstr ""

#: ../../../process/coding-style.rst:41
msgid ""
"The preferred way to ease multiple indentation levels in a switch statement "
"is to align the ``switch`` and its subordinate ``case`` labels in the same "
"column instead of ``double-indenting`` the ``case`` labels.  E.g.:"
msgstr ""

#: ../../../process/coding-style.rst:64
msgid ""
"Don't put multiple statements on a single line unless you have something to "
"hide:"
msgstr ""

#: ../../../process/coding-style.rst:72
msgid "Don't use commas to avoid using braces:"
msgstr ""

#: ../../../process/coding-style.rst:79
msgid "Always uses braces for multiple statements:"
msgstr ""

#: ../../../process/coding-style.rst:88
msgid ""
"Don't put multiple assignments on a single line either.  Kernel coding style "
"is super simple.  Avoid tricky expressions."
msgstr ""

#: ../../../process/coding-style.rst:92
msgid ""
"Outside of comments, documentation and except in Kconfig, spaces are never "
"used for indentation, and the above example is deliberately broken."
msgstr ""

#: ../../../process/coding-style.rst:95
msgid "Get a decent editor and don't leave whitespace at the end of lines."
msgstr ""

#: ../../../process/coding-style.rst:99
msgid "2) Breaking long lines and strings"
msgstr ""

#: ../../../process/coding-style.rst:101
msgid ""
"Coding style is all about readability and maintainability using commonly "
"available tools."
msgstr ""

#: ../../../process/coding-style.rst:104
msgid "The preferred limit on the length of a single line is 80 columns."
msgstr ""

#: ../../../process/coding-style.rst:106
msgid ""
"Statements longer than 80 columns should be broken into sensible chunks, "
"unless exceeding 80 columns significantly increases readability and does not "
"hide information."
msgstr ""

#: ../../../process/coding-style.rst:110
msgid ""
"Descendants are always substantially shorter than the parent and are placed "
"substantially to the right.  A very commonly used style is to align "
"descendants to a function open parenthesis."
msgstr ""

#: ../../../process/coding-style.rst:114
msgid ""
"These same rules are applied to function headers with a long argument list."
msgstr ""

#: ../../../process/coding-style.rst:116
msgid ""
"However, never break user-visible strings such as printk messages because "
"that breaks the ability to grep for them."
msgstr ""

#: ../../../process/coding-style.rst:121
msgid "3) Placing Braces and Spaces"
msgstr ""

#: ../../../process/coding-style.rst:123
msgid ""
"The other issue that always comes up in C styling is the placement of "
"braces.  Unlike the indent size, there are few technical reasons to choose "
"one placement strategy over the other, but the preferred way, as shown to us "
"by the prophets Kernighan and Ritchie, is to put the opening brace last on "
"the line, and put the closing brace first, thusly:"
msgstr ""

#: ../../../process/coding-style.rst:135
msgid ""
"This applies to all non-function statement blocks (if, switch, for, while, "
"do).  E.g.:"
msgstr ""

#: ../../../process/coding-style.rst:151
msgid ""
"However, there is one special case, namely functions: they have the opening "
"brace at the beginning of the next line, thus:"
msgstr ""

#: ../../../process/coding-style.rst:161
msgid ""
"Heretic people all over the world have claimed that this inconsistency "
"is ...  well ...  inconsistent, but all right-thinking people know that (a) "
"K&R are **right** and (b) K&R are right.  Besides, functions are special "
"anyway (you can't nest them in C)."
msgstr ""

#: ../../../process/coding-style.rst:166
msgid ""
"Note that the closing brace is empty on a line of its own, **except** in the "
"cases where it is followed by a continuation of the same statement, ie a "
"``while`` in a do-statement or an ``else`` in an if-statement, like this:"
msgstr ""

#: ../../../process/coding-style.rst:177 ../../../process/coding-style.rst:204
msgid "and"
msgstr ""

#: ../../../process/coding-style.rst:189
msgid "Rationale: K&R."
msgstr ""

#: ../../../process/coding-style.rst:191
msgid ""
"Also, note that this brace-placement also minimizes the number of empty (or "
"almost empty) lines, without any loss of readability.  Thus, as the supply "
"of new-lines on your screen is not a renewable resource (think 25-line "
"terminal screens here), you have more empty lines to put comments on."
msgstr ""

#: ../../../process/coding-style.rst:197
msgid "Do not unnecessarily use braces where a single statement will do."
msgstr ""

#: ../../../process/coding-style.rst:213
msgid ""
"This does not apply if only one branch of a conditional statement is a "
"single statement; in the latter case use braces in both branches:"
msgstr ""

#: ../../../process/coding-style.rst:225
msgid ""
"Also, use braces when a loop contains more than a single simple statement:"
msgstr ""

#: ../../../process/coding-style.rst:235
msgid "3.1) Spaces"
msgstr ""

#: ../../../process/coding-style.rst:237
msgid ""
"Linux kernel style for use of spaces depends (mostly) on function-versus-"
"keyword usage.  Use a space after (most) keywords.  The notable exceptions "
"are sizeof, typeof, alignof, and __attribute__, which look somewhat like "
"functions (and are usually used with parentheses in Linux, although they are "
"not required in the language, as in: ``sizeof info`` after ``struct fileinfo "
"info;`` is declared)."
msgstr ""

#: ../../../process/coding-style.rst:244
msgid "So use a space after these keywords::"
msgstr ""

#: ../../../process/coding-style.rst:248
msgid "but not with sizeof, typeof, alignof, or __attribute__.  E.g.,"
msgstr ""

#: ../../../process/coding-style.rst:255
msgid ""
"Do not add spaces around (inside) parenthesized expressions.  This example "
"is **bad**:"
msgstr ""

#: ../../../process/coding-style.rst:263
msgid ""
"When declaring pointer data or a function that returns a pointer type, the "
"preferred use of ``*`` is adjacent to the data name or function name and not "
"adjacent to the type name.  Examples:"
msgstr ""

#: ../../../process/coding-style.rst:274
msgid ""
"Use one space around (on each side of) most binary and ternary operators, "
"such as any of these::"
msgstr ""

#: ../../../process/coding-style.rst:279
msgid "but no space after unary operators::"
msgstr ""

#: ../../../process/coding-style.rst:283
msgid "no space before the postfix increment & decrement unary operators::"
msgstr ""

#: ../../../process/coding-style.rst:287
msgid "no space after the prefix increment & decrement unary operators::"
msgstr ""

#: ../../../process/coding-style.rst:291
msgid "and no space around the ``.`` and ``->`` structure member operators."
msgstr ""

#: ../../../process/coding-style.rst:293
msgid ""
"Do not leave trailing whitespace at the ends of lines.  Some editors with "
"``smart`` indentation will insert whitespace at the beginning of new lines "
"as appropriate, so you can start typing the next line of code right away. "
"However, some such editors do not remove the whitespace if you end up not "
"putting a line of code there, such as if you leave a blank line.  As a "
"result, you end up with lines containing trailing whitespace."
msgstr ""

#: ../../../process/coding-style.rst:300
msgid ""
"Git will warn you about patches that introduce trailing whitespace, and can "
"optionally strip the trailing whitespace for you; however, if applying a "
"series of patches, this may make later patches in the series fail by "
"changing their context lines."
msgstr ""

#: ../../../process/coding-style.rst:307
msgid "4) Naming"
msgstr ""

#: ../../../process/coding-style.rst:309
msgid ""
"C is a Spartan language, and your naming conventions should follow suit. "
"Unlike Modula-2 and Pascal programmers, C programmers do not use cute names "
"like ThisVariableIsATemporaryCounter. A C programmer would call that "
"variable ``tmp``, which is much easier to write, and not the least more "
"difficult to understand."
msgstr ""

#: ../../../process/coding-style.rst:315
msgid ""
"HOWEVER, while mixed-case names are frowned upon, descriptive names for "
"global variables are a must.  To call a global function ``foo`` is a "
"shooting offense."
msgstr ""

#: ../../../process/coding-style.rst:319
msgid ""
"GLOBAL variables (to be used only if you **really** need them) need to have "
"descriptive names, as do global functions.  If you have a function that "
"counts the number of active users, you should call that "
"``count_active_users()`` or similar, you should **not** call it ``cntusr()``."
msgstr ""

#: ../../../process/coding-style.rst:324
msgid ""
"Encoding the type of a function into the name (so-called Hungarian notation) "
"is asinine - the compiler knows the types anyway and can check those, and it "
"only confuses the programmer."
msgstr ""

#: ../../../process/coding-style.rst:328
msgid ""
"LOCAL variable names should be short, and to the point.  If you have some "
"random integer loop counter, it should probably be called ``i``. Calling it "
"``loop_counter`` is non-productive, if there is no chance of it being mis-"
"understood.  Similarly, ``tmp`` can be just about any type of variable that "
"is used to hold a temporary value."
msgstr ""

#: ../../../process/coding-style.rst:334
msgid ""
"If you are afraid to mix up your local variable names, you have another "
"problem, which is called the function-growth-hormone-imbalance syndrome. See "
"chapter 6 (Functions)."
msgstr ""

#: ../../../process/coding-style.rst:338
msgid ""
"For symbol names and documentation, avoid introducing new usage of 'master / "
"slave' (or 'slave' independent of 'master') and 'blacklist / whitelist'."
msgstr ""

#: ../../../process/coding-style.rst:342
msgid "Recommended replacements for 'master / slave' are:"
msgstr ""

#: ../../../process/coding-style.rst:343
msgid ""
"'{primary,main} / {secondary,replica,subordinate}' '{initiator,requester} / "
"{target,responder}' '{controller,host} / {device,worker,proxy}' 'leader / "
"follower' 'director / performer'"
msgstr ""

#: ../../../process/coding-style.rst:349
msgid "Recommended replacements for 'blacklist/whitelist' are:"
msgstr ""

#: ../../../process/coding-style.rst:350
msgid "'denylist / allowlist' 'blocklist / passlist'"
msgstr ""

#: ../../../process/coding-style.rst:353
msgid ""
"Exceptions for introducing new usage is to maintain a userspace ABI/API, or "
"when updating code for an existing (as of 2020) hardware or protocol "
"specification that mandates those terms. For new specifications translate "
"specification usage of the terminology to the kernel coding standard where "
"possible."
msgstr ""

#: ../../../process/coding-style.rst:360
msgid "5) Typedefs"
msgstr ""

#: ../../../process/coding-style.rst:362
msgid ""
"Please don't use things like ``vps_t``. It's a **mistake** to use typedef "
"for structures and pointers. When you see a"
msgstr ""

#: ../../../process/coding-style.rst:370
msgid "in the source, what does it mean? In contrast, if it says"
msgstr ""

#: ../../../process/coding-style.rst:377
msgid "you can actually tell what ``a`` is."
msgstr ""

#: ../../../process/coding-style.rst:379
msgid ""
"Lots of people think that typedefs ``help readability``. Not so. They are "
"useful only for:"
msgstr ""

#: ../../../process/coding-style.rst:382
msgid ""
"totally opaque objects (where the typedef is actively used to **hide** what "
"the object is)."
msgstr ""

#: ../../../process/coding-style.rst:385
msgid ""
"Example: ``pte_t`` etc. opaque objects that you can only access using the "
"proper accessor functions."
msgstr ""

#: ../../../process/coding-style.rst:390
msgid ""
"Opaqueness and ``accessor functions`` are not good in themselves. The reason "
"we have them for things like pte_t etc. is that there really is absolutely "
"**zero** portably accessible information there."
msgstr ""

#: ../../../process/coding-style.rst:394
msgid ""
"Clear integer types, where the abstraction **helps** avoid confusion whether "
"it is ``int`` or ``long``."
msgstr ""

#: ../../../process/coding-style.rst:397
msgid ""
"u8/u16/u32 are perfectly fine typedefs, although they fit into category (d) "
"better than here."
msgstr ""

#: ../../../process/coding-style.rst:402
msgid ""
"Again - there needs to be a **reason** for this. If something is ``unsigned "
"long``, then there's no reason to do"
msgstr ""

#: ../../../process/coding-style.rst:405
msgid "typedef unsigned long myflags_t;"
msgstr ""

#: ../../../process/coding-style.rst:407
msgid ""
"but if there is a clear reason for why it under certain circumstances might "
"be an ``unsigned int`` and under other configurations might be ``unsigned "
"long``, then by all means go ahead and use a typedef."
msgstr ""

#: ../../../process/coding-style.rst:411
msgid ""
"when you use sparse to literally create a **new** type for type-checking."
msgstr ""

#: ../../../process/coding-style.rst:414
msgid ""
"New types which are identical to standard C99 types, in certain exceptional "
"circumstances."
msgstr ""

#: ../../../process/coding-style.rst:417
msgid ""
"Although it would only take a short amount of time for the eyes and brain to "
"become accustomed to the standard types like ``uint32_t``, some people "
"object to their use anyway."
msgstr ""

#: ../../../process/coding-style.rst:421
msgid ""
"Therefore, the Linux-specific ``u8/u16/u32/u64`` types and their signed "
"equivalents which are identical to standard types are permitted -- although "
"they are not mandatory in new code of your own."
msgstr ""

#: ../../../process/coding-style.rst:426
msgid ""
"When editing existing code which already uses one or the other set of types, "
"you should conform to the existing choices in that code."
msgstr ""

#: ../../../process/coding-style.rst:429
msgid "Types safe for use in userspace."
msgstr ""

#: ../../../process/coding-style.rst:431
msgid ""
"In certain structures which are visible to userspace, we cannot require C99 "
"types and cannot use the ``u32`` form above. Thus, we use __u32 and similar "
"types in all structures which are shared with userspace."
msgstr ""

#: ../../../process/coding-style.rst:436
msgid ""
"Maybe there are other cases too, but the rule should basically be to NEVER "
"EVER use a typedef unless you can clearly match one of those rules."
msgstr ""

#: ../../../process/coding-style.rst:439
msgid ""
"In general, a pointer, or a struct that has elements that can reasonably be "
"directly accessed should **never** be a typedef."
msgstr ""

#: ../../../process/coding-style.rst:444
msgid "6) Functions"
msgstr ""

#: ../../../process/coding-style.rst:446
msgid ""
"Functions should be short and sweet, and do just one thing.  They should fit "
"on one or two screenfuls of text (the ISO/ANSI screen size is 80x24, as we "
"all know), and do one thing and do that well."
msgstr ""

#: ../../../process/coding-style.rst:450
msgid ""
"The maximum length of a function is inversely proportional to the complexity "
"and indentation level of that function.  So, if you have a conceptually "
"simple function that is just one long (but simple) case-statement, where you "
"have to do lots of small things for a lot of different cases, it's OK to "
"have a longer function."
msgstr ""

#: ../../../process/coding-style.rst:456
msgid ""
"However, if you have a complex function, and you suspect that a less-than-"
"gifted first-year high-school student might not even understand what the "
"function is all about, you should adhere to the maximum limits all the more "
"closely.  Use helper functions with descriptive names (you can ask the "
"compiler to in-line them if you think it's performance-critical, and it will "
"probably do a better job of it than you would have done)."
msgstr ""

#: ../../../process/coding-style.rst:464
msgid ""
"Another measure of the function is the number of local variables.  They "
"shouldn't exceed 5-10, or you're doing something wrong.  Re-think the "
"function, and split it into smaller pieces.  A human brain can generally "
"easily keep track of about 7 different things, anything more and it gets "
"confused.  You know you're brilliant, but maybe you'd like to understand "
"what you did 2 weeks from now."
msgstr ""

#: ../../../process/coding-style.rst:471
msgid ""
"In source files, separate functions with one blank line.  If the function is "
"exported, the **EXPORT** macro for it should follow immediately after the "
"closing function brace line.  E.g.:"
msgstr ""

#: ../../../process/coding-style.rst:484
msgid "6.1) Function prototypes"
msgstr ""

#: ../../../process/coding-style.rst:486
msgid ""
"In function prototypes, include parameter names with their data types. "
"Although this is not required by the C language, it is preferred in Linux "
"because it is a simple way to add valuable information for the reader."
msgstr ""

#: ../../../process/coding-style.rst:490
msgid ""
"Do not use the ``extern`` keyword with function declarations as this makes "
"lines longer and isn't strictly necessary."
msgstr ""

#: ../../../process/coding-style.rst:493
msgid ""
"When writing function prototypes, please keep the `order of elements regular "
"<https://lore.kernel.org/mm-commits/CAHk-"
"=wiOCLRny5aifWNhr621kYrJwhfURsa0vFPeUEm8mF0ufg@mail.gmail.com/>`_. For "
"example, using this function declaration example::"
msgstr ""

#: ../../../process/coding-style.rst:500
msgid "The preferred order of elements for a function prototype is:"
msgstr ""

#: ../../../process/coding-style.rst:502
msgid ""
"storage class (below, ``static __always_inline``, noting that "
"``__always_inline`` is technically an attribute but is treated like "
"``inline``)"
msgstr ""

#: ../../../process/coding-style.rst:504
msgid ""
"storage class attributes (here, ``__init`` -- i.e. section declarations, but "
"also things like ``__cold``)"
msgstr ""

#: ../../../process/coding-style.rst:506
msgid "return type (here, ``void *``)"
msgstr ""

#: ../../../process/coding-style.rst:507
msgid "return type attributes (here, ``__must_check``)"
msgstr ""

#: ../../../process/coding-style.rst:508
msgid "function name (here, ``action``)"
msgstr ""

#: ../../../process/coding-style.rst:509
msgid ""
"function parameters (here, ``(enum magic value, size_t size, u8 count, char "
"*fmt, ...)``, noting that parameter names should always be included)"
msgstr ""

#: ../../../process/coding-style.rst:511
msgid "function parameter attributes (here, ``__printf(4, 5)``)"
msgstr ""

#: ../../../process/coding-style.rst:512
msgid "function behavior attributes (here, ``__malloc``)"
msgstr ""

#: ../../../process/coding-style.rst:514
msgid ""
"Note that for a function **definition** (i.e. the actual function body), the "
"compiler does not allow function parameter attributes after the function "
"parameters. In these cases, they should go after the storage class "
"attributes (e.g. note the changed position of ``__printf(4, 5)`` below, "
"compared to the **declaration** example above)::"
msgstr ""

#: ../../../process/coding-style.rst:527
msgid "7) Centralized exiting of functions"
msgstr ""

#: ../../../process/coding-style.rst:529
msgid ""
"Albeit deprecated by some people, the equivalent of the goto statement is "
"used frequently by compilers in form of the unconditional jump instruction."
msgstr ""

#: ../../../process/coding-style.rst:532
msgid ""
"The goto statement comes in handy when a function exits from multiple "
"locations and some common work such as cleanup has to be done.  If there is "
"no cleanup needed then just return directly."
msgstr ""

#: ../../../process/coding-style.rst:536
msgid ""
"Choose label names which say what the goto does or why the goto exists.  An "
"example of a good name could be ``out_free_buffer:`` if the goto frees "
"``buffer``. Avoid using GW-BASIC names like ``err1:`` and ``err2:``, as you "
"would have to renumber them if you ever add or remove exit paths, and they "
"make correctness difficult to verify anyway."
msgstr ""

#: ../../../process/coding-style.rst:542
msgid "The rationale for using gotos is:"
msgstr ""

#: ../../../process/coding-style.rst:544
msgid "unconditional statements are easier to understand and follow"
msgstr ""

#: ../../../process/coding-style.rst:545
msgid "nesting is reduced"
msgstr ""

#: ../../../process/coding-style.rst:546
msgid ""
"errors by not updating individual exit points when making modifications are "
"prevented"
msgstr ""

#: ../../../process/coding-style.rst:548
msgid "saves the compiler work to optimize redundant code away ;)"
msgstr ""

#: ../../../process/coding-style.rst:574
msgid ""
"A common type of bug to be aware of is ``one err bugs`` which look like this:"
msgstr ""

#: ../../../process/coding-style.rst:583
msgid ""
"The bug in this code is that on some exit paths ``foo`` is NULL.  Normally "
"the fix for this is to split it up into two error labels ``err_free_bar:`` "
"and ``err_free_foo:``:"
msgstr ""

#: ../../../process/coding-style.rst:595
msgid "Ideally you should simulate errors to test all exit paths."
msgstr ""

#: ../../../process/coding-style.rst:599
msgid "8) Commenting"
msgstr ""

#: ../../../process/coding-style.rst:601
msgid ""
"Comments are good, but there is also a danger of over-commenting.  NEVER try "
"to explain HOW your code works in a comment: it's much better to write the "
"code so that the **working** is obvious, and it's a waste of time to explain "
"badly written code."
msgstr ""

#: ../../../process/coding-style.rst:606
msgid ""
"Generally, you want your comments to tell WHAT your code does, not HOW. "
"Also, try to avoid putting comments inside a function body: if the function "
"is so complex that you need to separately comment parts of it, you should "
"probably go back to chapter 6 for a while.  You can make small comments to "
"note or warn about something particularly clever (or ugly), but try to avoid "
"excess.  Instead, put the comments at the head of the function, telling "
"people what it does, and possibly WHY it does it."
msgstr ""

#: ../../../process/coding-style.rst:615
msgid ""
"When commenting the kernel API functions, please use the kernel-doc format. "
"See the files at :ref:`Documentation/doc-guide/ <doc_guide>` and ``scripts/"
"kernel-doc`` for details. Note that the danger of over-commenting applies to "
"kernel-doc comments all the same. Do not add boilerplate kernel-doc which "
"simply reiterates what's obvious from the signature of the function."
msgstr ""

#: ../../../process/coding-style.rst:622
msgid "The preferred style for long (multi-line) comments is:"
msgstr ""

#: ../../../process/coding-style.rst:635
msgid ""
"It's also important to comment data, whether they are basic types or derived "
"types.  To this end, use just one data declaration per line (no commas for "
"multiple data declarations).  This leaves you room for a small comment on "
"each item, explaining its use."
msgstr ""

#: ../../../process/coding-style.rst:642
msgid "9) You've made a mess of it"
msgstr ""

#: ../../../process/coding-style.rst:644
msgid ""
"That's OK, we all do.  You've probably been told by your long-time Unix user "
"helper that ``GNU emacs`` automatically formats the C sources for you, and "
"you've noticed that yes, it does do that, but the defaults it uses are less "
"than desirable (in fact, they are worse than random typing - an infinite "
"number of monkeys typing into GNU emacs would never make a good program)."
msgstr ""

#: ../../../process/coding-style.rst:651
msgid ""
"So, you can either get rid of GNU emacs, or change it to use saner values.  "
"To do the latter, you can stick the following in your .emacs file:"
msgstr ""

#: ../../../process/coding-style.rst:703
msgid ""
"This will make emacs go better with the kernel coding style for C files "
"below ``~/src/linux-trees``."
msgstr ""

#: ../../../process/coding-style.rst:706
msgid ""
"But even if you fail in getting emacs to do sane formatting, not everything "
"is lost: use ``indent``."
msgstr ""

#: ../../../process/coding-style.rst:709
msgid ""
"Now, again, GNU indent has the same brain-dead settings that GNU emacs has, "
"which is why you need to give it a few command line options. However, that's "
"not too bad, because even the makers of GNU indent recognize the authority "
"of K&R (the GNU people aren't evil, they are just severely misguided in this "
"matter), so you just give indent the options ``-kr -i8`` (stands for ``K&R, "
"8 character indents``), or use ``scripts/Lindent``, which indents in the "
"latest style."
msgstr ""

#: ../../../process/coding-style.rst:717
msgid ""
"``indent`` has a lot of options, and especially when it comes to comment re-"
"formatting you may want to take a look at the man page.  But remember: "
"``indent`` is not a fix for bad programming."
msgstr ""

#: ../../../process/coding-style.rst:721
msgid ""
"Note that you can also use the ``clang-format`` tool to help you with these "
"rules, to quickly re-format parts of your code automatically, and to review "
"full files in order to spot coding style mistakes, typos and possible "
"improvements. It is also handy for sorting ``#includes``, for aligning "
"variables/macros, for reflowing text and other similar tasks. See the file :"
"ref:`Documentation/dev-tools/clang-format.rst <clangformat>` for more "
"details."
msgstr ""

#: ../../../process/coding-style.rst:729
msgid ""
"Some basic editor settings, such as indentation and line endings, will be "
"set automatically if you are using an editor that is compatible with "
"EditorConfig. See the official EditorConfig website for more information: "
"https://editorconfig.org/"
msgstr ""

#: ../../../process/coding-style.rst:735
msgid "10) Kconfig configuration files"
msgstr ""

#: ../../../process/coding-style.rst:737
msgid ""
"For all of the Kconfig* configuration files throughout the source tree, the "
"indentation is somewhat different.  Lines under a ``config`` definition are "
"indented with one tab, while help text is indented an additional two "
"spaces.  Example::"
msgstr ""

#: ../../../process/coding-style.rst:751
msgid ""
"Seriously dangerous features (such as write support for certain filesystems) "
"should advertise this prominently in their prompt string::"
msgstr ""

#: ../../../process/coding-style.rst:759
msgid ""
"For full documentation on the configuration files, see the file "
"Documentation/kbuild/kconfig-language.rst."
msgstr ""

#: ../../../process/coding-style.rst:764
msgid "11) Data structures"
msgstr ""

#: ../../../process/coding-style.rst:766
msgid ""
"Data structures that have visibility outside the single-threaded environment "
"they are created and destroyed in should always have reference counts.  In "
"the kernel, garbage collection doesn't exist (and outside the kernel garbage "
"collection is slow and inefficient), which means that you absolutely "
"**have** to reference count all your uses."
msgstr ""

#: ../../../process/coding-style.rst:772
msgid ""
"Reference counting means that you can avoid locking, and allows multiple "
"users to have access to the data structure in parallel - and not having to "
"worry about the structure suddenly going away from under them just because "
"they slept or did something else for a while."
msgstr ""

#: ../../../process/coding-style.rst:777
msgid ""
"Note that locking is **not** a replacement for reference counting. Locking "
"is used to keep data structures coherent, while reference counting is a "
"memory management technique.  Usually both are needed, and they are not to "
"be confused with each other."
msgstr ""

#: ../../../process/coding-style.rst:782
msgid ""
"Many data structures can indeed have two levels of reference counting, when "
"there are users of different ``classes``.  The subclass count counts the "
"number of subclass users, and decrements the global count just once when the "
"subclass count goes to zero."
msgstr ""

#: ../../../process/coding-style.rst:787
msgid ""
"Examples of this kind of ``multi-level-reference-counting`` can be found in "
"memory management (``struct mm_struct``: mm_users and mm_count), and in "
"filesystem code (``struct super_block``: s_count and s_active)."
msgstr ""

#: ../../../process/coding-style.rst:791
msgid ""
"Remember: if another thread can find your data structure, and you don't have "
"a reference count on it, you almost certainly have a bug."
msgstr ""

#: ../../../process/coding-style.rst:796
msgid "12) Macros, Enums and RTL"
msgstr ""

#: ../../../process/coding-style.rst:798
msgid "Names of macros defining constants and labels in enums are capitalized."
msgstr ""

#: ../../../process/coding-style.rst:804
msgid "Enums are preferred when defining several related constants."
msgstr ""

#: ../../../process/coding-style.rst:806
msgid ""
"CAPITALIZED macro names are appreciated but macros resembling functions may "
"be named in lower case."
msgstr ""

#: ../../../process/coding-style.rst:809
msgid ""
"Generally, inline functions are preferable to macros resembling functions."
msgstr ""

#: ../../../process/coding-style.rst:811
msgid ""
"Macros with multiple statements should be enclosed in a do - while block:"
msgstr ""

#: ../../../process/coding-style.rst:821
msgid ""
"Function-like macros with unused parameters should be replaced by static "
"inline functions to avoid the issue of unused variables:"
msgstr ""

#: ../../../process/coding-style.rst:830
msgid ""
"Due to historical practices, many files still employ the \"cast to (void)\" "
"approach to evaluate parameters. However, this method is not advisable. "
"Inline functions address the issue of \"expression with side effects "
"evaluated more than once\", circumvent unused-variable problems, and are "
"generally better documented than macros for some reason."
msgstr ""

#: ../../../process/coding-style.rst:844
msgid "Things to avoid when using macros:"
msgstr ""

#: ../../../process/coding-style.rst:846
msgid "macros that affect control flow:"
msgstr ""

#: ../../../process/coding-style.rst:856
msgid ""
"is a **very** bad idea.  It looks like a function call but exits the "
"``calling`` function; don't break the internal parsers of those who will "
"read the code."
msgstr ""

#: ../../../process/coding-style.rst:859
msgid "macros that depend on having a local variable with a magic name:"
msgstr ""

#: ../../../process/coding-style.rst:865
msgid ""
"might look like a good thing, but it's confusing as hell when one reads the "
"code and it's prone to breakage from seemingly innocent changes."
msgstr ""

#: ../../../process/coding-style.rst:868
msgid ""
"3) macros with arguments that are used as l-values: FOO(x) = y; will bite "
"you if somebody e.g. turns FOO into an inline function."
msgstr ""

#: ../../../process/coding-style.rst:871
msgid ""
"4) forgetting about precedence: macros defining constants using expressions "
"must enclose the expression in parentheses. Beware of similar issues with "
"macros using parameters."
msgstr ""

#: ../../../process/coding-style.rst:880
msgid ""
"5) namespace collisions when defining local variables in macros resembling "
"functions:"
msgstr ""

#: ../../../process/coding-style.rst:892
msgid ""
"ret is a common name for a local variable - __foo_ret is less likely to "
"collide with an existing variable."
msgstr ""

#: ../../../process/coding-style.rst:895
msgid ""
"The cpp manual deals with macros exhaustively. The gcc internals manual also "
"covers RTL which is used frequently with assembly language in the kernel."
msgstr ""

#: ../../../process/coding-style.rst:900
msgid "13) Printing kernel messages"
msgstr ""

#: ../../../process/coding-style.rst:902
msgid ""
"Kernel developers like to be seen as literate. Do mind the spelling of "
"kernel messages to make a good impression. Do not use incorrect contractions "
"like ``dont``; use ``do not`` or ``don't`` instead. Make the messages "
"concise, clear, and unambiguous."
msgstr ""

#: ../../../process/coding-style.rst:907
msgid "Kernel messages do not have to be terminated with a period."
msgstr ""

#: ../../../process/coding-style.rst:909
msgid ""
"Printing numbers in parentheses (%d) adds no value and should be avoided."
msgstr ""

#: ../../../process/coding-style.rst:911
msgid ""
"There are a number of driver model diagnostic macros in <linux/dev_printk.h> "
"which you should use to make sure messages are matched to the right device "
"and driver, and are tagged with the right level:  dev_err(), dev_warn(), "
"dev_info(), and so forth.  For messages that aren't associated with a "
"particular device, <linux/printk.h> defines pr_notice(), pr_info(), "
"pr_warn(), pr_err(), etc. When drivers are working properly they are quiet, "
"so prefer to use dev_dbg/pr_debug unless something is wrong."
msgstr ""

#: ../../../process/coding-style.rst:919
msgid ""
"Coming up with good debugging messages can be quite a challenge; and once "
"you have them, they can be a huge help for remote troubleshooting.  However "
"debug message printing is handled differently than printing other non-debug "
"messages.  While the other pr_XXX() functions print unconditionally, "
"pr_debug() does not; it is compiled out by default, unless either DEBUG is "
"defined or CONFIG_DYNAMIC_DEBUG is set.  That is true for dev_dbg() also, "
"and a related convention uses VERBOSE_DEBUG to add dev_vdbg() messages to "
"the ones already enabled by DEBUG."
msgstr ""

#: ../../../process/coding-style.rst:928
msgid ""
"Many subsystems have Kconfig debug options to turn on -DDEBUG in the "
"corresponding Makefile; in other cases specific files #define DEBUG.  And "
"when a debug message should be unconditionally printed, such as if it is "
"already inside a debug-related #ifdef section, printk(KERN_DEBUG ...) can be "
"used."
msgstr ""

#: ../../../process/coding-style.rst:936
msgid "14) Allocating memory"
msgstr ""

#: ../../../process/coding-style.rst:938
msgid ""
"The kernel provides the following general purpose memory allocators: "
"kmalloc(), kzalloc(), kmalloc_array(), kcalloc(), vmalloc(), and vzalloc().  "
"Please refer to the API documentation for further information about them.  :"
"ref:`Documentation/core-api/memory-allocation.rst <memory_allocation>`"
msgstr ""

#: ../../../process/coding-style.rst:944
msgid "The preferred form for passing a size of a struct is the following:"
msgstr ""

#: ../../../process/coding-style.rst:950
msgid ""
"The alternative form where struct name is spelled out hurts readability and "
"introduces an opportunity for a bug when the pointer variable type is "
"changed but the corresponding sizeof that is passed to a memory allocator is "
"not."
msgstr ""

#: ../../../process/coding-style.rst:954
msgid ""
"Casting the return value which is a void pointer is redundant. The "
"conversion from void pointer to any other pointer type is guaranteed by the "
"C programming language."
msgstr ""

#: ../../../process/coding-style.rst:958
msgid "The preferred form for allocating an array is the following:"
msgstr ""

#: ../../../process/coding-style.rst:964
msgid "The preferred form for allocating a zeroed array is the following:"
msgstr ""

#: ../../../process/coding-style.rst:970
msgid ""
"Both forms check for overflow on the allocation size n * sizeof(...), and "
"return NULL if that occurred."
msgstr ""

#: ../../../process/coding-style.rst:973
msgid ""
"These generic allocation functions all emit a stack dump on failure when "
"used without __GFP_NOWARN so there is no use in emitting an additional "
"failure message when NULL is returned."
msgstr ""

#: ../../../process/coding-style.rst:978
msgid "15) The inline disease"
msgstr ""

#: ../../../process/coding-style.rst:980
msgid ""
"There appears to be a common misperception that gcc has a magic \"make me "
"faster\" speedup option called ``inline``. While the use of inlines can be "
"appropriate (for example as a means of replacing macros, see Chapter 12), it "
"very often is not. Abundant use of the inline keyword leads to a much bigger "
"kernel, which in turn slows the system as a whole down, due to a bigger "
"icache footprint for the CPU and simply because there is less memory "
"available for the pagecache. Just think about it; a pagecache miss causes a "
"disk seek, which easily takes 5 milliseconds. There are a LOT of cpu cycles "
"that can go into these 5 milliseconds."
msgstr ""

#: ../../../process/coding-style.rst:990
msgid ""
"A reasonable rule of thumb is to not put inline at functions that have more "
"than 3 lines of code in them. An exception to this rule are the cases where "
"a parameter is known to be a compile time constant, and as a result of this "
"constantness you *know* the compiler will be able to optimize most of your "
"function away at compile time. For a good example of this later case, see "
"the kmalloc() inline function."
msgstr ""

#: ../../../process/coding-style.rst:997
msgid ""
"Often people argue that adding inline to functions that are static and used "
"only once is always a win since there is no space tradeoff. While this is "
"technically correct, gcc is capable of inlining these automatically without "
"help, and the maintenance issue of removing the inline when a second user "
"appears outweighs the potential value of the hint that tells gcc to do "
"something it would have done anyway."
msgstr ""

#: ../../../process/coding-style.rst:1006
msgid "16) Function return values and names"
msgstr ""

#: ../../../process/coding-style.rst:1008
msgid ""
"Functions can return values of many different kinds, and one of the most "
"common is a value indicating whether the function succeeded or failed.  Such "
"a value can be represented as an error-code integer (-Exxx = failure, 0 = "
"success) or a ``succeeded`` boolean (0 = failure, non-zero = success)."
msgstr ""

#: ../../../process/coding-style.rst:1014
msgid ""
"Mixing up these two sorts of representations is a fertile source of "
"difficult-to-find bugs.  If the C language included a strong distinction "
"between integers and booleans then the compiler would find these mistakes "
"for us... but it doesn't.  To help prevent such bugs, always follow this "
"convention::"
msgstr ""

#: ../../../process/coding-style.rst:1024
msgid ""
"For example, ``add work`` is a command, and the add_work() function returns "
"0 for success or -EBUSY for failure.  In the same way, ``PCI device "
"present`` is a predicate, and the pci_dev_present() function returns 1 if it "
"succeeds in finding a matching device or 0 if it doesn't."
msgstr ""

#: ../../../process/coding-style.rst:1029
msgid ""
"All EXPORTed functions must respect this convention, and so should all "
"public functions.  Private (static) functions need not, but it is "
"recommended that they do."
msgstr ""

#: ../../../process/coding-style.rst:1033
msgid ""
"Functions whose return value is the actual result of a computation, rather "
"than an indication of whether the computation succeeded, are not subject to "
"this rule.  Generally they indicate failure by returning some out-of-range "
"result.  Typical examples would be functions that return pointers; they use "
"NULL or the ERR_PTR mechanism to report failure."
msgstr ""

#: ../../../process/coding-style.rst:1041
msgid "17) Using bool"
msgstr ""

#: ../../../process/coding-style.rst:1043
msgid ""
"The Linux kernel bool type is an alias for the C99 _Bool type. bool values "
"can only evaluate to 0 or 1, and implicit or explicit conversion to bool "
"automatically converts the value to true or false. When using bool types "
"the !! construction is not needed, which eliminates a class of bugs."
msgstr ""

#: ../../../process/coding-style.rst:1048
msgid ""
"When working with bool values the true and false definitions should be used "
"instead of 1 and 0."
msgstr ""

#: ../../../process/coding-style.rst:1051
msgid ""
"bool function return types and stack variables are always fine to use "
"whenever appropriate. Use of bool is encouraged to improve readability and "
"is often a better option than 'int' for storing boolean values."
msgstr ""

#: ../../../process/coding-style.rst:1055
msgid ""
"Do not use bool if cache line layout or size of the value matters, as its "
"size and alignment varies based on the compiled architecture. Structures "
"that are optimized for alignment and size should not use bool."
msgstr ""

#: ../../../process/coding-style.rst:1059
msgid ""
"If a structure has many true/false values, consider consolidating them into "
"a bitfield with 1 bit members, or using an appropriate fixed width type, "
"such as u8."
msgstr ""

#: ../../../process/coding-style.rst:1063
msgid ""
"Similarly for function arguments, many true/false values can be consolidated "
"into a single bitwise 'flags' argument and 'flags' can often be a more "
"readable alternative if the call-sites have naked true/false constants."
msgstr ""

#: ../../../process/coding-style.rst:1067
msgid ""
"Otherwise limited use of bool in structures and arguments can improve "
"readability."
msgstr ""

#: ../../../process/coding-style.rst:1071
msgid "18) Don't re-invent the kernel macros"
msgstr ""

#: ../../../process/coding-style.rst:1073
msgid ""
"The header file include/linux/kernel.h contains a number of macros that you "
"should use, rather than explicitly coding some variant of them yourself. For "
"example, if you need to calculate the length of an array, take advantage of "
"the macro"
msgstr ""

#: ../../../process/coding-style.rst:1082
msgid ""
"Similarly, if you need to calculate the size of some structure member, use"
msgstr ""

#: ../../../process/coding-style.rst:1088
msgid ""
"There are also min() and max() macros that do strict type checking if you "
"need them.  Feel free to peruse that header file to see what else is already "
"defined that you shouldn't reproduce in your code."
msgstr ""

#: ../../../process/coding-style.rst:1094
msgid "19) Editor modelines and other cruft"
msgstr ""

#: ../../../process/coding-style.rst:1096
msgid ""
"Some editors can interpret configuration information embedded in source "
"files, indicated with special markers.  For example, emacs interprets lines "
"marked like this:"
msgstr ""

#: ../../../process/coding-style.rst:1104
msgid "Or like this:"
msgstr ""

#: ../../../process/coding-style.rst:1114
msgid "Vim interprets markers that look like this:"
msgstr ""

#: ../../../process/coding-style.rst:1120
msgid ""
"Do not include any of these in source files.  People have their own personal "
"editor configurations, and your source files should not override them.  This "
"includes markers for indentation and mode configuration.  People may use "
"their own custom mode, or may have some other magic method for making "
"indentation work correctly."
msgstr ""

#: ../../../process/coding-style.rst:1128
msgid "20) Inline assembly"
msgstr ""

#: ../../../process/coding-style.rst:1130
msgid ""
"In architecture-specific code, you may need to use inline assembly to "
"interface with CPU or platform functionality.  Don't hesitate to do so when "
"necessary. However, don't use inline assembly gratuitously when C can do the "
"job.  You can and should poke hardware from C when possible."
msgstr ""

#: ../../../process/coding-style.rst:1135
msgid ""
"Consider writing simple helper functions that wrap common bits of inline "
"assembly, rather than repeatedly writing them with slight variations.  "
"Remember that inline assembly can use C parameters."
msgstr ""

#: ../../../process/coding-style.rst:1139
msgid ""
"Large, non-trivial assembly functions should go in .S files, with "
"corresponding C prototypes defined in C header files.  The C prototypes for "
"assembly functions should use ``asmlinkage``."
msgstr ""

#: ../../../process/coding-style.rst:1143
msgid ""
"You may need to mark your asm statement as volatile, to prevent GCC from "
"removing it if GCC doesn't notice any side effects.  You don't always need "
"to do so, though, and doing so unnecessarily can limit optimization."
msgstr ""

#: ../../../process/coding-style.rst:1147
msgid ""
"When writing a single inline assembly statement containing multiple "
"instructions, put each instruction on a separate line in a separate quoted "
"string, and end each string except the last with ``\\n\\t`` to properly "
"indent the next instruction in the assembly output:"
msgstr ""

#: ../../../process/coding-style.rst:1160
msgid "21) Conditional Compilation"
msgstr ""

#: ../../../process/coding-style.rst:1162
msgid ""
"Wherever possible, don't use preprocessor conditionals (#if, #ifdef) in .c "
"files; doing so makes code harder to read and logic harder to follow.  "
"Instead, use such conditionals in a header file defining functions for use "
"in those .c files, providing no-op stub versions in the #else case, and then "
"call those functions unconditionally from .c files.  The compiler will avoid "
"generating any code for the stub calls, producing identical results, but the "
"logic will remain easy to follow."
msgstr ""

#: ../../../process/coding-style.rst:1170
msgid ""
"Prefer to compile out entire functions, rather than portions of functions or "
"portions of expressions.  Rather than putting an ifdef in an expression, "
"factor out part or all of the expression into a separate helper function and "
"apply the conditional to that function."
msgstr ""

#: ../../../process/coding-style.rst:1175
msgid ""
"If you have a function or variable which may potentially go unused in a "
"particular configuration, and the compiler would warn about its definition "
"going unused, mark the definition as __maybe_unused rather than wrapping it "
"in a preprocessor conditional.  (However, if a function or variable *always* "
"goes unused, delete it.)"
msgstr ""

#: ../../../process/coding-style.rst:1181
msgid ""
"Within code, where possible, use the IS_ENABLED macro to convert a Kconfig "
"symbol into a C boolean expression, and use it in a normal C conditional:"
msgstr ""

#: ../../../process/coding-style.rst:1190
msgid ""
"The compiler will constant-fold the conditional away, and include or exclude "
"the block of code just as with an #ifdef, so this will not add any runtime "
"overhead.  However, this approach still allows the C compiler to see the "
"code inside the block, and check it for correctness (syntax, types, symbol "
"references, etc).  Thus, you still have to use an #ifdef if the code inside "
"the block references symbols that will not exist if the condition is not met."
msgstr ""

#: ../../../process/coding-style.rst:1197
msgid ""
"At the end of any non-trivial #if or #ifdef block (more than a few lines), "
"place a comment after the #endif on the same line, noting the conditional "
"expression used.  For instance:"
msgstr ""

#: ../../../process/coding-style.rst:1209
msgid "22) Do not crash the kernel"
msgstr ""

#: ../../../process/coding-style.rst:1211
msgid ""
"In general, the decision to crash the kernel belongs to the user, rather "
"than to the kernel developer."
msgstr ""

#: ../../../process/coding-style.rst:1215
msgid "Avoid panic()"
msgstr ""

#: ../../../process/coding-style.rst:1217
msgid ""
"panic() should be used with care and primarily only during system boot. "
"panic() is, for example, acceptable when running out of memory during boot "
"and not being able to continue."
msgstr ""

#: ../../../process/coding-style.rst:1222
msgid "Use WARN() rather than BUG()"
msgstr ""

#: ../../../process/coding-style.rst:1224
msgid ""
"Do not add new code that uses any of the BUG() variants, such as BUG(), "
"BUG_ON(), or VM_BUG_ON(). Instead, use a WARN*() variant, preferably "
"WARN_ON_ONCE(), and possibly with recovery code. Recovery code is not "
"required if there is no reasonable way to at least partially recover."
msgstr ""

#: ../../../process/coding-style.rst:1229
msgid ""
"\"I'm too lazy to do error handling\" is not an excuse for using BUG(). "
"Major internal corruptions with no way of continuing may still use BUG(), "
"but need good justification."
msgstr ""

#: ../../../process/coding-style.rst:1234
msgid "Use WARN_ON_ONCE() rather than WARN() or WARN_ON()"
msgstr ""

#: ../../../process/coding-style.rst:1236
msgid ""
"WARN_ON_ONCE() is generally preferred over WARN() or WARN_ON(), because it "
"is common for a given warning condition, if it occurs at all, to occur "
"multiple times. This can fill up and wrap the kernel log, and can even slow "
"the system enough that the excessive logging turns into its own, additional "
"problem."
msgstr ""

#: ../../../process/coding-style.rst:1243
msgid "Do not WARN lightly"
msgstr ""

#: ../../../process/coding-style.rst:1245
msgid ""
"WARN*() is intended for unexpected, this-should-never-happen situations. "
"WARN*() macros are not to be used for anything that is expected to happen "
"during normal operation. These are not pre- or post-condition asserts, for "
"example. Again: WARN*() must not be used for a condition that is expected to "
"trigger easily, for example, by user space actions. pr_warn_once() is a "
"possible alternative, if you need to notify the user of a problem."
msgstr ""

#: ../../../process/coding-style.rst:1253
msgid "Do not worry about panic_on_warn users"
msgstr ""

#: ../../../process/coding-style.rst:1255
msgid ""
"A few more words about panic_on_warn: Remember that ``panic_on_warn`` is an "
"available kernel option, and that many users set this option. This is why "
"there is a \"Do not WARN lightly\" writeup, above. However, the existence of "
"panic_on_warn users is not a valid reason to avoid the judicious use "
"WARN*(). That is because, whoever enables panic_on_warn has explicitly asked "
"the kernel to crash if a WARN*() fires, and such users must be prepared to "
"deal with the consequences of a system that is somewhat more likely to crash."
msgstr ""

#: ../../../process/coding-style.rst:1265
msgid "Use BUILD_BUG_ON() for compile-time assertions"
msgstr ""

#: ../../../process/coding-style.rst:1267
msgid ""
"The use of BUILD_BUG_ON() is acceptable and encouraged, because it is a "
"compile-time assertion that has no effect at runtime."
msgstr ""

#: ../../../process/coding-style.rst:1271
msgid "Appendix I) References"
msgstr ""

#: ../../../process/coding-style.rst:1273
msgid ""
"The C Programming Language, Second Edition by Brian W. Kernighan and Dennis "
"M. Ritchie. Prentice Hall, Inc., 1988. ISBN 0-13-110362-8 (paperback), "
"0-13-110370-9 (hardback)."
msgstr ""

#: ../../../process/coding-style.rst:1278
msgid ""
"The Practice of Programming by Brian W. Kernighan and Rob Pike. Addison-"
"Wesley, Inc., 1999. ISBN 0-201-61586-X."
msgstr ""

#: ../../../process/coding-style.rst:1283
msgid ""
"GNU manuals - where in compliance with K&R and this text - for cpp, gcc, gcc "
"internals and indent, all available from https://www.gnu.org/manual/"
msgstr ""

#: ../../../process/coding-style.rst:1286
msgid ""
"WG14 is the international standardization working group for the programming "
"language C, URL: http://www.open-std.org/JTC1/SC22/WG14/"
msgstr ""

#: ../../../process/coding-style.rst:1289
msgid ""
"Kernel CodingStyle, by greg@kroah.com at OLS 2002: http://www.kroah.com/"
"linux/talks/ols_2002_kernel_codingstyle_talk/html/"
msgstr ""
