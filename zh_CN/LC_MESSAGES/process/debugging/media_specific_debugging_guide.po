# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../process/debugging/media_specific_debugging_guide.rst:5
msgid "Debugging and tracing in the media subsystem"
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:7
msgid ""
"This document serves as a starting point and lookup for debugging device "
"drivers in the media subsystem and to debug these drivers from userspace."
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:11
msgid "Contents"
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:14
msgid "General debugging advice"
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:16
msgid ""
"For general advice see the :doc:`general advice document </process/debugging/"
"index>`."
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:19
msgid "The following sections show you some of the available tools."
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:22
msgid "dev_debug module parameter"
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:24
msgid ""
"Every video device provides a ``dev_debug`` parameter, which allows to get "
"further insights into the IOCTLs in the background.::"
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:36
msgid ""
"For the full documentation see :ref:`driver-api/media/v4l2-dev:video device "
"debugging`"
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:40
msgid "dev_dbg() / v4l2_dbg()"
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:42
msgid ""
"Two debug print statements, which are specific for devices and for the v4l2 "
"subsystem, avoid adding these to your final submission unless they have long-"
"term value for investigations."
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:46
msgid ""
"For a general overview please see the :ref:`process/debugging/"
"driver_development_debugging_guide:printk() & friends` guide."
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:50
msgid "Difference between both?"
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:52
msgid ""
"v4l2_dbg() utilizes v4l2_printk() under the hood, which further uses "
"printk() directly, thus it cannot be targeted by dynamic debug"
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:54
msgid "dev_dbg() can be targeted by dynamic debug"
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:55
msgid ""
"v4l2_dbg() has a more specific prefix format for the media subsystem, while "
"dev_dbg only highlights the driver name and the location of the log"
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:59
msgid "Dynamic debug"
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:61
msgid "A method to trim down the debug output to your needs."
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:63
msgid ""
"For general advice see the :ref:`process/debugging/userspace_debugging_guide:"
"dynamic debug` guide."
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:66
msgid ""
"Here is one example, that enables all available pr_debug()'s within the "
"file::"
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:77
msgid "Ftrace"
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:79
msgid ""
"An internal kernel tracer that can trace static predefined events, function "
"calls, etc. Very useful for debugging problems without changing the kernel "
"and understanding the behavior of subsystems."
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:83
msgid ""
"For general advice see the :ref:`process/debugging/userspace_debugging_guide:"
"ftrace` guide."
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:87
msgid "DebugFS"
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:89
msgid ""
"This tool allows you to dump or modify internal values of your driver to "
"files in a custom filesystem."
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:92
msgid ""
"For general advice see the :ref:`process/debugging/"
"driver_development_debugging_guide:debugfs` guide."
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:96
msgid "Perf & alternatives"
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:98
msgid ""
"Tools to measure the various stats on a running system to diagnose issues."
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:100
msgid ""
"For general advice see the :ref:`process/debugging/userspace_debugging_guide:"
"perf & alternatives` guide."
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:103
msgid "Example for media devices:"
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:105
msgid ""
"Gather statistics data for a decoding job: (This example is on a RK3399 SoC "
"with the rkvdec codec driver using the `fluster test suite <https://github."
"com/fluendo/fluster>`__)::"
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:133
msgid ""
"The availability of events and metrics depends on the system you are running."
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:136
msgid "Error checking & panic analysis"
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:138
msgid ""
"Various Kernel configuration options to enhance error detection of the Linux "
"Kernel with the cost of lowering performance."
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:141
msgid ""
"For general advice see the :ref:`process/debugging/"
"driver_development_debugging_guide:kasan, ubsan, lockdep and other error "
"checkers` guide."
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:146
msgid "Driver verification with v4l2-compliance"
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:148
msgid ""
"To verify, that a driver adheres to the v4l2 API, the tool v4l2-compliance "
"is used, which is part of the `v4l_utils <https://git.linuxtv.org/v4l-utils."
"git>`__, a suite of userspace tools to work with the media subsystem."
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:153
msgid "To see the detailed media topology (and check it) use::"
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:157
msgid ""
"You can also run a full compliance check for all devices referenced in the "
"media topology with::"
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:163
msgid "Debugging problems with receiving video"
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:165
msgid ""
"Implementing vidioc_log_status in the driver: this can log the current "
"status to the kernel log. It's called by v4l2-ctl --log-status. Very useful "
"for debugging problems with receiving video (TV/S-Video/HDMI/etc) since the "
"video signal is external (so unpredictable). Less useful with camera sensor "
"inputs since you have control over what the camera sensor does."
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:171
msgid "Usually you can just assign the default::"
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:175
msgid ""
"But you can also create your own callback, to create a custom status log."
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:177
msgid ""
"You can find an example in the cobalt driver (`drivers/media/pci/cobalt/"
"cobalt-v4l2.c <https://elixir.bootlin.com/linux/v6.11.6/source/drivers/media/"
"pci/cobalt/cobalt-v4l2.c#L567>`__)."
msgstr ""

#: ../../../process/debugging/media_specific_debugging_guide.rst:180
msgid "**Copyright** Â©2024 : Collabora"
msgstr ""
