# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../process/maintainer-tip.rst:4
msgid "The tip tree handbook"
msgstr ""

#: ../../../process/maintainer-tip.rst:7
msgid "What is the tip tree?"
msgstr ""

#: ../../../process/maintainer-tip.rst:9
msgid ""
"The tip tree is a collection of several subsystems and areas of development. "
"The tip tree is both a direct development tree and an aggregation tree for "
"several sub-maintainer trees. The tip tree gitweb URL is: https://git.kernel."
"org/pub/scm/linux/kernel/git/tip/tip.git"
msgstr ""

#: ../../../process/maintainer-tip.rst:14
msgid "The tip tree contains the following subsystems:"
msgstr ""

#: ../../../process/maintainer-tip.rst:16
msgid "**x86 architecture**"
msgstr ""

#: ../../../process/maintainer-tip.rst:18
msgid ""
"The x86 architecture development takes place in the tip tree except for the "
"x86 KVM and XEN specific parts which are maintained in the corresponding "
"subsystems and routed directly to mainline from there. It's still good "
"practice to Cc the x86 maintainers on x86-specific KVM and XEN patches."
msgstr ""

#: ../../../process/maintainer-tip.rst:24
msgid ""
"Some x86 subsystems have their own maintainers in addition to the overall "
"x86 maintainers.  Please Cc the overall x86 maintainers on patches touching "
"files in arch/x86 even when they are not called out by the MAINTAINER file."
msgstr ""

#: ../../../process/maintainer-tip.rst:29
msgid ""
"Note, that ``x86@kernel.org`` is not a mailing list. It is merely a mail "
"alias which distributes mails to the x86 top-level maintainer team. Please "
"always Cc the Linux Kernel mailing list (LKML) ``linux-kernel@vger.kernel."
"org``, otherwise your mail ends up only in the private inboxes of the "
"maintainers."
msgstr ""

#: ../../../process/maintainer-tip.rst:35
msgid "**Scheduler**"
msgstr ""

#: ../../../process/maintainer-tip.rst:37
msgid ""
"Scheduler development takes place in the -tip tree, in the sched/core branch "
"- with occasional sub-topic trees for work-in-progress patch-sets."
msgstr ""

#: ../../../process/maintainer-tip.rst:41
msgid "**Locking and atomics**"
msgstr ""

#: ../../../process/maintainer-tip.rst:43
msgid ""
"Locking development (including atomics and other synchronization primitives "
"that are connected to locking) takes place in the -tip tree, in the locking/"
"core branch - with occasional sub-topic trees for work-in-progress patch-"
"sets."
msgstr ""

#: ../../../process/maintainer-tip.rst:48
msgid "**Generic interrupt subsystem and interrupt chip drivers**:"
msgstr ""

#: ../../../process/maintainer-tip.rst:50
msgid "interrupt core development happens in the irq/core branch"
msgstr ""

#: ../../../process/maintainer-tip.rst:52
msgid ""
"interrupt chip driver development also happens in the irq/core branch, but "
"the patches are usually applied in a separate maintainer tree and then "
"aggregated into irq/core"
msgstr ""

#: ../../../process/maintainer-tip.rst:56
msgid "**Time, timers, timekeeping, NOHZ and related chip drivers**:"
msgstr ""

#: ../../../process/maintainer-tip.rst:58
msgid ""
"timekeeping, clocksource core, NTP and alarmtimer development happens in the "
"timers/core branch, but patches are usually applied in a separate maintainer "
"tree and then aggregated into timers/core"
msgstr ""

#: ../../../process/maintainer-tip.rst:62
msgid ""
"clocksource/event driver development happens in the timers/core branch, but "
"patches are mostly applied in a separate maintainer tree and then aggregated "
"into timers/core"
msgstr ""

#: ../../../process/maintainer-tip.rst:66
msgid "**Performance counters core, architecture support and tooling**:"
msgstr ""

#: ../../../process/maintainer-tip.rst:68
msgid ""
"perf core and architecture support development happens in the perf/core "
"branch"
msgstr ""

#: ../../../process/maintainer-tip.rst:71
msgid ""
"perf tooling development happens in the perf tools maintainer tree and is "
"aggregated into the tip tree."
msgstr ""

#: ../../../process/maintainer-tip.rst:74
msgid "**CPU hotplug core**"
msgstr ""

#: ../../../process/maintainer-tip.rst:76
msgid "**RAS core**"
msgstr ""

#: ../../../process/maintainer-tip.rst:78
msgid ""
"Mostly x86-specific RAS patches are collected in the tip ras/core branch."
msgstr ""

#: ../../../process/maintainer-tip.rst:81
msgid "**EFI core**"
msgstr ""

#: ../../../process/maintainer-tip.rst:83
msgid ""
"EFI development in the efi git tree. The collected patches are aggregated in "
"the tip efi/core branch."
msgstr ""

#: ../../../process/maintainer-tip.rst:86
msgid "**RCU**"
msgstr ""

#: ../../../process/maintainer-tip.rst:88
msgid ""
"RCU development happens in the linux-rcu tree. The resulting changes are "
"aggregated into the tip core/rcu branch."
msgstr ""

#: ../../../process/maintainer-tip.rst:91
msgid "**Various core code components**:"
msgstr ""

#: ../../../process/maintainer-tip.rst:93
msgid "debugobjects"
msgstr ""

#: ../../../process/maintainer-tip.rst:95
msgid "objtool"
msgstr ""

#: ../../../process/maintainer-tip.rst:97
msgid "random bits and pieces"
msgstr ""

#: ../../../process/maintainer-tip.rst:101
msgid "Patch submission notes"
msgstr ""

#: ../../../process/maintainer-tip.rst:104
msgid "Selecting the tree/branch"
msgstr ""

#: ../../../process/maintainer-tip.rst:106
msgid ""
"In general, development against the head of the tip tree master branch is "
"fine, but for the subsystems which are maintained separately, have their own "
"git tree and are only aggregated into the tip tree, development should take "
"place against the relevant subsystem tree or branch."
msgstr ""

#: ../../../process/maintainer-tip.rst:111
msgid ""
"Bug fixes which target mainline should always be applicable against the "
"mainline kernel tree. Potential conflicts against changes which are already "
"queued in the tip tree are handled by the maintainers."
msgstr ""

#: ../../../process/maintainer-tip.rst:116
msgid "Patch subject"
msgstr ""

#: ../../../process/maintainer-tip.rst:118
msgid ""
"The tip tree preferred format for patch subject prefixes is 'subsys/"
"component:', e.g. 'x86/apic:', 'x86/mm/fault:', 'sched/fair:', 'genirq/"
"core:'. Please do not use file names or complete file paths as prefix. 'git "
"log path/to/file' should give you a reasonable hint in most cases."
msgstr ""

#: ../../../process/maintainer-tip.rst:124
msgid ""
"The condensed patch description in the subject line should start with an "
"uppercase letter and should be written in imperative tone."
msgstr ""

#: ../../../process/maintainer-tip.rst:129
msgid "Changelog"
msgstr ""

#: ../../../process/maintainer-tip.rst:131
msgid ""
"The general rules about changelogs in the :ref:`Submitting patches guide "
"<describe_changes>`, apply."
msgstr ""

#: ../../../process/maintainer-tip.rst:134
msgid ""
"The tip tree maintainers set value on following these rules, especially on "
"the request to write changelogs in imperative mood and not impersonating "
"code or the execution of it. This is not just a whim of the maintainers. "
"Changelogs written in abstract words are more precise and tend to be less "
"confusing than those written in the form of novels."
msgstr ""

#: ../../../process/maintainer-tip.rst:140
msgid ""
"It's also useful to structure the changelog into several paragraphs and not "
"lump everything together into a single one. A good structure is to explain "
"the context, the problem and the solution in separate paragraphs and this "
"order."
msgstr ""

#: ../../../process/maintainer-tip.rst:145
msgid "Examples for illustration:"
msgstr ""

#: ../../../process/maintainer-tip.rst:147
msgid "Example 1::"
msgstr ""

#: ../../../process/maintainer-tip.rst:161
#: ../../../process/maintainer-tip.rst:186
#: ../../../process/maintainer-tip.rst:206
msgid "Improved version::"
msgstr ""

#: ../../../process/maintainer-tip.rst:174
msgid "Example 2::"
msgstr ""

#: ../../../process/maintainer-tip.rst:200
msgid "Example 3::"
msgstr ""

#: ../../../process/maintainer-tip.rst:213
msgid ""
"For complex scenarios, especially race conditions and memory ordering "
"issues, it is valuable to depict the scenario with a table which shows the "
"parallelism and the temporal order of events. Here is an example::"
msgstr ""

#: ../../../process/maintainer-tip.rst:230
msgid ""
"Lockdep provides similar useful output to depict a possible deadlock "
"scenario::"
msgstr ""

#: ../../../process/maintainer-tip.rst:244
msgid "Function references in changelogs"
msgstr ""

#: ../../../process/maintainer-tip.rst:246
msgid ""
"When a function is mentioned in the changelog, either the text body or the "
"subject line, please use the format 'function_name()'. Omitting the brackets "
"after the function name can be ambiguous::"
msgstr ""

#: ../../../process/maintainer-tip.rst:254
msgid "The variant with brackets is more precise::"
msgstr ""

#: ../../../process/maintainer-tip.rst:263
msgid "Backtraces in changelogs"
msgstr ""

#: ../../../process/maintainer-tip.rst:265
msgid "See :ref:`backtraces`."
msgstr ""

#: ../../../process/maintainer-tip.rst:268
msgid "Ordering of commit tags"
msgstr ""

#: ../../../process/maintainer-tip.rst:270
msgid ""
"To have a uniform view of the commit tags, the tip maintainers use the "
"following tag ordering scheme:"
msgstr ""

#: ../../../process/maintainer-tip.rst:273
msgid "Fixes: 12+char-SHA1 (\"sub/sys: Original subject line\")"
msgstr ""

#: ../../../process/maintainer-tip.rst:275
msgid ""
"A Fixes tag should be added even for changes which do not need to be "
"backported to stable kernels, i.e. when addressing a recently introduced "
"issue which only affects tip or the current head of mainline. These tags are "
"helpful to identify the original commit and are much more valuable than "
"prominently mentioning the commit which introduced a problem in the text of "
"the changelog itself because they can be automatically extracted."
msgstr ""

#: ../../../process/maintainer-tip.rst:283
msgid "The following example illustrates the difference::"
msgstr ""

#: ../../../process/maintainer-tip.rst:293
msgid "Please say instead::"
msgstr ""

#: ../../../process/maintainer-tip.rst:301
msgid ""
"The latter puts the information about the patch into the focus and amends it "
"with the reference to the commit which introduced the issue rather than "
"putting the focus on the original commit in the first place."
msgstr ""

#: ../../../process/maintainer-tip.rst:305
msgid "Reported-by: ``Reporter <reporter@mail>``"
msgstr ""

#: ../../../process/maintainer-tip.rst:307
msgid "Closes: ``URL or Message-ID of the bug report this is fixing``"
msgstr ""

#: ../../../process/maintainer-tip.rst:309
msgid "Originally-by: ``Original author <original-author@mail>``"
msgstr ""

#: ../../../process/maintainer-tip.rst:311
msgid "Suggested-by: ``Suggester <suggester@mail>``"
msgstr ""

#: ../../../process/maintainer-tip.rst:313
msgid "Co-developed-by: ``Co-author <co-author@mail>``"
msgstr ""

#: ../../../process/maintainer-tip.rst:315
msgid "Signed-off-by: ``Co-author <co-author@mail>``"
msgstr ""

#: ../../../process/maintainer-tip.rst:317
msgid ""
"Note, that Co-developed-by and Signed-off-by of the co-author(s) must come "
"in pairs."
msgstr ""

#: ../../../process/maintainer-tip.rst:320
msgid "Signed-off-by: ``Author <author@mail>``"
msgstr ""

#: ../../../process/maintainer-tip.rst:322
msgid ""
"The first Signed-off-by (SOB) after the last Co-developed-by/SOB pair is the "
"author SOB, i.e. the person flagged as author by git."
msgstr ""

#: ../../../process/maintainer-tip.rst:325
msgid "Signed-off-by: ``Patch handler <handler@mail>``"
msgstr ""

#: ../../../process/maintainer-tip.rst:327
msgid ""
"SOBs after the author SOB are from people handling and transporting the "
"patch, but were not involved in development. SOB chains should reflect the "
"**real** route a patch took as it was propagated to us, with the first SOB "
"entry signalling primary authorship of a single author. Acks should be given "
"as Acked-by lines and review approvals as Reviewed-by lines."
msgstr ""

#: ../../../process/maintainer-tip.rst:334
msgid ""
"If the handler made modifications to the patch or the changelog, then this "
"should be mentioned **after** the changelog text and **above** all commit "
"tags in the following format::"
msgstr ""

#: ../../../process/maintainer-tip.rst:344
msgid ""
"Note the two empty new lines which separate the changelog text and the "
"commit tags from that notice."
msgstr ""

#: ../../../process/maintainer-tip.rst:347
msgid ""
"If a patch is sent to the mailing list by a handler then the author has to "
"be noted in the first line of the changelog with::"
msgstr ""

#: ../../../process/maintainer-tip.rst:354
msgid ""
"so the authorship is preserved. The 'From:' line has to be followed by a "
"empty newline. If that 'From:' line is missing, then the patch would be "
"attributed to the person who sent (transported, handled) it. The 'From:' "
"line is automatically removed when the patch is applied and does not show up "
"in the final git changelog. It merely affects the authorship information of "
"the resulting Git commit."
msgstr ""

#: ../../../process/maintainer-tip.rst:361
msgid "Tested-by: ``Tester <tester@mail>``"
msgstr ""

#: ../../../process/maintainer-tip.rst:363
msgid "Reviewed-by: ``Reviewer <reviewer@mail>``"
msgstr ""

#: ../../../process/maintainer-tip.rst:365
msgid "Acked-by: ``Acker <acker@mail>``"
msgstr ""

#: ../../../process/maintainer-tip.rst:367
msgid "Cc: ``cc-ed-person <person@mail>``"
msgstr ""

#: ../../../process/maintainer-tip.rst:369
msgid ""
"If the patch should be backported to stable, then please add a '``Cc: "
"stable@vger.kernel.org``' tag, but do not Cc stable when sending your mail."
msgstr ""

#: ../../../process/maintainer-tip.rst:373
msgid "Link: ``https://link/to/information``"
msgstr ""

#: ../../../process/maintainer-tip.rst:375
msgid ""
"For referring to an email posted to the kernel mailing lists, please use the "
"lore.kernel.org redirector URL::"
msgstr ""

#: ../../../process/maintainer-tip.rst:380
msgid ""
"This URL should be used when referring to relevant mailing list topics, "
"related patch sets, or other notable discussion threads. A convenient way to "
"associate ``Link:`` trailers with the commit message is to use markdown-like "
"bracketed notation, for example::"
msgstr ""

#: ../../../process/maintainer-tip.rst:392
msgid ""
"You can also use ``Link:`` trailers to indicate the origin of the patch when "
"applying it to your git tree. In that case, please use the dedicated ``patch."
"msgid.link`` domain instead of ``lore.kernel.org``. This practice makes it "
"possible for automated tooling to identify which link to use to retrieve the "
"original patch submission. For example::"
msgstr ""

#: ../../../process/maintainer-tip.rst:401
msgid ""
"Please do not use combined tags, e.g. ``Reported-and-tested-by``, as they "
"just complicate automated extraction of tags."
msgstr ""

#: ../../../process/maintainer-tip.rst:406
msgid "Links to documentation"
msgstr ""

#: ../../../process/maintainer-tip.rst:408
msgid ""
"Providing links to documentation in the changelog is a great help to later "
"debugging and analysis.  Unfortunately, URLs often break very quickly "
"because companies restructure their websites frequently.  Non-'volatile' "
"exceptions include the Intel SDM and the AMD APM."
msgstr ""

#: ../../../process/maintainer-tip.rst:413
msgid ""
"Therefore, for 'volatile' documents, please create an entry in the kernel "
"bugzilla https://bugzilla.kernel.org and attach a copy of these documents to "
"the bugzilla entry. Finally, provide the URL of the bugzilla entry in the "
"changelog."
msgstr ""

#: ../../../process/maintainer-tip.rst:419
msgid "Patch resend or reminders"
msgstr ""

#: ../../../process/maintainer-tip.rst:421
msgid "See :ref:`resend_reminders`."
msgstr ""

#: ../../../process/maintainer-tip.rst:424
msgid "Merge window"
msgstr ""

#: ../../../process/maintainer-tip.rst:426
msgid ""
"Please do not expect patches to be reviewed or merged by tip maintainers "
"around or during the merge window.  The trees are closed to all but urgent "
"fixes during this time.  They reopen once the merge window closes and a new -"
"rc1 kernel has been released."
msgstr ""

#: ../../../process/maintainer-tip.rst:431
msgid ""
"Large series should be submitted in mergeable state *at* *least* a week "
"before the merge window opens.  Exceptions are made for bug fixes and "
"*sometimes* for small standalone drivers for new hardware or minimally "
"invasive patches for hardware enablement."
msgstr ""

#: ../../../process/maintainer-tip.rst:436
msgid ""
"During the merge window, the maintainers instead focus on following the "
"upstream changes, fixing merge window fallout, collecting bug fixes, and "
"allowing themselves a breath. Please respect that."
msgstr ""

#: ../../../process/maintainer-tip.rst:440
msgid ""
"So called _urgent_ branches will be merged into mainline during the "
"stabilization phase of each release."
msgstr ""

#: ../../../process/maintainer-tip.rst:445
msgid "Git"
msgstr ""

#: ../../../process/maintainer-tip.rst:447
msgid ""
"The tip maintainers accept git pull requests from maintainers who provide "
"subsystem changes for aggregation in the tip tree."
msgstr ""

#: ../../../process/maintainer-tip.rst:450
msgid ""
"Pull requests for new patch submissions are usually not accepted and do not "
"replace proper patch submission to the mailing list. The main reason for "
"this is that the review workflow is email based."
msgstr ""

#: ../../../process/maintainer-tip.rst:454
msgid ""
"If you submit a larger patch series it is helpful to provide a git branch in "
"a private repository which allows interested people to easily pull the "
"series for testing. The usual way to offer this is a git URL in the cover "
"letter of the patch series."
msgstr ""

#: ../../../process/maintainer-tip.rst:460
msgid "Testing"
msgstr ""

#: ../../../process/maintainer-tip.rst:462
msgid ""
"Code should be tested before submitting to the tip maintainers.  Anything "
"other than minor changes should be built, booted and tested with "
"comprehensive (and heavyweight) kernel debugging options enabled."
msgstr ""

#: ../../../process/maintainer-tip.rst:466
msgid ""
"These debugging options can be found in kernel/configs/x86_debug.config and "
"can be added to an existing kernel config by running:"
msgstr ""

#: ../../../process/maintainer-tip.rst:469
msgid "make x86_debug.config"
msgstr ""

#: ../../../process/maintainer-tip.rst:471
msgid ""
"Some of these options are x86-specific and can be left out when testing on "
"other architectures."
msgstr ""

#: ../../../process/maintainer-tip.rst:477
msgid "Coding style notes"
msgstr ""

#: ../../../process/maintainer-tip.rst:480
msgid "Comment style"
msgstr ""

#: ../../../process/maintainer-tip.rst:482
msgid "Sentences in comments start with an uppercase letter."
msgstr ""

#: ../../../process/maintainer-tip.rst:484
msgid "Single line comments::"
msgstr ""

#: ../../../process/maintainer-tip.rst:488
msgid "Multi-line comments::"
msgstr ""

#: ../../../process/maintainer-tip.rst:497
msgid "No tail comments (see below):"
msgstr ""

#: ../../../process/maintainer-tip.rst:499
msgid ""
"Please refrain from using tail comments. Tail comments disturb the reading "
"flow in almost all contexts, but especially in code::"
msgstr ""

#: ../../../process/maintainer-tip.rst:507
msgid "Use freestanding comments instead::"
msgstr ""

#: ../../../process/maintainer-tip.rst:518
msgid ""
"Use C++ style, tail comments when documenting structs in headers to achieve "
"a more compact layout and better readability::"
msgstr ""

#: ../../../process/maintainer-tip.rst:529
msgid "versus::"
msgstr ""

#: ../../../process/maintainer-tip.rst:546
msgid "Comment the important things:"
msgstr ""

#: ../../../process/maintainer-tip.rst:548
msgid ""
"Comments should be added where the operation is not obvious. Documenting the "
"obvious is just a distraction::"
msgstr ""

#: ../../../process/maintainer-tip.rst:560
msgid ""
"Instead, comments should explain the non-obvious details and document "
"constraints::"
msgstr ""

#: ../../../process/maintainer-tip.rst:577
msgid "Function documentation comments:"
msgstr ""

#: ../../../process/maintainer-tip.rst:579
msgid ""
"To document functions and their arguments please use kernel-doc format and "
"not free form comments::"
msgstr ""

#: ../../../process/maintainer-tip.rst:594
msgid ""
"This applies especially to globally visible functions and inline functions "
"in public header files. It might be overkill to use kernel-doc format for "
"every (static) function which needs a tiny explanation. The usage of "
"descriptive function names often replaces these tiny comments. Apply common "
"sense as always."
msgstr ""

#: ../../../process/maintainer-tip.rst:602
msgid "Documenting locking requirements"
msgstr ""

#: ../../../process/maintainer-tip.rst:603
msgid ""
"Documenting locking requirements is a good thing, but comments are not "
"necessarily the best choice. Instead of writing::"
msgstr ""

#: ../../../process/maintainer-tip.rst:612
msgid "Please use::"
msgstr ""

#: ../../../process/maintainer-tip.rst:620
msgid ""
"In PROVE_LOCKING kernels, lockdep_assert_held() emits a warning if the "
"caller doesn't hold the lock.  Comments can't do that."
msgstr ""

#: ../../../process/maintainer-tip.rst:624
msgid "Bracket rules"
msgstr ""

#: ../../../process/maintainer-tip.rst:626
msgid ""
"Brackets should be omitted only if the statement which follows 'if', 'for', "
"'while' etc. is truly a single line::"
msgstr ""

#: ../../../process/maintainer-tip.rst:632
msgid ""
"The following is not considered to be a single line statement even though C "
"does not require brackets::"
msgstr ""

#: ../../../process/maintainer-tip.rst:639
msgid "Adding brackets around the outer loop enhances the reading flow::"
msgstr ""

#: ../../../process/maintainer-tip.rst:648
msgid "Variable declarations"
msgstr ""

#: ../../../process/maintainer-tip.rst:650
msgid ""
"The preferred ordering of variable declarations at the beginning of a "
"function is reverse fir tree order::"
msgstr ""

#: ../../../process/maintainer-tip.rst:658
msgid "The above is faster to parse than the reverse ordering::"
msgstr ""

#: ../../../process/maintainer-tip.rst:665
msgid "And even more so than random ordering::"
msgstr ""

#: ../../../process/maintainer-tip.rst:672
msgid ""
"Also please try to aggregate variables of the same type into a single line. "
"There is no point in wasting screen space::"
msgstr ""

#: ../../../process/maintainer-tip.rst:680
msgid "It's really sufficient to do::"
msgstr ""

#: ../../../process/maintainer-tip.rst:684
msgid ""
"Please also refrain from introducing line splits in variable declarations::"
msgstr ""

#: ../../../process/maintainer-tip.rst:691
msgid ""
"It's way better to move the initialization to a separate line after the "
"declarations::"
msgstr ""

#: ../../../process/maintainer-tip.rst:701
msgid "Variable types"
msgstr ""

#: ../../../process/maintainer-tip.rst:703
msgid ""
"Please use the proper u8, u16, u32, u64 types for variables which are meant "
"to describe hardware or are used as arguments for functions which access "
"hardware. These types are clearly defining the bit width and avoid "
"truncation, expansion and 32/64-bit confusion."
msgstr ""

#: ../../../process/maintainer-tip.rst:708
msgid ""
"u64 is also recommended in code which would become ambiguous for 32-bit "
"kernels when 'unsigned long' would be used instead. While in such situations "
"'unsigned long long' could be used as well, u64 is shorter and also clearly "
"shows that the operation is required to be 64 bits wide independent of the "
"target CPU."
msgstr ""

#: ../../../process/maintainer-tip.rst:714
msgid "Please use 'unsigned int' instead of 'unsigned'."
msgstr ""

#: ../../../process/maintainer-tip.rst:718
msgid "Constants"
msgstr ""

#: ../../../process/maintainer-tip.rst:720
msgid ""
"Please do not use literal (hexa)decimal numbers in code or initializers. "
"Either use proper defines which have descriptive names or consider using an "
"enum."
msgstr ""

#: ../../../process/maintainer-tip.rst:726
msgid "Struct declarations and initializers"
msgstr ""

#: ../../../process/maintainer-tip.rst:728
msgid ""
"Struct declarations should align the struct member names in a tabular "
"fashion::"
msgstr ""

#: ../../../process/maintainer-tip.rst:737
msgid ""
"Please avoid documenting struct members within the declaration, because this "
"often results in strangely formatted comments and the struct members become "
"obfuscated::"
msgstr ""

#: ../../../process/maintainer-tip.rst:748
msgid ""
"Instead, please consider using the kernel-doc format in a comment preceding "
"the struct declaration, which is easier to read and has the added advantage "
"of including the information in the kernel documentation, for example, as "
"follows::"
msgstr ""

#: ../../../process/maintainer-tip.rst:772
msgid ""
"Static struct initializers must use C99 initializers and should also be "
"aligned in a tabular fashion::"
msgstr ""

#: ../../../process/maintainer-tip.rst:781
msgid ""
"Note that while C99 syntax allows the omission of the final comma, we "
"recommend the use of a comma on the last line because it makes reordering "
"and addition of new lines easier, and makes such future patches slightly "
"easier to read as well."
msgstr ""

#: ../../../process/maintainer-tip.rst:787
msgid "Line breaks"
msgstr ""

#: ../../../process/maintainer-tip.rst:789
msgid ""
"Restricting line length to 80 characters makes deeply indented code hard to "
"read.  Consider breaking out code into helper functions to avoid excessive "
"line breaking."
msgstr ""

#: ../../../process/maintainer-tip.rst:793
msgid ""
"The 80 character rule is not a strict rule, so please use common sense when "
"breaking lines. Especially format strings should never be broken up."
msgstr ""

#: ../../../process/maintainer-tip.rst:796
msgid ""
"When splitting function declarations or function calls, then please align "
"the first argument in the second line with the first argument in the first "
"line::"
msgstr ""

#: ../../../process/maintainer-tip.rst:810
msgid "Namespaces"
msgstr ""

#: ../../../process/maintainer-tip.rst:812
msgid ""
"Function/variable namespaces improve readability and allow easy grepping. "
"These namespaces are string prefixes for globally visible function and "
"variable names, including inlines. These prefixes should combine the "
"subsystem and the component name such as 'x86_comp\\_', 'sched\\_', "
"'irq\\_', and 'mutex\\_'."
msgstr ""

#: ../../../process/maintainer-tip.rst:818
msgid ""
"This also includes static file scope functions that are immediately put into "
"globally visible driver templates - it's useful for those symbols to carry a "
"good prefix as well, for backtrace readability."
msgstr ""

#: ../../../process/maintainer-tip.rst:822
msgid ""
"Namespace prefixes may be omitted for local static functions and variables. "
"Truly local functions, only called by other local functions, can have "
"shorter descriptive names - our primary concern is greppability and "
"backtrace readability."
msgstr ""

#: ../../../process/maintainer-tip.rst:827
msgid ""
"Please note that 'xxx_vendor\\_' and 'vendor_xxx_` prefixes are not helpful "
"for static functions in vendor-specific files. After all, it is already "
"clear that the code is vendor-specific. In addition, vendor names should "
"only be for truly vendor-specific functionality."
msgstr ""

#: ../../../process/maintainer-tip.rst:832
msgid "As always apply common sense and aim for consistency and readability."
msgstr ""

#: ../../../process/maintainer-tip.rst:836
msgid "Commit notifications"
msgstr ""

#: ../../../process/maintainer-tip.rst:838
msgid ""
"The tip tree is monitored by a bot for new commits. The bot sends an email "
"for each new commit to a dedicated mailing list (``linux-tip-commits@vger."
"kernel.org``) and Cc's all people who are mentioned in one of the commit "
"tags. It uses the email message ID from the Link tag at the end of the tag "
"list to set the In-Reply-To email header so the message is properly threaded "
"with the patch submission email."
msgstr ""

#: ../../../process/maintainer-tip.rst:845
msgid ""
"The tip maintainers and submaintainers try to reply to the submitter when "
"merging a patch, but they sometimes forget or it does not fit the workflow "
"of the moment. While the bot message is purely mechanical, it also implies a "
"'Thank you! Applied.'."
msgstr ""
