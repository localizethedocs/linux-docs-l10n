# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../dev-tools/coccinelle.rst:10
msgid "Coccinelle"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:12
msgid ""
"Coccinelle is a tool for pattern matching and text transformation that has "
"many uses in kernel development, including the application of complex, tree-"
"wide patches and detection of problematic programming patterns."
msgstr ""

#: ../../../dev-tools/coccinelle.rst:17
msgid "Getting Coccinelle"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:19
msgid ""
"The semantic patches included in the kernel use features and options which "
"are provided by Coccinelle version 1.0.0-rc11 and above. Using earlier "
"versions will fail as the option names used by the Coccinelle files and "
"coccicheck have been updated."
msgstr ""

#: ../../../dev-tools/coccinelle.rst:24
msgid ""
"Coccinelle is available through the package manager of many distributions, e."
"g. :"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:27
msgid "Debian"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:28
msgid "Fedora"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:29
msgid "Ubuntu"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:30
msgid "OpenSUSE"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:31
msgid "Arch Linux"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:32
msgid "NetBSD"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:33
msgid "FreeBSD"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:35
msgid ""
"Some distribution packages are obsolete and it is recommended to use the "
"latest version released from the Coccinelle homepage at http://coccinelle."
"lip6.fr/"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:39
msgid "Or from Github at:"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:41
msgid "https://github.com/coccinelle/coccinelle"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:43
msgid "Once you have it, run the following commands::"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:49
msgid "as a regular user, and install it with::"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:53
msgid ""
"More detailed installation instructions to build from source can be found at:"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:56
msgid "https://github.com/coccinelle/coccinelle/blob/master/install.txt"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:59
msgid "Supplemental documentation"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:61
msgid "For supplemental documentation refer to the wiki:"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:63
msgid "https://bottest.wiki.kernel.org/coccicheck"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:65
msgid ""
"The wiki documentation always refers to the linux-next version of the script."
msgstr ""

#: ../../../dev-tools/coccinelle.rst:67
msgid "For Semantic Patch Language(SmPL) grammar documentation refer to:"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:69
msgid "https://coccinelle.gitlabpages.inria.fr/website/docs/main_grammar.html"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:72
msgid "Using Coccinelle on the Linux kernel"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:74
msgid ""
"A Coccinelle-specific target is defined in the top level Makefile. This "
"target is named ``coccicheck`` and calls the ``coccicheck`` front-end in the "
"``scripts`` directory."
msgstr ""

#: ../../../dev-tools/coccinelle.rst:78
msgid ""
"Four basic modes are defined: ``patch``, ``report``, ``context``, and "
"``org``. The mode to use is specified by setting the MODE variable with "
"``MODE=<mode>``."
msgstr ""

#: ../../../dev-tools/coccinelle.rst:82
msgid "``patch`` proposes a fix, when possible."
msgstr ""

#: ../../../dev-tools/coccinelle.rst:84
msgid ""
"``report`` generates a list in the following format: file:line:column-"
"column: message"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:87
msgid ""
"``context`` highlights lines of interest and their context in a diff-like "
"style. Lines of interest are indicated with ``-``."
msgstr ""

#: ../../../dev-tools/coccinelle.rst:90 ../../../dev-tools/coccinelle.rst:477
msgid "``org`` generates a report in the Org mode format of Emacs."
msgstr ""

#: ../../../dev-tools/coccinelle.rst:92
msgid ""
"Note that not all semantic patches implement all modes. For easy use of "
"Coccinelle, the default mode is \"report\"."
msgstr ""

#: ../../../dev-tools/coccinelle.rst:95
msgid "Two other modes provide some common combinations of these modes."
msgstr ""

#: ../../../dev-tools/coccinelle.rst:97
msgid ""
"``chain`` tries the previous modes in the order above until one succeeds."
msgstr ""

#: ../../../dev-tools/coccinelle.rst:99
msgid ""
"``rep+ctxt`` runs successively the report mode and the context mode. It "
"should be used with the C option (described later) which checks the code on "
"a file basis."
msgstr ""

#: ../../../dev-tools/coccinelle.rst:104
msgid "Examples"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:106
msgid "To make a report for every semantic patch, run the following command::"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:110
msgid "To produce patches, run::"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:115
msgid ""
"The coccicheck target applies every semantic patch available in the sub-"
"directories of ``scripts/coccinelle`` to the entire Linux kernel."
msgstr ""

#: ../../../dev-tools/coccinelle.rst:118
msgid ""
"For each semantic patch, a commit message is proposed.  It gives a "
"description of the problem being checked by the semantic patch, and includes "
"a reference to Coccinelle."
msgstr ""

#: ../../../dev-tools/coccinelle.rst:122
msgid ""
"As with any static code analyzer, Coccinelle produces false positives. Thus, "
"reports must be carefully checked, and patches reviewed."
msgstr ""

#: ../../../dev-tools/coccinelle.rst:126
msgid "To enable verbose messages set the V= variable, for example::"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:131
msgid "Coccinelle parallelization"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:133
msgid ""
"By default, coccicheck tries to run as parallel as possible. To change the "
"parallelism, set the J= variable. For example, to run across 4 CPUs::"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:138
msgid ""
"As of Coccinelle 1.0.2 Coccinelle uses Ocaml parmap for parallelization; if "
"support for this is detected you will benefit from parmap parallelization."
msgstr ""

#: ../../../dev-tools/coccinelle.rst:141
msgid ""
"When parmap is enabled coccicheck will enable dynamic load balancing by "
"using ``--chunksize 1`` argument. This ensures we keep feeding threads with "
"work one by one, so that we avoid the situation where most work gets done by "
"only a few threads. With dynamic load balancing, if a thread finishes early "
"we keep feeding it more work."
msgstr ""

#: ../../../dev-tools/coccinelle.rst:147
msgid ""
"When parmap is enabled, if an error occurs in Coccinelle, this error value "
"is propagated back, and the return value of the ``make coccicheck`` command "
"captures this return value."
msgstr ""

#: ../../../dev-tools/coccinelle.rst:152
msgid "Using Coccinelle with a single semantic patch"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:154
msgid ""
"The optional make variable COCCI can be used to check a single semantic "
"patch. In that case, the variable must be initialized with the name of the "
"semantic patch to apply."
msgstr ""

#: ../../../dev-tools/coccinelle.rst:158
msgid "For instance::"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:162
msgid "or::"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:168
msgid "Controlling Which Files are Processed by Coccinelle"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:170
msgid "By default the entire kernel source tree is checked."
msgstr ""

#: ../../../dev-tools/coccinelle.rst:172
msgid ""
"To apply Coccinelle to a specific directory, ``M=`` can be used. For "
"example, to check drivers/net/wireless/ one may write::"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:177
msgid ""
"To apply Coccinelle on a file basis, instead of a directory basis, the C "
"variable is used by the makefile to select which files to work with. This "
"variable can be used to run scripts for the entire kernel, a specific "
"directory, or for a single file."
msgstr ""

#: ../../../dev-tools/coccinelle.rst:182
msgid ""
"For example, to check drivers/bluetooth/bfusb.c, the value 1 is passed to "
"the C variable to check files that make considers need to be compiled.::"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:188
msgid ""
"The value 2 is passed to the C variable to check files regardless of whether "
"they need to be compiled or not.::"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:193
msgid ""
"In these modes, which work on a file basis, there is no information about "
"semantic patches displayed, and no commit message proposed."
msgstr ""

#: ../../../dev-tools/coccinelle.rst:196
msgid ""
"This runs every semantic patch in scripts/coccinelle by default. The COCCI "
"variable may additionally be used to only apply a single semantic patch as "
"shown in the previous section."
msgstr ""

#: ../../../dev-tools/coccinelle.rst:200
msgid ""
"The \"report\" mode is the default. You can select another one with the MODE "
"variable explained above."
msgstr ""

#: ../../../dev-tools/coccinelle.rst:204
msgid "Debugging Coccinelle SmPL patches"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:206
msgid ""
"Using coccicheck is best as it provides in the spatch command line include "
"options matching the options used when we compile the kernel. You can learn "
"what these options are by using V=1; you could then manually run Coccinelle "
"with debug options added."
msgstr ""

#: ../../../dev-tools/coccinelle.rst:211
msgid ""
"Alternatively you can debug running Coccinelle against SmPL patches by "
"asking for stderr to be redirected to stderr. By default stderr is "
"redirected to /dev/null; if you'd like to capture stderr you can specify the "
"``DEBUG_FILE=\"file.txt\"`` option to coccicheck. For instance::"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:221
msgid ""
"You can use SPFLAGS to add debugging flags; for instance you may want to add "
"both ``--profile --show-trying`` to SPFLAGS when debugging. For example you "
"may want to use::"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:229
msgid ""
"err.log will now have the profiling information, while stdout will provide "
"some progress information as Coccinelle moves forward with work."
msgstr ""

#: ../../../dev-tools/coccinelle.rst:233
msgid "NOTE:"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:235
msgid "DEBUG_FILE support is only supported when using coccinelle >= 1.0.2."
msgstr ""

#: ../../../dev-tools/coccinelle.rst:237
msgid ""
"Currently, DEBUG_FILE support is only available to check folders, and not "
"single files. This is because checking a single file requires spatch to be "
"called twice leading to DEBUG_FILE being set both times to the same value, "
"giving rise to an error."
msgstr ""

#: ../../../dev-tools/coccinelle.rst:243
msgid ".cocciconfig support"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:245
msgid ""
"Coccinelle supports reading .cocciconfig for default Coccinelle options that "
"should be used every time spatch is spawned. The order of precedence for "
"variables for .cocciconfig is as follows:"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:249
msgid "Your current user's home directory is processed first"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:250
msgid "Your directory from which spatch is called is processed next"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:251
msgid ""
"The directory provided with the ``--dir`` option is processed last, if used"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:253
msgid ""
"``make coccicheck`` also supports using M= targets. If you do not supply any "
"M= target, it is assumed you want to target the entire kernel. The kernel "
"coccicheck script has::"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:259
msgid ""
"Here, $srcroot refers to the source directory of the target: it points to "
"the external module's source directory when M= used, and otherwise, to the "
"kernel source directory. The third rule ensures the spatch reads the ."
"cocciconfig from the target directory, allowing external modules to have "
"their own .cocciconfig file."
msgstr ""

#: ../../../dev-tools/coccinelle.rst:265
msgid ""
"If not using the kernel's coccicheck target, keep the above precedence order "
"logic of .cocciconfig reading. If using the kernel's coccicheck target, "
"override any of the kernel's .coccicheck's settings using SPFLAGS."
msgstr ""

#: ../../../dev-tools/coccinelle.rst:269
msgid ""
"We help Coccinelle when used against Linux with a set of sensible default "
"options for Linux with our own Linux .cocciconfig. This hints to coccinelle "
"that git can be used for ``git grep`` queries over coccigrep. A timeout of "
"200 seconds should suffice for now."
msgstr ""

#: ../../../dev-tools/coccinelle.rst:274
msgid ""
"The options picked up by coccinelle when reading a .cocciconfig do not "
"appear as arguments to spatch processes running on your system. To confirm "
"what options will be used by Coccinelle run::"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:280
msgid ""
"You can override with your own preferred index option by using SPFLAGS. Take "
"note that when there are conflicting options Coccinelle takes precedence for "
"the last options passed. Using .cocciconfig is possible to use idutils, "
"however given the order of precedence followed by Coccinelle, since the "
"kernel now carries its own .cocciconfig, you will need to use SPFLAGS to use "
"idutils if desired. See below section \"Additional flags\" for more details "
"on how to use idutils."
msgstr ""

#: ../../../dev-tools/coccinelle.rst:289
msgid "Additional flags"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:291
msgid ""
"Additional flags can be passed to spatch through the SPFLAGS variable. This "
"works as Coccinelle respects the last flags given to it when options are in "
"conflict. ::"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:297
msgid ""
"Coccinelle supports idutils as well but requires coccinelle >= 1.0.6. When "
"no ID file is specified coccinelle assumes your ID database file is in the "
"file .id-utils.index on the top level of the kernel. Coccinelle carries a "
"script scripts/idutils_index.sh which creates the database with::"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:304
msgid ""
"If you have another database filename you can also just symlink with this "
"name. ::"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:309
msgid ""
"Alternatively you can specify the database filename explicitly, for "
"instance::"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:314
msgid "See ``spatch --help`` to learn more about spatch options."
msgstr ""

#: ../../../dev-tools/coccinelle.rst:316
msgid ""
"Note that the ``--use-glimpse`` and ``--use-idutils`` options require "
"external tools for indexing the code. None of them is thus active by "
"default. However, by indexing the code with one of these tools, and "
"according to the cocci file used, spatch could proceed the entire code base "
"more quickly."
msgstr ""

#: ../../../dev-tools/coccinelle.rst:323
msgid "SmPL patch specific options"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:325
msgid ""
"SmPL patches can have their own requirements for options passed to "
"Coccinelle. SmPL patch-specific options can be provided by providing them at "
"the top of the SmPL patch, for instance::"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:332
msgid "SmPL patch Coccinelle requirements"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:334
msgid ""
"As Coccinelle features get added some more advanced SmPL patches may require "
"newer versions of Coccinelle. If an SmPL patch requires a minimum version of "
"Coccinelle, this can be specified as follows, as an example if requiring at "
"least Coccinelle >= 1.0.5::"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:342
msgid "Proposing new semantic patches"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:344
msgid ""
"New semantic patches can be proposed and submitted by kernel developers. For "
"sake of clarity, they should be organized in the sub-directories of "
"``scripts/coccinelle/``."
msgstr ""

#: ../../../dev-tools/coccinelle.rst:350
msgid "Detailed description of the ``report`` mode"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:352
msgid "``report`` generates a list in the following format::"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:357 ../../../dev-tools/coccinelle.rst:397
#: ../../../dev-tools/coccinelle.rst:443 ../../../dev-tools/coccinelle.rst:480
msgid "Example"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:359 ../../../dev-tools/coccinelle.rst:399
#: ../../../dev-tools/coccinelle.rst:445 ../../../dev-tools/coccinelle.rst:482
msgid "Running::"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:363 ../../../dev-tools/coccinelle.rst:403
#: ../../../dev-tools/coccinelle.rst:449 ../../../dev-tools/coccinelle.rst:486
msgid "will execute the following part of the SmPL script::"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:382
msgid ""
"This SmPL excerpt generates entries on the standard output, as illustrated "
"below::"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:391
msgid "Detailed description of the ``patch`` mode"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:393
msgid ""
"When the ``patch`` mode is available, it proposes a fix for each problem "
"identified."
msgstr ""

#: ../../../dev-tools/coccinelle.rst:414
msgid ""
"This SmPL excerpt generates patch hunks on the standard output, as "
"illustrated below::"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:431
msgid "Detailed description of the ``context`` mode"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:433
msgid ""
"``context`` highlights lines of interest and their context in a diff-like "
"style."
msgstr ""

#: ../../../dev-tools/coccinelle.rst:436
msgid ""
"**NOTE**: The diff-like output generated is NOT an applicable patch. The "
"intent of the ``context`` mode is to highlight the important lines "
"(annotated with minus, ``-``) and gives some surrounding context lines "
"around. This output can be used with the diff mode of Emacs to review the "
"code."
msgstr ""

#: ../../../dev-tools/coccinelle.rst:459
msgid ""
"This SmPL excerpt generates diff hunks on the standard output, as "
"illustrated below::"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:475
msgid "Detailed description of the ``org`` mode"
msgstr ""

#: ../../../dev-tools/coccinelle.rst:506
msgid ""
"This SmPL excerpt generates Org entries on the standard output, as "
"illustrated below::"
msgstr ""
