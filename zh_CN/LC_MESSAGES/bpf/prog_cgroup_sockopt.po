# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../bpf/prog_cgroup_sockopt.rst:5
msgid "BPF_PROG_TYPE_CGROUP_SOCKOPT"
msgstr ""

#: ../../../bpf/prog_cgroup_sockopt.rst:7
msgid ""
"``BPF_PROG_TYPE_CGROUP_SOCKOPT`` program type can be attached to two cgroup "
"hooks:"
msgstr ""

#: ../../../bpf/prog_cgroup_sockopt.rst:10
msgid ""
"``BPF_CGROUP_GETSOCKOPT`` - called every time process executes "
"``getsockopt`` system call."
msgstr ""

#: ../../../bpf/prog_cgroup_sockopt.rst:12
msgid ""
"``BPF_CGROUP_SETSOCKOPT`` - called every time process executes "
"``setsockopt`` system call."
msgstr ""

#: ../../../bpf/prog_cgroup_sockopt.rst:15
msgid ""
"The context (``struct bpf_sockopt``) has associated socket (``sk``) and all "
"input arguments: ``level``, ``optname``, ``optval`` and ``optlen``."
msgstr ""

#: ../../../bpf/prog_cgroup_sockopt.rst:19
msgid "BPF_CGROUP_SETSOCKOPT"
msgstr ""

#: ../../../bpf/prog_cgroup_sockopt.rst:21
msgid ""
"``BPF_CGROUP_SETSOCKOPT`` is triggered *before* the kernel handling of "
"sockopt and it has writable context: it can modify the supplied arguments "
"before passing them down to the kernel. This hook has access to the cgroup "
"and socket local storage."
msgstr ""

#: ../../../bpf/prog_cgroup_sockopt.rst:26
msgid ""
"If BPF program sets ``optlen`` to -1, the control will be returned back to "
"the userspace after all other BPF programs in the cgroup chain finish (i.e. "
"kernel ``setsockopt`` handling will *not* be executed)."
msgstr ""

#: ../../../bpf/prog_cgroup_sockopt.rst:30
msgid ""
"Note, that ``optlen`` can not be increased beyond the user-supplied value. "
"It can only be decreased or set to -1. Any other value will trigger "
"``EFAULT``."
msgstr ""

#: ../../../bpf/prog_cgroup_sockopt.rst:35
#: ../../../bpf/prog_cgroup_sockopt.rst:57
msgid "Return Type"
msgstr ""

#: ../../../bpf/prog_cgroup_sockopt.rst:37
#: ../../../bpf/prog_cgroup_sockopt.rst:59
msgid ""
"``0`` - reject the syscall, ``EPERM`` will be returned to the userspace."
msgstr ""

#: ../../../bpf/prog_cgroup_sockopt.rst:38
msgid "``1`` - success, continue with next BPF program in the cgroup chain."
msgstr ""

#: ../../../bpf/prog_cgroup_sockopt.rst:41
msgid "BPF_CGROUP_GETSOCKOPT"
msgstr ""

#: ../../../bpf/prog_cgroup_sockopt.rst:43
msgid ""
"``BPF_CGROUP_GETSOCKOPT`` is triggered *after* the kernel handing of "
"sockopt. The BPF hook can observe ``optval``, ``optlen`` and ``retval`` if "
"it's interested in whatever kernel has returned. BPF hook can override the "
"values above, adjust ``optlen`` and reset ``retval`` to 0. If ``optlen`` has "
"been increased above initial ``getsockopt`` value (i.e. userspace buffer is "
"too small), ``EFAULT`` is returned."
msgstr ""

#: ../../../bpf/prog_cgroup_sockopt.rst:50
msgid "This hook has access to the cgroup and socket local storage."
msgstr ""

#: ../../../bpf/prog_cgroup_sockopt.rst:52
msgid ""
"Note, that the only acceptable value to set to ``retval`` is 0 and the "
"original value that the kernel returned. Any other value will trigger "
"``EFAULT``."
msgstr ""

#: ../../../bpf/prog_cgroup_sockopt.rst:60
msgid ""
"``1`` - success: copy ``optval`` and ``optlen`` to userspace, return "
"``retval`` from the syscall (note that this can be overwritten by the BPF "
"program from the parent cgroup)."
msgstr ""

#: ../../../bpf/prog_cgroup_sockopt.rst:65
msgid "Cgroup Inheritance"
msgstr ""

#: ../../../bpf/prog_cgroup_sockopt.rst:67
msgid ""
"Suppose, there is the following cgroup hierarchy where each cgroup has "
"``BPF_CGROUP_GETSOCKOPT`` attached at each level with ``BPF_F_ALLOW_MULTI`` "
"flag::"
msgstr ""

#: ../../../bpf/prog_cgroup_sockopt.rst:75
msgid ""
"When the application calls ``getsockopt`` syscall from the cgroup B, the "
"programs are executed from the bottom up: B, A. First program (B) sees the "
"result of kernel's ``getsockopt``. It can optionally adjust ``optval``, "
"``optlen`` and reset ``retval`` to 0. After that control will be passed to "
"the second (A) program which will see the same context as B including any "
"potential modifications."
msgstr ""

#: ../../../bpf/prog_cgroup_sockopt.rst:82
msgid ""
"Same for ``BPF_CGROUP_SETSOCKOPT``: if the program is attached to A and B, "
"the trigger order is B, then A. If B does any changes to the input arguments "
"(``level``, ``optname``, ``optval``, ``optlen``), then the next program in "
"the chain (A) will see those changes, *not* the original input "
"``setsockopt`` arguments. The potentially modified values will be then "
"passed down to the kernel."
msgstr ""

#: ../../../bpf/prog_cgroup_sockopt.rst:90
msgid "Large optval"
msgstr ""

#: ../../../bpf/prog_cgroup_sockopt.rst:91
msgid ""
"When the ``optval`` is greater than the ``PAGE_SIZE``, the BPF program can "
"access only the first ``PAGE_SIZE`` of that data. So it has to options:"
msgstr ""

#: ../../../bpf/prog_cgroup_sockopt.rst:94
msgid ""
"Set ``optlen`` to zero, which indicates that the kernel should use the "
"original buffer from the userspace. Any modifications done by the BPF "
"program to the ``optval`` are ignored."
msgstr ""

#: ../../../bpf/prog_cgroup_sockopt.rst:97
msgid ""
"Set ``optlen`` to the value less than ``PAGE_SIZE``, which indicates that "
"the kernel should use BPF's trimmed ``optval``."
msgstr ""

#: ../../../bpf/prog_cgroup_sockopt.rst:100
msgid ""
"When the BPF program returns with the ``optlen`` greater than ``PAGE_SIZE``, "
"the userspace will receive original kernel buffers without any modifications "
"that the BPF program might have applied."
msgstr ""

#: ../../../bpf/prog_cgroup_sockopt.rst:106
msgid "Example"
msgstr ""

#: ../../../bpf/prog_cgroup_sockopt.rst:108
msgid "Recommended way to handle BPF programs is as follows:"
msgstr ""

#: ../../../bpf/prog_cgroup_sockopt.rst:161
msgid ""
"See ``tools/testing/selftests/bpf/progs/sockopt_sk.c`` for an example of BPF "
"program that handles socket options."
msgstr ""
