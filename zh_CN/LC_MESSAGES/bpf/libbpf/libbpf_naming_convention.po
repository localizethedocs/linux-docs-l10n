# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:4
msgid "API naming convention"
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:6
msgid ""
"libbpf API provides access to a few logically separated groups of functions "
"and types. Every group has its own naming convention described here. It's "
"recommended to follow these conventions whenever a new function or type is "
"added to keep libbpf API clean and consistent."
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:11
msgid ""
"All types and functions provided by libbpf API should have one of the "
"following prefixes: ``bpf_``, ``btf_``, ``libbpf_``, ``btf_dump_``, "
"``ring_buffer_``, ``perf_buffer_``."
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:16
msgid "System call wrappers"
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:18
msgid ""
"System call wrappers are simple wrappers for commands supported by sys_bpf "
"system call. These wrappers should go to ``bpf.h`` header file and map one "
"to one to corresponding commands."
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:22
msgid ""
"For example ``bpf_map_lookup_elem`` wraps ``BPF_MAP_LOOKUP_ELEM`` command of "
"sys_bpf, ``bpf_prog_attach`` wraps ``BPF_PROG_ATTACH``, etc."
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:26
msgid "Objects"
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:28
msgid ""
"Another class of types and functions provided by libbpf API is \"objects\" "
"and functions to work with them. Objects are high-level abstractions such as "
"BPF program or BPF map. They're represented by corresponding structures such "
"as ``struct bpf_object``, ``struct bpf_program``, ``struct bpf_map``, etc."
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:34
msgid ""
"Structures are forward declared and access to their fields should be "
"provided via corresponding getters and setters rather than directly."
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:37
msgid ""
"These objects are associated with corresponding parts of ELF object that "
"contains compiled BPF programs."
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:40
msgid ""
"For example ``struct bpf_object`` represents ELF object itself created from "
"an ELF file or from a buffer, ``struct bpf_program`` represents a program in "
"ELF object and ``struct bpf_map`` is a map."
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:44
msgid ""
"Functions that work with an object have names built from object name, double "
"underscore and part that describes function purpose."
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:47
msgid ""
"For example ``bpf_object__open`` consists of the name of corresponding "
"object, ``bpf_object``, double underscore and ``open`` that defines the "
"purpose of the function to open ELF file and create ``bpf_object`` from it."
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:52
msgid ""
"All objects and corresponding functions other than BTF related should go to "
"``libbpf.h``. BTF types and functions should go to ``btf.h``."
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:56
msgid "Auxiliary functions"
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:58
msgid ""
"Auxiliary functions and types that don't fit well in any of categories "
"described above should have ``libbpf_`` prefix, e.g. ``libbpf_get_error`` or "
"``libbpf_prog_type_by_name``."
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:63
msgid "ABI"
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:65
msgid ""
"libbpf can be both linked statically or used as DSO. To avoid possible "
"conflicts with other libraries an application is linked with, all non-static "
"libbpf symbols should have one of the prefixes mentioned in API "
"documentation above. See API naming convention to choose the right name for "
"a new symbol."
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:72
msgid "Symbol visibility"
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:74
msgid ""
"libbpf follow the model when all global symbols have visibility \"hidden\" "
"by default and to make a symbol visible it has to be explicitly attributed "
"with ``LIBBPF_API`` macro. For example:"
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:82
msgid ""
"This prevents from accidentally exporting a symbol, that is not supposed to "
"be a part of ABI what, in turn, improves both libbpf developer- and user-"
"experiences."
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:87
msgid "ABI versioning"
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:89
msgid ""
"To make future ABI extensions possible libbpf ABI is versioned. Versioning "
"is implemented by ``libbpf.map`` version script that is passed to linker."
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:93
msgid ""
"Version name is ``LIBBPF_`` prefix + three-component numeric version, "
"starting from ``0.0.1``."
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:96
msgid ""
"Every time ABI is being changed, e.g. because a new symbol is added or "
"semantic of existing symbol is changed, ABI version should be bumped. This "
"bump in ABI version is at most once per kernel development cycle."
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:100
msgid "For example, if current state of ``libbpf.map`` is:"
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:112
msgid ""
", and a new symbol ``bpf_func_c`` is being introduced, then ``libbpf.map`` "
"should be changed like this:"
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:129
msgid ""
", where new version ``LIBBPF_0.0.2`` depends on the previous "
"``LIBBPF_0.0.1``."
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:132
msgid ""
"Format of version script and ways to handle ABI changes, including "
"incompatible ones, described in details in [1]."
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:136
msgid "Stand-alone build"
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:138
msgid ""
"Under https://github.com/libbpf/libbpf there is a (semi-)automated mirror of "
"the mainline's version of libbpf for a stand-alone build."
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:141
msgid ""
"However, all changes to libbpf's code base must be upstreamed through the "
"mainline kernel tree."
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:146
msgid "API documentation convention"
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:148
msgid ""
"The libbpf API is documented via comments above definitions in header files. "
"These comments can be rendered by doxygen and sphinx for well organized html "
"output. This section describes the convention in which these comments should "
"be formatted."
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:153
msgid "Here is an example from btf.h:"
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:172
msgid "The comment must start with a block comment of the form '/\\*\\*'."
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:174
msgid ""
"The documentation always starts with a @brief directive. This line is a "
"short description about this API. It starts with the name of the API, "
"denoted in bold like so: **api_name**. Please include an open and close "
"parenthesis if this is a function. Follow with the short description of the "
"API. A longer form description can be added below the last directive, at the "
"bottom of the comment."
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:180
msgid ""
"Parameters are denoted with the @param directive, there should be one for "
"each parameter. If this is a function with a non-void return, use the "
"@return directive to document it."
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:185
msgid "License"
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:187
msgid "libbpf is dual-licensed under LGPL 2.1 and BSD 2-Clause."
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:190
msgid "Links"
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:192
msgid "[1] https://www.akkadia.org/drepper/dsohowto.pdf"
msgstr ""

#: ../../../bpf/libbpf/libbpf_naming_convention.rst:193
msgid "(Chapter 3. Maintaining APIs and ABIs)."
msgstr ""
