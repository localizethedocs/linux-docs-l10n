# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../bpf/clang-notes.rst:0
msgid "Contents"
msgstr ""

#: ../../../bpf/clang-notes.rst:6
msgid "Clang implementation notes"
msgstr ""

#: ../../../bpf/clang-notes.rst:8
msgid ""
"This document provides more details specific to the Clang/LLVM "
"implementation of the eBPF instruction set."
msgstr ""

#: ../../../bpf/clang-notes.rst:11
msgid "Versions"
msgstr ""

#: ../../../bpf/clang-notes.rst:13
msgid ""
"Clang defined \"CPU\" versions, where a CPU version of 3 corresponds to the "
"current eBPF ISA."
msgstr ""

#: ../../../bpf/clang-notes.rst:15
msgid ""
"Clang can select the eBPF ISA version using ``-mcpu=v3`` for example to "
"select version 3."
msgstr ""

#: ../../../bpf/clang-notes.rst:18
msgid "Arithmetic instructions"
msgstr ""

#: ../../../bpf/clang-notes.rst:20
msgid ""
"For CPU versions prior to 3, Clang v7.0 and later can enable ``BPF_ALU`` "
"support with ``-Xclang -target-feature -Xclang +alu32``.  In CPU version 3, "
"support is automatically included."
msgstr ""

#: ../../../bpf/clang-notes.rst:24
msgid "Jump instructions"
msgstr ""

#: ../../../bpf/clang-notes.rst:26
msgid ""
"If ``-O0`` is used, Clang will generate the ``BPF_CALL | BPF_X | BPF_JMP`` "
"(0x8d) instruction, which is not supported by the Linux kernel verifier."
msgstr ""

#: ../../../bpf/clang-notes.rst:30
msgid "Atomic operations"
msgstr ""

#: ../../../bpf/clang-notes.rst:32
msgid ""
"Clang can generate atomic instructions by default when ``-mcpu=v3`` is "
"enabled. If a lower version for ``-mcpu`` is set, the only atomic "
"instruction Clang can generate is ``BPF_ADD`` *without* ``BPF_FETCH``. If "
"you need to enable the atomics features, while keeping a lower ``-mcpu`` "
"version, you can use ``-Xclang -target-feature -Xclang +alu32``."
msgstr ""
