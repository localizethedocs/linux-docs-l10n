# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../mm/page_table_check.rst:5
msgid "Page Table Check"
msgstr ""

#: ../../../mm/page_table_check.rst:8
msgid "Introduction"
msgstr ""

#: ../../../mm/page_table_check.rst:10
msgid ""
"Page table check allows to harden the kernel by ensuring that some types of "
"the memory corruptions are prevented."
msgstr ""

#: ../../../mm/page_table_check.rst:13
msgid ""
"Page table check performs extra verifications at the time when new pages "
"become accessible from the userspace by getting their page table entries "
"(PTEs PMDs etc.) added into the table."
msgstr ""

#: ../../../mm/page_table_check.rst:17
msgid ""
"In case of most detected corruption, the kernel is crashed. There is a small "
"performance and memory overhead associated with the page table check. "
"Therefore, it is disabled by default, but can be optionally enabled on "
"systems where the extra hardening outweighs the performance costs. Also, "
"because page table check is synchronous, it can help with debugging double "
"map memory corruption issues, by crashing kernel at the time wrong mapping "
"occurs instead of later which is often the case with memory corruptions bugs."
msgstr ""

#: ../../../mm/page_table_check.rst:25
msgid ""
"It can also be used to do page table entry checks over various flags, dump "
"warnings when illegal combinations of entry flags are detected.  Currently, "
"userfaultfd is the only user of such to sanity check wr-protect bit against "
"any writable flags.  Illegal flag combinations will not directly cause data "
"corruption in this case immediately, but that will cause read-only data to "
"be writable, leading to corrupt when the page content is later modified."
msgstr ""

#: ../../../mm/page_table_check.rst:33
msgid "Double mapping detection logic"
msgstr ""

#: ../../../mm/page_table_check.rst:36
msgid "Current Mapping"
msgstr ""

#: ../../../mm/page_table_check.rst:36
msgid "New mapping"
msgstr ""

#: ../../../mm/page_table_check.rst:36
msgid "Permissions"
msgstr ""

#: ../../../mm/page_table_check.rst:36
msgid "Rule"
msgstr ""

#: ../../../mm/page_table_check.rst:38 ../../../mm/page_table_check.rst:40
#: ../../../mm/page_table_check.rst:42 ../../../mm/page_table_check.rst:44
msgid "Anonymous"
msgstr ""

#: ../../../mm/page_table_check.rst:38
msgid "Read"
msgstr ""

#: ../../../mm/page_table_check.rst:38 ../../../mm/page_table_check.rst:46
msgid "Allow"
msgstr ""

#: ../../../mm/page_table_check.rst:40
msgid "Read / Write"
msgstr ""

#: ../../../mm/page_table_check.rst:40 ../../../mm/page_table_check.rst:42
#: ../../../mm/page_table_check.rst:44
msgid "Prohibit"
msgstr ""

#: ../../../mm/page_table_check.rst:42 ../../../mm/page_table_check.rst:44
#: ../../../mm/page_table_check.rst:46
msgid "Named"
msgstr ""

#: ../../../mm/page_table_check.rst:42 ../../../mm/page_table_check.rst:44
#: ../../../mm/page_table_check.rst:46
msgid "Any"
msgstr ""

#: ../../../mm/page_table_check.rst:50
msgid "Enabling Page Table Check"
msgstr ""

#: ../../../mm/page_table_check.rst:52
msgid "Build kernel with:"
msgstr ""

#: ../../../mm/page_table_check.rst:54
msgid ""
"PAGE_TABLE_CHECK=y Note, it can only be enabled on platforms where "
"ARCH_SUPPORTS_PAGE_TABLE_CHECK is available."
msgstr ""

#: ../../../mm/page_table_check.rst:58
msgid "Boot with 'page_table_check=on' kernel parameter."
msgstr ""

#: ../../../mm/page_table_check.rst:60
msgid ""
"Optionally, build kernel with PAGE_TABLE_CHECK_ENFORCED in order to have "
"page table support without extra kernel parameter."
msgstr ""

#: ../../../mm/page_table_check.rst:64
msgid "Implementation notes"
msgstr ""

#: ../../../mm/page_table_check.rst:66
msgid ""
"We specifically decided not to use VMA information in order to avoid relying "
"on MM states (except for limited \"struct page\" info). The page table check "
"is a separate from Linux-MM state machine that verifies that the user "
"accessible pages are not falsely shared."
msgstr ""

#: ../../../mm/page_table_check.rst:71
msgid ""
"PAGE_TABLE_CHECK depends on EXCLUSIVE_SYSTEM_RAM. The reason is that without "
"EXCLUSIVE_SYSTEM_RAM, users are allowed to map arbitrary physical memory "
"regions into the userspace via /dev/mem. At the same time, pages may change "
"their properties (e.g., from anonymous pages to named pages) while they are "
"still being mapped in the userspace, leading to \"corruption\" detected by "
"the page table check."
msgstr ""

#: ../../../mm/page_table_check.rst:78
msgid ""
"Even with EXCLUSIVE_SYSTEM_RAM, I/O pages may be still allowed to be mapped "
"via /dev/mem. However, these pages are always considered as named pages, so "
"they won't break the logic used in the page table check."
msgstr ""
