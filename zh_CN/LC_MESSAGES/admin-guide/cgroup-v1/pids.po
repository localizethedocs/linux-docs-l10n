# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../admin-guide/cgroup-v1/pids.rst:3
msgid "Process Number Controller"
msgstr ""

#: ../../../admin-guide/cgroup-v1/pids.rst:6
msgid "Abstract"
msgstr ""

#: ../../../admin-guide/cgroup-v1/pids.rst:8
msgid ""
"The process number controller is used to allow a cgroup hierarchy to stop "
"any new tasks from being fork()'d or clone()'d after a certain limit is "
"reached."
msgstr ""

#: ../../../admin-guide/cgroup-v1/pids.rst:11
msgid ""
"Since it is trivial to hit the task limit without hitting any kmemcg limits "
"in place, PIDs are a fundamental resource. As such, PID exhaustion must be "
"preventable in the scope of a cgroup hierarchy by allowing resource limiting "
"of the number of tasks in a cgroup."
msgstr ""

#: ../../../admin-guide/cgroup-v1/pids.rst:17
msgid "Usage"
msgstr ""

#: ../../../admin-guide/cgroup-v1/pids.rst:19
msgid ""
"In order to use the `pids` controller, set the maximum number of tasks in "
"pids.max (this is not available in the root cgroup for obvious reasons). The "
"number of processes currently in the cgroup is given by pids.current."
msgstr ""

#: ../../../admin-guide/cgroup-v1/pids.rst:23
msgid ""
"Organisational operations are not blocked by cgroup policies, so it is "
"possible to have pids.current > pids.max. This can be done by either setting "
"the limit to be smaller than pids.current, or attaching enough processes to "
"the cgroup such that pids.current > pids.max. However, it is not possible to "
"violate a cgroup policy through fork() or clone(). fork() and clone() will "
"return -EAGAIN if the creation of a new process would cause a cgroup policy "
"to be violated."
msgstr ""

#: ../../../admin-guide/cgroup-v1/pids.rst:30
msgid ""
"To set a cgroup to have no limit, set pids.max to \"max\". This is the "
"default for all new cgroups (N.B. that PID limits are hierarchical, so the "
"most stringent limit in the hierarchy is followed)."
msgstr ""

#: ../../../admin-guide/cgroup-v1/pids.rst:34
msgid ""
"pids.current tracks all child cgroup hierarchies, so parent/pids.current is "
"a superset of parent/child/pids.current."
msgstr ""

#: ../../../admin-guide/cgroup-v1/pids.rst:37
msgid "The pids.events file contains event counters:"
msgstr ""

#: ../../../admin-guide/cgroup-v1/pids.rst:39
msgid ""
"max: Number of times fork failed in the cgroup because limit was hit in self "
"or ancestors."
msgstr ""

#: ../../../admin-guide/cgroup-v1/pids.rst:43
msgid "Example"
msgstr ""

#: ../../../admin-guide/cgroup-v1/pids.rst:45
msgid "First, we mount the pids controller::"
msgstr ""

#: ../../../admin-guide/cgroup-v1/pids.rst:50
msgid "Then we create a hierarchy, set limits and attach processes to it::"
msgstr ""

#: ../../../admin-guide/cgroup-v1/pids.rst:59
msgid ""
"It should be noted that attempts to overcome the set limit (2 in this case) "
"will fail::"
msgstr ""

#: ../../../admin-guide/cgroup-v1/pids.rst:68
msgid ""
"Even if we migrate to a child cgroup (which doesn't have a set limit), we "
"will not be able to overcome the most stringent limit in the hierarchy (in "
"this case, parent's)::"
msgstr ""

#: ../../../admin-guide/cgroup-v1/pids.rst:83
msgid ""
"We can set a limit that is smaller than pids.current, which will stop any "
"new processes from being forked at all (note that the shell itself counts "
"towards pids.current)::"
msgstr ""
