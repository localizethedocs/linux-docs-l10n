# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../admin-guide/module-signing.rst:2
msgid "Kernel module signing facility"
msgstr ""

#: ../../../admin-guide/module-signing.rst:19
msgid "Overview"
msgstr ""

#: ../../../admin-guide/module-signing.rst:21
msgid ""
"The kernel module signing facility cryptographically signs modules during "
"installation and then checks the signature upon loading the module.  This "
"allows increased kernel security by disallowing the loading of unsigned "
"modules or modules signed with an invalid key.  Module signing increases "
"security by making it harder to load a malicious module into the kernel.  "
"The module signature checking is done by the kernel so that it is not "
"necessary to have trusted userspace bits."
msgstr ""

#: ../../../admin-guide/module-signing.rst:29
msgid ""
"This facility uses X.509 ITU-T standard certificates to encode the public "
"keys involved.  The signatures are not themselves encoded in any industrial "
"standard type.  The built-in facility currently only supports the RSA & NIST "
"P-384 ECDSA public key signing standard (though it is pluggable and permits "
"others to be used).  The possible hash algorithms that can be used are SHA-2 "
"and SHA-3 of sizes 256, 384, and 512 (the algorithm is selected by data in "
"the signature)."
msgstr ""

#: ../../../admin-guide/module-signing.rst:39
msgid "Configuring module signing"
msgstr ""

#: ../../../admin-guide/module-signing.rst:41
msgid ""
"The module signing facility is enabled by going to the :menuselection:"
"`Enable Loadable Module Support` section of the kernel configuration and "
"turning on::"
msgstr ""

#: ../../../admin-guide/module-signing.rst:47
msgid "This has a number of options available:"
msgstr ""

#: ../../../admin-guide/module-signing.rst:49
msgid ""
":menuselection:`Require modules to be validly signed` "
"(``CONFIG_MODULE_SIG_FORCE``)"
msgstr ""

#: ../../../admin-guide/module-signing.rst:52
msgid ""
"This specifies how the kernel should deal with a module that has a signature "
"for which the key is not known or a module that is unsigned."
msgstr ""

#: ../../../admin-guide/module-signing.rst:55
msgid ""
"If this is off (ie. \"permissive\"), then modules for which the key is not "
"available and modules that are unsigned are permitted, but the kernel will "
"be marked as being tainted, and the concerned modules will be marked as "
"tainted, shown with the character 'E'."
msgstr ""

#: ../../../admin-guide/module-signing.rst:60
msgid ""
"If this is on (ie. \"restrictive\"), only modules that have a valid "
"signature that can be verified by a public key in the kernel's possession "
"will be loaded.  All other modules will generate an error."
msgstr ""

#: ../../../admin-guide/module-signing.rst:64
msgid ""
"Irrespective of the setting here, if the module has a signature block that "
"cannot be parsed, it will be rejected out of hand."
msgstr ""

#: ../../../admin-guide/module-signing.rst:68
msgid ""
":menuselection:`Automatically sign all modules` (``CONFIG_MODULE_SIG_ALL``)"
msgstr ""

#: ../../../admin-guide/module-signing.rst:71
msgid ""
"If this is on then modules will be automatically signed during the "
"modules_install phase of a build.  If this is off, then the modules must be "
"signed manually using::"
msgstr ""

#: ../../../admin-guide/module-signing.rst:78
msgid ":menuselection:`Which hash algorithm should modules be signed with?`"
msgstr ""

#: ../../../admin-guide/module-signing.rst:80
msgid ""
"This presents a choice of which hash algorithm the installation phase will "
"sign the modules with:"
msgstr ""

#: ../../../admin-guide/module-signing.rst:84
msgid "``CONFIG_MODULE_SIG_SHA256``"
msgstr ""

#: ../../../admin-guide/module-signing.rst:84
msgid ":menuselection:`Sign modules with SHA-256`"
msgstr ""

#: ../../../admin-guide/module-signing.rst:85
msgid "``CONFIG_MODULE_SIG_SHA384``"
msgstr ""

#: ../../../admin-guide/module-signing.rst:85
msgid ":menuselection:`Sign modules with SHA-384`"
msgstr ""

#: ../../../admin-guide/module-signing.rst:86
msgid "``CONFIG_MODULE_SIG_SHA512``"
msgstr ""

#: ../../../admin-guide/module-signing.rst:86
msgid ":menuselection:`Sign modules with SHA-512`"
msgstr ""

#: ../../../admin-guide/module-signing.rst:87
msgid "``CONFIG_MODULE_SIG_SHA3_256``"
msgstr ""

#: ../../../admin-guide/module-signing.rst:87
msgid ":menuselection:`Sign modules with SHA3-256`"
msgstr ""

#: ../../../admin-guide/module-signing.rst:88
msgid "``CONFIG_MODULE_SIG_SHA3_384``"
msgstr ""

#: ../../../admin-guide/module-signing.rst:88
msgid ":menuselection:`Sign modules with SHA3-384`"
msgstr ""

#: ../../../admin-guide/module-signing.rst:89
msgid "``CONFIG_MODULE_SIG_SHA3_512``"
msgstr ""

#: ../../../admin-guide/module-signing.rst:89
msgid ":menuselection:`Sign modules with SHA3-512`"
msgstr ""

#: ../../../admin-guide/module-signing.rst:92
msgid ""
"The algorithm selected here will also be built into the kernel (rather than "
"being a module) so that modules signed with that algorithm can have their "
"signatures checked without causing a dependency loop."
msgstr ""

#: ../../../admin-guide/module-signing.rst:97
msgid ""
":menuselection:`File name or PKCS#11 URI of module signing key` "
"(``CONFIG_MODULE_SIG_KEY``)"
msgstr ""

#: ../../../admin-guide/module-signing.rst:100
msgid ""
"Setting this option to something other than its default of ``certs/"
"signing_key.pem`` will disable the autogeneration of signing keys and allow "
"the kernel modules to be signed with a key of your choosing. The string "
"provided should identify a file containing both a private key and its "
"corresponding X.509 certificate in PEM form, or — on systems where the "
"OpenSSL ENGINE_pkcs11 is functional — a PKCS#11 URI as defined by RFC7512. "
"In the latter case, the PKCS#11 URI should reference both a certificate and "
"a private key."
msgstr ""

#: ../../../admin-guide/module-signing.rst:109
msgid ""
"If the PEM file containing the private key is encrypted, or if the PKCS#11 "
"token requires a PIN, this can be provided at build time by means of the "
"``KBUILD_SIGN_PIN`` variable."
msgstr ""

#: ../../../admin-guide/module-signing.rst:114
msgid ""
":menuselection:`Additional X.509 keys for default system keyring` "
"(``CONFIG_SYSTEM_TRUSTED_KEYS``)"
msgstr ""

#: ../../../admin-guide/module-signing.rst:117
msgid ""
"This option can be set to the filename of a PEM-encoded file containing "
"additional certificates which will be included in the system keyring by "
"default."
msgstr ""

#: ../../../admin-guide/module-signing.rst:121
msgid ""
"Note that enabling module signing adds a dependency on the OpenSSL devel "
"packages to the kernel build processes for the tool that does the signing."
msgstr ""

#: ../../../admin-guide/module-signing.rst:127
msgid "Generating signing keys"
msgstr ""

#: ../../../admin-guide/module-signing.rst:129
msgid ""
"Cryptographic keypairs are required to generate and check signatures.  A "
"private key is used to generate a signature and the corresponding public key "
"is used to check it.  The private key is only needed during the build, after "
"which it can be deleted or stored securely.  The public key gets built into "
"the kernel so that it can be used to check the signatures as the modules are "
"loaded."
msgstr ""

#: ../../../admin-guide/module-signing.rst:136
msgid ""
"Under normal conditions, when ``CONFIG_MODULE_SIG_KEY`` is unchanged from "
"its default, the kernel build will automatically generate a new keypair "
"using openssl if one does not exist in the file::"
msgstr ""

#: ../../../admin-guide/module-signing.rst:142
msgid ""
"during the building of vmlinux (the public part of the key needs to be built "
"into vmlinux) using parameters in the::"
msgstr ""

#: ../../../admin-guide/module-signing.rst:147
msgid "file (which is also generated if it does not already exist)."
msgstr ""

#: ../../../admin-guide/module-signing.rst:149
msgid ""
"One can select between RSA (``MODULE_SIG_KEY_TYPE_RSA``) and ECDSA "
"(``MODULE_SIG_KEY_TYPE_ECDSA``) to generate either RSA 4k or NIST P-384 "
"keypair."
msgstr ""

#: ../../../admin-guide/module-signing.rst:153
msgid "It is strongly recommended that you provide your own x509.genkey file."
msgstr ""

#: ../../../admin-guide/module-signing.rst:155
msgid ""
"Most notably, in the x509.genkey file, the req_distinguished_name section "
"should be altered from the default::"
msgstr ""

#: ../../../admin-guide/module-signing.rst:163
msgid "The generated RSA key size can also be set with::"
msgstr ""

#: ../../../admin-guide/module-signing.rst:169
msgid ""
"It is also possible to manually generate the key private/public files using "
"the x509.genkey key generation configuration file in the root node of the "
"Linux kernel sources tree and the openssl command.  The following is an "
"example to generate the public/private key files::"
msgstr ""

#: ../../../admin-guide/module-signing.rst:178
msgid ""
"The full pathname for the resulting kernel_key.pem file can then be "
"specified in the ``CONFIG_MODULE_SIG_KEY`` option, and the certificate and "
"key therein will be used instead of an autogenerated keypair."
msgstr ""

#: ../../../admin-guide/module-signing.rst:185
msgid "Public keys in the kernel"
msgstr ""

#: ../../../admin-guide/module-signing.rst:187
msgid ""
"The kernel contains a ring of public keys that can be viewed by root.  "
"They're in a keyring called \".builtin_trusted_keys\" that can be seen by::"
msgstr ""

#: ../../../admin-guide/module-signing.rst:196
msgid ""
"Beyond the public key generated specifically for module signing, additional "
"trusted certificates can be provided in a PEM-encoded file referenced by the "
"``CONFIG_SYSTEM_TRUSTED_KEYS`` configuration option."
msgstr ""

#: ../../../admin-guide/module-signing.rst:200
msgid ""
"Further, the architecture code may take public keys from a hardware store "
"and add those in also (e.g. from the UEFI key database)."
msgstr ""

#: ../../../admin-guide/module-signing.rst:203
msgid "Finally, it is possible to add additional public keys by doing::"
msgstr ""

#: ../../../admin-guide/module-signing.rst:207
msgid "e.g.::"
msgstr ""

#: ../../../admin-guide/module-signing.rst:211
msgid ""
"Note, however, that the kernel will only permit keys to be added to ``."
"builtin_trusted_keys`` **if** the new key's X.509 wrapper is validly signed "
"by a key that is already resident in the ``.builtin_trusted_keys`` at the "
"time the key was added."
msgstr ""

#: ../../../admin-guide/module-signing.rst:218
msgid "Manually signing modules"
msgstr ""

#: ../../../admin-guide/module-signing.rst:220
msgid ""
"To manually sign a module, use the scripts/sign-file tool available in the "
"Linux kernel source tree.  The script requires 4 arguments:"
msgstr ""

#: ../../../admin-guide/module-signing.rst:223
msgid "The hash algorithm (e.g., sha256)"
msgstr ""

#: ../../../admin-guide/module-signing.rst:224
msgid "The private key filename or PKCS#11 URI"
msgstr ""

#: ../../../admin-guide/module-signing.rst:225
msgid "The public key filename"
msgstr ""

#: ../../../admin-guide/module-signing.rst:226
msgid "The kernel module to be signed"
msgstr ""

#: ../../../admin-guide/module-signing.rst:228
msgid "The following is an example to sign a kernel module::"
msgstr ""

#: ../../../admin-guide/module-signing.rst:233
msgid ""
"The hash algorithm used does not have to match the one configured, but if it "
"doesn't, you should make sure that hash algorithm is either built into the "
"kernel or can be loaded without requiring itself."
msgstr ""

#: ../../../admin-guide/module-signing.rst:237
msgid ""
"If the private key requires a passphrase or PIN, it can be provided in the "
"$KBUILD_SIGN_PIN environment variable."
msgstr ""

#: ../../../admin-guide/module-signing.rst:243
msgid "Signed modules and stripping"
msgstr ""

#: ../../../admin-guide/module-signing.rst:245
msgid ""
"A signed module has a digital signature simply appended at the end.  The "
"string ``~Module signature appended~.`` at the end of the module's file "
"confirms that a signature is present but it does not confirm that the "
"signature is valid!"
msgstr ""

#: ../../../admin-guide/module-signing.rst:249
msgid ""
"Signed modules are BRITTLE as the signature is outside of the defined ELF "
"container.  Thus they MAY NOT be stripped once the signature is computed and "
"attached.  Note the entire module is the signed payload, including any and "
"all debug information present at the time of signing."
msgstr ""

#: ../../../admin-guide/module-signing.rst:257
msgid "Loading signed modules"
msgstr ""

#: ../../../admin-guide/module-signing.rst:259
msgid ""
"Modules are loaded with insmod, modprobe, ``init_module()`` or "
"``finit_module()``, exactly as for unsigned modules as no processing is done "
"in userspace.  The signature checking is all done within the kernel."
msgstr ""

#: ../../../admin-guide/module-signing.rst:266
msgid "Non-valid signatures and unsigned modules"
msgstr ""

#: ../../../admin-guide/module-signing.rst:268
msgid ""
"If ``CONFIG_MODULE_SIG_FORCE`` is enabled or module.sig_enforce=1 is "
"supplied on the kernel command line, the kernel will only load validly "
"signed modules for which it has a public key.   Otherwise, it will also load "
"modules that are unsigned.   Any module for which the kernel has a key, but "
"which proves to have a signature mismatch will not be permitted to load."
msgstr ""

#: ../../../admin-guide/module-signing.rst:274
msgid "Any module that has an unparsable signature will be rejected."
msgstr ""

#: ../../../admin-guide/module-signing.rst:279
msgid "Administering/protecting the private key"
msgstr ""

#: ../../../admin-guide/module-signing.rst:281
msgid ""
"Since the private key is used to sign modules, viruses and malware could use "
"the private key to sign modules and compromise the operating system.  The "
"private key must be either destroyed or moved to a secure location and not "
"kept in the root node of the kernel source tree."
msgstr ""

#: ../../../admin-guide/module-signing.rst:286
msgid ""
"If you use the same private key to sign modules for multiple kernel "
"configurations, you must ensure that the module version information is "
"sufficient to prevent loading a module into a different kernel.  Either set "
"``CONFIG_MODVERSIONS=y`` or ensure that each configuration has a different "
"kernel release string by changing ``EXTRAVERSION`` or "
"``CONFIG_LOCALVERSION``."
msgstr ""
