# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../gpu/amdgpu/display/dc-debug.rst:3
msgid "Display Core Debug tools"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:5
msgid ""
"In this section, you will find helpful information on debugging the amdgpu "
"driver from the display perspective. This page introduces debug mechanisms "
"and procedures to help you identify if some issues are related to display "
"code."
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:10
msgid "Narrow down display issues"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:12
msgid ""
"Since the display is the driver's visual component, it is common to see "
"users reporting issues as a display when another component causes the "
"problem. This section equips users to determine if a specific issue was "
"caused by the display component or another part of the driver."
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:18
msgid "DC dmesg important messages"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:20
msgid ""
"The dmesg log is the first source of information to be checked, and amdgpu "
"takes advantage of this feature by logging some valuable information. When "
"looking for the issues associated with amdgpu, remember that each component "
"of the driver (e.g., smu, PSP, dm, etc.) is loaded one by one, and this "
"information can be found in the dmesg log. In this sense, look for the part "
"of the log that looks like the below log snippet::"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:42
msgid ""
"From the above example, you can see the line that reports that `<dm>`, "
"(**Display Manager**), was loaded, which means that display can be part of "
"the issue. If you do not see that line, something else might have failed "
"before amdgpu loads the display component, indicating that we don't have a "
"displayÂ issue."
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:48
msgid ""
"After you identified that the DM was loaded correctly, you can check for the "
"display version of the hardware in use, which can be retrieved from the "
"dmesg log with the command::"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:54
msgid "This command shows a message that looks like this::"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:58
msgid "This message has two key pieces of information:"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:60
msgid ""
"**The DC version (e.g., v3.2.285)**: Display developers release a new DC "
"version every week, and this information can be advantageous in a situation "
"where a user/developer must find a good point versus a bad point based on a "
"tested version of the display code. Remember from page :ref:`Display Core "
"<amdgpu-display-core>`, that every week the new patches for display are "
"heavily tested with IGT and manual tests."
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:66
msgid ""
"**The DCN version (e.g., DCN 3.2)**: The DCN block is associated with the "
"hardware generation, and the DCN version conveys the hardware generation "
"that the driver is currently running. This information helps to narrow down "
"the code debug area since each DCN version has its files in the DC folder "
"per DCN component (from the example, the developer might want to focus on "
"files/folders/functions/structs with the dcn32 label might be executed). "
"However, keep in mind that DC reuses code across different DCN versions; for "
"example, it is expected to have some callbacks set in one DCN that are the "
"same as those from another DCN. In summary, use the DCN version just as a "
"guide."
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:76
msgid ""
"From the dmesg file, it is also possible to get the ATOM bios code by using::"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:80
msgid "Which generates an output that looks like this::"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:84
msgid "This type of information is useful to be reported."
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:87
msgid "Avoid loading display core"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:89
msgid ""
"Sometimes, it might be hard to figure out which part of the driver is "
"causing the issue; if you suspect that the display is not part of the "
"problem and your bug scenario is simple (e.g., some desktop configuration) "
"you can try to remove the display component from the equation. First, you "
"need to identify `dm` ID from the dmesg log; for example, search for the "
"following log::"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:102
msgid ""
"Notice from the above example that the `dm` id is 5 for this specific "
"hardware. Next, you need to run the following binary operation to identify "
"the IP block mask::"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:108
msgid "From our example the IP mask is::"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:112
msgid ""
"Finally, to disable DC, you just need to set the below parameter in your "
"bootloader::"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:117
msgid ""
"If you can boot your system with the DC disabled and still see the issue, it "
"means you can rule DC out of the equation. However, if the bug disappears, "
"you still need to consider the DC part of the problem and keep narrowing "
"down the issue. In some scenarios, disabling DC is impossible since it might "
"be necessary to use the display component to reproduce the issue (e.g., play "
"a game)."
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:124
msgid "**Note: This will probably lead to the absence of a display output.**"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:127
msgid "Display flickering"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:129
msgid ""
"Display flickering might have multiple causes; one is the lack of proper "
"power to the GPU or problems in the DPM switches. A good first generic "
"verification is to set the GPU to use high voltage::"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:135
msgid ""
"The above command sets the GPU/APU to use the maximum power allowed which "
"disables DPM switches. If forcing DPM levels high does not fix the issue, it "
"is less likely that the issue is related to power management. If the issue "
"disappears, there is a good chance that other components might be involved, "
"and the display should not be ignored since this could be a DPM issues. From "
"the display side, if the power increase fixes the issue, it is worth "
"debugging the clock configuration and the pipe split police used in the "
"specific configuration."
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:145
msgid "Display artifacts"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:147
msgid ""
"Users may see some screen artifacts that can be categorized into two "
"different types: localized artifacts and general artifacts. The localized "
"artifacts happen in some specific areas, such as around the UI window "
"corners; if you see this type of issue, there is a considerable chance that "
"you have a userspace problem, likely Mesa or similar. The general artifacts "
"usually happen on the entire screen. They might be caused by a "
"misconfiguration at the driver level of the display parameters, but the "
"userspace might also cause this issue. One way to identify the source of the "
"problem is to take a screenshot or make a desktop video capture when the "
"problem happens; after checking the screenshot/video recording, if you don't "
"see any of the artifacts, it means that the issue is likely on the driver "
"side. If you can still see the problem in the data collected, it is an issue "
"that probably happened during rendering, and the display code just got the "
"framebuffer already corrupted."
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:162
msgid "Disabling/Enabling specific features"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:164
msgid ""
"DC has a struct named `dc_debug_options`, which is statically initialized by "
"all DCE/DCN components based on the specific hardware characteristic. This "
"structure usually facilitates the bring-up phase since developers can start "
"with many disabled features and enable them individually. This is also an "
"important debug feature since users can change it when debugging specific "
"issues."
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:171
msgid ""
"For example, dGPU users sometimes see a problem where a horizontal fillet of "
"flickering happens in some specific part of the screen. This could be an "
"indication of Sub-Viewport issues; after the users identified the target "
"DCN, they can set the `force_disable_subvp` field to true in the statically "
"initialized version of `dc_debug_options` to see if the issue gets fixed. "
"Along the same lines, users/developers can also try to turn off "
"`fams2_config` and `enable_single_display_2to1_odm_policy`. In summary, the "
"`dc_debug_options` is an interesting form for identifying the problem."
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:181
msgid "DC Visual Confirmation"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:183
msgid ""
"Display core provides a feature named visual confirmation, which is a set of "
"bars added at the scanout time by the driver to convey some specific "
"information. In general, you can enable this debug option by using::"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:189
msgid ""
"Where `N` is an integer number for some specific scenarios that the "
"developer wants to enable, you will see some of these debug cases in the "
"following subsection."
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:194
msgid "Multiple Planes Debug"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:196
msgid ""
"If you want to enable or debug multiple planes in a specific user-space "
"application, you can leverage a debug feature named visual confirm. For "
"enabling it, you will need::"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:202
msgid ""
"You need to reload your GUI to see the visual confirmation. When the plane "
"configuration changes or a full update occurs there will be a colored bar at "
"the bottom of each hardware plane being drawn on the screen."
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:206
msgid ""
"The color indicates the format - For example, red is AR24 and green is NV12"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:207
msgid "The height of the bar indicates the index of the plane"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:208
msgid ""
"Pipe split can be observed if there are two bars with a difference in height "
"covering the same plane"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:211
msgid ""
"Consider the video playback case in which a video is played in a specific "
"plane, and the desktop is drawn in another plane. The video plane should "
"feature one or two green bars at the bottom of the video depending on pipe "
"split configuration."
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:216
msgid "There should **not** be any visual corruption"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:217
msgid "There should **not** be any underflow or screen flashes"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:218
msgid "There should **not** be any black screens"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:219
msgid "There should **not** be any cursor corruption"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:220
msgid ""
"Multiple plane **may** be briefly disabled during window transitions or "
"resizing but should come back after the action has finished"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:224
msgid "Pipe Split Debug"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:226
msgid ""
"Sometimes we need to debug if DCN is splitting pipes correctly, and visual "
"confirmation is also handy for this case. Similar to the MPO case, you can "
"use the below command to enable visual confirmation::"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:232
msgid ""
"In this case, if you have a pipe split, you will see one small red bar at "
"the bottom of the display covering the entire display width and another bar "
"covering the second pipe. In other words, you will see a bit high bar in the "
"second pipe."
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:238
msgid "DTN Debug"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:240
msgid ""
"DC (DCN) provides an extensive log that dumps multiple details from our "
"hardware configuration. Via debugfs, you can capture those status values by "
"using Display Test Next (DTN) log, which can be captured via debugfs by "
"using::"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:246
msgid ""
"Since this log is updated accordingly with DCN status, you can also follow "
"the change in real-time by using something like::"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:251
msgid ""
"When reporting a bug related to DC, consider attaching this log before and "
"after you reproduce the bug."
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:255
msgid "Collect Firmware information"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:257
msgid ""
"When reporting issues, it is important to have the firmware information "
"since it can be helpful for debugging purposes. To get all the firmware "
"information, use the command::"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:263
msgid ""
"From the display perspective, pay attention to the firmware of the DMCU and "
"DMCUB."
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:267
msgid "DMUB Firmware Debug"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:269
msgid ""
"Sometimes, dmesg logs aren't enough. This is especially true if a feature is "
"implemented primarily in DMUB firmware. In such cases, all we see in dmesg "
"when an issue arises is some generic timeout error. So, to get more relevant "
"information, we can trace DMUB commands by enabling the relevant bits in "
"`amdgpu_dm_dmub_trace_mask`."
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:275
msgid "Currently, we support the tracing of the following groups:"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:278
msgid "Trace Groups"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "Name"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "Mask Value"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "INFO"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "0x1"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "IRQ SVC"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "0x2"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "VBIOS"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "0x4"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "REGISTER"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "0x8"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "PHY DBG"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "0x10"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "PSR"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "0x20"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "AUX"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "0x40"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "SMU"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "0x80"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "MALL"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "0x100"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "ABM"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "0x200"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "ALPM"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "0x400"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "TIMER"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "0x800"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "HW LOCK MGR"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "0x1000"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "INBOX1"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "0x2000"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "PHY SEQ"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "0x4000"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "PSR STATE"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "0x8000"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "ZSTATE"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "0x10000"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "TRANSMITTER CTL"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "0x20000"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "PANEL CNTL"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "0x40000"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "FAMS"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "0x80000"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "DPIA"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "0x100000"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "SUBVP"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "0x200000"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "INBOX0"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "0x400000"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "SDP"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "0x4000000"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "REPLAY"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "0x8000000"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "REPLAY RESIDENCY"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "0x20000000"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "CURSOR INFO"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "0x80000000"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "IPS"
msgstr ""

#: ../../../gpu/amdgpu/display/trace-groups-table.csv:1
msgid "0x100000000"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:285
msgid "**Note: Not all ASICs support all of the listed trace groups**"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:287
msgid "So, to enable just PSR tracing you can use the following command::"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:291
msgid ""
"Then, you need to enable logging trace events to the buffer, which you can "
"do using the following::"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:296
msgid ""
"Lastly, after you are able to reproduce the issue you are trying to debug, "
"you can disable tracing and read the trace log by using the following::"
msgstr ""

#: ../../../gpu/amdgpu/display/dc-debug.rst:302
msgid ""
"So, when reporting bugs related to features such as PSR and ABM, consider "
"enabling the relevant bits in the mask before reproducing the issue and "
"attach the log that you obtain from the trace buffer in any bug reports that "
"you create."
msgstr ""
