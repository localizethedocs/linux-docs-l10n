# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-21 08:55+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../gpu/komeda-kms.rst:5
msgid "drm/komeda Arm display driver"
msgstr ""

#: ../../../gpu/komeda-kms.rst:7
msgid ""
"The drm/komeda driver supports the Arm display processor D71 and later "
"products, this document gives a brief overview of driver design: how it "
"works and why design it like that."
msgstr ""

#: ../../../gpu/komeda-kms.rst:12
msgid "Overview of D71 like display IPs"
msgstr ""

#: ../../../gpu/komeda-kms.rst:14
msgid ""
"From D71, Arm display IP begins to adopt a flexible and modularized "
"architecture. A display pipeline is made up of multiple individual and "
"functional pipeline stages called components, and every component has some "
"specific capabilities that can give the flowed pipeline pixel data a "
"particular processing."
msgstr ""

#: ../../../gpu/komeda-kms.rst:20
msgid "Typical D71 components:"
msgstr ""

#: ../../../gpu/komeda-kms.rst:23
msgid "Layer"
msgstr ""

#: ../../../gpu/komeda-kms.rst:24
msgid ""
"Layer is the first pipeline stage, which prepares the pixel data for the "
"next stage. It fetches the pixel from memory, decodes it if it's AFBC, "
"rotates the source image, unpacks or converts YUV pixels to the device "
"internal RGB pixels, then adjusts the color_space of pixels if needed."
msgstr ""

#: ../../../gpu/komeda-kms.rst:30
msgid "Scaler"
msgstr ""

#: ../../../gpu/komeda-kms.rst:31
msgid ""
"As its name suggests, scaler takes responsibility for scaling, and D71 also "
"supports image enhancements by scaler. The usage of scaler is very flexible "
"and can be connected to layer output for layer scaling, or connected to "
"compositor and scale the whole display frame and then feed the output data "
"into wb_layer which will then write it into memory."
msgstr ""

#: ../../../gpu/komeda-kms.rst:39
msgid "Compositor (compiz)"
msgstr ""

#: ../../../gpu/komeda-kms.rst:40
msgid ""
"Compositor blends multiple layers or pixel data flows into one single "
"display frame. its output frame can be fed into post image processor for "
"showing it on the monitor or fed into wb_layer and written to memory at the "
"same time. user can also insert a scaler between compositor and wb_layer to "
"down scale the display frame first and then write to memory."
msgstr ""

#: ../../../gpu/komeda-kms.rst:47
msgid "Writeback Layer (wb_layer)"
msgstr ""

#: ../../../gpu/komeda-kms.rst:48
msgid ""
"Writeback layer does the opposite things of Layer, which connects to compiz "
"and writes the composition result to memory."
msgstr ""

#: ../../../gpu/komeda-kms.rst:52
msgid "Post image processor (improc)"
msgstr ""

#: ../../../gpu/komeda-kms.rst:53
msgid ""
"Post image processor adjusts frame data like gamma and color space to fit "
"the requirements of the monitor."
msgstr ""

#: ../../../gpu/komeda-kms.rst:57
msgid "Timing controller (timing_ctrlr)"
msgstr ""

#: ../../../gpu/komeda-kms.rst:58
msgid ""
"Final stage of display pipeline, Timing controller is not for the pixel "
"handling, but only for controlling the display timing."
msgstr ""

#: ../../../gpu/komeda-kms.rst:62
msgid "Merger"
msgstr ""

#: ../../../gpu/komeda-kms.rst:63
msgid ""
"D71 scaler mostly only has the half horizontal input/output capabilities "
"compared with Layer, like if Layer supports 4K input size, the scaler only "
"can support 2K input/output in the same time. To achieve the ful frame "
"scaling, D71 introduces Layer Split, which splits the whole image to two "
"half parts and feeds them to two Layers A and B, and does the scaling "
"independently. After scaling the result need to be fed to merger to merge "
"two part images together, and then output merged result to compiz."
msgstr ""

#: ../../../gpu/komeda-kms.rst:72
msgid "Splitter"
msgstr ""

#: ../../../gpu/komeda-kms.rst:73
msgid ""
"Similar to Layer Split, but Splitter is used for writeback, which splits the "
"compiz result to two parts and then feed them to two scalers."
msgstr ""

#: ../../../gpu/komeda-kms.rst:77
msgid "Possible D71 Pipeline usage"
msgstr ""

#: ../../../gpu/komeda-kms.rst:79
msgid ""
"Benefitting from the modularized architecture, D71 pipelines can be easily "
"adjusted to fit different usages. And D71 has two pipelines, which support "
"two types of working mode:"
msgstr ""

#: ../../../gpu/komeda-kms.rst:83
msgid ""
"Dual display mode Two pipelines work independently and separately to drive "
"two display outputs."
msgstr ""

#: ../../../gpu/komeda-kms.rst:86
msgid ""
"Single display mode Two pipelines work together to drive only one display "
"output."
msgstr ""

#: ../../../gpu/komeda-kms.rst:89
msgid ""
"On this mode, pipeline_B doesn't work independently, but outputs its "
"composition result into pipeline_A, and its pixel timing also derived from "
"pipeline_A.timing_ctrlr. The pipeline_B works just like a \"slave\" of "
"pipeline_A(master)"
msgstr ""

#: ../../../gpu/komeda-kms.rst:95
msgid "Single pipeline data flow"
msgstr ""

#: ../../../gpu/komeda-kms.rst:141
msgid "Dual pipeline with Slave enabled"
msgstr ""

#: ../../../gpu/komeda-kms.rst:213
msgid "Sub-pipelines for input and output"
msgstr ""

#: ../../../gpu/komeda-kms.rst:215
msgid ""
"A complete display pipeline can be easily divided into three sub-pipelines "
"according to the in/out usage."
msgstr ""

#: ../../../gpu/komeda-kms.rst:219
msgid "Layer(input) pipeline"
msgstr ""

#: ../../../gpu/komeda-kms.rst:251
msgid "Writeback(output) pipeline"
msgstr ""

#: ../../../gpu/komeda-kms.rst:283
msgid "Display output pipeline"
msgstr ""

#: ../../../gpu/komeda-kms.rst:295
msgid ""
"In the following section we'll see these three sub-pipelines will be handled "
"by KMS-plane/wb_conn/crtc respectively."
msgstr ""

#: ../../../gpu/komeda-kms.rst:299
msgid "Komeda Resource abstraction"
msgstr ""

#: ../../../gpu/komeda-kms.rst:302
msgid "struct komeda_pipeline/component"
msgstr ""

#: ../../../gpu/komeda-kms.rst:304
msgid ""
"To fully utilize and easily access/configure the HW, the driver side also "
"uses a similar architecture: Pipeline/Component to describe the HW features "
"and capabilities, and a specific component includes two parts:"
msgstr ""

#: ../../../gpu/komeda-kms.rst:308
msgid "Data flow controlling."
msgstr ""

#: ../../../gpu/komeda-kms.rst:309
msgid "Specific component capabilities and features."
msgstr ""

#: ../../../gpu/komeda-kms.rst:311
msgid ""
"So the driver defines a common header struct komeda_component to describe "
"the data flow control and all specific components are a subclass of this "
"base structure."
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:77
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:136
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:153
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:387
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:448
#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:89
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:159
#: ../../../gpu/komeda-kms:345:
#: drivers/gpu/drm/arm/display/komeda/komeda_format_caps.h:46
#: drivers/gpu/drm/arm/display/komeda/komeda_format_caps.h:72
#: ../../../gpu/komeda-kms:347:
#: drivers/gpu/drm/arm/display/komeda/komeda_framebuffer.h:18
#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:23
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:41
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:57
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:68
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:97
msgid "**Definition**::"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:93
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:143
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:170
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:413
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:457
#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:106
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:184
#: ../../../gpu/komeda-kms:345:
#: drivers/gpu/drm/arm/display/komeda/komeda_format_caps.h:57
#: drivers/gpu/drm/arm/display/komeda/komeda_format_caps.h:80
#: ../../../gpu/komeda-kms:347:
#: drivers/gpu/drm/arm/display/komeda/komeda_framebuffer.h:30
#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:30
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:49
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:64
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:80
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:107
msgid "**Members**"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:80
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:156
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:388
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:451
msgid "``obj``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:81
msgid "treat component as private obj"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:82
msgid "``pipeline``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:83
msgid "the komeda pipeline this component belongs to"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:84
msgid "``name``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:85
msgid "component name"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:87
msgid "``reg``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:88
msgid ""
"component register base, which is initialized by chip and used by chip only"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:92
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:394
msgid "``id``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:93
msgid "component id"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:95
#: ../../../gpu/komeda-kms:345:
#: drivers/gpu/drm/arm/display/komeda/komeda_format_caps.h:51
msgid "``hw_id``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:96
msgid "component hw id, which is initialized by chip and used by chip only"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:101
msgid "``max_active_inputs``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:102
msgid "**max_active_outputs**:"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:104
msgid ""
"maximum number of inputs/outputs that can be active at the same time Note: "
"the number isn't the bit number of **supported_inputs** or "
"**supported_outputs**, but may be less than it, since component may not "
"support enabling all **supported_inputs**/outputs at the same time."
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:111
msgid "``max_active_outputs``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:112
msgid "maximum number of outputs"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:114
msgid "``supported_inputs``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:115
msgid "**supported_outputs**:"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:117
msgid ""
"bitmask of BIT(component->id) for the supported inputs/outputs, describes "
"the possibilities of how a component is linked into a pipeline."
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:122
msgid "``supported_outputs``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:123
msgid "bitmask of supported output componenet ids"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:126
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:430
#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:187
msgid "``funcs``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:127
msgid "chip functions to access HW"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:130
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:146
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:206
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:443
#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:136
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:210
#: ../../../gpu/komeda-kms:345:
#: drivers/gpu/drm/arm/display/komeda/komeda_format_caps.h:60
#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:52
#: ../../../gpu/komeda-kms:473:
#: drivers/gpu/drm/arm/display/komeda/komeda_crtc.c:69
msgid "**Description**"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:74
msgid ""
"struct komeda_component describe the data flow capabilities for how to link "
"a component into the display pipeline. all specified components are subclass "
"of this structure."
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:139
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:158
msgid "``component``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:140
msgid "indicate which component the data comes from"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:142
msgid "``output_port``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:143
msgid ""
"the output port of the :c:type:`komeda_component_output.component "
"<komeda_component_output>`"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:133
msgid ""
"a component has multiple outputs, if want to know where the data comes from, "
"only know the component is not enough, we still need to know its output port"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:157
msgid "tracking component_state by drm_atomic_state"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:159
msgid "backpointer to the component"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:1
msgid "``{unnamed_union}``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:2
msgid "anonymous"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:171
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:455
msgid "``crtc``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:172
msgid "backpointer for user crtc"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:173
msgid "``plane``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:174
msgid "backpointer for user plane"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:175
#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:82
msgid "``wb_conn``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:176
msgid "backpointer for user wb_connector"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:161
msgid "``binding_user``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:162
msgid ""
"currently bound user, the user can be **crtc**, **plane** or **wb_conn**, "
"which is valid decided by **component** and **inputs**"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:165
msgid "Layer: its user always is plane."
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:166
msgid "compiz/improc/timing_ctrlr: the user is crtc."
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:167
msgid "wb_layer: wb_conn;"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:168
msgid "scaler: plane when input is layer, wb_conn if input is compiz."
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:181
msgid "``active_inputs``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:182
msgid "active_inputs is bitmask of **inputs** index"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:184
msgid "active_inputs = changed_active_inputs | unchanged_active_inputs"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:185
msgid "affected_inputs = old->active_inputs | new->active_inputs;"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:186
msgid "disabling_inputs = affected_inputs ^ active_inputs;"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:187
msgid "changed_inputs = disabling_inputs | changed_active_inputs;"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:189
msgid ""
"NOTE: changed_inputs doesn't include all active_input but only "
"**changed_active_inputs**, and this bitmask can be used in chip level for "
"dirty update."
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:196
msgid "``changed_active_inputs``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:197
msgid "bitmask of the changed **active_inputs**"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:198
msgid "``affected_inputs``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:199
msgid "bitmask for affected **inputs**"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:201
msgid "``inputs``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:202
msgid ""
"the specific inputs[i] only valid on BIT(i) has been set in "
"**active_inputs**, if not the inputs[i] is undefined."
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:150
msgid ""
"component_state is the data flow configuration of the component, and it's "
"the superclass of all specific component_state like **komeda_layer_state**, "
"**komeda_scaler_state**"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:389
msgid "link pipeline as private obj of drm_atomic_state"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:390
msgid "``mdev``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:391
msgid "the parent komeda_dev"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:392
msgid "``pxlclk``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:393
msgid "pixel clock"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:395
msgid "pipeline id"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:396
msgid "``avail_comps``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:397
msgid "available components mask of pipeline"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:399
msgid "``standalone_disabled_comps``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:400
msgid ""
"When disable the pipeline, some components can not be disabled together with "
"others, but need a sparated and standalone disable. The "
"standalone_disabled_comps are the components which need to be disabled "
"standalone, and this concept also introduce concept of two phase. phase 1: "
"for disabling the common components. phase 2: for disabling the "
"standalong_disabled_comps."
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:410
msgid "``n_layers``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:411
msgid "the number of layer on **layers**"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:412
msgid "``layers``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:413
msgid "the pipeline layers"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:414
msgid "``n_scalers``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:415
msgid "the number of scaler on **scalers**"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:416
msgid "``scalers``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:417
msgid "the pipeline scalers"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:418
msgid "``compiz``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:419
msgid "compositor"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:420
msgid "``splitter``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:421
msgid "for split the compiz output to two half data flows"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:422
msgid "``merger``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:423
msgid "merger"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:424
#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:59
msgid "``wb_layer``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:425
msgid "writeback layer"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:426
msgid "``improc``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:427
msgid "post image processor"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:428
msgid "``ctrlr``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:429
msgid "timing controller"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:431
msgid "chip private pipeline functions"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:433
msgid "``of_node``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:434
msgid "pipeline dt node"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:435
msgid "``of_output_port``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:436
msgid "pipeline output port"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:437
msgid "``of_output_links``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:438
msgid "output connector device nodes"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:439
msgid "``dual_link``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:440
msgid "true if of_output_links[0] and [1] are both valid"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:384
msgid ""
"Represent a complete display pipeline and hold all functional components."
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:452
msgid "tracking pipeline_state by drm_atomic_state"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:453
msgid "``pipe``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:454
msgid "backpointer to the pipeline"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:456
msgid "currently bound crtc"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:458
msgid "``active_comps``"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:459
msgid "bitmask - BIT(component->id) of active components"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:462
#: ../../../gpu/komeda-kms:345:
#: drivers/gpu/drm/arm/display/komeda/komeda_format_caps.h:47
msgid "**NOTE**"
msgstr ""

#: ../../../gpu/komeda-kms:315:
#: drivers/gpu/drm/arm/display/komeda/komeda_pipeline.h:446
msgid ""
"Unlike the pipeline, pipeline_state doesn’t gather any component_state into "
"it. It because all component will be managed by drm_atomic_state."
msgstr ""

#: ../../../gpu/komeda-kms.rst:319
msgid "Resource discovery and initialization"
msgstr ""

#: ../../../gpu/komeda-kms.rst:321
msgid ""
"Pipeline and component are used to describe how to handle the pixel data. We "
"still need a @struct komeda_dev to describe the whole view of the device, "
"and the control-abilites of device."
msgstr ""

#: ../../../gpu/komeda-kms.rst:325
msgid ""
"We have &komeda_dev, &komeda_pipeline, &komeda_component. Now fill devices "
"with pipelines. Since komeda is not for D71 only but also intended for later "
"products, of course we’d better share as much as possible between different "
"products. To achieve this, split the komeda device into two layers: CORE and "
"CHIP."
msgstr ""

#: ../../../gpu/komeda-kms.rst:330
msgid "CORE: for common features and capabilities handling."
msgstr ""

#: ../../../gpu/komeda-kms.rst:331
msgid ""
"CHIP: for register programming and HW specific feature (limitation) handling."
msgstr ""

#: ../../../gpu/komeda-kms.rst:333
msgid "CORE can access CHIP by three chip function structures:"
msgstr ""

#: ../../../gpu/komeda-kms.rst:335
msgid "struct komeda_dev_funcs"
msgstr ""

#: ../../../gpu/komeda-kms.rst:336
msgid "struct komeda_pipeline_funcs"
msgstr ""

#: ../../../gpu/komeda-kms.rst:337
msgid "struct komeda_component_funcs"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:91
msgid "``init_format_table``"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:92
msgid ""
"initialize :c:type:`komeda_dev->format_table <komeda_dev>`, this function "
"should be called before the :c:type:`enum_resource <_resource>`"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:98
msgid "``enum_resources``"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:99
msgid "for CHIP to report or add pipeline and component resources to CORE"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:103
msgid "``cleanup``"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:104
msgid "call to chip to cleanup komeda_dev->chip data"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:105
msgid "``connect_iommu``"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:106
msgid "Optional, connect to external iommu"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:107
msgid "``disconnect_iommu``"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:108
msgid "Optional, disconnect to external iommu"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:110
msgid "``irq_handler``"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:111
msgid "for CORE to get the HW event from the CHIP when interrupt happened."
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:116
msgid "``enable_irq``"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:117
msgid "enable irq"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:118
msgid "``disable_irq``"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:119
msgid "disable irq"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:120
msgid "``on_off_vblank``"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:121
msgid "notify HW to on/off vblank"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:124
msgid "``dump_register``"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:125
msgid "Optional, dump registers to seq_file"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:127
msgid "``change_opmode``"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:128
msgid "Notify HW to switch to a new display operation mode."
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:132
msgid "``flush``"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:133
msgid "Notify the HW to flush or kickoff the update"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:86
msgid ""
"Supplied by chip level and returned by the chip entry function xxx_identify,"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:162
msgid "``dev``"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:163
msgid "the base device structure"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:164
msgid "``reg_base``"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:165
msgid "the base address of komeda io space"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:167
msgid "``chip``"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:168
msgid "the basic chip information"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:169
msgid "``fmt_tbl``"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:170
msgid ""
"initialized by :c:type:`komeda_dev_funcs->init_format_table "
"<komeda_dev_funcs>`"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:171
msgid "``aclk``"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:172
msgid "HW main engine clk"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:174
msgid "``irq``"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:175
msgid "irq number"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:177
msgid "``lock``"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:178
msgid "used to protect dpmode"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:179
msgid "``dpmode``"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:180
msgid "current display mode"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:182
msgid "``n_pipelines``"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:183
msgid "the number of pipe in **pipelines**"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:184
msgid "``pipelines``"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:185
msgid "the komeda pipelines"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:188
msgid "chip funcs to access to HW"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:190
msgid "``chip_data``"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:191
msgid ""
"chip data will be added by :c:type:`komeda_dev_funcs.enum_resources\\(\\) "
"<komeda_dev_funcs>` and destroyed by :c:type:`komeda_dev_funcs.cleanup\\(\\) "
"<komeda_dev_funcs>`"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:197
msgid "``iommu``"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:198
msgid "iommu domain"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:200
msgid "``debugfs_root``"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:201
msgid "root directory of komeda debugfs"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:203
msgid "``err_verbosity``"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:204
msgid "bitmask for how much extra info to print on error"
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:206
msgid ""
"See KOMEDA_DEV_* macros for details. Low byte contains the debug level "
"categories, the high byte contains extra debug options."
msgstr ""

#: ../../../gpu/komeda-kms:339:
#: drivers/gpu/drm/arm/display/komeda/komeda_dev.h:156
msgid ""
"Pipeline and component are used to describe how to handle the pixel data. "
"komeda_device is for describing the whole view of the device, and the "
"control-abilites of device."
msgstr ""

#: ../../../gpu/komeda-kms.rst:343
msgid "Format handling"
msgstr ""

#: ../../../gpu/komeda-kms:345:
#: drivers/gpu/drm/arm/display/komeda/komeda_format_caps.h:52
msgid "hw format id, hw specific value."
msgstr ""

#: ../../../gpu/komeda-kms:345:
#: drivers/gpu/drm/arm/display/komeda/komeda_format_caps.h:52
msgid "``fourcc``"
msgstr ""

#: ../../../gpu/komeda-kms:345:
#: drivers/gpu/drm/arm/display/komeda/komeda_format_caps.h:53
msgid "drm fourcc format."
msgstr ""

#: ../../../gpu/komeda-kms:345:
#: drivers/gpu/drm/arm/display/komeda/komeda_format_caps.h:53
msgid "``supported_layer_types``"
msgstr ""

#: ../../../gpu/komeda-kms:345:
#: drivers/gpu/drm/arm/display/komeda/komeda_format_caps.h:54
msgid "indicate which layer supports this format"
msgstr ""

#: ../../../gpu/komeda-kms:345:
#: drivers/gpu/drm/arm/display/komeda/komeda_format_caps.h:54
msgid "``supported_rots``"
msgstr ""

#: ../../../gpu/komeda-kms:345:
#: drivers/gpu/drm/arm/display/komeda/komeda_format_caps.h:55
msgid "allowed rotations for this format"
msgstr ""

#: ../../../gpu/komeda-kms:345:
#: drivers/gpu/drm/arm/display/komeda/komeda_format_caps.h:55
msgid "``supported_afbc_layouts``"
msgstr ""

#: ../../../gpu/komeda-kms:345:
#: drivers/gpu/drm/arm/display/komeda/komeda_format_caps.h:56
msgid "supported afbc layerout"
msgstr ""

#: ../../../gpu/komeda-kms:345:
#: drivers/gpu/drm/arm/display/komeda/komeda_format_caps.h:56
msgid "``supported_afbc_features``"
msgstr ""

#: ../../../gpu/komeda-kms:345:
#: drivers/gpu/drm/arm/display/komeda/komeda_format_caps.h:57
msgid "supported afbc features"
msgstr ""

#: ../../../gpu/komeda-kms:345:
#: drivers/gpu/drm/arm/display/komeda/komeda_format_caps.h:43
msgid ""
"komeda_format_caps is for describing ARM display specific features and "
"limitations for a specific format, and format_caps will be linked into :c:"
"type:`komeda_framebuffer` like a extension of :c:type:`drm_format_info`."
msgstr ""

#: ../../../gpu/komeda-kms:345:
#: drivers/gpu/drm/arm/display/komeda/komeda_format_caps.h:48
msgid ""
"one fourcc may has two different format_caps items for fourcc and "
"fourcc+modifier"
msgstr ""

#: ../../../gpu/komeda-kms:345:
#: drivers/gpu/drm/arm/display/komeda/komeda_format_caps.h:68
msgid "format_caps mananger"
msgstr ""

#: ../../../gpu/komeda-kms:345:
#: drivers/gpu/drm/arm/display/komeda/komeda_format_caps.h:70
msgid "``n_formats``"
msgstr ""

#: ../../../gpu/komeda-kms:345:
#: drivers/gpu/drm/arm/display/komeda/komeda_format_caps.h:71
msgid "the size of format_caps list."
msgstr ""

#: ../../../gpu/komeda-kms:345:
#: drivers/gpu/drm/arm/display/komeda/komeda_format_caps.h:71
#: ../../../gpu/komeda-kms:347:
#: drivers/gpu/drm/arm/display/komeda/komeda_framebuffer.h:20
msgid "``format_caps``"
msgstr ""

#: ../../../gpu/komeda-kms:345:
#: drivers/gpu/drm/arm/display/komeda/komeda_format_caps.h:72
msgid "format_caps list."
msgstr ""

#: ../../../gpu/komeda-kms:345:
#: drivers/gpu/drm/arm/display/komeda/komeda_format_caps.h:72
msgid "``format_mod_supported``"
msgstr ""

#: ../../../gpu/komeda-kms:345:
#: drivers/gpu/drm/arm/display/komeda/komeda_format_caps.h:73
msgid ""
"Optional. Some HW may have special requirements or limitations which can not "
"be described by format_caps, this func supply HW the ability to do the "
"further HW specific check."
msgstr ""

#: ../../../gpu/komeda-kms:347:
#: drivers/gpu/drm/arm/display/komeda/komeda_framebuffer.h:14
msgid "Entending drm_framebuffer with komeda attribute"
msgstr ""

#: ../../../gpu/komeda-kms:347:
#: drivers/gpu/drm/arm/display/komeda/komeda_framebuffer.h:17
#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:22
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:43
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:56
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:67
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:96
msgid "``base``"
msgstr ""

#: ../../../gpu/komeda-kms:347:
#: drivers/gpu/drm/arm/display/komeda/komeda_framebuffer.h:18
msgid ":c:type:`drm_framebuffer`"
msgstr ""

#: ../../../gpu/komeda-kms:347:
#: drivers/gpu/drm/arm/display/komeda/komeda_framebuffer.h:21
msgid "extends drm_format_info for komeda specific information"
msgstr ""

#: ../../../gpu/komeda-kms:347:
#: drivers/gpu/drm/arm/display/komeda/komeda_framebuffer.h:24
msgid "``is_va``"
msgstr ""

#: ../../../gpu/komeda-kms:347:
#: drivers/gpu/drm/arm/display/komeda/komeda_framebuffer.h:25
msgid "if smmu is enabled, it will be true"
msgstr ""

#: ../../../gpu/komeda-kms:347:
#: drivers/gpu/drm/arm/display/komeda/komeda_framebuffer.h:26
msgid "``aligned_w``"
msgstr ""

#: ../../../gpu/komeda-kms:347:
#: drivers/gpu/drm/arm/display/komeda/komeda_framebuffer.h:27
msgid "aligned frame buffer width"
msgstr ""

#: ../../../gpu/komeda-kms:347:
#: drivers/gpu/drm/arm/display/komeda/komeda_framebuffer.h:28
msgid "``aligned_h``"
msgstr ""

#: ../../../gpu/komeda-kms:347:
#: drivers/gpu/drm/arm/display/komeda/komeda_framebuffer.h:29
msgid "aligned frame buffer height"
msgstr ""

#: ../../../gpu/komeda-kms:347:
#: drivers/gpu/drm/arm/display/komeda/komeda_framebuffer.h:30
msgid "``afbc_size``"
msgstr ""

#: ../../../gpu/komeda-kms:347:
#: drivers/gpu/drm/arm/display/komeda/komeda_framebuffer.h:31
msgid "minimum size of afbc"
msgstr ""

#: ../../../gpu/komeda-kms:347:
#: drivers/gpu/drm/arm/display/komeda/komeda_framebuffer.h:32
msgid "``offset_payload``"
msgstr ""

#: ../../../gpu/komeda-kms:347:
#: drivers/gpu/drm/arm/display/komeda/komeda_framebuffer.h:33
msgid "start of afbc body buffer"
msgstr ""

#: ../../../gpu/komeda-kms.rst:351
msgid "Attach komeda_dev to DRM-KMS"
msgstr ""

#: ../../../gpu/komeda-kms.rst:353
msgid ""
"Komeda abstracts resources by pipeline/component, but DRM-KMS uses crtc/"
"plane/connector. One KMS-obj cannot represent only one single component, "
"since the requirements of a single KMS object cannot simply be achieved by a "
"single component, usually that needs multiple components to fit the "
"requirement. Like set mode, gamma, ctm for KMS all target on CRTC-obj, but "
"komeda needs compiz, improc and timing_ctrlr to work together to fit these "
"requirements. And a KMS-Plane may require multiple komeda resources: layer/"
"scaler/compiz."
msgstr ""

#: ../../../gpu/komeda-kms.rst:361
msgid "So, one KMS-Obj represents a sub-pipeline of komeda resources."
msgstr ""

#: ../../../gpu/komeda-kms.rst:363
msgid "Plane: `Layer(input) pipeline`_"
msgstr ""

#: ../../../gpu/komeda-kms.rst:364
msgid "Wb_connector: `Writeback(output) pipeline`_"
msgstr ""

#: ../../../gpu/komeda-kms.rst:365
msgid "Crtc: `Display output pipeline`_"
msgstr ""

#: ../../../gpu/komeda-kms.rst:367
msgid ""
"So, for komeda, we treat KMS crtc/plane/connector as users of pipeline and "
"component, and at any one time a pipeline/component only can be used by one "
"user. And pipeline/component will be treated as private object of DRM-KMS; "
"the state will be managed by drm_atomic_state as well."
msgstr ""

#: ../../../gpu/komeda-kms.rst:373
msgid "How to map plane to Layer(input) pipeline"
msgstr ""

#: ../../../gpu/komeda-kms.rst:375
msgid ""
"Komeda has multiple Layer input pipelines, see: -   `Single pipeline data "
"flow`_ -   `Dual pipeline with Slave enabled`_"
msgstr ""

#: ../../../gpu/komeda-kms.rst:379
msgid ""
"The easiest way is binding a plane to a fixed Layer pipeline, but consider "
"the komeda capabilities:"
msgstr ""

#: ../../../gpu/komeda-kms.rst:382
msgid "Layer Split, See `Layer(input) pipeline`_"
msgstr ""

#: ../../../gpu/komeda-kms.rst:384
msgid ""
"Layer_Split is quite complicated feature, which splits a big image into two "
"parts and handles it by two layers and two scalers individually. But it "
"imports an edge problem or effect in the middle of the image after the "
"split. To avoid such a problem, it needs a complicated Split calculation and "
"some special configurations to the layer and scaler. We'd better hide such "
"HW related complexity to user mode."
msgstr ""

#: ../../../gpu/komeda-kms.rst:391
msgid "Slave pipeline, See `Dual pipeline with Slave enabled`_"
msgstr ""

#: ../../../gpu/komeda-kms.rst:393
msgid ""
"Since the compiz component doesn't output alpha value, the slave pipeline "
"only can be used for bottom layers composition. The komeda driver wants to "
"hide this limitation to the user. The way to do this is to pick a suitable "
"Layer according to plane_state->zpos."
msgstr ""

#: ../../../gpu/komeda-kms.rst:398
msgid ""
"So for komeda, the KMS-plane doesn't represent a fixed komeda layer "
"pipeline, but multiple Layers with same capabilities. Komeda will select one "
"or more Layers to fit the requirement of one KMS-plane."
msgstr ""

#: ../../../gpu/komeda-kms.rst:403
msgid "Make component/pipeline to be drm_private_obj"
msgstr ""

#: ../../../gpu/komeda-kms.rst:405
msgid ""
"Add :c:type:`drm_private_obj` to :c:type:`komeda_component`, :c:type:"
"`komeda_pipeline`"
msgstr ""

#: ../../../gpu/komeda-kms.rst:420
msgid "Tracking component_state/pipeline_state by drm_atomic_state"
msgstr ""

#: ../../../gpu/komeda-kms.rst:422
msgid ""
"Add :c:type:`drm_private_state` and user to :c:type:"
"`komeda_component_state`, :c:type:`komeda_pipeline_state`"
msgstr ""

#: ../../../gpu/komeda-kms.rst:440
msgid "komeda component validation"
msgstr ""

#: ../../../gpu/komeda-kms.rst:442
msgid ""
"Komeda has multiple types of components, but the process of validation are "
"similar, usually including the following steps:"
msgstr ""

#: ../../../gpu/komeda-kms.rst:466
msgid "komeda_kms Abstraction"
msgstr ""

#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:19
msgid "komeda instance of drm_plane"
msgstr ""

#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:23
msgid ":c:type:`drm_plane`"
msgstr ""

#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:25
msgid "``layer``"
msgstr ""

#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:26
msgid "represents available layer input pipelines for this plane."
msgstr ""

#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:28
msgid ""
"NOTE: the layer is not for a specific Layer, but indicate a group of Layers "
"with same capabilities."
msgstr ""

#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:44
msgid ":c:type:`drm_plane_state`"
msgstr ""

#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:45
msgid "``zlist_node``"
msgstr ""

#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:46
msgid "zorder list node"
msgstr ""

#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:48
msgid "``layer_split``"
msgstr ""

#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:49
msgid "on/off layer_split"
msgstr ""

#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:38
msgid ""
"The plane_state can be split into two data flow (left/right) and handled by "
"two layers :c:type:`komeda_plane.layer <komeda_plane>` and :c:type:"
"`komeda_plane.layer <komeda_plane>`.right"
msgstr ""

#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:57
msgid ":c:type:`drm_writeback_connector`"
msgstr ""

#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:60
msgid "represents associated writeback pipeline of komeda"
msgstr ""

#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:68
msgid ":c:type:`drm_crtc`"
msgstr ""

#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:69
msgid "``master``"
msgstr ""

#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:70
msgid "only master has display output"
msgstr ""

#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:72
msgid "``slave``"
msgstr ""

#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:73
msgid "optional"
msgstr ""

#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:75
msgid ""
"Doesn't have its own display output, the handled data flow will merge into "
"the master."
msgstr ""

#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:79
msgid "``slave_planes``"
msgstr ""

#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:80
msgid "komeda slave planes mask"
msgstr ""

#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:83
msgid "komeda write back connector"
msgstr ""

#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:85
msgid "``disable_done``"
msgstr ""

#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:86
msgid "this flip_done is for tracing the disable"
msgstr ""

#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:88
msgid "``encoder``"
msgstr ""

#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:89
msgid "encoder at the end of the pipeline"
msgstr ""

#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:97
msgid ":c:type:`drm_crtc_state`"
msgstr ""

#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:103
msgid "``affected_pipes``"
msgstr ""

#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:104
msgid "the affected pipelines in once display instance"
msgstr ""

#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:108
msgid "``active_pipes``"
msgstr ""

#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:109
msgid "the active pipelines in once display instance"
msgstr ""

#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:113
msgid "``clock_ratio``"
msgstr ""

#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:114
msgid "ratio of (aclk << 32)/pxlclk"
msgstr ""

#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:116
msgid "``max_slave_zorder``"
msgstr ""

#: ../../../gpu/komeda-kms:468:
#: drivers/gpu/drm/arm/display/komeda/komeda_kms.h:117
msgid "the maximum of slave zorder"
msgstr ""

#: ../../../gpu/komeda-kms.rst:472
msgid "komde_kms Functions"
msgstr ""

#: ../../../gpu/komeda-kms:473:
#: drivers/gpu/drm/arm/display/komeda/komeda_crtc.c:65
msgid "build display output data flow"
msgstr ""

#: ../../../gpu/komeda-kms:473:
#: drivers/gpu/drm/arm/display/komeda/komeda_crtc.c:69
#: ../../../gpu/komeda-kms:475:
#: drivers/gpu/drm/arm/display/komeda/komeda_plane.c:67
msgid "**Parameters**"
msgstr ""

#: ../../../gpu/komeda-kms:473:
#: drivers/gpu/drm/arm/display/komeda/komeda_crtc.c:71
msgid "``struct drm_crtc *crtc``"
msgstr ""

#: ../../../gpu/komeda-kms:473:
#: drivers/gpu/drm/arm/display/komeda/komeda_crtc.c:66
msgid "DRM crtc"
msgstr ""

#: ../../../gpu/komeda-kms:473:
#: drivers/gpu/drm/arm/display/komeda/komeda_crtc.c:68
#: ../../../gpu/komeda-kms:475:
#: drivers/gpu/drm/arm/display/komeda/komeda_plane.c:66
msgid "``struct drm_atomic_state *state``"
msgstr ""

#: ../../../gpu/komeda-kms:473:
#: drivers/gpu/drm/arm/display/komeda/komeda_crtc.c:67
msgid "the crtc state object"
msgstr ""

#: ../../../gpu/komeda-kms:473:
#: drivers/gpu/drm/arm/display/komeda/komeda_crtc.c:68
msgid ""
"crtc_atomic_check is the final check stage, so beside build a display data "
"pipeline according to the crtc_state, but still needs to release or disable "
"the unclaimed pipeline resources."
msgstr ""

#: ../../../gpu/komeda-kms:473:
#: drivers/gpu/drm/arm/display/komeda/komeda_crtc.c:72
#: ../../../gpu/komeda-kms:475:
#: drivers/gpu/drm/arm/display/komeda/komeda_plane.c:67
msgid "**Return**"
msgstr ""

#: ../../../gpu/komeda-kms:473:
#: drivers/gpu/drm/arm/display/komeda/komeda_crtc.c:73
#: ../../../gpu/komeda-kms:475:
#: drivers/gpu/drm/arm/display/komeda/komeda_plane.c:67
msgid "Zero for success or -errno"
msgstr ""

#: ../../../gpu/komeda-kms:475:
#: drivers/gpu/drm/arm/display/komeda/komeda_plane.c:63
msgid "build input data flow"
msgstr ""

#: ../../../gpu/komeda-kms:475:
#: drivers/gpu/drm/arm/display/komeda/komeda_plane.c:69
msgid "``struct drm_plane *plane``"
msgstr ""

#: ../../../gpu/komeda-kms:475:
#: drivers/gpu/drm/arm/display/komeda/komeda_plane.c:64
msgid "DRM plane"
msgstr ""

#: ../../../gpu/komeda-kms:475:
#: drivers/gpu/drm/arm/display/komeda/komeda_plane.c:65
msgid "the plane state object"
msgstr ""

#: ../../../gpu/komeda-kms.rst:479
msgid "Build komeda to be a Linux module driver"
msgstr ""

#: ../../../gpu/komeda-kms.rst:481
msgid "Now we have two level devices:"
msgstr ""

#: ../../../gpu/komeda-kms.rst:483
msgid "komeda_dev: describes the real display hardware."
msgstr ""

#: ../../../gpu/komeda-kms.rst:484
msgid "komeda_kms_dev: attaches or connects komeda_dev to DRM-KMS."
msgstr ""

#: ../../../gpu/komeda-kms.rst:486
msgid ""
"All komeda operations are supplied or operated by komeda_dev or "
"komeda_kms_dev, the module driver is only a simple wrapper to pass the Linux "
"command (probe/remove/pm) into komeda_dev or komeda_kms_dev."
msgstr ""
