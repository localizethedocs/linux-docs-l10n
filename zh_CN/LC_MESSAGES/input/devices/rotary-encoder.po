# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../input/devices/rotary-encoder.rst:3
msgid "rotary-encoder - a generic driver for GPIO connected devices"
msgstr ""

#: ../../../input/devices/rotary-encoder.rst:0
msgid "Author"
msgstr ""

#: ../../../input/devices/rotary-encoder.rst:5
msgid "Daniel Mack <daniel@caiaq.de>, Feb 2009"
msgstr ""

#: ../../../input/devices/rotary-encoder.rst:8
msgid "Function"
msgstr ""

#: ../../../input/devices/rotary-encoder.rst:10
msgid ""
"Rotary encoders are devices which are connected to the CPU or other "
"peripherals with two wires. The outputs are phase-shifted by 90 degrees and "
"by triggering on falling and rising edges, the turn direction can be "
"determined."
msgstr ""

#: ../../../input/devices/rotary-encoder.rst:15
msgid ""
"Some encoders have both outputs low in stable states, others also have a "
"stable state with both outputs high (half-period mode) and some have a "
"stable state in all steps (quarter-period mode)."
msgstr ""

#: ../../../input/devices/rotary-encoder.rst:19
msgid "The phase diagram of these two outputs look like this::"
msgstr ""

#: ../../../input/devices/rotary-encoder.rst:42
msgid "For more information, please see"
msgstr ""

#: ../../../input/devices/rotary-encoder.rst:43
msgid "https://en.wikipedia.org/wiki/Rotary_encoder"
msgstr ""

#: ../../../input/devices/rotary-encoder.rst:47
msgid "Events / state machine"
msgstr ""

#: ../../../input/devices/rotary-encoder.rst:49
msgid ""
"In half-period mode, state a) and c) above are used to determine the "
"rotational direction based on the last stable state. Events are reported in "
"states b) and d) given that the new stable state is different from the last "
"(i.e. the rotation was not reversed half-way)."
msgstr ""

#: ../../../input/devices/rotary-encoder.rst:54
msgid "Otherwise, the following apply:"
msgstr ""

#: ../../../input/devices/rotary-encoder.rst:56
msgid "Rising edge on channel A, channel B in low state"
msgstr ""

#: ../../../input/devices/rotary-encoder.rst:57
msgid "This state is used to recognize a clockwise turn"
msgstr ""

#: ../../../input/devices/rotary-encoder.rst:59
msgid "Rising edge on channel B, channel A in high state"
msgstr ""

#: ../../../input/devices/rotary-encoder.rst:60
msgid ""
"When entering this state, the encoder is put into 'armed' state, meaning "
"that there it has seen half the way of a one-step transition."
msgstr ""

#: ../../../input/devices/rotary-encoder.rst:63
msgid "Falling edge on channel A, channel B in high state"
msgstr ""

#: ../../../input/devices/rotary-encoder.rst:64
msgid "This state is used to recognize a counter-clockwise turn"
msgstr ""

#: ../../../input/devices/rotary-encoder.rst:66
msgid "Falling edge on channel B, channel A in low state"
msgstr ""

#: ../../../input/devices/rotary-encoder.rst:67
msgid ""
"Parking position. If the encoder enters this state, a full transition should "
"have happened, unless it flipped back on half the way. The 'armed' state "
"tells us about that."
msgstr ""

#: ../../../input/devices/rotary-encoder.rst:72
msgid "Platform requirements"
msgstr ""

#: ../../../input/devices/rotary-encoder.rst:74
msgid ""
"As there is no hardware dependent call in this driver, the platform it is "
"used with must support gpiolib. Another requirement is that IRQs must be "
"able to fire on both edges."
msgstr ""

#: ../../../input/devices/rotary-encoder.rst:80
msgid "Board integration"
msgstr ""

#: ../../../input/devices/rotary-encoder.rst:82
msgid ""
"To use this driver in your system, register a platform_device with the name "
"'rotary-encoder' and associate the IRQs and some specific platform data with "
"it. Because the driver uses generic device properties, this can be done "
"either via device tree, ACPI, or using static board files, like in example "
"below:"
msgstr ""

#: ../../../input/devices/rotary-encoder.rst:134
msgid ""
"Please consult device tree binding documentation to see all properties "
"supported by the driver."
msgstr ""
