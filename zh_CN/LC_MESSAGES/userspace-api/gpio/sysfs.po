# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../userspace-api/gpio/sysfs.rst:2
msgid "GPIO Sysfs Interface for Userspace"
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:5
msgid ""
"This API is obsoleted by the chardev.rst and the ABI documentation has been "
"moved to Documentation/ABI/obsolete/sysfs-gpio."
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:8
msgid ""
"New developments should use the chardev.rst, and existing developments are "
"encouraged to migrate as soon as possible, as this API will be removed in "
"the future."
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:12
msgid ""
"This interface will continue to be maintained for the migration period, but "
"new features will only be added to the new API."
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:16
msgid "The obsolete sysfs ABI"
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:17
msgid ""
"Platforms which use the \"gpiolib\" implementors framework may choose to "
"configure a sysfs user interface to GPIOs. This is different from the "
"debugfs interface, since it provides control over GPIO direction and value "
"instead of just showing a gpio state summary. Plus, it could be present on "
"production systems without debugging support."
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:23
msgid ""
"Given appropriate hardware documentation for the system, userspace could "
"know for example that GPIO #23 controls the write protect line used to "
"protect boot loader segments in flash memory. System upgrade procedures may "
"need to temporarily remove that protection, first importing a GPIO, then "
"changing its output state, then updating the code before re-enabling the "
"write protection. In normal use, GPIO #23 would never be touched, and the "
"kernel would have no need to know about it."
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:31
msgid ""
"Again depending on appropriate hardware documentation, on some systems "
"userspace GPIO can be used to determine system configuration data that "
"standard kernels won't know about. And for some tasks, simple userspace GPIO "
"drivers could be all that the system really needs."
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:37
msgid ""
"Do NOT abuse sysfs to control hardware that has proper kernel drivers. "
"Please read Documentation/driver-api/gpio/drivers-on-gpio.rst to avoid "
"reinventing kernel wheels in userspace."
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:41
msgid "I MEAN IT. REALLY."
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:44
msgid "Paths in Sysfs"
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:45
msgid "There are three kinds of entries in /sys/class/gpio:"
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:47
msgid "Control interfaces used to get userspace control over GPIOs;"
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:49
msgid "GPIOs themselves; and"
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:51
msgid "GPIO controllers (\"gpio_chip\" instances)."
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:53
msgid "That's in addition to standard files including the \"device\" symlink."
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:55
msgid "The control interfaces are write-only:"
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:57
msgid "/sys/class/gpio/"
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:59
msgid "\"export\" ..."
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:60
msgid ""
"Userspace may ask the kernel to export control of a GPIO to userspace by "
"writing its number to this file."
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:63
msgid ""
"Example:  \"echo 19 > export\" will create a \"gpio19\" node for GPIO #19, "
"if that's not requested by kernel code."
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:66
msgid "\"unexport\" ..."
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:67
msgid "Reverses the effect of exporting to userspace."
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:69
msgid ""
"Example:  \"echo 19 > unexport\" will remove a \"gpio19\" node exported "
"using the \"export\" file."
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:72
msgid ""
"GPIO signals have paths like /sys/class/gpio/gpio42/ (for GPIO #42) and have "
"the following read/write attributes:"
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:75
msgid "/sys/class/gpio/gpioN/"
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:77
msgid "\"direction\" ..."
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:78
msgid ""
"reads as either \"in\" or \"out\". This value may normally be written. "
"Writing as \"out\" defaults to initializing the value as low. To ensure "
"glitch free operation, values \"low\" and \"high\" may be written to "
"configure the GPIO as an output with that initial value."
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:84
msgid ""
"Note that this attribute *will not exist* if the kernel doesn't support "
"changing the direction of a GPIO, or it was exported by kernel code that "
"didn't explicitly allow userspace to reconfigure this GPIO's direction."
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:89
msgid "\"value\" ..."
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:90
msgid ""
"reads as either 0 (inactive) or 1 (active). If the GPIO is configured as an "
"output, this value may be written; any nonzero value is treated as active."
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:94
msgid ""
"If the pin can be configured as interrupt-generating interrupt and if it has "
"been configured to generate interrupts (see the description of \"edge\"), "
"you can poll(2) on that file and poll(2) will return whenever the interrupt "
"was triggered. If you use poll(2), set the events POLLPRI and POLLERR. If "
"you use select(2), set the file descriptor in exceptfds. After poll(2) "
"returns, use pread(2) to read the value at offset zero. Alternatively, "
"either lseek(2) to the beginning of the sysfs file and read the new value or "
"close the file and re-open it to read the value."
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:105
msgid "\"edge\" ..."
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:106
msgid ""
"reads as either \"none\", \"rising\", \"falling\", or \"both\". Write these "
"strings to select the signal edge(s) that will make poll(2) on the \"value\" "
"file return."
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:110
msgid ""
"This file exists only if the pin can be configured as an interrupt "
"generating input pin."
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:113
msgid "\"active_low\" ..."
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:114
msgid ""
"reads as either 0 (false) or 1 (true). Write any nonzero value to invert the "
"value attribute both for reading and writing. Existing and subsequent "
"poll(2) support configuration via the edge attribute for \"rising\" and "
"\"falling\" edges will follow this setting."
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:121
msgid ""
"GPIO controllers have paths like /sys/class/gpio/gpiochip42/ (for the "
"controller implementing GPIOs starting at #42) and have the following read-"
"only attributes:"
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:125
msgid "/sys/class/gpio/gpiochipN/"
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:127
msgid "\"base\" ..."
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:128
msgid "same as N, the first GPIO managed by this chip"
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:130
msgid "\"label\" ..."
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:131
msgid "provided for diagnostics (not always unique)"
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:133
msgid "\"ngpio\" ..."
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:134
msgid "how many GPIOs this manages (N to N + ngpio - 1)"
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:136
msgid ""
"Board documentation should in most cases cover what GPIOs are used for what "
"purposes. However, those numbers are not always stable; GPIOs on a "
"daughtercard might be different depending on the base board being used, or "
"other cards in the stack. In such cases, you may need to use the gpiochip "
"nodes (possibly in conjunction with schematics) to determine the correct "
"GPIO number to use for a given signal."
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:145
msgid "Exporting from Kernel code"
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:146
msgid ""
"Kernel code can explicitly manage exports of GPIOs which have already been "
"requested using gpio_request()::"
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:159
msgid ""
"After a kernel driver requests a GPIO, it may only be made available in the "
"sysfs interface by gpiod_export(). The driver can control whether the signal "
"direction may change. This helps drivers prevent userspace code from "
"accidentally clobbering important system state."
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:164
msgid ""
"This explicit exporting can help with debugging (by making some kinds of "
"experiments easier), or can provide an always-there interface that's "
"suitable for documenting as part of a board support package."
msgstr ""

#: ../../../userspace-api/gpio/sysfs.rst:168
msgid ""
"After the GPIO has been exported, gpiod_export_link() allows creating "
"symlinks from elsewhere in sysfs to the GPIO sysfs node. Drivers can use "
"this to provide the interface under their own device in sysfs with a "
"descriptive name."
msgstr ""
