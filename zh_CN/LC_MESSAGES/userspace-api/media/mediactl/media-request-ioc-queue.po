# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../userspace-api/media/mediactl/media-request-ioc-queue.rst:8
msgid "ioctl MEDIA_REQUEST_IOC_QUEUE"
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-queue.rst:11
msgid "Name"
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-queue.rst:13
msgid "MEDIA_REQUEST_IOC_QUEUE - Queue a request"
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-queue.rst:16
msgid "Synopsis"
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-queue.rst:20
msgid "``int ioctl(int request_fd, MEDIA_REQUEST_IOC_QUEUE)``"
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-queue.rst:23
msgid "Arguments"
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-queue.rst:25
msgid "``request_fd``"
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-queue.rst:26
msgid "File descriptor returned by :ref:`MEDIA_IOC_REQUEST_ALLOC`."
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-queue.rst:29
msgid "Description"
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-queue.rst:31
msgid ""
"If the media device supports :ref:`requests <media-request-api>`, then this "
"request ioctl can be used to queue a previously allocated request."
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-queue.rst:34
msgid ""
"If the request was successfully queued, then the file descriptor can be :ref:"
"`polled <request-func-poll>` to wait for the request to complete."
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-queue.rst:37
msgid ""
"If the request was already queued before, then ``EBUSY`` is returned. Other "
"errors can be returned if the contents of the request contained invalid or "
"inconsistent data, see the next section for a list of common error codes. On "
"error both the request and driver state are unchanged."
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-queue.rst:42
msgid ""
"Once a request is queued, then the driver is required to gracefully handle "
"errors that occur when the request is applied to the hardware. The exception "
"is the ``EIO`` error which signals a fatal error that requires the "
"application to stop streaming to reset the hardware state."
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-queue.rst:47
msgid ""
"It is not allowed to mix queuing requests with queuing buffers directly "
"(without a request). ``EBUSY`` will be returned if the first buffer was "
"queued directly and you next try to queue a request, or vice versa."
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-queue.rst:51
msgid ""
"A request must contain at least one buffer, otherwise this ioctl will return "
"an ``ENOENT`` error."
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-queue.rst:55
msgid "Return Value"
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-queue.rst:57
msgid ""
"On success 0 is returned, on error -1 and the ``errno`` variable is set "
"appropriately. The generic error codes are described at the :ref:`Generic "
"Error Codes <gen-errors>` chapter."
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-queue.rst:61
msgid "EBUSY"
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-queue.rst:62
msgid ""
"The request was already queued or the application queued the first buffer "
"directly, but later attempted to use a request. It is not permitted to mix "
"the two APIs."
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-queue.rst:65
msgid "ENOENT"
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-queue.rst:66
msgid ""
"The request did not contain any buffers. All requests are required to have "
"at least one buffer. This can also be returned if some required "
"configuration is missing in the request."
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-queue.rst:69
msgid "ENOMEM"
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-queue.rst:70
msgid ""
"Out of memory when allocating internal data structures for this request."
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-queue.rst:72
msgid "EINVAL"
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-queue.rst:73
msgid "The request has invalid data."
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-queue.rst:74
msgid "EIO"
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-queue.rst:75
msgid ""
"The hardware is in a bad state. To recover, the application needs to stop "
"streaming to reset the hardware state and then try to restart streaming."
msgstr ""
