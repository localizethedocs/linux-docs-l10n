# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../userspace-api/media/v4l/dev-output.rst:8
msgid "Video Output Interface"
msgstr ""

#: ../../../userspace-api/media/v4l/dev-output.rst:10
msgid ""
"Video output devices encode stills or image sequences as analog video "
"signal. With this interface applications can control the encoding process "
"and move images from user space to the driver."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-output.rst:14
msgid ""
"Conventionally V4L2 video output devices are accessed through character "
"device special files named ``/dev/video`` and ``/dev/video0`` to ``/dev/"
"video63`` with major number 81 and minor numbers 0 to 63. ``/dev/video`` is "
"typically a symbolic link to the preferred video device."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-output.rst:20
msgid "The same device file names are used also for video capture devices."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-output.rst:23
msgid "Querying Capabilities"
msgstr ""

#: ../../../userspace-api/media/v4l/dev-output.rst:25
msgid ""
"Devices supporting the video output interface set the "
"``V4L2_CAP_VIDEO_OUTPUT`` or ``V4L2_CAP_VIDEO_OUTPUT_MPLANE`` flag in the "
"``capabilities`` field of struct :c:type:`v4l2_capability` returned by the :"
"ref:`VIDIOC_QUERYCAP` ioctl. As secondary device functions they may also "
"support the :ref:`raw VBI output <raw-vbi>` (``V4L2_CAP_VBI_OUTPUT``) "
"interface. At least one of the read/write or streaming I/O methods must be "
"supported. Modulators and audio outputs are optional."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-output.rst:36
msgid "Supplemental Functions"
msgstr ""

#: ../../../userspace-api/media/v4l/dev-output.rst:38
msgid ""
"Video output devices shall support :ref:`audio output <audio>`, :ref:"
"`modulator <tuner>`, :ref:`controls <control>`, :ref:`cropping and scaling "
"<crop>` and :ref:`streaming parameter <streaming-par>` ioctls as needed. "
"The :ref:`video output <video>` ioctls must be supported by all video output "
"devices."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-output.rst:46
msgid "Image Format Negotiation"
msgstr ""

#: ../../../userspace-api/media/v4l/dev-output.rst:48
msgid ""
"The output is determined by cropping and image format parameters. The former "
"select an area of the video picture where the image will appear, the latter "
"how images are stored in memory, i. e. in RGB or YUV format, the number of "
"bits per pixel or width and height. Together they also define how images are "
"scaled in the process."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-output.rst:54
msgid ""
"As usual these parameters are *not* reset at :c:func:`open()` time to permit "
"Unix tool chains, programming a device and then writing to it as if it was a "
"plain file. Well written V4L2 applications ensure they really get what they "
"want, including cropping and scaling."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-output.rst:59
msgid ""
"Cropping initialization at minimum requires to reset the parameters to "
"defaults. An example is given in :ref:`crop`."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-output.rst:62
msgid ""
"To query the current image format applications set the ``type`` field of a "
"struct :c:type:`v4l2_format` to ``V4L2_BUF_TYPE_VIDEO_OUTPUT`` or "
"``V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE`` and call the :ref:`VIDIOC_G_FMT "
"<VIDIOC_G_FMT>` ioctl with a pointer to this structure. Drivers fill the "
"struct :c:type:`v4l2_pix_format` ``pix`` or the struct :c:type:"
"`v4l2_pix_format_mplane` ``pix_mp`` member of the ``fmt`` union."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-output.rst:71
msgid ""
"To request different parameters applications set the ``type`` field of a "
"struct :c:type:`v4l2_format` as above and initialize all fields of the "
"struct :c:type:`v4l2_pix_format` ``vbi`` member of the ``fmt`` union, or "
"better just modify the results of :ref:`VIDIOC_G_FMT <VIDIOC_G_FMT>`, and "
"call the :ref:`VIDIOC_S_FMT <VIDIOC_G_FMT>` ioctl with a pointer to this "
"structure. Drivers may adjust the parameters and finally return the actual "
"parameters as :ref:`VIDIOC_G_FMT <VIDIOC_G_FMT>` does."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-output.rst:80
msgid ""
"Like :ref:`VIDIOC_S_FMT <VIDIOC_G_FMT>` the :ref:`VIDIOC_TRY_FMT "
"<VIDIOC_G_FMT>` ioctl can be used to learn about hardware limitations "
"without disabling I/O or possibly time consuming hardware preparations."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-output.rst:84
msgid ""
"The contents of struct :c:type:`v4l2_pix_format` and struct :c:type:"
"`v4l2_pix_format_mplane` are discussed in :ref:`pixfmt`. See also the "
"specification of the :ref:`VIDIOC_G_FMT <VIDIOC_G_FMT>`, :ref:`VIDIOC_S_FMT "
"<VIDIOC_G_FMT>` and :ref:`VIDIOC_TRY_FMT <VIDIOC_G_FMT>` ioctls for details. "
"Video output devices must implement both the :ref:`VIDIOC_G_FMT "
"<VIDIOC_G_FMT>` and :ref:`VIDIOC_S_FMT <VIDIOC_G_FMT>` ioctl, even if :ref:"
"`VIDIOC_S_FMT <VIDIOC_G_FMT>` ignores all requests and always returns "
"default parameters as :ref:`VIDIOC_G_FMT <VIDIOC_G_FMT>` does. :ref:"
"`VIDIOC_TRY_FMT <VIDIOC_G_FMT>` is optional."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-output.rst:94
msgid "Writing Images"
msgstr ""

#: ../../../userspace-api/media/v4l/dev-output.rst:96
msgid ""
"A video output device may support the :ref:`write() function <rw>` and/or "
"streaming (:ref:`memory mapping <mmap>` or :ref:`user pointer <userp>`) I/O. "
"See :ref:`io` for details."
msgstr ""
