# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../userspace-api/media/v4l/dev-event.rst:7
msgid "Event Interface"
msgstr ""

#: ../../../userspace-api/media/v4l/dev-event.rst:9
msgid ""
"The V4L2 event interface provides a means for a user to get immediately "
"notified on certain conditions taking place on a device. This might include "
"start of frame or loss of signal events, for example. Changes in the value "
"or state of a V4L2 control can also be reported through events."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-event.rst:15
msgid ""
"To receive events, the events the user is interested in first must be "
"subscribed using the :ref:`VIDIOC_SUBSCRIBE_EVENT` ioctl. Once an event is "
"subscribed, the events of subscribed types are dequeueable using the :ref:"
"`VIDIOC_DQEVENT` ioctl. Events may be unsubscribed using "
"VIDIOC_UNSUBSCRIBE_EVENT ioctl. The special event type V4L2_EVENT_ALL may be "
"used to unsubscribe all the events the driver supports."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-event.rst:24
msgid ""
"The event subscriptions and event queues are specific to file handles. "
"Subscribing an event on one file handle does not affect other file handles."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-event.rst:28
msgid ""
"The information on dequeueable events is obtained by using select or poll "
"system calls on video devices. The V4L2 events use POLLPRI events on poll "
"system call and exceptions on select system call."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-event.rst:32
msgid ""
"Starting with kernel 3.1 certain guarantees can be given with regards to "
"events:"
msgstr ""

#: ../../../userspace-api/media/v4l/dev-event.rst:35
msgid ""
"Each subscribed event has its own internal dedicated event queue. This means "
"that flooding of one event type will not interfere with other event types."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-event.rst:39
msgid ""
"If the internal event queue for a particular subscribed event becomes full, "
"then the oldest event in that queue will be dropped."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-event.rst:42
msgid ""
"Where applicable, certain event types can ensure that the payload of the "
"oldest event that is about to be dropped will be merged with the payload of "
"the next oldest event. Thus ensuring that no information is lost, but only "
"an intermediate step leading up to that information. See the documentation "
"for the event you want to subscribe to whether this is applicable for that "
"event or not."
msgstr ""
