# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-06 15:47+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../userspace-api/media/drivers/cx2341x-uapi.rst:4
msgid "The cx2341x driver"
msgstr ""

#: ../../../userspace-api/media/drivers/cx2341x-uapi.rst:7
msgid "Non-compressed file format"
msgstr ""

#: ../../../userspace-api/media/drivers/cx2341x-uapi.rst:9
msgid ""
"The cx23416 can produce (and the cx23415 can also read) raw YUV output. The "
"format of a YUV frame is 16x16 linear tiled NV12 (V4L2_PIX_FMT_NV12_16L16)."
msgstr ""

#: ../../../userspace-api/media/drivers/cx2341x-uapi.rst:12
msgid ""
"The format is YUV 4:2:0 which uses 1 Y byte per pixel and 1 U and V byte per "
"four pixels."
msgstr ""

#: ../../../userspace-api/media/drivers/cx2341x-uapi.rst:15
msgid ""
"The data is encoded as two macroblock planes, the first containing the Y "
"values, the second containing UV macroblocks."
msgstr ""

#: ../../../userspace-api/media/drivers/cx2341x-uapi.rst:18
msgid ""
"The Y plane is divided into blocks of 16x16 pixels from left to right and "
"from top to bottom. Each block is transmitted in turn, line-by-line."
msgstr ""

#: ../../../userspace-api/media/drivers/cx2341x-uapi.rst:21
msgid ""
"So the first 16 bytes are the first line of the top-left block, the second "
"16 bytes are the second line of the top-left block, etc. After transmitting "
"this block the first line of the block on the right to the first block is "
"transmitted, etc."
msgstr ""

#: ../../../userspace-api/media/drivers/cx2341x-uapi.rst:26
msgid ""
"The UV plane is divided into blocks of 16x8 UV values going from left to "
"right, top to bottom. Each block is transmitted in turn, line-by-line."
msgstr ""

#: ../../../userspace-api/media/drivers/cx2341x-uapi.rst:29
msgid ""
"So the first 16 bytes are the first line of the top-left block and contain 8 "
"UV value pairs (16 bytes in total). The second 16 bytes are the second line "
"of 8 UV pairs of the top-left block, etc. After transmitting this block the "
"first line of the block on the right to the first block is transmitted, etc."
msgstr ""

#: ../../../userspace-api/media/drivers/cx2341x-uapi.rst:35
msgid ""
"The code below is given as an example on how to convert "
"V4L2_PIX_FMT_NV12_16L16 to separate Y, U and V planes. This code assumes "
"frames of 720x576 (PAL) pixels."
msgstr ""

#: ../../../userspace-api/media/drivers/cx2341x-uapi.rst:38
msgid ""
"The width of a frame is always 720 pixels, regardless of the actual "
"specified width."
msgstr ""

#: ../../../userspace-api/media/drivers/cx2341x-uapi.rst:41
msgid ""
"If the height is not a multiple of 32 lines, then the captured video is "
"missing macroblocks at the end and is unusable. So the height must be a "
"multiple of 32."
msgstr ""

#: ../../../userspace-api/media/drivers/cx2341x-uapi.rst:46
msgid "Raw format c example"
msgstr ""

#: ../../../userspace-api/media/drivers/cx2341x-uapi.rst:131
msgid "Format of embedded V4L2_MPEG_STREAM_VBI_FMT_IVTV VBI data"
msgstr ""

#: ../../../userspace-api/media/drivers/cx2341x-uapi.rst:133
msgid "Author: Hans Verkuil <hverkuil@kernel.org>"
msgstr ""

#: ../../../userspace-api/media/drivers/cx2341x-uapi.rst:136
msgid ""
"This section describes the V4L2_MPEG_STREAM_VBI_FMT_IVTV format of the VBI "
"data embedded in an MPEG-2 program stream. This format is in part dictated "
"by some hardware limitations of the ivtv driver (the driver for the Conexant "
"cx23415/6 chips), in particular a maximum size for the VBI data. Anything "
"longer is cut off when the MPEG stream is played back through the cx23415."
msgstr ""

#: ../../../userspace-api/media/drivers/cx2341x-uapi.rst:142
msgid ""
"The advantage of this format is it is very compact and that all VBI data for "
"all lines can be stored while still fitting within the maximum allowed size."
msgstr ""

#: ../../../userspace-api/media/drivers/cx2341x-uapi.rst:145
msgid ""
"The stream ID of the VBI data is 0xBD. The maximum size of the embedded data "
"is 4 + 43 * 36, which is 4 bytes for a header and 2 * 18 VBI lines with a 1 "
"byte header and a 42 bytes payload each. Anything beyond this limit is cut "
"off by the cx23415/6 firmware. Besides the data for the VBI lines we also "
"need 36 bits for a bitmask determining which lines are captured and 4 bytes "
"for a magic cookie, signifying that this data package contains "
"V4L2_MPEG_STREAM_VBI_FMT_IVTV VBI data. If all lines are used, then there is "
"no longer room for the bitmask. To solve this two different magic numbers "
"were introduced:"
msgstr ""

#: ../../../userspace-api/media/drivers/cx2341x-uapi.rst:154
msgid ""
"'itv0': After this magic number two unsigned longs follow. Bits 0-17 of the "
"first unsigned long denote which lines of the first field are captured. Bits "
"18-31 of the first unsigned long and bits 0-3 of the second unsigned long "
"are used for the second field."
msgstr ""

#: ../../../userspace-api/media/drivers/cx2341x-uapi.rst:159
msgid ""
"'ITV0': This magic number assumes all VBI lines are captured, i.e. it "
"implicitly implies that the bitmasks are 0xffffffff and 0xf."
msgstr ""

#: ../../../userspace-api/media/drivers/cx2341x-uapi.rst:162
msgid ""
"After these magic cookies (and the 8 byte bitmask in case of cookie 'itv0') "
"the captured VBI lines start:"
msgstr ""

#: ../../../userspace-api/media/drivers/cx2341x-uapi.rst:165
msgid ""
"For each line the least significant 4 bits of the first byte contain the "
"data type. Possible values are shown in the table below. The payload is in "
"the following 42 bytes."
msgstr ""

#: ../../../userspace-api/media/drivers/cx2341x-uapi.rst:169
msgid "Here is the list of possible data types:"
msgstr ""
