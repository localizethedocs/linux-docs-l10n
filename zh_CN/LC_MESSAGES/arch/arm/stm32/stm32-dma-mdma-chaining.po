# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:5
msgid "STM32 DMA-MDMA chaining"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:9
msgid "Introduction"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:11
msgid ""
"This document describes the STM32 DMA-MDMA chaining feature. But before "
"going further, let's introduce the peripherals involved."
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:14
msgid ""
"To offload data transfers from the CPU, STM32 microprocessors (MPUs) embed "
"direct memory access controllers (DMA)."
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:17
msgid ""
"STM32MP1 SoCs embed both STM32 DMA and STM32 MDMA controllers. STM32 DMA "
"request routing capabilities are enhanced by a DMA request multiplexer "
"(STM32 DMAMUX)."
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:21
msgid "**STM32 DMAMUX**"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:23
msgid ""
"STM32 DMAMUX routes any DMA request from a given peripheral to any STM32 DMA "
"controller (STM32MP1 counts two STM32 DMA controllers) channels."
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:26
msgid "**STM32 DMA**"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:28
msgid ""
"STM32 DMA is mainly used to implement central data buffer storage (usually "
"in the system SRAM) for different peripheral. It can access external RAMs "
"but without the ability to generate convenient burst transfer ensuring the "
"best load of the AXI."
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:33
msgid "**STM32 MDMA**"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:35
msgid ""
"STM32 MDMA (Master DMA) is mainly used to manage direct data transfers "
"between RAM data buffers without CPU intervention. It can also be used in a "
"hierarchical structure that uses STM32 DMA as first level data buffer "
"interfaces for AHB peripherals, while the STM32 MDMA acts as a second level "
"DMA with better performance. As a AXI/AHB master, STM32 MDMA can take "
"control of the AXI/AHB bus."
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:44
msgid "Principles"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:46
msgid ""
"STM32 DMA-MDMA chaining feature relies on the strengths of STM32 DMA and "
"STM32 MDMA controllers."
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:49
msgid ""
"STM32 DMA has a circular Double Buffer Mode (DBM). At each end of "
"transaction (when DMA data counter - DMA_SxNDTR - reaches 0), the memory "
"pointers (configured with DMA_SxSM0AR and DMA_SxM1AR) are swapped and the "
"DMA data counter is automatically reloaded. This allows the SW or the STM32 "
"MDMA to process one memory area while the second memory area is being filled/"
"used by the STM32 DMA transfer."
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:56
msgid ""
"With STM32 MDMA linked-list mode, a single request initiates the data array "
"(collection of nodes) to be transferred until the linked-list pointer for "
"the channel is null. The channel transfer complete of the last node is the "
"end of transfer, unless first and last nodes are linked to each other, in "
"such a case, the linked-list loops on to create a circular MDMA transfer."
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:62
msgid ""
"STM32 MDMA has direct connections with STM32 DMA. This enables autonomous "
"communication and synchronization between peripherals, thus saving CPU "
"resources and bus congestion. Transfer Complete signal of STM32 DMA channel "
"can triggers STM32 MDMA transfer. STM32 MDMA can clear the request generated "
"by the STM32 DMA by writing to its Interrupt Clear register (whose address "
"is stored in MDMA_CxMAR, and bit mask in MDMA_CxMDR)."
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:69
msgid "STM32 MDMA interconnect table with STM32 DMA"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:72
msgid "STM32 DMAMUX channels"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:72
msgid "STM32 DMA channels"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:72
msgid "STM32 DMA Transfer complete signal"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:72
msgid "STM32 MDMA request"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:77
msgid "Channel *0*"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:77
msgid "DMA1 channel 0"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:77
msgid "dma1_tcf0"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:77
msgid "*0x00*"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:79
msgid "Channel *1*"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:79
msgid "DMA1 channel 1"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:79
msgid "dma1_tcf1"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:79
msgid "*0x01*"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:81
msgid "Channel *2*"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:81
msgid "DMA1 channel 2"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:81
msgid "dma1_tcf2"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:81
msgid "*0x02*"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:83
msgid "Channel *3*"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:83
msgid "DMA1 channel 3"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:83
msgid "dma1_tcf3"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:83
msgid "*0x03*"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:85
msgid "Channel *4*"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:85
msgid "DMA1 channel 4"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:85
msgid "dma1_tcf4"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:85
msgid "*0x04*"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:87
msgid "Channel *5*"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:87
msgid "DMA1 channel 5"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:87
msgid "dma1_tcf5"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:87
msgid "*0x05*"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:89
msgid "Channel *6*"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:89
msgid "DMA1 channel 6"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:89
msgid "dma1_tcf6"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:89
msgid "*0x06*"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:91
msgid "Channel *7*"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:91
msgid "DMA1 channel 7"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:91
msgid "dma1_tcf7"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:91
msgid "*0x07*"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:93
msgid "Channel *8*"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:93
msgid "DMA2 channel 0"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:93
msgid "dma2_tcf0"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:93
msgid "*0x08*"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:95
msgid "Channel *9*"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:95
msgid "DMA2 channel 1"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:95
msgid "dma2_tcf1"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:95
msgid "*0x09*"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:97
msgid "Channel *10*"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:97
msgid "DMA2 channel 2"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:97
msgid "dma2_tcf2"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:97
msgid "*0x0A*"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:99
msgid "Channel *11*"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:99
msgid "DMA2 channel 3"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:99
msgid "dma2_tcf3"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:99
msgid "*0x0B*"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:101
msgid "Channel *12*"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:101
msgid "DMA2 channel 4"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:101
msgid "dma2_tcf4"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:101
msgid "*0x0C*"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:103
msgid "Channel *13*"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:103
msgid "DMA2 channel 5"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:103
msgid "dma2_tcf5"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:103
msgid "*0x0D*"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:105
msgid "Channel *14*"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:105
msgid "DMA2 channel 6"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:105
msgid "dma2_tcf6"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:105
msgid "*0x0E*"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:107
msgid "Channel *15*"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:107
msgid "DMA2 channel 7"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:107
msgid "dma2_tcf7"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:107
msgid "*0x0F*"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:110
msgid ""
"STM32 DMA-MDMA chaining feature then uses a SRAM buffer. STM32MP1 SoCs embed "
"three fast access static internal RAMs of various size, used for data "
"storage. Due to STM32 DMA legacy (within microcontrollers), STM32 DMA "
"performances are bad with DDR, while they are optimal with SRAM. Hence the "
"SRAM buffer used between STM32 DMA and STM32 MDMA. This buffer is split in "
"two equal periods and STM32 DMA uses one period while STM32 MDMA uses the "
"other period simultaneously. ::"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:128
msgid ""
"STM32 DMA-MDMA chaining uses (struct dma_slave_config).peripheral_config to "
"exchange the parameters needed to configure MDMA. These parameters are "
"gathered into a u32 array with three values:"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:132
msgid "the STM32 MDMA request (which is actually the DMAMUX channel ID),"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:133
msgid ""
"the address of the STM32 DMA register to clear the Transfer Complete "
"interrupt flag,"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:135
msgid ""
"the mask of the Transfer Complete interrupt flag of the STM32 DMA channel."
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:138
msgid "Device Tree updates for STM32 DMA-MDMA chaining support"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:140
msgid "**1. Allocate a SRAM buffer**"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:142
msgid ""
"SRAM device tree node is defined in SoC device tree. You can refer to it in "
"your board device tree to define your SRAM pool. ::"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:152
msgid ""
"Be careful of the start index, in case there are other SRAM consumers. "
"Define your pool size strategically: to optimise chaining, the idea is that "
"STM32 DMA and STM32 MDMA can work simultaneously, on each buffer of the "
"SRAM. If the SRAM period is greater than the expected DMA transfer, then "
"STM32 DMA and STM32 MDMA will work sequentially instead of simultaneously. "
"It is not a functional issue but it is not optimal."
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:160
msgid ""
"Don't forget to refer to your SRAM pool in your device node. You need to "
"define a new property. ::"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:169
msgid ""
"Then get this SRAM pool in your foo driver and allocate your SRAM buffer."
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:171
msgid "**2. Allocate a STM32 DMA channel and a STM32 MDMA channel**"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:173
msgid ""
"You need to define an extra channel in your device tree node, in addition to "
"the one you should already have for \"classic\" DMA operation."
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:176
msgid ""
"This new channel must be taken from STM32 MDMA channels, so, the phandle of "
"the DMA controller to use is the MDMA controller's one. ::"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:187
msgid "Concerning STM32 MDMA bindings:"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:189
msgid ""
"1. The request line number : whatever the value here, it will be overwritten "
"by MDMA driver with the STM32 DMAMUX channel ID passed through (struct "
"dma_slave_config).peripheral_config"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:193
msgid ""
"2. The priority level : choose Very High (0x3) so that your channel will "
"take priority other the other during request arbitration"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:196
msgid ""
"3. A 32bit mask specifying the DMA channel configuration : source and "
"destination address increment, block transfer with 128 bytes per single "
"transfer"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:200
msgid ""
"4. The 32bit value specifying the register to be used to acknowledge the "
"request: it will be overwritten by MDMA driver, with the DMA channel "
"interrupt flag clear register address passed through (struct "
"dma_slave_config).peripheral_config"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:205
msgid ""
"5. The 32bit mask specifying the value to be written to acknowledge the "
"request: it will be overwritten by MDMA driver, with the DMA channel "
"Transfer Complete flag passed through (struct dma_slave_config)."
"peripheral_config"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:211
msgid "Driver updates for STM32 DMA-MDMA chaining support in foo driver"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:213
msgid ""
"**0. (optional) Refactor the original sg_table if dmaengine_prep_slave_sg()**"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:215
msgid ""
"In case of dmaengine_prep_slave_sg(), the original sg_table can't be used as "
"is. Two new sg_tables must be created from the original one. One for STM32 "
"DMA transfer (where memory address targets now the SRAM buffer instead of "
"DDR buffer) and one for STM32 MDMA transfer (where memory address targets "
"the DDR buffer)."
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:221
msgid ""
"The new sg_list items must fit SRAM period length. Here is an example for "
"DMA_DEV_TO_MEM: ::"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:287
msgid ""
"Don't forget to release these new sg_tables after getting the descriptors "
"with dmaengine_prep_slave_sg()."
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:290
msgid "**1. Set controller specific parameters**"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:292
msgid ""
"First, use dmaengine_slave_config() with a struct dma_slave_config to "
"configure STM32 DMA channel. You just have to take care of DMA addresses, "
"the memory address (depending on the transfer direction) must point on your "
"SRAM buffer, and set (struct dma_slave_config).peripheral_size != 0."
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:297
msgid ""
"STM32 DMA driver will check (struct dma_slave_config).peripheral_size to "
"determine if chaining is being used or not. If it is used, then STM32 DMA "
"driver fills (struct dma_slave_config).peripheral_config with an array of "
"three u32 : the first one containing STM32 DMAMUX channel ID, the second one "
"the channel interrupt flag clear register address, and the third one the "
"channel Transfer Complete flag mask."
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:304
msgid ""
"Then, use dmaengine_slave_config with another struct dma_slave_config to "
"configure STM32 MDMA channel. Take care of DMA addresses, the device address "
"(depending on the transfer direction) must point on your SRAM buffer, and "
"the memory address must point to the buffer originally used for \"classic\" "
"DMA operation. Use the previous (struct dma_slave_config).peripheral_size "
"and .peripheral_config that have been updated by STM32 DMA driver, to set "
"(struct dma_slave_config).peripheral_size and .peripheral_config of the "
"struct dma_slave_config to configure STM32 MDMA channel. ::"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:334
msgid "**2. Get a descriptor for STM32 DMA channel transaction**"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:336
msgid ""
"In the same way you get your descriptor for your \"classic\" DMA operation, "
"you just have to replace the original sg_list (in case of "
"dmaengine_prep_slave_sg()) with the new sg_list using SRAM buffer, or to "
"replace the original buffer address, length and period (in case of "
"dmaengine_prep_dma_cyclic()) with the new SRAM buffer."
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:342
msgid "**3. Get a descriptor for STM32 MDMA channel transaction**"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:344
msgid "If you previously get descriptor (for STM32 DMA) with"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:346
msgid ""
"dmaengine_prep_slave_sg(), then use dmaengine_prep_slave_sg() for STM32 MDMA;"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:348
msgid ""
"dmaengine_prep_dma_cyclic(), then use dmaengine_prep_dma_cyclic() for STM32 "
"MDMA."
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:351
msgid ""
"Use the new sg_list using SRAM buffer (in case of dmaengine_prep_slave_sg()) "
"or, depending on the transfer direction, either the original DDR buffer (in "
"case of DMA_DEV_TO_MEM) or the SRAM buffer (in case of DMA_MEM_TO_DEV), the "
"source address being previously set with dmaengine_slave_config()."
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:356
msgid "**4. Submit both transactions**"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:358
msgid ""
"Before submitting your transactions, you may need to define on which "
"descriptor you want a callback to be called at the end of the transfer "
"(dmaengine_prep_slave_sg()) or the period (dmaengine_prep_dma_cyclic()). "
"Depending on the direction, set the callback on the descriptor that finishes "
"the overall transfer:"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:364
msgid "DMA_DEV_TO_MEM: set the callback on the \"MDMA\" descriptor"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:365
msgid "DMA_MEM_TO_DEV: set the callback on the \"DMA\" descriptor"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:367
msgid ""
"Then, submit the descriptors whatever the order, with dmaengine_tx_submit()."
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:369
msgid "**5. Issue pending requests (and wait for callback notification)**"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:371
msgid ""
"As STM32 MDMA channel transfer is triggered by STM32 DMA, you must issue "
"STM32 MDMA channel before STM32 DMA channel."
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:374
msgid ""
"If any, your callback will be called to warn you about the end of the "
"overall transfer or the period completion."
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:377
msgid ""
"Don't forget to terminate both channels. STM32 DMA channel is configured in "
"cyclic Double-Buffer mode so it won't be disabled by HW, you need to "
"terminate it. STM32 MDMA channel will be stopped by HW in case of sg "
"transfer, but not in case of cyclic transfer. You can terminate it whatever "
"the kind of transfer."
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:382
msgid "**STM32 DMA-MDMA chaining DMA_MEM_TO_DEV special case**"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:384
msgid ""
"STM32 DMA-MDMA chaining in DMA_MEM_TO_DEV is a special case. Indeed, the "
"STM32 MDMA feeds the SRAM buffer with the DDR data, and the STM32 DMA reads "
"data from SRAM buffer. So some data (the first period) have to be copied in "
"SRAM buffer when the STM32 DMA starts to read."
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:389
msgid ""
"A trick could be pausing the STM32 DMA channel (that will raise a Transfer "
"Complete signal, triggering the STM32 MDMA channel), but the first data read "
"by the STM32 DMA could be \"wrong\". The proper way is to prepare the first "
"SRAM period with dmaengine_prep_dma_memcpy(). Then this first period should "
"be \"removed\" from the sg or the cyclic transfer."
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:395
msgid ""
"Due to this complexity, rather use the STM32 DMA-MDMA chaining for "
"DMA_DEV_TO_MEM and keep the \"classic\" DMA usage for DMA_MEM_TO_DEV, unless "
"you're not afraid."
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:400
msgid "Resources"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:402
msgid ""
"Application note, datasheet and reference manual are available on ST website "
"(STM32MP1_)."
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:405
msgid ""
"Dedicated focus on three application notes (AN5224_, AN4031_ & AN5001_) "
"dealing with STM32 DMAMUX, STM32 DMA and STM32 MDMA."
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:0
msgid "Authors"
msgstr ""

#: ../../../arch/arm/stm32/stm32-dma-mdma-chaining.rst:415
msgid "Amelie Delaunay <amelie.delaunay@foss.st.com>"
msgstr ""
