# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../arch/x86/mtrr.rst:5
msgid "MTRR (Memory Type Range Register) control"
msgstr ""

#: ../../../arch/x86/mtrr.rst:0
msgid "Authors"
msgstr ""

#: ../../../arch/x86/mtrr.rst:7
msgid "Richard Gooch <rgooch@atnf.csiro.au> - 3 Jun 1999"
msgstr ""

#: ../../../arch/x86/mtrr.rst:8
msgid "Luis R. Rodriguez <mcgrof@do-not-panic.com> - April 9, 2015"
msgstr ""

#: ../../../arch/x86/mtrr.rst:12
msgid "Phasing out MTRR use"
msgstr ""

#: ../../../arch/x86/mtrr.rst:14
msgid ""
"MTRR use is replaced on modern x86 hardware with PAT. Direct MTRR use by "
"drivers on Linux is now completely phased out, device drivers should use "
"arch_phys_wc_add() in combination with ioremap_wc() to make MTRR effective "
"on non-PAT systems while a no-op but equally effective on PAT enabled "
"systems."
msgstr ""

#: ../../../arch/x86/mtrr.rst:19
msgid ""
"Even if Linux does not use MTRRs directly, some x86 platform firmware may "
"still set up MTRRs early before booting the OS. They do this as some "
"platform firmware may still have implemented access to MTRRs which would be "
"controlled and handled by the platform firmware directly. An example of "
"platform use of MTRRs is through the use of SMI handlers, one case could be "
"for fan control, the platform code would need uncachable access to some of "
"its fan control registers. Such platform access does not need any Operating "
"System MTRR code in place other than mtrr_type_lookup() to ensure any OS "
"specific mapping requests are aligned with platform MTRR setup. If MTRRs are "
"only set up by the platform firmware code though and the OS does not make "
"any specific MTRR mapping requests mtrr_type_lookup() should always return "
"MTRR_TYPE_INVALID."
msgstr ""

#: ../../../arch/x86/mtrr.rst:31
msgid "For details refer to Documentation/arch/x86/pat.rst."
msgstr ""

#: ../../../arch/x86/mtrr.rst:34
msgid ""
"On Intel P6 family processors (Pentium Pro, Pentium II and later) the Memory "
"Type Range Registers (MTRRs) may be used to control processor access to "
"memory ranges. This is most useful when you have a video (VGA) card on a PCI "
"or AGP bus. Enabling write-combining allows bus write transfers to be "
"combined into a larger transfer before bursting over the PCI/AGP bus. This "
"can increase performance of image write operations 2.5 times or more."
msgstr ""

#: ../../../arch/x86/mtrr.rst:42
msgid ""
"The Cyrix 6x86, 6x86MX and M II processors have Address Range Registers "
"(ARRs) which provide a similar functionality to MTRRs. For these, the ARRs "
"are used to emulate the MTRRs."
msgstr ""

#: ../../../arch/x86/mtrr.rst:46
msgid ""
"The AMD K6-2 (stepping 8 and above) and K6-3 processors have two MTRRs. "
"These are supported.  The AMD Athlon family provide 8 Intel style MTRRs."
msgstr ""

#: ../../../arch/x86/mtrr.rst:50
msgid ""
"The Centaur C6 (WinChip) has 8 MCRs, allowing write-combining. These are "
"supported."
msgstr ""

#: ../../../arch/x86/mtrr.rst:53
msgid "The VIA Cyrix III and VIA C3 CPUs offer 8 Intel style MTRRs."
msgstr ""

#: ../../../arch/x86/mtrr.rst:55
msgid ""
"The CONFIG_MTRR option creates a /proc/mtrr file which may be used to "
"manipulate your MTRRs. Typically the X server should use this. This should "
"have a reasonably generic interface so that similar control registers on "
"other processors can be easily supported."
msgstr ""

#: ../../../arch/x86/mtrr.rst:61
msgid ""
"There are two interfaces to /proc/mtrr: one is an ASCII interface which "
"allows you to read and write. The other is an ioctl() interface. The ASCII "
"interface is meant for administration. The ioctl() interface is meant for C "
"programs (i.e. the X server). The interfaces are described below, with "
"sample commands and C code."
msgstr ""

#: ../../../arch/x86/mtrr.rst:69
msgid "Reading MTRRs from the shell"
msgstr ""

#: ../../../arch/x86/mtrr.rst:76
msgid "Creating MTRRs from the C-shell::"
msgstr ""

#: ../../../arch/x86/mtrr.rst:80
msgid "or if you use bash::"
msgstr ""

#: ../../../arch/x86/mtrr.rst:84
msgid "And the result thereof::"
msgstr ""

#: ../../../arch/x86/mtrr.rst:91
msgid ""
"This is for video RAM at base address 0xf8000000 and size 4 megabytes. To "
"find out your base address, you need to look at the output of your X server, "
"which tells you where the linear framebuffer address is. A typical line that "
"you may get is::"
msgstr ""

#: ../../../arch/x86/mtrr.rst:98
msgid ""
"Note that you should only use the value from the X server, as it may move "
"the framebuffer base address, so the only value you can trust is that "
"reported by the X server."
msgstr ""

#: ../../../arch/x86/mtrr.rst:102
msgid ""
"To find out the size of your framebuffer (what, you don't actually know?), "
"the following line will tell you::"
msgstr ""

#: ../../../arch/x86/mtrr.rst:107
msgid ""
"That's 4 megabytes, which is 0x400000 bytes (in hexadecimal). A patch is "
"being written for XFree86 which will make this automatic: in other words the "
"X server will manipulate /proc/mtrr using the ioctl() interface, so users "
"won't have to do anything. If you use a commercial X server, lobby your "
"vendor to add support for MTRRs."
msgstr ""

#: ../../../arch/x86/mtrr.rst:115
msgid "Creating overlapping MTRRs"
msgstr ""

#: ../../../arch/x86/mtrr.rst:121
msgid "And the results::"
msgstr ""

#: ../../../arch/x86/mtrr.rst:128
msgid ""
"Some cards (especially Voodoo Graphics boards) need this 4 kB area excluded "
"from the beginning of the region because it is used for registers."
msgstr ""

#: ../../../arch/x86/mtrr.rst:132
msgid ""
"NOTE: You can only create type=uncachable region, if the first region that "
"you created is type=write-combining."
msgstr ""

#: ../../../arch/x86/mtrr.rst:137
msgid "Removing MTRRs from the C-shel"
msgstr ""

#: ../../../arch/x86/mtrr.rst:142
msgid "or using bash::"
msgstr ""

#: ../../../arch/x86/mtrr.rst:148
msgid "Reading MTRRs from a C program using ioctl()'s"
msgstr ""

#: ../../../arch/x86/mtrr.rst:247
msgid "Creating MTRRs from a C programme using ioctl()'s"
msgstr ""
