# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-06 15:47+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../arch/x86/topology.rst:5
msgid "x86 Topology"
msgstr ""

#: ../../../arch/x86/topology.rst:7
msgid ""
"This documents and clarifies the main aspects of x86 topology modelling and "
"representation in the kernel. Update/change when doing changes to the "
"respective code."
msgstr ""

#: ../../../arch/x86/topology.rst:11
msgid ""
"The architecture-agnostic topology definitions are in Documentation/admin-"
"guide/cputopology.rst. This file holds x86-specific differences/specialities "
"which must not necessarily apply to the generic definitions. Thus, the way "
"to read up on Linux topology on x86 is to start with the generic one and "
"look at this one in parallel for the x86 specifics."
msgstr ""

#: ../../../arch/x86/topology.rst:17
msgid ""
"Needless to say, code should use the generic functions - this file is *only* "
"here to *document* the inner workings of x86 topology."
msgstr ""

#: ../../../arch/x86/topology.rst:20
msgid ""
"Started by Thomas Gleixner <tglx@linutronix.de> and Borislav Petkov "
"<bp@alien8.de>."
msgstr ""

#: ../../../arch/x86/topology.rst:22
msgid ""
"The main aim of the topology facilities is to present adequate interfaces to "
"code which needs to know/query/use the structure of the running system wrt "
"threads, cores, packages, etc."
msgstr ""

#: ../../../arch/x86/topology.rst:26
msgid ""
"The kernel does not care about the concept of physical sockets because a "
"socket has no relevance to software. It's an electromechanical component. In "
"the past a socket always contained a single package (see below), but with "
"the advent of Multi Chip Modules (MCM) a socket can hold more than one "
"package. So there might be still references to sockets in the code, but they "
"are of historical nature and should be cleaned up."
msgstr ""

#: ../../../arch/x86/topology.rst:33
msgid "The topology of a system is described in the units of:"
msgstr ""

#: ../../../arch/x86/topology.rst:35
msgid "packages"
msgstr ""

#: ../../../arch/x86/topology.rst:36
msgid "cores"
msgstr ""

#: ../../../arch/x86/topology.rst:37
msgid "threads"
msgstr ""

#: ../../../arch/x86/topology.rst:40
msgid "Package"
msgstr ""

#: ../../../arch/x86/topology.rst:41
msgid ""
"Packages contain a number of cores plus shared resources, e.g. DRAM "
"controller, shared caches etc."
msgstr ""

#: ../../../arch/x86/topology.rst:44
msgid "Modern systems may also use the term 'Die' for package."
msgstr ""

#: ../../../arch/x86/topology.rst:46
msgid "AMD nomenclature for package is 'Node'."
msgstr ""

#: ../../../arch/x86/topology.rst:48
msgid "Package-related topology information in the kernel:"
msgstr ""

#: ../../../arch/x86/topology.rst:50
msgid "topology_num_threads_per_package()"
msgstr ""

#: ../../../arch/x86/topology.rst:52
msgid "The number of threads in a package."
msgstr ""

#: ../../../arch/x86/topology.rst:54
msgid "topology_num_cores_per_package()"
msgstr ""

#: ../../../arch/x86/topology.rst:56
msgid "The number of cores in a package."
msgstr ""

#: ../../../arch/x86/topology.rst:58
msgid "topology_max_dies_per_package()"
msgstr ""

#: ../../../arch/x86/topology.rst:60
msgid "The maximum number of dies in a package."
msgstr ""

#: ../../../arch/x86/topology.rst:62
msgid "cpuinfo_x86.topo.die_id:"
msgstr ""

#: ../../../arch/x86/topology.rst:64
msgid "The physical ID of the die."
msgstr ""

#: ../../../arch/x86/topology.rst:66
msgid "cpuinfo_x86.topo.pkg_id:"
msgstr ""

#: ../../../arch/x86/topology.rst:68
msgid ""
"The physical ID of the package. This information is retrieved via CPUID and "
"deduced from the APIC IDs of the cores in the package."
msgstr ""

#: ../../../arch/x86/topology.rst:71
msgid ""
"Modern systems use this value for the socket. There may be multiple packages "
"within a socket. This value may differ from topo.die_id."
msgstr ""

#: ../../../arch/x86/topology.rst:74
msgid "cpuinfo_x86.topo.logical_pkg_id:"
msgstr ""

#: ../../../arch/x86/topology.rst:76
msgid ""
"The logical ID of the package. As we do not trust BIOSes to enumerate the "
"packages in a consistent way, we introduced the concept of logical package "
"ID so we can sanely calculate the number of maximum possible packages in the "
"system and have the packages enumerated linearly."
msgstr ""

#: ../../../arch/x86/topology.rst:81
msgid "topology_max_packages():"
msgstr ""

#: ../../../arch/x86/topology.rst:83
msgid ""
"The maximum possible number of packages in the system. Helpful for per "
"package facilities to preallocate per package information."
msgstr ""

#: ../../../arch/x86/topology.rst:86
msgid "cpuinfo_x86.topo.llc_id:"
msgstr ""

#: ../../../arch/x86/topology.rst:88
msgid ""
"On Intel, the first APIC ID of the list of CPUs sharing the Last Level Cache"
msgstr ""

#: ../../../arch/x86/topology.rst:91
msgid ""
"On AMD, the Node ID or Core Complex ID containing the Last Level Cache. In "
"general, it is a number identifying an LLC uniquely on the system."
msgstr ""

#: ../../../arch/x86/topology.rst:96
msgid "Cores"
msgstr ""

#: ../../../arch/x86/topology.rst:97
msgid ""
"A core consists of 1 or more threads. It does not matter whether the threads "
"are SMT- or CMT-type threads."
msgstr ""

#: ../../../arch/x86/topology.rst:100
msgid ""
"AMDs nomenclature for a CMT core is \"Compute Unit\". The kernel always uses "
"\"core\"."
msgstr ""

#: ../../../arch/x86/topology.rst:104
msgid "Threads"
msgstr ""

#: ../../../arch/x86/topology.rst:105
msgid ""
"A thread is a single scheduling unit. It's the equivalent to a logical Linux "
"CPU."
msgstr ""

#: ../../../arch/x86/topology.rst:108
msgid ""
"AMDs nomenclature for CMT threads is \"Compute Unit Core\". The kernel "
"always uses \"thread\"."
msgstr ""

#: ../../../arch/x86/topology.rst:111
msgid "Thread-related topology information in the kernel:"
msgstr ""

#: ../../../arch/x86/topology.rst:113
msgid "topology_core_cpumask():"
msgstr ""

#: ../../../arch/x86/topology.rst:115
msgid ""
"The cpumask contains all online threads in the package to which a thread "
"belongs."
msgstr ""

#: ../../../arch/x86/topology.rst:118
msgid ""
"The number of online threads is also printed in /proc/cpuinfo \"siblings.\""
msgstr ""

#: ../../../arch/x86/topology.rst:120
msgid "topology_sibling_cpumask():"
msgstr ""

#: ../../../arch/x86/topology.rst:122
msgid ""
"The cpumask contains all online threads in the core to which a thread "
"belongs."
msgstr ""

#: ../../../arch/x86/topology.rst:125
msgid "topology_logical_package_id():"
msgstr ""

#: ../../../arch/x86/topology.rst:127
msgid "The logical package ID to which a thread belongs."
msgstr ""

#: ../../../arch/x86/topology.rst:129
msgid "topology_physical_package_id():"
msgstr ""

#: ../../../arch/x86/topology.rst:131
msgid "The physical package ID to which a thread belongs."
msgstr ""

#: ../../../arch/x86/topology.rst:133
msgid "topology_core_id();"
msgstr ""

#: ../../../arch/x86/topology.rst:135
msgid ""
"The ID of the core to which a thread belongs. It is also printed in /proc/"
"cpuinfo \"core_id.\""
msgstr ""

#: ../../../arch/x86/topology.rst:138
msgid "topology_logical_core_id();"
msgstr ""

#: ../../../arch/x86/topology.rst:140
msgid "The logical core ID to which a thread belongs."
msgstr ""

#: ../../../arch/x86/topology.rst:145
msgid "System topology enumeration"
msgstr ""

#: ../../../arch/x86/topology.rst:147
msgid ""
"The topology on x86 systems can be discovered using a combination of vendor "
"specific CPUID leaves which enumerate the processor topology and the cache "
"hierarchy."
msgstr ""

#: ../../../arch/x86/topology.rst:151
msgid ""
"The CPUID leaves in their preferred order of parsing for each x86 vendor is "
"as follows:"
msgstr ""

#: ../../../arch/x86/topology.rst:154
msgid "AMD"
msgstr ""

#: ../../../arch/x86/topology.rst:156
msgid ""
"CPUID leaf 0x80000026 [Extended CPU Topology] (Core::X86::Cpuid::"
"ExCpuTopology)"
msgstr ""

#: ../../../arch/x86/topology.rst:158
msgid ""
"The extended CPUID leaf 0x80000026 is the extension of the CPUID leaf 0xB "
"and provides the topology information of Core, Complex, CCD (Die), and "
"Socket in each level."
msgstr ""

#: ../../../arch/x86/topology.rst:162
msgid ""
"Support for the leaf is discovered by checking if the maximum extended CPUID "
"level is >= 0x80000026 and then checking if `LogProcAtThisLevel` in "
"`EBX[15:0]` at a particular level (starting from 0) is non-zero."
msgstr ""

#: ../../../arch/x86/topology.rst:166
msgid ""
"The `LevelType` in `ECX[15:8]` at the level provides the topology domain the "
"level describes - Core, Complex, CCD(Die), or the Socket."
msgstr ""

#: ../../../arch/x86/topology.rst:169
msgid ""
"The kernel uses the `CoreMaskWidth` from `EAX[4:0]` to discover the number "
"of bits that need to be right-shifted from `ExtendedLocalApicId` in "
"`EDX[31:0]` in order to get a unique Topology ID for the topology level. "
"CPUs with the same Topology ID share the resources at that level."
msgstr ""

#: ../../../arch/x86/topology.rst:174
msgid ""
"CPUID leaf 0x80000026 also provides more information regarding the power and "
"efficiency rankings, and about the core type on AMD processors with "
"heterogeneous characteristics."
msgstr ""

#: ../../../arch/x86/topology.rst:178
msgid "If CPUID leaf 0x80000026 is supported, further parsing is not required."
msgstr ""

#: ../../../arch/x86/topology.rst:180
msgid ""
"CPUID leaf 0x0000000B [Extended Topology Enumeration] (Core::X86::Cpuid::"
"ExtTopEnum)"
msgstr ""

#: ../../../arch/x86/topology.rst:182
msgid ""
"The extended CPUID leaf 0x0000000B is the predecessor on the extended CPUID "
"leaf 0x80000026 and only describes the core, and the socket domains of the "
"processor topology."
msgstr ""

#: ../../../arch/x86/topology.rst:186
msgid ""
"The support for the leaf is discovered by checking if the maximum supported "
"CPUID level is >= 0xB and then if `EBX[31:0]` at a particular level "
"(starting from 0) is non-zero."
msgstr ""

#: ../../../arch/x86/topology.rst:190
msgid ""
"The `LevelType` in `ECX[15:8]` at the level provides the topology domain "
"that the level describes - Thread, or Processor (Socket)."
msgstr ""

#: ../../../arch/x86/topology.rst:193
msgid ""
"The kernel uses the `CoreMaskWidth` from `EAX[4:0]` to discover the number "
"of bits that need to be right-shifted from the `ExtendedLocalApicId` in "
"`EDX[31:0]` to get a unique Topology ID for that topology level. CPUs "
"sharing the Topology ID share the resources at that level."
msgstr ""

#: ../../../arch/x86/topology.rst:198 ../../../arch/x86/topology.rst:296
msgid "If CPUID leaf 0xB is supported, further parsing is not required."
msgstr ""

#: ../../../arch/x86/topology.rst:201
msgid "CPUID leaf 0x80000008 ECX [Size Identifiers] (Core::X86::Cpuid::SizeId)"
msgstr ""

#: ../../../arch/x86/topology.rst:203
msgid ""
"If neither the CPUID leaf 0x80000026 nor 0xB is supported, the number of "
"CPUs on the package is detected using the Size Identifier leaf 0x80000008 "
"ECX."
msgstr ""

#: ../../../arch/x86/topology.rst:207
msgid ""
"The support for the leaf is discovered by checking if the supported extended "
"CPUID level is >= 0x80000008."
msgstr ""

#: ../../../arch/x86/topology.rst:210
msgid ""
"The shifts from the APIC ID for the Socket ID is calculated from the "
"`ApicIdSize` field in `ECX[15:12]` if it is non-zero."
msgstr ""

#: ../../../arch/x86/topology.rst:213
msgid ""
"If `ApicIdSize` is reported to be zero, the shift is calculated as the order "
"of the `number of threads` calculated from `NC` field in `ECX[7:0]` which "
"describes the `number of threads - 1` on the package."
msgstr ""

#: ../../../arch/x86/topology.rst:217
msgid ""
"Unless Extended APIC ID is supported, the APIC ID used to find the Socket ID "
"is from the `LocalApicId` field of CPUID leaf 0x00000001 `EBX[31:24]`."
msgstr ""

#: ../../../arch/x86/topology.rst:221
msgid ""
"The topology parsing continues to detect if Extended APIC ID is supported or "
"not."
msgstr ""

#: ../../../arch/x86/topology.rst:225
msgid ""
"CPUID leaf 0x8000001E [Extended APIC ID, Core Identifiers, Node Identifiers] "
"(Core::X86::Cpuid::{ExtApicId,CoreId,NodeId})"
msgstr ""

#: ../../../arch/x86/topology.rst:228
msgid ""
"The support for Extended APIC ID can be detected by checking for the "
"presence of `TopologyExtensions` in `ECX[22]` of CPUID leaf 0x80000001 "
"[Feature Identifiers] (Core::X86::Cpuid::FeatureExtIdEcx)."
msgstr ""

#: ../../../arch/x86/topology.rst:232
msgid ""
"If Topology Extensions is supported, the APIC ID from `ExtendedApicId` from "
"CPUID leaf 0x8000001E `EAX[31:0]` should be preferred over that from "
"`LocalApicId` field of CPUID leaf 0x00000001 `EBX[31:24]` for topology "
"enumeration."
msgstr ""

#: ../../../arch/x86/topology.rst:237
msgid ""
"On processors of Family 0x17 and above that do not support CPUID leaf "
"0x80000026 or CPUID leaf 0xB, the shifts from the APIC ID for the Core ID is "
"calculated using the order of `number of threads per core` calculated using "
"the `ThreadsPerCore` field in `EBX[15:8]` which describes `number of threads "
"per core - 1`."
msgstr ""

#: ../../../arch/x86/topology.rst:243
msgid ""
"On Processors of Family 0x15, the Core ID from `EBX[7:0]` is used as the "
"`cu_id` (Compute Unit ID) to detect CPUs that share the compute units."
msgstr ""

#: ../../../arch/x86/topology.rst:247
msgid ""
"All AMD processors that support the `TopologyExtensions` feature store the "
"`NodeId` from the `ECX[7:0]` of CPUID leaf 0x8000001E (Core::X86::Cpuid::"
"NodeId) as the per-CPU `node_id`. On older processors, the `node_id` was "
"discovered using MSR_FAM10H_NODE_ID MSR (MSR 0x0xc001_100c). The presence of "
"the NODE_ID MSR was detected by checking `ECX[19]` of CPUID leaf 0x80000001 "
"[Feature Identifiers] (Core::X86::Cpuid::FeatureExtIdEcx)."
msgstr ""

#: ../../../arch/x86/topology.rst:256
msgid "Intel"
msgstr ""

#: ../../../arch/x86/topology.rst:258
msgid ""
"On Intel platforms, the CPUID leaves that enumerate the processor topology "
"are as follows:"
msgstr ""

#: ../../../arch/x86/topology.rst:261
msgid "CPUID leaf 0x1F (V2 Extended Topology Enumeration Leaf)"
msgstr ""

#: ../../../arch/x86/topology.rst:263
msgid ""
"The CPUID leaf 0x1F is the extension of the CPUID leaf 0xB and provides the "
"topology information of Core, Module, Tile, Die, DieGrp, and Socket in each "
"level."
msgstr ""

#: ../../../arch/x86/topology.rst:267
msgid ""
"The support for the leaf is discovered by checking if the supported CPUID "
"level is >= 0x1F and then `EBX[31:0]` at a particular level (starting from "
"0) is non-zero."
msgstr ""

#: ../../../arch/x86/topology.rst:271
msgid ""
"The `Domain Type` in `ECX[15:8]` of the sub-leaf provides the topology "
"domain that the level describes - Core, Module, Tile, Die, DieGrp, and "
"Socket."
msgstr ""

#: ../../../arch/x86/topology.rst:275
msgid ""
"The kernel uses the value from `EAX[4:0]` to discover the number of bits "
"that need to be right shifted from the `x2APIC ID` in `EDX[31:0]` to get a "
"unique Topology ID for the topology level. CPUs with the same Topology ID "
"share the resources at that level."
msgstr ""

#: ../../../arch/x86/topology.rst:280
msgid "If CPUID leaf 0x1F is supported, further parsing is not required."
msgstr ""

#: ../../../arch/x86/topology.rst:283
msgid "CPUID leaf 0x0000000B (Extended Topology Enumeration Leaf)"
msgstr ""

#: ../../../arch/x86/topology.rst:285
msgid ""
"The extended CPUID leaf 0x0000000B is the predecessor of the V2 Extended "
"Topology Enumeration Leaf 0x1F and only describes the core, and the socket "
"domains of the processor topology."
msgstr ""

#: ../../../arch/x86/topology.rst:289
msgid ""
"The support for the leaf is iscovered by checking if the supported CPUID "
"level is >= 0xB and then checking if `EBX[31:0]` at a particular level "
"(starting from 0) is non-zero."
msgstr ""

#: ../../../arch/x86/topology.rst:293
msgid ""
"CPUID leaf 0x0000000B shares the same layout as CPUID leaf 0x1F and should "
"be enumerated in a similar manner."
msgstr ""

#: ../../../arch/x86/topology.rst:299
msgid "CPUID leaf 0x00000004 (Deterministic Cache Parameters Leaf)"
msgstr ""

#: ../../../arch/x86/topology.rst:301
msgid ""
"On Intel processors that support neither CPUID leaf 0x1F, nor CPUID leaf "
"0xB, the shifts for the SMT domains is calculated using the number of CPUs "
"sharing the L1 cache."
msgstr ""

#: ../../../arch/x86/topology.rst:305
msgid ""
"Processors that feature Hyper-Threading is detected using `EDX[28]` of CPUID "
"leaf 0x1 (Basic CPUID Information)."
msgstr ""

#: ../../../arch/x86/topology.rst:308
msgid ""
"The order of `Maximum number of addressable IDs for logical processors "
"sharing this cache` from `EAX[25:14]` of level-0 of CPUID 0x4 provides the "
"shifts from the APIC ID required to compute the Core ID."
msgstr ""

#: ../../../arch/x86/topology.rst:312
msgid ""
"The APIC ID and Package information is computed using the data from CPUID "
"leaf 0x1."
msgstr ""

#: ../../../arch/x86/topology.rst:316
msgid "CPUID leaf 0x00000001 (Basic CPUID Information)"
msgstr ""

#: ../../../arch/x86/topology.rst:318
msgid ""
"The mask and shifts to derive the Physical Package (socket) ID is computed "
"using the `Maximum number of addressable IDs for logical processors in this "
"physical package` from `EBX[23:16]` of CPUID leaf 0x1."
msgstr ""

#: ../../../arch/x86/topology.rst:323
msgid ""
"The APIC ID on the legacy platforms is derived from the `Initial APIC ID` "
"field from `EBX[31:24]` of CPUID leaf 0x1."
msgstr ""

#: ../../../arch/x86/topology.rst:327
msgid "Centaur and Zhaoxin"
msgstr ""

#: ../../../arch/x86/topology.rst:329
msgid ""
"Similar to Intel, Centaur and Zhaoxin use a combination of CPUID leaf "
"0x00000004 (Deterministic Cache Parameters Leaf) and CPUID leaf 0x00000001 "
"(Basic CPUID Information) to derive the topology information."
msgstr ""

#: ../../../arch/x86/topology.rst:336
msgid "System topology examples"
msgstr ""

#: ../../../arch/x86/topology.rst:339
msgid ""
"The alternative Linux CPU enumeration depends on how the BIOS enumerates the "
"threads. Many BIOSes enumerate all threads 0 first and then all threads 1. "
"That has the \"advantage\" that the logical Linux CPU numbers of threads 0 "
"stay the same whether threads are enabled or not. That's merely an "
"implementation detail and has no practical impact."
msgstr ""

#: ../../../arch/x86/topology.rst:345
msgid "Single Package, Single Core::"
msgstr ""

#: ../../../arch/x86/topology.rst:349
msgid "Single Package, Dual Core"
msgstr ""

#: ../../../arch/x86/topology.rst:351 ../../../arch/x86/topology.rst:379
msgid "One thread per core::"
msgstr ""

#: ../../../arch/x86/topology.rst:356 ../../../arch/x86/topology.rst:387
msgid "Two threads per core::"
msgstr ""

#: ../../../arch/x86/topology.rst:363 ../../../arch/x86/topology.rst:399
msgid "Alternative enumeration::"
msgstr ""

#: ../../../arch/x86/topology.rst:370 ../../../arch/x86/topology.rst:411
msgid "AMD nomenclature for CMT systems::"
msgstr ""

#: ../../../arch/x86/topology.rst:377
msgid "Dual Package, Dual Core"
msgstr ""
