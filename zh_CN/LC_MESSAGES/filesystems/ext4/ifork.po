# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../filesystems/ext4/ifork.rst:4
msgid "The Contents of inode.i_block"
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:6
msgid ""
"Depending on the type of file an inode describes, the 60 bytes of storage in "
"``inode.i_block`` can be used in different ways. In general, regular files "
"and directories will use it for file block indexing information, and special "
"files will use it for special purposes."
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:12
msgid "Symbolic Links"
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:14
msgid ""
"The target of a symbolic link will be stored in this field if the target "
"string is less than 60 bytes long. Otherwise, either extents or block maps "
"will be used to allocate data blocks to store the link target."
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:19
msgid "Direct/Indirect Block Addressing"
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:21
msgid ""
"In ext2/3, file block numbers were mapped to logical block numbers by means "
"of an (up to) three level 1-1 block map. To find the logical block that "
"stores a particular file block, the code would navigate through this "
"increasingly complicated structure. Notice that there is neither a magic "
"number nor a checksum to provide any level of confidence that the block "
"isn't full of garbage."
msgstr ""

#: ../../../filesystems/ext4/blockmap.rst:4
msgid "i.i_block Offset"
msgstr ""

#: ../../../filesystems/ext4/blockmap.rst:4
#: ../../../filesystems/ext4/blockmap.rst:11
#: ../../../filesystems/ext4/blockmap.rst:19
#: ../../../filesystems/ext4/blockmap.rst:24
#: ../../../filesystems/ext4/blockmap.rst:33
#: ../../../filesystems/ext4/blockmap.rst:38
#: ../../../filesystems/ext4/blockmap.rst:43
msgid "Where It Points"
msgstr ""

#: ../../../filesystems/ext4/blockmap.rst:6
msgid "0 to 11"
msgstr ""

#: ../../../filesystems/ext4/blockmap.rst:6
msgid "Direct map to file blocks 0 to 11."
msgstr ""

#: ../../../filesystems/ext4/blockmap.rst:8
msgid "12"
msgstr ""

#: ../../../filesystems/ext4/blockmap.rst:8
msgid ""
"Indirect block: (file blocks 12 to (``$block_size`` / 4) + 11, or 12 to 1035 "
"if 4KiB blocks)"
msgstr ""

#: ../../../filesystems/ext4/blockmap.rst:11
#: ../../../filesystems/ext4/blockmap.rst:24
#: ../../../filesystems/ext4/blockmap.rst:43
msgid "Indirect Block Offset"
msgstr ""

#: ../../../filesystems/ext4/blockmap.rst:13
#: ../../../filesystems/ext4/blockmap.rst:21
#: ../../../filesystems/ext4/blockmap.rst:26
#: ../../../filesystems/ext4/blockmap.rst:35
#: ../../../filesystems/ext4/blockmap.rst:40
#: ../../../filesystems/ext4/blockmap.rst:45
msgid "0 to (``$block_size`` / 4)"
msgstr ""

#: ../../../filesystems/ext4/blockmap.rst:13
#: ../../../filesystems/ext4/blockmap.rst:26
#: ../../../filesystems/ext4/blockmap.rst:45
msgid "Direct map to (``$block_size`` / 4) blocks (1024 if 4KiB blocks)"
msgstr ""

#: ../../../filesystems/ext4/blockmap.rst:16
msgid "13"
msgstr ""

#: ../../../filesystems/ext4/blockmap.rst:16
msgid ""
"Double-indirect block: (file blocks ``$block_size``/4 + 12 to "
"(``$block_size`` / 4) ^ 2 + (``$block_size`` / 4) + 11, or 1036 to 1049611 "
"if 4KiB blocks)"
msgstr ""

#: ../../../filesystems/ext4/blockmap.rst:19
#: ../../../filesystems/ext4/blockmap.rst:38
msgid "Double Indirect Block Offset"
msgstr ""

#: ../../../filesystems/ext4/blockmap.rst:21
#: ../../../filesystems/ext4/blockmap.rst:40
msgid "Map to (``$block_size`` / 4) indirect blocks (1024 if 4KiB blocks)"
msgstr ""

#: ../../../filesystems/ext4/blockmap.rst:30
msgid "14"
msgstr ""

#: ../../../filesystems/ext4/blockmap.rst:30
msgid ""
"Triple-indirect block: (file blocks (``$block_size`` / 4) ^ 2 + "
"(``$block_size`` / 4) + 12 to (``$block_size`` / 4) ^ 3 + (``$block_size`` / "
"4) ^ 2 + (``$block_size`` / 4) + 12, or 1049612 to 1074791436 if 4KiB blocks)"
msgstr ""

#: ../../../filesystems/ext4/blockmap.rst:33
msgid "Triple Indirect Block Offset"
msgstr ""

#: ../../../filesystems/ext4/blockmap.rst:35
msgid ""
"Map to (``$block_size`` / 4) double indirect blocks (1024 if 4KiB blocks)"
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:36
msgid ""
"Note that with this block mapping scheme, it is necessary to fill out a lot "
"of mapping data even for a large contiguous file! This inefficiency led to "
"the creation of the extent mapping scheme, discussed below."
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:40
msgid ""
"Notice also that a file using this mapping scheme cannot be placed higher "
"than 2^32 blocks."
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:44
msgid "Extent Tree"
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:46
msgid ""
"In ext4, the file to logical block map has been replaced with an extent "
"tree. Under the old scheme, allocating a contiguous run of 1,000 blocks "
"requires an indirect block to map all 1,000 entries; with extents, the "
"mapping is reduced to a single ``struct ext4_extent`` with ``ee_len = "
"1000``. If flex_bg is enabled, it is possible to allocate very large files "
"with a single extent, at a considerable reduction in metadata block use, and "
"some improvement in disk efficiency. The inode must have the extents flag "
"(0x80000) flag set for this feature to be in use."
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:56
msgid ""
"Extents are arranged as a tree. Each node of the tree begins with a ``struct "
"ext4_extent_header``. If the node is an interior node (``eh.eh_depth`` > 0), "
"the header is followed by ``eh.eh_entries`` instances of ``struct "
"ext4_extent_idx``; each of these index entries points to a block containing "
"more nodes in the extent tree. If the node is a leaf node (``eh.eh_depth == "
"0``), then the header is followed by ``eh.eh_entries`` instances of ``struct "
"ext4_extent``; these instances point to the file's data blocks. The root "
"node of the extent tree is stored in ``inode.i_block``, which allows for the "
"first four extents to be recorded without the use of extra metadata blocks."
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:67
msgid ""
"The extent tree header is recorded in ``struct ext4_extent_header``, which "
"is 12 bytes long:"
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:74
#: ../../../filesystems/ext4/ifork.rst:110
#: ../../../filesystems/ext4/ifork.rst:140
#: ../../../filesystems/ext4/ifork.rst:180
msgid "Offset"
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:75
#: ../../../filesystems/ext4/ifork.rst:111
#: ../../../filesystems/ext4/ifork.rst:141
#: ../../../filesystems/ext4/ifork.rst:181
msgid "Size"
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:76
#: ../../../filesystems/ext4/ifork.rst:112
#: ../../../filesystems/ext4/ifork.rst:142
#: ../../../filesystems/ext4/ifork.rst:182
msgid "Name"
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:77
#: ../../../filesystems/ext4/ifork.rst:113
#: ../../../filesystems/ext4/ifork.rst:143
#: ../../../filesystems/ext4/ifork.rst:183
msgid "Description"
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:78
#: ../../../filesystems/ext4/ifork.rst:114
#: ../../../filesystems/ext4/ifork.rst:144
#: ../../../filesystems/ext4/ifork.rst:184
msgid "0x0"
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:79
#: ../../../filesystems/ext4/ifork.rst:83
#: ../../../filesystems/ext4/ifork.rst:87
#: ../../../filesystems/ext4/ifork.rst:91
#: ../../../filesystems/ext4/ifork.rst:125
#: ../../../filesystems/ext4/ifork.rst:149
#: ../../../filesystems/ext4/ifork.rst:157
msgid "__le16"
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:80
msgid "eh_magic"
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:81
msgid "Magic number, 0xF30A."
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:82
msgid "0x2"
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:84
msgid "eh_entries"
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:85
msgid "Number of valid entries following the header."
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:86
#: ../../../filesystems/ext4/ifork.rst:118
#: ../../../filesystems/ext4/ifork.rst:148
msgid "0x4"
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:88
msgid "eh_max"
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:89
msgid "Maximum number of entries that could follow the header."
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:90
#: ../../../filesystems/ext4/ifork.rst:156
msgid "0x6"
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:92
msgid "eh_depth"
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:93
msgid ""
"Depth of this extent node in the extent tree. 0 = this extent node points to "
"data blocks; otherwise, this extent node points to other extent nodes. The "
"extent tree can be at most 5 levels deep: a logical block number can be at "
"most ``2^32``, and the smallest ``n`` that satisfies ``4*(((blocksize - "
"12)/12)^n) >= 2^32`` is 5."
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:98
#: ../../../filesystems/ext4/ifork.rst:124
#: ../../../filesystems/ext4/ifork.rst:160
msgid "0x8"
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:99
#: ../../../filesystems/ext4/ifork.rst:115
#: ../../../filesystems/ext4/ifork.rst:119
#: ../../../filesystems/ext4/ifork.rst:145
#: ../../../filesystems/ext4/ifork.rst:161
#: ../../../filesystems/ext4/ifork.rst:185
msgid "__le32"
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:100
msgid "eh_generation"
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:101
msgid "Generation of the tree. (Used by Lustre, but not standard ext4)."
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:103
msgid ""
"Internal nodes of the extent tree, also known as index nodes, are recorded "
"as ``struct ext4_extent_idx``, and are 12 bytes long:"
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:116
msgid "ei_block"
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:117
msgid "This index node covers file blocks from 'block' onward."
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:120
msgid "ei_leaf_lo"
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:121
msgid ""
"Lower 32-bits of the block number of the extent node that is the next level "
"lower in the tree. The tree node pointed to can be either another internal "
"node or a leaf node, described below."
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:126
msgid "ei_leaf_hi"
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:127
msgid "Upper 16-bits of the previous field."
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:128
msgid "0xA"
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:129
msgid "__u16"
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:130
msgid "ei_unused"
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:133
msgid ""
"Leaf nodes of the extent tree are recorded as ``struct ext4_extent``, and "
"are also 12 bytes long:"
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:146
msgid "ee_block"
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:147
msgid "First file block number that this extent covers."
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:150
msgid "ee_len"
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:151
msgid ""
"Number of blocks covered by extent. If the value of this field is <= 32768, "
"the extent is initialized. If the value of the field is > 32768, the extent "
"is uninitialized and the actual extent length is ``ee_len`` - 32768. "
"Therefore, the maximum length of a initialized extent is 32768 blocks, and "
"the maximum length of an uninitialized extent is 32767."
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:158
msgid "ee_start_hi"
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:159
msgid "Upper 16-bits of the block number to which this extent points."
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:162
msgid "ee_start_lo"
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:163
msgid "Lower 32-bits of the block number to which this extent points."
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:165
msgid ""
"Prior to the introduction of metadata checksums, the extent header + extent "
"entries always left at least 4 bytes of unallocated space at the end of each "
"extent tree data block (because (2^x % 12) >= 4). Therefore, the 32-bit "
"checksum is inserted into this space. The 4 extents in the inode do not need "
"checksumming, since the inode is already checksummed. The checksum is "
"calculated against the FS UUID, the inode number, the inode generation, and "
"the entire extent block leading up to (but not including) the checksum "
"itself."
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:174
msgid "``struct ext4_extent_tail`` is 4 bytes long:"
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:186
msgid "eb_checksum"
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:187
msgid "Checksum of the extent block, crc32c(uuid+inum+igeneration+extentblock)"
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:190
msgid "Inline Data"
msgstr ""

#: ../../../filesystems/ext4/ifork.rst:192
msgid ""
"If the inline data feature is enabled for the filesystem and the flag is set "
"for the inode, it is possible that the first 60 bytes of the file data are "
"stored here."
msgstr ""
