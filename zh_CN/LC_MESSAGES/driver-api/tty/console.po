# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-21 08:55+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../driver-api/tty/console.rst:5
msgid "Console"
msgstr ""

#: ../../../driver-api/tty/console.rst:10
msgid "Struct Console"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:160
msgid "General console flags"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:164
#: ../../../driver-api/tty/console:18: include/linux/console.h:245
#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2167
msgid "**Constants**"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:166
msgid "``CON_PRINTBUFFER``"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:167
msgid ""
"Used by newly registered consoles to avoid duplicate output of messages that "
"were already shown by boot consoles or read by userspace via syslog() "
"syscall."
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:171
msgid "``CON_CONSDEV``"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:172
msgid "Indicates that the console driver is backing /dev/console."
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:175
msgid "``CON_ENABLED``"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:176
msgid ""
"Indicates if a console is allowed to print records. If false, the console "
"also will not advance to later records."
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:180
msgid "``CON_BOOT``"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:181
msgid ""
"Marks the console driver as early console driver which is used during boot "
"before the real driver becomes available. It will be automatically "
"unregistered when the real console driver is registered unless "
"\"keep_bootcon\" parameter is used."
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:187
msgid "``CON_ANYTIME``"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:188
msgid ""
"A misnomed historical flag which tells the core code that the legacy "
"**console**::write callback can be invoked on a CPU which is marked OFFLINE. "
"That is misleading as it suggests that there is no contextual limit for "
"invoking the callback. The original motivation was readiness of the per-CPU "
"areas."
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:195
msgid "``CON_BRL``"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:196
msgid ""
"Indicates a braille device which is exempt from receiving the printk spam "
"for obvious reasons."
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:199
msgid "``CON_EXTENDED``"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:200
msgid ""
"The console supports the extended output format of /dev/kmesg which requires "
"a larger output buffer."
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:203
msgid "``CON_SUSPENDED``"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:204
msgid ""
"Indicates if a console is suspended. If true, the printing callbacks must "
"not be called."
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:207
msgid "``CON_NBCON``"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:208
msgid ""
"Console can operate outside of the legacy style console_lock constraints."
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:306
msgid "The console descriptor structure"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:310
#: ../../../driver-api/tty/console:18: include/linux/console.h:206
#: include/linux/console.h:268 include/linux/console.h:296
#: ../../../driver-api/tty/console:24: include/linux/console.h:44
msgid "**Definition**::"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:344
#: ../../../driver-api/tty/console:18: include/linux/console.h:221
#: include/linux/console.h:280 include/linux/console.h:305
#: ../../../driver-api/tty/console:24: include/linux/console.h:72
msgid "**Members**"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:307
msgid "``name``"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:308
msgid "The name of the console driver"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:308
msgid "``write``"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:309
msgid "Legacy write callback to output messages (Optional)"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:309
msgid "``read``"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:310
msgid "Read callback for console input (Optional)"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:310
msgid "``device``"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:311
msgid "The underlying TTY device driver (Optional)"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:311
msgid "``unblank``"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:312
msgid "Callback to unblank the console (Optional)"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:312
msgid "``setup``"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:313
msgid "Callback for initializing the console (Optional)"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:313
msgid "``exit``"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:314
msgid "Callback for teardown of the console (Optional)"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:314
msgid "``match``"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:315
msgid "Callback for matching a console (Optional)"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:315
msgid "``flags``"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:316
msgid "Console flags. See enum cons_flags"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:316
msgid "``index``"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:317
msgid "Console index, e.g. port number"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:317
msgid "``cflag``"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:318
msgid "TTY control mode flags"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:318
msgid "``ispeed``"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:319
msgid "TTY input speed"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:319
msgid "``ospeed``"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:320
msgid "TTY output speed"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:320
#: ../../../driver-api/tty/console:18: include/linux/console.h:274
msgid "``seq``"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:321
msgid "Sequence number of the next ringbuffer record to print"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:321
msgid "``dropped``"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:322
msgid "Number of unreported dropped ringbuffer records"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:322
msgid "``data``"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:323
msgid "Driver private data"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:323
msgid "``node``"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:324
msgid "hlist node for the console list"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:356
msgid "``write_atomic``"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:357
msgid "NBCON callback to write out text in any context. (Optional)"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:359
msgid ""
"This callback is called with the console already acquired. However, a higher "
"priority context is allowed to take it over by default."
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:362
msgid ""
"The callback must call nbcon_enter_unsafe() and nbcon_exit_unsafe() around "
"any code where the takeover is not safe, for example, when manipulating the "
"serial port registers."
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:366
msgid ""
"nbcon_enter_unsafe() will fail if the context has lost the console ownership "
"in the meantime. In this case, the callback is no longer allowed to go "
"forward. It must back out immediately and carefully. The buffer content is "
"also no longer trusted since it no longer belongs to the context."
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:372
msgid ""
"The callback should allow the takeover whenever it is safe. It increases the "
"chance to see messages when the system is in trouble. If the driver must "
"reacquire ownership in order to finalize or revert hardware changes, "
"nbcon_reacquire_nobuf() can be used. However, on reacquire the buffer "
"content is no longer available. A reacquire cannot be used to resume "
"printing."
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:379
msgid ""
"The callback can be called from any context (including NMI). Therefore it "
"must avoid usage of any locking and instead rely on the console ownership "
"for synchronization."
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:387
msgid "``write_thread``"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:388
msgid "NBCON callback to write out text in task context."
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:390
msgid ""
"This callback must be called only in task context with both device_lock() "
"and the nbcon console acquired with NBCON_PRIO_NORMAL."
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:394
msgid ""
"The same rules for console ownership verification and unsafe sections "
"handling applies as with write_atomic()."
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:397
msgid ""
"The console ownership handling is necessary for synchronization against "
"write_atomic() which is synchronized only via the context."
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:400
msgid ""
"The device_lock() provides the primary serialization for operations on the "
"device. It might be as relaxed (mutex)[*] or as tight (disabled preemption "
"and interrupts) as needed. It allows the kthread to operate in the least "
"restrictive mode[**]."
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:405
msgid "[*] Standalone nbcon_context_try_acquire() is not safe with"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:406
msgid ""
"the preemption enabled, see nbcon_owner_matches(). But it can be safe when "
"always called in the preemptive context under the device_lock()."
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:410
msgid "[**] The device_lock() makes sure that nbcon_context_try_acquire()"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:411
msgid "would never need to spin which is important especially with PREEMPT_RT."
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:418
msgid "``device_lock``"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:419
msgid "NBCON callback to begin synchronization with driver code."
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:421
msgid ""
"Console drivers typically must deal with access to the hardware via user "
"input/output (such as an interactive login shell) and output of kernel "
"messages via printk() calls. This callback is called by the printk-subsystem "
"whenever it needs to synchronize with hardware access by the driver. It "
"should be implemented to use whatever synchronization mechanism the driver "
"is using for itself (for example, the port lock for uart serial consoles)."
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:429
msgid ""
"The callback is always called from task context. It may use any "
"synchronization method required by the driver."
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:432
msgid "IMPORTANT: The callback MUST disable migration. The console driver"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:433
msgid ""
"may be using a synchronization mechanism that already takes care of this "
"(such as spinlocks). Otherwise this function must explicitly call "
"migrate_disable()."
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:437
msgid ""
"The flags argument is provided as a convenience to the driver. It will be "
"passed again to device_unlock(). It can be ignored if the driver does not "
"need it."
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:445
msgid "``device_unlock``"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:446
msgid "NBCON callback to finish synchronization with driver code."
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:448
msgid "It is the counterpart to device_lock()."
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:450
msgid ""
"This callback is always called from task context. It must appropriately re-"
"enable migration (depending on how device_lock() disabled migration)."
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:454
msgid ""
"The flags argument is the value of the same variable that was passed to "
"device_lock()."
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:325
msgid "``nbcon_state``"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:326
msgid "State for nbcon consoles"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:326
msgid "``nbcon_seq``"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:327
msgid "Sequence number of the next record for nbcon to print"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:327
msgid "``nbcon_device_ctxt``"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:328
msgid "Context available for non-printing operations"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:328
msgid "``nbcon_prev_seq``"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:329
msgid "Seq num the previous nbcon owner was assigned to print"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:329
#: ../../../driver-api/tty/console:18: include/linux/console.h:273
msgid "``pbufs``"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:330
msgid "Pointer to nbcon private buffer"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:330
msgid "``kthread``"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:331
msgid "Printer kthread for this console"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:331
msgid "``rcuwait``"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:332
msgid "RCU-safe wait object for **kthread** waking"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:332
msgid "``irq_work``"
msgstr ""

#: ../../../driver-api/tty/console:12: include/linux/console.h:333
msgid "Defer **kthread** waking to IRQ work context"
msgstr ""

#: ../../../driver-api/tty/console.rst:16
#: ../../../driver-api/tty/console.rst:40
msgid "Internals"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:202
msgid "console state for nbcon consoles"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:1
msgid "``{unnamed_union}``"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:2
msgid "anonymous"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:203
msgid "``atom``"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:204
msgid "Compound of the state fields for atomic operations"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:1
msgid "``{unnamed_struct}``"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:206
#: include/linux/console.h:267
msgid "``prio``"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:207
msgid "The priority of the current owner"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:205
msgid "``req_prio``"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:206
msgid "The priority of a handover request"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:207
msgid "``unsafe``"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:208
msgid "Console is busy in a non takeover region"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:208
#: include/linux/console.h:296
msgid "``unsafe_takeover``"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:209
msgid ""
"A hostile takeover in an unsafe state happened in the past. The console "
"cannot be safe until re-initialized."
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:210
msgid "``cpu``"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:211
msgid "The CPU on which the owner runs"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:214
#: include/linux/console.h:262 ../../../driver-api/tty/console:30:
#: include/linux/console.h:501 include/linux/console.h:534
#: include/linux/console.h:579 include/linux/console.h:593
#: ../../../driver-api/tty/console:34: drivers/tty/vt/selection.c:3
#: ../../../driver-api/tty/console:36: drivers/tty/vt/vt.c:3
#: drivers/tty/vt/vt.c:1294 drivers/tty/vt/vt.c:4246 drivers/tty/vt/vt.c:4284
#: drivers/tty/vt/vt.c:4426 ../../../driver-api/tty/console:42:
#: drivers/tty/vt/selection.c:118 drivers/tty/vt/selection.c:181
#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:1134
#: drivers/tty/vt/vt.c:1312 drivers/tty/vt/vt.c:2838 drivers/tty/vt/vt.c:3320
msgid "**Description**"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:211
msgid ""
"To be used for reading and preparing of the value stored in the nbcon state "
"variable **console**::nbcon_state."
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:214
msgid ""
"The **prio** and **req_prio** fields are particularly important to allow "
"spin-waiting to timeout and give up without the risk of a waiter being "
"assigned the lock after giving up."
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:241
msgid "console owner priority for nbcon consoles"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:247
msgid "``NBCON_PRIO_NONE``"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:248
msgid "Unused"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:250
msgid "``NBCON_PRIO_NORMAL``"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:251
msgid "Normal (non-emergency) usage"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:253
msgid "``NBCON_PRIO_EMERGENCY``"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:254
msgid "Emergency output (WARN/OOPS...)"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:256
msgid "``NBCON_PRIO_PANIC``"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:257
msgid "Panic output"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:259
msgid "``NBCON_PRIO_MAX``"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:260
msgid "The number of priority levels"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:247
msgid ""
"A higher priority context can takeover the console when it is in the safe "
"state. The final attempt to flush consoles in panic() can be allowed to do "
"so even in an unsafe state (Hope and pray)."
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:264
msgid "Context for console acquire/release"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:265
msgid "``console``"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:266
msgid "The associated console"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:266
msgid "``spinwait_max_us``"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:267
msgid "Limit for spin-wait acquire"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:268
msgid "Priority of the context"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:268
msgid "``allow_unsafe_takeover``"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:269
msgid ""
"Allow performing takeover even if unsafe. Can be used only with "
"NBCON_PRIO_PANIC **prio**. It might cause a system freeze when the console "
"is used later."
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:272
msgid "``backlog``"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:273
msgid "Ringbuffer has pending records"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:274
msgid "Pointer to the text buffer for this context"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:275
msgid "The sequence number to print for this context"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:292
msgid "Context handed to the nbcon write callbacks"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:293
msgid "``ctxt``"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:294
msgid "The core console context"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:294
msgid "``outbuf``"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:295
msgid "Pointer to the text buffer for output"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:295
msgid "``len``"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:296
msgid "Length to write"
msgstr ""

#: ../../../driver-api/tty/console:18: include/linux/console.h:297
msgid "If a hostile takeover in an unsafe state has occurred"
msgstr ""

#: ../../../driver-api/tty/console.rst:22
msgid "Struct Consw"
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:40
msgid "callbacks for consoles"
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:42
msgid "``owner``"
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:43
msgid "the module to get references of when this console is used"
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:43
msgid "``con_startup``"
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:44
msgid "set up the console and return its name (like VGA, EGA, ...)"
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:44
msgid "``con_init``"
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:45
msgid ""
"initialize the console on **vc**. **init** is true for the very first call "
"on this **vc**."
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:46
msgid "``con_deinit``"
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:47
msgid "deinitialize the console from **vc**."
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:47
msgid "``con_clear``"
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:48
msgid "erase **count** characters at [**x**, **y**] on **vc**. **count** >= 1."
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:48
msgid "``con_putc``"
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:49
msgid ""
"emit one character with attributes **ca** to [**x**, **y**] on **vc**. "
"(optional -- **con_putcs** would be called instead)"
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:50
msgid "``con_putcs``"
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:51
msgid ""
"emit **count** characters with attributes **s** to [**x**, **y**] on **vc**."
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:51
msgid "``con_cursor``"
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:52
msgid "enable/disable cursor depending on **enable**"
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:52
msgid "``con_scroll``"
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:53
msgid ""
"move lines from **top** to **bottom** in direction **dir** by **lines**. "
"Return true if no generic handling should be done. Invoked by csi_M and "
"printing to the console."
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:55
msgid "``con_switch``"
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:56
msgid ""
"notifier about the console switch; it is supposed to return true if a redraw "
"is needed."
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:57
msgid "``con_blank``"
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:58
msgid ""
"blank/unblank the console. The target mode is passed in **blank**. "
"**mode_switch** is set if changing from/to text/graphics. The hook is "
"supposed to return true if a redraw is needed."
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:60
msgid "``con_font_set``"
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:61
msgid ""
"set console **vc** font to **font** with height **vpitch**. **flags** can be "
"``KD_FONT_FLAG_DONT_RECALC``. (optional)"
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:62
msgid "``con_font_get``"
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:63
msgid ""
"fetch the current font on **vc** of height **vpitch** into **font**. "
"(optional)"
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:64
msgid "``con_font_default``"
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:65
msgid ""
"set default font on **vc**. **name** can be ``NULL`` or font name to search "
"for. **font** can be filled back. (optional)"
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:66
msgid "``con_resize``"
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:67
msgid ""
"resize the **vc** console to **width** x **height**. **from_user** is true "
"when this change comes from the user space."
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:68
msgid "``con_set_palette``"
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:69
msgid "sets the palette of the console **vc** to **table** (optional)"
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:69
msgid "``con_scrolldelta``"
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:70
msgid ""
"the contents of the console should be scrolled by **lines**. Invoked by "
"user. (optional)"
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:71
msgid "``con_set_origin``"
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:72
msgid ""
"set origin (see :c:type:`vc_data`::vc_origin) of the **vc**. If not provided "
"or returns false, the origin is set to **vc->vc_screenbuf**. (optional)"
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:74
msgid "``con_save_screen``"
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:75
msgid ""
"save screen content into **vc->vc_screenbuf**. Called e.g. upon entering "
"graphics. (optional)"
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:76
msgid "``con_build_attr``"
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:77
msgid ""
"build attributes based on **color**, **intensity** and other parameters. The "
"result is used for both normal and erase characters. (optional)"
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:79
msgid "``con_invert_region``"
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:80
msgid ""
"invert a region of length **count** on **vc** starting at **p**. (optional)"
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:81
msgid "``con_debug_enter``"
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:82
msgid ""
"prepare the console for the debugger. This includes, but is not limited to, "
"unblanking the console, loading an appropriate palette, and allowing "
"debugger generated output. (optional)"
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:85
msgid "``con_debug_leave``"
msgstr ""

#: ../../../driver-api/tty/console:24: include/linux/console.h:86
msgid ""
"restore the console to its pre-debug state as closely as possible. (optional)"
msgstr ""

#: ../../../driver-api/tty/console.rst:28
msgid "Console functions"
msgstr ""

#: ../../../driver-api/tty/console:30: include/linux/console.h:497
msgid "Locklessly read flags of a possibly registered console"
msgstr ""

#: ../../../driver-api/tty/console:30: include/linux/console.h:501
#: include/linux/console.h:534 include/linux/console.h:580
#: include/linux/console.h:594 ../../../driver-api/tty/console:34:
#: drivers/tty/vt/selection.c:80 ../../../driver-api/tty/console:36:
#: drivers/tty/vt/vt.c:1292 drivers/tty/vt/vt.c:4245 drivers/tty/vt/vt.c:4271
#: drivers/tty/vt/vt.c:4285 drivers/tty/vt/vt.c:4336 drivers/tty/vt/vt.c:4427
#: ../../../driver-api/tty/console:42: drivers/tty/vt/selection.c:119
#: drivers/tty/vt/selection.c:181 ../../../driver-api/tty/console:44:
#: drivers/tty/vt/vt.c:1131 drivers/tty/vt/vt.c:1312 drivers/tty/vt/vt.c:2825
#: drivers/tty/vt/vt.c:2837 drivers/tty/vt/vt.c:3320
msgid "**Parameters**"
msgstr ""

#: ../../../driver-api/tty/console:30: include/linux/console.h:503
msgid "``const struct console *con``"
msgstr ""

#: ../../../driver-api/tty/console:30: include/linux/console.h:499
msgid "struct console pointer of console to read flags from"
msgstr ""

#: ../../../driver-api/tty/console:30: include/linux/console.h:500
msgid ""
"Locklessly reading **con->flags** provides a consistent read value because "
"there is at most one CPU modifying **con->flags** and that CPU is using only "
"read-modify-write operations to do so."
msgstr ""

#: ../../../driver-api/tty/console:30: include/linux/console.h:504
msgid ""
"Requires console_srcu_read_lock to be held, which implies that **con** might "
"be a registered console. The purpose of holding console_srcu_read_lock is to "
"guarantee that the console state is valid (CON_SUSPENDED/CON_ENABLED) and "
"that no exit/cleanup routines will run if the console is currently "
"undergoing unregistration."
msgstr ""

#: ../../../driver-api/tty/console:30: include/linux/console.h:510
msgid ""
"If the caller is holding the console_list_lock or it is _certain_ that "
"**con** is not and will not become registered, the caller may read **con-"
">flags** directly instead."
msgstr ""

#: ../../../driver-api/tty/console:30: include/linux/console.h:514
#: include/linux/console.h:536
msgid "**Context**"
msgstr ""

#: ../../../driver-api/tty/console:30: include/linux/console.h:515
#: include/linux/console.h:537
msgid "Any context."
msgstr ""

#: ../../../driver-api/tty/console:30: include/linux/console.h:517
#: ../../../driver-api/tty/console:36: drivers/tty/vt/vt.c:4244
#: drivers/tty/vt/vt.c:4270 ../../../driver-api/tty/console:44:
#: drivers/tty/vt/vt.c:2842
msgid "**Return**"
msgstr ""

#: ../../../driver-api/tty/console:30: include/linux/console.h:516
msgid "The current value of the **con->flags** field."
msgstr ""

#: ../../../driver-api/tty/console:30: include/linux/console.h:530
msgid "Write flags for a registered console"
msgstr ""

#: ../../../driver-api/tty/console:30: include/linux/console.h:536
msgid "``struct console *con``"
msgstr ""

#: ../../../driver-api/tty/console:30: include/linux/console.h:531
msgid "struct console pointer of console to write flags to"
msgstr ""

#: ../../../driver-api/tty/console:30: include/linux/console.h:533
msgid "``short flags``"
msgstr ""

#: ../../../driver-api/tty/console:30: include/linux/console.h:532
msgid "new flags value to write"
msgstr ""

#: ../../../driver-api/tty/console:30: include/linux/console.h:533
msgid ""
"Only use this function to write flags for registered consoles. It requires "
"holding the console_list_lock."
msgstr ""

#: ../../../driver-api/tty/console:30: include/linux/console.h:578
msgid "``for_each_console_srcu (con)``"
msgstr ""

#: ../../../driver-api/tty/console:30: include/linux/console.h:576
#: include/linux/console.h:590
msgid "Iterator over registered consoles"
msgstr ""

#: ../../../driver-api/tty/console:30: include/linux/console.h:582
#: include/linux/console.h:596
msgid "``con``"
msgstr ""

#: ../../../driver-api/tty/console:30: include/linux/console.h:577
#: include/linux/console.h:591
msgid "struct console pointer used as loop cursor"
msgstr ""

#: ../../../driver-api/tty/console:30: include/linux/console.h:578
msgid ""
"Although SRCU guarantees the console list will be consistent, the struct "
"console fields may be updated by other CPUs while iterating."
msgstr ""

#: ../../../driver-api/tty/console:30: include/linux/console.h:581
msgid ""
"Requires console_srcu_read_lock to be held. Can be invoked from any context."
msgstr ""

#: ../../../driver-api/tty/console:30: include/linux/console.h:592
msgid "``for_each_console (con)``"
msgstr ""

#: ../../../driver-api/tty/console:30: include/linux/console.h:592
msgid ""
"The console list and the :c:type:`console.flags <console>` are immutable "
"while iterating."
msgstr ""

#: ../../../driver-api/tty/console:30: include/linux/console.h:594
msgid "Requires console_list_lock to be held."
msgstr ""

#: ../../../driver-api/tty/console:34: drivers/tty/vt/selection.c:76
msgid "remove current selection"
msgstr ""

#: ../../../driver-api/tty/console:34: drivers/tty/vt/selection.c:82
#: ../../../driver-api/tty/console:36: drivers/tty/vt/vt.c:4338
msgid "``void``"
msgstr ""

#: ../../../driver-api/tty/console:34: drivers/tty/vt/selection.c:1
#: ../../../driver-api/tty/console:36: drivers/tty/vt/vt.c:1
msgid "no arguments"
msgstr ""

#: ../../../driver-api/tty/console:34: drivers/tty/vt/selection.c:77
msgid ""
"Remove the current selection highlight, if any from the console holding the "
"selection."
msgstr ""

#: ../../../driver-api/tty/console:34: drivers/tty/vt/selection.c:80
msgid "Locking: The caller must hold the console lock."
msgstr ""

#: ../../../driver-api/tty/console:36: drivers/tty/vt/vt.c:1288
#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:1308
msgid "resize a VT"
msgstr ""

#: ../../../driver-api/tty/console:36: drivers/tty/vt/vt.c:1294
#: drivers/tty/vt/vt.c:4287 ../../../driver-api/tty/console:44:
#: drivers/tty/vt/vt.c:1130 drivers/tty/vt/vt.c:2839
msgid "``struct vc_data *vc``"
msgstr ""

#: ../../../driver-api/tty/console:36: drivers/tty/vt/vt.c:1289
#: drivers/tty/vt/vt.c:4268 drivers/tty/vt/vt.c:4282
#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2834
msgid "virtual console"
msgstr ""

#: ../../../driver-api/tty/console:36: drivers/tty/vt/vt.c:1291
#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:1131
msgid "``unsigned int cols``"
msgstr ""

#: ../../../driver-api/tty/console:36: drivers/tty/vt/vt.c:1290
#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:1130
msgid "columns"
msgstr ""

#: ../../../driver-api/tty/console:36: drivers/tty/vt/vt.c:1292
msgid "``unsigned int rows``"
msgstr ""

#: ../../../driver-api/tty/console:36: drivers/tty/vt/vt.c:1291
msgid "rows"
msgstr ""

#: ../../../driver-api/tty/console:36: drivers/tty/vt/vt.c:1293
#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:1133
msgid "``bool from_user``"
msgstr ""

#: ../../../driver-api/tty/console:36: drivers/tty/vt/vt.c:1292
#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:1132
msgid "invoked by a user?"
msgstr ""

#: ../../../driver-api/tty/console:36: drivers/tty/vt/vt.c:1293
msgid ""
"Resize a virtual console as seen from the console end of things. We use the "
"common vc_do_resize() method to update the structures."
msgstr ""

#: ../../../driver-api/tty/console:36: drivers/tty/vt/vt.c:1296
msgid ""
"Locking: The caller must hold the console sem to protect console internals "
"and **vc->port.tty**."
msgstr ""

#: ../../../driver-api/tty/console:36: drivers/tty/vt/vt.c:4241
msgid "checks if driver is bound to the console"
msgstr ""

#: ../../../driver-api/tty/console:36: drivers/tty/vt/vt.c:4247
#: drivers/tty/vt/vt.c:4429
msgid "``const struct consw *csw``"
msgstr ""

#: ../../../driver-api/tty/console:36: drivers/tty/vt/vt.c:4242
#: drivers/tty/vt/vt.c:4424
msgid "console driver"
msgstr ""

#: ../../../driver-api/tty/console:36: drivers/tty/vt/vt.c:4244
msgid "zero if unbound, nonzero if bound"
msgstr ""

#: ../../../driver-api/tty/console:36: drivers/tty/vt/vt.c:4245
msgid ""
"Drivers can call this and if zero, they should release all resources "
"allocated on :c:type:`consw.con_startup\\(\\) <consw>`"
msgstr ""

#: ../../../driver-api/tty/console:36: drivers/tty/vt/vt.c:4267
msgid "checks whether the current console is visible"
msgstr ""

#: ../../../driver-api/tty/console:36: drivers/tty/vt/vt.c:4273
msgid "``const struct vc_data *vc``"
msgstr ""

#: ../../../driver-api/tty/console:36: drivers/tty/vt/vt.c:4270
msgid "zero if not visible, nonzero if visible"
msgstr ""

#: ../../../driver-api/tty/console:36: drivers/tty/vt/vt.c:4281
msgid "prepare the console for the kernel debugger"
msgstr ""

#: ../../../driver-api/tty/console:36: drivers/tty/vt/vt.c:4283
msgid ""
"Called when the console is taken over by the kernel debugger, this function "
"needs to save the current console state, then put the console into a state "
"suitable for the kernel debugger."
msgstr ""

#: ../../../driver-api/tty/console:36: drivers/tty/vt/vt.c:4332
msgid "restore console state"
msgstr ""

#: ../../../driver-api/tty/console:36: drivers/tty/vt/vt.c:4333
msgid ""
"Restore the console state to what it was before the kernel debugger was "
"invoked."
msgstr ""

#: ../../../driver-api/tty/console:36: drivers/tty/vt/vt.c:4423
msgid "unregister console driver from console layer"
msgstr ""

#: ../../../driver-api/tty/console:36: drivers/tty/vt/vt.c:4426
msgid ""
"All drivers that registers to the console layer must call this function upon "
"exit, or if the console driver is in a state where it won't be able to "
"handle console services, such as the framebuffer console without loaded "
"framebuffer drivers."
msgstr ""

#: ../../../driver-api/tty/console:36: drivers/tty/vt/vt.c:4431
msgid "The driver must unbind first prior to unregistration."
msgstr ""

#: ../../../driver-api/tty/console:42: drivers/tty/vt/selection.c:115
msgid "load the LUT table"
msgstr ""

#: ../../../driver-api/tty/console:42: drivers/tty/vt/selection.c:121
msgid "``u32 __user *lut``"
msgstr ""

#: ../../../driver-api/tty/console:42: drivers/tty/vt/selection.c:116
msgid "user table"
msgstr ""

#: ../../../driver-api/tty/console:42: drivers/tty/vt/selection.c:117
msgid ""
"Load the LUT table from user space. Make a temporary copy so a partial "
"update doesn't make a mess."
msgstr ""

#: ../../../driver-api/tty/console:42: drivers/tty/vt/selection.c:120
msgid "Locking: The console lock is acquired."
msgstr ""

#: ../../../driver-api/tty/console:42: drivers/tty/vt/selection.c:177
msgid "set the current selection."
msgstr ""

#: ../../../driver-api/tty/console:42: drivers/tty/vt/selection.c:183
msgid "``const struct tiocl_selection __user *sel``"
msgstr ""

#: ../../../driver-api/tty/console:42: drivers/tty/vt/selection.c:178
msgid "user selection info"
msgstr ""

#: ../../../driver-api/tty/console:42: drivers/tty/vt/selection.c:180
#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:1133
#: drivers/tty/vt/vt.c:1314
msgid "``struct tty_struct *tty``"
msgstr ""

#: ../../../driver-api/tty/console:42: drivers/tty/vt/selection.c:179
msgid "the console tty"
msgstr ""

#: ../../../driver-api/tty/console:42: drivers/tty/vt/selection.c:180
msgid "Invoked by the ioctl handle for the vt layer."
msgstr ""

#: ../../../driver-api/tty/console:42: drivers/tty/vt/selection.c:182
msgid ""
"Locking: The entire selection process is managed under the console_lock. "
"It's a lot under the lock but its hardly a performance path."
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:1127
msgid "resizing method for the tty"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:1128
msgid "tty being resized"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:1129
msgid "virtual console private data"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:1132
msgid "``unsigned int lines``"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:1131
msgid "lines"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:1133
msgid ""
"Resize a virtual console, clipping according to the actual constraints. If "
"the caller passes a tty structure then update the termios winsize "
"information and perform any necessary signal handling."
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:1137
msgid ""
"Locking: Caller must hold the console semaphore. Takes the termios rwsem and "
"ctrl.lock of the tty IFF a tty is passed."
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:1309
msgid "tty to resize"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:1311
msgid "``struct winsize *ws``"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:1310
msgid "winsize attributes"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:1311
msgid ""
"Resize a virtual terminal. This is called by the tty layer as we register "
"our own handler for resizing. The mutual helper does all the actual work."
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:1314
msgid ""
"Locking: Takes the console sem and the called methods then take the tty "
"termios_rwsem and the tty ctrl.lock in that order."
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2163
msgid "control characters state of a vt"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2169
msgid "``ESnormal``"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2170
msgid "initial state, no control characters parsed"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2172
msgid "``ESesc``"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2173
msgid "ESC parsed"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2175
msgid "``ESsquare``"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2176
msgid "CSI parsed -- modifiers/parameters/ctrl chars expected"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2178
msgid "``ESgetpars``"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2179
msgid "CSI parsed -- parameters/ctrl chars expected"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2181
msgid "``ESfunckey``"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2182
msgid "CSI [ parsed"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2184
msgid "``EShash``"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2185
msgid "ESC # parsed"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2187
msgid "``ESsetG0``"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2188
msgid "ESC ( parsed"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2190
msgid "``ESsetG1``"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2191
msgid "ESC ) parsed"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2193
msgid "``ESpercent``"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2194
msgid "ESC % parsed"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2196
msgid "``EScsiignore``"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2197
msgid "CSI [0x20-0x3f] parsed"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2199
msgid "``ESnonstd``"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2200
msgid "OSC parsed"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2202
msgid "``ESpalette``"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2203
msgid "OSC P parsed"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2205
msgid "``ESosc``"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2206
msgid "OSC [0-9] parsed"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2208
msgid "``ESANSI_first``"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2209
msgid "first state for ignoring ansi control sequences"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2211
msgid "``ESapc``"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2212
msgid "ESC _ parsed"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2214
msgid "``ESpm``"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2215
msgid "ESC ^ parsed"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2217
msgid "``ESdcs``"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2218
msgid "ESC P parsed"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2220
msgid "``ESANSI_last``"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2221
msgid "last state for ignoring ansi control sequences"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2821
msgid "Replace invalid Unicode code points with ``U+FFFD``"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2827
msgid "``const int c``"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2822
msgid "the received code point"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2833
msgid "Combine UTF-8 into Unicode in :c:type:`vc_data.vc_utf_char <vc_data>`"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2836
msgid "``int c``"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2835
msgid "UTF-8 byte to translate"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2837
msgid "``bool *rescan``"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2836
msgid "set to true iff **c** wasn't consumed here and needs to be re-processed"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2837
msgid ""
":c:type:`vc_data.vc_utf_char <vc_data>` is the being-constructed Unicode "
"code point."
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2838
msgid ""
":c:type:`vc_data.vc_utf_count <vc_data>` is the number of continuation bytes "
"still expected to arrive."
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2840
msgid ""
":c:type:`vc_data.vc_npar <vc_data>` is the number of continuation bytes "
"arrived so far."
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2843
msgid "``-1`` - Input OK so far, **c** consumed, further bytes expected."
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2844
msgid ""
"``0xFFFD`` - Possibility 1: input invalid, **c** may have been consumed (see"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2845
msgid ""
"desc. of **rescan**). Possibility 2: input OK, **c** consumed, ``U+FFFD`` is "
"the resulting code point. ``U+FFFD`` is valid, ``REPLACEMENT CHARACTER``."
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:2848
msgid "otherwise - Input OK, **c** consumed, resulting code point returned."
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:3316
msgid "sets/gets the kernel message console"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:3322
msgid "``int new``"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:3317
msgid ""
"the new virtual terminal number or -1 if the console should stay unchanged"
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:3319
msgid ""
"By default, the kernel messages are always printed on the current virtual "
"console. However, the user may modify that default with the "
"``TIOCL_SETKMSGREDIRECT`` ioctl call."
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:3323
msgid ""
"This function sets the kernel message console to be **new**. It returns the "
"old virtual console number. The virtual terminal number ``0`` (both as "
"parameter and return value) means no redirection (i.e. always printed on the "
"currently active console)."
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:3328
msgid ""
"The parameter -1 means that only the current console is returned, but the "
"value is not modified. You may use the macro vt_get_kmsg_redirect() in that "
"case to make the code more understandable."
msgstr ""

#: ../../../driver-api/tty/console:44: drivers/tty/vt/vt.c:3332
msgid ""
"When the kernel is compiled without ``CONFIG_VT_CONSOLE``, this function "
"ignores the parameter and always returns ``0``."
msgstr ""
