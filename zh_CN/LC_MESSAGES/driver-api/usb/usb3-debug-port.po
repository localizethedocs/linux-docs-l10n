# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../driver-api/usb/usb3-debug-port.rst:3
msgid "USB3 debug port"
msgstr ""

#: ../../../driver-api/usb/usb3-debug-port.rst:0
msgid "Author"
msgstr ""

#: ../../../driver-api/usb/usb3-debug-port.rst:5
msgid "Lu Baolu <baolu.lu@linux.intel.com>"
msgstr ""

#: ../../../driver-api/usb/usb3-debug-port.rst:0
msgid "Date"
msgstr ""

#: ../../../driver-api/usb/usb3-debug-port.rst:6
msgid "March 2017"
msgstr ""

#: ../../../driver-api/usb/usb3-debug-port.rst:9
msgid "GENERAL"
msgstr ""

#: ../../../driver-api/usb/usb3-debug-port.rst:11
msgid "This is a HOWTO for using the USB3 debug port on x86 systems."
msgstr ""

#: ../../../driver-api/usb/usb3-debug-port.rst:13
msgid ""
"Before using any kernel debugging functionality based on USB3 debug port, "
"you need to::"
msgstr ""

#: ../../../driver-api/usb/usb3-debug-port.rst:22
msgid "INTRODUCTION"
msgstr ""

#: ../../../driver-api/usb/usb3-debug-port.rst:24
msgid ""
"The xHCI debug capability (DbC) is an optional but standalone functionality "
"provided by the xHCI host controller. The xHCI specification describes DbC "
"in the section 7.6."
msgstr ""

#: ../../../driver-api/usb/usb3-debug-port.rst:28
msgid ""
"When DbC is initialized and enabled, it will present a debug device through "
"the debug port (normally the first USB3 super-speed port). The debug device "
"is fully compliant with the USB framework and provides the equivalent of a "
"very high performance full-duplex serial link between the debug target (the "
"system under debugging) and a debug host."
msgstr ""

#: ../../../driver-api/usb/usb3-debug-port.rst:36
msgid "EARLY PRINTK"
msgstr ""

#: ../../../driver-api/usb/usb3-debug-port.rst:38
msgid ""
"DbC has been designed to log early printk messages. One use for this feature "
"is kernel debugging. For example, when your machine crashes very early "
"before the regular console code is initialized. Other uses include simpler, "
"lockless logging instead of a full- blown printk console driver and klogd."
msgstr ""

#: ../../../driver-api/usb/usb3-debug-port.rst:44
msgid ""
"On the debug target system, you need to customize a debugging kernel with "
"CONFIG_EARLY_PRINTK_USB_XDBC enabled. And, add below kernel boot parameter::"
msgstr ""

#: ../../../driver-api/usb/usb3-debug-port.rst:50
msgid ""
"If there are multiple xHCI controllers in your system, you can append a host "
"controller index to this kernel parameter. This index starts from 0."
msgstr ""

#: ../../../driver-api/usb/usb3-debug-port.rst:54
msgid ""
"Current design doesn't support DbC runtime suspend/resume. As the result, "
"you'd better disable runtime power management for USB subsystem by adding "
"below kernel boot parameter::"
msgstr ""

#: ../../../driver-api/usb/usb3-debug-port.rst:60
msgid ""
"Before starting the debug target, you should connect the debug port to a USB "
"port (root port or port of any external hub) on the debug host. The cable "
"used to connect these two ports should be a USB 3.0 super-speed A-to-A "
"debugging cable."
msgstr ""

#: ../../../driver-api/usb/usb3-debug-port.rst:65
msgid ""
"During early boot of the debug target, DbC will be detected and initialized. "
"After initialization, the debug host should be able to enumerate the debug "
"device in debug target. The debug host will then bind the debug device with "
"the usb_debug driver module and create the /dev/ttyUSB device."
msgstr ""

#: ../../../driver-api/usb/usb3-debug-port.rst:71
msgid ""
"If the debug device enumeration goes smoothly, you should be able to see "
"below kernel messages on the debug host::"
msgstr ""

#: ../../../driver-api/usb/usb3-debug-port.rst:85
msgid ""
"You can use any communication program, for example minicom, to read and view "
"the messages. Below simple bash scripts can help you to check the sanity of "
"the setup."
msgstr ""

#: ../../../driver-api/usb/usb3-debug-port.rst:103
msgid "Serial TTY"
msgstr ""

#: ../../../driver-api/usb/usb3-debug-port.rst:105
msgid ""
"The DbC support has been added to the xHCI driver. You can get a debug "
"device provided by the DbC at runtime."
msgstr ""

#: ../../../driver-api/usb/usb3-debug-port.rst:108
msgid ""
"In order to use this, you need to make sure your kernel has been configured "
"to support USB_XHCI_DBGCAP. A sysfs attribute under the xHCI device node is "
"used to enable or disable DbC. By default, DbC is disabled::"
msgstr ""

#: ../../../driver-api/usb/usb3-debug-port.rst:116
msgid "Enable DbC with the following command::"
msgstr ""

#: ../../../driver-api/usb/usb3-debug-port.rst:120
msgid "You can check the DbC state at anytime::"
msgstr ""

#: ../../../driver-api/usb/usb3-debug-port.rst:125
msgid ""
"Connect the debug target to the debug host with a USB 3.0 super- speed A-to-"
"A debugging cable. You can see /dev/ttyDBC0 created on the debug target. You "
"will see below kernel message lines::"
msgstr ""

#: ../../../driver-api/usb/usb3-debug-port.rst:134
msgid "Accordingly, the DbC state has been brought up to::"
msgstr ""

#: ../../../driver-api/usb/usb3-debug-port.rst:139
msgid ""
"On the debug host, you will see the debug device has been enumerated. You "
"will see below kernel message lines::"
msgstr ""

#: ../../../driver-api/usb/usb3-debug-port.rst:151
msgid ""
"The debug device works now. You can use any communication or debugging "
"program to talk between the host and the target."
msgstr ""
