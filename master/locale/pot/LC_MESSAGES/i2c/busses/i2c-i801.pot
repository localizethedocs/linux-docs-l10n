# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../i2c/busses/i2c-i801.rst:3
msgid "Kernel driver i2c-i801"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:6
msgid "Supported adapters:"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:7
msgid ""
"Intel 82801AA and 82801AB (ICH and ICH0 - part of the '810' and '810E' "
"chipsets)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:9
msgid "Intel 82801BA (ICH2 - part of the '815E' chipset)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:10
msgid "Intel 82801CA/CAM (ICH3)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:11
msgid "Intel 82801DB (ICH4) (HW PEC supported)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:12
msgid "Intel 82801EB/ER (ICH5) (HW PEC supported)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:13
msgid "Intel 6300ESB"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:14
msgid "Intel 82801FB/FR/FW/FRW (ICH6)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:15
msgid "Intel 82801G (ICH7)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:16
msgid "Intel 631xESB/632xESB (ESB2)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:17
msgid "Intel 82801H (ICH8)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:18
msgid "Intel 82801I (ICH9)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:19
msgid "Intel EP80579 (Tolapai)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:20
msgid "Intel 82801JI (ICH10)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:21
msgid "Intel 5/3400 Series (PCH)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:22
msgid "Intel 6 Series (PCH)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:23
msgid "Intel Patsburg (PCH)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:24
msgid "Intel DH89xxCC (PCH)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:25
msgid "Intel Panther Point (PCH)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:26
msgid "Intel Lynx Point (PCH)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:27
msgid "Intel Avoton (SOC)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:28
msgid "Intel Wellsburg (PCH)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:29
msgid "Intel Coleto Creek (PCH)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:30
msgid "Intel Wildcat Point (PCH)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:31
msgid "Intel BayTrail (SOC)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:32
msgid "Intel Braswell (SOC)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:33
msgid "Intel Sunrise Point (PCH)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:34
msgid "Intel Kaby Lake (PCH)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:35
msgid "Intel DNV (SOC)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:36
msgid "Intel Broxton (SOC)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:37
msgid "Intel Lewisburg (PCH)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:38
msgid "Intel Gemini Lake (SOC)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:39
msgid "Intel Cannon Lake (PCH)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:40
msgid "Intel Cedar Fork (PCH)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:41
msgid "Intel Ice Lake (PCH)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:42
msgid "Intel Comet Lake (PCH)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:43
msgid "Intel Elkhart Lake (PCH)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:44
msgid "Intel Tiger Lake (PCH)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:45
msgid "Intel Jasper Lake (SOC)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:46
msgid "Intel Emmitsburg (PCH)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:47
msgid "Intel Alder Lake (PCH)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:48
msgid "Intel Raptor Lake (PCH)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:49
msgid "Intel Meteor Lake (SOC and PCH)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:50
msgid "Intel Birch Stream (SOC)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:51
msgid "Intel Arrow Lake (SOC)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:52
msgid "Intel Panther Lake (SOC)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:54
msgid "Datasheets: Publicly available at the Intel website"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:56
msgid ""
"On Intel Patsburg and later chipsets, both the normal host SMBus controller "
"and the additional 'Integrated Device Function' controllers are supported."
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:59
msgid "Authors:"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:60
msgid "Mark Studebaker <mdsxyz123@yahoo.com>"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:61
msgid "Jean Delvare <jdelvare@suse.de>"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:65
msgid "Module Parameters"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:67
msgid "disable_features (bit vector)"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:69
msgid ""
"Disable selected features normally supported by the device. This makes it "
"possible to work around possible driver or hardware bugs if the feature in "
"question doesn't work as intended for whatever reason. Bit values:"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:74
msgid "0x01"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:74
msgid "disable SMBus PEC"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:75
msgid "0x02"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:75
msgid "disable the block buffer"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:76
msgid "0x08"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:76
msgid "disable the I2C block read functionality"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:77
msgid "0x10"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:77
msgid "don't use interrupts"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:78
msgid "0x20"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:78
msgid "disable SMBus Host Notify"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:83
msgid "Description"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:85
msgid ""
"The ICH (properly known as the 82801AA), ICH0 (82801AB), ICH2 (82801BA), "
"ICH3 (82801CA/CAM) and later devices (PCH) are Intel chips that are a part "
"of Intel's '810' chipset for Celeron-based PCs, '810E' chipset for Pentium-"
"based PCs, '815E' chipset, and others."
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:90
msgid ""
"The ICH chips contain at least SEVEN separate PCI functions in TWO logical "
"PCI devices. An output of lspci will show something similar to the "
"following::"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:100
msgid ""
"The SMBus controller is function 3 in device 1f. Class 0c05 is SMBus Serial "
"Controller."
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:103
msgid ""
"The ICH chips are quite similar to Intel's PIIX4 chip, at least in the SMBus "
"controller."
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:108
msgid "Process Call Support"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:110
msgid "Block process call is supported on the 82801EB (ICH5) and later chips."
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:114
msgid "I2C Block Read Support"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:116
msgid "I2C block read is supported on the 82801EB (ICH5) and later chips."
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:120
msgid "SMBus 2.0 Support"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:122
msgid "The 82801DB (ICH4) and later chips support several SMBus 2.0 features."
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:126
msgid "Interrupt Support"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:128
msgid ""
"PCI interrupt support is supported on the 82801EB (ICH5) and later chips."
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:132
msgid "Hidden ICH SMBus"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:134
msgid ""
"If your system has an Intel ICH south bridge, but you do NOT see the SMBus "
"device at 00:1f.3 in lspci, and you can't figure out any way in the BIOS to "
"enable it, it means it has been hidden by the BIOS code. Asus is well known "
"for first doing this on their P4B motherboard, and many other boards after "
"that. Some vendor machines are affected as well."
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:140
msgid ""
"The first thing to try is the \"i2c-scmi\" ACPI driver. It could be that the "
"SMBus was hidden on purpose because it'll be driven by ACPI. If the i2c-scmi "
"driver works for you, just forget about the i2c-i801 driver and don't try to "
"unhide the ICH SMBus. Even if i2c-scmi doesn't work, you better make sure "
"that the SMBus isn't used by the ACPI code. Try loading the \"fan\" and "
"\"thermal\" drivers, and check in /sys/class/thermal. If you find a thermal "
"zone with type \"acpitz\", it's likely that the ACPI is accessing the SMBus "
"and it's safer not to unhide it. Only once you are certain that ACPI isn't "
"using the SMBus, you can attempt to unhide it."
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:150
msgid ""
"In order to unhide the SMBus, we need to change the value of a PCI register "
"before the kernel enumerates the PCI devices. This is done in drivers/pci/"
"quirks.c, where all affected boards must be listed (see function "
"asus_hides_smbus_hostbridge.) If the SMBus device is missing, and you think "
"there's something interesting on the SMBus (e.g. a hardware monitoring "
"chip), you need to add your board to the list."
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:157
msgid ""
"The motherboard is identified using the subvendor and subdevice IDs of the "
"host bridge PCI device. Get yours with ``lspci -n -v -s 00:00.0``::"
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:167
msgid ""
"Here the host bridge ID is 2570 (82865G/PE/P), the subvendor ID is 1043 "
"(Asus) and the subdevice ID is 80f2 (P4P800-X). You can find the symbolic "
"names for the bridge ID and the subvendor ID in include/linux/pci_ids.h, and "
"then add a case for your subdevice ID at the right place in drivers/pci/"
"quirks.c. Then please give it very good testing, to make sure that the "
"unhidden SMBus doesn't conflict with e.g. ACPI."
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:174
msgid ""
"If it works, proves useful (i.e. there are usable chips on the SMBus) and "
"seems safe, please submit a patch for inclusion into the kernel."
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:177
msgid ""
"Note: There's a useful script in lm_sensors 2.10.2 and later, named "
"unhide_ICH_SMBus (in prog/hotplug), which uses the fakephp driver to "
"temporarily unhide the SMBus without having to patch and recompile your "
"kernel. It's very convenient if you just want to check if there's anything "
"interesting on your hidden ICH SMBus."
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:186
msgid ""
"The lm_sensors project gratefully acknowledges the support of Texas "
"Instruments in the initial development of this driver."
msgstr ""

#: ../../../i2c/busses/i2c-i801.rst:189
msgid ""
"The lm_sensors project gratefully acknowledges the support of Intel in the "
"development of SMBus 2.0 / ICH4 features of this driver."
msgstr ""
