# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../i2c/muxes/i2c-mux-gpio.rst:3
msgid "Kernel driver i2c-mux-gpio"
msgstr ""

#: ../../../i2c/muxes/i2c-mux-gpio.rst:5
msgid "Author: Peter Korsgaard <peter.korsgaard@barco.com>"
msgstr ""

#: ../../../i2c/muxes/i2c-mux-gpio.rst:8
msgid "Description"
msgstr ""

#: ../../../i2c/muxes/i2c-mux-gpio.rst:10
msgid ""
"i2c-mux-gpio is an i2c mux driver providing access to I2C bus segments from "
"a master I2C bus and a hardware MUX controlled through GPIO pins."
msgstr ""

#: ../../../i2c/muxes/i2c-mux-gpio.rst:13
msgid "E.G.::"
msgstr ""

#: ../../../i2c/muxes/i2c-mux-gpio.rst:25
msgid ""
"SCL/SDA of the master I2C bus is multiplexed to bus segment 1..M according "
"to the settings of the GPIO pins 1..N."
msgstr ""

#: ../../../i2c/muxes/i2c-mux-gpio.rst:29
msgid "Usage"
msgstr ""

#: ../../../i2c/muxes/i2c-mux-gpio.rst:31
msgid ""
"i2c-mux-gpio uses the platform bus, so you need to provide a struct "
"platform_device with the platform_data pointing to a struct "
"i2c_mux_gpio_platform_data with the I2C adapter number of the master bus, "
"the number of bus segments to create and the GPIO pins used to control it. "
"See include/linux/platform_data/i2c-mux-gpio.h for details."
msgstr ""

#: ../../../i2c/muxes/i2c-mux-gpio.rst:37
msgid ""
"E.G. something like this for a MUX providing 4 bus segments controlled "
"through 3 GPIO pins::"
msgstr ""

#: ../../../i2c/muxes/i2c-mux-gpio.rst:69
msgid ""
"If you don't know the absolute GPIO pin numbers at registration time, you "
"can instead provide a chip name (.chip_name) and relative GPIO pin numbers, "
"and the i2c-mux-gpio driver will do the work for you, including deferred "
"probing if the GPIO chip isn't immediately available."
msgstr ""

#: ../../../i2c/muxes/i2c-mux-gpio.rst:76
msgid "Device Registration"
msgstr ""

#: ../../../i2c/muxes/i2c-mux-gpio.rst:78
msgid ""
"When registering your i2c-mux-gpio device, you should pass the number of any "
"GPIO pin it uses as the device ID. This guarantees that every instance has a "
"different ID."
msgstr ""

#: ../../../i2c/muxes/i2c-mux-gpio.rst:82
msgid ""
"Alternatively, if you don't need a stable device name, you can simply pass "
"PLATFORM_DEVID_AUTO as the device ID, and the platform core will assign a "
"dynamic ID to your device. If you do not know the absolute GPIO pin numbers "
"at registration time, this is even the only option."
msgstr ""
