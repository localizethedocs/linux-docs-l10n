# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../block/ioprio.rst:3
msgid "Block io priorities"
msgstr ""

#: ../../../block/ioprio.rst:7
msgid "Intro"
msgstr ""

#: ../../../block/ioprio.rst:9
msgid ""
"The io priority feature enables users to io nice processes or process "
"groups, similar to what has been possible with cpu scheduling for ages. "
"Support for io priorities is io scheduler dependent and currently supported "
"by bfq and mq-deadline."
msgstr ""

#: ../../../block/ioprio.rst:15
msgid "Scheduling classes"
msgstr ""

#: ../../../block/ioprio.rst:17
msgid ""
"Three generic scheduling classes are implemented for io priorities that "
"determine how io is served for a process."
msgstr ""

#: ../../../block/ioprio.rst:20
msgid ""
"IOPRIO_CLASS_RT: This is the realtime io class. This scheduling class is "
"given higher priority than any other in the system, processes from this "
"class are given first access to the disk every time. Thus it needs to be "
"used with some care, one io RT process can starve the entire system. Within "
"the RT class, there are 8 levels of class data that determine exactly how "
"much time this process needs the disk for on each service. In the future "
"this might change to be more directly mappable to performance, by passing in "
"a wanted data rate instead."
msgstr ""

#: ../../../block/ioprio.rst:29
msgid ""
"IOPRIO_CLASS_BE: This is the best-effort scheduling class, which is the "
"default for any process that hasn't set a specific io priority. The class "
"data determines how much io bandwidth the process will get, it's directly "
"mappable to the cpu nice levels just more coarsely implemented. 0 is the "
"highest BE prio level, 7 is the lowest. The mapping between cpu nice level "
"and io nice level is determined as: io_nice = (cpu_nice + 20) / 5."
msgstr ""

#: ../../../block/ioprio.rst:36
msgid ""
"IOPRIO_CLASS_IDLE: This is the idle scheduling class, processes running at "
"this level only get io time when no one else needs the disk. The idle class "
"has no class data, since it doesn't really apply here."
msgstr ""

#: ../../../block/ioprio.rst:41
msgid "Tools"
msgstr ""

#: ../../../block/ioprio.rst:43
msgid "See below for a sample ionice tool. Usage::"
msgstr ""

#: ../../../block/ioprio.rst:47
msgid ""
"If pid isn't given, the current process is assumed. IO priority settings are "
"inherited on fork, so you can use ionice to start the process at a given "
"level::"
msgstr ""

#: ../../../block/ioprio.rst:53
msgid ""
"will run ls at the best-effort scheduling class at the highest priority. For "
"a running process, you can give the pid instead::"
msgstr ""

#: ../../../block/ioprio.rst:58
msgid ""
"will change pid 100 to run at the realtime scheduling class, at priority 2."
msgstr ""

#: ../../../block/ioprio.rst:60
msgid "ionice.c tool::"
msgstr ""

#: ../../../block/ioprio.rst:178
msgid "March 11 2005, Jens Axboe <jens.axboe@oracle.com>"
msgstr ""
