# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../trace/coresight/coresight-perf.rst:5
msgid "CoreSight - Perf"
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:0
msgid "Author"
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:7
msgid "Carsten Haitzler <carsten.haitzler@arm.com>"
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:0
msgid "Date"
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:8
msgid "June 29th, 2022"
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:10
msgid ""
"Perf is able to locally access CoreSight trace data and store it to the "
"output perf data files. This data can then be later decoded to give the "
"instructions that were traced for debugging or profiling purposes. You can "
"log such data with a perf record command like::"
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:17
msgid ""
"This would run some test binary (testbinary) until it exits and record a "
"perf.data trace file. That file would have AUX sections if CoreSight is "
"working correctly. You can dump the content of this file as readable text "
"with a command like::"
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:24
msgid "You should find some sections of this file have AUX data blocks like::"
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:40
msgid ""
"If you see these above, then your system is tracing CoreSight data correctly."
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:43
msgid "To compile perf with CoreSight support in the tools/perf directory do::"
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:47
msgid ""
"This requires OpenCSD to build. You may install distribution packages for "
"the support such as libopencsd and libopencsd-dev or download it and build "
"yourself. Upstream OpenCSD is located at:"
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:51
msgid "https://github.com/Linaro/OpenCSD"
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:53
msgid ""
"For complete information on building perf with CoreSight support and more "
"extensive usage look at:"
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:56
msgid "https://github.com/Linaro/OpenCSD/blob/master/HOWTO.md"
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:60
msgid "Kernel CoreSight Support"
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:62
msgid ""
"You will also want CoreSight support enabled in your kernel config. Ensure "
"it is enabled with::"
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:67
msgid ""
"There are various other CoreSight options you probably also want enabled "
"like::"
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:79
msgid "Please refer to the kernel configuration help for more information."
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:82
msgid "Fine-grained tracing with AUX pause and resume"
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:84
msgid ""
"Arm CoreSight may generate a large amount of hardware trace data, which will "
"lead to overhead in recording and distract users when reviewing profiling "
"result. To mitigate the issue of excessive trace data, Perf provides AUX "
"pause and resume functionality for fine-grained tracing."
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:89
msgid ""
"The AUX pause and resume can be triggered by associated events. These events "
"can be ftrace tracepoints (including static and dynamic tracepoints) or PMU "
"events (e.g. CPU PMU cycle event). To create a perf session with AUX pause / "
"resume, three configuration terms are introduced:"
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:95
msgid ""
"\"aux-action=start-paused\": it is specified for the cs_etm PMU event to "
"launch in a paused state."
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:97
msgid ""
"\"aux-action=pause\": an associated event is specified with this term to "
"pause AUX trace."
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:99
msgid ""
"\"aux-action=resume\": an associated event is specified with this term to "
"resume AUX trace."
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:102
msgid "Example for triggering AUX pause and resume with ftrace tracepoints::"
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:106
msgid "Example for triggering AUX pause and resume with PMU event::"
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:113
msgid "Perf test - Verify kernel and userspace perf CoreSight work"
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:115
msgid ""
"When you run perf test, it will do a lot of self tests. Some of those tests "
"will cover CoreSight (only if enabled and on ARM64). You generally would run "
"perf test from the tools/perf directory in the kernel tree. Some tests will "
"check some internal perf support like:"
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:120
msgid ""
"Check Arm CoreSight trace data recording and synthesized samples Check Arm "
"SPE trace data recording and synthesized samples"
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:123
msgid ""
"Some others will actually use perf record and some test binaries that are in "
"tests/shell/coresight and will collect traces to ensure a minimum level of "
"functionality is met. The scripts that launch these tests are in the same "
"directory. These will all look like:"
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:128
msgid ""
"CoreSight / ASM Pure Loop CoreSight / Memcpy 16k 10 Threads CoreSight / "
"Thread Loop 10 Threads - Check TID etc."
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:133
msgid ""
"These perf record tests will not run if the tool binaries do not exist in "
"tests/shell/coresight/\\*/ and will be skipped. If you do not have CoreSight "
"support in hardware then either do not build perf with CoreSight support or "
"remove these binaries in order to not have these tests fail and have them "
"skip instead."
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:139
msgid ""
"These tests will log historical results in the current working directory (e."
"g. tools/perf) and will be named stats-\\*.csv like:"
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:142
msgid "stats-asm_pure_loop-out.csv stats-memcpy_thread-16k_10.csv ..."
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:146
msgid ""
"These statistic files log some aspects of the AUX data sections in the perf "
"data output counting some numbers of certain encodings (a good way to know "
"that it's working in a very simple way). One problem with CoreSight is that "
"given a large enough amount of data needing to be logged, some of it can be "
"lost due to the processor not waking up in time to read out all the data "
"from buffers etc.. You will notice that the amount of data collected can "
"vary a lot per run of perf test. If you wish to see how this changes over "
"time, simply run perf test multiple times and all these csv files will have "
"more and more data appended to it that you can later examine, graph and "
"otherwise use to figure out if things have become worse or better."
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:158
msgid ""
"This means sometimes these tests fail as they don't capture all the data "
"needed. This is about tracking quality and amount of data produced over time "
"and to see when changes to the Linux kernel improve quality of traces."
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:163
msgid ""
"Be aware that some of these tests take quite a while to run, specifically in "
"processing the perf data file and dumping contents to then examine what is "
"inside."
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:167
msgid ""
"You can change where these csv logs are stored by setting the "
"PERF_TEST_CORESIGHT_STATDIR environment variable before running perf test "
"like::"
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:174
msgid ""
"They will also store resulting perf output data in the current directory for "
"later inspection like::"
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:181
msgid ""
"You can alter where the perf data files are stored by setting the "
"PERF_TEST_CORESIGHT_DATADIR environment variable such as::"
msgstr ""

#: ../../../trace/coresight/coresight-perf.rst:187
msgid ""
"You may wish to set these above environment variables if you wish to keep "
"the output of tests outside of the current working directory for longer term "
"storage and examination."
msgstr ""
