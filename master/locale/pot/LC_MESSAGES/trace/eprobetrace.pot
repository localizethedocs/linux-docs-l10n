# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../trace/eprobetrace.rst:5
msgid "Eprobe - Event-based Probe Tracing"
msgstr ""

#: ../../../trace/eprobetrace.rst:0
msgid "Author"
msgstr ""

#: ../../../trace/eprobetrace.rst:7
msgid "Steven Rostedt <rostedt@goodmis.org>"
msgstr ""

#: ../../../trace/eprobetrace.rst:9
msgid "Written for v6.17"
msgstr ""

#: ../../../trace/eprobetrace.rst:12
msgid "Overview"
msgstr ""

#: ../../../trace/eprobetrace.rst:14
msgid ""
"Eprobes are dynamic events that are placed on existing events to either "
"dereference a field that is a pointer, or simply to limit what fields are "
"recorded in the trace event."
msgstr ""

#: ../../../trace/eprobetrace.rst:18
msgid ""
"Eprobes depend on kprobe events so to enable this feature, build your kernel "
"with CONFIG_EPROBE_EVENTS=y."
msgstr ""

#: ../../../trace/eprobetrace.rst:21
msgid "Eprobes are created via the /sys/kernel/tracing/dynamic_events file."
msgstr ""

#: ../../../trace/eprobetrace.rst:24
msgid "Synopsis of eprobe_events"
msgstr ""

#: ../../../trace/eprobetrace.rst:51
msgid "Types"
msgstr ""

#: ../../../trace/eprobetrace.rst:52
msgid ""
"The FETCHARGS above is very similar to the kprobe events as described in "
"Documentation/trace/kprobetrace.rst."
msgstr ""

#: ../../../trace/eprobetrace.rst:55
msgid ""
"The difference between eprobes and kprobes FETCHARGS is that eprobes has a "
"$FIELD command that returns the content of the event field of the event that "
"is attached. Eprobes do not have access to registers, stacks and function "
"arguments that kprobes has."
msgstr ""

#: ../../../trace/eprobetrace.rst:60
msgid ""
"If a field argument is a pointer, it may be dereferenced just like a memory "
"address using the FETCHARGS syntax."
msgstr ""

#: ../../../trace/eprobetrace.rst:65
msgid "Attaching to dynamic events"
msgstr ""

#: ../../../trace/eprobetrace.rst:67
msgid ""
"Eprobes may attach to dynamic events as well as to normal events. It may "
"attach to a kprobe event, a synthetic event or a fprobe event. This is "
"useful if the type of a field needs to be changed. See Example 2 below."
msgstr ""

#: ../../../trace/eprobetrace.rst:72
msgid "Usage examples"
msgstr ""

#: ../../../trace/eprobetrace.rst:75
msgid "Example 1"
msgstr ""

#: ../../../trace/eprobetrace.rst:77
msgid ""
"The basic usage of eprobes is to limit the data that is being recorded into "
"the tracing buffer. For example, a common event to trace is the sched_switch "
"trace event. That has a format of::"
msgstr ""

#: ../../../trace/eprobetrace.rst:94
msgid ""
"The first four fields are common to all events and can not be limited. But "
"the rest of the event has 60 bytes of information. It records the names of "
"the previous and next tasks being scheduled out and in, as well as their "
"pids and priorities. It also records the state of the previous task. If only "
"the pids of the tasks are of interest, why waste the ring buffer with all "
"the other fields?"
msgstr ""

#: ../../../trace/eprobetrace.rst:101
msgid ""
"An eprobe can limit what gets recorded. Note, it does not help in "
"performance, as all the fields are recorded in a temporary buffer to process "
"the eprobe. ::"
msgstr ""

#: ../../../trace/eprobetrace.rst:136
msgid ""
"Note, without adding the \"u32\" after the prev_pid and next_pid, the values "
"would default showing in hexadecimal."
msgstr ""

#: ../../../trace/eprobetrace.rst:140
msgid "Example 2"
msgstr ""

#: ../../../trace/eprobetrace.rst:142
msgid ""
"If a specific system call is to be recorded but the syscalls events are not "
"enabled, the raw_syscalls can still be used (syscalls are system call events "
"are not normal events, but are created from the raw_syscalls events within "
"the kernel). In order to trace the openat system call, one can create an "
"event probe on top of the raw_syscalls event: ::"
msgstr ""

#: ../../../trace/eprobetrace.rst:164
msgid "From the source code, the sys_openat() has: ::"
msgstr ""

#: ../../../trace/eprobetrace.rst:172
msgid "The path is the second parameter, and that is what is wanted. ::"
msgstr ""

#: ../../../trace/eprobetrace.rst:177
msgid ""
"This is being run on x86_64 where the word size is 8 bytes and the openat "
"system call __NR_openat is set at 257. ::"
msgstr ""

#: ../../../trace/eprobetrace.rst:183
msgid "Now enable the event and look at the trace. ::"
msgstr ""

#: ../../../trace/eprobetrace.rst:206
msgid ""
"The filename shows \"(fault)\". This is likely because the filename has not "
"been pulled into memory yet and currently trace events cannot fault in "
"memory that is not present. When an eprobe tries to read memory that has not "
"been faulted in yet, it will show the \"(fault)\" text."
msgstr ""

#: ../../../trace/eprobetrace.rst:211
msgid ""
"To get around this, as the kernel will likely pull in this filename and make "
"it present, attaching it to a synthetic event that can pass the address of "
"the filename from the entry of the event to the end of the event, this can "
"be used to show the filename when the system call returns."
msgstr ""

#: ../../../trace/eprobetrace.rst:216
msgid "Remove the old eprobe::"
msgstr ""

#: ../../../trace/eprobetrace.rst:221
msgid "This time make an eprobe where the address of the filename is saved::"
msgstr ""

#: ../../../trace/eprobetrace.rst:225
msgid ""
"Create a synthetic event that passes the address of the filename to the end "
"of the event::"
msgstr ""

#: ../../../trace/eprobetrace.rst:232
msgid ""
"Now that the address of the filename has been passed to the end of the "
"system call, create another eprobe to attach to the exit event to show the "
"string::"
msgstr ""

#: ../../../trace/eprobetrace.rst:258
msgid "Example 3"
msgstr ""

#: ../../../trace/eprobetrace.rst:260
msgid ""
"If syscall trace events are available, the above would not need the first "
"eprobe, but it would still need the last one::"
msgstr ""

#: ../../../trace/eprobetrace.rst:269
msgid "And this would produce the same result as Example 2."
msgstr ""
