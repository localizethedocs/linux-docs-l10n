# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../trace/uprobetracer.rst:3
msgid "Uprobe-tracer: Uprobe-based Event Tracing"
msgstr ""

#: ../../../trace/uprobetracer.rst:0
msgid "Author"
msgstr ""

#: ../../../trace/uprobetracer.rst:5
msgid "Srikar Dronamraju"
msgstr ""

#: ../../../trace/uprobetracer.rst:9
msgid "Overview"
msgstr ""

#: ../../../trace/uprobetracer.rst:10
msgid ""
"Uprobe based trace events are similar to kprobe based trace events. To "
"enable this feature, build your kernel with CONFIG_UPROBE_EVENTS=y."
msgstr ""

#: ../../../trace/uprobetracer.rst:13
msgid ""
"Similar to the kprobe-event tracer, this doesn't need to be activated via "
"current_tracer. Instead of that, add probe points via /sys/kernel/tracing/"
"uprobe_events, and enable it via /sys/kernel/tracing/events/uprobes/<EVENT>/"
"enable."
msgstr ""

#: ../../../trace/uprobetracer.rst:18
msgid ""
"However unlike kprobe-event tracer, the uprobe event interface expects the "
"user to calculate the offset of the probepoint in the object."
msgstr ""

#: ../../../trace/uprobetracer.rst:21
msgid ""
"You can also use /sys/kernel/tracing/dynamic_events instead of "
"uprobe_events. That interface will provide unified access to other dynamic "
"events too."
msgstr ""

#: ../../../trace/uprobetracer.rst:26
msgid "Synopsis of uprobe_tracer"
msgstr ""

#: ../../../trace/uprobetracer.rst:62
msgid "Types"
msgstr ""

#: ../../../trace/uprobetracer.rst:63
msgid ""
"Several types are supported for fetch-args. Uprobe tracer will access memory "
"by given type. Prefix 's' and 'u' means those types are signed and unsigned "
"respectively. 'x' prefix implies it is unsigned. Traced arguments are shown "
"in decimal ('s' and 'u') or hexadecimal ('x'). Without type casting, 'x32' "
"or 'x64' is used depends on the architecture (e.g. x86-32 uses x32, and "
"x86-64 uses x64). String type is a special type, which fetches a \"null-"
"terminated\" string from user space. Bitfield is another special type, which "
"takes 3 parameters, bit-width, bit- offset, and container-size (usually 32). "
"The syntax is::"
msgstr ""

#: ../../../trace/uprobetracer.rst:76
msgid "For $comm, the default type is \"string\"; any other type is invalid."
msgstr ""

#: ../../../trace/uprobetracer.rst:80
msgid "Event Profiling"
msgstr ""

#: ../../../trace/uprobetracer.rst:81
msgid ""
"You can check the total number of probe hits per event via /sys/kernel/"
"tracing/uprobe_profile. The first column is the filename, the second is the "
"event name, the third is the number of probe hits."
msgstr ""

#: ../../../trace/uprobetracer.rst:86
msgid "Usage examples"
msgstr ""

#: ../../../trace/uprobetracer.rst:87
msgid ""
"Add a probe as a new uprobe event, write a new definition to uprobe_events "
"as below (sets a uprobe at an offset of 0x4245c0 in the executable /bin/"
"bash)::"
msgstr ""

#: ../../../trace/uprobetracer.rst:92
msgid "Add a probe as a new uretprobe event::"
msgstr ""

#: ../../../trace/uprobetracer.rst:96
msgid "Unset registered event::"
msgstr ""

#: ../../../trace/uprobetracer.rst:100
msgid "Print out the events that are registered::"
msgstr ""

#: ../../../trace/uprobetracer.rst:104
msgid "Clear all events::"
msgstr ""

#: ../../../trace/uprobetracer.rst:108
msgid ""
"Following example shows how to dump the instruction pointer and %ax register "
"at the probed text address. Probe zfree function in /bin/zsh::"
msgstr ""

#: ../../../trace/uprobetracer.rst:117
msgid ""
"0x46420 is the offset of zfree in object /bin/zsh that is loaded at "
"0x00400000. Hence the command to uprobe would be::"
msgstr ""

#: ../../../trace/uprobetracer.rst:122
msgid "And the same for the uretprobe would be::"
msgstr ""

#: ../../../trace/uprobetracer.rst:126
msgid ""
"User has to explicitly calculate the offset of the probe-point in the object."
msgstr ""

#: ../../../trace/uprobetracer.rst:129
msgid ""
"We can see the events that are registered by looking at the uprobe_events "
"file. ::"
msgstr ""

#: ../../../trace/uprobetracer.rst:136
msgid ""
"Format of events can be seen by viewing the file events/uprobes/zfree_entry/"
"format. ::"
msgstr ""

#: ../../../trace/uprobetracer.rst:155
msgid ""
"Right after definition, each event is disabled by default. For tracing these "
"events, you need to enable it by::"
msgstr ""

#: ../../../trace/uprobetracer.rst:160
msgid "Lets start tracing, sleep for some time and stop tracing. ::"
msgstr ""

#: ../../../trace/uprobetracer.rst:167
msgid "Also, you can disable the event by::"
msgstr ""

#: ../../../trace/uprobetracer.rst:171
msgid ""
"And you can see the traced information via /sys/kernel/tracing/trace. ::"
msgstr ""

#: ../../../trace/uprobetracer.rst:184
msgid ""
"Output shows us uprobe was triggered for a pid 24842 with ip being 0x446420 "
"and contents of ax register being 79. And uretprobe was triggered with ip at "
"0x446540 with counterpart function entry at 0x446420."
msgstr ""
