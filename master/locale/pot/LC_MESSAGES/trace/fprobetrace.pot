# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../trace/fprobetrace.rst:5
msgid "Fprobe-based Event Tracing"
msgstr ""

#: ../../../trace/fprobetrace.rst:10
msgid "Overview"
msgstr ""

#: ../../../trace/fprobetrace.rst:12
msgid ""
"Fprobe event is similar to the kprobe event, but limited to probe on the "
"function entry and exit only. It is good enough for many use cases which "
"only traces some specific functions."
msgstr ""

#: ../../../trace/fprobetrace.rst:16
msgid ""
"This document also covers tracepoint probe events (tprobe) since this is "
"also works only on the tracepoint entry. User can trace a part of tracepoint "
"argument, or the tracepoint without trace-event, which is not exposed on "
"tracefs."
msgstr ""

#: ../../../trace/fprobetrace.rst:21
msgid ""
"As same as other dynamic events, fprobe events and tracepoint probe events "
"are defined via `dynamic_events` interface file on tracefs."
msgstr ""

#: ../../../trace/fprobetrace.rst:25
msgid "Synopsis of fprobe-events"
msgstr ""

#: ../../../trace/fprobetrace.rst:71
msgid ""
"For the details of TYPE, see :ref:`kprobetrace documentation "
"<kprobetrace_types>`."
msgstr ""

#: ../../../trace/fprobetrace.rst:74
msgid "Function arguments at exit"
msgstr ""

#: ../../../trace/fprobetrace.rst:75
msgid ""
"Function arguments can be accessed at exit probe using $arg<N> fetcharg. "
"This is useful to record the function parameter and return value at once, "
"and trace the difference of structure fields (for debugging a function "
"whether it correctly updates the given data structure or not) See the :ref:"
"`sample<fprobetrace_exit_args_sample>` below for how it works."
msgstr ""

#: ../../../trace/fprobetrace.rst:82
msgid "BTF arguments"
msgstr ""

#: ../../../trace/fprobetrace.rst:83
msgid ""
"BTF (BPF Type Format) argument allows user to trace function and tracepoint "
"parameters by its name instead of ``$argN``. This feature is available if "
"the kernel is configured with CONFIG_BPF_SYSCALL and CONFIG_DEBUG_INFO_BTF. "
"If user only specify the BTF argument, the event's argument name is also "
"automatically set by the given name. ::"
msgstr ""

#: ../../../trace/fprobetrace.rst:93
msgid ""
"It also chooses the fetch type from BTF information. For example, in the "
"above example, the ``count`` is unsigned long, and the ``pos`` is a pointer. "
"Thus, both are converted to 64bit unsigned long, but only ``pos`` has "
"\"%Lx\" print-format as below ::"
msgstr ""

#: ../../../trace/fprobetrace.rst:113
msgid ""
"If user unsures the name of arguments, ``$arg*`` will be helpful. The "
"``$arg*`` is expanded to all function arguments of the function or the "
"tracepoint. ::"
msgstr ""

#: ../../../trace/fprobetrace.rst:120
msgid ""
"BTF also affects the ``$retval``. If user doesn't set any type, the retval "
"type is automatically picked from the BTF. If the function returns ``void``, "
"``$retval`` is rejected."
msgstr ""

#: ../../../trace/fprobetrace.rst:124
msgid ""
"You can access the data fields of a data structure using allow operator ``-"
">`` (for pointer type) and dot operator ``.`` (for data structure type.)::"
msgstr ""

#: ../../../trace/fprobetrace.rst:129
msgid ""
"The field access operators, ``->`` and ``.`` can be combined for accessing "
"deeper members and other structure members pointed by the member. e.g. ``foo-"
">bar.baz->qux`` If there is non-name union member, you can directly access "
"it as the C code does. For example::"
msgstr ""

#: ../../../trace/fprobetrace.rst:141
msgid "To access ``a`` and ``b``, use ``foo->a`` and ``foo->b`` in this case."
msgstr ""

#: ../../../trace/fprobetrace.rst:143
msgid ""
"This data field access is available for the return value via ``$retval``, e."
"g. ``$retval->name``."
msgstr ""

#: ../../../trace/fprobetrace.rst:146
msgid ""
"For these BTF arguments and fields, ``:string`` and ``:ustring`` change the "
"behavior. If these are used for BTF argument or field, it checks whether the "
"BTF type of the argument or the data field is ``char *`` or ``char []``, or "
"not.  If not, it rejects applying the string types. Also, with the BTF "
"support, you don't need a memory dereference operator (``+0(PTR)``) for "
"accessing the string pointed by a ``PTR``. It automatically adds the memory "
"dereference operator according to the BTF type. e.g. ::"
msgstr ""

#: ../../../trace/fprobetrace.rst:157
msgid ""
"The ``prev->comm`` is an embedded char array in the data structure, and "
"``$retval->name`` is a char pointer in the data structure. But in both "
"cases, you can use ``:string`` type to get the string."
msgstr ""

#: ../../../trace/fprobetrace.rst:163
msgid "Usage examples"
msgstr ""

#: ../../../trace/fprobetrace.rst:164
msgid ""
"Here is an example to add fprobe events on ``vfs_read()`` function entry and "
"exit, with BTF arguments. ::"
msgstr ""

#: ../../../trace/fprobetrace.rst:186
msgid ""
"You can see all function arguments and return values are recorded as signed "
"int."
msgstr ""

#: ../../../trace/fprobetrace.rst:188
msgid ""
"Also, here is an example of tracepoint events on ``sched_switch`` "
"tracepoint. To compare the result, this also enables the ``sched_switch`` "
"traceevent too. ::"
msgstr ""

#: ../../../trace/fprobetrace.rst:208
msgid ""
"As you can see, the ``sched_switch`` trace-event shows *cooked* parameters, "
"on the other hand, the ``sched_switch`` tracepoint probe event shows *raw* "
"parameters. This means you can access any field values in the task structure "
"pointed by the ``prev`` and ``next`` arguments."
msgstr ""

#: ../../../trace/fprobetrace.rst:213
msgid ""
"For example, usually ``task_struct::start_time`` is not traced, but with "
"this traceprobe event, you can trace that field as below. ::"
msgstr ""

#: ../../../trace/fprobetrace.rst:232
msgid ""
"The return probe allows us to access the results of some functions, which "
"returns the error code and its results are passed via function parameter, "
"such as an structure-initialization function."
msgstr ""

#: ../../../trace/fprobetrace.rst:236
msgid ""
"For example, vfs_open() will link the file structure to the inode and update "
"mode. You can trace that changes with return probe. ::"
msgstr ""

#: ../../../trace/fprobetrace.rst:251
msgid ""
"You can see the `file::f_mode` and `file::f_inode` are updated in "
"`vfs_open()`."
msgstr ""
