# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-06 15:47+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../gpu/xe/xe_devcoredump.rst:5
msgid "Xe Device Coredump"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:7: drivers/gpu/drm/xe/xe_devcoredump.c:31
msgid ""
"Xe uses dev_coredump infrastructure for exposing the crash errors in a "
"standardized way. Once a crash occurs, devcoredump exposes a temporary node "
"under ``/sys/class/devcoredump/devcd<m>/``. The same node is also accessible "
"in ``/sys/class/drm/card<n>/device/devcoredump/``. The ``failing_device`` "
"symlink points to the device that crashed and created the coredump."
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:7: drivers/gpu/drm/xe/xe_devcoredump.c:38
msgid ""
"The following characteristics are observed by xe when creating a device "
"coredump:"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:7: drivers/gpu/drm/xe/xe_devcoredump.c:41
msgid "**Snapshot at hang**:"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:7: drivers/gpu/drm/xe/xe_devcoredump.c:42
msgid ""
"The 'data' file contains a snapshot of the HW and driver states at the time "
"the hang happened. Due to the driver recovering from resets/crashes, it may "
"not correspond to the state of the system when the file is read by userspace."
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:7: drivers/gpu/drm/xe/xe_devcoredump.c:47
msgid "**Coredump release**:"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:7: drivers/gpu/drm/xe/xe_devcoredump.c:48
msgid ""
"After a coredump is generated, it stays in kernel memory until released by "
"userspace by writing anything to it, or after an internal timer expires. The "
"exact timeout may vary and should not be relied upon. Example to release a "
"coredump:"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:7: drivers/gpu/drm/xe/xe_devcoredump.c:57
msgid "**First failure only**:"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:7: drivers/gpu/drm/xe/xe_devcoredump.c:58
msgid ""
"In general, the first hang is the most critical one since the following "
"hangs can be a consequence of the initial hang. For this reason a snapshot "
"is taken only for the first failure. Until the devcoredump is released by "
"userspace or kernel, all subsequent hangs do not override the snapshot nor "
"create new ones. Devcoredump has a delayed work queue that will eventually "
"delete the file node and free all the dump information."
msgstr ""

#: ../../../gpu/xe/xe_devcoredump.rst:11
msgid "Internal API"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:175
msgid "Read data from the Xe device coredump snapshot"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:179
#: drivers/gpu/drm/xe/xe_devcoredump.c:376
#: drivers/gpu/drm/xe/xe_devcoredump.c:442
msgid "**Parameters**"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:181
msgid "``char *buffer``"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:176
msgid "Destination buffer to copy the coredump data into"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:178
msgid "``loff_t offset``"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:177
msgid "Offset in the coredump data to start reading from"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:179
msgid "``size_t count``"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:178
msgid "Number of bytes to read"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:180
msgid "``void *data``"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:179
msgid "Pointer to the xe_devcoredump structure"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:181
msgid "``size_t datalen``"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:180
msgid "Length of the data (unused)"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:3
#: drivers/gpu/drm/xe/xe_devcoredump.c:182
#: drivers/gpu/drm/xe/xe_devcoredump.c:458
msgid "**Description**"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:181
msgid ""
"Reads a chunk of the coredump snapshot data into the provided buffer. If the "
"devcoredump is smaller than 1.5 GB (XE_DEVCOREDUMP_CHUNK_MAX), it is read "
"directly from a pre-written buffer. For larger devcoredumps, the pre-written "
"buffer must be periodically repopulated from the snapshot state due to "
"kmalloc size limitations."
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:187
msgid "**Return**"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:188
msgid "Number of bytes copied on success, or a negative error code on failure."
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:372
msgid "Take the required snapshots and initialize coredump device."
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:378
msgid "``struct xe_exec_queue *q``"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:373
msgid "The faulty xe_exec_queue, where the issue was detected."
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:375
msgid "``struct xe_sched_job *job``"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:374
msgid "The faulty xe_sched_job, where the issue was detected."
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:376
msgid "``const char *fmt``"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:375
msgid "Printf format + args to describe the reason for the core dump"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:377
msgid "``...``"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:1
msgid "variable arguments"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:376
msgid ""
"This function should be called at the crash time within the serialized "
"gt_reset. It is skipped if we still have the core dump device available with "
"the information of the 'first' snapshot."
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:438
msgid "print a BLOB to some useful location in ASCII85"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:444
msgid "``struct drm_printer *p``"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:449
msgid "the printer object to output to"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:451
msgid "``const char *prefix``"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:450
msgid "optional prefix to add to output string"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:452
msgid "``char suffix``"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:451
msgid ""
"optional suffix to add at the end. 0 disables it and is not added to the "
"output, which is useful when using multiple calls to dump data to **p**"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:455
msgid "``const void *blob``"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:454
msgid "the Binary Large OBject to dump out"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:456
msgid "``size_t offset``"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:455
msgid ""
"offset in bytes to skip from the front of the BLOB, must be a multiple of "
"sizeof(u32)"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:457
msgid "``size_t size``"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:456
msgid "the size in bytes of the BLOB, must be a multiple of sizeof(u32)"
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:439
msgid ""
"The output is split into multiple calls to drm_puts() because some print "
"targets, e.g. dmesg, cannot handle arbitrarily long lines. These targets may "
"add newlines, as is the case with dmesg: each drm_puts() call creates a "
"separate line."
msgstr ""

#: ../../../gpu/xe/xe_devcoredump:13: drivers/gpu/drm/xe/xe_devcoredump.c:444
msgid ""
"There is also a scheduler yield call to prevent the 'task has been stuck for "
"120s' kernel hang check feature from firing when printing to a slow target "
"such as dmesg over a serial port."
msgstr ""
