# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../gpu/drm-kms-helpers.rst:3
msgid "Mode Setting Helper Functions"
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:5
msgid ""
"The DRM subsystem aims for a strong separation between core code and helper "
"libraries. Core code takes care of general setup and teardown and decoding "
"userspace requests to kernel internal objects. Everything else is handled by "
"a large set of helper libraries, which can be combined freely to pick and "
"choose for each driver what fits, and avoid shared code where special "
"behaviour is needed."
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:12
msgid ""
"This distinction between core code and helpers is especially strong in the "
"modesetting code, where there's a shared userspace ABI for all drivers. This "
"is in contrast to the render side, where pretty much everything (with very "
"few exceptions) can be considered optional helper code."
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:17
msgid "There are a few areas these helpers can grouped into:"
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:19
msgid ""
"Helpers to implement modesetting. The important ones here are the atomic "
"helpers. Old drivers still often use the legacy CRTC helpers. They both "
"share the same set of common helper vtables. For really simple drivers "
"(anything that would have been a great fit in the deprecated fbdev "
"subsystem) there's also the simple display pipe helpers."
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:25
msgid ""
"There's a big pile of helpers for handling outputs. First the generic bridge "
"helpers for handling encoder and transcoder IP blocks. Second the panel "
"helpers for handling panel-related information and logic. Plus then a big "
"set of helpers for the various sink standards (DisplayPort, HDMI, MIPI DSI). "
"Finally there's also generic helpers for handling output probing, and for "
"dealing with EDIDs."
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:32
msgid ""
"The last group of helpers concerns itself with the frontend side of a "
"display pipeline: Planes, handling rectangles for visibility checking and "
"scissoring, flip queues and assorted bits."
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:37
msgid "Modeset Helper Reference for Common Vtables"
msgstr ""

#: ../../../gpu/drm-kms-helpers:39: include/drm/drm_modeset_helper_vtables.h:36
msgid ""
"The DRM mode setting helper functions are common code for drivers to use if "
"they wish.  Drivers are not forced to use this code in their implementations "
"but it would be useful if the code they do use at least provides a "
"consistent interface and operation to userspace. Therefore it is highly "
"recommended to use the provided helpers as much as possible."
msgstr ""

#: ../../../gpu/drm-kms-helpers:39: include/drm/drm_modeset_helper_vtables.h:42
msgid ""
"Because there is only one pointer per modeset object to hold a vfunc table "
"for helper libraries they are by necessity shared among the different "
"helpers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:39: include/drm/drm_modeset_helper_vtables.h:46
msgid ""
"To make this clear all the helper vtables are pulled together in this "
"location here."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42: include/drm/drm_modeset_helper_vtables.h:61
msgid "helper operations for CRTCs"
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:20
#: include/drm/drm_simple_kms_helper.h:236 ../../../gpu/drm-kms-helpers:113:
#: include/drm/drm_fb_helper.h:45 include/drm/drm_fb_helper.h:71
#: include/drm/drm_fb_helper.h:119 ../../../gpu/drm-kms-helpers:182:
#: include/drm/drm_bridge.h:65 include/drm/drm_bridge.h:999
#: include/drm/drm_bridge.h:1114 ../../../gpu/drm-kms-helpers:215:
#: include/drm/drm_panel.h:48 include/drm/drm_panel.h:193
#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1712
#: include/drm/display/drm_dp.h:1730 ../../../gpu/drm-kms-helpers:266:
#: include/drm/display/drm_dp_helper.h:79
#: include/drm/display/drm_dp_helper.h:106
#: include/drm/display/drm_dp_helper.h:316
#: include/drm/display/drm_dp_helper.h:336
#: include/drm/display/drm_dp_helper.h:350
#: include/drm/display/drm_dp_helper.h:762
#: include/drm/display/drm_dp_helper.h:843
#: include/drm/display/drm_dp_helper.h:932 ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:64
#: include/drm/display/drm_dp_mst_helper.h:187
#: include/drm/display/drm_dp_mst_helper.h:534
#: include/drm/display/drm_dp_mst_helper.h:593
#: include/drm/display/drm_dp_mst_helper.h:637
#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:27
#: include/drm/drm_mipi_dbi.h:85 ../../../gpu/drm-kms-helpers:345:
#: include/drm/drm_mipi_dsi.h:29 include/drm/drm_mipi_dsi.h:54
#: include/drm/drm_mipi_dsi.h:72 include/drm/drm_mipi_dsi.h:104
#: include/drm/drm_mipi_dsi.h:156 include/drm/drm_mipi_dsi.h:171
#: include/drm/drm_mipi_dsi.h:204 include/drm/drm_mipi_dsi.h:442
#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:49
#: include/drm/display/drm_dsc.h:71 include/drm/display/drm_dsc.h:277
#: include/drm/display/drm_dsc.h:587 ../../../gpu/drm-kms-helpers:407:
#: include/linux/hdmi.h:392 include/linux/hdmi.h:427
#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:41
#: ../../../gpu/drm-kms-helpers:42: include/drm/drm_modeset_helper_vtables.h:65
#: include/drm/drm_modeset_helper_vtables.h:511
#: include/drm/drm_modeset_helper_vtables.h:860
#: include/drm/drm_modeset_helper_vtables.h:1200
#: include/drm/drm_modeset_helper_vtables.h:1508
#: ../../../gpu/drm-kms-helpers:431: include/drm/drm_flip_work.h:58
#: ../../../gpu/drm-kms-helpers:479: include/drm/drm_privacy_screen_driver.h:24
#: include/drm/drm_privacy_screen_driver.h:49 ../../../gpu/drm-kms-helpers:482:
#: include/drm/drm_privacy_screen_machine.h:19 ../../../gpu/drm-kms-helpers:89:
#: include/drm/drm_gem_atomic_helper.h:47
msgid "**Definition**::"
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:42
#: include/drm/drm_simple_kms_helper.h:246 ../../../gpu/drm-kms-helpers:113:
#: include/drm/drm_fb_helper.h:56 include/drm/drm_fb_helper.h:79
#: include/drm/drm_fb_helper.h:143 ../../../gpu/drm-kms-helpers:182:
#: include/drm/drm_bridge.h:112 include/drm/drm_bridge.h:1008
#: include/drm/drm_bridge.h:1151 ../../../gpu/drm-kms-helpers:215:
#: include/drm/drm_panel.h:61 include/drm/drm_panel.h:210
#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1721
#: include/drm/display/drm_dp.h:1737 ../../../gpu/drm-kms-helpers:266:
#: include/drm/display/drm_dp_helper.h:92
#: include/drm/display/drm_dp_helper.h:120
#: include/drm/display/drm_dp_helper.h:326
#: include/drm/display/drm_dp_helper.h:345
#: include/drm/display/drm_dp_helper.h:372
#: include/drm/display/drm_dp_helper.h:769
#: include/drm/display/drm_dp_helper.h:855
#: include/drm/display/drm_dp_helper.h:943 ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:93
#: include/drm/display/drm_dp_mst_helper.h:206
#: include/drm/display/drm_dp_mst_helper.h:548
#: include/drm/display/drm_dp_mst_helper.h:608
#: include/drm/display/drm_dp_mst_helper.h:678
#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:42
#: include/drm/drm_mipi_dbi.h:104 ../../../gpu/drm-kms-helpers:345:
#: include/drm/drm_mipi_dsi.h:41 include/drm/drm_mipi_dsi.h:63
#: include/drm/drm_mipi_dsi.h:80 include/drm/drm_mipi_dsi.h:112
#: include/drm/drm_mipi_dsi.h:164 include/drm/drm_mipi_dsi.h:187
#: include/drm/drm_mipi_dsi.h:211 include/drm/drm_mipi_dsi.h:451
#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:57
#: include/drm/display/drm_dsc.h:118 include/drm/display/drm_dsc.h:329
#: include/drm/display/drm_dsc.h:594 ../../../gpu/drm-kms-helpers:407:
#: include/linux/hdmi.h:401 include/linux/hdmi.h:438
#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:47
#: ../../../gpu/drm-kms-helpers:42: include/drm/drm_modeset_helper_vtables.h:86
#: include/drm/drm_modeset_helper_vtables.h:529
#: include/drm/drm_modeset_helper_vtables.h:877
#: include/drm/drm_modeset_helper_vtables.h:1217
#: include/drm/drm_modeset_helper_vtables.h:1515
#: ../../../gpu/drm-kms-helpers:431: include/drm/drm_flip_work.h:69
#: ../../../gpu/drm-kms-helpers:479: include/drm/drm_privacy_screen_driver.h:31
#: include/drm/drm_privacy_screen_driver.h:62 ../../../gpu/drm-kms-helpers:482:
#: include/drm/drm_privacy_screen_machine.h:28 ../../../gpu/drm-kms-helpers:89:
#: include/drm/drm_gem_atomic_helper.h:56
msgid "**Members**"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42: include/drm/drm_modeset_helper_vtables.h:68
#: include/drm/drm_modeset_helper_vtables.h:514
msgid "``dpms``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42: include/drm/drm_modeset_helper_vtables.h:69
msgid ""
"Callback to control power levels on the CRTC.  If the mode passed in is "
"unsupported, the provider must use the next lowest power level. This is used "
"by the legacy CRTC helpers to implement DPMS functionality in "
"drm_helper_connector_dpms()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42: include/drm/drm_modeset_helper_vtables.h:74
msgid ""
"This callback is also used to disable a CRTC by calling it with "
"DRM_MODE_DPMS_OFF if the **disable** hook isn't used."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42: include/drm/drm_modeset_helper_vtables.h:77
msgid ""
"This callback is used by the legacy CRTC helpers.  Atomic helpers also "
"support using this hook for enabling and disabling a CRTC to facilitate "
"transitions to atomic, but it is deprecated. Instead **atomic_enable** and "
"**atomic_disable** should be used."
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:75
#: ../../../gpu/drm-kms-helpers:42: include/drm/drm_modeset_helper_vtables.h:86
#: include/drm/drm_modeset_helper_vtables.h:610
msgid "``prepare``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42: include/drm/drm_modeset_helper_vtables.h:87
msgid ""
"This callback should prepare the CRTC for a subsequent modeset, which in "
"practice means the driver should disable the CRTC if it is running. Most "
"drivers ended up implementing this by calling their **dpms** hook with "
"DRM_MODE_DPMS_OFF."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42: include/drm/drm_modeset_helper_vtables.h:92
msgid ""
"This callback is used by the legacy CRTC helpers.  Atomic helpers also "
"support using this hook for disabling a CRTC to facilitate transitions to "
"atomic, but it is deprecated. Instead **atomic_disable** should be used."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:101
#: include/drm/drm_modeset_helper_vtables.h:625
msgid "``commit``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:102
msgid ""
"This callback should commit the new mode on the CRTC after a modeset, which "
"in practice means the driver should enable the CRTC.  Most drivers ended up "
"implementing this by calling their **dpms** hook with DRM_MODE_DPMS_ON."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:107
msgid ""
"This callback is used by the legacy CRTC helpers.  Atomic helpers also "
"support using this hook for enabling a CRTC to facilitate transitions to "
"atomic, but it is deprecated. Instead **atomic_enable** should be used."
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:21
#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:101
#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:116
#: include/drm/drm_modeset_helper_vtables.h:532
#: include/drm/drm_modeset_helper_vtables.h:936
msgid "``mode_valid``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:117
msgid ""
"This callback is used to check if a specific mode is valid in this crtc. "
"This should be implemented if the crtc has some sort of restriction in the "
"modes it can display. For example, a given crtc may be responsible to set a "
"clock value. If the clock can not produce all the values for the available "
"modes then this callback can be used to restrict the number of modes to only "
"the ones that can be displayed."
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:33
#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:110
#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:125
#: include/drm/drm_modeset_helper_vtables.h:541
msgid ""
"This hook is used by the probe helpers to filter the mode list in "
"drm_helper_probe_single_connector_modes(), and it is used by the atomic "
"helpers to validate modes supplied by userspace in "
"drm_atomic_helper_check_modeset()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:38
#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:78
#: include/drm/drm_panel.h:87 include/drm/drm_panel.h:96
#: include/drm/drm_panel.h:105 include/drm/drm_panel.h:125
#: include/drm/drm_panel.h:135 ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:130
#: include/drm/drm_modeset_helper_vtables.h:421
#: include/drm/drm_modeset_helper_vtables.h:441
#: include/drm/drm_modeset_helper_vtables.h:546
#: include/drm/drm_modeset_helper_vtables.h:944
msgid "This function is optional."
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:40
#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:117
#: include/drm/drm_bridge.h:152 include/drm/drm_bridge.h:206
#: include/drm/drm_bridge.h:247 include/drm/drm_bridge.h:274
#: include/drm/drm_bridge.h:313 include/drm/drm_bridge.h:350
#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:132
#: include/drm/drm_modeset_helper_vtables.h:162
#: include/drm/drm_modeset_helper_vtables.h:292
#: include/drm/drm_modeset_helper_vtables.h:337
#: include/drm/drm_modeset_helper_vtables.h:548
#: include/drm/drm_modeset_helper_vtables.h:577
#: include/drm/drm_modeset_helper_vtables.h:654
#: include/drm/drm_modeset_helper_vtables.h:770
#: include/drm/drm_modeset_helper_vtables.h:818
#: include/drm/drm_modeset_helper_vtables.h:946
#: include/drm/drm_modeset_helper_vtables.h:1021
#: include/drm/drm_modeset_helper_vtables.h:1053
#: include/drm/drm_modeset_helper_vtables.h:1086
#: include/drm/drm_modeset_helper_vtables.h:1308
msgid "NOTE:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:134
#: include/drm/drm_modeset_helper_vtables.h:550
msgid ""
"Since this function is both called from the check phase of an atomic commit, "
"and the mode validation in the probe paths it is not allowed to look at "
"anything else but the passed-in mode, and validate it against configuration-"
"invariant hardware constraints. Any further limits which depend upon the "
"configuration can only be checked in **mode_fixup** or **atomic_check**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:47
#: include/drm/drm_simple_kms_helper.h:83 ../../../gpu/drm-kms-helpers:182:
#: include/drm/drm_bridge.h:72 include/drm/drm_bridge.h:126
#: include/drm/drm_bridge.h:166 include/drm/drm_bridge.h:658
#: include/drm/drm_bridge.h:683 include/drm/drm_bridge.h:711
#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:141
#: include/drm/drm_modeset_helper_vtables.h:186
#: include/drm/drm_modeset_helper_vtables.h:206
#: include/drm/drm_modeset_helper_vtables.h:248
#: include/drm/drm_modeset_helper_vtables.h:265
#: include/drm/drm_modeset_helper_vtables.h:349
#: include/drm/drm_modeset_helper_vtables.h:557
#: include/drm/drm_modeset_helper_vtables.h:599
#: include/drm/drm_modeset_helper_vtables.h:831
#: include/drm/drm_modeset_helper_vtables.h:899
#: include/drm/drm_modeset_helper_vtables.h:925
#: include/drm/drm_modeset_helper_vtables.h:963
#: include/drm/drm_modeset_helper_vtables.h:1033
#: include/drm/drm_modeset_helper_vtables.h:1059
#: include/drm/drm_modeset_helper_vtables.h:1093
#: include/drm/drm_modeset_helper_vtables.h:1235
#: include/drm/drm_modeset_helper_vtables.h:1314
#: include/drm/drm_modeset_helper_vtables.h:1407
msgid "RETURNS:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:49
#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:128
#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:143
#: include/drm/drm_modeset_helper_vtables.h:559
msgid "drm_mode_status Enum"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:136
#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:150
#: include/drm/drm_modeset_helper_vtables.h:566
msgid "``mode_fixup``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:151
msgid ""
"This callback is used to validate a mode. The parameter mode is the display "
"mode that userspace requested, adjusted_mode is the mode the encoders need "
"to be fed with. Note that this is the inverse semantics of the meaning for "
"the :c:type:`drm_encoder` and :c:type:`drm_bridge_funcs.mode_fixup "
"<drm_bridge_funcs>` vfunc. If the CRTC cannot support the requested "
"conversion from mode to adjusted_mode it should reject the modeset. See "
"also :c:type:`drm_crtc_state.adjusted_mode <drm_crtc_state>` for more "
"details."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:159
msgid ""
"This function is used by both legacy CRTC helpers and atomic helpers. With "
"atomic helpers it is optional."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:164
#: include/drm/drm_modeset_helper_vtables.h:579
msgid ""
"This function is called in the check phase of atomic modesets, which can be "
"aborted for any reason (including on userspace's request to just check "
"whether a configuration would be possible). Atomic drivers MUST NOT touch "
"any persistent state (hardware or software) or data structures except the "
"passed in adjusted_mode parameter."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:170
#: include/drm/drm_modeset_helper_vtables.h:585
msgid "This is in contrast to the legacy CRTC helpers where this was allowed."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:173
msgid ""
"Atomic drivers which need to inspect and adjust more state should instead "
"use the **atomic_check** callback, but note that they're not perfectly "
"equivalent: **mode_valid** is called from drm_atomic_helper_check_modeset(), "
"but **atomic_check** is called from drm_atomic_helper_check_planes(), "
"because originally it was meant for plane update checks only."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:180
#: include/drm/drm_modeset_helper_vtables.h:343
msgid ""
"Also beware that userspace can request its own custom modes, neither core "
"nor helpers filter modes to the list of probe modes reported by the "
"GETCONNECTOR IOCTL and stored in :c:type:`drm_connector.modes "
"<drm_connector>`. To ensure that modes are filtered consistently put any "
"CRTC constraints and limits checks into **mode_valid**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:168
#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:188
#: include/drm/drm_modeset_helper_vtables.h:601
msgid ""
"True if an acceptable configuration is possible, false if the modeset "
"operation should be rejected."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:256
#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:197
#: include/drm/drm_modeset_helper_vtables.h:640
msgid "``mode_set``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:198
msgid ""
"This callback is used by the legacy CRTC helpers to set a new mode, position "
"and framebuffer. Since it ties the primary plane to every mode change it is "
"incompatible with universal plane support. And since it can't update other "
"planes it's incompatible with atomic modeset support."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:204
msgid "This callback is only used by CRTC helpers and deprecated."
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:121
#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:662
#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2953
#: drivers/gpu/drm/display/drm_dp_helper.c:2975
#: drivers/gpu/drm/display/drm_dp_helper.c:4406
#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:539
#: drivers/gpu/drm/drm_mipi_dsi.c:590 drivers/gpu/drm/drm_mipi_dsi.c:612
#: drivers/gpu/drm/drm_mipi_dsi.c:663 drivers/gpu/drm/drm_mipi_dsi.c:699
#: drivers/gpu/drm/drm_mipi_dsi.c:715 drivers/gpu/drm/drm_mipi_dsi.c:784
#: drivers/gpu/drm/drm_mipi_dsi.c:963 drivers/gpu/drm/drm_mipi_dsi.c:1085
#: drivers/gpu/drm/drm_mipi_dsi.c:1105 drivers/gpu/drm/drm_mipi_dsi.c:1125
#: drivers/gpu/drm/drm_mipi_dsi.c:1150 drivers/gpu/drm/drm_mipi_dsi.c:1176
#: drivers/gpu/drm/drm_mipi_dsi.c:1197 drivers/gpu/drm/drm_mipi_dsi.c:1218
#: drivers/gpu/drm/drm_mipi_dsi.c:1263 drivers/gpu/drm/drm_mipi_dsi.c:1290
#: drivers/gpu/drm/drm_mipi_dsi.c:1341 drivers/gpu/drm/drm_mipi_dsi.c:1390
#: drivers/gpu/drm/drm_mipi_dsi.c:1413 drivers/gpu/drm/drm_mipi_dsi.c:1439
#: drivers/gpu/drm/drm_mipi_dsi.c:1462 drivers/gpu/drm/drm_mipi_dsi.c:1957
#: drivers/gpu/drm/drm_mipi_dsi.c:1980 ../../../gpu/drm-kms-helpers:378:
#: drivers/gpu/drm/drm_edid.c:7289 drivers/gpu/drm/drm_edid.c:7453
#: ../../../gpu/drm-kms-helpers:393: include/drm/display/drm_scdc_helper.h:48
#: include/drm/display/drm_scdc_helper.h:66 ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:208
#: include/drm/drm_modeset_helper_vtables.h:250
#: include/drm/drm_modeset_helper_vtables.h:267
#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3450
#: drivers/gpu/drm/drm_atomic_helper.c:3534
#: drivers/gpu/drm/drm_atomic_helper.c:3750
#: drivers/gpu/drm/drm_atomic_helper.c:3796
msgid "0 on success or a negative error code on failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:216
msgid "``mode_set_nofb``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:217
msgid ""
"This callback is used to update the display mode of a CRTC without changing "
"anything of the primary plane configuration. This fits the requirement of "
"atomic and hence is used by the atomic helpers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:221
msgid ""
"Note that the display pipe is completely off when this function is called. "
"Atomic drivers which need hardware to be running before they program the new "
"display mode (e.g. because they implement runtime PM) should not use this "
"hook. This is because the helper library calls this hook only once per mode "
"change and not every time the display pipeline is suspended using either "
"DPMS or the new \"ACTIVE\" property. Which means register values set in this "
"callback might get reset when the CRTC is suspended, but not restored.  Such "
"drivers should instead move all their CRTC setup into the **atomic_enable** "
"callback."
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:78
#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:231
msgid "This callback is optional."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:237
msgid "``mode_set_base``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:238
msgid ""
"This callback is used by the legacy CRTC helpers to set a new framebuffer "
"and scanout position. It is optional and used as an optimized fast-path "
"instead of a full mode set operation with all the resulting flickering. If "
"it is not present drm_crtc_helper_set_config() will fall back to a full "
"modeset, using the **mode_set** callback. Since it can't update other planes "
"it's incompatible with atomic modeset support."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:246
msgid "This callback is only used by the CRTC helpers and deprecated."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:257
msgid "``mode_set_base_atomic``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:258
msgid ""
"This callback is used by the fbdev helpers to set a new framebuffer and "
"scanout without sleeping, i.e. from an atomic calling context. It is only "
"used to implement kgdb support."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:262
msgid ""
"This callback is optional and only needed for kgdb support in the fbdev "
"helpers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:66
#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:176
#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:93
#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:275
#: include/drm/drm_modeset_helper_vtables.h:753
msgid "``disable``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:276
#: include/drm/drm_modeset_helper_vtables.h:429
msgid ""
"This callback should be used to disable the CRTC. With the atomic drivers it "
"is called after all encoders connected to this CRTC have been shut off "
"already using their own :c:type:`drm_encoder_helper_funcs.disable "
"<drm_encoder_helper_funcs>` hook. If that sequence is too simple drivers can "
"just add their own hooks and call it from this CRTC callback here by looping "
"over all encoders connected to it using for_each_encoder_on_crtc()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:284
msgid ""
"This hook is used both by legacy CRTC helpers and atomic helpers. Atomic "
"drivers don't need to implement it if there's no need to disable anything at "
"the CRTC level. To ensure that runtime PM handling (using either DPMS or the "
"new \"ACTIVE\" property) works **disable** must be the inverse of "
"**atomic_enable** for atomic drivers. Atomic drivers should consider to use "
"**atomic_disable** instead of this one."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:294
msgid ""
"With legacy CRTC helpers there's a big semantic difference between "
"**disable** and other hooks (like **prepare** or **dpms**) used to shut down "
"a CRTC: **disable** is only called when also logically disabling the display "
"pipeline and needs to release any resources acquired in **mode_set** (like "
"shared PLLs, or again release pinned framebuffers)."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:300
#: include/drm/drm_modeset_helper_vtables.h:778
msgid ""
"Therefore **disable** must be the inverse of **mode_set** plus **commit** "
"for drivers still using legacy CRTC helpers, which is different from the "
"rules under atomic."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:593
#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:308
#: include/drm/drm_modeset_helper_vtables.h:804
#: include/drm/drm_modeset_helper_vtables.h:1071
#: include/drm/drm_modeset_helper_vtables.h:1288
msgid "``atomic_check``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:309
msgid ""
"Drivers should check plane-update related CRTC constraints in this hook. "
"They can also check mode related limitations but need to be aware of the "
"calling order, since this hook is used by drm_atomic_helper_check_planes() "
"whereas the preparations needed to check output routing and the display mode "
"is done in drm_atomic_helper_check_modeset(). Therefore drivers that want to "
"check output routing and display mode constraints in this callback must "
"ensure that drm_atomic_helper_check_modeset() has been called beforehand. "
"This is calling order used by the default helper implementation in "
"drm_atomic_helper_check()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:320
msgid ""
"When using drm_atomic_helper_check_planes() this hook is called after the :c:"
"type:`drm_plane_helper_funcs.atomic_check <drm_plane_helper_funcs>` hook for "
"planes, which allows drivers to assign shared resources requested by planes "
"in this callback here. For more complicated dependencies the driver can call "
"the provided check helpers multiple times until the computed state has a "
"final configuration and everything has been checked."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:327
#: include/drm/drm_modeset_helper_vtables.h:1079
#: include/drm/drm_modeset_helper_vtables.h:1298
msgid ""
"This function is also allowed to inspect any other object's state and can "
"add more state objects to the atomic commit if needed. Care must be taken "
"though to ensure that state check and compute functions for these added "
"states are all called, and derived state in other objects all updated. Again "
"the recommendation is to just call check helpers until a maximal "
"configuration is reached."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:334
#: include/drm/drm_modeset_helper_vtables.h:374
#: include/drm/drm_modeset_helper_vtables.h:398
#: include/drm/drm_modeset_helper_vtables.h:1250
#: include/drm/drm_modeset_helper_vtables.h:1305
#: include/drm/drm_modeset_helper_vtables.h:1336
msgid ""
"This callback is used by the atomic modeset helpers, but it is optional."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:339
msgid ""
"This function is called in the check phase of an atomic update. The driver "
"is not allowed to change anything outside of the free-standing state object "
"passed-in."
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:85
#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:351
#: include/drm/drm_modeset_helper_vtables.h:833
#: include/drm/drm_modeset_helper_vtables.h:1095
#: include/drm/drm_modeset_helper_vtables.h:1316
msgid ""
"0 on success, -EINVAL if the state or the transition can't be supported, -"
"ENOMEM on memory allocation failure and -EDEADLK if an attempt to obtain "
"another state object ran into a :c:type:`drm_modeset_lock` deadlock."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:361
msgid "``atomic_begin``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:362
msgid ""
"Drivers should prepare for an atomic update of multiple planes on a CRTC in "
"this hook. Depending upon hardware this might be vblank evasion, blocking "
"updates by setting bits or doing preparatory work for e.g. manual update "
"display."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:367
msgid "This hook is called before any plane commit functions are called."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:369
#: include/drm/drm_modeset_helper_vtables.h:393
#: include/drm/drm_modeset_helper_vtables.h:1331
#: include/drm/drm_modeset_helper_vtables.h:1353
#: include/drm/drm_modeset_helper_vtables.h:1380
msgid ""
"Note that the power state of the display pipe when this function is called "
"depends upon the exact helpers and calling sequence the driver has picked. "
"See drm_atomic_helper_commit_planes() for a discussion of the tradeoffs and "
"variants of plane commit helpers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:381
msgid "``atomic_flush``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:382
msgid ""
"Drivers should finalize an atomic update of multiple planes on a CRTC in "
"this hook. Depending upon hardware this might include checking that vblank "
"evasion was successful, unblocking updates by setting bits or setting the GO "
"bit to flush out all updates."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:387
msgid ""
"Simple hardware or hardware with special requirements can commit and flush "
"out all updates for all planes from this hook and forgo all the other commit "
"hooks for plane updates."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:391
msgid "This hook is called after any plane commit functions are called."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:392
#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:406
#: include/drm/drm_modeset_helper_vtables.h:730
#: include/drm/drm_modeset_helper_vtables.h:1343
msgid "``atomic_enable``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:407
msgid ""
"This callback should be used to enable the CRTC. With the atomic drivers it "
"is called before all encoders connected to this CRTC are enabled through the "
"encoder's own :c:type:`drm_encoder_helper_funcs.enable "
"<drm_encoder_helper_funcs>` hook.  If that sequence is too simple drivers "
"can just add their own hooks and call it from this CRTC callback here by "
"looping over all encoders connected to it using for_each_encoder_on_crtc()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:414
msgid ""
"This hook is used only by atomic helpers, for symmetry with "
"**atomic_disable**. Atomic drivers don't need to implement it if there's no "
"need to enable anything at the CRTC level. To ensure that runtime PM "
"handling (using either DPMS or the new \"ACTIVE\" property) works "
"**atomic_enable** must be the inverse of **atomic_disable** for atomic "
"drivers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:424
#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:428
#: include/drm/drm_modeset_helper_vtables.h:707
#: include/drm/drm_modeset_helper_vtables.h:1368
msgid "``atomic_disable``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:437
msgid ""
"This hook is used only by atomic helpers. Atomic drivers don't need to "
"implement it if there's no need to disable anything at the CRTC level."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:448
msgid "``get_scanout_position``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:449
msgid "Called by vblank timestamping code."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:451
msgid ""
"Returns the current display scanout position from a CRTC and an optional "
"accurate ktime_get() timestamp of when the position was measured. Note that "
"this is a helper callback which is only used if a driver uses "
"drm_crtc_vblank_helper_get_vblank_timestamp() for the **drm_crtc_funcs."
"get_vblank_timestamp** callback."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:457
msgid "Parameters:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:459
msgid "crtc:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:460
msgid "The CRTC."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:461
msgid "in_vblank_irq:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:462
msgid ""
"True when called from drm_crtc_handle_vblank(). Some drivers need to apply "
"some workarounds for gpu-specific vblank irq quirks if the flag is set."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:465
msgid "vpos:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:466
msgid "Target location for current vertical scanout position."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:467
msgid "hpos:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:468
msgid "Target location for current horizontal scanout position."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:469
msgid "stime:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:470
msgid ""
"Target location for timestamp taken immediately before scanout position "
"query. Can be NULL to skip timestamp."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:472
msgid "etime:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:473
msgid ""
"Target location for timestamp taken immediately after scanout position "
"query. Can be NULL to skip timestamp."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:475
msgid "mode:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:476
msgid "Current display timings."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:478
msgid ""
"Returns vpos as a positive number while in active scanout area. Returns vpos "
"as a negative number inside vblank, counting the number of scanlines to go "
"until end of vblank, e.g., -1 means \"one scanline until start of active "
"scanout / end of vblank.\""
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:774
#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:483
msgid "Returns:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:485
msgid ""
"True on success, false if a reliable scanout position counter could not be "
"read out."
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:241
#: include/drm/drm_simple_kms_helper.h:276 ../../../gpu/drm-kms-helpers:104:
#: drivers/gpu/drm/drm_simple_kms_helper.c:50
#: drivers/gpu/drm/drm_simple_kms_helper.c:378
#: drivers/gpu/drm/drm_simple_kms_helper.c:404
#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:51
#: include/drm/drm_fb_helper.h:111 include/drm/drm_fb_helper.h:217
#: include/drm/drm_fb_helper.h:230 ../../../gpu/drm-kms-helpers:116:
#: drivers/gpu/drm/drm_fb_helper.c:259 drivers/gpu/drm/drm_fb_helper.c:413
#: drivers/gpu/drm/drm_fb_helper.c:450 drivers/gpu/drm/drm_fb_helper.c:463
#: drivers/gpu/drm/drm_fb_helper.c:498 drivers/gpu/drm/drm_fb_helper.c:540
#: drivers/gpu/drm/drm_fb_helper.c:563 drivers/gpu/drm/drm_fb_helper.c:582
#: drivers/gpu/drm/drm_fb_helper.c:710 drivers/gpu/drm/drm_fb_helper.c:755
#: drivers/gpu/drm/drm_fb_helper.c:777 drivers/gpu/drm/drm_fb_helper.c:1064
#: drivers/gpu/drm/drm_fb_helper.c:1329 drivers/gpu/drm/drm_fb_helper.c:1720
#: drivers/gpu/drm/drm_fb_helper.c:1873 drivers/gpu/drm/drm_fb_helper.c:1928
#: drivers/gpu/drm/drm_fb_helper.c:1981 ../../../gpu/drm-kms-helpers:122:
#: drivers/gpu/drm/drm_format_helper.c:30
#: drivers/gpu/drm/drm_format_helper.c:46
#: drivers/gpu/drm/drm_format_helper.c:68
#: drivers/gpu/drm/drm_format_helper.c:102
#: drivers/gpu/drm/drm_format_helper.c:405
#: drivers/gpu/drm/drm_format_helper.c:481
#: drivers/gpu/drm/drm_format_helper.c:533
#: drivers/gpu/drm/drm_format_helper.c:572
#: drivers/gpu/drm/drm_format_helper.c:612
#: drivers/gpu/drm/drm_format_helper.c:651
#: drivers/gpu/drm/drm_format_helper.c:691
#: drivers/gpu/drm/drm_format_helper.c:731
#: drivers/gpu/drm/drm_format_helper.c:771
#: drivers/gpu/drm/drm_format_helper.c:811
#: drivers/gpu/drm/drm_format_helper.c:851
#: drivers/gpu/drm/drm_format_helper.c:891
#: drivers/gpu/drm/drm_format_helper.c:933
#: drivers/gpu/drm/drm_format_helper.c:975
#: drivers/gpu/drm/drm_format_helper.c:1017
#: drivers/gpu/drm/drm_format_helper.c:1058
#: drivers/gpu/drm/drm_format_helper.c:1099
#: drivers/gpu/drm/drm_format_helper.c:1143
#: drivers/gpu/drm/drm_format_helper.c:1179
#: drivers/gpu/drm/drm_format_helper.c:1283 ../../../gpu/drm-kms-helpers:131:
#: drivers/gpu/drm/drm_fb_dma_helper.c:45
#: drivers/gpu/drm/drm_fb_dma_helper.c:71
#: drivers/gpu/drm/drm_fb_dma_helper.c:118
#: drivers/gpu/drm/drm_fb_dma_helper.c:161 ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:47
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:95
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:117
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:144
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:224
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:267
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:306
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:338
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:401
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:449
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:492
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:590
#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1289
#: include/drm/drm_bridge.h:1320 include/drm/drm_bridge.h:1401
#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:216
#: drivers/gpu/drm/drm_bridge.c:234 drivers/gpu/drm/drm_bridge.c:293
#: drivers/gpu/drm/drm_bridge.c:326 drivers/gpu/drm/drm_bridge.c:393
#: drivers/gpu/drm/drm_bridge.c:597 drivers/gpu/drm/drm_bridge.c:639
#: drivers/gpu/drm/drm_bridge.c:666 drivers/gpu/drm/drm_bridge.c:711
#: drivers/gpu/drm/drm_bridge.c:806 drivers/gpu/drm/drm_bridge.c:884
#: drivers/gpu/drm/drm_bridge.c:1175 drivers/gpu/drm/drm_bridge.c:1232
#: drivers/gpu/drm/drm_bridge.c:1257 drivers/gpu/drm/drm_bridge.c:1280
#: drivers/gpu/drm/drm_bridge.c:1303 drivers/gpu/drm/drm_bridge.c:1343
#: drivers/gpu/drm/drm_bridge.c:1371 drivers/gpu/drm/drm_bridge.c:1421
#: ../../../gpu/drm-kms-helpers:198:
#: drivers/gpu/drm/display/drm_bridge_connector.c:626
#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:228
#: drivers/gpu/drm/bridge/panel.c:242 drivers/gpu/drm/bridge/panel.c:276
#: drivers/gpu/drm/bridge/panel.c:343 drivers/gpu/drm/bridge/panel.c:373
#: drivers/gpu/drm/bridge/panel.c:394 drivers/gpu/drm/bridge/panel.c:440
#: drivers/gpu/drm/bridge/panel.c:467 drivers/gpu/drm/bridge/panel.c:490
#: drivers/gpu/drm/bridge/panel.c:524 ../../../gpu/drm-kms-helpers:215:
#: include/drm/drm_panel.h:146 include/drm/drm_panel.h:297
#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:56
#: drivers/gpu/drm/drm_panel.c:78 drivers/gpu/drm/drm_panel.c:94
#: drivers/gpu/drm/drm_panel.c:108 drivers/gpu/drm/drm_panel.c:152
#: drivers/gpu/drm/drm_panel.c:204 drivers/gpu/drm/drm_panel.c:240
#: drivers/gpu/drm/drm_panel.c:284 drivers/gpu/drm/drm_panel.c:319
#: drivers/gpu/drm/drm_panel.c:338 drivers/gpu/drm/drm_panel.c:400
#: drivers/gpu/drm/drm_panel.c:439 drivers/gpu/drm/drm_panel.c:519
#: drivers/gpu/drm/drm_panel.c:542 drivers/gpu/drm/drm_panel.c:589
#: drivers/gpu/drm/drm_panel.c:625 drivers/gpu/drm/drm_panel.c:648
#: ../../../gpu/drm-kms-helpers:221:
#: drivers/gpu/drm/drm_panel_orientation_quirks.c:544
#: ../../../gpu/drm-kms-helpers:224:
#: drivers/gpu/drm/drm_panel_backlight_quirks.c:63
#: ../../../gpu/drm-kms-helpers:233:
#: drivers/gpu/drm/drm_self_refresh_helper.c:140
#: drivers/gpu/drm/drm_self_refresh_helper.c:179
#: drivers/gpu/drm/drm_self_refresh_helper.c:231
#: ../../../gpu/drm-kms-helpers:248:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:313
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:825
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:878
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:988
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:1054
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:1090
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:1157
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:1171
#: ../../../gpu/drm-kms-helpers:254:
#: drivers/gpu/drm/display/drm_hdcp_helper.c:265
#: drivers/gpu/drm/display/drm_hdcp_helper.c:332
#: drivers/gpu/drm/display/drm_hdcp_helper.c:400
#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1783
#: include/drm/display/drm_dp.h:1831 include/drm/display/drm_dp.h:1834
#: include/drm/display/drm_dp.h:1858 ../../../gpu/drm-kms-helpers:266:
#: include/drm/display/drm_dp_helper.h:92
#: include/drm/display/drm_dp_helper.h:120
#: include/drm/display/drm_dp_helper.h:235
#: include/drm/display/drm_dp_helper.h:281
#: include/drm/display/drm_dp_helper.h:298
#: include/drm/display/drm_dp_helper.h:532
#: include/drm/display/drm_dp_helper.h:548
#: include/drm/display/drm_dp_helper.h:577
#: include/drm/display/drm_dp_helper.h:605
#: include/drm/display/drm_dp_helper.h:621
#: include/drm/display/drm_dp_helper.h:637
#: include/drm/display/drm_dp_helper.h:651
#: include/drm/display/drm_dp_helper.h:804
#: include/drm/display/drm_dp_helper.h:830
#: include/drm/display/drm_dp_helper.h:850 ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:413
#: drivers/gpu/drm/display/drm_dp_helper.c:468
#: drivers/gpu/drm/display/drm_dp_helper.c:652
#: drivers/gpu/drm/display/drm_dp_helper.c:678
#: drivers/gpu/drm/display/drm_dp_helper.c:730
#: drivers/gpu/drm/display/drm_dp_helper.c:768
#: drivers/gpu/drm/display/drm_dp_helper.c:798
#: drivers/gpu/drm/display/drm_dp_helper.c:814
#: drivers/gpu/drm/display/drm_dp_helper.c:856
#: drivers/gpu/drm/display/drm_dp_helper.c:894
#: drivers/gpu/drm/display/drm_dp_helper.c:939
#: drivers/gpu/drm/display/drm_dp_helper.c:993
#: drivers/gpu/drm/display/drm_dp_helper.c:1008
#: drivers/gpu/drm/display/drm_dp_helper.c:1061
#: drivers/gpu/drm/display/drm_dp_helper.c:1224
#: drivers/gpu/drm/display/drm_dp_helper.c:1258
#: drivers/gpu/drm/display/drm_dp_helper.c:1590
#: drivers/gpu/drm/display/drm_dp_helper.c:1644
#: drivers/gpu/drm/display/drm_dp_helper.c:1802
#: drivers/gpu/drm/display/drm_dp_helper.c:1826
#: drivers/gpu/drm/display/drm_dp_helper.c:1847
#: drivers/gpu/drm/display/drm_dp_helper.c:2322
#: drivers/gpu/drm/display/drm_dp_helper.c:2335
#: drivers/gpu/drm/display/drm_dp_helper.c:2366
#: drivers/gpu/drm/display/drm_dp_helper.c:2467
#: drivers/gpu/drm/display/drm_dp_helper.c:2494
#: drivers/gpu/drm/display/drm_dp_helper.c:2615
#: drivers/gpu/drm/display/drm_dp_helper.c:2644
#: drivers/gpu/drm/display/drm_dp_helper.c:2671
#: drivers/gpu/drm/display/drm_dp_helper.c:2700
#: drivers/gpu/drm/display/drm_dp_helper.c:2757
#: drivers/gpu/drm/display/drm_dp_helper.c:2804
#: drivers/gpu/drm/display/drm_dp_helper.c:2865
#: drivers/gpu/drm/display/drm_dp_helper.c:2886
#: drivers/gpu/drm/display/drm_dp_helper.c:2910
#: drivers/gpu/drm/display/drm_dp_helper.c:2938
#: drivers/gpu/drm/display/drm_dp_helper.c:3013
#: drivers/gpu/drm/display/drm_dp_helper.c:3027
#: drivers/gpu/drm/display/drm_dp_helper.c:3043
#: drivers/gpu/drm/display/drm_dp_helper.c:3060
#: drivers/gpu/drm/display/drm_dp_helper.c:3111
#: drivers/gpu/drm/display/drm_dp_helper.c:3329
#: drivers/gpu/drm/display/drm_dp_helper.c:3354
#: drivers/gpu/drm/display/drm_dp_helper.c:3378
#: drivers/gpu/drm/display/drm_dp_helper.c:3451
#: drivers/gpu/drm/display/drm_dp_helper.c:3490
#: drivers/gpu/drm/display/drm_dp_helper.c:3508
#: drivers/gpu/drm/display/drm_dp_helper.c:3535
#: drivers/gpu/drm/display/drm_dp_helper.c:3592
#: drivers/gpu/drm/display/drm_dp_helper.c:3617
#: drivers/gpu/drm/display/drm_dp_helper.c:3629
#: drivers/gpu/drm/display/drm_dp_helper.c:3653
#: drivers/gpu/drm/display/drm_dp_helper.c:3676
#: drivers/gpu/drm/display/drm_dp_helper.c:3868
#: drivers/gpu/drm/display/drm_dp_helper.c:3882
#: drivers/gpu/drm/display/drm_dp_helper.c:3954
#: drivers/gpu/drm/display/drm_dp_helper.c:4034
#: drivers/gpu/drm/display/drm_dp_helper.c:4101
#: drivers/gpu/drm/display/drm_dp_helper.c:4292
#: drivers/gpu/drm/display/drm_dp_helper.c:4389
#: drivers/gpu/drm/display/drm_dp_helper.c:4481
#: drivers/gpu/drm/display/drm_dp_helper.c:4511
#: drivers/gpu/drm/display/drm_dp_helper.c:4591
#: drivers/gpu/drm/display/drm_dp_helper.c:4621
#: ../../../gpu/drm-kms-helpers:278: drivers/gpu/drm/display/drm_dp_cec.c:240
#: drivers/gpu/drm/display/drm_dp_cec.c:431 ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:57
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:121
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:194
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:267
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:312
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:354
#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:156
#: include/drm/display/drm_dp_mst_helper.h:195
#: include/drm/display/drm_dp_mst_helper.h:588
#: include/drm/display/drm_dp_mst_helper.h:629
#: include/drm/display/drm_dp_mst_helper.h:825
#: include/drm/display/drm_dp_mst_helper.h:993
#: include/drm/display/drm_dp_mst_helper.h:1033
#: include/drm/display/drm_dp_mst_helper.h:1050
#: include/drm/display/drm_dp_mst_helper.h:1067
#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1497
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1522
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:2237
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:2259
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3313
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3367
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3399
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3432
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3586
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3641
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3729
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3756
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3781
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4218
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4267
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4298
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4353
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4385
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4415
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4505
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4586
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4630
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4681
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4759
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4783
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4904
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5234
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5408
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5471
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5526
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5586
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5632
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5651
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5675
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5703
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:6051
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:6067
#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1453
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1471
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1743
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1782
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1808
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1858
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1895
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1920
#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:215
#: include/drm/drm_mipi_dbi.h:243 ../../../gpu/drm-kms-helpers:336:
#: drivers/gpu/drm/drm_mipi_dbi.c:128 drivers/gpu/drm/drm_mipi_dbi.c:323
#: drivers/gpu/drm/drm_mipi_dbi.c:341 drivers/gpu/drm/drm_mipi_dbi.c:376
#: drivers/gpu/drm/drm_mipi_dbi.c:437 drivers/gpu/drm/drm_mipi_dbi.c:464
#: drivers/gpu/drm/drm_mipi_dbi.c:484 drivers/gpu/drm/drm_mipi_dbi.c:499
#: drivers/gpu/drm/drm_mipi_dbi.c:512 drivers/gpu/drm/drm_mipi_dbi.c:531
#: drivers/gpu/drm/drm_mipi_dbi.c:600 drivers/gpu/drm/drm_mipi_dbi.c:680
#: drivers/gpu/drm/drm_mipi_dbi.c:708 drivers/gpu/drm/drm_mipi_dbi.c:726
#: drivers/gpu/drm/drm_mipi_dbi.c:809 drivers/gpu/drm/drm_mipi_dbi.c:825
#: drivers/gpu/drm/drm_mipi_dbi.c:846 drivers/gpu/drm/drm_mipi_dbi.c:1240
#: drivers/gpu/drm/drm_mipi_dbi.c:1327 drivers/gpu/drm/drm_mipi_dbi.c:1500
#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:75
#: include/drm/drm_mipi_dsi.h:159 include/drm/drm_mipi_dsi.h:397
#: include/drm/drm_mipi_dsi.h:415 include/drm/drm_mipi_dsi.h:431
#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:198
#: drivers/gpu/drm/drm_mipi_dsi.c:267 drivers/gpu/drm/drm_mipi_dsi.c:425
#: drivers/gpu/drm/drm_mipi_dsi.c:610 drivers/gpu/drm/drm_mipi_dsi.c:660
#: drivers/gpu/drm/drm_mipi_dsi.c:696 drivers/gpu/drm/drm_mipi_dsi.c:712
#: drivers/gpu/drm/drm_mipi_dsi.c:738 drivers/gpu/drm/drm_mipi_dsi.c:781
#: drivers/gpu/drm/drm_mipi_dsi.c:809 drivers/gpu/drm/drm_mipi_dsi.c:839
#: drivers/gpu/drm/drm_mipi_dsi.c:883 drivers/gpu/drm/drm_mipi_dsi.c:918
#: drivers/gpu/drm/drm_mipi_dsi.c:960 drivers/gpu/drm/drm_mipi_dsi.c:988
#: drivers/gpu/drm/drm_mipi_dsi.c:1017 drivers/gpu/drm/drm_mipi_dsi.c:1083
#: drivers/gpu/drm/drm_mipi_dsi.c:1103 drivers/gpu/drm/drm_mipi_dsi.c:1174
#: drivers/gpu/drm/drm_mipi_dsi.c:1195 drivers/gpu/drm/drm_mipi_dsi.c:1216
#: drivers/gpu/drm/drm_mipi_dsi.c:1237 drivers/gpu/drm/drm_mipi_dsi.c:1260
#: drivers/gpu/drm/drm_mipi_dsi.c:1287 drivers/gpu/drm/drm_mipi_dsi.c:1313
#: drivers/gpu/drm/drm_mipi_dsi.c:1338 drivers/gpu/drm/drm_mipi_dsi.c:1362
#: drivers/gpu/drm/drm_mipi_dsi.c:1387 drivers/gpu/drm/drm_mipi_dsi.c:1490
#: drivers/gpu/drm/drm_mipi_dsi.c:1519 drivers/gpu/drm/drm_mipi_dsi.c:1548
#: drivers/gpu/drm/drm_mipi_dsi.c:1563 drivers/gpu/drm/drm_mipi_dsi.c:1588
#: drivers/gpu/drm/drm_mipi_dsi.c:1613 drivers/gpu/drm/drm_mipi_dsi.c:1638
#: drivers/gpu/drm/drm_mipi_dsi.c:1663 drivers/gpu/drm/drm_mipi_dsi.c:1689
#: drivers/gpu/drm/drm_mipi_dsi.c:1715 drivers/gpu/drm/drm_mipi_dsi.c:1763
#: drivers/gpu/drm/drm_mipi_dsi.c:1790 drivers/gpu/drm/drm_mipi_dsi.c:1818
#: drivers/gpu/drm/drm_mipi_dsi.c:1847 drivers/gpu/drm/drm_mipi_dsi.c:1876
#: drivers/gpu/drm/drm_mipi_dsi.c:1904 ../../../gpu/drm-kms-helpers:357:
#: include/drm/display/drm_dsc.h:64 include/drm/display/drm_dsc.h:270
#: include/drm/display/drm_dsc.h:580 include/drm/display/drm_dsc.h:599
#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:41
#: drivers/gpu/drm/display/drm_dsc_helper.c:91
#: drivers/gpu/drm/display/drm_dsc_helper.c:1558
#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:3
#: drivers/gpu/drm/drm_probe_helper.c:290
#: drivers/gpu/drm/drm_probe_helper.c:322
#: drivers/gpu/drm/drm_probe_helper.c:391
#: drivers/gpu/drm/drm_probe_helper.c:505
#: drivers/gpu/drm/drm_probe_helper.c:717
#: drivers/gpu/drm/drm_probe_helper.c:743
#: drivers/gpu/drm/drm_probe_helper.c:877
#: drivers/gpu/drm/drm_probe_helper.c:908
#: drivers/gpu/drm/drm_probe_helper.c:956
#: drivers/gpu/drm/drm_probe_helper.c:1017
#: drivers/gpu/drm/drm_probe_helper.c:1058
#: drivers/gpu/drm/drm_probe_helper.c:1150
#: drivers/gpu/drm/drm_probe_helper.c:1189
#: drivers/gpu/drm/drm_probe_helper.c:1225
#: drivers/gpu/drm/drm_probe_helper.c:1310 ../../../gpu/drm-kms-helpers:375:
#: include/drm/drm_edid.h:396 include/drm/drm_edid.h:417
#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:1778
#: drivers/gpu/drm/drm_edid.c:2035 drivers/gpu/drm/drm_edid.c:2061
#: drivers/gpu/drm/drm_edid.c:2300 drivers/gpu/drm/drm_edid.c:2473
#: drivers/gpu/drm/drm_edid.c:2517 drivers/gpu/drm/drm_edid.c:2549
#: drivers/gpu/drm/drm_edid.c:2596 drivers/gpu/drm/drm_edid.c:2624
#: drivers/gpu/drm/drm_edid.c:2669 drivers/gpu/drm/drm_edid.c:2705
#: drivers/gpu/drm/drm_edid.c:2758 drivers/gpu/drm/drm_edid.c:2785
#: drivers/gpu/drm/drm_edid.c:2825 drivers/gpu/drm/drm_edid.c:2873
#: drivers/gpu/drm/drm_edid.c:2902 drivers/gpu/drm/drm_edid.c:4633
#: drivers/gpu/drm/drm_edid.c:5543 drivers/gpu/drm/drm_edid.c:5785
#: drivers/gpu/drm/drm_edid.c:5830 drivers/gpu/drm/drm_edid.c:5913
#: drivers/gpu/drm/drm_edid.c:5974 drivers/gpu/drm/drm_edid.c:5995
#: drivers/gpu/drm/drm_edid.c:7070 drivers/gpu/drm/drm_edid.c:7094
#: drivers/gpu/drm/drm_edid.c:7124 drivers/gpu/drm/drm_edid.c:7149
#: drivers/gpu/drm/drm_edid.c:7182 drivers/gpu/drm/drm_edid.c:7449
#: drivers/gpu/drm/drm_edid.c:7583 ../../../gpu/drm-kms-helpers:381:
#: include/drm/drm_eld.h:116 include/drm/drm_eld.h:129
#: include/drm/drm_eld.h:144 include/drm/drm_eld.h:156
#: ../../../gpu/drm-kms-helpers:393: include/drm/display/drm_scdc_helper.h:45
#: include/drm/display/drm_scdc_helper.h:63 ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:65
#: drivers/gpu/drm/display/drm_scdc_helper.c:105
#: drivers/gpu/drm/display/drm_scdc_helper.c:148
#: drivers/gpu/drm/display/drm_scdc_helper.c:176
#: drivers/gpu/drm/display/drm_scdc_helper.c:219
#: ../../../gpu/drm-kms-helpers:407: include/linux/hdmi.h:402
#: include/linux/hdmi.h:433 ../../../gpu/drm-kms-helpers:410:
#: drivers/video/hdmi.c:85 drivers/video/hdmi.c:102 drivers/video/hdmi.c:191
#: drivers/video/hdmi.c:220 drivers/video/hdmi.c:256 drivers/video/hdmi.c:273
#: drivers/video/hdmi.c:325 drivers/video/hdmi.c:352 drivers/video/hdmi.c:380
#: drivers/video/hdmi.c:419 drivers/video/hdmi.c:466 drivers/video/hdmi.c:496
#: drivers/video/hdmi.c:530 drivers/video/hdmi.c:584 drivers/video/hdmi.c:603
#: drivers/video/hdmi.c:664 drivers/video/hdmi.c:702 drivers/video/hdmi.c:732
#: drivers/video/hdmi.c:747 drivers/video/hdmi.c:818 drivers/video/hdmi.c:903
#: drivers/video/hdmi.c:953 drivers/video/hdmi.c:1793 drivers/video/hdmi.c:1882
#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:45
#: include/drm/drm_rect.h:84 include/drm/drm_rect.h:116
#: include/drm/drm_rect.h:136 include/drm/drm_rect.h:153
#: include/drm/drm_rect.h:167 ../../../gpu/drm-kms-helpers:422:
#: drivers/gpu/drm/drm_rect.c:37 drivers/gpu/drm/drm_rect.c:83
#: drivers/gpu/drm/drm_rect.c:158 drivers/gpu/drm/drm_rect.c:193
#: drivers/gpu/drm/drm_rect.c:243 drivers/gpu/drm/drm_rect.c:309
#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:489
#: include/drm/drm_modeset_helper_vtables.h:839
#: include/drm/drm_modeset_helper_vtables.h:1180
#: include/drm/drm_modeset_helper_vtables.h:1489
#: include/drm/drm_modeset_helper_vtables.h:1565
#: ../../../gpu/drm-kms-helpers:434: drivers/gpu/drm/drm_flip_work.c:61
#: drivers/gpu/drm/drm_flip_work.c:84 drivers/gpu/drm/drm_flip_work.c:133
#: drivers/gpu/drm/drm_flip_work.c:152 ../../../gpu/drm-kms-helpers:443:
#: drivers/gpu/drm/drm_modeset_helper.c:46
#: drivers/gpu/drm/drm_modeset_helper.c:80
#: drivers/gpu/drm/drm_modeset_helper.c:124
#: drivers/gpu/drm/drm_modeset_helper.c:183
#: drivers/gpu/drm/drm_modeset_helper.c:230 ../../../gpu/drm-kms-helpers:452:
#: drivers/gpu/drm/drm_of.c:29 drivers/gpu/drm/drm_of.c:54
#: drivers/gpu/drm/drm_of.c:106 drivers/gpu/drm/drm_of.c:228
#: drivers/gpu/drm/drm_of.c:364 drivers/gpu/drm/drm_of.c:414
#: drivers/gpu/drm/drm_of.c:462 drivers/gpu/drm/drm_of.c:503
#: drivers/gpu/drm/drm_of.c:534 drivers/gpu/drm/drm_of.c:564
#: ../../../gpu/drm-kms-helpers:461: drivers/gpu/drm/drm_plane_helper.c:157
#: drivers/gpu/drm/drm_plane_helper.c:249
#: drivers/gpu/drm/drm_plane_helper.c:273 ../../../gpu/drm-kms-helpers:470:
#: drivers/gpu/drm/drm_crtc_helper.c:100 drivers/gpu/drm/drm_crtc_helper.c:141
#: drivers/gpu/drm/drm_crtc_helper.c:216 drivers/gpu/drm/drm_crtc_helper.c:271
#: drivers/gpu/drm/drm_crtc_helper.c:442 drivers/gpu/drm/drm_crtc_helper.c:519
#: drivers/gpu/drm/drm_crtc_helper.c:893 drivers/gpu/drm/drm_crtc_helper.c:960
#: drivers/gpu/drm/drm_crtc_helper.c:1035 ../../../gpu/drm-kms-helpers:479:
#: include/drm/drm_privacy_screen_driver.h:43
#: include/drm/drm_privacy_screen_driver.h:81 ../../../gpu/drm-kms-helpers:482:
#: include/drm/drm_privacy_screen_machine.h:31
#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:50
#: drivers/gpu/drm/drm_privacy_screen.c:69
#: drivers/gpu/drm/drm_privacy_screen.c:107
#: drivers/gpu/drm/drm_privacy_screen.c:183
#: drivers/gpu/drm/drm_privacy_screen.c:201
#: drivers/gpu/drm/drm_privacy_screen.c:247
#: drivers/gpu/drm/drm_privacy_screen.c:266
#: drivers/gpu/drm/drm_privacy_screen.c:293
#: drivers/gpu/drm/drm_privacy_screen.c:385
#: drivers/gpu/drm/drm_privacy_screen.c:433
#: drivers/gpu/drm/drm_privacy_screen.c:458 ../../../gpu/drm-kms-helpers:65:
#: include/drm/drm_atomic_helper.h:172 include/drm/drm_atomic_helper.h:186
#: include/drm/drm_atomic_helper.h:200 include/drm/drm_atomic_helper.h:220
#: include/drm/drm_atomic_helper.h:246 ../../../gpu/drm-kms-helpers:68:
#: drivers/gpu/drm/drm_atomic_helper.c:607
#: drivers/gpu/drm/drm_atomic_helper.c:833
#: drivers/gpu/drm/drm_atomic_helper.c:881
#: drivers/gpu/drm/drm_atomic_helper.c:972
#: drivers/gpu/drm/drm_atomic_helper.c:1004
#: drivers/gpu/drm/drm_atomic_helper.c:1074
#: drivers/gpu/drm/drm_atomic_helper.c:1350
#: drivers/gpu/drm/drm_atomic_helper.c:1428
#: drivers/gpu/drm/drm_atomic_helper.c:1512
#: drivers/gpu/drm/drm_atomic_helper.c:1666
#: drivers/gpu/drm/drm_atomic_helper.c:1736
#: drivers/gpu/drm/drm_atomic_helper.c:1788
#: drivers/gpu/drm/drm_atomic_helper.c:1848
#: drivers/gpu/drm/drm_atomic_helper.c:1888
#: drivers/gpu/drm/drm_atomic_helper.c:1921
#: drivers/gpu/drm/drm_atomic_helper.c:2014
#: drivers/gpu/drm/drm_atomic_helper.c:2098
#: drivers/gpu/drm/drm_atomic_helper.c:2147
#: drivers/gpu/drm/drm_atomic_helper.c:2385
#: drivers/gpu/drm/drm_atomic_helper.c:2543
#: drivers/gpu/drm/drm_atomic_helper.c:2592
#: drivers/gpu/drm/drm_atomic_helper.c:2633
#: drivers/gpu/drm/drm_atomic_helper.c:2682
#: drivers/gpu/drm/drm_atomic_helper.c:2721
#: drivers/gpu/drm/drm_atomic_helper.c:2813
#: drivers/gpu/drm/drm_atomic_helper.c:2852
#: drivers/gpu/drm/drm_atomic_helper.c:2993
#: drivers/gpu/drm/drm_atomic_helper.c:3064
#: drivers/gpu/drm/drm_atomic_helper.c:3109
#: drivers/gpu/drm/drm_atomic_helper.c:3138
#: drivers/gpu/drm/drm_atomic_helper.c:3296
#: drivers/gpu/drm/drm_atomic_helper.c:3353
#: drivers/gpu/drm/drm_atomic_helper.c:3395
#: drivers/gpu/drm/drm_atomic_helper.c:3439
#: drivers/gpu/drm/drm_atomic_helper.c:3523
#: drivers/gpu/drm/drm_atomic_helper.c:3570
#: drivers/gpu/drm/drm_atomic_helper.c:3602
#: drivers/gpu/drm/drm_atomic_helper.c:3689
#: drivers/gpu/drm/drm_atomic_helper.c:3746
#: drivers/gpu/drm/drm_atomic_helper.c:3791
#: drivers/gpu/drm/drm_atomic_helper.c:3868
#: drivers/gpu/drm/drm_atomic_helper.c:3913
#: drivers/gpu/drm/drm_atomic_helper.c:3966 ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:70
#: drivers/gpu/drm/drm_atomic_state_helper.c:86
#: drivers/gpu/drm/drm_atomic_state_helper.c:111
#: drivers/gpu/drm/drm_atomic_state_helper.c:131
#: drivers/gpu/drm/drm_atomic_state_helper.c:167
#: drivers/gpu/drm/drm_atomic_state_helper.c:190
#: drivers/gpu/drm/drm_atomic_state_helper.c:227
#: drivers/gpu/drm/drm_atomic_state_helper.c:243
#: drivers/gpu/drm/drm_atomic_state_helper.c:301
#: drivers/gpu/drm/drm_atomic_state_helper.c:322
#: drivers/gpu/drm/drm_atomic_state_helper.c:342
#: drivers/gpu/drm/drm_atomic_state_helper.c:364
#: drivers/gpu/drm/drm_atomic_state_helper.c:387
#: drivers/gpu/drm/drm_atomic_state_helper.c:411
#: drivers/gpu/drm/drm_atomic_state_helper.c:427
#: drivers/gpu/drm/drm_atomic_state_helper.c:443
#: drivers/gpu/drm/drm_atomic_state_helper.c:465
#: drivers/gpu/drm/drm_atomic_state_helper.c:486
#: drivers/gpu/drm/drm_atomic_state_helper.c:504
#: drivers/gpu/drm/drm_atomic_state_helper.c:580
#: drivers/gpu/drm/drm_atomic_state_helper.c:629
#: drivers/gpu/drm/drm_atomic_state_helper.c:653
#: drivers/gpu/drm/drm_atomic_state_helper.c:676
#: drivers/gpu/drm/drm_atomic_state_helper.c:701
#: drivers/gpu/drm/drm_atomic_state_helper.c:717
#: drivers/gpu/drm/drm_atomic_state_helper.c:732
#: drivers/gpu/drm/drm_atomic_state_helper.c:748
#: drivers/gpu/drm/drm_atomic_state_helper.c:774
#: drivers/gpu/drm/drm_atomic_state_helper.c:793
#: drivers/gpu/drm/drm_atomic_state_helper.c:810
#: ../../../gpu/drm-kms-helpers:89: include/drm/drm_gem_atomic_helper.h:27
#: include/drm/drm_gem_atomic_helper.h:36
#: include/drm/drm_gem_atomic_helper.h:80
#: include/drm/drm_gem_atomic_helper.h:105
#: include/drm/drm_gem_atomic_helper.h:120
#: include/drm/drm_gem_atomic_helper.h:142 ../../../gpu/drm-kms-helpers:92:
#: drivers/gpu/drm/drm_gem_atomic_helper.c:123
#: drivers/gpu/drm/drm_gem_atomic_helper.c:210
#: drivers/gpu/drm/drm_gem_atomic_helper.c:237
#: drivers/gpu/drm/drm_gem_atomic_helper.c:272
#: drivers/gpu/drm/drm_gem_atomic_helper.c:287
#: drivers/gpu/drm/drm_gem_atomic_helper.c:307
#: drivers/gpu/drm/drm_gem_atomic_helper.c:322
#: drivers/gpu/drm/drm_gem_atomic_helper.c:348
#: drivers/gpu/drm/drm_gem_atomic_helper.c:375
#: drivers/gpu/drm/drm_gem_atomic_helper.c:397
#: drivers/gpu/drm/drm_gem_atomic_helper.c:417
#: drivers/gpu/drm/drm_gem_atomic_helper.c:434
#: drivers/gpu/drm/drm_gem_atomic_helper.c:447
#: drivers/gpu/drm/drm_gem_atomic_helper.c:467
msgid "**Description**"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42: include/drm/drm_modeset_helper_vtables.h:62
#: include/drm/drm_modeset_helper_vtables.h:508
msgid ""
"These hooks are used by the legacy CRTC helpers and the new atomic "
"modesetting helpers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:496
msgid "sets the helper vtable for a crtc"
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:273
#: ../../../gpu/drm-kms-helpers:104: drivers/gpu/drm/drm_simple_kms_helper.c:48
#: drivers/gpu/drm/drm_simple_kms_helper.c:378
#: drivers/gpu/drm/drm_simple_kms_helper.c:399
#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:141
#: drivers/gpu/drm/drm_fb_helper.c:177 drivers/gpu/drm/drm_fb_helper.c:260
#: drivers/gpu/drm/drm_fb_helper.c:322 drivers/gpu/drm/drm_fb_helper.c:411
#: drivers/gpu/drm/drm_fb_helper.c:451 drivers/gpu/drm/drm_fb_helper.c:463
#: drivers/gpu/drm/drm_fb_helper.c:499 drivers/gpu/drm/drm_fb_helper.c:541
#: drivers/gpu/drm/drm_fb_helper.c:564 drivers/gpu/drm/drm_fb_helper.c:583
#: drivers/gpu/drm/drm_fb_helper.c:710 drivers/gpu/drm/drm_fb_helper.c:755
#: drivers/gpu/drm/drm_fb_helper.c:776 drivers/gpu/drm/drm_fb_helper.c:1025
#: drivers/gpu/drm/drm_fb_helper.c:1063 drivers/gpu/drm/drm_fb_helper.c:1234
#: drivers/gpu/drm/drm_fb_helper.c:1330 drivers/gpu/drm/drm_fb_helper.c:1431
#: drivers/gpu/drm/drm_fb_helper.c:1719 drivers/gpu/drm/drm_fb_helper.c:1874
#: drivers/gpu/drm/drm_fb_helper.c:1928 drivers/gpu/drm/drm_fb_helper.c:1982
#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:31
#: drivers/gpu/drm/drm_format_helper.c:46
#: drivers/gpu/drm/drm_format_helper.c:67
#: drivers/gpu/drm/drm_format_helper.c:103
#: drivers/gpu/drm/drm_format_helper.c:127
#: drivers/gpu/drm/drm_format_helper.c:401
#: drivers/gpu/drm/drm_format_helper.c:475
#: drivers/gpu/drm/drm_format_helper.c:528
#: drivers/gpu/drm/drm_format_helper.c:567
#: drivers/gpu/drm/drm_format_helper.c:607
#: drivers/gpu/drm/drm_format_helper.c:646
#: drivers/gpu/drm/drm_format_helper.c:686
#: drivers/gpu/drm/drm_format_helper.c:726
#: drivers/gpu/drm/drm_format_helper.c:766
#: drivers/gpu/drm/drm_format_helper.c:806
#: drivers/gpu/drm/drm_format_helper.c:846
#: drivers/gpu/drm/drm_format_helper.c:886
#: drivers/gpu/drm/drm_format_helper.c:928
#: drivers/gpu/drm/drm_format_helper.c:970
#: drivers/gpu/drm/drm_format_helper.c:1012
#: drivers/gpu/drm/drm_format_helper.c:1053
#: drivers/gpu/drm/drm_format_helper.c:1094
#: drivers/gpu/drm/drm_format_helper.c:1138
#: drivers/gpu/drm/drm_format_helper.c:1173
#: drivers/gpu/drm/drm_format_helper.c:1278 ../../../gpu/drm-kms-helpers:131:
#: drivers/gpu/drm/drm_fb_dma_helper.c:45
#: drivers/gpu/drm/drm_fb_dma_helper.c:67
#: drivers/gpu/drm/drm_fb_dma_helper.c:116
#: drivers/gpu/drm/drm_fb_dma_helper.c:160 ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:47
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:96
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:116
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:136
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:219
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:264
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:303
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:337
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:401
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:449
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:492
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:584
#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1287
#: include/drm/drm_bridge.h:1321 include/drm/drm_bridge.h:1353
#: include/drm/drm_bridge.h:1369 include/drm/drm_bridge.h:1385
#: include/drm/drm_bridge.h:1400 ../../../gpu/drm-kms-helpers:185:
#: drivers/gpu/drm/drm_bridge.c:217 drivers/gpu/drm/drm_bridge.c:235
#: drivers/gpu/drm/drm_bridge.c:293 drivers/gpu/drm/drm_bridge.c:325
#: drivers/gpu/drm/drm_bridge.c:343 drivers/gpu/drm/drm_bridge.c:390
#: drivers/gpu/drm/drm_bridge.c:595 drivers/gpu/drm/drm_bridge.c:637
#: drivers/gpu/drm/drm_bridge.c:666 drivers/gpu/drm/drm_bridge.c:710
#: drivers/gpu/drm/drm_bridge.c:805 drivers/gpu/drm/drm_bridge.c:884
#: drivers/gpu/drm/drm_bridge.c:1174 drivers/gpu/drm/drm_bridge.c:1232
#: drivers/gpu/drm/drm_bridge.c:1256 drivers/gpu/drm/drm_bridge.c:1280
#: drivers/gpu/drm/drm_bridge.c:1302 drivers/gpu/drm/drm_bridge.c:1344
#: drivers/gpu/drm/drm_bridge.c:1371 drivers/gpu/drm/drm_bridge.c:1393
#: drivers/gpu/drm/drm_bridge.c:1421 ../../../gpu/drm-kms-helpers:198:
#: drivers/gpu/drm/display/drm_bridge_connector.c:626
#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:228
#: drivers/gpu/drm/bridge/panel.c:241 drivers/gpu/drm/bridge/panel.c:275
#: drivers/gpu/drm/bridge/panel.c:315 drivers/gpu/drm/bridge/panel.c:341
#: drivers/gpu/drm/bridge/panel.c:372 drivers/gpu/drm/bridge/panel.c:392
#: drivers/gpu/drm/bridge/panel.c:437 drivers/gpu/drm/bridge/panel.c:468
#: drivers/gpu/drm/bridge/panel.c:488 drivers/gpu/drm/bridge/panel.c:522
#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:292
#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:53
#: drivers/gpu/drm/drm_panel.c:79 drivers/gpu/drm/drm_panel.c:95
#: drivers/gpu/drm/drm_panel.c:109 drivers/gpu/drm/drm_panel.c:153
#: drivers/gpu/drm/drm_panel.c:205 drivers/gpu/drm/drm_panel.c:241
#: drivers/gpu/drm/drm_panel.c:284 drivers/gpu/drm/drm_panel.c:320
#: drivers/gpu/drm/drm_panel.c:339 drivers/gpu/drm/drm_panel.c:401
#: drivers/gpu/drm/drm_panel.c:438 drivers/gpu/drm/drm_panel.c:520
#: drivers/gpu/drm/drm_panel.c:542 drivers/gpu/drm/drm_panel.c:590
#: drivers/gpu/drm/drm_panel.c:625 drivers/gpu/drm/drm_panel.c:649
#: ../../../gpu/drm-kms-helpers:221:
#: drivers/gpu/drm/drm_panel_orientation_quirks.c:544
#: ../../../gpu/drm-kms-helpers:224:
#: drivers/gpu/drm/drm_panel_backlight_quirks.c:64
#: ../../../gpu/drm-kms-helpers:233:
#: drivers/gpu/drm/drm_self_refresh_helper.c:138
#: drivers/gpu/drm/drm_self_refresh_helper.c:180
#: drivers/gpu/drm/drm_self_refresh_helper.c:232
#: drivers/gpu/drm/drm_self_refresh_helper.c:270
#: ../../../gpu/drm-kms-helpers:248:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:313
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:825
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:878
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:988
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:1054
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:1091
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:1157
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:1172
#: ../../../gpu/drm-kms-helpers:254:
#: drivers/gpu/drm/display/drm_hdcp_helper.c:263
#: drivers/gpu/drm/display/drm_hdcp_helper.c:330
#: drivers/gpu/drm/display/drm_hdcp_helper.c:398
#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:235
#: include/drm/display/drm_dp_helper.h:282
#: include/drm/display/drm_dp_helper.h:299
#: include/drm/display/drm_dp_helper.h:546
#: include/drm/display/drm_dp_helper.h:575
#: include/drm/display/drm_dp_helper.h:604
#: include/drm/display/drm_dp_helper.h:620
#: include/drm/display/drm_dp_helper.h:636
#: include/drm/display/drm_dp_helper.h:650
#: include/drm/display/drm_dp_helper.h:830 ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:414
#: drivers/gpu/drm/display/drm_dp_helper.c:468
#: drivers/gpu/drm/display/drm_dp_helper.c:652
#: drivers/gpu/drm/display/drm_dp_helper.c:677
#: drivers/gpu/drm/display/drm_dp_helper.c:700
#: drivers/gpu/drm/display/drm_dp_helper.c:728
#: drivers/gpu/drm/display/drm_dp_helper.c:766
#: drivers/gpu/drm/display/drm_dp_helper.c:798
#: drivers/gpu/drm/display/drm_dp_helper.c:813
#: drivers/gpu/drm/display/drm_dp_helper.c:856
#: drivers/gpu/drm/display/drm_dp_helper.c:894
#: drivers/gpu/drm/display/drm_dp_helper.c:937
#: drivers/gpu/drm/display/drm_dp_helper.c:994
#: drivers/gpu/drm/display/drm_dp_helper.c:1008
#: drivers/gpu/drm/display/drm_dp_helper.c:1057
#: drivers/gpu/drm/display/drm_dp_helper.c:1079
#: drivers/gpu/drm/display/drm_dp_helper.c:1114
#: drivers/gpu/drm/display/drm_dp_helper.c:1223
#: drivers/gpu/drm/display/drm_dp_helper.c:1257
#: drivers/gpu/drm/display/drm_dp_helper.c:1304
#: drivers/gpu/drm/display/drm_dp_helper.c:1332
#: drivers/gpu/drm/display/drm_dp_helper.c:1397
#: drivers/gpu/drm/display/drm_dp_helper.c:1440
#: drivers/gpu/drm/display/drm_dp_helper.c:1497
#: drivers/gpu/drm/display/drm_dp_helper.c:1528
#: drivers/gpu/drm/display/drm_dp_helper.c:1557
#: drivers/gpu/drm/display/drm_dp_helper.c:1589
#: drivers/gpu/drm/display/drm_dp_helper.c:1644
#: drivers/gpu/drm/display/drm_dp_helper.c:1657
#: drivers/gpu/drm/display/drm_dp_helper.c:1748
#: drivers/gpu/drm/display/drm_dp_helper.c:1800
#: drivers/gpu/drm/display/drm_dp_helper.c:1824
#: drivers/gpu/drm/display/drm_dp_helper.c:1848
#: drivers/gpu/drm/display/drm_dp_helper.c:2323
#: drivers/gpu/drm/display/drm_dp_helper.c:2336
#: drivers/gpu/drm/display/drm_dp_helper.c:2367
#: drivers/gpu/drm/display/drm_dp_helper.c:2423
#: drivers/gpu/drm/display/drm_dp_helper.c:2436
#: drivers/gpu/drm/display/drm_dp_helper.c:2467
#: drivers/gpu/drm/display/drm_dp_helper.c:2495
#: drivers/gpu/drm/display/drm_dp_helper.c:2614
#: drivers/gpu/drm/display/drm_dp_helper.c:2644
#: drivers/gpu/drm/display/drm_dp_helper.c:2672
#: drivers/gpu/drm/display/drm_dp_helper.c:2699
#: drivers/gpu/drm/display/drm_dp_helper.c:2758
#: drivers/gpu/drm/display/drm_dp_helper.c:2802
#: drivers/gpu/drm/display/drm_dp_helper.c:2864
#: drivers/gpu/drm/display/drm_dp_helper.c:2884
#: drivers/gpu/drm/display/drm_dp_helper.c:2911
#: drivers/gpu/drm/display/drm_dp_helper.c:2939
#: drivers/gpu/drm/display/drm_dp_helper.c:2953
#: drivers/gpu/drm/display/drm_dp_helper.c:2973
#: drivers/gpu/drm/display/drm_dp_helper.c:3014
#: drivers/gpu/drm/display/drm_dp_helper.c:3028
#: drivers/gpu/drm/display/drm_dp_helper.c:3044
#: drivers/gpu/drm/display/drm_dp_helper.c:3060
#: drivers/gpu/drm/display/drm_dp_helper.c:3110
#: drivers/gpu/drm/display/drm_dp_helper.c:3329
#: drivers/gpu/drm/display/drm_dp_helper.c:3354
#: drivers/gpu/drm/display/drm_dp_helper.c:3377
#: drivers/gpu/drm/display/drm_dp_helper.c:3451
#: drivers/gpu/drm/display/drm_dp_helper.c:3490
#: drivers/gpu/drm/display/drm_dp_helper.c:3509
#: drivers/gpu/drm/display/drm_dp_helper.c:3531
#: drivers/gpu/drm/display/drm_dp_helper.c:3588
#: drivers/gpu/drm/display/drm_dp_helper.c:3618
#: drivers/gpu/drm/display/drm_dp_helper.c:3630
#: drivers/gpu/drm/display/drm_dp_helper.c:3654
#: drivers/gpu/drm/display/drm_dp_helper.c:3673
#: drivers/gpu/drm/display/drm_dp_helper.c:3703
#: drivers/gpu/drm/display/drm_dp_helper.c:3868
#: drivers/gpu/drm/display/drm_dp_helper.c:3881
#: drivers/gpu/drm/display/drm_dp_helper.c:3953
#: drivers/gpu/drm/display/drm_dp_helper.c:4033
#: drivers/gpu/drm/display/drm_dp_helper.c:4101
#: drivers/gpu/drm/display/drm_dp_helper.c:4285
#: drivers/gpu/drm/display/drm_dp_helper.c:4389
#: drivers/gpu/drm/display/drm_dp_helper.c:4477
#: drivers/gpu/drm/display/drm_dp_helper.c:4508
#: drivers/gpu/drm/display/drm_dp_helper.c:4592
#: drivers/gpu/drm/display/drm_dp_helper.c:4621
#: ../../../gpu/drm-kms-helpers:278: drivers/gpu/drm/display/drm_dp_cec.c:241
#: drivers/gpu/drm/display/drm_dp_cec.c:431
#: drivers/gpu/drm/display/drm_dp_cec.c:453 ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:55
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:119
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:194
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:266
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:310
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:352
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:411
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:440
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:488
#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:987
#: include/drm/display/drm_dp_mst_helper.h:1027
#: include/drm/display/drm_dp_mst_helper.h:1046
#: include/drm/display/drm_dp_mst_helper.h:1063
#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1498
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1523
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:2237
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:2259
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3312
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3366
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3397
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3432
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3586
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3613
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3641
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3730
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3757
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3781
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4216
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4268
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4296
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4352
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4384
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4413
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4504
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4587
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4630
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4680
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4739
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4760
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4783
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4904
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5233
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5408
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5469
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5524
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5586
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5632
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5651
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5675
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5699
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5768
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:6052
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:6068
#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1453
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1471
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1743
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1782
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1808
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1858
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1896
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1921
#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:214
#: include/drm/drm_mipi_dbi.h:243 ../../../gpu/drm-kms-helpers:336:
#: drivers/gpu/drm/drm_mipi_dbi.c:127 drivers/gpu/drm/drm_mipi_dbi.c:150
#: drivers/gpu/drm/drm_mipi_dbi.c:199 drivers/gpu/drm/drm_mipi_dbi.c:323
#: drivers/gpu/drm/drm_mipi_dbi.c:341 drivers/gpu/drm/drm_mipi_dbi.c:375
#: drivers/gpu/drm/drm_mipi_dbi.c:438 drivers/gpu/drm/drm_mipi_dbi.c:464
#: drivers/gpu/drm/drm_mipi_dbi.c:484 drivers/gpu/drm/drm_mipi_dbi.c:500
#: drivers/gpu/drm/drm_mipi_dbi.c:513 drivers/gpu/drm/drm_mipi_dbi.c:531
#: drivers/gpu/drm/drm_mipi_dbi.c:595 drivers/gpu/drm/drm_mipi_dbi.c:678
#: drivers/gpu/drm/drm_mipi_dbi.c:709 drivers/gpu/drm/drm_mipi_dbi.c:727
#: drivers/gpu/drm/drm_mipi_dbi.c:810 drivers/gpu/drm/drm_mipi_dbi.c:826
#: drivers/gpu/drm/drm_mipi_dbi.c:846 drivers/gpu/drm/drm_mipi_dbi.c:1239
#: drivers/gpu/drm/drm_mipi_dbi.c:1324 drivers/gpu/drm/drm_mipi_dbi.c:1501
#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:232
#: include/drm/drm_mipi_dsi.h:390 include/drm/drm_mipi_dsi.h:411
#: include/drm/drm_mipi_dsi.h:426 ../../../gpu/drm-kms-helpers:348:
#: drivers/gpu/drm/drm_mipi_dsi.c:108 drivers/gpu/drm/drm_mipi_dsi.c:198
#: drivers/gpu/drm/drm_mipi_dsi.c:249 drivers/gpu/drm/drm_mipi_dsi.c:266
#: drivers/gpu/drm/drm_mipi_dsi.c:308 drivers/gpu/drm/drm_mipi_dsi.c:376
#: drivers/gpu/drm/drm_mipi_dsi.c:398 drivers/gpu/drm/drm_mipi_dsi.c:425
#: drivers/gpu/drm/drm_mipi_dsi.c:467 drivers/gpu/drm/drm_mipi_dsi.c:505
#: drivers/gpu/drm/drm_mipi_dsi.c:538 drivers/gpu/drm/drm_mipi_dsi.c:591
#: drivers/gpu/drm/drm_mipi_dsi.c:611 drivers/gpu/drm/drm_mipi_dsi.c:658
#: drivers/gpu/drm/drm_mipi_dsi.c:696 drivers/gpu/drm/drm_mipi_dsi.c:712
#: drivers/gpu/drm/drm_mipi_dsi.c:737 drivers/gpu/drm/drm_mipi_dsi.c:780
#: drivers/gpu/drm/drm_mipi_dsi.c:808 drivers/gpu/drm/drm_mipi_dsi.c:836
#: drivers/gpu/drm/drm_mipi_dsi.c:882 drivers/gpu/drm/drm_mipi_dsi.c:917
#: drivers/gpu/drm/drm_mipi_dsi.c:959 drivers/gpu/drm/drm_mipi_dsi.c:987
#: drivers/gpu/drm/drm_mipi_dsi.c:1015 drivers/gpu/drm/drm_mipi_dsi.c:1059
#: drivers/gpu/drm/drm_mipi_dsi.c:1084 drivers/gpu/drm/drm_mipi_dsi.c:1104
#: drivers/gpu/drm/drm_mipi_dsi.c:1124 drivers/gpu/drm/drm_mipi_dsi.c:1149
#: drivers/gpu/drm/drm_mipi_dsi.c:1174 drivers/gpu/drm/drm_mipi_dsi.c:1195
#: drivers/gpu/drm/drm_mipi_dsi.c:1216 drivers/gpu/drm/drm_mipi_dsi.c:1237
#: drivers/gpu/drm/drm_mipi_dsi.c:1258 drivers/gpu/drm/drm_mipi_dsi.c:1285
#: drivers/gpu/drm/drm_mipi_dsi.c:1312 drivers/gpu/drm/drm_mipi_dsi.c:1337
#: drivers/gpu/drm/drm_mipi_dsi.c:1361 drivers/gpu/drm/drm_mipi_dsi.c:1386
#: drivers/gpu/drm/drm_mipi_dsi.c:1412 drivers/gpu/drm/drm_mipi_dsi.c:1438
#: drivers/gpu/drm/drm_mipi_dsi.c:1461 drivers/gpu/drm/drm_mipi_dsi.c:1490
#: drivers/gpu/drm/drm_mipi_dsi.c:1517 drivers/gpu/drm/drm_mipi_dsi.c:1548
#: drivers/gpu/drm/drm_mipi_dsi.c:1564 drivers/gpu/drm/drm_mipi_dsi.c:1589
#: drivers/gpu/drm/drm_mipi_dsi.c:1614 drivers/gpu/drm/drm_mipi_dsi.c:1639
#: drivers/gpu/drm/drm_mipi_dsi.c:1664 drivers/gpu/drm/drm_mipi_dsi.c:1689
#: drivers/gpu/drm/drm_mipi_dsi.c:1716 drivers/gpu/drm/drm_mipi_dsi.c:1741
#: drivers/gpu/drm/drm_mipi_dsi.c:1764 drivers/gpu/drm/drm_mipi_dsi.c:1789
#: drivers/gpu/drm/drm_mipi_dsi.c:1817 drivers/gpu/drm/drm_mipi_dsi.c:1845
#: drivers/gpu/drm/drm_mipi_dsi.c:1874 drivers/gpu/drm/drm_mipi_dsi.c:1903
#: drivers/gpu/drm/drm_mipi_dsi.c:1957 drivers/gpu/drm/drm_mipi_dsi.c:1981
#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:40
#: drivers/gpu/drm/display/drm_dsc_helper.c:60
#: drivers/gpu/drm/display/drm_dsc_helper.c:87
#: drivers/gpu/drm/display/drm_dsc_helper.c:280
#: drivers/gpu/drm/display/drm_dsc_helper.c:308
#: drivers/gpu/drm/display/drm_dsc_helper.c:1238
#: drivers/gpu/drm/display/drm_dsc_helper.c:1308
#: drivers/gpu/drm/display/drm_dsc_helper.c:1446
#: drivers/gpu/drm/display/drm_dsc_helper.c:1459
#: drivers/gpu/drm/display/drm_dsc_helper.c:1471
#: drivers/gpu/drm/display/drm_dsc_helper.c:1557
#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:291
#: drivers/gpu/drm/drm_probe_helper.c:323
#: drivers/gpu/drm/drm_probe_helper.c:390
#: drivers/gpu/drm/drm_probe_helper.c:504
#: drivers/gpu/drm/drm_probe_helper.c:718
#: drivers/gpu/drm/drm_probe_helper.c:744
#: drivers/gpu/drm/drm_probe_helper.c:858
#: drivers/gpu/drm/drm_probe_helper.c:878
#: drivers/gpu/drm/drm_probe_helper.c:909
#: drivers/gpu/drm/drm_probe_helper.c:937
#: drivers/gpu/drm/drm_probe_helper.c:957
#: drivers/gpu/drm/drm_probe_helper.c:1018
#: drivers/gpu/drm/drm_probe_helper.c:1059
#: drivers/gpu/drm/drm_probe_helper.c:1126
#: drivers/gpu/drm/drm_probe_helper.c:1150
#: drivers/gpu/drm/drm_probe_helper.c:1190
#: drivers/gpu/drm/drm_probe_helper.c:1226
#: drivers/gpu/drm/drm_probe_helper.c:1309 ../../../gpu/drm-kms-helpers:375:
#: include/drm/drm_edid.h:378 include/drm/drm_edid.h:394
#: include/drm/drm_edid.h:415 ../../../gpu/drm-kms-helpers:378:
#: drivers/gpu/drm/drm_edid.c:1779 drivers/gpu/drm/drm_edid.c:2036
#: drivers/gpu/drm/drm_edid.c:2062 drivers/gpu/drm/drm_edid.c:2301
#: drivers/gpu/drm/drm_edid.c:2474 drivers/gpu/drm/drm_edid.c:2517
#: drivers/gpu/drm/drm_edid.c:2550 drivers/gpu/drm/drm_edid.c:2567
#: drivers/gpu/drm/drm_edid.c:2581 drivers/gpu/drm/drm_edid.c:2596
#: drivers/gpu/drm/drm_edid.c:2623 drivers/gpu/drm/drm_edid.c:2669
#: drivers/gpu/drm/drm_edid.c:2706 drivers/gpu/drm/drm_edid.c:2729
#: drivers/gpu/drm/drm_edid.c:2757 drivers/gpu/drm/drm_edid.c:2786
#: drivers/gpu/drm/drm_edid.c:2826 drivers/gpu/drm/drm_edid.c:2873
#: drivers/gpu/drm/drm_edid.c:2902 drivers/gpu/drm/drm_edid.c:2931
#: drivers/gpu/drm/drm_edid.c:4360 drivers/gpu/drm/drm_edid.c:4633
#: drivers/gpu/drm/drm_edid.c:5543 drivers/gpu/drm/drm_edid.c:5604
#: drivers/gpu/drm/drm_edid.c:5785 drivers/gpu/drm/drm_edid.c:5830
#: drivers/gpu/drm/drm_edid.c:5851 drivers/gpu/drm/drm_edid.c:5914
#: drivers/gpu/drm/drm_edid.c:5975 drivers/gpu/drm/drm_edid.c:5996
#: drivers/gpu/drm/drm_edid.c:7070 drivers/gpu/drm/drm_edid.c:7095
#: drivers/gpu/drm/drm_edid.c:7124 drivers/gpu/drm/drm_edid.c:7149
#: drivers/gpu/drm/drm_edid.c:7181 drivers/gpu/drm/drm_edid.c:7287
#: drivers/gpu/drm/drm_edid.c:7365 drivers/gpu/drm/drm_edid.c:7447
#: drivers/gpu/drm/drm_edid.c:7584 ../../../gpu/drm-kms-helpers:381:
#: include/drm/drm_eld.h:76 include/drm/drm_eld.h:88 include/drm/drm_eld.h:107
#: include/drm/drm_eld.h:117 include/drm/drm_eld.h:130
#: include/drm/drm_eld.h:145 include/drm/drm_eld.h:157
#: ../../../gpu/drm-kms-helpers:384: drivers/gpu/drm/drm_eld.c:18
#: drivers/gpu/drm/drm_eld.c:41 ../../../gpu/drm-kms-helpers:393:
#: include/drm/display/drm_scdc_helper.h:44
#: include/drm/display/drm_scdc_helper.h:62 ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:63
#: drivers/gpu/drm/display/drm_scdc_helper.c:103
#: drivers/gpu/drm/display/drm_scdc_helper.c:149
#: drivers/gpu/drm/display/drm_scdc_helper.c:176
#: drivers/gpu/drm/display/drm_scdc_helper.c:219
#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:59
#: drivers/video/hdmi.c:86 drivers/video/hdmi.c:101 drivers/video/hdmi.c:189
#: drivers/video/hdmi.c:219 drivers/video/hdmi.c:257 drivers/video/hdmi.c:272
#: drivers/video/hdmi.c:323 drivers/video/hdmi.c:353 drivers/video/hdmi.c:381
#: drivers/video/hdmi.c:418 drivers/video/hdmi.c:464 drivers/video/hdmi.c:494
#: drivers/video/hdmi.c:531 drivers/video/hdmi.c:585 drivers/video/hdmi.c:602
#: drivers/video/hdmi.c:662 drivers/video/hdmi.c:702 drivers/video/hdmi.c:733
#: drivers/video/hdmi.c:746 drivers/video/hdmi.c:816 drivers/video/hdmi.c:902
#: drivers/video/hdmi.c:951 drivers/video/hdmi.c:1524 drivers/video/hdmi.c:1790
#: drivers/video/hdmi.c:1881 ../../../gpu/drm-kms-helpers:419:
#: include/drm/drm_rect.h:55 include/drm/drm_rect.h:75
#: include/drm/drm_rect.h:85 include/drm/drm_rect.h:98
#: include/drm/drm_rect.h:115 include/drm/drm_rect.h:135
#: include/drm/drm_rect.h:152 include/drm/drm_rect.h:166
#: include/drm/drm_rect.h:182 include/drm/drm_rect.h:194
#: include/drm/drm_rect.h:206 include/drm/drm_rect.h:218
#: include/drm/drm_rect.h:233 include/drm/drm_rect.h:246
#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:37
#: drivers/gpu/drm/drm_rect.c:82 drivers/gpu/drm/drm_rect.c:156
#: drivers/gpu/drm/drm_rect.c:191 drivers/gpu/drm/drm_rect.c:226
#: drivers/gpu/drm/drm_rect.c:241 drivers/gpu/drm/drm_rect.c:307
#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:500
#: include/drm/drm_modeset_helper_vtables.h:849
#: include/drm/drm_modeset_helper_vtables.h:1189
#: include/drm/drm_modeset_helper_vtables.h:1497
#: ../../../gpu/drm-kms-helpers:434: drivers/gpu/drm/drm_flip_work.c:61
#: drivers/gpu/drm/drm_flip_work.c:84 drivers/gpu/drm/drm_flip_work.c:132
#: drivers/gpu/drm/drm_flip_work.c:153 ../../../gpu/drm-kms-helpers:443:
#: drivers/gpu/drm/drm_modeset_helper.c:46
#: drivers/gpu/drm/drm_modeset_helper.c:78
#: drivers/gpu/drm/drm_modeset_helper.c:123
#: drivers/gpu/drm/drm_modeset_helper.c:184
#: drivers/gpu/drm/drm_modeset_helper.c:231 ../../../gpu/drm-kms-helpers:452:
#: drivers/gpu/drm/drm_of.c:29 drivers/gpu/drm/drm_of.c:54
#: drivers/gpu/drm/drm_of.c:87 drivers/gpu/drm/drm_of.c:105
#: drivers/gpu/drm/drm_of.c:225 drivers/gpu/drm/drm_of.c:364
#: drivers/gpu/drm/drm_of.c:414 drivers/gpu/drm/drm_of.c:463
#: drivers/gpu/drm/drm_of.c:502 drivers/gpu/drm/drm_of.c:531
#: drivers/gpu/drm/drm_of.c:565 ../../../gpu/drm-kms-helpers:461:
#: drivers/gpu/drm/drm_plane_helper.c:147
#: drivers/gpu/drm/drm_plane_helper.c:249
#: drivers/gpu/drm/drm_plane_helper.c:274 ../../../gpu/drm-kms-helpers:470:
#: drivers/gpu/drm/drm_crtc_helper.c:101 drivers/gpu/drm/drm_crtc_helper.c:142
#: drivers/gpu/drm/drm_crtc_helper.c:217 drivers/gpu/drm/drm_crtc_helper.c:268
#: drivers/gpu/drm/drm_crtc_helper.c:442 drivers/gpu/drm/drm_crtc_helper.c:519
#: drivers/gpu/drm/drm_crtc_helper.c:893 drivers/gpu/drm/drm_crtc_helper.c:961
#: drivers/gpu/drm/drm_crtc_helper.c:1036 ../../../gpu/drm-kms-helpers:485:
#: drivers/gpu/drm/drm_privacy_screen.c:50
#: drivers/gpu/drm/drm_privacy_screen.c:69
#: drivers/gpu/drm/drm_privacy_screen.c:107
#: drivers/gpu/drm/drm_privacy_screen.c:184
#: drivers/gpu/drm/drm_privacy_screen.c:201
#: drivers/gpu/drm/drm_privacy_screen.c:246
#: drivers/gpu/drm/drm_privacy_screen.c:266
#: drivers/gpu/drm/drm_privacy_screen.c:293
#: drivers/gpu/drm/drm_privacy_screen.c:384
#: drivers/gpu/drm/drm_privacy_screen.c:434
#: drivers/gpu/drm/drm_privacy_screen.c:459 ../../../gpu/drm-kms-helpers:65:
#: include/drm/drm_atomic_helper.h:172 include/drm/drm_atomic_helper.h:186
#: include/drm/drm_atomic_helper.h:199 include/drm/drm_atomic_helper.h:220
#: include/drm/drm_atomic_helper.h:246 ../../../gpu/drm-kms-helpers:68:
#: drivers/gpu/drm/drm_atomic_helper.c:607
#: drivers/gpu/drm/drm_atomic_helper.c:833
#: drivers/gpu/drm/drm_atomic_helper.c:874
#: drivers/gpu/drm/drm_atomic_helper.c:973
#: drivers/gpu/drm/drm_atomic_helper.c:1004
#: drivers/gpu/drm/drm_atomic_helper.c:1074
#: drivers/gpu/drm/drm_atomic_helper.c:1350
#: drivers/gpu/drm/drm_atomic_helper.c:1429
#: drivers/gpu/drm/drm_atomic_helper.c:1512
#: drivers/gpu/drm/drm_atomic_helper.c:1666
#: drivers/gpu/drm/drm_atomic_helper.c:1734
#: drivers/gpu/drm/drm_atomic_helper.c:1788
#: drivers/gpu/drm/drm_atomic_helper.c:1848
#: drivers/gpu/drm/drm_atomic_helper.c:1889
#: drivers/gpu/drm/drm_atomic_helper.c:1922
#: drivers/gpu/drm/drm_atomic_helper.c:2014
#: drivers/gpu/drm/drm_atomic_helper.c:2098
#: drivers/gpu/drm/drm_atomic_helper.c:2146
#: drivers/gpu/drm/drm_atomic_helper.c:2385
#: drivers/gpu/drm/drm_atomic_helper.c:2544
#: drivers/gpu/drm/drm_atomic_helper.c:2593
#: drivers/gpu/drm/drm_atomic_helper.c:2634
#: drivers/gpu/drm/drm_atomic_helper.c:2683
#: drivers/gpu/drm/drm_atomic_helper.c:2721
#: drivers/gpu/drm/drm_atomic_helper.c:2813
#: drivers/gpu/drm/drm_atomic_helper.c:2851
#: drivers/gpu/drm/drm_atomic_helper.c:2994
#: drivers/gpu/drm/drm_atomic_helper.c:3064
#: drivers/gpu/drm/drm_atomic_helper.c:3109
#: drivers/gpu/drm/drm_atomic_helper.c:3138
#: drivers/gpu/drm/drm_atomic_helper.c:3286
#: drivers/gpu/drm/drm_atomic_helper.c:3353
#: drivers/gpu/drm/drm_atomic_helper.c:3395
#: drivers/gpu/drm/drm_atomic_helper.c:3439
#: drivers/gpu/drm/drm_atomic_helper.c:3523
#: drivers/gpu/drm/drm_atomic_helper.c:3571
#: drivers/gpu/drm/drm_atomic_helper.c:3602
#: drivers/gpu/drm/drm_atomic_helper.c:3690
#: drivers/gpu/drm/drm_atomic_helper.c:3746
#: drivers/gpu/drm/drm_atomic_helper.c:3791
#: drivers/gpu/drm/drm_atomic_helper.c:3865
#: drivers/gpu/drm/drm_atomic_helper.c:3909
#: drivers/gpu/drm/drm_atomic_helper.c:3961 ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:70
#: drivers/gpu/drm/drm_atomic_state_helper.c:86
#: drivers/gpu/drm/drm_atomic_state_helper.c:112
#: drivers/gpu/drm/drm_atomic_state_helper.c:131
#: drivers/gpu/drm/drm_atomic_state_helper.c:168
#: drivers/gpu/drm/drm_atomic_state_helper.c:191
#: drivers/gpu/drm/drm_atomic_state_helper.c:227
#: drivers/gpu/drm/drm_atomic_state_helper.c:243
#: drivers/gpu/drm/drm_atomic_state_helper.c:301
#: drivers/gpu/drm/drm_atomic_state_helper.c:323
#: drivers/gpu/drm/drm_atomic_state_helper.c:342
#: drivers/gpu/drm/drm_atomic_state_helper.c:365
#: drivers/gpu/drm/drm_atomic_state_helper.c:388
#: drivers/gpu/drm/drm_atomic_state_helper.c:411
#: drivers/gpu/drm/drm_atomic_state_helper.c:427
#: drivers/gpu/drm/drm_atomic_state_helper.c:443
#: drivers/gpu/drm/drm_atomic_state_helper.c:466
#: drivers/gpu/drm/drm_atomic_state_helper.c:487
#: drivers/gpu/drm/drm_atomic_state_helper.c:505
#: drivers/gpu/drm/drm_atomic_state_helper.c:580
#: drivers/gpu/drm/drm_atomic_state_helper.c:629
#: drivers/gpu/drm/drm_atomic_state_helper.c:654
#: drivers/gpu/drm/drm_atomic_state_helper.c:677
#: drivers/gpu/drm/drm_atomic_state_helper.c:701
#: drivers/gpu/drm/drm_atomic_state_helper.c:717
#: drivers/gpu/drm/drm_atomic_state_helper.c:732
#: drivers/gpu/drm/drm_atomic_state_helper.c:749
#: drivers/gpu/drm/drm_atomic_state_helper.c:774
#: drivers/gpu/drm/drm_atomic_state_helper.c:792
#: drivers/gpu/drm/drm_atomic_state_helper.c:810
#: ../../../gpu/drm-kms-helpers:89: include/drm/drm_gem_atomic_helper.h:86
#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:123
#: drivers/gpu/drm/drm_gem_atomic_helper.c:210
#: drivers/gpu/drm/drm_gem_atomic_helper.c:238
#: drivers/gpu/drm/drm_gem_atomic_helper.c:273
#: drivers/gpu/drm/drm_gem_atomic_helper.c:287
#: drivers/gpu/drm/drm_gem_atomic_helper.c:307
#: drivers/gpu/drm/drm_gem_atomic_helper.c:323
#: drivers/gpu/drm/drm_gem_atomic_helper.c:348
#: drivers/gpu/drm/drm_gem_atomic_helper.c:375
#: drivers/gpu/drm/drm_gem_atomic_helper.c:397
#: drivers/gpu/drm/drm_gem_atomic_helper.c:417
#: drivers/gpu/drm/drm_gem_atomic_helper.c:435
#: drivers/gpu/drm/drm_gem_atomic_helper.c:448
#: drivers/gpu/drm/drm_gem_atomic_helper.c:467
msgid "**Parameters**"
msgstr ""

#: ../../../gpu/drm-kms-helpers:233:
#: drivers/gpu/drm/drm_self_refresh_helper.c:234
#: drivers/gpu/drm/drm_self_refresh_helper.c:272
#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2466
#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:1128
#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:502
#: ../../../gpu/drm-kms-helpers:443: drivers/gpu/drm/drm_modeset_helper.c:122
#: ../../../gpu/drm-kms-helpers:461: drivers/gpu/drm/drm_plane_helper.c:146
#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:144
#: drivers/gpu/drm/drm_crtc_helper.c:270 drivers/gpu/drm/drm_crtc_helper.c:444
#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3285
#: drivers/gpu/drm/drm_atomic_helper.c:3525
#: drivers/gpu/drm/drm_atomic_helper.c:3867
#: drivers/gpu/drm/drm_atomic_helper.c:3911 ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:69
#: drivers/gpu/drm/drm_atomic_state_helper.c:88
#: drivers/gpu/drm/drm_atomic_state_helper.c:114
#: drivers/gpu/drm/drm_atomic_state_helper.c:133
#: drivers/gpu/drm/drm_atomic_state_helper.c:170
#: drivers/gpu/drm/drm_atomic_state_helper.c:229
msgid "``struct drm_crtc *crtc``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:497
#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3520
#: drivers/gpu/drm/drm_atomic_helper.c:3862
#: drivers/gpu/drm/drm_atomic_helper.c:3906
msgid "DRM CRTC"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:499
msgid "``const struct drm_crtc_helper_funcs *funcs``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:498
msgid "helper vtable to set for **crtc**"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:507
msgid "helper operations for encoders"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:515
msgid ""
"Callback to control power levels on the encoder.  If the mode passed in is "
"unsupported, the provider must use the next lowest power level. This is used "
"by the legacy encoder helpers to implement DPMS functionality in "
"drm_helper_connector_dpms()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:520
msgid ""
"This callback is also used to disable an encoder by calling it with "
"DRM_MODE_DPMS_OFF if the **disable** hook isn't used."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:523
msgid ""
"This callback is used by the legacy CRTC helpers.  Atomic helpers also "
"support using this hook for enabling and disabling an encoder to facilitate "
"transitions to atomic, but it is deprecated. Instead **enable** and "
"**disable** should be used."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:533
msgid ""
"This callback is used to check if a specific mode is valid in this encoder. "
"This should be implemented if the encoder has some sort of restriction in "
"the modes it can display. For example, a given encoder may be responsible to "
"set a clock value. If the clock can not produce all the values for the "
"available modes then this callback can be used to restrict the number of "
"modes to only the ones that can be displayed."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:567
msgid ""
"This callback is used to validate and adjust a mode. The parameter mode is "
"the display mode that should be fed to the next element in the display "
"chain, either the final :c:type:`drm_connector` or a :c:type:`drm_bridge`. "
"The parameter adjusted_mode is the input mode the encoder requires. It can "
"be modified by this callback and does not need to match mode. See also :c:"
"type:`drm_crtc_state.adjusted_mode <drm_crtc_state>` for more details."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:574
msgid ""
"This function is used by both legacy CRTC helpers and atomic helpers. This "
"hook is optional."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:588
msgid ""
"Atomic drivers which need to inspect and adjust more state should instead "
"use the **atomic_check** callback. If **atomic_check** is used, this hook "
"isn't called since **atomic_check** allows a strict superset of the "
"functionality of **mode_fixup**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:593
#: include/drm/drm_modeset_helper_vtables.h:825
msgid ""
"Also beware that userspace can request its own custom modes, neither core "
"nor helpers filter modes to the list of probe modes reported by the "
"GETCONNECTOR IOCTL and stored in :c:type:`drm_connector.modes "
"<drm_connector>`. To ensure that modes are filtered consistently put any "
"encoder constraints and limits checks into **mode_valid**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:611
msgid ""
"This callback should prepare the encoder for a subsequent modeset, which in "
"practice means the driver should disable the encoder if it is running. Most "
"drivers ended up implementing this by calling their **dpms** hook with "
"DRM_MODE_DPMS_OFF."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:616
msgid ""
"This callback is used by the legacy CRTC helpers.  Atomic helpers also "
"support using this hook for disabling an encoder to facilitate transitions "
"to atomic, but it is deprecated. Instead **disable** should be used."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:626
msgid ""
"This callback should commit the new mode on the encoder after a modeset, "
"which in practice means the driver should enable the encoder.  Most drivers "
"ended up implementing this by calling their **dpms** hook with "
"DRM_MODE_DPMS_ON."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:631
msgid ""
"This callback is used by the legacy CRTC helpers.  Atomic helpers also "
"support using this hook for enabling an encoder to facilitate transitions to "
"atomic, but it is deprecated. Instead **enable** should be used."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:641
#: include/drm/drm_modeset_helper_vtables.h:667
msgid "This callback is used to update the display mode of an encoder."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:643
msgid ""
"Note that the display pipe is completely off when this function is called. "
"Drivers which need hardware to be running before they program the new "
"display mode (because they implement runtime PM) should not use this hook, "
"because the helper library calls it only once and not every time the display "
"pipeline is suspend using either DPMS or the new \"ACTIVE\" property. Such "
"drivers should instead move all their encoder setup into the **enable** "
"callback."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:651
msgid ""
"This callback is used both by the legacy CRTC helpers and the atomic modeset "
"helpers. It is optional in the atomic helpers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:656
msgid ""
"If the driver uses the atomic modeset helpers and needs to inspect the "
"connector state or connector display info during mode setting, "
"**atomic_mode_set** can be used instead."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:666
msgid "``atomic_mode_set``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:669
msgid ""
"Note that the display pipe is completely off when this function is called. "
"Drivers which need hardware to be running before they program the new "
"display mode (because they implement runtime PM) should not use this hook, "
"because the helper library calls it only once and not every time the display "
"pipeline is suspended using either DPMS or the new \"ACTIVE\" property. Such "
"drivers should instead move all their encoder setup into the **enable** "
"callback."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:677
msgid ""
"This callback is used by the atomic modeset helpers in place of the "
"**mode_set** callback, if set by the driver. It is optional and should be "
"used instead of **mode_set** if the driver needs to inspect the connector "
"state or display info, since there is no direct way to go from the encoder "
"to the current connector."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:650
#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:689
msgid "``detect``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:690
msgid ""
"This callback can be used by drivers who want to do detection on the encoder "
"object instead of in connector functions."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:693
msgid ""
"It is not used by any helper and therefore has purely driver-specific "
"semantics. New drivers shouldn't use this and instead just implement their "
"own private callbacks."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:697
#: include/drm/drm_modeset_helper_vtables.h:1441
msgid "FIXME:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:699
msgid ""
"This should just be converted into a pile of driver vfuncs. Currently "
"radeon, amdgpu and nouveau are using it."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:708
msgid ""
"This callback should be used to disable the encoder. With the atomic drivers "
"it is called before this encoder's CRTC has been shut off using their own :c:"
"type:`drm_crtc_helper_funcs.atomic_disable <drm_crtc_helper_funcs>` hook. If "
"that sequence is too simple drivers can just add their own driver private "
"encoder hooks and call them from CRTC's callback by looping over all "
"encoders connected to it using for_each_encoder_on_crtc()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:715
msgid ""
"This callback is a variant of **disable** that provides the atomic state to "
"the driver. If **atomic_disable** is implemented, **disable** is not called "
"by the helpers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:719
msgid ""
"This hook is only used by atomic helpers. Atomic drivers don't need to "
"implement it if there's no need to disable anything at the encoder level. To "
"ensure that runtime PM handling (using either DPMS or the new \"ACTIVE\" "
"property) works **atomic_disable** must be the inverse of **atomic_enable**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:731
msgid ""
"This callback should be used to enable the encoder. It is called after this "
"encoder's CRTC has been enabled using their own :c:type:"
"`drm_crtc_helper_funcs.atomic_enable <drm_crtc_helper_funcs>` hook. If that "
"sequence is too simple drivers can just add their own driver private encoder "
"hooks and call them from CRTC's callback by looping over all encoders "
"connected to it using for_each_encoder_on_crtc()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:738
msgid ""
"This callback is a variant of **enable** that provides the atomic state to "
"the driver. If **atomic_enable** is implemented, **enable** is not called by "
"the helpers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:742
msgid ""
"This hook is only used by atomic helpers, it is the opposite of "
"**atomic_disable**. Atomic drivers don't need to implement it if there's no "
"need to enable anything at the encoder level. To ensure that runtime PM "
"handling works **atomic_enable** must be the inverse of **atomic_disable**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:754
msgid ""
"This callback should be used to disable the encoder. With the atomic drivers "
"it is called before this encoder's CRTC has been shut off using their own :c:"
"type:`drm_crtc_helper_funcs.disable <drm_crtc_helper_funcs>` hook.  If that "
"sequence is too simple drivers can just add their own driver private encoder "
"hooks and call them from CRTC's callback by looping over all encoders "
"connected to it using for_each_encoder_on_crtc()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:761
msgid ""
"This hook is used both by legacy CRTC helpers and atomic helpers. Atomic "
"drivers don't need to implement it if there's no need to disable anything at "
"the encoder level. To ensure that runtime PM handling (using either DPMS or "
"the new \"ACTIVE\" property) works **disable** must be the inverse of "
"**enable** for atomic drivers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:767
msgid ""
"For atomic drivers also consider **atomic_disable** and save yourself from "
"having to read the NOTE below!"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:772
msgid ""
"With legacy CRTC helpers there's a big semantic difference between "
"**disable** and other hooks (like **prepare** or **dpms**) used to shut down "
"a encoder: **disable** is only called when also logically disabling the "
"display pipeline and needs to release any resources acquired in **mode_set** "
"(like shared PLLs, or again release pinned framebuffers)."
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:56
#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:322
#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:84
#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:786
msgid "``enable``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:787
msgid ""
"This callback should be used to enable the encoder. With the atomic drivers "
"it is called after this encoder's CRTC has been enabled using their own :c:"
"type:`drm_crtc_helper_funcs.enable <drm_crtc_helper_funcs>` hook.  If that "
"sequence is too simple drivers can just add their own driver private encoder "
"hooks and call them from CRTC's callback by looping over all encoders "
"connected to it using for_each_encoder_on_crtc()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:794
msgid ""
"This hook is only used by atomic helpers, it is the opposite of **disable**. "
"Atomic drivers don't need to implement it if there's no need to enable "
"anything at the encoder level. To ensure that runtime PM handling (using "
"either DPMS or the new \"ACTIVE\" property) works **enable** must be the "
"inverse of **disable** for atomic drivers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:805
msgid ""
"This callback is used to validate encoder state for atomic drivers. Since "
"the encoder is the object connecting the CRTC and connector it gets passed "
"both states, to be able to validate interactions and update the CRTC to "
"match what the encoder needs for the requested connector."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:811
msgid ""
"Since this provides a strict superset of the functionality of **mode_fixup** "
"(the requested and adjusted modes are both available through the passed in :"
"c:type:`struct drm_crtc_state <drm_crtc_state>`) **mode_fixup** is not "
"called when **atomic_check** is implemented."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:816
msgid "This function is used by the atomic helpers, but it is optional."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:820
#: include/drm/drm_modeset_helper_vtables.h:1088
msgid ""
"This function is called in the check phase of an atomic update. The driver "
"is not allowed to change anything outside of the free-standing state objects "
"passed-in or assembled in the overall :c:type:`drm_atomic_state` update "
"tracking structure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:845
msgid "sets the helper vtable for an encoder"
msgstr ""

#: ../../../gpu/drm-kms-helpers:104: drivers/gpu/drm/drm_simple_kms_helper.c:48
#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1387
#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:392
#: ../../../gpu/drm-kms-helpers:198:
#: drivers/gpu/drm/display/drm_bridge_connector.c:625
#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:851
#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:103
msgid "``struct drm_encoder *encoder``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:388
#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:846
msgid "DRM encoder"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:848
msgid "``const struct drm_encoder_helper_funcs *funcs``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:847
msgid "helper vtable to set for **encoder**"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:856
msgid "helper operations for connectors"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:667
#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:111
#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:863
msgid "``get_modes``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:864
msgid ""
"This function should fill in all modes currently valid for the sink into "
"the :c:type:`drm_connector.probed_modes <drm_connector>` list. It should "
"also update the EDID property by calling "
"drm_connector_update_edid_property()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:868
msgid ""
"The usual way to implement this is to cache the EDID retrieved in the probe "
"callback somewhere in the driver-private connector structure. In this "
"function drivers then parse the modes in the EDID and add them by calling "
"drm_add_edid_modes(). But connectors that drive a fixed panel can also "
"manually add specific modes using drm_mode_probed_add(). Drivers which "
"manually add modes should also make sure that the :c:type:`drm_connector."
"display_info <drm_connector>`, :c:type:`drm_connector.width_mm "
"<drm_connector>` and :c:type:`drm_connector.height_mm <drm_connector>` "
"fields are filled in."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:878
msgid ""
"Note that the caller function will automatically add standard VESA DMT modes "
"up to 1024x768 if the .get_modes() helper operation returns no mode and if "
"the connector status is connector_status_connected or "
"connector_status_unknown. There is no need to call drm_add_modes_noedid() "
"manually in that case."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:884
msgid ""
"Virtual drivers that just want some standard VESA mode with a given "
"resolution can call drm_add_modes_noedid(), and mark the preferred one using "
"drm_set_preferred_mode()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:888
msgid ""
"This function is only called after the **detect** hook has indicated that a "
"sink is connected and when the EDID isn't overridden through sysfs or the "
"kernel commandline."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:892
msgid ""
"This callback is used by the probe helpers in e.g. "
"drm_helper_probe_single_connector_modes()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:895
#: include/drm/drm_modeset_helper_vtables.h:959
msgid ""
"To avoid races with concurrent connector state updates, the helper libraries "
"always call this with the :c:type:`drm_mode_config.connection_mutex "
"<drm_mode_config>` held. Because of this it's safe to inspect :c:type:"
"`drm_connector->state <drm_connector>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:901
msgid ""
"The number of modes added by calling drm_mode_probed_add(). Return 0 on "
"failures (no modes) instead of negative error codes."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:908
msgid "``detect_ctx``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:909
msgid ""
"Check to see if anything is attached to the connector. The parameter force "
"is set to false whilst polling, true when checking the connector due to a "
"user request. force can be used by the driver to avoid expensive, "
"destructive operations during automated probing."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:914
msgid ""
"This callback is optional, if not implemented the connector will be "
"considered as always being attached."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:917
msgid ""
"This is the atomic version of :c:type:`drm_connector_funcs.detect "
"<drm_connector_funcs>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:919
msgid ""
"To avoid races against concurrent connector state updates, the helper "
"libraries always call this with ctx set to a valid context, and :c:type:"
"`drm_mode_config.connection_mutex <drm_mode_config>` will always be locked "
"with the ctx parameter set to this ctx. This allows taking additional locks "
"as required."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:927
msgid ""
":c:type:`drm_connector_status` indicating the connector's status, or the "
"error code returned by drm_modeset_lock(), -EDEADLK."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:937
#: include/drm/drm_modeset_helper_vtables.h:974
msgid ""
"Callback to validate a mode for a connector, irrespective of the specific "
"display configuration."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:940
#: include/drm/drm_modeset_helper_vtables.h:977
msgid ""
"This callback is used by the probe helpers to filter the mode list (which is "
"usually derived from the EDID data block from the sink). See e.g. "
"drm_helper_probe_single_connector_modes()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:948
msgid ""
"This only filters the mode list supplied to userspace in the GETCONNECTOR "
"IOCTL. Compared to :c:type:`drm_encoder_helper_funcs.mode_valid "
"<drm_encoder_helper_funcs>`, :c:type:`drm_crtc_helper_funcs.mode_valid "
"<drm_crtc_helper_funcs>` and :c:type:`drm_bridge_funcs.mode_valid "
"<drm_bridge_funcs>`, which are also called by the atomic helpers from "
"drm_atomic_helper_check_modeset(). This allows userspace to force and ignore "
"sink constraint (like the pixel clock limits in the screen's EDID), which is "
"useful for e.g. testing, or working around a broken EDID. Any source "
"hardware constraint (which always need to be enforced) therefore should be "
"checked in one of the above callbacks, and not this one here."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:776
#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:965
msgid ""
"Either :c:type:`drm_mode_status.MODE_OK <drm_mode_status>` or one of the "
"failure reasons in :c:type:`enum drm_mode_status <drm_mode_status>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:973
msgid "``mode_valid_ctx``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:981
msgid ""
"This function is optional, and is the atomic version of :c:type:"
"`drm_connector_helper_funcs.mode_valid <drm_connector_helper_funcs>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:984
msgid ""
"To allow for accessing the atomic state of modesetting objects, the helper "
"libraries always call this with ctx set to a valid context, and :c:type:"
"`drm_mode_config.connection_mutex <drm_mode_config>` will always be locked "
"with the ctx parameter set to **ctx**. This allows for taking additional "
"locks as required."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:990
msgid ""
"Even though additional locks may be acquired, this callback is still "
"expected not to take any constraints into account which would be influenced "
"by the currently set display state - such constraints should be handled in "
"the driver's atomic check. For example, if a connector shares display "
"bandwidth with other connectors then it would be ok to validate the minimum "
"bandwidth requirement of a mode against the maximum possible bandwidth of "
"the connector. But it wouldn't be ok to take the current bandwidth usage of "
"other connectors into account, as this would change depending on the display "
"state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1001
msgid ""
"Returns: 0 if :c:type:`drm_connector_helper_funcs.mode_valid_ctx "
"<drm_connector_helper_funcs>` succeeded and wrote the :c:type:`enum "
"drm_mode_status <drm_mode_status>` value to **status**, or a negative error "
"code otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1014
msgid "``best_encoder``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1015
msgid "This function should select the best encoder for the given connector."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1017
msgid ""
"This function is used by both the atomic helpers (in the "
"drm_atomic_helper_check_modeset() function) and in the legacy CRTC helpers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1023
msgid ""
"In atomic drivers this function is called in the check phase of an atomic "
"update. The driver is not allowed to change or inspect anything outside of "
"arguments passed-in. Atomic drivers which need to inspect dynamic "
"configuration state should instead use **atomic_best_encoder**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1029
msgid ""
"You can leave this function to NULL if the connector is only attached to a "
"single encoder. In this case, the core will call "
"drm_connector_get_single_encoder() for you."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1035
#: include/drm/drm_modeset_helper_vtables.h:1061
msgid ""
"Encoder that should be used for the given connector and connector state, or "
"NULL if no suitable encoder exists. Note that the helpers will ensure that "
"encoders aren't used twice, drivers should not check for this."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1044
msgid "``atomic_best_encoder``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1045
msgid ""
"This is the atomic version of **best_encoder** for atomic drivers which need "
"to select the best encoder depending upon the desired configuration and "
"can't select it statically."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1049
msgid ""
"This function is used by drm_atomic_helper_check_modeset(). If it is not "
"implemented, the core will fallback to **best_encoder** (or "
"drm_connector_get_single_encoder() if **best_encoder** is NULL)."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1055
msgid ""
"This function is called in the check phase of an atomic update. The driver "
"is not allowed to change anything outside of the :c:type:`drm_atomic_state` "
"update tracking structure passed in."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1072
msgid ""
"This hook is used to validate connector state. This function is called from :"
"c:type:`drm_atomic_helper_check_modeset`, and is called when a connector "
"property is set, or a modeset on the crtc is forced."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1076
msgid ""
"Because :c:type:`drm_atomic_helper_check_modeset` may be called multiple "
"times, this function should handle being called multiple times as well."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1105
msgid "``atomic_commit``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1106
msgid ""
"This hook is to be used by drivers implementing writeback connectors that "
"need a point when to commit the writeback job to the hardware. The "
"writeback_job to commit is available in the new connector state, in :c:type:"
"`drm_connector_state.writeback_job <drm_connector_state>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1111
#: include/drm/drm_modeset_helper_vtables.h:1562
msgid "This hook is optional."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1113
#: include/drm/drm_modeset_helper_vtables.h:1130
#: include/drm/drm_modeset_helper_vtables.h:1145
msgid "This callback is used by the atomic modeset helpers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1120
msgid "``prepare_writeback_job``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1121
msgid ""
"As writeback jobs contain a framebuffer, drivers may need to prepare and "
"clean them up the same way they can prepare and clean up framebuffers for "
"planes. This optional connector operation is used to support the preparation "
"of writeback jobs. The job prepare operation is called from "
"drm_atomic_helper_prepare_planes() for struct :c:type:"
"`drm_writeback_connector` connectors only."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1128
#: include/drm/drm_modeset_helper_vtables.h:1143
#: include/drm/drm_modeset_helper_vtables.h:1155
#: include/drm/drm_modeset_helper_vtables.h:1171
msgid "This operation is optional."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1136
msgid "``cleanup_writeback_job``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1137
msgid ""
"This optional connector operation is used to support the cleanup of "
"writeback jobs. The job cleanup operation is called from the existing "
"drm_writeback_cleanup_job() function, invoked both when destroying the job "
"as part of an aborted commit, or when the job completes."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1152
msgid "``enable_hpd``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1153
msgid "Enable hot-plug detection for the connector."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1157
msgid "This callback is used by the drm_kms_helper_poll_enable() helpers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1159
#: include/drm/drm_modeset_helper_vtables.h:1175
msgid ""
"This operation does not need to perform any hpd state tracking as the DRM "
"core handles that maintenance and ensures the calls to enable and disable "
"hpd are balanced."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1168
msgid "``disable_hpd``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1169
msgid "Disable hot-plug detection for the connector."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1173
msgid "This callback is used by the drm_kms_helper_poll_disable() helpers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:857
msgid ""
"These functions are used by the atomic and legacy modeset helpers and by the "
"probe helpers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1185
msgid "sets the helper vtable for a connector"
msgstr ""

#: ../../../gpu/drm-kms-helpers:104:
#: drivers/gpu/drm/drm_simple_kms_helper.c:403
#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1231
#: drivers/gpu/drm/drm_bridge.c:1256 drivers/gpu/drm/drm_bridge.c:1279
#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:343
#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:283
#: ../../../gpu/drm-kms-helpers:248:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:315
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:827
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:880
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:990
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:1056
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:1093
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:1159
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:1174
#: ../../../gpu/drm-kms-helpers:254:
#: drivers/gpu/drm/display/drm_hdcp_helper.c:332
#: drivers/gpu/drm/display/drm_hdcp_helper.c:400
#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1802
#: drivers/gpu/drm/display/drm_dp_helper.c:1826
#: drivers/gpu/drm/display/drm_dp_helper.c:3703
#: ../../../gpu/drm-kms-helpers:278: drivers/gpu/drm/display/drm_dp_cec.c:430
#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:2239
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:2261
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4298
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4354
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4386
#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:392
#: drivers/gpu/drm/drm_probe_helper.c:506
#: drivers/gpu/drm/drm_probe_helper.c:746
#: drivers/gpu/drm/drm_probe_helper.c:1020
#: drivers/gpu/drm/drm_probe_helper.c:1152
#: drivers/gpu/drm/drm_probe_helper.c:1192
#: drivers/gpu/drm/drm_probe_helper.c:1228
#: drivers/gpu/drm/drm_probe_helper.c:1311 ../../../gpu/drm-kms-helpers:378:
#: drivers/gpu/drm/drm_edid.c:2303 drivers/gpu/drm/drm_edid.c:2598
#: drivers/gpu/drm/drm_edid.c:2625 drivers/gpu/drm/drm_edid.c:2671
#: drivers/gpu/drm/drm_edid.c:2708 drivers/gpu/drm/drm_edid.c:2875
#: drivers/gpu/drm/drm_edid.c:2904 drivers/gpu/drm/drm_edid.c:5853
#: drivers/gpu/drm/drm_edid.c:7072 drivers/gpu/drm/drm_edid.c:7097
#: drivers/gpu/drm/drm_edid.c:7126 drivers/gpu/drm/drm_edid.c:7151
#: drivers/gpu/drm/drm_edid.c:7183 ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:151
#: drivers/gpu/drm/display/drm_scdc_helper.c:178
#: drivers/gpu/drm/display/drm_scdc_helper.c:221
#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1191
#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:895
#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:835
#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:426
#: drivers/gpu/drm/drm_atomic_state_helper.c:445
#: drivers/gpu/drm/drm_atomic_state_helper.c:468
#: drivers/gpu/drm/drm_atomic_state_helper.c:489
#: drivers/gpu/drm/drm_atomic_state_helper.c:507
#: drivers/gpu/drm/drm_atomic_state_helper.c:582
#: drivers/gpu/drm/drm_atomic_state_helper.c:631
#: drivers/gpu/drm/drm_atomic_state_helper.c:656
#: drivers/gpu/drm/drm_atomic_state_helper.c:703
msgid "``struct drm_connector *connector``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:282
#: ../../../gpu/drm-kms-helpers:248:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:310
#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1186
#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:484
#: drivers/gpu/drm/drm_atomic_state_helper.c:502
msgid "DRM connector"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1188
msgid "``const struct drm_connector_helper_funcs *funcs``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1187
msgid "helper vtable to set for **connector**"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1196
msgid "helper operations for planes"
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:113
#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1202
msgid "``prepare_fb``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1203
msgid ""
"This hook is to prepare a framebuffer for scanout by e.g. pinning its "
"backing storage or relocating it into a contiguous block of VRAM. Other "
"possible preparatory work includes flushing caches."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1207
msgid ""
"This function must not block for outstanding rendering, since it is called "
"in the context of the atomic IOCTL even for async commits to be able to "
"return any errors to userspace. Instead the recommended way is to fill out "
"the :c:type:`drm_plane_state.fence <drm_plane_state>` of the passed-in :c:"
"type:`drm_plane_state`. If the driver doesn't support native fences then "
"equivalent functionality should be implemented through private members in "
"the plane structure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1215
msgid ""
"For GEM drivers who neither have a **prepare_fb** nor **cleanup_fb** hook "
"set drm_gem_plane_helper_prepare_fb() is called automatically to implement "
"this. Other drivers which need additional plane processing can call "
"drm_gem_plane_helper_prepare_fb() from their **prepare_fb** hook."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1221
msgid ""
"The resources acquired in **prepare_fb** persist after the end of the atomic "
"commit. Resources that can be release at the commit's end should be acquired "
"in **begin_fb_access** and released in **end_fb_access**. For example, a GEM "
"buffer's pin operation belongs into **prepare_fb** to keep the buffer pinned "
"after the commit. But a vmap operation for shadow-plane helpers belongs into "
"**begin_fb_access**, so that atomic helpers remove the mapping at the end of "
"the commit."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1229
msgid ""
"The helpers will call **cleanup_fb** with matching arguments for every "
"successful call to this hook."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1232
msgid ""
"This callback is used by the atomic modeset helpers, but it is optional. See "
"**begin_fb_access** for preparing per-commit resources."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1237
msgid ""
"0 on success or one of the following negative error codes allowed by the :c:"
"type:`drm_mode_config_funcs.atomic_commit <drm_mode_config_funcs>` vfunc. "
"When using helpers this callback is the only one which can fail an atomic "
"commit, everything else must complete successfully."
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:129
#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1246
msgid "``cleanup_fb``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1247
msgid ""
"This hook is called to clean up any resources allocated for the given "
"framebuffer and plane configuration in **prepare_fb**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:139
#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1258
msgid "``begin_fb_access``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1259
msgid ""
"This hook prepares the plane for access during an atomic commit. In contrast "
"to **prepare_fb**, resources acquired in **begin_fb_access**, are released "
"at the end of the atomic commit in **end_fb_access**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1263
msgid ""
"For example, with shadow-plane helpers, the GEM buffer's vmap operation "
"belongs into **begin_fb_access**, so that the buffer's memory will be "
"unmapped at the end of the commit in **end_fb_access**. But a GEM buffer's "
"pin operation belongs into **prepare_fb** to keep the buffer pinned after "
"the commit."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1269
msgid ""
"The callback is used by the atomic modeset helpers, but it is optional. See "
"**end_fb_cleanup** for undoing the effects of **begin_fb_access** and "
"**prepare_fb** for acquiring resources until the next pageflip."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1273
msgid "Returns: 0 on success, or a negative errno code otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:149
#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1280
msgid "``end_fb_access``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1281
msgid ""
"This hook cleans up resources allocated by **begin_fb_access**. It it called "
"at the end of a commit for the new plane state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1289
msgid "Drivers should check plane specific constraints in this hook."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1291
msgid ""
"When using drm_atomic_helper_check_planes() plane's **atomic_check** hooks "
"are called before the ones for CRTCs, which allows drivers to request shared "
"resources that the CRTC controls here. For more complicated dependencies the "
"driver can call the provided check helpers multiple times until the computed "
"state has a final configuration and everything has been checked."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1310
msgid ""
"This function is called in the check phase of an atomic update. The driver "
"is not allowed to change anything outside of the :c:type:`drm_atomic_state` "
"update tracking structure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1326
msgid "``atomic_update``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1327
msgid ""
"Drivers should use this function to update the plane state.  This hook is "
"called in-between the :c:type:`drm_crtc_helper_funcs.atomic_begin "
"<drm_crtc_helper_funcs>` and drm_crtc_helper_funcs.atomic_flush callbacks."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1344
msgid ""
"Drivers should use this function to unconditionally enable a plane. This "
"hook is called in-between the :c:type:`drm_crtc_helper_funcs.atomic_begin "
"<drm_crtc_helper_funcs>` and drm_crtc_helper_funcs.atomic_flush callbacks. "
"It is called after **atomic_update**, which will be called for all enabled "
"planes. Drivers that use **atomic_enable** should set up a plane in "
"**atomic_update** and afterwards enable the plane in **atomic_enable**. If a "
"plane needs to be enabled before installing the scanout buffer, drivers can "
"still do so in **atomic_update**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1358
msgid ""
"This callback is used by the atomic modeset helpers, but it is optional. If "
"implemented, **atomic_enable** should be the inverse of **atomic_disable**. "
"Drivers that don't want to use either can still implement the complete plane "
"update in **atomic_update**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1369
msgid ""
"Drivers should use this function to unconditionally disable a plane. This "
"hook is called in-between the :c:type:`drm_crtc_helper_funcs.atomic_begin "
"<drm_crtc_helper_funcs>` and drm_crtc_helper_funcs.atomic_flush callbacks. "
"It is an alternative to **atomic_update**, which will be called for "
"disabling planes, too, if the **atomic_disable** hook isn't implemented."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1376
msgid ""
"This hook is also useful to disable planes in preparation of a modeset, by "
"calling drm_atomic_helper_disable_planes_on_crtc() from the :c:type:"
"`drm_crtc_helper_funcs.disable <drm_crtc_helper_funcs>` hook."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1385
msgid ""
"This callback is used by the atomic modeset helpers, but it is optional. "
"It's intended to reverse the effects of **atomic_enable**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1393
msgid "``atomic_async_check``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1394
msgid ""
"Drivers should set this function pointer to check if the plane's atomic "
"state can be updated in a async fashion. Here async means \"not vblank "
"synchronized\"."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1398
msgid ""
"This hook is called by drm_atomic_async_check() to establish if a given "
"update can be committed asynchronously, that is, if it can jump ahead of the "
"state currently queued for update."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1402
msgid ""
"This function is also used by drm_atomic_set_property() to determine if the "
"plane can be flipped in async. The flip flag is used to distinguish if the "
"function is used for just the plane state or for a flip."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1409
msgid ""
"Return 0 on success and any error returned indicates that the update can not "
"be applied in asynchronous manner."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1417
msgid "``atomic_async_update``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1418
msgid ""
"Drivers should set this function pointer to perform asynchronous updates of "
"planes, that is, jump ahead of the currently queued state and update the "
"plane. Here async means \"not vblank synchronized\"."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1423
msgid "This hook is called by drm_atomic_helper_async_commit()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1425
msgid ""
"An async update will happen on legacy cursor updates. An async update won't "
"happen if there is an outstanding commit modifying the same plane."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1429
msgid ""
"When doing async_update drivers shouldn't replace the :c:type:"
"`drm_plane_state` but update the current one with the new plane "
"configurations in the new plane_state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1433
msgid ""
"Drivers should also swap the framebuffers between current plane state (:c:"
"type:`drm_plane.state <drm_plane>`) and new_state. This is required since "
"cleanup for async commits is performed on the new state, rather than old "
"state like for traditional commits. Since we want to give up the reference "
"on the current (old) fb instead of our brand new one, swap them in the "
"driver during the async commit."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1442
msgid "It only works for single plane updates"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1443
msgid "Async Pageflips are not supported yet"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1444
msgid ""
"Some hw might still scan out the old buffer until the next vblank, however "
"we let go of the fb references as soon as we run this hook. For now drivers "
"must implement their own workers for deferring if needed, until a common "
"solution is created."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1454
msgid "``get_scanout_buffer``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1455
msgid ""
"Get the current scanout buffer, to display a message with drm_panic. The "
"driver should do the minimum changes to provide a buffer, that can be used "
"to display the panic screen. Currently only linear buffers are supported. "
"Non-linear buffer support is on the TODO list. The device :c:type:`dev."
"mode_config <dev>`.panic_lock is taken before calling this function, so you "
"can safely access the :c:type:`plane.state <plane>` It is called from a "
"panic callback, and must follow its restrictions. Please look the "
"documentation at drm_panic_trylock() for an in-depth discussions of what's "
"safe and what is not allowed. It's a best effort mode, so it's expected that "
"in some complex cases the panic screen won't be displayed. The returned :c:"
"type:`drm_scanout_buffer.map <drm_scanout_buffer>` must be valid if no error "
"code is returned."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1469
msgid "Return: ``0`` on success, negative errno on failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1477
msgid "``panic_flush``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1478
msgid ""
"It is used by drm_panic, and is called after the panic screen is drawn to "
"the scanout buffer. In this function, the driver can send additional "
"commands to the hardware, to make the scanout buffer visible. It is only "
"called if get_scanout_buffer() returned successfully, and the :c:type:`dev."
"mode_config <dev>`.panic_lock is held during the entire sequence. It is "
"called from a panic callback, and must follow its restrictions. Please look "
"the documentation at drm_panic_trylock() for an in-depth discussions of "
"what's safe and what is not allowed."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1197
msgid "These functions are used by the atomic helpers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1493
msgid "sets the helper vtable for a plane"
msgstr ""

#: ../../../gpu/drm-kms-helpers:131: drivers/gpu/drm/drm_fb_dma_helper.c:162
#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1499
#: ../../../gpu/drm-kms-helpers:461: drivers/gpu/drm/drm_plane_helper.c:149
#: drivers/gpu/drm/drm_plane_helper.c:251
#: drivers/gpu/drm/drm_plane_helper.c:276 ../../../gpu/drm-kms-helpers:68:
#: drivers/gpu/drm/drm_atomic_helper.c:3288
#: drivers/gpu/drm/drm_atomic_helper.c:3355 ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:242
#: drivers/gpu/drm/drm_atomic_state_helper.c:303
#: drivers/gpu/drm/drm_atomic_state_helper.c:325
#: drivers/gpu/drm/drm_atomic_state_helper.c:344
#: drivers/gpu/drm/drm_atomic_state_helper.c:367
#: drivers/gpu/drm/drm_atomic_state_helper.c:413
#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:125
#: drivers/gpu/drm/drm_gem_atomic_helper.c:212
#: drivers/gpu/drm/drm_gem_atomic_helper.c:240
#: drivers/gpu/drm/drm_gem_atomic_helper.c:289
#: drivers/gpu/drm/drm_gem_atomic_helper.c:309
#: drivers/gpu/drm/drm_gem_atomic_helper.c:325
#: drivers/gpu/drm/drm_gem_atomic_helper.c:350
#: drivers/gpu/drm/drm_gem_atomic_helper.c:377
msgid "``struct drm_plane *plane``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1494
msgid "DRM plane"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1496
msgid "``const struct drm_plane_helper_funcs *funcs``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1495
msgid "helper vtable to set for **plane**"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1504
msgid "global modeset helper operations"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1510
msgid "``atomic_commit_tail``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1511
msgid ""
"This hook is used by the default atomic_commit() hook implemented in "
"drm_atomic_helper_commit() together with the nonblocking commit helpers (see "
"drm_atomic_helper_setup_commit() for a starting point) to implement blocking "
"and nonblocking commits easily. It is not used by the atomic helpers"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1517
msgid ""
"This function is called when the new atomic state has already been swapped "
"into the various state pointers. The passed in state therefore contains "
"copies of the old/previous state. This hook should commit the new state into "
"hardware. Note that the helpers have already waited for preceding atomic "
"commits and fences, but drivers can add more waiting calls at the start of "
"their implementation, e.g. to wait for driver-internal request for implicit "
"syncing, before starting to commit the update to the hardware."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1526
msgid ""
"After the atomic update is committed to the hardware this hook needs to call "
"drm_atomic_helper_commit_hw_done(). Then wait for the update to be executed "
"by the hardware, for example using drm_atomic_helper_wait_for_vblanks() or "
"drm_atomic_helper_wait_for_flip_done(), and then clean up the old "
"framebuffers using drm_atomic_helper_cleanup_planes()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1533
msgid ""
"When disabling a CRTC this hook _must_ stall for the commit to complete. "
"Vblank waits don't work on disabled CRTC, hence the core can't take care of "
"this. And it also can't rely on the vblank event, since that can be "
"signalled already when the screen shows black, which can happen much earlier "
"than the last hardware access needed to shut off the display pipeline "
"completely."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1540
msgid ""
"This hook is optional, the default implementation is "
"drm_atomic_helper_commit_tail()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1547
msgid "``atomic_commit_setup``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1548
msgid ""
"This hook is used by the default atomic_commit() hook implemented in "
"drm_atomic_helper_commit() together with the nonblocking helpers (see "
"drm_atomic_helper_setup_commit()) to extend the DRM commit setup. It is not "
"used by the atomic helpers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1553
msgid ""
"This function is called at the end of drm_atomic_helper_setup_commit(), so "
"once the commit has been properly setup across the generic DRM object "
"states. It allows drivers to do some additional commit tracking that isn't "
"related to a CRTC, plane or connector, tracked in a :c:type:"
"`drm_private_obj` structure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1559
msgid ""
"Note that the documentation of :c:type:`drm_private_obj` has more details on "
"how one should implement this."
msgstr ""

#: ../../../gpu/drm-kms-helpers:42:
#: include/drm/drm_modeset_helper_vtables.h:1505
msgid "These helper functions are used by the atomic helpers."
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:48
msgid "Atomic Modeset Helper Functions Reference"
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:51 ../../../gpu/drm-kms-helpers.rst:149
#: ../../../gpu/drm-kms-helpers.rst:240 ../../../gpu/drm-kms-helpers.rst:297
msgid "Overview"
msgstr ""

#: ../../../gpu/drm-kms-helpers:53: drivers/gpu/drm/drm_atomic_helper.c:52
msgid ""
"This helper library provides implementations of check and commit functions "
"on top of the CRTC modeset helper callbacks and the plane helper callbacks. "
"It also provides convenience implementations for the atomic state handling "
"callbacks for drivers which don't need to subclass the drm core structures "
"to add their own additional internal state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:53: drivers/gpu/drm/drm_atomic_helper.c:58
msgid ""
"This library also provides default implementations for the check callback in "
"drm_atomic_helper_check() and for the commit callback with "
"drm_atomic_helper_commit(). But the individual stages and callbacks are "
"exposed to allow drivers to mix and match and e.g. use the plane helpers "
"only together with a driver private modeset implementation."
msgstr ""

#: ../../../gpu/drm-kms-helpers:53: drivers/gpu/drm/drm_atomic_helper.c:64
msgid ""
"This library also provides implementations for all the legacy driver "
"interfaces on top of the atomic interface. See "
"drm_atomic_helper_set_config(), drm_atomic_helper_disable_plane(), and the "
"various functions to implement set_property callbacks. New drivers must not "
"implement these functions themselves but must use the provided helpers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:53: drivers/gpu/drm/drm_atomic_helper.c:70
msgid ""
"The atomic helper uses the same function table structures as all other "
"modesetting helpers. See the documentation for :c:type:`struct "
"drm_crtc_helper_funcs <drm_crtc_helper_funcs>`, struct :c:type:"
"`drm_encoder_helper_funcs` and :c:type:`struct drm_connector_helper_funcs "
"<drm_connector_helper_funcs>`. It also shares the :c:type:`struct "
"drm_plane_helper_funcs <drm_plane_helper_funcs>` function table with the "
"plane helpers."
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:57
msgid "Implementing Asynchronous Atomic Commit"
msgstr ""

#: ../../../gpu/drm-kms-helpers:59: drivers/gpu/drm/drm_atomic_helper.c:2237
msgid ""
"Nonblocking atomic commits should use struct :c:type:`drm_crtc_commit` to "
"sequence different operations against each another. Locks, especially "
"struct :c:type:`drm_modeset_lock`, should not be held in worker threads or "
"any other asynchronous context used to commit the hardware state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:59: drivers/gpu/drm/drm_atomic_helper.c:2242
msgid ""
"drm_atomic_helper_commit() implements the recommended sequence for "
"nonblocking commits, using drm_atomic_helper_setup_commit() internally:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:59: drivers/gpu/drm/drm_atomic_helper.c:2245
msgid ""
"1. Run drm_atomic_helper_prepare_planes(). Since this can fail and we need "
"to propagate out of memory/VRAM errors to userspace, it must be called "
"synchronously."
msgstr ""

#: ../../../gpu/drm-kms-helpers:59: drivers/gpu/drm/drm_atomic_helper.c:2249
msgid ""
"2. Synchronize with any outstanding nonblocking commit worker threads which "
"might be affected by the new state update. This is handled by "
"drm_atomic_helper_setup_commit()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:59: drivers/gpu/drm/drm_atomic_helper.c:2253
msgid ""
"Asynchronous workers need to have sufficient parallelism to be able to run "
"different atomic commits on different CRTCs in parallel. The simplest way to "
"achieve this is by running them on the :c:type:`system_unbound_wq` work "
"queue. Note that drivers are not required to split up atomic commits and run "
"an individual commit in parallel - userspace is supposed to do that if it "
"cares. But it might be beneficial to do that for modesets, since those "
"necessarily must be done as one global operation, and enabling or disabling "
"a CRTC can take a long time. But even that is not required."
msgstr ""

#: ../../../gpu/drm-kms-helpers:59: drivers/gpu/drm/drm_atomic_helper.c:2262
msgid ""
"IMPORTANT: A :c:type:`drm_atomic_state` update for multiple CRTCs is "
"sequenced against all CRTCs therein. Therefore for atomic state updates "
"which only flip planes the driver must not get the struct :c:type:"
"`drm_crtc_state` of unrelated CRTCs in its atomic check code: This would "
"prevent committing of atomic updates to multiple CRTCs in parallel. In "
"general, adding additional state structures should be avoided as much as "
"possible, because this reduces parallelism in (nonblocking) commits, both "
"due to locking and due to commit sequencing requirements."
msgstr ""

#: ../../../gpu/drm-kms-helpers:59: drivers/gpu/drm/drm_atomic_helper.c:2271
msgid ""
"3. The software state is updated synchronously with "
"drm_atomic_helper_swap_state(). Doing this under the protection of all "
"modeset locks means concurrent callers never see inconsistent state. Note "
"that commit workers do not hold any locks; their access is only coordinated "
"through ordering. If workers would access state only through the pointers in "
"the free-standing state objects (currently not the case for any driver) then "
"even multiple pending commits could be in-flight at the same time."
msgstr ""

#: ../../../gpu/drm-kms-helpers:59: drivers/gpu/drm/drm_atomic_helper.c:2279
msgid ""
"4. Schedule a work item to do all subsequent steps, using the split-out "
"commit helpers: a) pre-plane commit b) plane commit c) post-plane commit and "
"then cleaning up the framebuffers after the old framebuffer is no longer "
"being displayed. The scheduled work should synchronize against other workers "
"using the :c:type:`drm_crtc_commit` infrastructure as needed. See "
"drm_atomic_helper_setup_commit() for more details."
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:63
msgid "Helper Functions Reference"
msgstr ""

#: ../../../gpu/drm-kms-helpers:65: include/drm/drm_atomic_helper.h:170
msgid "``drm_atomic_crtc_for_each_plane (plane, crtc)``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:65: include/drm/drm_atomic_helper.h:168
msgid "iterate over planes currently attached to CRTC"
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:234
#: ../../../gpu/drm-kms-helpers:65: include/drm/drm_atomic_helper.h:174
#: include/drm/drm_atomic_helper.h:188 include/drm/drm_atomic_helper.h:201
msgid "``plane``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:65: include/drm/drm_atomic_helper.h:169
#: include/drm/drm_atomic_helper.h:183 include/drm/drm_atomic_helper.h:196
msgid "the loop cursor"
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:233
#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:394
#: ../../../gpu/drm-kms-helpers:65: include/drm/drm_atomic_helper.h:171
msgid "``crtc``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:65: include/drm/drm_atomic_helper.h:170
msgid "the CRTC whose planes are iterated"
msgstr ""

#: ../../../gpu/drm-kms-helpers:65: include/drm/drm_atomic_helper.h:171
msgid ""
"This iterates over the current state, useful (for example) when applying "
"atomic state after it has been checked and swapped.  To iterate over the "
"planes which *will* be attached (more useful in code called from :c:type:"
"`drm_mode_config_funcs.atomic_check <drm_mode_config_funcs>`) see "
"drm_atomic_crtc_state_for_each_plane()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:65: include/drm/drm_atomic_helper.h:184
msgid "``drm_atomic_crtc_state_for_each_plane (plane, crtc_state)``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:65: include/drm/drm_atomic_helper.h:182
#: include/drm/drm_atomic_helper.h:195
msgid "iterate over attached planes in new state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:65: include/drm/drm_atomic_helper.h:185
#: include/drm/drm_atomic_helper.h:199
msgid "``crtc_state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:65: include/drm/drm_atomic_helper.h:184
#: include/drm/drm_atomic_helper.h:198
msgid "the incoming CRTC state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:65: include/drm/drm_atomic_helper.h:185
#: include/drm/drm_atomic_helper.h:199
msgid ""
"Similar to drm_crtc_for_each_plane(), but iterates the planes that will be "
"attached if the specified state is applied.  Useful during for example in "
"code called from :c:type:`drm_mode_config_funcs.atomic_check "
"<drm_mode_config_funcs>` operations, to validate the incoming state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:65: include/drm/drm_atomic_helper.h:197
msgid ""
"``drm_atomic_crtc_state_for_each_plane_state (plane, plane_state, "
"crtc_state)``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:65: include/drm/drm_atomic_helper.h:198
msgid "``plane_state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:65: include/drm/drm_atomic_helper.h:197
msgid "loop cursor for the plane's state, must be const"
msgstr ""

#: ../../../gpu/drm-kms-helpers:65: include/drm/drm_atomic_helper.h:204
msgid ""
"Compared to just drm_atomic_crtc_state_for_each_plane() this also fills in a "
"const plane_state. This is useful when a driver just wants to peek at other "
"active planes on this CRTC, but does not need to change it."
msgstr ""

#: ../../../gpu/drm-kms-helpers:65: include/drm/drm_atomic_helper.h:216
msgid "check whether a plane is being enabled"
msgstr ""

#: ../../../gpu/drm-kms-helpers:65: include/drm/drm_atomic_helper.h:222
#: include/drm/drm_atomic_helper.h:248
msgid "``struct drm_plane_state *old_plane_state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:65: include/drm/drm_atomic_helper.h:217
#: include/drm/drm_atomic_helper.h:243
msgid "old atomic plane state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:65: include/drm/drm_atomic_helper.h:219
#: include/drm/drm_atomic_helper.h:245
msgid "``struct drm_plane_state *new_plane_state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:65: include/drm/drm_atomic_helper.h:218
#: include/drm/drm_atomic_helper.h:244
msgid "new atomic plane state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:65: include/drm/drm_atomic_helper.h:219
msgid ""
"Checks the atomic state of a plane to determine whether it's being enabled "
"or not. This also WARNs if it detects an invalid state (both CRTC and FB "
"need to either both be NULL or both be non-NULL)."
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:280
#: ../../../gpu/drm-kms-helpers:104: drivers/gpu/drm/drm_simple_kms_helper.c:65
#: drivers/gpu/drm/drm_simple_kms_helper.c:383
#: drivers/gpu/drm/drm_simple_kms_helper.c:414
#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:262
#: drivers/gpu/drm/drm_fb_helper.c:469 drivers/gpu/drm/drm_fb_helper.c:502
#: drivers/gpu/drm/drm_fb_helper.c:1905 drivers/gpu/drm/drm_fb_helper.c:1940
#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:72
#: drivers/gpu/drm/drm_format_helper.c:128
#: drivers/gpu/drm/drm_format_helper.c:1188 ../../../gpu/drm-kms-helpers:131:
#: drivers/gpu/drm/drm_fb_dma_helper.c:160 ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:49
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:120
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:150
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:227
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:278
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:318
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:351
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:454
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:595
#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1292
#: include/drm/drm_bridge.h:1352 include/drm/drm_bridge.h:1368
#: include/drm/drm_bridge.h:1384 ../../../gpu/drm-kms-helpers:185:
#: drivers/gpu/drm/drm_bridge.c:217 drivers/gpu/drm/drm_bridge.c:328
#: drivers/gpu/drm/drm_bridge.c:404 drivers/gpu/drm/drm_bridge.c:603
#: drivers/gpu/drm/drm_bridge.c:1180 drivers/gpu/drm/drm_bridge.c:1236
#: drivers/gpu/drm/drm_bridge.c:1261 drivers/gpu/drm/drm_bridge.c:1283
#: drivers/gpu/drm/drm_bridge.c:1394 ../../../gpu/drm-kms-helpers:204:
#: drivers/gpu/drm/bridge/panel.c:469 ../../../gpu/drm-kms-helpers:215:
#: include/drm/drm_panel.h:300 ../../../gpu/drm-kms-helpers:218:
#: drivers/gpu/drm/drm_panel.c:286 drivers/gpu/drm/drm_panel.c:320
#: drivers/gpu/drm/drm_panel.c:409 drivers/gpu/drm/drm_panel.c:442
#: drivers/gpu/drm/drm_panel.c:523 drivers/gpu/drm/drm_panel.c:551
#: drivers/gpu/drm/drm_panel.c:591 drivers/gpu/drm/drm_panel.c:626
#: drivers/gpu/drm/drm_panel.c:661 ../../../gpu/drm-kms-helpers:221:
#: drivers/gpu/drm/drm_panel_orientation_quirks.c:553
#: ../../../gpu/drm-kms-helpers:224:
#: drivers/gpu/drm/drm_panel_backlight_quirks.c:66
#: ../../../gpu/drm-kms-helpers:248:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:828
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:991
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:1057
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:1093
#: ../../../gpu/drm-kms-helpers:254:
#: drivers/gpu/drm/display/drm_hdcp_helper.c:279
#: drivers/gpu/drm/display/drm_hdcp_helper.c:351
#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:284
#: include/drm/display/drm_dp_helper.h:299 ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:416
#: drivers/gpu/drm/display/drm_dp_helper.c:941
#: drivers/gpu/drm/display/drm_dp_helper.c:994
#: drivers/gpu/drm/display/drm_dp_helper.c:1011
#: drivers/gpu/drm/display/drm_dp_helper.c:1062
#: drivers/gpu/drm/display/drm_dp_helper.c:1080
#: drivers/gpu/drm/display/drm_dp_helper.c:1114
#: drivers/gpu/drm/display/drm_dp_helper.c:1227
#: drivers/gpu/drm/display/drm_dp_helper.c:1261
#: drivers/gpu/drm/display/drm_dp_helper.c:1304
#: drivers/gpu/drm/display/drm_dp_helper.c:1333
#: drivers/gpu/drm/display/drm_dp_helper.c:1398
#: drivers/gpu/drm/display/drm_dp_helper.c:1442
#: drivers/gpu/drm/display/drm_dp_helper.c:1498
#: drivers/gpu/drm/display/drm_dp_helper.c:1529
#: drivers/gpu/drm/display/drm_dp_helper.c:1559
#: drivers/gpu/drm/display/drm_dp_helper.c:1591
#: drivers/gpu/drm/display/drm_dp_helper.c:1827
#: drivers/gpu/drm/display/drm_dp_helper.c:1848
#: drivers/gpu/drm/display/drm_dp_helper.c:2435
#: drivers/gpu/drm/display/drm_dp_helper.c:2706
#: drivers/gpu/drm/display/drm_dp_helper.c:2764
#: drivers/gpu/drm/display/drm_dp_helper.c:2810
#: drivers/gpu/drm/display/drm_dp_helper.c:2911
#: drivers/gpu/drm/display/drm_dp_helper.c:2953
#: drivers/gpu/drm/display/drm_dp_helper.c:2975
#: drivers/gpu/drm/display/drm_dp_helper.c:3956
#: drivers/gpu/drm/display/drm_dp_helper.c:4043
#: drivers/gpu/drm/display/drm_dp_helper.c:4108
#: drivers/gpu/drm/display/drm_dp_helper.c:4297
#: drivers/gpu/drm/display/drm_dp_helper.c:4405
#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:59
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:123
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:201
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:273
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:318
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:357
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:410
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:442
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:491
#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:996
#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:2240
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3315
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3434
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3613
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3792
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4431
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4522
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4589
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4693
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4762
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5551
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5599
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5635
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5654
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5678
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:6075
#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1755
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1870
#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:217
#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:129
#: drivers/gpu/drm/drm_mipi_dbi.c:152 drivers/gpu/drm/drm_mipi_dbi.c:203
#: drivers/gpu/drm/drm_mipi_dbi.c:468 drivers/gpu/drm/drm_mipi_dbi.c:516
#: drivers/gpu/drm/drm_mipi_dbi.c:609 drivers/gpu/drm/drm_mipi_dbi.c:686
#: drivers/gpu/drm/drm_mipi_dbi.c:730 drivers/gpu/drm/drm_mipi_dbi.c:811
#: drivers/gpu/drm/drm_mipi_dbi.c:828 drivers/gpu/drm/drm_mipi_dbi.c:1264
#: drivers/gpu/drm/drm_mipi_dbi.c:1330 ../../../gpu/drm-kms-helpers:345:
#: include/drm/drm_mipi_dsi.h:233 ../../../gpu/drm-kms-helpers:348:
#: drivers/gpu/drm/drm_mipi_dsi.c:108 drivers/gpu/drm/drm_mipi_dsi.c:200
#: drivers/gpu/drm/drm_mipi_dsi.c:273 drivers/gpu/drm/drm_mipi_dsi.c:308
#: drivers/gpu/drm/drm_mipi_dsi.c:427 drivers/gpu/drm/drm_mipi_dsi.c:466
#: drivers/gpu/drm/drm_mipi_dsi.c:504 drivers/gpu/drm/drm_mipi_dsi.c:539
#: drivers/gpu/drm/drm_mipi_dsi.c:590 drivers/gpu/drm/drm_mipi_dsi.c:611
#: drivers/gpu/drm/drm_mipi_dsi.c:662 drivers/gpu/drm/drm_mipi_dsi.c:698
#: drivers/gpu/drm/drm_mipi_dsi.c:714 drivers/gpu/drm/drm_mipi_dsi.c:740
#: drivers/gpu/drm/drm_mipi_dsi.c:783 drivers/gpu/drm/drm_mipi_dsi.c:841
#: drivers/gpu/drm/drm_mipi_dsi.c:886 drivers/gpu/drm/drm_mipi_dsi.c:920
#: drivers/gpu/drm/drm_mipi_dsi.c:962 drivers/gpu/drm/drm_mipi_dsi.c:1019
#: drivers/gpu/drm/drm_mipi_dsi.c:1061 drivers/gpu/drm/drm_mipi_dsi.c:1084
#: drivers/gpu/drm/drm_mipi_dsi.c:1104 drivers/gpu/drm/drm_mipi_dsi.c:1125
#: drivers/gpu/drm/drm_mipi_dsi.c:1150 drivers/gpu/drm/drm_mipi_dsi.c:1175
#: drivers/gpu/drm/drm_mipi_dsi.c:1196 drivers/gpu/drm/drm_mipi_dsi.c:1217
#: drivers/gpu/drm/drm_mipi_dsi.c:1238 drivers/gpu/drm/drm_mipi_dsi.c:1262
#: drivers/gpu/drm/drm_mipi_dsi.c:1289 drivers/gpu/drm/drm_mipi_dsi.c:1314
#: drivers/gpu/drm/drm_mipi_dsi.c:1340 drivers/gpu/drm/drm_mipi_dsi.c:1364
#: drivers/gpu/drm/drm_mipi_dsi.c:1389 drivers/gpu/drm/drm_mipi_dsi.c:1413
#: drivers/gpu/drm/drm_mipi_dsi.c:1439 drivers/gpu/drm/drm_mipi_dsi.c:1462
#: drivers/gpu/drm/drm_mipi_dsi.c:1957 drivers/gpu/drm/drm_mipi_dsi.c:1980
#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:60
#: drivers/gpu/drm/display/drm_dsc_helper.c:1242
#: drivers/gpu/drm/display/drm_dsc_helper.c:1445
#: drivers/gpu/drm/display/drm_dsc_helper.c:1458
#: drivers/gpu/drm/display/drm_dsc_helper.c:1470
#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:554
#: drivers/gpu/drm/drm_probe_helper.c:1030
#: drivers/gpu/drm/drm_probe_helper.c:1077
#: drivers/gpu/drm/drm_probe_helper.c:1127
#: drivers/gpu/drm/drm_probe_helper.c:1153
#: drivers/gpu/drm/drm_probe_helper.c:1195
#: drivers/gpu/drm/drm_probe_helper.c:1230
#: drivers/gpu/drm/drm_probe_helper.c:1313 ../../../gpu/drm-kms-helpers:375:
#: include/drm/drm_edid.h:401 ../../../gpu/drm-kms-helpers:378:
#: drivers/gpu/drm/drm_edid.c:1779 drivers/gpu/drm/drm_edid.c:2036
#: drivers/gpu/drm/drm_edid.c:2063 drivers/gpu/drm/drm_edid.c:2304
#: drivers/gpu/drm/drm_edid.c:2476 drivers/gpu/drm/drm_edid.c:2523
#: drivers/gpu/drm/drm_edid.c:2550 drivers/gpu/drm/drm_edid.c:2580
#: drivers/gpu/drm/drm_edid.c:2598 drivers/gpu/drm/drm_edid.c:2638
#: drivers/gpu/drm/drm_edid.c:2679 drivers/gpu/drm/drm_edid.c:2712
#: drivers/gpu/drm/drm_edid.c:2789 drivers/gpu/drm/drm_edid.c:2843
#: drivers/gpu/drm/drm_edid.c:2876 drivers/gpu/drm/drm_edid.c:2905
#: drivers/gpu/drm/drm_edid.c:2930 drivers/gpu/drm/drm_edid.c:4359
#: drivers/gpu/drm/drm_edid.c:4634 drivers/gpu/drm/drm_edid.c:5544
#: drivers/gpu/drm/drm_edid.c:5789 drivers/gpu/drm/drm_edid.c:5834
#: drivers/gpu/drm/drm_edid.c:5851 drivers/gpu/drm/drm_edid.c:5917
#: drivers/gpu/drm/drm_edid.c:5979 drivers/gpu/drm/drm_edid.c:5997
#: drivers/gpu/drm/drm_edid.c:7076 drivers/gpu/drm/drm_edid.c:7099
#: drivers/gpu/drm/drm_edid.c:7131 drivers/gpu/drm/drm_edid.c:7154
#: drivers/gpu/drm/drm_edid.c:7184 drivers/gpu/drm/drm_edid.c:7289
#: drivers/gpu/drm/drm_edid.c:7452 ../../../gpu/drm-kms-helpers:384:
#: drivers/gpu/drm/drm_eld.c:19 drivers/gpu/drm/drm_eld.c:42
#: ../../../gpu/drm-kms-helpers:393: include/drm/display/drm_scdc_helper.h:47
#: include/drm/display/drm_scdc_helper.h:65 ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:66
#: drivers/gpu/drm/display/drm_scdc_helper.c:106
#: drivers/gpu/drm/display/drm_scdc_helper.c:150
#: drivers/gpu/drm/display/drm_scdc_helper.c:179
#: drivers/gpu/drm/display/drm_scdc_helper.c:238
#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:498
#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:57
#: include/drm/drm_rect.h:181 include/drm/drm_rect.h:193
#: include/drm/drm_rect.h:205 include/drm/drm_rect.h:218
#: include/drm/drm_rect.h:246 ../../../gpu/drm-kms-helpers:422:
#: drivers/gpu/drm/drm_rect.c:39 drivers/gpu/drm/drm_rect.c:86
#: drivers/gpu/drm/drm_rect.c:164 drivers/gpu/drm/drm_rect.c:199
#: ../../../gpu/drm-kms-helpers:443: drivers/gpu/drm/drm_modeset_helper.c:141
#: drivers/gpu/drm/drm_modeset_helper.c:191
#: drivers/gpu/drm/drm_modeset_helper.c:237 ../../../gpu/drm-kms-helpers:452:
#: drivers/gpu/drm/drm_of.c:379 drivers/gpu/drm/drm_of.c:429
#: drivers/gpu/drm/drm_of.c:463 drivers/gpu/drm/drm_of.c:504
#: drivers/gpu/drm/drm_of.c:536 ../../../gpu/drm-kms-helpers:461:
#: drivers/gpu/drm/drm_plane_helper.c:161
#: drivers/gpu/drm/drm_plane_helper.c:254 ../../../gpu/drm-kms-helpers:470:
#: drivers/gpu/drm/drm_crtc_helper.c:103 drivers/gpu/drm/drm_crtc_helper.c:144
#: drivers/gpu/drm/drm_crtc_helper.c:279 drivers/gpu/drm/drm_crtc_helper.c:445
#: drivers/gpu/drm/drm_crtc_helper.c:548 drivers/gpu/drm/drm_crtc_helper.c:905
#: drivers/gpu/drm/drm_crtc_helper.c:1041 ../../../gpu/drm-kms-helpers:485:
#: drivers/gpu/drm/drm_privacy_screen.c:109
#: drivers/gpu/drm/drm_privacy_screen.c:206
#: drivers/gpu/drm/drm_privacy_screen.c:278
#: drivers/gpu/drm/drm_privacy_screen.c:294
#: drivers/gpu/drm/drm_privacy_screen.c:386 ../../../gpu/drm-kms-helpers:65:
#: include/drm/drm_atomic_helper.h:223 include/drm/drm_atomic_helper.h:249
#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:641
#: drivers/gpu/drm/drm_atomic_helper.c:835
#: drivers/gpu/drm/drm_atomic_helper.c:886
#: drivers/gpu/drm/drm_atomic_helper.c:977
#: drivers/gpu/drm/drm_atomic_helper.c:1011
#: drivers/gpu/drm/drm_atomic_helper.c:1100
#: drivers/gpu/drm/drm_atomic_helper.c:2155
#: drivers/gpu/drm/drm_atomic_helper.c:2420
#: drivers/gpu/drm/drm_atomic_helper.c:2725
#: drivers/gpu/drm/drm_atomic_helper.c:3162
#: drivers/gpu/drm/drm_atomic_helper.c:3297
#: drivers/gpu/drm/drm_atomic_helper.c:3354
#: drivers/gpu/drm/drm_atomic_helper.c:3403
#: drivers/gpu/drm/drm_atomic_helper.c:3454
#: drivers/gpu/drm/drm_atomic_helper.c:3534
#: drivers/gpu/drm/drm_atomic_helper.c:3617
#: drivers/gpu/drm/drm_atomic_helper.c:3704
#: drivers/gpu/drm/drm_atomic_helper.c:3753
#: drivers/gpu/drm/drm_atomic_helper.c:3799
#: drivers/gpu/drm/drm_atomic_helper.c:3874
#: drivers/gpu/drm/drm_atomic_helper.c:3916
#: drivers/gpu/drm/drm_atomic_helper.c:3970 ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:582
#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:246
#: drivers/gpu/drm/drm_gem_atomic_helper.c:354
#: drivers/gpu/drm/drm_gem_atomic_helper.c:401
#: drivers/gpu/drm/drm_gem_atomic_helper.c:451
msgid "**Return**"
msgstr ""

#: ../../../gpu/drm-kms-helpers:65: include/drm/drm_atomic_helper.h:224
msgid "True if the plane is being enabled, false otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:65: include/drm/drm_atomic_helper.h:242
msgid "check whether a plane is being disabled"
msgstr ""

#: ../../../gpu/drm-kms-helpers:65: include/drm/drm_atomic_helper.h:245
msgid ""
"Checks the atomic state of a plane to determine whether it's being disabled "
"or not. This also WARNs if it detects an invalid state (both CRTC and FB "
"need to either both be NULL or both be non-NULL)."
msgstr ""

#: ../../../gpu/drm-kms-helpers:65: include/drm/drm_atomic_helper.h:250
msgid "True if the plane is being disabled, false otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:603
msgid "validate state object for modeset changes"
msgstr ""

#: ../../../gpu/drm-kms-helpers:104: drivers/gpu/drm/drm_simple_kms_helper.c:50
#: drivers/gpu/drm/drm_simple_kms_helper.c:401
#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:413
#: drivers/gpu/drm/drm_fb_helper.c:465 drivers/gpu/drm/drm_fb_helper.c:1984
#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:138
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:221
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:266
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:305
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:586
#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1591
#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5698
#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:293
#: drivers/gpu/drm/drm_probe_helper.c:325
#: drivers/gpu/drm/drm_probe_helper.c:720
#: drivers/gpu/drm/drm_probe_helper.c:880
#: drivers/gpu/drm/drm_probe_helper.c:911
#: drivers/gpu/drm/drm_probe_helper.c:939
#: drivers/gpu/drm/drm_probe_helper.c:959
#: drivers/gpu/drm/drm_probe_helper.c:1061 ../../../gpu/drm-kms-helpers:378:
#: drivers/gpu/drm/drm_edid.c:4635 ../../../gpu/drm-kms-helpers:443:
#: drivers/gpu/drm/drm_modeset_helper.c:48
#: drivers/gpu/drm/drm_modeset_helper.c:80
#: drivers/gpu/drm/drm_modeset_helper.c:125
#: drivers/gpu/drm/drm_modeset_helper.c:186
#: drivers/gpu/drm/drm_modeset_helper.c:233 ../../../gpu/drm-kms-helpers:452:
#: drivers/gpu/drm/drm_of.c:31 drivers/gpu/drm/drm_of.c:56
#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:219
#: drivers/gpu/drm/drm_crtc_helper.c:963 drivers/gpu/drm/drm_crtc_helper.c:1038
#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:609
#: drivers/gpu/drm/drm_atomic_helper.c:1006
#: drivers/gpu/drm/drm_atomic_helper.c:1076
#: drivers/gpu/drm/drm_atomic_helper.c:1352
#: drivers/gpu/drm/drm_atomic_helper.c:1514
#: drivers/gpu/drm/drm_atomic_helper.c:1668
#: drivers/gpu/drm/drm_atomic_helper.c:1736
#: drivers/gpu/drm/drm_atomic_helper.c:1790
#: drivers/gpu/drm/drm_atomic_helper.c:1850
#: drivers/gpu/drm/drm_atomic_helper.c:2016
#: drivers/gpu/drm/drm_atomic_helper.c:2100
#: drivers/gpu/drm/drm_atomic_helper.c:2148
#: drivers/gpu/drm/drm_atomic_helper.c:2723
#: drivers/gpu/drm/drm_atomic_helper.c:2815
#: drivers/gpu/drm/drm_atomic_helper.c:2853
#: drivers/gpu/drm/drm_atomic_helper.c:3111
#: drivers/gpu/drm/drm_atomic_helper.c:3441
#: drivers/gpu/drm/drm_atomic_helper.c:3573
#: drivers/gpu/drm/drm_atomic_helper.c:3604
#: drivers/gpu/drm/drm_atomic_helper.c:3692
#: drivers/gpu/drm/drm_atomic_helper.c:3793
msgid "``struct drm_device *dev``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:104:
#: drivers/gpu/drm/drm_simple_kms_helper.c:396
#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:118
#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:408
#: drivers/gpu/drm/drm_fb_helper.c:1979 ../../../gpu/drm-kms-helpers:131:
#: drivers/gpu/drm/drm_fb_dma_helper.c:114 ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:137
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:218
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:262
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:301
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:584
#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1586
#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:86
#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:4630
#: ../../../gpu/drm-kms-helpers:443: drivers/gpu/drm/drm_modeset_helper.c:75
#: drivers/gpu/drm/drm_modeset_helper.c:120
#: drivers/gpu/drm/drm_modeset_helper.c:181
#: drivers/gpu/drm/drm_modeset_helper.c:228 ../../../gpu/drm-kms-helpers:452:
#: drivers/gpu/drm/drm_of.c:26 drivers/gpu/drm/drm_of.c:51
#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:214
#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:604
#: drivers/gpu/drm/drm_atomic_helper.c:1001
#: drivers/gpu/drm/drm_atomic_helper.c:1071
#: drivers/gpu/drm/drm_atomic_helper.c:1347
#: drivers/gpu/drm/drm_atomic_helper.c:1509
#: drivers/gpu/drm/drm_atomic_helper.c:1663
#: drivers/gpu/drm/drm_atomic_helper.c:1731
#: drivers/gpu/drm/drm_atomic_helper.c:1785
#: drivers/gpu/drm/drm_atomic_helper.c:1845
#: drivers/gpu/drm/drm_atomic_helper.c:2011
#: drivers/gpu/drm/drm_atomic_helper.c:2095
#: drivers/gpu/drm/drm_atomic_helper.c:2143
#: drivers/gpu/drm/drm_atomic_helper.c:2718
#: drivers/gpu/drm/drm_atomic_helper.c:2810
#: drivers/gpu/drm/drm_atomic_helper.c:2848
#: drivers/gpu/drm/drm_atomic_helper.c:3106
#: drivers/gpu/drm/drm_atomic_helper.c:3436
#: drivers/gpu/drm/drm_atomic_helper.c:3568
#: drivers/gpu/drm/drm_atomic_helper.c:3599
#: drivers/gpu/drm/drm_atomic_helper.c:3687
#: drivers/gpu/drm/drm_atomic_helper.c:3788
msgid "DRM device"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:665
#: drivers/gpu/drm/drm_bridge.c:710 drivers/gpu/drm/drm_bridge.c:805
#: drivers/gpu/drm/drm_bridge.c:883 ../../../gpu/drm-kms-helpers:233:
#: drivers/gpu/drm/drm_self_refresh_helper.c:140
#: drivers/gpu/drm/drm_self_refresh_helper.c:182
#: ../../../gpu/drm-kms-helpers:248:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:824
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:987
#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:989
#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4415
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4506
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4589
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4632
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5410
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5471
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5526
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5588
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5634
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5653
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5677
#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:441
#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:606
#: drivers/gpu/drm/drm_atomic_helper.c:832
#: drivers/gpu/drm/drm_atomic_helper.c:1003
#: drivers/gpu/drm/drm_atomic_helper.c:1073
#: drivers/gpu/drm/drm_atomic_helper.c:1349
#: drivers/gpu/drm/drm_atomic_helper.c:1431
#: drivers/gpu/drm/drm_atomic_helper.c:1511
#: drivers/gpu/drm/drm_atomic_helper.c:1665
#: drivers/gpu/drm/drm_atomic_helper.c:1733
#: drivers/gpu/drm/drm_atomic_helper.c:1787
#: drivers/gpu/drm/drm_atomic_helper.c:1847
#: drivers/gpu/drm/drm_atomic_helper.c:1891
#: drivers/gpu/drm/drm_atomic_helper.c:1924
#: drivers/gpu/drm/drm_atomic_helper.c:2013
#: drivers/gpu/drm/drm_atomic_helper.c:2097
#: drivers/gpu/drm/drm_atomic_helper.c:2145
#: drivers/gpu/drm/drm_atomic_helper.c:2387
#: drivers/gpu/drm/drm_atomic_helper.c:2546
#: drivers/gpu/drm/drm_atomic_helper.c:2595
#: drivers/gpu/drm/drm_atomic_helper.c:2636
#: drivers/gpu/drm/drm_atomic_helper.c:2685
#: drivers/gpu/drm/drm_atomic_helper.c:2720
#: drivers/gpu/drm/drm_atomic_helper.c:2812
#: drivers/gpu/drm/drm_atomic_helper.c:2850
#: drivers/gpu/drm/drm_atomic_helper.c:3108
#: drivers/gpu/drm/drm_atomic_helper.c:3140
#: drivers/gpu/drm/drm_atomic_helper.c:3748
#: drivers/gpu/drm/drm_atomic_helper.c:3790 ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:579
msgid "``struct drm_atomic_state *state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:605
#: drivers/gpu/drm/drm_atomic_helper.c:831
#: drivers/gpu/drm/drm_atomic_helper.c:1002
#: drivers/gpu/drm/drm_atomic_helper.c:1072
#: drivers/gpu/drm/drm_atomic_helper.c:2012
#: drivers/gpu/drm/drm_atomic_helper.c:2096
#: drivers/gpu/drm/drm_atomic_helper.c:2144
msgid "the driver state object"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:606
msgid ""
"Check the state object to see if the requested state is physically possible. "
"This does all the CRTC and connector related computations for an atomic "
"update and adds any additional connectors needed for full modesets. It calls "
"the various per-object callbacks in the follow order:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:611
msgid ""
":c:type:`drm_connector_helper_funcs.atomic_best_encoder "
"<drm_connector_helper_funcs>` for determining the new encoder."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:612
msgid ""
":c:type:`drm_connector_helper_funcs.atomic_check "
"<drm_connector_helper_funcs>` to validate the connector state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:613
msgid ""
"If it's determined a modeset is needed then all connectors on the affected "
"CRTC are added and :c:type:`drm_connector_helper_funcs.atomic_check "
"<drm_connector_helper_funcs>` is run on them."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:615
msgid ""
":c:type:`drm_encoder_helper_funcs.mode_valid <drm_encoder_helper_funcs>`, :c:"
"type:`drm_bridge_funcs.mode_valid <drm_bridge_funcs>` and :c:type:"
"`drm_crtc_helper_funcs.mode_valid <drm_crtc_helper_funcs>` are called on the "
"affected components."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:617
msgid ""
":c:type:`drm_bridge_funcs.mode_fixup <drm_bridge_funcs>` is called on all "
"encoder bridges."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:618
msgid ""
":c:type:`drm_encoder_helper_funcs.atomic_check <drm_encoder_helper_funcs>` "
"is called to validate any encoder state. This function is only called when "
"the encoder will be part of a configured CRTC, it must not be used for "
"implementing connector property validation. If this function is NULL, :c:"
"type:`drm_atomic_encoder_helper_funcs.mode_fixup "
"<drm_atomic_encoder_helper_funcs>` is called instead."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:623
msgid ""
":c:type:`drm_crtc_helper_funcs.mode_fixup <drm_crtc_helper_funcs>` is called "
"last, to fix up the mode with CRTC constraints."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:625
msgid ""
":c:type:`drm_crtc_state.mode_changed <drm_crtc_state>` is set when the input "
"mode is changed. :c:type:`drm_crtc_state.connectors_changed "
"<drm_crtc_state>` is set when a connector is added or removed from the "
"CRTC.  :c:type:`drm_crtc_state.active_changed <drm_crtc_state>` is set when :"
"c:type:`drm_crtc_state.active <drm_crtc_state>` changes, which is used for "
"DPMS. :c:type:`drm_crtc_state.no_vblank <drm_crtc_state>` is set from the "
"result of drm_dev_has_vblank(). See also: drm_atomic_crtc_needs_modeset()"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:632
#: drivers/gpu/drm/drm_atomic_helper.c:1091
msgid "IMPORTANT:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:634
msgid ""
"Drivers which set :c:type:`drm_crtc_state.mode_changed <drm_crtc_state>` (e."
"g. in their :c:type:`drm_plane_helper_funcs.atomic_check "
"<drm_plane_helper_funcs>` hooks if a plane update can't be done without a "
"full modeset) _must_ call this function after that change. It is permitted "
"to call this function multiple times for the same update, e.g. when the :c:"
"type:`drm_crtc_helper_funcs.atomic_check <drm_crtc_helper_funcs>` functions "
"depend upon the adjusted dotclock for fifo space allocation and watermark "
"computation."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:642
#: drivers/gpu/drm/drm_atomic_helper.c:836
#: drivers/gpu/drm/drm_atomic_helper.c:1012
#: drivers/gpu/drm/drm_atomic_helper.c:1101
msgid "Zero for success or -errno"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:829
msgid "Check writeback connector state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:830
msgid "corresponding connector"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:832
msgid ""
"Checks if the writeback connector state is valid, and returns an error if it "
"isn't."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:870
msgid "Check plane state for validity"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:375
#: drivers/gpu/drm/drm_mipi_dbi.c:463 drivers/gpu/drm/drm_mipi_dbi.c:483
#: drivers/gpu/drm/drm_mipi_dbi.c:530 ../../../gpu/drm-kms-helpers:68:
#: drivers/gpu/drm/drm_atomic_helper.c:876 ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:245
#: drivers/gpu/drm/drm_atomic_state_helper.c:300
#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:286
#: drivers/gpu/drm/drm_gem_atomic_helper.c:347
#: drivers/gpu/drm/drm_gem_atomic_helper.c:374
#: drivers/gpu/drm/drm_gem_atomic_helper.c:396
#: drivers/gpu/drm/drm_gem_atomic_helper.c:416
#: drivers/gpu/drm/drm_gem_atomic_helper.c:466
msgid "``struct drm_plane_state *plane_state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:871
msgid "plane state to check"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:873
msgid "``const struct drm_crtc_state *crtc_state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:872
#: drivers/gpu/drm/drm_atomic_helper.c:970
msgid "CRTC state to check"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:874
msgid "``int min_scale``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:873
msgid "minimum **src**:**dest** scaling factor in 16.16 fixed point"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:875
msgid "``int max_scale``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:874
msgid "maximum **src**:**dest** scaling factor in 16.16 fixed point"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:876
msgid "``bool can_position``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:875
msgid ""
"is it legal to position the plane such that it doesn't cover the entire "
"CRTC?  This will generally only be false for primary planes."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:879
msgid "``bool can_update_disabled``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:878
msgid "can the plane be updated while the CRTC is disabled?"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:880
msgid ""
"Checks that a desired plane update is valid, and updates various bits of "
"derived state (clipped coordinates etc.). Drivers that provide their own "
"plane handling rather than helper-provided implementations may still wish to "
"call this function to avoid duplication of error checking code."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:887
msgid "Zero if update appears valid, error code on failure"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:969
msgid "Check CRTC state for primary plane"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1173
#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:374
#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:975
#: drivers/gpu/drm/drm_atomic_helper.c:3962 ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:72
#: drivers/gpu/drm/drm_atomic_state_helper.c:85
msgid "``struct drm_crtc_state *crtc_state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:971
msgid ""
"Checks that a CRTC has at least one primary plane attached to it, which is a "
"requirement on some hardware. Note that this only involves the CRTC side of "
"the test. To test if the primary plane is visible or if it can be updated "
"without the CRTC being enabled, use drm_atomic_helper_check_plane_state() in "
"the plane's atomic check."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:978
msgid ""
"0 if a primary plane is attached to the CRTC, or an error code otherwise"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1000
msgid "validate state object for planes changes"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1003
msgid ""
"Check the state object to see if the requested state is physically possible. "
"This does all the plane update related checks using by calling into the :c:"
"type:`drm_crtc_helper_funcs.atomic_check <drm_crtc_helper_funcs>` and :c:"
"type:`drm_plane_helper_funcs.atomic_check <drm_plane_helper_funcs>` hooks "
"provided by the driver."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1008
msgid ""
"It also sets :c:type:`drm_crtc_state.planes_changed <drm_crtc_state>` to "
"indicate that a CRTC has updated planes."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1070
msgid "validate state object"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1073
msgid ""
"Check the state object to see if the requested state is physically possible. "
"Only CRTCs and planes have check callbacks, so for any additional (global) "
"checking that a driver needs it can simply wrap that around this function. "
"Drivers without such needs can directly use this as their :c:type:"
"`drm_mode_config_funcs.atomic_check <drm_mode_config_funcs>` callback."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1079
msgid ""
"This just wraps the two parts of the state checking for planes and modeset "
"state in the default order: First it calls drm_atomic_helper_check_modeset() "
"and then drm_atomic_helper_check_planes(). The assumption is that the "
"**drm_plane_helper_funcs.atomic_check** and **drm_crtc_helper_funcs."
"atomic_check** functions depend upon an updated adjusted_mode.clock to e.g. "
"properly compute watermarks."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1086
msgid ""
"Note that zpos normalization will add all enable planes to the state which "
"might not desired for some drivers. For example enable/disable of a cursor "
"plane which have fixed zpos value would trigger all other enabled planes to "
"be forced to the state change."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1093
msgid ""
"As this function calls drm_atomic_helper_check_modeset() internally, its "
"restrictions also apply: Drivers which set :c:type:`drm_crtc_state."
"mode_changed <drm_crtc_state>` (e.g. in their :c:type:"
"`drm_plane_helper_funcs.atomic_check <drm_plane_helper_funcs>` hooks if a "
"plane update can't be done without a full modeset) _must_ call "
"drm_atomic_helper_check_modeset() function again after that change."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1346
msgid "update legacy modeset state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1348
#: drivers/gpu/drm/drm_atomic_helper.c:1510
#: drivers/gpu/drm/drm_atomic_helper.c:1664
#: drivers/gpu/drm/drm_atomic_helper.c:1786
#: drivers/gpu/drm/drm_atomic_helper.c:1846
#: drivers/gpu/drm/drm_atomic_helper.c:1886
#: drivers/gpu/drm/drm_atomic_helper.c:2541
#: drivers/gpu/drm/drm_atomic_helper.c:2590
#: drivers/gpu/drm/drm_atomic_helper.c:2631
#: drivers/gpu/drm/drm_atomic_helper.c:2680
#: drivers/gpu/drm/drm_atomic_helper.c:2849
#: drivers/gpu/drm/drm_atomic_helper.c:3107
msgid "atomic state object being committed"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1349
msgid ""
"This function updates all the various legacy modeset state pointers in "
"connectors, encoders and CRTCs."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1352
msgid ""
"Drivers can use this for building their own atomic commit if they don't have "
"a pure helper-based modeset implementation."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1355
msgid ""
"Since these updates are not synchronized with lockings, only code paths "
"called from :c:type:`drm_mode_config_helper_funcs.atomic_commit_tail "
"<drm_mode_config_helper_funcs>` can look at the legacy state filled out by "
"this helper. Defacto this means this helper and the legacy state pointers "
"are only really useful for transitioning an existing driver to the atomic "
"world."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1425
msgid "update vblank timestamping constants"
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:440
#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1426
msgid "atomic state object"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1427
msgid ""
"Updates the timestamping constants used for precise vblank timestamps by "
"calling drm_calc_timestamping_constants() for all enabled crtcs in **state**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1508
msgid "modeset commit to disable outputs"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1511
msgid ""
"This function shuts down all the outputs that need to be shut down and "
"prepares them (if required) with the new mode."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1514
msgid ""
"For compatibility with legacy CRTC helpers this should be called before "
"drm_atomic_helper_commit_planes(), which is what the default commit function "
"does. But drivers with different needs can group the modeset commits "
"together and do the plane commits at the end. This is useful for drivers "
"doing runtime PM since planes updates then only happen when the CRTC is "
"actually enabled."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1662
msgid "modeset commit to enable outputs"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1665
msgid ""
"This function enables all the outputs with the new configuration which had "
"to be turned off for the update."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1668
msgid ""
"For compatibility with legacy CRTC helpers this should be called after "
"drm_atomic_helper_commit_planes(), which is what the default commit function "
"does. But drivers with different needs can group the modeset commits "
"together and do the plane commits at the end. This is useful for drivers "
"doing runtime PM since planes updates then only happen when the CRTC is "
"actually enabled."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1730
msgid "wait for fences stashed in plane state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1732
#: drivers/gpu/drm/drm_atomic_helper.c:2811
msgid "atomic state object with old state structures"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1734
msgid "``bool pre_swap``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1733
msgid ""
"If true, do an interruptible wait, and **state** is the new state. Otherwise "
"**state** is the old state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1735
msgid ""
"For implicit sync, driver should fish the exclusive fence out from the "
"incoming fb's and stash it in the drm_plane_state.  This is called after "
"drm_atomic_helper_swap_state() so it uses the current plane state (and just "
"uses the atomic state to find the changed planes)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1740
msgid ""
"Note that **pre_swap** is needed since the point where we block for fences "
"moves around depending upon whether an atomic commit is blocking or non-"
"blocking. For non-blocking commit all waiting needs to happen after "
"drm_atomic_helper_swap_state() is called, but for blocking commits we want "
"to wait **before** we do anything that can't be easily rolled back. That is "
"before we call drm_atomic_helper_swap_state()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1747
msgid "Returns zero if success or < 0 if dma_fence_wait() fails."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1784
msgid "wait for vblank on CRTCs"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1787
msgid ""
"Helper to, after atomic commit, wait for vblanks on all affected CRTCs (ie. "
"before cleaning up old framebuffers using "
"drm_atomic_helper_cleanup_planes()). It will only wait on CRTCs where the "
"framebuffers have actually changed to optimize for the legacy cursor and "
"plane update use-case."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1793
msgid ""
"Drivers using the nonblocking commit tracking support initialized by calling "
"drm_atomic_helper_setup_commit() should look at "
"drm_atomic_helper_wait_for_flip_done() as an alternative."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1844
msgid "wait for all page flips to be done"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1847
msgid ""
"Helper to, after atomic commit, wait for page flips on all affected crtcs "
"(ie. before cleaning up old framebuffers using "
"drm_atomic_helper_cleanup_planes()). Compared to "
"drm_atomic_helper_wait_for_vblanks() this waits for the completion on all "
"CRTCs, assuming that cursors-only updates are signalling their completion "
"immediately (or using a different path)."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1854
msgid ""
"This requires that drivers use the nonblocking commit tracking support "
"initialized using drm_atomic_helper_setup_commit()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1885
#: drivers/gpu/drm/drm_atomic_helper.c:1918
msgid "commit atomic update to hardware"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1887
msgid ""
"This is the default implementation for the :c:type:"
"`drm_mode_config_helper_funcs.atomic_commit_tail "
"<drm_mode_config_helper_funcs>` hook, for drivers that do not support "
"runtime_pm or do not need the CRTC to be enabled to perform a commit. "
"Otherwise, see drm_atomic_helper_commit_tail_rpm()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1893
msgid ""
"Note that the default ordering of how the various stages are called is to "
"match the legacy modeset helper library closest."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1919
#: drivers/gpu/drm/drm_atomic_helper.c:2382
msgid "new modeset state to be committed"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:1920
msgid ""
"This is an alternative implementation for the :c:type:"
"`drm_mode_config_helper_funcs.atomic_commit_tail "
"<drm_mode_config_helper_funcs>` hook, for drivers that support runtime_pm or "
"need the CRTC to be enabled to perform a commit. Otherwise, one should use "
"the default implementation drm_atomic_helper_commit_tail()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2010
msgid "check if state can be committed asynchronously"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2013
msgid ""
"This helper will check if it is possible to commit the state asynchronously. "
"Async commits are not supposed to swap the states like normal sync commits "
"but just do in-place changes on the current state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2017
msgid ""
"It will return 0 if the commit can happen in an asynchronous fashion or "
"error if not. Note that error just mean it can't be committed "
"asynchronously, if it fails the commit should be treated like a normal "
"synchronous commit."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2094
msgid "commit state asynchronously"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2097
msgid ""
"This function commits a state asynchronously, i.e., not vblank synchronized. "
"It should be used on a state only when drm_atomic_async_check() succeeds. "
"Async commits are not supposed to swap the states like normal sync commits, "
"but just do in-place changes on the current state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2103
msgid "TODO: Implement full swap instead of doing in-place changes."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2142
msgid "commit validated state object"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2146
#: drivers/gpu/drm/drm_atomic_helper.c:2384
msgid "``bool nonblock``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2145
#: drivers/gpu/drm/drm_atomic_helper.c:2383
msgid "whether nonblocking behavior is requested."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2146
msgid ""
"This function commits a with drm_atomic_helper_check() pre-validated state "
"object. This can still fail when e.g. the framebuffer reservation fails. "
"This function implements nonblocking commits, using "
"drm_atomic_helper_setup_commit() and related functions."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2151
msgid ""
"Committing the actual hardware state is done through the :c:type:"
"`drm_mode_config_helper_funcs.atomic_commit_tail "
"<drm_mode_config_helper_funcs>` callback, or its default implementation "
"drm_atomic_helper_commit_tail()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2156
msgid "Zero for success or -errno."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2381
msgid "setup possibly nonblocking commit"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2384
msgid ""
"This function prepares **state** to be used by the atomic helper's support "
"for nonblocking commits. Drivers using the nonblocking commit infrastructure "
"should always call this function from their :c:type:`drm_mode_config_funcs."
"atomic_commit <drm_mode_config_funcs>` hook."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2389
msgid ""
"Drivers that need to extend the commit setup to private objects can use the :"
"c:type:`drm_mode_config_helper_funcs.atomic_commit_setup "
"<drm_mode_config_helper_funcs>` hook."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2392
msgid ""
"To be able to use this support drivers need to use a few more helper "
"functions. drm_atomic_helper_wait_for_dependencies() must be called before "
"actually committing the hardware state, and for nonblocking commits this "
"call must be placed in the async worker. See also "
"drm_atomic_helper_swap_state() and its stall parameter, for when a driver's "
"commit hooks look at the :c:type:`drm_crtc.state <drm_crtc>`, :c:type:"
"`drm_plane.state <drm_plane>` or :c:type:`drm_connector.state "
"<drm_connector>` pointer directly."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2399
msgid ""
"Completion of the hardware commit step must be signalled using "
"drm_atomic_helper_commit_hw_done(). After this step the driver is not "
"allowed to read or change any permanent software or hardware modeset state. "
"The only exception is state protected by other means than :c:type:"
"`drm_modeset_lock` locks. Only the free standing **state** with pointers to "
"the old state structures can be inspected, e.g. to clean up old buffers "
"using drm_atomic_helper_cleanup_planes()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2407
msgid ""
"At the very end, before cleaning up **state** drivers must call "
"drm_atomic_helper_commit_cleanup_done()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2410
msgid ""
"This is all implemented by in drm_atomic_helper_commit(), giving drivers a "
"complete and easy-to-use default implementation of the atomic_commit() hook."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2413
msgid ""
"The tracking of asynchronously executed and still pending commits is done "
"using the core structure :c:type:`drm_crtc_commit`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2416
msgid ""
"By default there's no need to clean up resources allocated by this function "
"explicitly: drm_atomic_state_default_clear() will take care of that "
"automatically."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2421
msgid ""
"0 on success. -EBUSY when userspace schedules nonblocking commits too fast, -"
"ENOMEM on allocation failures and -EINTR when a signal is pending."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2540
msgid "wait for required preceding commits"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2542
msgid ""
"This function waits for all preceding commits that touch the same CRTC as "
"**state** to both be committed to the hardware (as signalled by "
"drm_atomic_helper_commit_hw_done()) and executed by the hardware (as "
"signalled by calling drm_crtc_send_vblank_event() on the :c:type:"
"`drm_crtc_state.event <drm_crtc_state>`)."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2547
#: drivers/gpu/drm/drm_atomic_helper.c:2602
#: drivers/gpu/drm/drm_atomic_helper.c:2640
#: drivers/gpu/drm/drm_atomic_helper.c:2685
msgid ""
"This is part of the atomic helper support for nonblocking commits, see "
"drm_atomic_helper_setup_commit() for an overview."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2589
msgid "fake VBLANK events if needed"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2591
msgid ""
"This function walks all CRTCs and fakes VBLANK events on those with :c:type:"
"`drm_crtc_state.no_vblank <drm_crtc_state>` set to true and :c:type:"
"`drm_crtc_state.event <drm_crtc_state>` != NULL. The primary use of this "
"function is writeback connectors working in oneshot mode and faking VBLANK "
"events. In this case they only fake the VBLANK event when a job is queued, "
"and any change to the pipeline that does not touch the connector is leading "
"to timeouts when calling drm_atomic_helper_wait_for_vblanks() or "
"drm_atomic_helper_wait_for_flip_done(). In addition to writeback connectors, "
"this function can also fake VBLANK events for CRTCs without VBLANK interrupt."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2630
msgid "setup possible nonblocking commit"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2632
msgid ""
"This function is used to signal completion of the hardware commit step. "
"After this step the driver is not allowed to read or change any permanent "
"software or hardware modeset state. The only exception is state protected by "
"other means than :c:type:`drm_modeset_lock` locks."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2637
msgid ""
"Drivers should try to postpone any expensive or delayed cleanup work after "
"this function is called."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2679
msgid "signal completion of commit"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2681
msgid ""
"This signals completion of the atomic update **state**, including any "
"cleanup work. If used, it must be called right before calling "
"drm_atomic_state_put()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2717
msgid "prepare plane resources before commit"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2719
msgid "atomic state object with new state structures"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2720
msgid ""
"This function prepares plane state, specifically framebuffers, for the new "
"configuration, by calling :c:type:`drm_plane_helper_funcs.prepare_fb "
"<drm_plane_helper_funcs>`. If any failure is encountered this function will "
"call :c:type:`drm_plane_helper_funcs.cleanup_fb <drm_plane_helper_funcs>` on "
"any already successfully prepared framebuffer."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:2241
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3435
#: ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:67
#: drivers/gpu/drm/display/drm_scdc_helper.c:107
#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:207
#: drivers/gpu/drm/drm_privacy_screen.c:279
#: drivers/gpu/drm/drm_privacy_screen.c:295 ../../../gpu/drm-kms-helpers:68:
#: drivers/gpu/drm/drm_atomic_helper.c:2726
msgid "0 on success, negative error code on failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2809
msgid "release plane resources on aborts"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2812
msgid ""
"This function cleans up plane state, specifically framebuffers, from the "
"atomic state. It undoes the effects of drm_atomic_helper_prepare_planes() "
"when aborting an atomic commit. For cleaning up after a successful commit "
"use drm_atomic_helper_cleanup_planes()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2847
msgid "commit plane state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2851
#: drivers/gpu/drm/drm_atomic_helper.c:3866
#: drivers/gpu/drm/drm_atomic_helper.c:3910
msgid "``uint32_t flags``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2850
msgid "flags for committing plane state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2851
msgid ""
"This function commits the new plane state using the plane and atomic helper "
"functions for planes and CRTCs. It assumes that the atomic state has already "
"been pushed into the relevant object state pointers, since this step can no "
"longer fail."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2856
msgid ""
"It still requires the global state object **state** to know which planes and "
"crtcs need to be updated though."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2859
msgid ""
"Note that this function does all plane updates across all CRTCs in one step. "
"If the hardware can't support this approach look at "
"drm_atomic_helper_commit_planes_on_crtc() instead."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2863
msgid ""
"Plane parameters can be updated by applications while the associated CRTC is "
"disabled. The DRM/KMS core will store the parameters in the plane state, "
"which will be available to the driver when the CRTC is turned on. As a "
"result most drivers don't need to be immediately notified of plane updates "
"for a disabled CRTC."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2869
msgid ""
"Unless otherwise needed, drivers are advised to set the ACTIVE_ONLY flag in "
"**flags** in order not to receive plane update notifications related to a "
"disabled CRTC. This avoids the need to manually ignore plane updates in "
"driver code when the driver and/or hardware can't or just don't need to deal "
"with updates on disabled CRTCs, for example when supporting runtime PM."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2875
msgid ""
"Drivers may set the NO_DISABLE_AFTER_MODESET flag in **flags** if the "
"relevant display controllers require to disable a CRTC's planes when the "
"CRTC is disabled. This function would skip the :c:type:"
"`drm_plane_helper_funcs.atomic_disable <drm_plane_helper_funcs>` call for a "
"plane if the CRTC of the old plane state needs a modesetting operation. Of "
"course, the drivers need to disable the planes in their CRTC disable "
"callbacks since no one else would do that."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2882
msgid ""
"The drm_atomic_helper_commit() default implementation doesn't set the "
"ACTIVE_ONLY flag to most closely match the behaviour of the legacy helpers. "
"This should not be copied blindly by drivers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2990
msgid "commit plane state for a CRTC"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2996
#: drivers/gpu/drm/drm_atomic_helper.c:3066
msgid "``struct drm_crtc_state *old_crtc_state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2991
#: drivers/gpu/drm/drm_atomic_helper.c:3061
msgid "atomic state object with the old CRTC state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2992
msgid ""
"This function commits the new plane state using the plane and atomic helper "
"functions for planes on the specific CRTC. It assumes that the atomic state "
"has already been pushed into the relevant object state pointers, since this "
"step can no longer fail."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:2997
msgid ""
"This function is useful when plane updates should be done CRTC-by-CRTC "
"instead of one global step like drm_atomic_helper_commit_planes() does."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3000
msgid ""
"This function can only be savely used when planes are not allowed to move "
"between different CRTCs because this function doesn't handle inter-CRTC "
"dependencies. Callers need to ensure that either no such dependencies exist, "
"resolve them through ordering of commit calls or through some other means."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3060
msgid "helper to disable CRTC's planes"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3063
msgid "``bool atomic``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3062
msgid "if set, synchronize with CRTC's atomic_begin/flush hooks"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3063
msgid ""
"Disables all planes associated with the given CRTC. This can be used for "
"instance in the CRTC helper atomic_disable callback to disable all planes."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3067
msgid ""
"If the atomic-parameter is set the function calls the CRTC's atomic_begin "
"hook before and atomic_flush hook after disabling the planes."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3071
msgid ""
"It is a bug to call this function without having implemented the :c:type:"
"`drm_plane_helper_funcs.atomic_disable <drm_plane_helper_funcs>` plane hook."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3105
msgid "cleanup plane resources after commit"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3108
msgid ""
"This function cleans up plane state, specifically framebuffers, from the old "
"configuration. Hence the old configuration must be perserved in **state** to "
"be able to call this function."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3112
msgid ""
"This function may not be called on the new state when the atomic update "
"fails at any point after calling drm_atomic_helper_prepare_planes(). Use "
"drm_atomic_helper_unprepare_planes() in this case."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3134
msgid "store atomic state into current sw state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3135
msgid "atomic state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3137
msgid "``bool stall``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3136
msgid "stall for preceding commits"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3137
msgid ""
"This function stores the atomic state into the current state pointers in all "
"driver objects. It should be called after all failing steps have been done "
"and succeeded, but before the actual hardware state is committed."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3141
msgid ""
"For cleanup and error recovery the current state for all changed objects "
"will be swapped into **state**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3144
msgid ""
"With that sequence it fits perfectly into the plane prepare/cleanup sequence:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3146
msgid "Call drm_atomic_helper_prepare_planes() with the staged atomic state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3148
msgid "Do any other steps that might fail."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3150
msgid ""
"Put the staged state into the current state pointers with this function."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3152
msgid "Actually commit the hardware state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3154
msgid ""
"5. Call drm_atomic_helper_cleanup_planes() with **state**, which since step "
"3 contains the old state. Also do any other cleanup required with that state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3157
msgid ""
"**stall** must be set when nonblocking commits for this driver directly "
"access the :c:type:`drm_plane.state <drm_plane>`, :c:type:`drm_crtc.state "
"<drm_crtc>` or :c:type:`drm_connector.state <drm_connector>` pointer. With "
"the current atomic helpers this is almost always the case, since the helpers "
"don't pass the right state structures to the callbacks."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3163
msgid ""
"Returns 0 on success. Can return -ERESTARTSYS when **stall** is true and the "
"waiting for the previous commits has been interrupted."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3282
msgid "Helper for primary plane update using atomic"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3283
msgid "plane object to update"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3284
msgid "owning CRTC of owning plane"
msgstr ""

#: ../../../gpu/drm-kms-helpers:131: drivers/gpu/drm/drm_fb_dma_helper.c:47
#: drivers/gpu/drm/drm_fb_dma_helper.c:69 ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:49
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:98
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:118
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:139
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:339
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:403
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:451
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:494
#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:199
#: ../../../gpu/drm-kms-helpers:443: drivers/gpu/drm/drm_modeset_helper.c:77
#: ../../../gpu/drm-kms-helpers:461: drivers/gpu/drm/drm_plane_helper.c:147
#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3286
#: drivers/gpu/drm/drm_atomic_helper.c:3864
#: drivers/gpu/drm/drm_atomic_helper.c:3908
msgid "``struct drm_framebuffer *fb``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3285
msgid "framebuffer to flip onto plane"
msgstr ""

#: ../../../gpu/drm-kms-helpers:461: drivers/gpu/drm/drm_plane_helper.c:148
#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3287
msgid "``int crtc_x``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3286
msgid "x offset of primary plane on **crtc**"
msgstr ""

#: ../../../gpu/drm-kms-helpers:461: drivers/gpu/drm/drm_plane_helper.c:149
#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3288
msgid "``int crtc_y``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3287
msgid "y offset of primary plane on **crtc**"
msgstr ""

#: ../../../gpu/drm-kms-helpers:461: drivers/gpu/drm/drm_plane_helper.c:150
#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3289
msgid "``unsigned int crtc_w``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3288
msgid "width of primary plane rectangle on **crtc**"
msgstr ""

#: ../../../gpu/drm-kms-helpers:461: drivers/gpu/drm/drm_plane_helper.c:151
#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3290
msgid "``unsigned int crtc_h``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3289
msgid "height of primary plane rectangle on **crtc**"
msgstr ""

#: ../../../gpu/drm-kms-helpers:461: drivers/gpu/drm/drm_plane_helper.c:152
#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3291
msgid "``uint32_t src_x``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3290
msgid "x offset of **fb** for panning"
msgstr ""

#: ../../../gpu/drm-kms-helpers:461: drivers/gpu/drm/drm_plane_helper.c:153
#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3292
msgid "``uint32_t src_y``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3291
msgid "y offset of **fb** for panning"
msgstr ""

#: ../../../gpu/drm-kms-helpers:461: drivers/gpu/drm/drm_plane_helper.c:154
#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3293
msgid "``uint32_t src_w``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3292
msgid "width of source rectangle in **fb**"
msgstr ""

#: ../../../gpu/drm-kms-helpers:461: drivers/gpu/drm/drm_plane_helper.c:155
#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3294
msgid "``uint32_t src_h``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3293
msgid "height of source rectangle in **fb**"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4295
#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:389
#: drivers/gpu/drm/drm_probe_helper.c:1308 ../../../gpu/drm-kms-helpers:461:
#: drivers/gpu/drm/drm_plane_helper.c:156
#: drivers/gpu/drm/drm_plane_helper.c:248 ../../../gpu/drm-kms-helpers:470:
#: drivers/gpu/drm/drm_crtc_helper.c:518 ../../../gpu/drm-kms-helpers:68:
#: drivers/gpu/drm/drm_atomic_helper.c:3295
#: drivers/gpu/drm/drm_atomic_helper.c:3352
#: drivers/gpu/drm/drm_atomic_helper.c:3394
#: drivers/gpu/drm/drm_atomic_helper.c:3438
#: drivers/gpu/drm/drm_atomic_helper.c:3522
#: drivers/gpu/drm/drm_atomic_helper.c:3601
#: drivers/gpu/drm/drm_atomic_helper.c:3745
#: drivers/gpu/drm/drm_atomic_helper.c:3867
#: drivers/gpu/drm/drm_atomic_helper.c:3912
msgid "``struct drm_modeset_acquire_ctx *ctx``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3294
#: drivers/gpu/drm/drm_atomic_helper.c:3351
msgid "lock acquire context"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3295
msgid ""
"Provides a default plane update handler using the atomic driver interface."
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:405
#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3298
#: drivers/gpu/drm/drm_atomic_helper.c:3355
msgid "Zero on success, error code on failure"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3349
msgid "Helper for primary plane disable using atomic"
msgstr ""

#: ../../../gpu/drm-kms-helpers:461: drivers/gpu/drm/drm_plane_helper.c:246
#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3350
msgid "plane to disable"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3352
msgid ""
"Provides a default plane disable handler using the atomic driver interface."
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:515
#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3391
msgid "set a new config from userspace"
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:521
#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3397
msgid "``struct drm_mode_set *set``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:516
#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3392
msgid "mode set configuration"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3393
#: drivers/gpu/drm/drm_atomic_helper.c:3437
#: drivers/gpu/drm/drm_atomic_helper.c:3521
#: drivers/gpu/drm/drm_atomic_helper.c:3600
#: drivers/gpu/drm/drm_atomic_helper.c:3866
#: drivers/gpu/drm/drm_atomic_helper.c:3911
msgid "lock acquisition context"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3394
msgid ""
"Provides a default CRTC set_config handler using the atomic driver interface."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2834
#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:221
#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3396
#: drivers/gpu/drm/drm_atomic_helper.c:3529
msgid "**NOTE**"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3397
msgid ""
"For backwards compatibility with old userspace this automatically resets the "
"\"link-status\" property to GOOD, to force any link re-training. The SETCRTC "
"ioctl does not define whether an update does need a full modeset or just a "
"plane update, hence we're allowed to do that. See also "
"drm_connector_set_link_status_property()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:549
#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3403
#: drivers/gpu/drm/drm_atomic_helper.c:3871
#: drivers/gpu/drm/drm_atomic_helper.c:3917
msgid "Returns 0 on success, negative errno numbers on failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3435
msgid "disable all currently active outputs"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3438
msgid ""
"Loops through all connectors, finding those that aren't turned off and then "
"turns them off by setting their DPMS mode to OFF and deactivating the CRTC "
"that they are connected to."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3442
msgid ""
"This is used for example in suspend/resume to disable all currently active "
"functions when suspending. If you just want to shut down everything at e.g. "
"driver unload, look at drm_atomic_helper_shutdown()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3446
#: drivers/gpu/drm/drm_atomic_helper.c:3610
msgid ""
"Note that if callers haven't already acquired all modeset locks this might "
"return -EDEADLK, which must be handled by calling drm_modeset_backoff()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3450
msgid ""
"See also: drm_atomic_helper_suspend(), drm_atomic_helper_resume() and "
"drm_atomic_helper_shutdown()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3519
msgid "reset the active outputs of a CRTC"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3522
msgid ""
"Reset the active outputs by indicating that connectors have changed. This "
"implies a reset of all active components available between the CRTC and "
"connectors."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3526
msgid ""
"A variant of this function exists with drm_bridge_helper_reset_crtc(), "
"dedicated to bridges."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3530
msgid ""
"This relies on resetting :c:type:`drm_crtc_state.connectors_changed "
"<drm_crtc_state>`. For drivers which optimize out unnecessary modesets this "
"will result in a no-op commit, achieving nothing."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3567
msgid "shutdown all CRTC"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3569
msgid ""
"This shuts down all CRTC, which is useful for driver unloading. Shutdown on "
"suspend should instead be handled with drm_atomic_helper_suspend(), since "
"that also takes a snapshot of the modeset state to be restored on resume."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3573
msgid ""
"This is just a convenience wrapper around drm_atomic_helper_disable_all(), "
"and it is the atomic version of drm_helper_force_disable_all()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3598
msgid "duplicate an atomic state object"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3601
msgid ""
"Makes a copy of the current atomic state by looping over all objects and "
"duplicating their respective states. This is used for example by suspend/ "
"resume support code to save the state prior to suspend such that it can be "
"restored upon resume."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3606
msgid ""
"Note that this treats atomic state as persistent between save and restore. "
"Drivers must make sure that this is possible and won't result in confusion "
"or erroneous behaviour."
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:978
#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3614
msgid "See also: drm_atomic_helper_suspend(), drm_atomic_helper_resume()"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3614
msgid ""
"A pointer to the copy of the atomic state object on success or an ERR_PTR()-"
"encoded error code on failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3686
msgid "subsystem-level suspend helper"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3688
msgid ""
"Duplicates the current atomic state, disables all active outputs and then "
"returns a pointer to the original atomic state to the caller. Drivers can "
"pass this pointer to the drm_atomic_helper_resume() helper upon resume to "
"restore the output configuration that was active at the time the system "
"entered suspend."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3694
msgid ""
"Note that it is potentially unsafe to use this. The atomic state object "
"returned by this function is assumed to be persistent. Drivers must ensure "
"that this holds true. Before calling this function, drivers must make sure "
"to suspend fbdev emulation so that nothing can be using the device."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3700
msgid ""
"See also: drm_atomic_helper_duplicate_state(), "
"drm_atomic_helper_disable_all(), drm_atomic_helper_resume(), "
"drm_atomic_helper_commit_duplicated_state()"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3700
msgid ""
"A pointer to a copy of the state before suspend on success or an ERR_PTR()- "
"encoded error code on failure. Drivers should store the returned atomic "
"state object and pass it to the drm_atomic_helper_resume() helper upon "
"resume."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3742
msgid "commit duplicated state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3743
msgid "duplicated atomic state to commit"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3744
msgid "pointer to acquire_ctx to use for commit."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3745
msgid ""
"The state returned by drm_atomic_helper_duplicate_state() and "
"drm_atomic_helper_suspend() is partially invalid, and needs to be fixed up "
"before commit."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3750
#: drivers/gpu/drm/drm_atomic_helper.c:3796
msgid "See also: drm_atomic_helper_suspend()"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3787
msgid "subsystem-level resume helper"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3789
msgid "atomic state to resume to"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3790
msgid ""
"Calls drm_mode_config_reset() to synchronize hardware and software states, "
"grabs all modeset locks and commits the atomic state object. This can be "
"used in conjunction with the drm_atomic_helper_suspend() helper to implement "
"suspend/resume for drivers that support atomic mode-setting."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3861
msgid "execute a legacy page flip"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:402
#: drivers/gpu/drm/drm_format_helper.c:476
#: drivers/gpu/drm/drm_format_helper.c:529
#: drivers/gpu/drm/drm_format_helper.c:568
#: drivers/gpu/drm/drm_format_helper.c:608
#: drivers/gpu/drm/drm_format_helper.c:647
#: drivers/gpu/drm/drm_format_helper.c:687
#: drivers/gpu/drm/drm_format_helper.c:727
#: drivers/gpu/drm/drm_format_helper.c:767
#: drivers/gpu/drm/drm_format_helper.c:807
#: drivers/gpu/drm/drm_format_helper.c:847
#: drivers/gpu/drm/drm_format_helper.c:887
#: drivers/gpu/drm/drm_format_helper.c:929
#: drivers/gpu/drm/drm_format_helper.c:971
#: drivers/gpu/drm/drm_format_helper.c:1013
#: drivers/gpu/drm/drm_format_helper.c:1054
#: drivers/gpu/drm/drm_format_helper.c:1095
#: drivers/gpu/drm/drm_format_helper.c:1139
#: drivers/gpu/drm/drm_format_helper.c:1279 ../../../gpu/drm-kms-helpers:68:
#: drivers/gpu/drm/drm_atomic_helper.c:3863
#: drivers/gpu/drm/drm_atomic_helper.c:3907
msgid "DRM framebuffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3865
#: drivers/gpu/drm/drm_atomic_helper.c:3909
msgid "``struct drm_pending_vblank_event *event``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3864
#: drivers/gpu/drm/drm_atomic_helper.c:3908
msgid "optional DRM event to signal upon completion"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3865
#: drivers/gpu/drm/drm_atomic_helper.c:3909
msgid "flip flags for non-vblank sync'ed updates"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3867
msgid ""
"Provides a default :c:type:`drm_crtc_funcs.page_flip <drm_crtc_funcs>` "
"implementation using the atomic driver interface."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3871
msgid "See also: drm_atomic_helper_page_flip_target()"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3905
msgid "do page flip on target vblank period."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3911
msgid "``uint32_t target``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3910
msgid "specifying the target vblank period when the flip to take effect"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3912
msgid ""
"Provides a default :c:type:`drm_crtc_funcs.page_flip_target "
"<drm_crtc_funcs>` implementation. Similar to drm_atomic_helper_page_flip() "
"with extra parameter to specify target vblank period to flip."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3957
msgid "Propagate output format to the input end of a bridge"
msgstr ""

#: ../../../gpu/drm-kms-helpers:104:
#: drivers/gpu/drm/drm_simple_kms_helper.c:377
#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1323
#: include/drm/drm_bridge.h:1355 include/drm/drm_bridge.h:1371
#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:219
#: drivers/gpu/drm/drm_bridge.c:237 drivers/gpu/drm/drm_bridge.c:295
#: drivers/gpu/drm/drm_bridge.c:325 drivers/gpu/drm/drm_bridge.c:345
#: drivers/gpu/drm/drm_bridge.c:390 drivers/gpu/drm/drm_bridge.c:597
#: drivers/gpu/drm/drm_bridge.c:639 drivers/gpu/drm/drm_bridge.c:668
#: drivers/gpu/drm/drm_bridge.c:712 drivers/gpu/drm/drm_bridge.c:807
#: drivers/gpu/drm/drm_bridge.c:886 drivers/gpu/drm/drm_bridge.c:1176
#: drivers/gpu/drm/drm_bridge.c:1234 drivers/gpu/drm/drm_bridge.c:1258
#: drivers/gpu/drm/drm_bridge.c:1282 drivers/gpu/drm/drm_bridge.c:1304
#: drivers/gpu/drm/drm_bridge.c:1346 drivers/gpu/drm/drm_bridge.c:1373
#: drivers/gpu/drm/drm_bridge.c:1420 ../../../gpu/drm-kms-helpers:204:
#: drivers/gpu/drm/bridge/panel.c:317 drivers/gpu/drm/bridge/panel.c:342
#: drivers/gpu/drm/bridge/panel.c:470 ../../../gpu/drm-kms-helpers:68:
#: drivers/gpu/drm/drm_atomic_helper.c:3963 ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:734
#: drivers/gpu/drm/drm_atomic_state_helper.c:751
#: drivers/gpu/drm/drm_atomic_state_helper.c:776
#: drivers/gpu/drm/drm_atomic_state_helper.c:794
#: drivers/gpu/drm/drm_atomic_state_helper.c:812
msgid "``struct drm_bridge *bridge``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:291
#: drivers/gpu/drm/drm_bridge.c:324 drivers/gpu/drm/drm_bridge.c:341
#: drivers/gpu/drm/drm_bridge.c:593 drivers/gpu/drm/drm_bridge.c:635
#: drivers/gpu/drm/drm_bridge.c:663 drivers/gpu/drm/drm_bridge.c:708
#: drivers/gpu/drm/drm_bridge.c:803 drivers/gpu/drm/drm_bridge.c:881
#: drivers/gpu/drm/drm_bridge.c:1171 drivers/gpu/drm/drm_bridge.c:1229
#: drivers/gpu/drm/drm_bridge.c:1254 drivers/gpu/drm/drm_bridge.c:1277
#: drivers/gpu/drm/drm_bridge.c:1299 drivers/gpu/drm/drm_bridge.c:1341
#: drivers/gpu/drm/drm_bridge.c:1368 ../../../gpu/drm-kms-helpers:68:
#: drivers/gpu/drm/drm_atomic_helper.c:3959
msgid "bridge control structure"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3961
msgid "``struct drm_bridge_state *bridge_state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3960
msgid "new bridge state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1172
#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3961
msgid "new CRTC state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1174
#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3963
#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:429
#: drivers/gpu/drm/drm_atomic_state_helper.c:442
msgid "``struct drm_connector_state *conn_state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1173
#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3962
msgid "new connector state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3964
msgid "``u32 output_fmt``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3963
msgid "tested output bus format"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3965
msgid "``unsigned int *num_input_fmts``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3964
msgid "will contain the size of the returned array"
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3965
msgid ""
"This helper is a pluggable implementation of the :c:type:`drm_bridge_funcs."
"atomic_get_input_bus_fmts <drm_bridge_funcs>` operation for bridges that "
"don't modify the bus configuration between their input and their output. It "
"returns an array of input formats with a single element set to "
"**output_fmt**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:68: drivers/gpu/drm/drm_atomic_helper.c:3971
msgid ""
"a valid format array of size **num_input_fmts**, or NULL if the allocation "
"failed"
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:72
msgid "Atomic State Reset and Initialization"
msgstr ""

#: ../../../gpu/drm-kms-helpers:74:
#: drivers/gpu/drm/drm_atomic_state_helper.c:45
msgid ""
"Both the drm core and the atomic helpers assume that there is always the "
"full and correct atomic software state for all connectors, CRTCs and planes "
"available. Which is a bit a problem on driver load and also after system "
"suspend. One way to solve this is to have a hardware state read-out "
"infrastructure which reconstructs the full software state (e.g. the i915 "
"driver)."
msgstr ""

#: ../../../gpu/drm-kms-helpers:74:
#: drivers/gpu/drm/drm_atomic_state_helper.c:52
msgid ""
"The simpler solution is to just reset the software state to everything off, "
"which is easiest to do by calling drm_mode_config_reset(). To facilitate "
"this the atomic helpers provide default reset implementations for all hooks."
msgstr ""

#: ../../../gpu/drm-kms-helpers:74:
#: drivers/gpu/drm/drm_atomic_state_helper.c:56
msgid ""
"On the upside the precise state tracking of atomic simplifies system suspend "
"and resume a lot. For drivers using drm_mode_config_reset() a complete "
"recipe is implemented in drm_atomic_helper_suspend() and "
"drm_atomic_helper_resume(). For other drivers the building blocks are split "
"out, see the documentation for these functions."
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:78
msgid "Atomic State Helper Reference"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:66
msgid "reset the CRTC state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:67
msgid "atomic CRTC state, must not be NULL"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:68
msgid "CRTC object, must not be NULL"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:69
msgid ""
"Initializes the newly allocated **crtc_state** with default values. This is "
"useful for drivers that subclass the CRTC state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:82
msgid "reset state on CRTC"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:83
#: drivers/gpu/drm/drm_atomic_state_helper.c:109
#: drivers/gpu/drm/drm_atomic_state_helper.c:165
#: drivers/gpu/drm/drm_atomic_state_helper.c:224
msgid "drm CRTC"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:84
msgid "CRTC state to assign"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:85
msgid ""
"Initializes the newly allocated **crtc_state** and assigns it to the :c:type:"
"`drm_crtc->state <drm_crtc>` pointer of **crtc**, usually required when "
"initializing the drivers or when called from the :c:type:`drm_crtc_funcs."
"reset <drm_crtc_funcs>` hook."
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:90
msgid "This is useful for drivers that subclass the CRTC state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:108
msgid "default :c:type:`drm_crtc_funcs.reset <drm_crtc_funcs>` hook for CRTCs"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:110
msgid ""
"Resets the atomic state for **crtc** by freeing the state pointer (which "
"might be NULL, e.g. at driver load time) and allocating a new empty state "
"object."
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:127
msgid "copy atomic CRTC state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:128
#: drivers/gpu/drm/drm_atomic_state_helper.c:714
msgid "CRTC object"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:130
#: drivers/gpu/drm/drm_atomic_state_helper.c:193
#: drivers/gpu/drm/drm_atomic_state_helper.c:226
msgid "``struct drm_crtc_state *state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:129
msgid "atomic CRTC state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:130
msgid ""
"Copies atomic state from a CRTC's current state and resets inferred values. "
"This is useful for drivers that subclass the CRTC state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:164
#: drivers/gpu/drm/drm_atomic_state_helper.c:361
#: drivers/gpu/drm/drm_atomic_state_helper.c:650
msgid "default state duplicate hook"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:166
msgid ""
"Default CRTC state duplicate hook for drivers which don't have their own "
"subclassed CRTC state structure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:187
msgid "release CRTC state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:188
#: drivers/gpu/drm/drm_atomic_state_helper.c:225
msgid "CRTC state object to release"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:189
msgid ""
"Releases all resources stored in the CRTC state without actually freeing the "
"memory of the CRTC state. This is useful for drivers that subclass the CRTC "
"state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:223
#: drivers/gpu/drm/drm_atomic_state_helper.c:407
#: drivers/gpu/drm/drm_atomic_state_helper.c:697
msgid "default state destroy hook"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:226
msgid ""
"Default CRTC state destroy hook for drivers which don't have their own "
"subclassed CRTC state structure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:239
msgid "resets plane state to default values"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:240
msgid "atomic plane state, must not be NULL"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:241
msgid "plane object, must not be NULL"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:242
msgid ""
"Initializes the newly allocated **plane_state** with default values. This is "
"useful for drivers that subclass the CRTC state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:297
msgid "reset state on plane"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:298
#: drivers/gpu/drm/drm_atomic_state_helper.c:320
#: drivers/gpu/drm/drm_atomic_state_helper.c:362
#: drivers/gpu/drm/drm_atomic_state_helper.c:408
msgid "drm plane"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:299
msgid "plane state to assign"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:300
msgid ""
"Initializes the newly allocated **plane_state** and assigns it to the :c:"
"type:`drm_crtc->state <drm_crtc>` pointer of **plane**, usually required "
"when initializing the drivers or when called from the :c:type:"
"`drm_plane_funcs.reset <drm_plane_funcs>` hook."
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:305
msgid "This is useful for drivers that subclass the plane state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:319
msgid ""
"default :c:type:`drm_plane_funcs.reset <drm_plane_funcs>` hook for planes"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:321
msgid ""
"Resets the atomic state for **plane** by freeing the state pointer (which "
"might be NULL, e.g. at driver load time) and allocating a new empty state "
"object."
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:338
msgid "copy atomic plane state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:339
msgid "plane object"
msgstr ""

#: ../../../gpu/drm-kms-helpers:131: drivers/gpu/drm/drm_fb_dma_helper.c:68
#: drivers/gpu/drm/drm_fb_dma_helper.c:117 ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:341
#: drivers/gpu/drm/drm_atomic_state_helper.c:390
#: drivers/gpu/drm/drm_atomic_state_helper.c:410
#: ../../../gpu/drm-kms-helpers:89: include/drm/drm_gem_atomic_helper.h:88
#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:122
msgid "``struct drm_plane_state *state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:340
msgid "atomic plane state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:341
msgid ""
"Copies atomic state from a plane's current state. This is useful for drivers "
"that subclass the plane state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:363
msgid ""
"Default plane state duplicate hook for drivers which don't have their own "
"subclassed plane state structure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:384
msgid "release plane state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:385
#: drivers/gpu/drm/drm_atomic_state_helper.c:409
msgid "plane state object to release"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:386
msgid ""
"Releases all resources stored in the plane state without actually freeing "
"the memory of the plane state. This is useful for drivers that subclass the "
"plane state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:410
msgid ""
"Default plane state destroy hook for drivers which don't have their own "
"subclassed plane state structure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:423
msgid "reset the connector state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:424
msgid "atomic connector state, must not be NULL"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:425
msgid "connectotr object, must not be NULL"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:426
msgid ""
"Initializes the newly allocated **conn_state** with default values. This is "
"useful for drivers that subclass the connector state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:439
msgid "reset state on connector"
msgstr ""

#: ../../../gpu/drm-kms-helpers:278: drivers/gpu/drm/display/drm_dp_cec.c:429
#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7121
#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:440
#: drivers/gpu/drm/drm_atomic_state_helper.c:463
#: drivers/gpu/drm/drm_atomic_state_helper.c:651
#: drivers/gpu/drm/drm_atomic_state_helper.c:698
msgid "drm connector"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:441
msgid "connector state to assign"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:442
msgid ""
"Initializes the newly allocated **conn_state** and assigns it to the :c:type:"
"`drm_connector->state <drm_connector>` pointer of **connector**, usually "
"required when initializing the drivers or when called from the :c:type:"
"`drm_connector_funcs.reset <drm_connector_funcs>` hook."
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:447
msgid "This is useful for drivers that subclass the connector state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:462
msgid ""
"default :c:type:`drm_connector_funcs.reset <drm_connector_funcs>` hook for "
"connectors"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:464
msgid ""
"Resets the atomic state for **connector** by freeing the state pointer "
"(which might be NULL, e.g. at driver load time) and allocating a new empty "
"state object."
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:483
msgid "Resets TV connector properties"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:485
msgid "Resets the TV-related properties attached to a connector."
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:501
msgid "Resets Analog TV connector properties"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:503
msgid "Resets the analog TV properties attached to a connector"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:576
msgid "Validate an analog TV connector state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:248:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:822
#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:577
msgid "DRM Connector"
msgstr ""

#: ../../../gpu/drm-kms-helpers:248:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:823
#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:578
msgid "the DRM State object"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:579
msgid ""
"Checks the state object to see if the requested state is valid for an analog "
"TV connector."
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:583
msgid "``0`` for success, a negative error code on error."
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:625
msgid "copy atomic connector state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:626
msgid "connector object"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:628
#: drivers/gpu/drm/drm_atomic_state_helper.c:679
#: drivers/gpu/drm/drm_atomic_state_helper.c:700
msgid "``struct drm_connector_state *state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:627
msgid "atomic connector state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:628
msgid ""
"Copies atomic state from a connector's current state. This is useful for "
"drivers that subclass the connector state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:652
msgid ""
"Default connector state duplicate hook for drivers which don't have their "
"own subclassed connector state structure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:673
msgid "release connector state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:674
#: drivers/gpu/drm/drm_atomic_state_helper.c:699
msgid "connector state object to release"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:675
msgid ""
"Releases all resources stored in the connector state without actually "
"freeing the memory of the connector state. This is useful for drivers that "
"subclass the connector state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:700
msgid ""
"Default connector state destroy hook for drivers which don't have their own "
"subclassed connector state structure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:713
msgid "copy atomic private state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:719
msgid "``struct drm_private_obj *obj``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:716
msgid "``struct drm_private_state *state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:715
msgid "new private object state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:716
msgid ""
"Copies atomic state from a private objects's current state and resets "
"inferred values. This is useful for drivers that subclass the private state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:728
msgid "Copy atomic bridge state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1318
#: include/drm/drm_bridge.h:1350 include/drm/drm_bridge.h:1366
#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:729
#: drivers/gpu/drm/drm_atomic_state_helper.c:746
msgid "bridge object"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:731
#: drivers/gpu/drm/drm_atomic_state_helper.c:773
#: drivers/gpu/drm/drm_atomic_state_helper.c:792
msgid "``struct drm_bridge_state *state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:730
msgid "atomic bridge state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:731
msgid ""
"Copies atomic state from a bridge's current state and resets inferred "
"values. This is useful for drivers that subclass the bridge state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:745
msgid "Duplicate a bridge state object"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:747
msgid ""
"Allocates a new bridge state and initializes it with the current bridge "
"state values. This helper is meant to be used as a bridge :c:type:"
"`drm_bridge_funcs.atomic_duplicate_state <drm_bridge_funcs>` hook for "
"bridges that don't subclass the bridge state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:770
msgid "Destroy a bridge state object"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:771
#: drivers/gpu/drm/drm_atomic_state_helper.c:790
#: drivers/gpu/drm/drm_atomic_state_helper.c:808
msgid "the bridge this state refers to"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:772
msgid "bridge state to destroy"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:773
msgid ""
"Destroys a bridge state previously created by :c:type:"
"`drm_atomic_helper_bridge_reset`() or :c:type:"
"`drm_atomic_helper_bridge_duplicate_state`(). This helper is meant to be "
"used as a bridge :c:type:`drm_bridge_funcs.atomic_destroy_state "
"<drm_bridge_funcs>` hook for bridges that don't subclass the bridge state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:788
msgid "Initialize a bridge state to its default"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:791
msgid "bridge state to initialize"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:792
msgid ""
"Initializes the bridge state to default values. This is meant to be called "
"by the bridge :c:type:`drm_bridge_funcs.atomic_reset <drm_bridge_funcs>` "
"hook for bridges that subclass the bridge state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:806
msgid "Allocate and initialize a bridge state to its default"
msgstr ""

#: ../../../gpu/drm-kms-helpers:80:
#: drivers/gpu/drm/drm_atomic_state_helper.c:809
msgid ""
"Allocates the bridge state and initializes it to default values. This helper "
"is meant to be used as a bridge :c:type:`drm_bridge_funcs.atomic_reset "
"<drm_bridge_funcs>` hook for bridges that don't subclass the bridge state."
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:84
msgid "GEM Atomic Helper Reference"
msgstr ""

#: ../../../gpu/drm-kms-helpers:86: drivers/gpu/drm/drm_gem_atomic_helper.c:18
msgid ""
"The GEM atomic helpers library implements generic atomic-commit functions "
"for drivers that use GEM objects. Currently, it provides synchronization "
"helpers, and plane state and framebuffer BO mappings for planes with shadow "
"buffers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:86: drivers/gpu/drm/drm_gem_atomic_helper.c:23
msgid ""
"Before scanout, a plane's framebuffer needs to be synchronized with possible "
"writers that draw into the framebuffer. All drivers should call "
"drm_gem_plane_helper_prepare_fb() from their implementation of struct :c:"
"type:`drm_plane_helper.prepare_fb <drm_plane_helper>` . It sets the plane's "
"fence from the framebuffer so that the DRM core can synchronize access "
"automatically. drm_gem_plane_helper_prepare_fb() can also be used directly "
"as implementation of prepare_fb."
msgstr ""

#: ../../../gpu/drm-kms-helpers:86: drivers/gpu/drm/drm_gem_atomic_helper.c:40
msgid ""
"A driver using a shadow buffer copies the content of the shadow buffers into "
"the HW's framebuffer memory during an atomic update. This requires a mapping "
"of the shadow buffer into kernel address space. The mappings cannot be "
"established by commit-tail functions, such as atomic_update, as this would "
"violate locking rules around dma_buf_vmap()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:86: drivers/gpu/drm/drm_gem_atomic_helper.c:46
msgid ""
"The helpers for shadow-buffered planes establish and release mappings, and "
"provide struct drm_shadow_plane_state, which stores the plane's mapping for "
"commit-tail functions."
msgstr ""

#: ../../../gpu/drm-kms-helpers:86: drivers/gpu/drm/drm_gem_atomic_helper.c:50
msgid ""
"Shadow-buffered planes can easily be enabled by using the provided macros "
"``DRM_GEM_SHADOW_PLANE_FUNCS`` and ``DRM_GEM_SHADOW_PLANE_HELPER_FUNCS``. "
"These macros set up the plane and plane-helper callbacks to point to the "
"shadow-buffer helpers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:86: drivers/gpu/drm/drm_gem_atomic_helper.c:69
msgid ""
"In the driver's atomic-update function, shadow-buffer mappings are available "
"from the plane state. Use to_drm_shadow_plane_state() to upcast from struct "
"drm_plane_state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:86: drivers/gpu/drm/drm_gem_atomic_helper.c:85
msgid ""
"A mapping address for each of the framebuffer's buffer object is stored in "
"struct :c:type:`drm_shadow_plane_state.map <drm_shadow_plane_state>`. The "
"mappings are valid while the state is being used."
msgstr ""

#: ../../../gpu/drm-kms-helpers:86: drivers/gpu/drm/drm_gem_atomic_helper.c:89
msgid ""
"Drivers that use struct drm_simple_display_pipe can use "
"``DRM_GEM_SIMPLE_DISPLAY_PIPE_SHADOW_PLANE_FUNCS`` to initialize the rsp "
"callbacks. Access to shadow-buffer mappings is similar to regular "
"atomic_update."
msgstr ""

#: ../../../gpu/drm-kms-helpers:89: include/drm/drm_gem_atomic_helper.h:27
msgid "``DRM_SHADOW_PLANE_MAX_WIDTH``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:89: include/drm/drm_gem_atomic_helper.h:25
msgid "Maximum width of a plane's shadow buffer in pixels"
msgstr ""

#: ../../../gpu/drm-kms-helpers:89: include/drm/drm_gem_atomic_helper.h:26
msgid ""
"For drivers with shadow planes, the maximum width of the framebuffer is "
"usually independent from hardware limitations. Drivers can initialize struct "
"drm_mode_config.max_width from DRM_SHADOW_PLANE_MAX_WIDTH."
msgstr ""

#: ../../../gpu/drm-kms-helpers:89: include/drm/drm_gem_atomic_helper.h:36
msgid "``DRM_SHADOW_PLANE_MAX_HEIGHT``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:89: include/drm/drm_gem_atomic_helper.h:34
msgid "Maximum height of a plane's shadow buffer in scanlines"
msgstr ""

#: ../../../gpu/drm-kms-helpers:89: include/drm/drm_gem_atomic_helper.h:35
msgid ""
"For drivers with shadow planes, the maximum height of the framebuffer is "
"usually independent from hardware limitations. Drivers can initialize struct "
"drm_mode_config.max_height from DRM_SHADOW_PLANE_MAX_HEIGHT."
msgstr ""

#: ../../../gpu/drm-kms-helpers:89: include/drm/drm_gem_atomic_helper.h:43
msgid "plane state for planes with shadow buffers"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1113
#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:594
#: include/drm/display/drm_dp_mst_helper.h:641 ../../../gpu/drm-kms-helpers:89:
#: include/drm/drm_gem_atomic_helper.h:50
msgid "``base``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:89: include/drm/drm_gem_atomic_helper.h:51
msgid "plane state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:89: include/drm/drm_gem_atomic_helper.h:54
msgid "``fmtcnv_state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:201
#: ../../../gpu/drm-kms-helpers:89: include/drm/drm_gem_atomic_helper.h:55
msgid "Format-conversion state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:89: include/drm/drm_gem_atomic_helper.h:57
msgid ""
"Per-plane state for format conversion. Flags for copying shadow buffers into "
"backend storage. Also holds temporary storage for format conversion."
msgstr ""

#: ../../../gpu/drm-kms-helpers:89: include/drm/drm_gem_atomic_helper.h:65
msgid "``map``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:89: include/drm/drm_gem_atomic_helper.h:66
msgid "Mappings of the plane's framebuffer BOs in to kernel address space"
msgstr ""

#: ../../../gpu/drm-kms-helpers:89: include/drm/drm_gem_atomic_helper.h:68
msgid ""
"The memory mappings stored in map should be established in the plane's "
"prepare_fb callback and removed in the cleanup_fb callback."
msgstr ""

#: ../../../gpu/drm-kms-helpers:89: include/drm/drm_gem_atomic_helper.h:73
msgid "``data``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:89: include/drm/drm_gem_atomic_helper.h:74
msgid "Address of each framebuffer BO's data"
msgstr ""

#: ../../../gpu/drm-kms-helpers:89: include/drm/drm_gem_atomic_helper.h:76
msgid ""
"The address of the data stored in each mapping. This is different for "
"framebuffers with non-zero offset fields."
msgstr ""

#: ../../../gpu/drm-kms-helpers:89: include/drm/drm_gem_atomic_helper.h:44
msgid ""
"For planes that use a shadow buffer, struct drm_shadow_plane_state provides "
"the regular plane state plus mappings of the shadow buffer into kernel "
"address space."
msgstr ""

#: ../../../gpu/drm-kms-helpers:89: include/drm/drm_gem_atomic_helper.h:82
msgid "upcasts from struct drm_plane_state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:89: include/drm/drm_gem_atomic_helper.h:83
msgid "the plane state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:89: include/drm/drm_gem_atomic_helper.h:105
msgid "``DRM_GEM_SHADOW_PLANE_FUNCS``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:89: include/drm/drm_gem_atomic_helper.h:103
msgid "Initializes struct drm_plane_funcs for shadow-buffered planes"
msgstr ""

#: ../../../gpu/drm-kms-helpers:89: include/drm/drm_gem_atomic_helper.h:104
msgid ""
"Drivers may use GEM BOs as shadow buffers over the framebuffer memory. This "
"macro initializes struct drm_plane_funcs to use the rsp helper functions."
msgstr ""

#: ../../../gpu/drm-kms-helpers:89: include/drm/drm_gem_atomic_helper.h:120
msgid "``DRM_GEM_SHADOW_PLANE_HELPER_FUNCS``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:89: include/drm/drm_gem_atomic_helper.h:118
msgid "Initializes struct drm_plane_helper_funcs for shadow-buffered planes"
msgstr ""

#: ../../../gpu/drm-kms-helpers:89: include/drm/drm_gem_atomic_helper.h:119
msgid ""
"Drivers may use GEM BOs as shadow buffers over the framebuffer memory. This "
"macro initializes struct drm_plane_helper_funcs to use the rsp helper "
"functions."
msgstr ""

#: ../../../gpu/drm-kms-helpers:89: include/drm/drm_gem_atomic_helper.h:142
msgid "``DRM_GEM_SIMPLE_DISPLAY_PIPE_SHADOW_PLANE_FUNCS``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:89: include/drm/drm_gem_atomic_helper.h:140
msgid ""
"Initializes struct drm_simple_display_pipe_funcs for shadow-buffered planes"
msgstr ""

#: ../../../gpu/drm-kms-helpers:89: include/drm/drm_gem_atomic_helper.h:141
msgid ""
"Drivers may use GEM BOs as shadow buffers over the framebuffer memory. This "
"macro initializes struct drm_simple_display_pipe_funcs to use the rsp helper "
"functions."
msgstr ""

#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:119
msgid "Prepare a GEM backed framebuffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:120
msgid "Plane"
msgstr ""

#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:121
msgid "Plane state the fence will be attached to"
msgstr ""

#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:122
msgid ""
"This function extracts the exclusive fence from :c:type:`drm_gem_object.resv "
"<drm_gem_object>` and attaches it to plane state for the atomic helper to "
"wait on. This is necessary to correctly implement implicit synchronization "
"for any buffers shared as a struct :c:type:`dma_buf`. This function can be "
"used as the :c:type:`drm_plane_helper_funcs.prepare_fb "
"<drm_plane_helper_funcs>` callback."
msgstr ""

#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:128
msgid ""
"There is no need for :c:type:`drm_plane_helper_funcs.cleanup_fb "
"<drm_plane_helper_funcs>` hook for simple GEM based framebuffer drivers "
"which have their buffers always pinned in memory."
msgstr ""

#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:132
msgid ""
"This function is the default implementation for GEM drivers of :c:type:"
"`drm_plane_helper_funcs.prepare_fb <drm_plane_helper_funcs>` if no callback "
"is provided."
msgstr ""

#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:206
#: drivers/gpu/drm/drm_gem_atomic_helper.c:234
#: drivers/gpu/drm/drm_gem_atomic_helper.c:444
msgid "duplicates shadow-buffered plane state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:207
#: drivers/gpu/drm/drm_gem_atomic_helper.c:235
#: drivers/gpu/drm/drm_gem_atomic_helper.c:284
#: drivers/gpu/drm/drm_gem_atomic_helper.c:304
#: drivers/gpu/drm/drm_gem_atomic_helper.c:320
#: drivers/gpu/drm/drm_gem_atomic_helper.c:345
#: drivers/gpu/drm/drm_gem_atomic_helper.c:372
msgid "the plane"
msgstr ""

#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:209
msgid "``struct drm_shadow_plane_state *new_shadow_plane_state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:208
msgid "the new shadow-buffered plane state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:209
msgid ""
"This function duplicates shadow-buffered plane state. This is helpful for "
"drivers that subclass struct drm_shadow_plane_state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:212
#: drivers/gpu/drm/drm_gem_atomic_helper.c:241
msgid ""
"The function does not duplicate existing mappings of the shadow buffers. "
"Mappings are maintained during the atomic commit by the plane's prepare_fb "
"and cleanup_fb helpers. See drm_gem_prepare_shadow_fb() and "
"drm_gem_cleanup_shadow_fb() for corresponding helpers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:236
msgid ""
"This function implements struct :c:type:`drm_plane_funcs."
"atomic_duplicate_state <drm_plane_funcs>` for shadow-buffered planes. It "
"assumes the existing state to be of type struct drm_shadow_plane_state and "
"it allocates the new state to be of this type."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:517
#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:247
#: drivers/gpu/drm/drm_gem_atomic_helper.c:452
msgid "A pointer to a new plane state on success, or NULL otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:269
msgid "cleans up shadow-buffered plane state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:275
#: drivers/gpu/drm/drm_gem_atomic_helper.c:306
msgid "``struct drm_shadow_plane_state *shadow_plane_state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:270
#: drivers/gpu/drm/drm_gem_atomic_helper.c:305
msgid "the shadow-buffered plane state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:271
msgid ""
"This function cleans up shadow-buffered plane state. Helpful for drivers "
"that subclass struct drm_shadow_plane_state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:283
msgid "deletes shadow-buffered plane state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:285
#: drivers/gpu/drm/drm_gem_atomic_helper.c:346
#: drivers/gpu/drm/drm_gem_atomic_helper.c:373
#: drivers/gpu/drm/drm_gem_atomic_helper.c:395
#: drivers/gpu/drm/drm_gem_atomic_helper.c:415
#: drivers/gpu/drm/drm_gem_atomic_helper.c:465
msgid "the plane state of type struct drm_shadow_plane_state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:286
msgid ""
"This function implements struct :c:type:`drm_plane_funcs."
"atomic_destroy_state <drm_plane_funcs>` for shadow-buffered planes. It "
"expects that mappings of shadow buffers have been released already."
msgstr ""

#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:303
#: drivers/gpu/drm/drm_gem_atomic_helper.c:319
#: drivers/gpu/drm/drm_gem_atomic_helper.c:431
msgid "resets a shadow-buffered plane"
msgstr ""

#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:306
msgid ""
"This function resets state for shadow-buffered planes. Helpful for drivers "
"that subclass struct drm_shadow_plane_state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:321
msgid ""
"This function implements struct :c:type:`drm_plane_funcs.reset_plane "
"<drm_plane_funcs>` for shadow-buffered planes. It assumes the current plane "
"state to be of type struct drm_shadow_plane and it allocates the new state "
"of this type."
msgstr ""

#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:344
#: drivers/gpu/drm/drm_gem_atomic_helper.c:393
msgid "prepares shadow framebuffers for CPU access"
msgstr ""

#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:347
msgid ""
"This function implements struct :c:type:`drm_plane_helper_funcs."
"begin_fb_access <drm_plane_helper_funcs>`. It maps all buffer objects of the "
"plane's framebuffer into kernel address space and stores them in struct :c:"
"type:`drm_shadow_plane_state.map <drm_shadow_plane_state>`. The first data "
"bytes are available in struct :c:type:`drm_shadow_plane_state.data "
"<drm_shadow_plane_state>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:352
msgid "See drm_gem_end_shadow_fb_access() for cleanup."
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:263
#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:352
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:455
#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:469
#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:355
#: drivers/gpu/drm/drm_gem_atomic_helper.c:402
msgid "0 on success, or a negative errno code otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:371
#: drivers/gpu/drm/drm_gem_atomic_helper.c:413
msgid "releases shadow framebuffers from CPU access"
msgstr ""

#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:374
msgid ""
"This function implements struct :c:type:`drm_plane_helper_funcs."
"end_fb_access <drm_plane_helper_funcs>`. It undoes all effects of "
"drm_gem_begin_shadow_fb_access() in reverse order."
msgstr ""

#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:377
msgid "See drm_gem_begin_shadow_fb_access() for more information."
msgstr ""

#: ../../../gpu/drm-kms-helpers:104:
#: drivers/gpu/drm/drm_simple_kms_helper.c:380
#: drivers/gpu/drm/drm_simple_kms_helper.c:398
#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:325
#: drivers/gpu/drm/drm_mipi_dbi.c:343 drivers/gpu/drm/drm_mipi_dbi.c:440
#: drivers/gpu/drm/drm_mipi_dbi.c:466 drivers/gpu/drm/drm_mipi_dbi.c:486
#: drivers/gpu/drm/drm_mipi_dbi.c:502 drivers/gpu/drm/drm_mipi_dbi.c:515
#: drivers/gpu/drm/drm_mipi_dbi.c:533 ../../../gpu/drm-kms-helpers:92:
#: drivers/gpu/drm/drm_gem_atomic_helper.c:399
#: drivers/gpu/drm/drm_gem_atomic_helper.c:419
#: drivers/gpu/drm/drm_gem_atomic_helper.c:437
#: drivers/gpu/drm/drm_gem_atomic_helper.c:450
#: drivers/gpu/drm/drm_gem_atomic_helper.c:469
msgid "``struct drm_simple_display_pipe *pipe``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:394
#: drivers/gpu/drm/drm_gem_atomic_helper.c:414
#: drivers/gpu/drm/drm_gem_atomic_helper.c:432
#: drivers/gpu/drm/drm_gem_atomic_helper.c:445
#: drivers/gpu/drm/drm_gem_atomic_helper.c:464
msgid "the simple display pipe"
msgstr ""

#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:396
msgid ""
"This function implements struct drm_simple_display_funcs.begin_fb_access."
msgstr ""

#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:398
msgid ""
"See drm_gem_begin_shadow_fb_access() for details and "
"drm_gem_simple_kms_cleanup_shadow_fb() for cleanup."
msgstr ""

#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:416
msgid ""
"This function implements struct drm_simple_display_funcs.end_fb_access. It "
"undoes all effects of drm_gem_simple_kms_begin_shadow_fb_access() in reverse "
"order."
msgstr ""

#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:420
msgid "See drm_gem_simple_kms_begin_shadow_fb_access()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:433
msgid ""
"This function implements struct drm_simple_display_funcs.reset_plane for "
"shadow-buffered planes."
msgstr ""

#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:446
msgid ""
"This function implements struct drm_simple_display_funcs."
"duplicate_plane_state for shadow-buffered planes. It does not duplicate "
"existing mappings of the shadow buffers. Mappings are maintained during the "
"atomic commit by the plane's prepare_fb and cleanup_fb helpers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:463
msgid "resets shadow-buffered plane state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:92: drivers/gpu/drm/drm_gem_atomic_helper.c:466
msgid ""
"This function implements struct drm_simple_display_funcs.destroy_plane_state "
"for shadow-buffered planes. It expects that mappings of shadow buffers have "
"been released already."
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:96
msgid "Simple KMS Helper Reference"
msgstr ""

#: ../../../gpu/drm-kms-helpers:98: drivers/gpu/drm/drm_simple_kms_helper.c:20
msgid ""
"This helper library provides helpers for drivers for simple display hardware."
msgstr ""

#: ../../../gpu/drm-kms-helpers:98: drivers/gpu/drm/drm_simple_kms_helper.c:23
msgid ""
"drm_simple_display_pipe_init() initializes a simple display pipeline which "
"has only one full-screen scanout buffer feeding one output. The pipeline is "
"represented by :c:type:`struct drm_simple_display_pipe "
"<drm_simple_display_pipe>` and binds together :c:type:`drm_plane`, :c:type:"
"`drm_crtc` and :c:type:`drm_encoder` structures into one fixed entity. Some "
"flexibility for code reuse is provided through a separately allocated :c:"
"type:`drm_connector` object and supporting optional :c:type:`drm_bridge` "
"encoder drivers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:98: drivers/gpu/drm/drm_simple_kms_helper.c:31
msgid ""
"Many drivers require only a very simple encoder that fulfills the minimum "
"requirements of the display pipeline and does not add additional "
"functionality. The function drm_simple_encoder_init() provides an "
"implementation of such an encoder."
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:16
msgid "helper operations for a simple display pipeline"
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:22
msgid ""
"This callback is used to check if a specific mode is valid in the crtc used "
"in this simple display pipe. This should be implemented if the display pipe "
"has some sort of restriction in the modes it can display. For example, a "
"given display pipe may be responsible to set a clock value. If the clock can "
"not produce all the values for the available modes then this callback can be "
"used to restrict the number of modes to only the ones that can be displayed. "
"Another reason can be bandwidth mitigation: the memory port on the display "
"controller can have bandwidth limitations not allowing pixel data to be "
"fetched at any rate."
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:42
msgid ""
"Since this function is both called from the check phase of an atomic commit, "
"and the mode validation in the probe paths it is not allowed to look at "
"anything else but the passed-in mode, and validate it against configuration-"
"invariant hardware constraints."
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:57
msgid ""
"This function should be used to enable the pipeline. It is called when the "
"underlying crtc is enabled. This hook is optional."
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:67
msgid ""
"This function should be used to disable the pipeline. It is called when the "
"underlying crtc is disabled. This hook is optional."
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:75
msgid "``check``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:76
msgid ""
"This function is called in the check phase of an atomic update, specifically "
"when the underlying plane is checked. The simple display pipeline helpers "
"already check that the plane is not scaled, fills the entire visible area "
"and is always enabled when the crtc is also enabled. This hook is optional."
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:95
msgid "``update``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:96
msgid ""
"This function is called when the underlying plane state is updated. This "
"hook is optional."
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:99
msgid ""
"This is the function drivers should submit the :c:type:"
"`drm_pending_vblank_event` from. Using either drm_crtc_arm_vblank_event(), "
"when the driver supports vblank interrupt handling, or "
"drm_crtc_send_vblank_event() for more complex case. In case the hardware "
"lacks vblank support entirely, drivers can set :c:type:`struct "
"drm_crtc_state <drm_crtc_state>`.no_vblank in :c:type:`struct "
"drm_simple_display_pipe_funcs <drm_simple_display_pipe_funcs>`.check and let "
"DRM's atomic helper fake a vblank event."
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:114
msgid ""
"Optional, called by :c:type:`drm_plane_helper_funcs.prepare_fb "
"<drm_plane_helper_funcs>`.  Please read the documentation for the :c:type:"
"`drm_plane_helper_funcs.prepare_fb <drm_plane_helper_funcs>` hook for more "
"details."
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:118
msgid ""
"For GEM drivers who neither have a **prepare_fb** nor **cleanup_fb** hook "
"set, drm_gem_plane_helper_prepare_fb() is called automatically to implement "
"this. Other drivers which need additional plane processing can call "
"drm_gem_plane_helper_prepare_fb() from their **prepare_fb** hook."
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:130
msgid ""
"Optional, called by :c:type:`drm_plane_helper_funcs.cleanup_fb "
"<drm_plane_helper_funcs>`.  Please read the documentation for the :c:type:"
"`drm_plane_helper_funcs.cleanup_fb <drm_plane_helper_funcs>` hook for more "
"details."
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:140
msgid ""
"Optional, called by :c:type:`drm_plane_helper_funcs.begin_fb_access "
"<drm_plane_helper_funcs>`. Please read the documentation for the :c:type:"
"`drm_plane_helper_funcs.begin_fb_access <drm_plane_helper_funcs>` hook for "
"more details."
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:150
msgid ""
"Optional, called by :c:type:`drm_plane_helper_funcs.end_fb_access "
"<drm_plane_helper_funcs>`. Please read the documentation for the :c:type:"
"`drm_plane_helper_funcs.end_fb_access <drm_plane_helper_funcs>` hook for "
"more details."
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:159
msgid "``enable_vblank``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:160
msgid ""
"Optional, called by :c:type:`drm_crtc_funcs.enable_vblank <drm_crtc_funcs>`. "
"Please read the documentation for the :c:type:`drm_crtc_funcs.enable_vblank "
"<drm_crtc_funcs>` hook for more details."
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:168
msgid "``disable_vblank``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:169
msgid ""
"Optional, called by :c:type:`drm_crtc_funcs.disable_vblank "
"<drm_crtc_funcs>`. Please read the documentation for the :c:type:"
"`drm_crtc_funcs.disable_vblank <drm_crtc_funcs>` hook for more details."
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:177
msgid "``reset_crtc``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:178
msgid ""
"Optional, called by :c:type:`drm_crtc_funcs.reset <drm_crtc_funcs>`. Please "
"read the documentation for the :c:type:`drm_crtc_funcs.reset "
"<drm_crtc_funcs>` hook for more details."
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:185
msgid "``duplicate_crtc_state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:186
msgid ""
"Optional, called by :c:type:`drm_crtc_funcs.atomic_duplicate_state "
"<drm_crtc_funcs>`. Please read the documentation for the :c:type:"
"`drm_crtc_funcs.atomic_duplicate_state <drm_crtc_funcs>` hook for more "
"details."
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:194
msgid "``destroy_crtc_state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:195
msgid ""
"Optional, called by :c:type:`drm_crtc_funcs.atomic_destroy_state "
"<drm_crtc_funcs>`. Please read the documentation for the :c:type:"
"`drm_crtc_funcs.atomic_destroy_state <drm_crtc_funcs>` hook for more details."
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:204
msgid "``reset_plane``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:205
msgid ""
"Optional, called by :c:type:`drm_plane_funcs.reset <drm_plane_funcs>`. "
"Please read the documentation for the :c:type:`drm_plane_funcs.reset "
"<drm_plane_funcs>` hook for more details."
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:212
msgid "``duplicate_plane_state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:213
msgid ""
"Optional, called by :c:type:`drm_plane_funcs.atomic_duplicate_state "
"<drm_plane_funcs>`.  Please read the documentation for the :c:type:"
"`drm_plane_funcs.atomic_duplicate_state <drm_plane_funcs>` hook for more "
"details."
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:221
msgid "``destroy_plane_state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:222
msgid ""
"Optional, called by :c:type:`drm_plane_funcs.atomic_destroy_state "
"<drm_plane_funcs>`.  Please read the documentation for the :c:type:"
"`drm_plane_funcs.atomic_destroy_state <drm_plane_funcs>` hook for more "
"details."
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:232
msgid "simple display pipeline"
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:234
msgid "CRTC control structure"
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:235
msgid "Plane control structure"
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:235
#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1117
#: include/drm/drm_bridge.h:1402
msgid "``encoder``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:236
msgid "Encoder control structure"
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:236
#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:335
#: ../../../gpu/drm-kms-helpers:308: include/drm/display/drm_dp_mst_helper.h:86
#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:95
msgid "``connector``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:237
msgid "Connector control structure"
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:237
#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:118
#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1131
#: include/drm/drm_bridge.h:1288 ../../../gpu/drm-kms-helpers:215:
#: include/drm/drm_panel.h:211 include/drm/drm_panel.h:294
#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:745
msgid "``funcs``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:238
msgid "Pipeline control functions (optional)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:238
msgid ""
"Simple display pipeline with plane, crtc and encoder collapsed into one "
"entity. It should be initialized by calling drm_simple_display_pipe_init()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:271
msgid "``drmm_simple_encoder_alloc (dev, type, member, encoder_type)``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:269
msgid "Allocate and initialize an encoder with basic functionality."
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:275
#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:117
#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1115
#: include/drm/drm_bridge.h:1289 ../../../gpu/drm-kms-helpers:215:
#: include/drm/drm_panel.h:193 include/drm/drm_panel.h:294
#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:375
#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:646
#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:101
#: include/drm/drm_mipi_dsi.h:169 ../../../gpu/drm-kms-helpers:479:
#: include/drm/drm_privacy_screen_driver.h:51
msgid "``dev``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:271
#: ../../../gpu/drm-kms-helpers:104: drivers/gpu/drm/drm_simple_kms_helper.c:46
#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:460
msgid "drm device"
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:273
#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1150
#: include/drm/drm_bridge.h:1286 ../../../gpu/drm-kms-helpers:215:
#: include/drm/drm_panel.h:292 ../../../gpu/drm-kms-helpers:345:
#: include/drm/drm_mipi_dsi.h:27 include/drm/drm_mipi_dsi.h:153
msgid "``type``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:272
msgid "the type of the struct which contains struct :c:type:`drm_encoder`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:274
#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1287
#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:293
msgid "``member``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:273
msgid "the name of the :c:type:`drm_encoder` within **type**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:275
msgid "``encoder_type``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:274
#: ../../../gpu/drm-kms-helpers:104: drivers/gpu/drm/drm_simple_kms_helper.c:48
msgid "user visible type of the encoder"
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:275
msgid ""
"Allocates and initializes an encoder that has no further functionality. "
"Settings for possible CRTC and clones are left to their initial values. "
"Cleanup is automatically handled through registering drm_encoder_cleanup() "
"with drmm_add_action()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:101: include/drm/drm_simple_kms_helper.h:281
msgid "Pointer to new encoder, or ERR_PTR on failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:104: drivers/gpu/drm/drm_simple_kms_helper.c:44
msgid "Initialize a preallocated encoder with basic functionality."
msgstr ""

#: ../../../gpu/drm-kms-helpers:104: drivers/gpu/drm/drm_simple_kms_helper.c:47
msgid "the encoder to initialize"
msgstr ""

#: ../../../gpu/drm-kms-helpers:104: drivers/gpu/drm/drm_simple_kms_helper.c:49
msgid "``int encoder_type``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:104: drivers/gpu/drm/drm_simple_kms_helper.c:49
msgid ""
"Initialises a preallocated encoder that has no further functionality. "
"Settings for possible CRTC and clones are left to their initial values. The "
"encoder will be cleaned up automatically as part of the mode-setting cleanup."
msgstr ""

#: ../../../gpu/drm-kms-helpers:104: drivers/gpu/drm/drm_simple_kms_helper.c:54
msgid ""
"The caller of drm_simple_encoder_init() is responsible for freeing the "
"encoder's memory after the encoder has been cleaned up. At the moment this "
"only works reliably if the encoder data structure is stored in the device "
"structure. Free the encoder's memory as part of the device release function."
msgstr ""

#: ../../../gpu/drm-kms-helpers:104: drivers/gpu/drm/drm_simple_kms_helper.c:60
#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:600
#: drivers/gpu/drm/drm_bridge.c:641 drivers/gpu/drm/drm_bridge.c:670
#: drivers/gpu/drm/drm_bridge.c:726 drivers/gpu/drm/drm_bridge.c:820
#: drivers/gpu/drm/drm_bridge.c:888 ../../../gpu/drm-kms-helpers:336:
#: drivers/gpu/drm/drm_mipi_dbi.c:378 drivers/gpu/drm/drm_mipi_dbi.c:605
#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5786
#: drivers/gpu/drm/drm_edid.c:5831 ../../../gpu/drm-kms-helpers:470:
#: drivers/gpu/drm/drm_crtc_helper.c:1037
msgid "**Note**"
msgstr ""

#: ../../../gpu/drm-kms-helpers:104: drivers/gpu/drm/drm_simple_kms_helper.c:61
msgid ""
"consider using drmm_simple_encoder_alloc() instead of "
"drm_simple_encoder_init() to let the DRM managed resource infrastructure "
"take care of cleanup and deallocation."
msgstr ""

#: ../../../gpu/drm-kms-helpers:104: drivers/gpu/drm/drm_simple_kms_helper.c:65
#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:74
#: ../../../gpu/drm-kms-helpers:248:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:992
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:1058
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:1094
#: ../../../gpu/drm-kms-helpers:443: drivers/gpu/drm/drm_modeset_helper.c:142
#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:1041
msgid "Zero on success, error code on failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:104:
#: drivers/gpu/drm/drm_simple_kms_helper.c:374
msgid "Attach a bridge to the display pipe"
msgstr ""

#: ../../../gpu/drm-kms-helpers:104:
#: drivers/gpu/drm/drm_simple_kms_helper.c:375
msgid "simple display pipe object"
msgstr ""

#: ../../../gpu/drm-kms-helpers:104:
#: drivers/gpu/drm/drm_simple_kms_helper.c:376
#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:389
msgid "bridge to attach"
msgstr ""

#: ../../../gpu/drm-kms-helpers:104:
#: drivers/gpu/drm/drm_simple_kms_helper.c:377
msgid ""
"Makes it possible to still use the drm_simple_display_pipe helpers when a "
"DRM bridge has to be used."
msgstr ""

#: ../../../gpu/drm-kms-helpers:104:
#: drivers/gpu/drm/drm_simple_kms_helper.c:380
msgid ""
"Note that you probably want to initialize the pipe by passing a NULL "
"connector to drm_simple_display_pipe_init()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:104:
#: drivers/gpu/drm/drm_simple_kms_helper.c:384
#: drivers/gpu/drm/drm_simple_kms_helper.c:415
#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:218
#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:130
#: drivers/gpu/drm/drm_mipi_dbi.c:152 drivers/gpu/drm/drm_mipi_dbi.c:203
#: drivers/gpu/drm/drm_mipi_dbi.c:610 drivers/gpu/drm/drm_mipi_dbi.c:687
#: drivers/gpu/drm/drm_mipi_dbi.c:1265 drivers/gpu/drm/drm_mipi_dbi.c:1331
msgid "Zero on success, negative error code on failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:104:
#: drivers/gpu/drm/drm_simple_kms_helper.c:395
msgid "Initialize a simple display pipeline"
msgstr ""

#: ../../../gpu/drm-kms-helpers:104:
#: drivers/gpu/drm/drm_simple_kms_helper.c:397
msgid "simple display pipe object to initialize"
msgstr ""

#: ../../../gpu/drm-kms-helpers:104:
#: drivers/gpu/drm/drm_simple_kms_helper.c:399
#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:594
#: drivers/gpu/drm/drm_mipi_dbi.c:677
msgid "``const struct drm_simple_display_pipe_funcs *funcs``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:104:
#: drivers/gpu/drm/drm_simple_kms_helper.c:398
msgid "callbacks for the display pipe (optional)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:104:
#: drivers/gpu/drm/drm_simple_kms_helper.c:400
#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:595
msgid "``const uint32_t *formats``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:104:
#: drivers/gpu/drm/drm_simple_kms_helper.c:399
msgid "array of supported formats (DRM_FORMAT\\_\\*)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:104:
#: drivers/gpu/drm/drm_simple_kms_helper.c:401
#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:596
msgid "``unsigned int format_count``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:104:
#: drivers/gpu/drm/drm_simple_kms_helper.c:400
msgid "number of elements in **formats**"
msgstr ""

#: ../../../gpu/drm-kms-helpers:104:
#: drivers/gpu/drm/drm_simple_kms_helper.c:402
msgid "``const uint64_t *format_modifiers``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:104:
#: drivers/gpu/drm/drm_simple_kms_helper.c:401
msgid "array of formats modifiers"
msgstr ""

#: ../../../gpu/drm-kms-helpers:104:
#: drivers/gpu/drm/drm_simple_kms_helper.c:402
msgid "connector to attach and register (optional)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:104:
#: drivers/gpu/drm/drm_simple_kms_helper.c:403
msgid ""
"Sets up a display pipeline which consist of a really simple plane-crtc-"
"encoder pipe."
msgstr ""

#: ../../../gpu/drm-kms-helpers:104:
#: drivers/gpu/drm/drm_simple_kms_helper.c:406
msgid ""
"If a connector is supplied, the pipe will be coupled with the provided "
"connector. You may supply a NULL connector when using drm bridges, that "
"handle connectors themselves (see drm_simple_display_pipe_attach_bridge())."
msgstr ""

#: ../../../gpu/drm-kms-helpers:104:
#: drivers/gpu/drm/drm_simple_kms_helper.c:410
msgid ""
"Teardown of a simple display pipe is all handled automatically by the drm "
"core through calling drm_mode_config_cleanup(). Drivers afterwards need to "
"release the memory for the structure themselves."
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:108
msgid "fbdev Helper Functions Reference"
msgstr ""

#: ../../../gpu/drm-kms-helpers:110: drivers/gpu/drm/drm_fb_helper.c:85
msgid ""
"The fb helper functions are useful to provide an fbdev on top of a drm "
"kernel mode setting driver. They can be used mostly independently from the "
"crtc helper functions used by many drivers to implement the kernel mode "
"setting interfaces. Drivers that use one of the shared memory managers, TTM, "
"SHMEM, DMA, should instead use the corresponding fbdev emulation."
msgstr ""

#: ../../../gpu/drm-kms-helpers:110: drivers/gpu/drm/drm_fb_helper.c:91
msgid ""
"For suspend/resume consider using drm_mode_config_helper_suspend() and "
"drm_mode_config_helper_resume() which takes care of fbdev as well."
msgstr ""

#: ../../../gpu/drm-kms-helpers:110: drivers/gpu/drm/drm_fb_helper.c:94
msgid ""
"All other functions exported by the fb helper library can be used to "
"implement the fbdev driver interface by the driver."
msgstr ""

#: ../../../gpu/drm-kms-helpers:110: drivers/gpu/drm/drm_fb_helper.c:97
msgid ""
"It is possible, though perhaps somewhat tricky, to implement race-free "
"hotplug detection using the fbdev helpers. The drm_fb_helper_prepare() "
"helper must be called first to initialize the minimum required to make "
"hotplug detection work. Drivers also need to make sure to properly set up "
"the :c:type:`drm_mode_config.funcs <drm_mode_config>` member. After calling "
"drm_kms_helper_poll_init() it is safe to enable interrupts and start "
"processing hotplug events. At the same time, drivers should initialize all "
"modeset objects such as CRTCs, encoders and connectors. To finish up the "
"fbdev helper initialization, the drm_fb_helper_init() function is called. To "
"probe for all attached displays and set up an initial configuration using "
"the detected hardware, drivers should call drm_fb_helper_initial_config()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:110: drivers/gpu/drm/drm_fb_helper.c:109
msgid ""
"If :c:type:`drm_framebuffer_funcs.dirty <drm_framebuffer_funcs>` is set, the "
"drm_fb_helper_{cfb,sys}_{write,fillrect,copyarea,imageblit} functions will "
"accumulate changes and schedule :c:type:`drm_fb_helper.dirty_work "
"<drm_fb_helper>` to run right away. This worker then calls the dirty() "
"function ensuring that it will always run in process context since the "
"fb_*() function could be running in atomic context. If "
"drm_fb_helper_deferred_io() is used as the deferred_io callback it will also "
"schedule dirty_work with the damage collected from the mmap page writes."
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:41
#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:1718
msgid "describes fbdev size and scanout surface size"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:42
msgid "``fb_width``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:43
msgid "fbdev width"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:43
msgid "``fb_height``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:44
msgid "fbdev height"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:44
msgid "``surface_width``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:45
msgid "scanout buffer width"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:45
msgid "``surface_height``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:46
msgid "scanout buffer height"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:46
msgid "``surface_bpp``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:47
msgid "scanout buffer bpp"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:47
msgid "``surface_depth``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:48
msgid "scanout buffer depth"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:48
msgid ""
"Note that the scanout surface width/height may be larger than the fbdev "
"width/height.  In case of multiple displays, the scanout surface is sized "
"according to the largest width/height (so it is large enough for all CRTCs "
"to scanout).  But the fbdev width/height is sized to the minimum width/ "
"height of all the displays.  This ensures that fbcon fits on the smallest of "
"the attached displays. fb_width/fb_height is used by "
"drm_fb_helper_fill_info() to fill out the :c:type:`fb_info.var <fb_info>` "
"structure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:67
msgid "driver callbacks for the fbdev emulation library"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:73
msgid "``fb_dirty``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:74
msgid ""
"Driver callback to update the framebuffer memory. If set, fbdev emulation "
"will invoke this callback in regular intervals after the framebuffer has "
"been written."
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:80
msgid "Returns: 0 on success, or an error code otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:87
msgid "``fb_restore``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:88
msgid ""
"Driver callback to restore internal fbdev state. If set, fbdev emulation "
"will invoke this callback after restoring the display mode."
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:92
#: include/drm/drm_fb_helper.h:106
msgid "Only for i915. Do not use in new code."
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:94
#: include/drm/drm_fb_helper.h:108
msgid "TODO: Fix i915 to not require this callback."
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:100
msgid "``fb_set_suspend``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:101
msgid ""
"Driver callback to suspend or resume, if set, fbdev emulation will invoke "
"this callback during suspend and resume. Driver should call fb_set_suspend() "
"from their implementation. If not set, fbdev emulation will invoke "
"fb_set_suspend() directly."
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:68
msgid "Driver callbacks used by the fbdev emulation helper library."
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:115
msgid "main structure to emulate fbdev on top of KMS"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:134
msgid "``client``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:135
msgid "DRM client used by the generic fbdev emulation."
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:141
#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:316
msgid "``buffer``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:142
msgid "Framebuffer used by the generic fbdev emulation."
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:116
msgid "``fb``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:117
msgid "Scanout framebuffer object"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:119
msgid "driver callbacks for fb helper"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:119
msgid "``info``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:120
msgid "emulated fbdev device info struct"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:120
msgid "``pseudo_palette``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:121
msgid "fake palette of 16 colors"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:121
msgid "``damage_clip``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:122
msgid ""
"clip rectangle used with deferred_io to accumulate damage to the screen "
"buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:123
msgid "``damage_lock``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:124
msgid "spinlock protecting **damage_clip**"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:124
msgid "``damage_work``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:125
msgid "worker used to flush the framebuffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:125
msgid "``resume_work``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:126
msgid "worker used during resume if the console lock is already taken"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:158
#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:333
#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:685
#: ../../../gpu/drm-kms-helpers:431: include/drm/drm_flip_work.h:60
#: ../../../gpu/drm-kms-helpers:479: include/drm/drm_privacy_screen_driver.h:53
msgid "``lock``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:159
msgid ""
"Top-level FBDEV helper lock. This protects all internal data structures and "
"lists, such as **connector_info** and **crtc_info**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:162
msgid ""
"FIXME: fbdev emulation locking is a mess and long term we want to protect "
"all helper internal state with this lock as well as reduce core KMS locking "
"as much as possible."
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:170
msgid "``kernel_fb_list``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:171
msgid "Entry on the global kernel_fb_helper_list, used for kgdb entry/exit."
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:177
msgid "``delayed_hotplug``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:178
msgid ""
"A hotplug was received while fbdev wasn't in control of the DRM device, i.e. "
"another KMS master was active. The output configuration needs to be reprobe "
"when fbdev is in control again."
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:186
msgid "``deferred_setup``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:187
msgid ""
"If no outputs are connected (disconnected or unknown) the FB helper code "
"will defer setup until at least one of the outputs shows up. This field "
"keeps track of the status so that setup can be retried at every hotplug "
"event until it succeeds eventually."
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:192
msgid "Protected by **lock**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:198
msgid "``preferred_bpp``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:199
msgid ""
"Temporary storage for the driver's preferred BPP setting passed to FB helper "
"initialization. This needs to be tracked so that deferred FB helper setup "
"can pass this on."
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:203
msgid "See also: **deferred_setup**"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:210
msgid "``fbdefio``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:211
msgid ""
"Temporary storage for the driver's FB deferred I/O handler. If the driver "
"uses the DRM fbdev emulation layer, this is set by the core to a generic "
"deferred I/O handler if a driver is preferring to use a shadow buffer."
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:126
msgid ""
"This is the main structure used by the fbdev helpers. Drivers supporting "
"fbdev emulation should embedded this into their overall driver structure. "
"Drivers must also fill out a :c:type:`struct drm_fb_helper_funcs "
"<drm_fb_helper_funcs>` with a few operations."
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:230
msgid "``DRM_FB_HELPER_DEFAULT_OPS``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:228
msgid "helper define for drm drivers"
msgstr ""

#: ../../../gpu/drm-kms-helpers:113: include/drm/drm_fb_helper.h:229
msgid ""
"Helper define to register default implementations of drm_fb_helper "
"functions. To be used in struct fb_ops of drm drivers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:137
msgid "implementation for :c:type:`fb_ops.fb_debug_enter <fb_ops>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:143
#: drivers/gpu/drm/drm_fb_helper.c:179 drivers/gpu/drm/drm_fb_helper.c:321
#: drivers/gpu/drm/drm_fb_helper.c:712 drivers/gpu/drm/drm_fb_helper.c:1024
#: drivers/gpu/drm/drm_fb_helper.c:1065 drivers/gpu/drm/drm_fb_helper.c:1233
#: drivers/gpu/drm/drm_fb_helper.c:1332 drivers/gpu/drm/drm_fb_helper.c:1430
#: drivers/gpu/drm/drm_fb_helper.c:1721
msgid "``struct fb_info *info``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:138
#: drivers/gpu/drm/drm_fb_helper.c:174 drivers/gpu/drm/drm_fb_helper.c:320
#: drivers/gpu/drm/drm_fb_helper.c:1023 drivers/gpu/drm/drm_fb_helper.c:1060
#: drivers/gpu/drm/drm_fb_helper.c:1232 drivers/gpu/drm/drm_fb_helper.c:1327
#: drivers/gpu/drm/drm_fb_helper.c:1429
msgid "fbdev registered by the helper"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:173
msgid "implementation for :c:type:`fb_ops.fb_debug_leave <fb_ops>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:256
msgid "restore fbdev configuration"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:262
#: drivers/gpu/drm/drm_fb_helper.c:453 drivers/gpu/drm/drm_fb_helper.c:462
#: drivers/gpu/drm/drm_fb_helper.c:501 drivers/gpu/drm/drm_fb_helper.c:543
#: drivers/gpu/drm/drm_fb_helper.c:566 drivers/gpu/drm/drm_fb_helper.c:585
#: drivers/gpu/drm/drm_fb_helper.c:757 drivers/gpu/drm/drm_fb_helper.c:778
#: drivers/gpu/drm/drm_fb_helper.c:1718 drivers/gpu/drm/drm_fb_helper.c:1876
#: drivers/gpu/drm/drm_fb_helper.c:1930
msgid "``struct drm_fb_helper *fb_helper``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:257
#: drivers/gpu/drm/drm_fb_helper.c:580 drivers/gpu/drm/drm_fb_helper.c:752
#: drivers/gpu/drm/drm_fb_helper.c:774 drivers/gpu/drm/drm_fb_helper.c:1926
msgid "driver-allocated fbdev helper, can be NULL"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:258
msgid ""
"This helper should be called from fbdev emulation's :c:type:"
"`drm_client_funcs.restore <drm_client_funcs>` callback. It ensures that the "
"user isn't greeted with a black screen when the userspace compositor "
"releases the display device."
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:318
msgid "implementation for :c:type:`fb_ops.fb_blank <fb_ops>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:324
msgid "``int blank``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:319
msgid "desired blanking state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:407
msgid "setup a drm_fb_helper structure"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:410
msgid "``struct drm_fb_helper *helper``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:409
#: drivers/gpu/drm/drm_fb_helper.c:448
msgid "driver-allocated fbdev helper structure to set up"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:411
msgid "``unsigned int preferred_bpp``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:410
msgid "Preferred bits per pixel for the device."
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:412
msgid "``const struct drm_fb_helper_funcs *funcs``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:411
msgid "pointer to structure of functions associate with this helper"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:412
msgid ""
"Sets up the bare minimum to make the framebuffer helper usable. This is "
"useful to implement race-free initialization of the polling helpers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:447
msgid "clean up a drm_fb_helper structure"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:449
msgid "Cleans up the framebuffer helper. Inverse of drm_fb_helper_prepare()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:459
msgid "initialize a :c:type:`struct drm_fb_helper <drm_fb_helper>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:461
msgid "driver-allocated fbdev helper structure to initialize"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:462
msgid ""
"This allocates the structures for the fbdev helper with the given limits. "
"Note that this won't yet touch the hardware (through the driver interfaces) "
"nor register the fbdev. This is only done in drm_fb_helper_initial_config() "
"to allow driver writes more control over the exact init sequence."
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:467
msgid "Drivers must call drm_fb_helper_prepare() before calling this function."
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:470
#: drivers/gpu/drm/drm_fb_helper.c:1906
msgid "Zero if everything went ok, nonzero otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:495
msgid "allocate fb_info and some of its members"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:496
#: drivers/gpu/drm/drm_fb_helper.c:538
msgid "driver-allocated fbdev helper"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:497
msgid ""
"A helper to alloc fb_info and the member cmap. Called by the driver within "
"the struct :c:type:`drm_driver.fbdev_probe <drm_driver>` callback function. "
"Drivers do not need to release the allocated fb_info structure themselves, "
"this is automatically done when calling drm_fb_helper_fini()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:503
msgid ""
"fb_info pointer if things went okay, pointer containing error code otherwise"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:537
msgid "release fb_info and its members"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:539
msgid ""
"A helper to release fb_info and the member cmap.  Drivers do not need to "
"release the allocated fb_info structure themselves, this is automatically "
"done when calling drm_fb_helper_fini()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:560
msgid "unregister fb_info framebuffer device"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:561
msgid "driver-allocated fbdev helper, must not be NULL"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:562
msgid ""
"A wrapper around unregister_framebuffer, to release the fb_info framebuffer "
"device. This must be called before releasing all resources for **fb_helper** "
"by calling drm_fb_helper_fini()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:579
msgid "finialize a :c:type:`struct drm_fb_helper <drm_fb_helper>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:581
msgid "This cleans up all remaining resources associated with **fb_helper**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:706
msgid "fbdev deferred_io callback function"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:707
msgid "fb_info struct pointer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:709
msgid "``struct list_head *pagereflist``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:708
msgid "list of mmap framebuffer pages that have to be flushed"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:709
msgid ""
"This function is used as the :c:type:`fb_deferred_io.deferred_io "
"<fb_deferred_io>` callback function for flushing the fbdev mmap writes."
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:751
msgid "wrapper around fb_set_suspend"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:754
#: drivers/gpu/drm/drm_fb_helper.c:776
msgid "``bool suspend``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:753
#: drivers/gpu/drm/drm_fb_helper.c:775
msgid "whether to suspend or resume"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:754
msgid ""
"A wrapper around fb_set_suspend implemented by fbdev core. Use "
"drm_fb_helper_set_suspend_unlocked() if you don't need to take the lock "
"yourself"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:772
msgid "wrapper around fb_set_suspend that also takes the console lock"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:776
msgid ""
"A wrapper around fb_set_suspend() that takes the console lock. If the lock "
"isn't available on resume, a worker is tasked with waiting for the lock to "
"become available. The console lock can be pretty contented on resume due to "
"all the printk activity."
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:781
msgid ""
"This function can be called multiple times with the same state since :c:type:"
"`fb_info.state <fb_info>` is checked to see if fbdev is running or not "
"before locking."
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:784
msgid "Use drm_fb_helper_set_suspend() if you need to take the lock yourself."
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:1021
msgid "implementation for :c:type:`fb_ops.fb_setcmap <fb_ops>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:1027
msgid "``struct fb_cmap *cmap``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:1022
msgid "cmap to set"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:1059
msgid "legacy ioctl implementation"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:1062
msgid "``unsigned int cmd``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:1061
msgid "ioctl command"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:1063
msgid "``unsigned long arg``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:1062
msgid "ioctl argument"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:1063
msgid ""
"A helper to implement the standard fbdev ioctl. Only FBIO_WAITFORVSYNC is "
"implemented for now."
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:1230
msgid "implementation for :c:type:`fb_ops.fb_check_var <fb_ops>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:1236
#: drivers/gpu/drm/drm_fb_helper.c:1433
msgid "``struct fb_var_screeninfo *var``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:1231
msgid "screeninfo to check"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:1326
msgid "implementation for :c:type:`fb_ops.fb_set_par <fb_ops>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:1328
msgid ""
"This will let fbcon do the mode init and is called at initialization time by "
"the fbdev core when registering the driver, and later on through the hotplug "
"callback."
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:1427
msgid "implementation for :c:type:`fb_ops.fb_pan_display <fb_ops>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:1428
msgid "updated screen information"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:1715
msgid "initializes fbdev information"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:1716
msgid "fbdev instance to set up"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:1717
msgid "fb helper instance to use as template"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:1719
msgid "``struct drm_fb_helper_surface_size *sizes``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:1719
msgid ""
"Sets up the variable and fixed fbdev metainformation from the given fb "
"helper instance and the drm framebuffer allocated in :c:type:`drm_fb_helper."
"fb <drm_fb_helper>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:1722
msgid ""
"Drivers should call this (or their equivalent setup code) from their :c:type:"
"`drm_driver.fbdev_probe <drm_driver>` callback after having allocated the "
"fbdev backing storage framebuffer."
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:1870
msgid "setup a sane initial connector configuration"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:1871
msgid "fb_helper device struct"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:1872
msgid ""
"Scans the CRTCs and connectors and tries to put together an initial setup. "
"At the moment, this is a cloned configuration across all heads with a new "
"framebuffer object as the backing store."
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:1876
msgid ""
"Note that this also registers the fbdev and so allows userspace to call into "
"the driver through the fbdev interfaces."
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:1879
msgid ""
"This function will call down into the :c:type:`drm_driver.fbdev_probe "
"<drm_driver>` callback to let the driver allocate and initialize the fbdev "
"info structure and the drm framebuffer used to back the fbdev. "
"drm_fb_helper_fill_info() is provided as a helper to setup simple default "
"values for the fbdev info structure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:1884
msgid "HANG DEBUGGING:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:1886
msgid ""
"When you have fbcon support built-in or already loaded, this function will "
"do a full modeset to setup the fbdev console. Due to locking misdesign in "
"the VT/fbdev subsystem that entire modeset sequence has to be done while "
"holding console_lock. Until console_unlock is called no dmesg lines will be "
"sent out to consoles, not even serial console. This means when your driver "
"crashes, you will see absolutely nothing else but a system stuck in this "
"function, with no further output. Any kind of printk() you place within your "
"own driver or in the drm core modeset code will also never show up."
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:1895
msgid ""
"Standard debug practice is to run the fbcon setup without taking the "
"console_lock as a hack, to be able to see backtraces and crashes on the "
"serial line. This can be done by setting the fb.lockless_register_fb=1 "
"kernel cmdline option."
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:1900
msgid ""
"The other option is to just disable fbdev emulation since very likely the "
"first modeset from userspace will crash in the same way, and is even easier "
"to debug. This can be done by setting the drm_kms_helper.fbdev_emulation=0 "
"kernel cmdline option."
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:1924
msgid ""
"respond to a hotplug notification by probing all the outputs attached to the "
"fb"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:1927
msgid ""
"Scan the connectors attached to the fb_helper and try to put together a "
"setup after notification of a change in output configuration."
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:1930
msgid ""
"Called at runtime, takes the mode config locks to be able to check/change "
"the modeset configuration. Must be run from process context (which usually "
"means either the output polling work or a work item launched from the "
"driver's hotplug interrupt)."
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:1935
msgid ""
"Note that drivers may call this even before calling "
"drm_fb_helper_initial_config but only after drm_fb_helper_init. This allows "
"for a race-free fbcon setup and will make sure that the fbdev emulation will "
"not miss any hotplug events."
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:1941
msgid "0 on success and a non-zero error code otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:1978
msgid "DRM driver lastclose helper for fbdev emulation"
msgstr ""

#: ../../../gpu/drm-kms-helpers:116: drivers/gpu/drm/drm_fb_helper.c:1980
msgid ""
"This function is obsolete. Call drm_fb_helper_restore_fbdev_mode_unlocked() "
"instead."
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:120
msgid "format Helper Functions Reference"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:27
msgid "Initialize format-conversion state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:33
#: drivers/gpu/drm/drm_format_helper.c:48
#: drivers/gpu/drm/drm_format_helper.c:69
#: drivers/gpu/drm/drm_format_helper.c:105
#: drivers/gpu/drm/drm_format_helper.c:480
#: drivers/gpu/drm/drm_format_helper.c:532
#: drivers/gpu/drm/drm_format_helper.c:571
#: drivers/gpu/drm/drm_format_helper.c:611
#: drivers/gpu/drm/drm_format_helper.c:650
#: drivers/gpu/drm/drm_format_helper.c:690
#: drivers/gpu/drm/drm_format_helper.c:730
#: drivers/gpu/drm/drm_format_helper.c:770
#: drivers/gpu/drm/drm_format_helper.c:810
#: drivers/gpu/drm/drm_format_helper.c:850
#: drivers/gpu/drm/drm_format_helper.c:890
#: drivers/gpu/drm/drm_format_helper.c:932
#: drivers/gpu/drm/drm_format_helper.c:974
#: drivers/gpu/drm/drm_format_helper.c:1016
#: drivers/gpu/drm/drm_format_helper.c:1057
#: drivers/gpu/drm/drm_format_helper.c:1098
#: drivers/gpu/drm/drm_format_helper.c:1142
#: drivers/gpu/drm/drm_format_helper.c:1178
#: drivers/gpu/drm/drm_format_helper.c:1282
msgid "``struct drm_format_conv_state *state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:28
msgid "The state to initialize"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:29
msgid ""
"Clears all fields in struct drm_format_conv_state. The state will be empty "
"with no preallocated resources."
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:42
msgid "Copy format-conversion state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:43
msgid "Destination state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:45
msgid "``const struct drm_format_conv_state *old_state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:44
msgid "Source state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:45
msgid ""
"Copies format-conversion state from **old_state** to **state**; except for "
"temporary storage."
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:63
msgid "Allocates storage for format conversion"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:64
#: drivers/gpu/drm/drm_format_helper.c:100
msgid "The format-conversion state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:66
msgid "``size_t new_size``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:65
msgid "The minimum allocation size"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:67
msgid "``gfp_t flags``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:66
msgid "Flags for kmalloc()"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:67
msgid ""
"Allocates at least **new_size** bytes and returns a pointer to the memory "
"range. After calling this function, previously returned memory blocks are "
"invalid. It's best to collect all memory requirements of a format conversion "
"and call this function once to allocate the range."
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:73
msgid "A pointer to the allocated memory range, or NULL otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:99
msgid "Releases an format-conversion storage"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:101
msgid ""
"Releases the memory range references by the format-conversion state. After "
"this call, all pointers to the memory are invalid. Prefer "
"drm_format_conv_state_init() for cleaning up and unloading a driver."
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:123
msgid "Returns the clipping rectangles byte-offset in a framebuffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:129
msgid "``unsigned int pitch``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:124
msgid "Framebuffer line pitch in byte"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:126
msgid "``const struct drm_format_info *format``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:125
msgid "Framebuffer format"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:127
#: drivers/gpu/drm/drm_format_helper.c:404
#: drivers/gpu/drm/drm_format_helper.c:478
#: drivers/gpu/drm/drm_format_helper.c:531
#: drivers/gpu/drm/drm_format_helper.c:570
#: drivers/gpu/drm/drm_format_helper.c:610
#: drivers/gpu/drm/drm_format_helper.c:649
#: drivers/gpu/drm/drm_format_helper.c:689
#: drivers/gpu/drm/drm_format_helper.c:729
#: drivers/gpu/drm/drm_format_helper.c:769
#: drivers/gpu/drm/drm_format_helper.c:809
#: drivers/gpu/drm/drm_format_helper.c:849
#: drivers/gpu/drm/drm_format_helper.c:889
#: drivers/gpu/drm/drm_format_helper.c:931
#: drivers/gpu/drm/drm_format_helper.c:973
#: drivers/gpu/drm/drm_format_helper.c:1015
#: drivers/gpu/drm/drm_format_helper.c:1056
#: drivers/gpu/drm/drm_format_helper.c:1097
#: drivers/gpu/drm/drm_format_helper.c:1141
#: drivers/gpu/drm/drm_format_helper.c:1177
#: drivers/gpu/drm/drm_format_helper.c:1281 ../../../gpu/drm-kms-helpers:422:
#: drivers/gpu/drm/drm_rect.c:82
msgid "``const struct drm_rect *clip``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:126
msgid "Clip rectangle"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:128
msgid ""
"The byte offset of the clip rectangle's top-left corner within the "
"framebuffer."
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:397
msgid "Copy clip buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:403
#: drivers/gpu/drm/drm_format_helper.c:477
#: drivers/gpu/drm/drm_format_helper.c:530
#: drivers/gpu/drm/drm_format_helper.c:569
#: drivers/gpu/drm/drm_format_helper.c:609
#: drivers/gpu/drm/drm_format_helper.c:648
#: drivers/gpu/drm/drm_format_helper.c:688
#: drivers/gpu/drm/drm_format_helper.c:728
#: drivers/gpu/drm/drm_format_helper.c:768
#: drivers/gpu/drm/drm_format_helper.c:808
#: drivers/gpu/drm/drm_format_helper.c:848
#: drivers/gpu/drm/drm_format_helper.c:888
#: drivers/gpu/drm/drm_format_helper.c:930
#: drivers/gpu/drm/drm_format_helper.c:972
#: drivers/gpu/drm/drm_format_helper.c:1014
#: drivers/gpu/drm/drm_format_helper.c:1055
#: drivers/gpu/drm/drm_format_helper.c:1096
#: drivers/gpu/drm/drm_format_helper.c:1140
#: drivers/gpu/drm/drm_format_helper.c:1175
#: drivers/gpu/drm/drm_format_helper.c:1280
msgid "``struct iosys_map *dst``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:398
#: drivers/gpu/drm/drm_format_helper.c:472
msgid "Array of destination buffers"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:400
#: drivers/gpu/drm/drm_format_helper.c:474
#: drivers/gpu/drm/drm_format_helper.c:527
#: drivers/gpu/drm/drm_format_helper.c:566
#: drivers/gpu/drm/drm_format_helper.c:606
#: drivers/gpu/drm/drm_format_helper.c:645
#: drivers/gpu/drm/drm_format_helper.c:685
#: drivers/gpu/drm/drm_format_helper.c:725
#: drivers/gpu/drm/drm_format_helper.c:765
#: drivers/gpu/drm/drm_format_helper.c:805
#: drivers/gpu/drm/drm_format_helper.c:845
#: drivers/gpu/drm/drm_format_helper.c:885
#: drivers/gpu/drm/drm_format_helper.c:927
#: drivers/gpu/drm/drm_format_helper.c:969
#: drivers/gpu/drm/drm_format_helper.c:1011
#: drivers/gpu/drm/drm_format_helper.c:1052
#: drivers/gpu/drm/drm_format_helper.c:1093
#: drivers/gpu/drm/drm_format_helper.c:1137
#: drivers/gpu/drm/drm_format_helper.c:1172
#: drivers/gpu/drm/drm_format_helper.c:1277
msgid "``const unsigned int *dst_pitch``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:399
#: drivers/gpu/drm/drm_format_helper.c:473
#: drivers/gpu/drm/drm_format_helper.c:526
#: drivers/gpu/drm/drm_format_helper.c:565
#: drivers/gpu/drm/drm_format_helper.c:605
#: drivers/gpu/drm/drm_format_helper.c:644
#: drivers/gpu/drm/drm_format_helper.c:684
#: drivers/gpu/drm/drm_format_helper.c:724
#: drivers/gpu/drm/drm_format_helper.c:764
#: drivers/gpu/drm/drm_format_helper.c:804
#: drivers/gpu/drm/drm_format_helper.c:844
#: drivers/gpu/drm/drm_format_helper.c:884
#: drivers/gpu/drm/drm_format_helper.c:926
#: drivers/gpu/drm/drm_format_helper.c:968
#: drivers/gpu/drm/drm_format_helper.c:1010
#: drivers/gpu/drm/drm_format_helper.c:1051
#: drivers/gpu/drm/drm_format_helper.c:1092
#: drivers/gpu/drm/drm_format_helper.c:1136
#: drivers/gpu/drm/drm_format_helper.c:1171
#: drivers/gpu/drm/drm_format_helper.c:1276
msgid ""
"Array of numbers of bytes between the start of two consecutive scanlines "
"within **dst**; can be NULL if scanlines are stored next to each other."
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:402
#: drivers/gpu/drm/drm_format_helper.c:476
#: drivers/gpu/drm/drm_format_helper.c:529
#: drivers/gpu/drm/drm_format_helper.c:568
#: drivers/gpu/drm/drm_format_helper.c:608
#: drivers/gpu/drm/drm_format_helper.c:647
#: drivers/gpu/drm/drm_format_helper.c:687
#: drivers/gpu/drm/drm_format_helper.c:727
#: drivers/gpu/drm/drm_format_helper.c:767
#: drivers/gpu/drm/drm_format_helper.c:807
#: drivers/gpu/drm/drm_format_helper.c:847
#: drivers/gpu/drm/drm_format_helper.c:887
#: drivers/gpu/drm/drm_format_helper.c:929
#: drivers/gpu/drm/drm_format_helper.c:971
#: drivers/gpu/drm/drm_format_helper.c:1013
#: drivers/gpu/drm/drm_format_helper.c:1054
#: drivers/gpu/drm/drm_format_helper.c:1095
#: drivers/gpu/drm/drm_format_helper.c:1139
#: drivers/gpu/drm/drm_format_helper.c:1175
#: drivers/gpu/drm/drm_format_helper.c:1279
msgid "``const struct iosys_map *src``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:401
#: drivers/gpu/drm/drm_format_helper.c:475
msgid "Array of source buffers"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:403
#: drivers/gpu/drm/drm_format_helper.c:477
#: drivers/gpu/drm/drm_format_helper.c:530
#: drivers/gpu/drm/drm_format_helper.c:569
#: drivers/gpu/drm/drm_format_helper.c:609
#: drivers/gpu/drm/drm_format_helper.c:648
#: drivers/gpu/drm/drm_format_helper.c:688
#: drivers/gpu/drm/drm_format_helper.c:728
#: drivers/gpu/drm/drm_format_helper.c:768
#: drivers/gpu/drm/drm_format_helper.c:808
#: drivers/gpu/drm/drm_format_helper.c:848
#: drivers/gpu/drm/drm_format_helper.c:888
#: drivers/gpu/drm/drm_format_helper.c:930
#: drivers/gpu/drm/drm_format_helper.c:972
#: drivers/gpu/drm/drm_format_helper.c:1014
#: drivers/gpu/drm/drm_format_helper.c:1055
#: drivers/gpu/drm/drm_format_helper.c:1096
#: drivers/gpu/drm/drm_format_helper.c:1140
#: drivers/gpu/drm/drm_format_helper.c:1176
#: drivers/gpu/drm/drm_format_helper.c:1280
msgid "``const struct drm_framebuffer *fb``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:403
#: drivers/gpu/drm/drm_format_helper.c:477
#: drivers/gpu/drm/drm_format_helper.c:530
#: drivers/gpu/drm/drm_format_helper.c:569
#: drivers/gpu/drm/drm_format_helper.c:609
#: drivers/gpu/drm/drm_format_helper.c:648
#: drivers/gpu/drm/drm_format_helper.c:688
#: drivers/gpu/drm/drm_format_helper.c:728
#: drivers/gpu/drm/drm_format_helper.c:768
#: drivers/gpu/drm/drm_format_helper.c:808
#: drivers/gpu/drm/drm_format_helper.c:848
#: drivers/gpu/drm/drm_format_helper.c:888
#: drivers/gpu/drm/drm_format_helper.c:930
#: drivers/gpu/drm/drm_format_helper.c:972
#: drivers/gpu/drm/drm_format_helper.c:1014
#: drivers/gpu/drm/drm_format_helper.c:1055
#: drivers/gpu/drm/drm_format_helper.c:1096
#: drivers/gpu/drm/drm_format_helper.c:1140
#: drivers/gpu/drm/drm_format_helper.c:1176
#: drivers/gpu/drm/drm_format_helper.c:1280
msgid "Clip rectangle area to copy"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:404
msgid ""
"This function copies parts of a framebuffer to display memory. Destination "
"and framebuffer formats must match. No conversion takes place. The "
"parameters **dst**, **dst_pitch** and **src** refer to arrays. Each array "
"must have at least as many entries as there are planes in **fb**'s format. "
"Each entry stores the value for the format's respective color plane at the "
"same index."
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:410
#: drivers/gpu/drm/drm_format_helper.c:488
#: drivers/gpu/drm/drm_format_helper.c:538
#: drivers/gpu/drm/drm_format_helper.c:577
#: drivers/gpu/drm/drm_format_helper.c:617
#: drivers/gpu/drm/drm_format_helper.c:656
#: drivers/gpu/drm/drm_format_helper.c:696
#: drivers/gpu/drm/drm_format_helper.c:736
#: drivers/gpu/drm/drm_format_helper.c:776
#: drivers/gpu/drm/drm_format_helper.c:816
#: drivers/gpu/drm/drm_format_helper.c:856
#: drivers/gpu/drm/drm_format_helper.c:896
#: drivers/gpu/drm/drm_format_helper.c:938
#: drivers/gpu/drm/drm_format_helper.c:980
#: drivers/gpu/drm/drm_format_helper.c:1022
#: drivers/gpu/drm/drm_format_helper.c:1063
#: drivers/gpu/drm/drm_format_helper.c:1104
#: drivers/gpu/drm/drm_format_helper.c:1148
#: drivers/gpu/drm/drm_format_helper.c:1185
msgid ""
"This function does not apply clipping on **dst** (i.e. the destination is at "
"the top-left corner)."
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:471
msgid "Swap bytes into clip buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:479
msgid "``bool cached``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:478
msgid "Source buffer is mapped cached (eg. not write-combined)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:479
#: drivers/gpu/drm/drm_format_helper.c:531
#: drivers/gpu/drm/drm_format_helper.c:570
#: drivers/gpu/drm/drm_format_helper.c:610
#: drivers/gpu/drm/drm_format_helper.c:649
#: drivers/gpu/drm/drm_format_helper.c:689
#: drivers/gpu/drm/drm_format_helper.c:729
#: drivers/gpu/drm/drm_format_helper.c:769
#: drivers/gpu/drm/drm_format_helper.c:809
#: drivers/gpu/drm/drm_format_helper.c:849
#: drivers/gpu/drm/drm_format_helper.c:889
#: drivers/gpu/drm/drm_format_helper.c:931
#: drivers/gpu/drm/drm_format_helper.c:973
#: drivers/gpu/drm/drm_format_helper.c:1015
#: drivers/gpu/drm/drm_format_helper.c:1056
#: drivers/gpu/drm/drm_format_helper.c:1097
#: drivers/gpu/drm/drm_format_helper.c:1141
#: drivers/gpu/drm/drm_format_helper.c:1177
#: drivers/gpu/drm/drm_format_helper.c:1281
msgid "Transform and conversion state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:480
msgid ""
"This function copies parts of a framebuffer to display memory and swaps per-"
"pixel bytes during the process. Destination and framebuffer formats must "
"match. The parameters **dst**, **dst_pitch** and **src** refer to arrays. "
"Each array must have at least as many entries as there are planes in "
"**fb**'s format. Each entry stores the value for the format's respective "
"color plane at the same index. If **cached** is false a temporary buffer is "
"used to cache one pixel line at a time to speed up slow uncached reads."
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:524
msgid "Convert XRGB8888 to RGB332 clip buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:525
msgid "Array of RGB332 destination buffers"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:528
#: drivers/gpu/drm/drm_format_helper.c:766
#: drivers/gpu/drm/drm_format_helper.c:806
#: drivers/gpu/drm/drm_format_helper.c:1012
#: drivers/gpu/drm/drm_format_helper.c:1053
#: drivers/gpu/drm/drm_format_helper.c:1094
#: drivers/gpu/drm/drm_format_helper.c:1278
msgid "Array of XRGB8888 source buffers"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:532
#: drivers/gpu/drm/drm_format_helper.c:571
#: drivers/gpu/drm/drm_format_helper.c:611
#: drivers/gpu/drm/drm_format_helper.c:770
#: drivers/gpu/drm/drm_format_helper.c:810
#: drivers/gpu/drm/drm_format_helper.c:1016
#: drivers/gpu/drm/drm_format_helper.c:1098
#: drivers/gpu/drm/drm_format_helper.c:1282
msgid ""
"This function copies parts of a framebuffer to display memory and converts "
"the color format during the process. Destination and framebuffer formats "
"must match. The parameters **dst**, **dst_pitch** and **src** refer to "
"arrays. Each array must have at least as many entries as there are planes in "
"**fb**'s format. Each entry stores the value for the format's respective "
"color plane at the same index."
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:541
msgid ""
"Drivers can use this function for RGB332 devices that don't support XRGB8888 "
"natively."
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:563
msgid "Convert XRGB8888 to RGB565 clip buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:564
msgid "Array of RGB565 destination buffers"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:567
#: drivers/gpu/drm/drm_format_helper.c:607
#: drivers/gpu/drm/drm_format_helper.c:646
#: drivers/gpu/drm/drm_format_helper.c:686
#: drivers/gpu/drm/drm_format_helper.c:726
#: drivers/gpu/drm/drm_format_helper.c:846
#: drivers/gpu/drm/drm_format_helper.c:886
#: drivers/gpu/drm/drm_format_helper.c:928
#: drivers/gpu/drm/drm_format_helper.c:970
msgid "Array of XRGB8888 source buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:580
msgid ""
"Drivers can use this function for RGB565 devices that don't support XRGB8888 "
"natively."
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:603
msgid "Convert XRGB8888 to RGB565|DRM_FORMAT_BIG_ENDIAN clip buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:604
msgid "Array of RGB565BE destination buffers"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:620
msgid ""
"Drivers can use this function for RGB565BE devices that don't support "
"XRGB8888 natively."
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:642
msgid "Convert XRGB8888 to XRGB1555 clip buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:643
msgid "Array of XRGB1555 destination buffers"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:650
#: drivers/gpu/drm/drm_format_helper.c:690
#: drivers/gpu/drm/drm_format_helper.c:730
#: drivers/gpu/drm/drm_format_helper.c:850
#: drivers/gpu/drm/drm_format_helper.c:890
#: drivers/gpu/drm/drm_format_helper.c:932
#: drivers/gpu/drm/drm_format_helper.c:974
#: drivers/gpu/drm/drm_format_helper.c:1057
#: drivers/gpu/drm/drm_format_helper.c:1142
msgid ""
"This function copies parts of a framebuffer to display memory and converts "
"the color format during the process. The parameters **dst**, **dst_pitch** "
"and **src** refer to arrays. Each array must have at least as many entries "
"as there are planes in **fb**'s format. Each entry stores the value for the "
"format's respective color plane at the same index."
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:659
msgid ""
"Drivers can use this function for XRGB1555 devices that don't support "
"XRGB8888 natively."
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:682
msgid "Convert XRGB8888 to ARGB1555 clip buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:683
msgid "Array of ARGB1555 destination buffers"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:699
msgid ""
"Drivers can use this function for ARGB1555 devices that don't support "
"XRGB8888 natively. It sets an opaque alpha channel as part of the conversion."
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:722
msgid "Convert XRGB8888 to RGBA5551 clip buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:723
msgid "Array of RGBA5551 destination buffers"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:739
msgid ""
"Drivers can use this function for RGBA5551 devices that don't support "
"XRGB8888 natively. It sets an opaque alpha channel as part of the conversion."
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:762
msgid "Convert XRGB8888 to RGB888 clip buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:763
msgid "Array of RGB888 destination buffers"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:779
msgid ""
"Drivers can use this function for RGB888 devices that don't natively support "
"XRGB8888."
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:802
msgid "Convert XRGB8888 to BGR888 clip buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:803
msgid "Array of BGR888 destination buffers"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:819
msgid ""
"Drivers can use this function for BGR888 devices that don't natively support "
"XRGB8888."
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:842
msgid "Convert XRGB8888 to ARGB8888 clip buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:843
msgid "Array of ARGB8888 destination buffers"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:859
msgid ""
"Drivers can use this function for ARGB8888 devices that don't support "
"XRGB8888 natively. It sets an opaque alpha channel as part of the conversion."
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:882
msgid "Convert XRGB8888 to ABGR8888 clip buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:883
msgid "Array of ABGR8888 destination buffers"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:899
msgid ""
"Drivers can use this function for ABGR8888 devices that don't support "
"XRGB8888 natively. It sets an opaque alpha channel as part of the conversion."
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:924
msgid "Convert XRGB8888 to XBGR8888 clip buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:925
msgid "Array of XBGR8888 destination buffers"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:941
msgid ""
"Drivers can use this function for XBGR8888 devices that don't support "
"XRGB8888 natively."
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:966
msgid "Convert XRGB8888 to BGRX8888 clip buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:967
msgid "Array of BGRX8888 destination buffers"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:983
msgid ""
"Drivers can use this function for BGRX8888 devices that don't support "
"XRGB8888 natively."
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:1008
msgid "Convert XRGB8888 to XRGB2101010 clip buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:1009
msgid "Array of XRGB2101010 destination buffers"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:1025
msgid ""
"Drivers can use this function for XRGB2101010 devices that don't support "
"XRGB8888 natively."
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:1049
msgid "Convert XRGB8888 to ARGB2101010 clip buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:1050
msgid "Array of ARGB2101010 destination buffers"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:1066
msgid ""
"Drivers can use this function for ARGB2101010 devices that don't support "
"XRGB8888 natively."
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:1090
msgid "Convert XRGB8888 to grayscale"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:1091
msgid "Array of 8-bit grayscale destination buffers"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:1107
msgid ""
"DRM doesn't have native monochrome or grayscale support. Drivers can use "
"this function for grayscale devices that don't support XRGB8888 natively."
"Such drivers can announce the commonly supported XR24 format to userspace "
"and use this function to convert to the native format. Monochrome drivers "
"will use the most significant bit, where 1 means foreground color and 0 "
"background color. ITU BT.601 is being used for the RGB -> luma (brightness) "
"conversion."
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:1134
msgid "Convert ARGB8888 to ARGB4444 clip buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:1135
msgid "Array of ARGB4444 destination buffers"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:1138
msgid "Array of ARGB8888 source buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:1151
msgid ""
"Drivers can use this function for ARGB4444 devices that don't support "
"ARGB8888 natively."
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:1169
msgid "Copy parts of a framebuffer to display memory"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:1170
msgid "Array of display-memory addresses to copy to"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:1174
msgid "``uint32_t dst_format``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:1173
msgid "FOURCC code of the display's color format"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:1174
msgid "The framebuffer memory to copy from"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:1175
msgid "The framebuffer to copy from"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:1178
msgid ""
"This function copies parts of a framebuffer to display memory. If the "
"formats of the display and the framebuffer mismatch, the blit function will "
"attempt to convert between them during the process. The parameters **dst**, "
"**dst_pitch** and **src** refer to arrays. Each array must have at least as "
"many entries as there are planes in **dst_format**'s format. Each entry "
"stores the value for the format's respective color plane at the same index."
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:1189
msgid ""
"0 on success, or -EINVAL if the color-format conversion failed, or a "
"negative error code otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:1274
msgid "Convert XRGB8888 to monochrome"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:1275
msgid "Array of monochrome destination buffers (0=black, 1=white)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:1288
msgid ""
"This function does not apply clipping on **dst** (i.e. the destination is at "
"the top-left corner). The first pixel (upper left corner of the clip "
"rectangle) will be converted and copied to the first bit (LSB) in the first "
"byte of the monochrome destination buffer. If the caller requires that the "
"first pixel in a byte must be located at an x-coordinate that is a multiple "
"of 8, then the caller must take care itself of supplying a suitable clip "
"rectangle."
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:1295
msgid ""
"DRM doesn't have native monochrome support. Drivers can use this function "
"for monochrome devices that don't support XRGB8888 natively. Such drivers "
"can announce the commonly supported XR24 format to userspace and use this "
"function to convert to the native format."
msgstr ""

#: ../../../gpu/drm-kms-helpers:122: drivers/gpu/drm/drm_format_helper.c:1300
msgid ""
"This function uses drm_fb_xrgb8888_to_gray8() to convert to grayscale and "
"then the result is converted from grayscale to monochrome."
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:126
msgid "Framebuffer DMA Helper Functions Reference"
msgstr ""

#: ../../../gpu/drm-kms-helpers:128: drivers/gpu/drm/drm_fb_dma_helper.c:26
msgid "Provides helper functions for creating a DMA-contiguous framebuffer."
msgstr ""

#: ../../../gpu/drm-kms-helpers:128: drivers/gpu/drm/drm_fb_dma_helper.c:28
msgid ""
"Depending on the platform, the buffers may be physically non-contiguous and "
"mapped through an IOMMU or a similar mechanism, or allocated from physically-"
"contiguous memory (using, for instance, CMA or a pool of memory reserved at "
"early boot). This is handled behind the scenes by the DMA mapping API."
msgstr ""

#: ../../../gpu/drm-kms-helpers:128: drivers/gpu/drm/drm_fb_dma_helper.c:34
msgid ""
"drm_gem_fb_create() is used in the :c:type:`drm_mode_config_funcs.fb_create "
"<drm_mode_config_funcs>` callback function to create a DMA-contiguous "
"framebuffer."
msgstr ""

#: ../../../gpu/drm-kms-helpers:131: drivers/gpu/drm/drm_fb_dma_helper.c:41
msgid "Get DMA GEM object for framebuffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:131: drivers/gpu/drm/drm_fb_dma_helper.c:42
#: drivers/gpu/drm/drm_fb_dma_helper.c:66
msgid "The framebuffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:131: drivers/gpu/drm/drm_fb_dma_helper.c:44
#: drivers/gpu/drm/drm_fb_dma_helper.c:69 ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:46
msgid "``unsigned int plane``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:131: drivers/gpu/drm/drm_fb_dma_helper.c:43
msgid "Which plane"
msgstr ""

#: ../../../gpu/drm-kms-helpers:131: drivers/gpu/drm/drm_fb_dma_helper.c:44
msgid "Return the DMA GEM object for given framebuffer."
msgstr ""

#: ../../../gpu/drm-kms-helpers:131: drivers/gpu/drm/drm_fb_dma_helper.c:46
msgid "This function will usually be called from the CRTC callback functions."
msgstr ""

#: ../../../gpu/drm-kms-helpers:131: drivers/gpu/drm/drm_fb_dma_helper.c:63
msgid ""
"Get DMA (bus) address for framebuffer, for pixel formats where values are "
"grouped in blocks this will get you the beginning of the block"
msgstr ""

#: ../../../gpu/drm-kms-helpers:131: drivers/gpu/drm/drm_fb_dma_helper.c:67
msgid "Which state of drm plane"
msgstr ""

#: ../../../gpu/drm-kms-helpers:131: drivers/gpu/drm/drm_fb_dma_helper.c:68
msgid "Which plane Return the DMA GEM address for given framebuffer."
msgstr ""

#: ../../../gpu/drm-kms-helpers:131: drivers/gpu/drm/drm_fb_dma_helper.c:70
msgid "This function will usually be called from the PLANE callback functions."
msgstr ""

#: ../../../gpu/drm-kms-helpers:131: drivers/gpu/drm/drm_fb_dma_helper.c:112
msgid "Sync GEM object to non-coherent backing memory"
msgstr ""

#: ../../../gpu/drm-kms-helpers:131: drivers/gpu/drm/drm_fb_dma_helper.c:118
#: ../../../gpu/drm-kms-helpers:198:
#: drivers/gpu/drm/display/drm_bridge_connector.c:628
#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:439
#: drivers/gpu/drm/bridge/panel.c:524
msgid "``struct drm_device *drm``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:131: drivers/gpu/drm/drm_fb_dma_helper.c:116
#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:340
msgid "``struct drm_plane_state *old_state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:131: drivers/gpu/drm/drm_fb_dma_helper.c:115
#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:339
msgid "Old plane state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:131: drivers/gpu/drm/drm_fb_dma_helper.c:116
msgid "New plane state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:131: drivers/gpu/drm/drm_fb_dma_helper.c:117
msgid ""
"This function can be used by drivers that use damage clips and have DMA GEM "
"objects backed by non-coherent memory. Calling this function in a plane's ."
"atomic_update ensures that all the data in the backing memory have been "
"written to RAM."
msgstr ""

#: ../../../gpu/drm-kms-helpers:131: drivers/gpu/drm/drm_fb_dma_helper.c:156
msgid "Provide a scanout buffer in case of panic"
msgstr ""

#: ../../../gpu/drm-kms-helpers:131: drivers/gpu/drm/drm_fb_dma_helper.c:157
msgid "DRM primary plane"
msgstr ""

#: ../../../gpu/drm-kms-helpers:131: drivers/gpu/drm/drm_fb_dma_helper.c:159
msgid "``struct drm_scanout_buffer *sb``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:131: drivers/gpu/drm/drm_fb_dma_helper.c:158
msgid "scanout buffer for the panic handler"
msgstr ""

#: ../../../gpu/drm-kms-helpers:131: drivers/gpu/drm/drm_fb_dma_helper.c:159
msgid "0 or negative error code"
msgstr ""

#: ../../../gpu/drm-kms-helpers:131: drivers/gpu/drm/drm_fb_dma_helper.c:160
msgid ""
"Generic get_scanout_buffer() implementation, for drivers that uses the "
"drm_fb_dma_helper. It won't call vmap in the panic context, so the driver "
"should make sure the primary plane is vmapped, otherwise the panic screen "
"won't get displayed."
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:135
msgid "Framebuffer GEM Helper Reference"
msgstr ""

#: ../../../gpu/drm-kms-helpers:137:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:32
msgid ""
"This library provides helpers for drivers that don't subclass :c:type:"
"`drm_framebuffer` and use :c:type:`drm_gem_object` for their backing storage."
msgstr ""

#: ../../../gpu/drm-kms-helpers:137:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:35
msgid ""
"Drivers without additional needs to validate framebuffers can simply use "
"drm_gem_fb_create() and everything is wired up automatically. Other drivers "
"can use all parts independently."
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:43
msgid "Get GEM object backing the framebuffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:44
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:93
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:113
msgid "Framebuffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:45
msgid "Plane index"
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:46
msgid ""
"No additional reference is taken beyond the one that the :c:type:"
"`drm_frambuffer` already holds."
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:50
msgid ""
"Pointer to :c:type:`drm_gem_object` for the given framebuffer and plane "
"index or NULL if it does not exist."
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:92
msgid "Free GEM backed framebuffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:94
msgid ""
"Frees a GEM backed framebuffer with its backing buffer(s) and the structure "
"itself. Drivers can use this as their :c:type:`drm_framebuffer_funcs-"
">destroy <drm_framebuffer_funcs>` callback."
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:112
msgid "Create handle for GEM backed framebuffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:115
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:140
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:220
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:264
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:303
msgid "``struct drm_file *file``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:114
msgid "DRM file to register the handle for"
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:116
msgid "``unsigned int *handle``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:115
msgid "Pointer to return the created handle"
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:116
msgid ""
"This function creates a handle for the GEM object backing the framebuffer. "
"Drivers can use this as their :c:type:`drm_framebuffer_funcs->create_handle "
"<drm_framebuffer_funcs>` callback. The GETFB IOCTL calls into this callback."
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:132
msgid ""
"Helper function for implementing :c:type:`drm_mode_config_funcs.fb_create "
"<drm_mode_config_funcs>` callback in cases when the driver allocates a "
"subclass of struct drm_framebuffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:138
msgid "framebuffer object"
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:139
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:219
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:263
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:302
msgid "DRM file that holds the GEM handle(s) backing the framebuffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:141
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:221
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:265
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:304
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:586
#: ../../../gpu/drm-kms-helpers:443: drivers/gpu/drm/drm_modeset_helper.c:78
msgid "``const struct drm_format_info *info``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:140
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:220
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:264
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:303
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:586
#: ../../../gpu/drm-kms-helpers:443: drivers/gpu/drm/drm_modeset_helper.c:77
msgid "pixel format information"
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:142
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:222
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:266
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:305
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:588
#: ../../../gpu/drm-kms-helpers:443: drivers/gpu/drm/drm_modeset_helper.c:79
msgid "``const struct drm_mode_fb_cmd2 *mode_cmd``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:141
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:221
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:265
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:304
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:587
msgid "Metadata from the userspace framebuffer creation request"
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:143
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:223
msgid "``const struct drm_framebuffer_funcs *funcs``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:142
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:222
msgid "vtable to be used for the new framebuffer object"
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:143
msgid ""
"This function can be used to set :c:type:`drm_framebuffer_funcs` for drivers "
"that need custom framebuffer callbacks. Use drm_gem_fb_create() if you don't "
"need to change :c:type:`drm_framebuffer_funcs`. The function does buffer "
"size validation. The buffer size validation is for a general case, though, "
"so users should pay attention to the checks being appropriate for them or, "
"at least, non-conflicting."
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:151
msgid "Zero or a negative error code."
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:215
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:260
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:299
msgid ""
"Helper function for the :c:type:`drm_mode_config_funcs.fb_create "
"<drm_mode_config_funcs>` callback"
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:223
msgid ""
"This function can be used to set :c:type:`drm_framebuffer_funcs` for drivers "
"that need custom framebuffer callbacks. Use drm_gem_fb_create() if you don't "
"need to change :c:type:`drm_framebuffer_funcs`. The function does buffer "
"size validation."
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:228
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:279
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:319
msgid ""
"Pointer to a :c:type:`drm_framebuffer` on success or an error pointer on "
"failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:266
msgid ""
"This function creates a new framebuffer object described by :c:type:"
"`drm_mode_fb_cmd2`. This description includes handles for the buffer(s) "
"backing the framebuffer."
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:270
msgid ""
"If your hardware has special alignment or pitch requirements these should be "
"checked before calling this function. The function does buffer size "
"validation. Use drm_gem_fb_create_with_dirty() if you need framebuffer "
"flushing."
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:275
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:315
msgid ""
"Drivers can use this as their :c:type:`drm_mode_config_funcs.fb_create "
"<drm_mode_config_funcs>` callback. The ADDFB2 IOCTL calls into this callback."
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:305
msgid ""
"This function creates a new framebuffer object described by :c:type:"
"`drm_mode_fb_cmd2`. This description includes handles for the buffer(s) "
"backing the framebuffer. drm_atomic_helper_dirtyfb() is used for the dirty "
"callback giving framebuffer flushing through the atomic machinery. Use "
"drm_gem_fb_create() if you don't need the dirty callback. The function does "
"buffer size validation."
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:312
msgid ""
"Drivers should also call drm_plane_enable_fb_damage_clips() on all planes to "
"enable userspace to use damage clips also with the ATOMIC IOCTL."
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:333
msgid "maps all framebuffer BOs into kernel address space"
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:334
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:398
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:446
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:489
msgid "the framebuffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:336
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:400
msgid "``struct iosys_map *map``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:335
msgid "returns the mapping's address for each BO"
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:337
msgid "``struct iosys_map *data``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:336
msgid "returns the data address for each BO, can be NULL"
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:337
msgid ""
"This function maps all buffer objects of the given framebuffer into kernel "
"address space and stores them in struct iosys_map. If the mapping operation "
"fails for one of the BOs, the function unmaps the already established "
"mappings automatically."
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:342
msgid ""
"Callers that want to access a BO's stored data should pass **data**. The "
"argument returns the addresses of the data stored in each BO. This is "
"different from **map** if the framebuffer's offsets field is non-zero."
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:346
msgid ""
"Both, **map** and **data**, must each refer to arrays with at least fb-"
">format->num_planes elements."
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:349
msgid "See drm_gem_fb_vunmap() for unmapping."
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:397
msgid "unmaps framebuffer BOs from kernel address space"
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:399
msgid "mapping addresses as returned by drm_gem_fb_vmap()"
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:400
msgid "This function unmaps all buffer objects of the given framebuffer."
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:402
msgid "See drm_gem_fb_vmap() for more information."
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:445
msgid "prepares GEM buffer objects for CPU access"
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:448
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:491
msgid "``enum dma_data_direction dir``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:447
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:490
msgid "access mode"
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:448
msgid ""
"Prepares a framebuffer's GEM buffer objects for CPU access. This function "
"must be called before accessing the BO data within the kernel. For imported "
"BOs, the function calls dma_buf_begin_cpu_access()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:452
msgid "See drm_gem_fb_end_cpu_access() for signalling the end of CPU access."
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:488
msgid "signals end of CPU access to GEM buffer objects"
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:491
msgid ""
"Signals the end of CPU access to the given framebuffer's GEM buffer objects. "
"This function must be paired with a corresponding call to "
"drm_gem_fb_begin_cpu_access(). For imported BOs, the function calls "
"dma_buf_end_cpu_access()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:495
msgid "See also drm_gem_fb_begin_cpu_access()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:580
msgid ""
"Helper function for drivers using afbc to fill and validate all the afbc-"
"specific struct drm_afbc_framebuffer members"
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:589
msgid "``struct drm_afbc_framebuffer *afbc_fb``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:588
msgid "afbc framebuffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:589
msgid ""
"This function can be used by drivers which support afbc to complete the "
"preparation of struct drm_afbc_framebuffer. It must be called after "
"allocating the said struct and calling drm_gem_fb_init_with_funcs(). It is "
"caller's responsibility to put afbc_fb->base.obj objects in case the call is "
"unsuccessful."
msgstr ""

#: ../../../gpu/drm-kms-helpers:140:
#: drivers/gpu/drm/drm_gem_framebuffer_helper.c:596
msgid "Zero on success or a negative error value on failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:146
msgid "Bridges"
msgstr ""

#: ../../../gpu/drm-kms-helpers:151: drivers/gpu/drm/drm_bridge.c:43
msgid ""
":c:type:`struct drm_bridge <drm_bridge>` represents a device that hangs on "
"to an encoder. These are handy when a regular :c:type:`drm_encoder` entity "
"isn't enough to represent the entire encoder chain."
msgstr ""

#: ../../../gpu/drm-kms-helpers:151: drivers/gpu/drm/drm_bridge.c:47
msgid ""
"A bridge is always attached to a single :c:type:`drm_encoder` at a time, but "
"can be either connected to it directly, or through a chain of bridges::"
msgstr ""

#: ../../../gpu/drm-kms-helpers:151: drivers/gpu/drm/drm_bridge.c:52
msgid ""
"Here, the output of the encoder feeds to bridge A, and that furthers feeds "
"to bridge B. Bridge chains can be arbitrarily long, and shall be fully "
"linear: Chaining multiple bridges to the output of a bridge, or the same "
"bridge to the output of different bridges, is not supported."
msgstr ""

#: ../../../gpu/drm-kms-helpers:151: drivers/gpu/drm/drm_bridge.c:57
msgid ""
":c:type:`drm_bridge`, like :c:type:`drm_panel`, aren't :c:type:"
"`drm_mode_object` entities like planes, CRTCs, encoders or connectors and "
"hence are not visible to userspace. They just provide additional hooks to "
"get the desired output at the end of the encoder chain."
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:155
msgid "Display Driver Integration"
msgstr ""

#: ../../../gpu/drm-kms-helpers:157: drivers/gpu/drm/drm_bridge.c:66
msgid ""
"Display drivers are responsible for linking encoders with the first bridge "
"in the chains. This is done by acquiring the appropriate bridge with "
"devm_drm_of_get_bridge(). Once acquired, the bridge shall be attached to the "
"encoder with a call to drm_bridge_attach()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:157: drivers/gpu/drm/drm_bridge.c:71
msgid ""
"Bridges are responsible for linking themselves with the next bridge in the "
"chain, if any. This is done the same way as for encoders, with the call to "
"drm_bridge_attach() occurring in the :c:type:`drm_bridge_funcs.attach "
"<drm_bridge_funcs>` operation."
msgstr ""

#: ../../../gpu/drm-kms-helpers:157: drivers/gpu/drm/drm_bridge.c:75
msgid ""
"Once these links are created, the bridges can participate along with encoder "
"functions to perform mode validation and fixup (through "
"drm_bridge_chain_mode_valid() and drm_atomic_bridge_chain_check()), mode "
"setting (through drm_bridge_chain_mode_set()), enable (through "
"drm_atomic_bridge_chain_pre_enable() and drm_atomic_bridge_chain_enable()) "
"and disable (through drm_atomic_bridge_chain_disable() and "
"drm_atomic_bridge_chain_post_disable()). Those functions call the "
"corresponding operations provided in :c:type:`drm_bridge_funcs` in sequence "
"for all bridges in the chain."
msgstr ""

#: ../../../gpu/drm-kms-helpers:157: drivers/gpu/drm/drm_bridge.c:85
msgid ""
"For display drivers that use the atomic helpers "
"drm_atomic_helper_check_modeset(), "
"drm_atomic_helper_commit_modeset_enables() and "
"drm_atomic_helper_commit_modeset_disables() (either directly in hand-rolled "
"commit check and commit tail handlers, or through the higher-level "
"drm_atomic_helper_check() and drm_atomic_helper_commit_tail() or "
"drm_atomic_helper_commit_tail_rpm() helpers), this is done transparently and "
"requires no intervention from the driver. For other drivers, the relevant "
"DRM bridge chain functions shall be called manually."
msgstr ""

#: ../../../gpu/drm-kms-helpers:157: drivers/gpu/drm/drm_bridge.c:95
msgid ""
"Bridges also participate in implementing the :c:type:`drm_connector` at the "
"end of the bridge chain. Display drivers may use the "
"drm_bridge_connector_init() helper to create the :c:type:`drm_connector`, or "
"implement it manually on top of the connector-related operations exposed by "
"the bridge (see the overview documentation of bridge operations for more "
"details)."
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:161
msgid "Special Care with MIPI-DSI bridges"
msgstr ""

#: ../../../gpu/drm-kms-helpers:163: drivers/gpu/drm/drm_bridge.c:105
msgid ""
"The interaction between the bridges and other frameworks involved in the "
"probing of the upstream driver and the bridge driver can be challenging. "
"Indeed, there's multiple cases that needs to be considered:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:163: drivers/gpu/drm/drm_bridge.c:110
msgid ""
"The upstream driver doesn't use the component framework and isn't a MIPI-DSI "
"host. In this case, the bridge driver will probe at some point and the "
"upstream driver should try to probe again by returning EPROBE_DEFER as long "
"as the bridge driver hasn't probed."
msgstr ""

#: ../../../gpu/drm-kms-helpers:163: drivers/gpu/drm/drm_bridge.c:115
msgid ""
"The upstream driver doesn't use the component framework, but is a MIPI-DSI "
"host. The bridge device uses the MIPI-DCS commands to be controlled. In this "
"case, the bridge device is a child of the display device and when it will "
"probe it's assured that the display device (and MIPI-DSI host) is present. "
"The upstream driver will be assured that the bridge driver is connected "
"between the :c:type:`mipi_dsi_host_ops.attach <mipi_dsi_host_ops>` and :c:"
"type:`mipi_dsi_host_ops.detach <mipi_dsi_host_ops>` operations. Therefore, "
"it must run mipi_dsi_host_register() in its probe function, and then run "
"drm_bridge_attach() in its :c:type:`mipi_dsi_host_ops.attach "
"<mipi_dsi_host_ops>` hook."
msgstr ""

#: ../../../gpu/drm-kms-helpers:163: drivers/gpu/drm/drm_bridge.c:126
msgid ""
"The upstream driver uses the component framework and is a MIPI-DSI host. The "
"bridge device uses the MIPI-DCS commands to be controlled. This is the same "
"situation than above, and can run mipi_dsi_host_register() in either its "
"probe or bind hooks."
msgstr ""

#: ../../../gpu/drm-kms-helpers:163: drivers/gpu/drm/drm_bridge.c:131
msgid ""
"The upstream driver uses the component framework and is a MIPI-DSI host. The "
"bridge device uses a separate bus (such as I2C) to be controlled. In this "
"case, there's no correlation between the probe of the bridge and upstream "
"drivers, so care must be taken to avoid an endless EPROBE_DEFER loop, with "
"each driver waiting for the other to probe."
msgstr ""

#: ../../../gpu/drm-kms-helpers:163: drivers/gpu/drm/drm_bridge.c:138
msgid ""
"The ideal pattern to cover the last item (and all the others in the MIPI-DSI "
"host driver case) is to split the operations like this:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:163: drivers/gpu/drm/drm_bridge.c:141
msgid ""
"The MIPI-DSI host driver must run mipi_dsi_host_register() in its probe "
"hook. It will make sure that the MIPI-DSI host sticks around, and that the "
"driver's bind can be called."
msgstr ""

#: ../../../gpu/drm-kms-helpers:163: drivers/gpu/drm/drm_bridge.c:145
msgid ""
"In its probe hook, the bridge driver must try to find its MIPI-DSI host, "
"register as a MIPI-DSI device and attach the MIPI-DSI device to its host. "
"The bridge driver is now functional."
msgstr ""

#: ../../../gpu/drm-kms-helpers:163: drivers/gpu/drm/drm_bridge.c:149
msgid ""
"In its :c:type:`struct mipi_dsi_host_ops <mipi_dsi_host_ops>`.attach hook, "
"the MIPI-DSI host can now add its component. Its bind hook will now be "
"called and since the bridge driver is attached and registered, we can now "
"look for and attach it."
msgstr ""

#: ../../../gpu/drm-kms-helpers:163: drivers/gpu/drm/drm_bridge.c:154
msgid ""
"At this point, we're now certain that both the upstream driver and the "
"bridge driver are functional and we can't have a deadlock-like situation "
"when probing."
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:167
msgid "Bridge Operations"
msgstr ""

#: ../../../gpu/drm-kms-helpers:169: drivers/gpu/drm/drm_bridge.c:502
msgid ""
"Bridge drivers expose operations through the :c:type:`drm_bridge_funcs` "
"structure. The DRM internals (atomic and CRTC helpers) use the helpers "
"defined in drm_bridge.c to call bridge operations. Those operations are "
"divided in three big categories to support different parts of the bridge "
"usage."
msgstr ""

#: ../../../gpu/drm-kms-helpers:169: drivers/gpu/drm/drm_bridge.c:507
msgid ""
"The encoder-related operations support control of the bridges in the chain, "
"and are roughly counterparts to the :c:type:`drm_encoder_helper_funcs` "
"operations. They are used by the legacy CRTC and the atomic modeset helpers "
"to perform mode validation, fixup and setting, and enable and disable the "
"bridge automatically."
msgstr ""

#: ../../../gpu/drm-kms-helpers:169: drivers/gpu/drm/drm_bridge.c:513
msgid ""
"The enable and disable operations are split in :c:type:`drm_bridge_funcs."
"pre_enable <drm_bridge_funcs>`, :c:type:`drm_bridge_funcs.enable "
"<drm_bridge_funcs>`, :c:type:`drm_bridge_funcs.disable <drm_bridge_funcs>` "
"and :c:type:`drm_bridge_funcs.post_disable <drm_bridge_funcs>` to provide "
"finer-grained control."
msgstr ""

#: ../../../gpu/drm-kms-helpers:169: drivers/gpu/drm/drm_bridge.c:518
msgid ""
"Bridge drivers may implement the legacy version of those operations, or the "
"atomic version (prefixed with atomic\\_), in which case they shall also "
"implement the atomic state bookkeeping operations (:c:type:`drm_bridge_funcs."
"atomic_duplicate_state <drm_bridge_funcs>`, :c:type:`drm_bridge_funcs."
"atomic_destroy_state <drm_bridge_funcs>` and :c:type:`drm_bridge_funcs.reset "
"<drm_bridge_funcs>`). Mixing atomic and non-atomic versions of the "
"operations is not supported."
msgstr ""

#: ../../../gpu/drm-kms-helpers:169: drivers/gpu/drm/drm_bridge.c:525
msgid ""
"The bus format negotiation operations :c:type:`drm_bridge_funcs."
"atomic_get_output_bus_fmts <drm_bridge_funcs>` and :c:type:`drm_bridge_funcs."
"atomic_get_input_bus_fmts <drm_bridge_funcs>` allow bridge drivers to "
"negotiate the formats transmitted between bridges in the chain when multiple "
"formats are supported. Negotiation for formats is performed transparently "
"for display drivers by the atomic modeset helpers. Only atomic versions of "
"those operations exist, bridge drivers that need to implement them shall "
"thus also implement the atomic version of the encoder-related operations. "
"This feature is not supported by the legacy CRTC helpers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:169: drivers/gpu/drm/drm_bridge.c:536
msgid ""
"The connector-related operations support implementing a :c:type:"
"`drm_connector` based on a chain of bridges. DRM bridges traditionally "
"create a :c:type:`drm_connector` for bridges meant to be used at the end of "
"the chain. This puts additional burden on bridge drivers, especially for "
"bridges that may be used in the middle of a chain or at the end of it. "
"Furthermore, it requires all operations of the :c:type:`drm_connector` to be "
"handled by a single bridge, which doesn't always match the hardware "
"architecture."
msgstr ""

#: ../../../gpu/drm-kms-helpers:169: drivers/gpu/drm/drm_bridge.c:544
msgid ""
"To simplify bridge drivers and make the connector implementation more "
"flexible, a new model allows bridges to unconditionally skip creation of :c:"
"type:`drm_connector` and instead expose :c:type:`drm_bridge_funcs` "
"operations to support an externally-implemented :c:type:`drm_connector`. "
"Those operations are :c:type:`drm_bridge_funcs.detect <drm_bridge_funcs>`, :"
"c:type:`drm_bridge_funcs.get_modes <drm_bridge_funcs>`, :c:type:"
"`drm_bridge_funcs.get_edid <drm_bridge_funcs>`, :c:type:`drm_bridge_funcs."
"hpd_notify <drm_bridge_funcs>`, :c:type:`drm_bridge_funcs.hpd_enable "
"<drm_bridge_funcs>` and :c:type:`drm_bridge_funcs.hpd_disable "
"<drm_bridge_funcs>`. When implemented, display drivers shall create a :c:"
"type:`drm_connector` instance for each chain of bridges, and implement those "
"connector instances based on the bridge connector operations."
msgstr ""

#: ../../../gpu/drm-kms-helpers:169: drivers/gpu/drm/drm_bridge.c:555
msgid ""
"Bridge drivers shall implement the connector-related operations for all the "
"features that the bridge hardware support. For instance, if a bridge "
"supports reading EDID, the :c:type:`drm_bridge_funcs.get_edid "
"<drm_bridge_funcs>` shall be implemented. This however doesn't mean that the "
"DDC lines are wired to the bridge on a particular platform, as they could "
"also be connected to an I2C controller of the SoC. Support for the connector-"
"related operations on the running platform is reported through the :c:type:"
"`drm_bridge.ops <drm_bridge>` flags. Bridge drivers shall detect which "
"operations they can support on the platform (usually this information is "
"provided by ACPI or DT), and set the :c:type:`drm_bridge.ops <drm_bridge>` "
"flags for all supported operations. A flag shall only be set if the "
"corresponding :c:type:`drm_bridge_funcs` operation is implemented, but an "
"implemented operation doesn't necessarily imply that the corresponding flag "
"will be set. Display drivers shall use the :c:type:`drm_bridge.ops "
"<drm_bridge>` flags to decide which bridge to delegate a connector operation "
"to. This mechanism allows providing a single static const :c:type:"
"`drm_bridge_funcs` instance in bridge drivers, improving security by storing "
"function pointers in read-only memory."
msgstr ""

#: ../../../gpu/drm-kms-helpers:169: drivers/gpu/drm/drm_bridge.c:573
msgid ""
"In order to ease transition, bridge drivers may support both the old and new "
"models by making connector creation optional and implementing the connected-"
"related bridge operations. Connector creation is then controlled by the "
"flags argument to the drm_bridge_attach() function. Display drivers that "
"support the new model and create connectors themselves shall set the "
"``DRM_BRIDGE_ATTACH_NO_CONNECTOR`` flag, and bridge drivers shall then skip "
"connector creation. For intermediate bridges in the chain, the flag shall be "
"passed to the drm_bridge_attach() call for the downstream bridge. Bridge "
"drivers that implement the new model only shall return an error from their :"
"c:type:`drm_bridge_funcs.attach <drm_bridge_funcs>` handler when the "
"``DRM_BRIDGE_ATTACH_NO_CONNECTOR`` flag is not set. New display drivers "
"should use the new model, and convert the bridge drivers they use if needed, "
"in order to gradually transition to the new model."
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:173
msgid "Bridge Connector Helper"
msgstr ""

#: ../../../gpu/drm-kms-helpers:175:
#: drivers/gpu/drm/display/drm_bridge_connector.c:29
msgid ""
"The DRM bridge connector helper object provides a DRM connector "
"implementation that wraps a chain of :c:type:`struct drm_bridge "
"<drm_bridge>`. The connector operations are fully implemented based on the "
"operations of the bridges in the chain, and don't require any intervention "
"from the display controller driver at runtime."
msgstr ""

#: ../../../gpu/drm-kms-helpers:175:
#: drivers/gpu/drm/display/drm_bridge_connector.c:35
msgid ""
"To use the helper, display controller drivers create a bridge connector with "
"a call to drm_bridge_connector_init(). This associates the newly created "
"connector with the chain of bridges passed to the function and registers it "
"with the DRM device. At that point the connector becomes fully usable, no "
"further operation is needed."
msgstr ""

#: ../../../gpu/drm-kms-helpers:175:
#: drivers/gpu/drm/display/drm_bridge_connector.c:41
msgid ""
"The DRM bridge connector operations are implemented based on the operations "
"provided by the bridges in the chain. Each connector operation is delegated "
"to the bridge closest to the connector (at the end of the chain) that "
"provides the relevant functionality."
msgstr ""

#: ../../../gpu/drm-kms-helpers:175:
#: drivers/gpu/drm/display/drm_bridge_connector.c:46
msgid ""
"To make use of this helper, all bridges in the chain shall report bridge "
"operation flags (:c:type:`drm_bridge->ops <drm_bridge>`) and bridge output "
"type (:c:type:`drm_bridge->type <drm_bridge>`), as well as the "
"DRM_BRIDGE_ATTACH_NO_CONNECTOR attach flag (none of the bridges shall create "
"a DRM connector directly)."
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:180
msgid "Bridge Helper Reference"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:50
msgid "Flags for :c:type:`drm_bridge_funcs.attach <drm_bridge_funcs>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:54
#: include/drm/drm_bridge.h:1035 ../../../gpu/drm-kms-helpers:263:
#: include/drm/display/drm_dp.h:1760 include/drm/display/drm_dp.h:1785
#: include/drm/display/drm_dp.h:1826 include/drm/display/drm_dp.h:1841
#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:777
#: ../../../gpu/drm-kms-helpers:287:
#: include/drm/display/drm_dp_dual_mode_helper.h:78
#: include/drm/display/drm_dp_dual_mode_helper.h:92
#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:839
#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:316
msgid "**Constants**"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:56
msgid "``DRM_BRIDGE_ATTACH_NO_CONNECTOR``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:57
msgid "When this flag is set the bridge shall not create a drm_connector."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:61
msgid "drm_bridge control functions"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:65
#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:69
msgid "``attach``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:66
msgid ""
"This callback is invoked whenever our bridge is being attached to a :c:type:"
"`drm_encoder`. The flags argument tunes the behaviour of the attach "
"operation (see DRM_BRIDGE_ATTACH_*)."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:70
msgid "The **attach** callback is optional."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:81
msgid "``destroy``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:82
msgid "This callback is invoked when the bridge is about to be deallocated."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:85
msgid "The **destroy** callback is optional."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:91
#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:70
msgid "``detach``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:92
msgid ""
"This callback is invoked whenever our bridge is being detached from a :c:"
"type:`drm_encoder`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:95
msgid "The **detach** callback is optional."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:102
msgid ""
"This callback is used to check if a specific mode is valid in this bridge. "
"This should be implemented if the bridge has some sort of restriction in the "
"modes it can display. For example, a given bridge may be responsible to set "
"a clock value. If the clock can not produce all the values for the available "
"modes then this callback can be used to restrict the number of modes to only "
"the ones that can be displayed."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:115
msgid "The **mode_valid** callback is optional."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:119
msgid ""
"Since this function is both called from the check phase of an atomic commit, "
"and the mode validation in the probe paths it is not allowed to look at "
"anything else but the passed-in mode, and validate it against configuration-"
"invariant hardware constraints. Any further limits which depend upon the "
"configuration can only be checked in **mode_fixup**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:137
msgid ""
"This callback is used to validate and adjust a mode. The parameter mode is "
"the display mode that should be fed to the next element in the display "
"chain, either the final :c:type:`drm_connector` or the next :c:type:"
"`drm_bridge`. The parameter adjusted_mode is the input mode the bridge "
"requires. It can be modified by this callback and does not need to match "
"mode. See also :c:type:`drm_crtc_state.adjusted_mode <drm_crtc_state>` for "
"more details."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:144
msgid ""
"This is the only hook that allows a bridge to reject a modeset. If this "
"function passes all other callbacks must succeed for this configuration."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:148
msgid ""
"The mode_fixup callback is optional. :c:type:`drm_bridge_funcs."
"mode_fixup\\(\\) <drm_bridge_funcs>` is not called when :c:type:"
"`drm_bridge_funcs.atomic_check\\(\\) <drm_bridge_funcs>` is implemented, so "
"only one of them should be provided."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:154
msgid ""
"This function is called in the check phase of atomic modesets, which can be "
"aborted for any reason (including on userspace's request to just check "
"whether a configuration would be possible). Drivers MUST NOT touch any "
"persistent state (hardware or software) or data structures except the passed "
"in **state** parameter."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:160
msgid ""
"Also beware that userspace can request its own custom modes, neither core "
"nor helpers filter modes to the list of probe modes reported by the "
"GETCONNECTOR IOCTL and stored in :c:type:`drm_connector.modes "
"<drm_connector>`. To ensure that modes are filtered consistently put any "
"bridge constraints and limits checks into **mode_valid**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:177
msgid "The **disable** callback should disable the bridge."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:179
#: include/drm/drm_bridge.h:427
msgid ""
"The bridge can assume that the display pipe (i.e. clocks and timing signals) "
"feeding it is still running when this callback is called."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:183
#: include/drm/drm_bridge.h:430
msgid ""
"If the preceding element is a :c:type:`drm_bridge`, then this is called "
"before that bridge is disabled via one of:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:186
#: include/drm/drm_bridge.h:433
msgid ":c:type:`drm_bridge_funcs.disable <drm_bridge_funcs>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:187
#: include/drm/drm_bridge.h:434
msgid ":c:type:`drm_bridge_funcs.atomic_disable <drm_bridge_funcs>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:189
#: include/drm/drm_bridge.h:436
msgid ""
"If the preceding element of the bridge is a display controller, then this "
"callback is called before the encoder is disabled via one of:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:192
#: include/drm/drm_bridge.h:233 include/drm/drm_bridge.h:439
#: include/drm/drm_bridge.h:476
msgid ""
":c:type:`drm_encoder_helper_funcs.atomic_disable <drm_encoder_helper_funcs>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:193
#: include/drm/drm_bridge.h:234 include/drm/drm_bridge.h:440
#: include/drm/drm_bridge.h:477
msgid ":c:type:`drm_encoder_helper_funcs.prepare <drm_encoder_helper_funcs>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:194
#: include/drm/drm_bridge.h:235 include/drm/drm_bridge.h:441
#: include/drm/drm_bridge.h:478
msgid ":c:type:`drm_encoder_helper_funcs.disable <drm_encoder_helper_funcs>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:195
#: include/drm/drm_bridge.h:236 include/drm/drm_bridge.h:442
#: include/drm/drm_bridge.h:479
msgid ":c:type:`drm_encoder_helper_funcs.dpms <drm_encoder_helper_funcs>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:197
#: include/drm/drm_bridge.h:238 include/drm/drm_bridge.h:444
#: include/drm/drm_bridge.h:481
msgid "and the CRTC is disabled via one of:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:199
#: include/drm/drm_bridge.h:240 include/drm/drm_bridge.h:446
#: include/drm/drm_bridge.h:483
msgid ":c:type:`drm_crtc_helper_funcs.prepare <drm_crtc_helper_funcs>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:200
#: include/drm/drm_bridge.h:241 include/drm/drm_bridge.h:447
#: include/drm/drm_bridge.h:484
msgid ":c:type:`drm_crtc_helper_funcs.atomic_disable <drm_crtc_helper_funcs>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:201
#: include/drm/drm_bridge.h:242 include/drm/drm_bridge.h:448
#: include/drm/drm_bridge.h:485
msgid ":c:type:`drm_crtc_helper_funcs.disable <drm_crtc_helper_funcs>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:202
#: include/drm/drm_bridge.h:449
msgid ":c:type:`drm_crtc_helper_funcs.dpms <drm_crtc_helper_funcs>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:204
msgid "The **disable** callback is optional."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:208
msgid ""
"This is deprecated, do not use! New drivers shall use :c:type:"
"`drm_bridge_funcs.atomic_disable <drm_bridge_funcs>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:215
msgid "``post_disable``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:216
msgid ""
"The bridge must assume that the display pipe (i.e. clocks and timing "
"signals) feeding this bridge is no longer running when the **post_disable** "
"is called."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:220
#: include/drm/drm_bridge.h:463
msgid ""
"This callback should perform all the actions required by the hardware after "
"it has stopped receiving signals from the preceding element."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:223
#: include/drm/drm_bridge.h:466
msgid ""
"If the preceding element is a :c:type:`drm_bridge`, then this is called "
"after that bridge is post-disabled (unless marked otherwise by the "
"**pre_enable_prev_first** flag) via one of:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:227
#: include/drm/drm_bridge.h:470
msgid ":c:type:`drm_bridge_funcs.post_disable <drm_bridge_funcs>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:228
#: include/drm/drm_bridge.h:471
msgid ":c:type:`drm_bridge_funcs.atomic_post_disable <drm_bridge_funcs>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:230
#: include/drm/drm_bridge.h:473
msgid ""
"If the preceding element of the bridge is a display controller, then this "
"callback is called after the encoder is disabled via one of:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:243
#: include/drm/drm_bridge.h:486
msgid ":c:type:`drm_crtc_helper_funcs.dpms <drm_crtc_helper_funcs>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:245
msgid "The **post_disable** callback is optional."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:249
msgid ""
"This is deprecated, do not use! New drivers shall use :c:type:"
"`drm_bridge_funcs.atomic_post_disable <drm_bridge_funcs>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:257
msgid ""
"This callback should set the given mode on the bridge. It is called after "
"the **mode_set** callback for the preceding element in the display pipeline "
"has been called already. If the bridge is the first element then this would "
"be :c:type:`drm_encoder_helper_funcs.mode_set <drm_encoder_helper_funcs>`. "
"The display pipe (i.e.  clocks and timing signals) is off when this function "
"is called."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:264
msgid ""
"The adjusted_mode parameter is the mode output by the CRTC for the first "
"bridge in the chain. It can be different from the mode parameter that "
"contains the desired mode for the connector at the end of the bridges chain, "
"for instance when the first bridge in the chain performs scaling. The "
"adjusted mode is mostly useful for the first bridge in the chain and is "
"likely irrelevant for the other bridges."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:271
msgid ""
"For atomic drivers the adjusted_mode is the mode stored in :c:type:"
"`drm_crtc_state.adjusted_mode <drm_crtc_state>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:276
msgid ""
"This is deprecated, do not use! New drivers shall set their mode in the :c:"
"type:`drm_bridge_funcs.atomic_enable <drm_bridge_funcs>` operation."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:285
msgid "``pre_enable``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:286
msgid ""
"The display pipe (i.e. clocks and timing signals) feeding this bridge will "
"not yet be running when the **pre_enable** is called."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:289
#: include/drm/drm_bridge.h:363
msgid ""
"This callback should perform all the necessary actions to prepare the bridge "
"to accept signals from the preceding element."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:292
#: include/drm/drm_bridge.h:366
msgid ""
"If the preceding element is a :c:type:`drm_bridge`, then this is called "
"before that bridge is pre-enabled (unless marked otherwise by "
"**pre_enable_prev_first** flag) via one of:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:296
#: include/drm/drm_bridge.h:370
msgid ":c:type:`drm_bridge_funcs.pre_enable <drm_bridge_funcs>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:297
#: include/drm/drm_bridge.h:371
msgid ":c:type:`drm_bridge_funcs.atomic_pre_enable <drm_bridge_funcs>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:299
#: include/drm/drm_bridge.h:373
msgid ""
"If the preceding element of the bridge is a display controller, then this "
"callback is called before the CRTC is enabled via one of:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:302
#: include/drm/drm_bridge.h:339 include/drm/drm_bridge.h:376
#: include/drm/drm_bridge.h:409
msgid ":c:type:`drm_crtc_helper_funcs.atomic_enable <drm_crtc_helper_funcs>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:303
#: include/drm/drm_bridge.h:340 include/drm/drm_bridge.h:377
#: include/drm/drm_bridge.h:410
msgid ":c:type:`drm_crtc_helper_funcs.commit <drm_crtc_helper_funcs>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:305
#: include/drm/drm_bridge.h:342 include/drm/drm_bridge.h:379
#: include/drm/drm_bridge.h:412
msgid "and the encoder is enabled via one of:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:307
#: include/drm/drm_bridge.h:344 include/drm/drm_bridge.h:381
#: include/drm/drm_bridge.h:414
msgid ""
":c:type:`drm_encoder_helper_funcs.atomic_enable <drm_encoder_helper_funcs>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:308
#: include/drm/drm_bridge.h:345 include/drm/drm_bridge.h:382
#: include/drm/drm_bridge.h:415
msgid ":c:type:`drm_encoder_helper_funcs.enable <drm_encoder_helper_funcs>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:309
#: include/drm/drm_bridge.h:383
msgid ":c:type:`drm_encoder_helper_funcs.commit <drm_encoder_helper_funcs>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:311
msgid "The **pre_enable** callback is optional."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:315
msgid ""
"This is deprecated, do not use! New drivers shall use :c:type:"
"`drm_bridge_funcs.atomic_pre_enable <drm_bridge_funcs>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:323
msgid "The **enable** callback should enable the bridge."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:325
#: include/drm/drm_bridge.h:395
msgid ""
"The bridge can assume that the display pipe (i.e. clocks and timing signals) "
"feeding it is running when this callback is called. This callback must "
"enable the display link feeding the next bridge in the chain if there is one."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:330
#: include/drm/drm_bridge.h:400
msgid ""
"If the preceding element is a :c:type:`drm_bridge`, then this is called "
"after that bridge is enabled via one of:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:333
#: include/drm/drm_bridge.h:403
msgid ":c:type:`drm_bridge_funcs.enable <drm_bridge_funcs>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:334
#: include/drm/drm_bridge.h:404
msgid ":c:type:`drm_bridge_funcs.atomic_enable <drm_bridge_funcs>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:336
#: include/drm/drm_bridge.h:406
msgid ""
"If the preceding element of the bridge is a display controller, then this "
"callback is called after the CRTC is enabled via one of:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:346
#: include/drm/drm_bridge.h:416
msgid "drm_encoder_helper_funcs.commit"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:348
msgid "The **enable** callback is optional."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:352
msgid ""
"This is deprecated, do not use! New drivers shall use :c:type:"
"`drm_bridge_funcs.atomic_enable <drm_bridge_funcs>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:359
msgid "``atomic_pre_enable``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:360
msgid ""
"The display pipe (i.e. clocks and timing signals) feeding this bridge will "
"not yet be running when the **atomic_pre_enable** is called."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:385
msgid "The **atomic_pre_enable** callback is optional."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:393
msgid "The **atomic_enable** callback should enable the bridge."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:418
msgid "The **atomic_enable** callback is optional."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:425
msgid "The **atomic_disable** callback should disable the bridge."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:451
msgid "The **atomic_disable** callback is optional."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:458
msgid "``atomic_post_disable``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:459
msgid ""
"The bridge must assume that the display pipe (i.e. clocks and timing "
"signals) feeding this bridge is no longer running when the "
"**atomic_post_disable** is called."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:488
msgid "The **atomic_post_disable** callback is optional."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:495
msgid "``atomic_duplicate_state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:496
msgid ""
"Duplicate the current bridge state object (which is guaranteed to be non-"
"NULL)."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:499
msgid ""
"The atomic_duplicate_state hook is mandatory if the bridge implements any of "
"the atomic hooks, and should be left unassigned otherwise. For bridges that "
"don't subclass :c:type:`drm_bridge_state`, the "
"drm_atomic_helper_bridge_duplicate_state() helper function shall be used to "
"implement this hook."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:505
msgid ""
"RETURNS: A valid drm_bridge_state object or NULL if the allocation fails."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:512
msgid "``atomic_destroy_state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:513
msgid ""
"Destroy a bridge state object previously allocated by :c:type:"
"`drm_bridge_funcs.atomic_duplicate_state\\(\\) <drm_bridge_funcs>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:516
msgid ""
"The atomic_destroy_state hook is mandatory if the bridge implements any of "
"the atomic hooks, and should be left unassigned otherwise. For bridges that "
"don't subclass :c:type:`drm_bridge_state`, the "
"drm_atomic_helper_bridge_destroy_state() helper function shall be used to "
"implement this hook."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:527
msgid "``atomic_get_output_bus_fmts``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:528
msgid ""
"Return the supported bus formats on the output end of a bridge. The returned "
"array must be allocated with kmalloc() and will be freed by the caller. If "
"the allocation fails, NULL should be returned. num_output_fmts must be set "
"to the returned array size. Formats listed in the returned array should be "
"listed in decreasing preference order (the core will try all formats until "
"it finds one that works)."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:536
msgid ""
"This method is only called on the last element of the bridge chain as part "
"of the bus format negotiation process that happens in :c:type:"
"`drm_atomic_bridge_chain_select_bus_fmts`(). This method is optional. When "
"not implemented, the core will fall back to :c:type:`drm_connector."
"display_info <drm_connector>`.bus_formats[0] if :c:type:`drm_connector."
"display_info <drm_connector>`.num_bus_formats > 0, or to MEDIA_BUS_FMT_FIXED "
"otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:552
msgid "``atomic_get_input_bus_fmts``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:553
msgid ""
"Return the supported bus formats on the input end of a bridge for a specific "
"output bus format."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:556
msgid ""
"The returned array must be allocated with kmalloc() and will be freed by the "
"caller. If the allocation fails, NULL should be returned. num_input_fmts "
"must be set to the returned array size. Formats listed in the returned array "
"should be listed in decreasing preference order (the core will try all "
"formats until it finds one that works). When the format is not supported "
"NULL should be returned and num_input_fmts should be set to 0."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:564
msgid ""
"This method is called on all elements of the bridge chain as part of the bus "
"format negotiation process that happens in "
"drm_atomic_bridge_chain_select_bus_fmts(). This method is optional. When not "
"implemented, the core will bypass bus format negotiation on this element of "
"the bridge without failing, and the previous element in the chain will be "
"passed MEDIA_BUS_FMT_FIXED as its output bus format."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:572
msgid ""
"Bridge drivers that need to support being linked to bridges that are not "
"supporting bus format negotiation should handle the output_fmt == "
"MEDIA_BUS_FMT_FIXED case appropriately, by selecting a sensible default "
"value or extracting this information from somewhere else (FW property, :c:"
"type:`drm_display_mode`, :c:type:`drm_display_info`, ...)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:578
msgid ""
"Note: Even if input format selection on the first bridge has no impact on "
"the negotiation process (bus format negotiation stops once we reach the "
"first element of the chain), drivers are expected to return accurate input "
"formats as the input format may be used to configure the CRTC output "
"appropriately."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:594
msgid ""
"This method is responsible for checking bridge state correctness. It can "
"also check the state of the surrounding components in chain to make sure the "
"whole pipeline can work properly."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:598
msgid ""
":c:type:`drm_bridge_funcs.atomic_check\\(\\) <drm_bridge_funcs>` hooks are "
"called in reverse order (from the last to the first bridge)."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:601
msgid ""
"This method is optional. :c:type:`drm_bridge_funcs.mode_fixup\\(\\) "
"<drm_bridge_funcs>` is not called when :c:type:`drm_bridge_funcs."
"atomic_check\\(\\) <drm_bridge_funcs>` is implemented, so only one of them "
"should be provided."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:605
msgid ""
"If drivers need to tweak :c:type:`drm_bridge_state.input_bus_cfg "
"<drm_bridge_state>`.flags or :c:type:`drm_bridge_state.output_bus_cfg "
"<drm_bridge_state>`.flags it should happen in this function. By default the :"
"c:type:`drm_bridge_state.output_bus_cfg <drm_bridge_state>`.flags field is "
"set to the next bridge :c:type:`drm_bridge_state.input_bus_cfg "
"<drm_bridge_state>`.flags value or :c:type:`drm_connector.display_info "
"<drm_connector>`.bus_flags if the bridge is the last element in the chain."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:613
msgid "RETURNS: zero if the check passed, a negative error code otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:623
msgid "``atomic_reset``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:624
msgid ""
"Reset the bridge to a predefined state (or retrieve its current state) and "
"return a :c:type:`drm_bridge_state` object matching this state. This "
"function is called at attach time."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:628
msgid ""
"The atomic_reset hook is mandatory if the bridge implements any of the "
"atomic hooks, and should be left unassigned otherwise. For bridges that "
"don't subclass :c:type:`drm_bridge_state`, the "
"drm_atomic_helper_bridge_reset() helper function shall be used to implement "
"this hook."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:634
msgid ""
"Note that the atomic_reset() semantics is not exactly matching the reset() "
"semantics found on other components (connector, plane, ...)."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:637
msgid ""
"The reset operation happens when the bridge is attached, not when "
"drm_mode_config_reset() is called"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:639
msgid ""
"It's meant to be used exclusively on bridges that have been converted to the "
"ATOMIC API"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:642
msgid ""
"RETURNS: A valid drm_bridge_state object in case of success, an ERR_PTR() "
"giving the reason of the failure otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:651
msgid "Check if anything is attached to the bridge output."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:653
msgid ""
"This callback is optional, if not implemented the bridge will be considered "
"as always having a component attached to its output. Bridges that implement "
"this callback shall set the DRM_BRIDGE_OP_DETECT flag in their :c:type:"
"`drm_bridge->ops <drm_bridge>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:660
msgid "drm_connector_status indicating the bridge output status."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:668
msgid ""
"Fill all modes currently valid for the sink into the :c:type:`drm_connector` "
"with drm_mode_probed_add()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:671
msgid ""
"The **get_modes** callback is mostly intended to support non-probeable "
"displays such as many fixed panels. Bridges that support reading EDID shall "
"leave **get_modes** unimplemented and implement the :c:type:"
"`drm_bridge_funcs->edid_read <drm_bridge_funcs>` callback instead."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:676
msgid ""
"This callback is optional. Bridges that implement it shall set the "
"DRM_BRIDGE_OP_MODES flag in their :c:type:`drm_bridge->ops <drm_bridge>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:679
msgid ""
"The connector parameter shall be used for the sole purpose of filling modes, "
"and shall not be stored internally by bridge drivers for future usage."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:685
msgid "The number of modes added by calling drm_mode_probed_add()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:692
msgid "``edid_read``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:693
msgid "Read the EDID data of the connected display."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:695
msgid ""
"The **edid_read** callback is the preferred way of reporting mode "
"information for a display connected to the bridge output. Bridges that "
"support reading EDID shall implement this callback and leave the "
"**get_modes** callback unimplemented."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:700
msgid ""
"The caller of this operation shall first verify the output connection status "
"and refrain from reading EDID from a disconnected output."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:704
msgid ""
"This callback is optional. Bridges that implement it shall set the "
"DRM_BRIDGE_OP_EDID flag in their :c:type:`drm_bridge->ops <drm_bridge>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:707
msgid ""
"The connector parameter shall be used for the sole purpose of EDID "
"retrieval, and shall not be stored internally by bridge drivers for future "
"usage."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:713
msgid ""
"An edid structure newly allocated with drm_edid_alloc() or returned from "
"drm_edid_read() family of functions on success, or NULL otherwise. The "
"caller is responsible for freeing the returned edid structure with "
"drm_edid_free()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:723
msgid "``hpd_notify``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:724
msgid "Notify the bridge of hot plug detection."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:726
msgid ""
"This callback is optional, it may be implemented by bridges that need to be "
"notified of display connection or disconnection for internal reasons. One "
"use case is to reset the internal state of CEC controllers for HDMI bridges."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:736
msgid "``hpd_enable``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:737
msgid ""
"Enable hot plug detection. From now on the bridge shall call "
"drm_bridge_hpd_notify() each time a change is detected in the output "
"connection status, until hot plug detection gets disabled with "
"**hpd_disable**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:742
msgid ""
"This callback is optional and shall only be implemented by bridges that "
"support hot-plug notification without polling. Bridges that implement it "
"shall also implement the **hpd_disable** callback and set the "
"DRM_BRIDGE_OP_HPD flag in their :c:type:`drm_bridge->ops <drm_bridge>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:751
msgid "``hpd_disable``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:752
msgid ""
"Disable hot plug detection. Once this function returns the bridge shall not "
"call drm_bridge_hpd_notify() when a change in the output connection status "
"occurs."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:756
msgid ""
"This callback is optional and shall only be implemented by bridges that "
"support hot-plug notification without polling. Bridges that implement it "
"shall also implement the **hpd_enable** callback and set the "
"DRM_BRIDGE_OP_HPD flag in their :c:type:`drm_bridge->ops <drm_bridge>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:765
msgid "``hdmi_tmds_char_rate_valid``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:766
msgid ""
"Check whether a particular TMDS character rate is supported by the driver."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:769
msgid ""
"This callback is optional and should only be implemented by the bridges that "
"take part in the HDMI connector implementation. Bridges that implement it "
"shall set the DRM_BRIDGE_OP_HDMI flag in their :c:type:`drm_bridge->ops "
"<drm_bridge>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:786
msgid "``hdmi_clear_infoframe``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:787
msgid ""
"This callback clears the infoframes in the hardware during commit. It will "
"be called multiple times, once for every disabled infoframe type."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:791
#: include/drm/drm_bridge.h:802
msgid ""
"This callback is optional but it must be implemented by bridges that set the "
"DRM_BRIDGE_OP_HDMI flag in their :c:type:`drm_bridge->ops <drm_bridge>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:798
msgid "``hdmi_write_infoframe``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:799
msgid ""
"Program the infoframe into the hardware. It will be called multiple times, "
"once for every updated infoframe type."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:811
msgid "``hdmi_audio_startup``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:812
msgid "Called when ASoC starts an audio stream setup."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:814
#: include/drm/drm_bridge.h:858
msgid ""
"This callback is optional, it can be implemented by bridges that set the "
"**DRM_BRIDGE_OP_HDMI_AUDIO** flag in their :c:type:`drm_bridge->ops "
"<drm_bridge>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:817
#: include/drm/drm_bridge.h:832 include/drm/drm_bridge.h:847
#: include/drm/drm_bridge.h:861 include/drm/drm_bridge.h:877
#: include/drm/drm_bridge.h:892 include/drm/drm_bridge.h:906
#: include/drm/drm_bridge.h:920 include/drm/drm_bridge.h:934
#: include/drm/drm_bridge.h:949 include/drm/drm_bridge.h:964
#: include/drm/drm_bridge.h:978
msgid "Returns: 0 on success, a negative error code otherwise"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:825
msgid "``hdmi_audio_prepare``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:826
msgid ""
"Configures HDMI-encoder for audio stream. Can be called multiple times for "
"each setup."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:829
#: include/drm/drm_bridge.h:844
msgid ""
"This callback is optional but it must be implemented by bridges that set the "
"**DRM_BRIDGE_OP_HDMI_AUDIO** flag in their :c:type:`drm_bridge->ops "
"<drm_bridge>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:841
msgid "``hdmi_audio_shutdown``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:842
msgid "Shut down the audio stream."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:855
msgid "``hdmi_audio_mute_stream``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:856
msgid "Mute/unmute HDMI audio stream."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:870
msgid "``hdmi_cec_init``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:871
msgid "Initialize CEC part of the bridge."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:873
#: include/drm/drm_bridge.h:888 include/drm/drm_bridge.h:902
#: include/drm/drm_bridge.h:916
msgid ""
"This callback is optional, it can be implemented by bridges that set the "
"**DRM_BRIDGE_OP_HDMI_CEC_ADAPTER** flag in their :c:type:`drm_bridge->ops "
"<drm_bridge>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:885
msgid "``hdmi_cec_enable``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:886
msgid "Enable or disable the CEC adapter inside the bridge."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:899
msgid "``hdmi_cec_log_addr``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:900
msgid "Set the logical address of the CEC adapter inside the bridge."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:913
msgid "``hdmi_cec_transmit``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:914
msgid "Transmit the message using the CEC adapter inside the bridge."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:928
msgid "``dp_audio_startup``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:929
msgid "Called when ASoC starts a DisplayPort audio stream setup."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:931
#: include/drm/drm_bridge.h:975
msgid ""
"This callback is optional, it can be implemented by bridges that set the "
"**DRM_BRIDGE_OP_DP_AUDIO** flag in their :c:type:`drm_bridge->ops "
"<drm_bridge>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:942
msgid "``dp_audio_prepare``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:943
msgid ""
"Configures DisplayPort audio stream. Can be called multiple times for each "
"setup."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:946
#: include/drm/drm_bridge.h:961
msgid ""
"This callback is optional but it must be implemented by bridges that set the "
"**DRM_BRIDGE_OP_DP_AUDIO** flag in their :c:type:`drm_bridge->ops "
"<drm_bridge>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:958
msgid "``dp_audio_shutdown``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:959
msgid "Shut down the DisplayPort audio stream."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:972
msgid "``dp_audio_mute_stream``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:973
msgid "Mute/unmute DisplayPort audio stream."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:987
#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:142
msgid "``debugfs_init``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:988
msgid "Allows bridges to create bridge-specific debugfs files."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:995
msgid "timing information for the bridge"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:999
msgid "``input_bus_flags``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1000
msgid ""
"Tells what additional settings for the pixel data on the bus this bridge "
"requires (like pixel signal polarity). See also :c:type:`drm_display_info-"
">bus_flags <drm_display_info>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1007
msgid "``setup_time_ps``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1008
msgid ""
"Defines the time in picoseconds the input data lines must be stable before "
"the clock edge."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1014
msgid "``hold_time_ps``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1015
msgid ""
"Defines the time in picoseconds taken for the bridge to sample the input "
"signal after the clock edge."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1021
msgid "``dual_link``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1022
msgid ""
"True if the bus operates in dual-link mode. The exact meaning is dependent "
"on the bus type. For LVDS buses, this indicates that even- and odd-numbered "
"pixels are received on separate links."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1031
msgid "Bitmask of operations supported by the bridge"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1037
msgid "``DRM_BRIDGE_OP_DETECT``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1038
msgid ""
"The bridge can detect displays connected to its output. Bridges that set "
"this flag shall implement the :c:type:`drm_bridge_funcs->detect "
"<drm_bridge_funcs>` callback."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1042
msgid "``DRM_BRIDGE_OP_EDID``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1043
msgid ""
"The bridge can retrieve the EDID of the display connected to its output. "
"Bridges that set this flag shall implement the :c:type:`drm_bridge_funcs-"
">edid_read <drm_bridge_funcs>` callback."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1047
msgid "``DRM_BRIDGE_OP_HPD``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1048
msgid ""
"The bridge can detect hot-plug and hot-unplug without requiring polling. "
"Bridges that set this flag shall implement the :c:type:`drm_bridge_funcs-"
">hpd_enable <drm_bridge_funcs>` and :c:type:`drm_bridge_funcs->hpd_disable "
"<drm_bridge_funcs>` callbacks if they support enabling and disabling hot-"
"plug detection dynamically."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1054
msgid "``DRM_BRIDGE_OP_MODES``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1055
msgid ""
"The bridge can retrieve the modes supported by the display at its output. "
"This does not include reading EDID which is separately covered by "
"**DRM_BRIDGE_OP_EDID**. Bridges that set this flag shall implement the :c:"
"type:`drm_bridge_funcs->get_modes <drm_bridge_funcs>` callback."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1060
msgid "``DRM_BRIDGE_OP_HDMI``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1061
msgid ""
"The bridge provides HDMI connector operations, including infoframes support. "
"Bridges that set this flag must implement the :c:type:`drm_bridge_funcs-"
">write_infoframe <drm_bridge_funcs>` callback."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1065
msgid ""
"Note: currently there can be at most one bridge in a chain that sets this "
"bit. This is to simplify corresponding glue code in connector drivers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1069
msgid "``DRM_BRIDGE_OP_HDMI_AUDIO``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1070
msgid ""
"The bridge provides HDMI audio operations. Bridges that set this flag must "
"implement the :c:type:`drm_bridge_funcs->hdmi_audio_prepare "
"<drm_bridge_funcs>` and :c:type:`drm_bridge_funcs->hdmi_audio_shutdown "
"<drm_bridge_funcs>` callbacks."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1075
msgid ""
"Note: currently there can be at most one bridge in a chain that sets this "
"bit. This is to simplify corresponding glue code in connector drivers. Also "
"it is not possible to have a bridge in the chain that sets "
"**DRM_BRIDGE_OP_DP_AUDIO** if there is a bridge that sets this flag."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1081
msgid "``DRM_BRIDGE_OP_DP_AUDIO``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1082
msgid ""
"The bridge provides DisplayPort audio operations. Bridges that set this flag "
"must implement the :c:type:`drm_bridge_funcs->dp_audio_prepare "
"<drm_bridge_funcs>` and :c:type:`drm_bridge_funcs->dp_audio_shutdown "
"<drm_bridge_funcs>` callbacks."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1087
msgid ""
"Note: currently there can be at most one bridge in a chain that sets this "
"bit. This is to simplify corresponding glue code in connector drivers. Also "
"it is not possible to have a bridge in the chain that sets "
"**DRM_BRIDGE_OP_HDMI_AUDIO** if there is a bridge that sets this flag."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1093
msgid "``DRM_BRIDGE_OP_HDMI_CEC_NOTIFIER``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1094
msgid "The bridge requires CEC notifier to be present."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1097
msgid "``DRM_BRIDGE_OP_HDMI_CEC_ADAPTER``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1098
msgid "The bridge requires CEC adapter to be present."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1110
msgid "central DRM bridge control structure"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1114
msgid "inherit from :c:type:`drm_private_object`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1116
msgid "DRM device this bridge belongs to"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1118
msgid "encoder to which this bridge is connected"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1119
msgid "``chain_node``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1120
msgid "used to form a bridge chain"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1121
msgid "``of_node``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1122
msgid "device node pointer to the bridge"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1123
#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:227
#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:103
#: ../../../gpu/drm-kms-helpers:479: include/drm/drm_privacy_screen_driver.h:55
#: ../../../gpu/drm-kms-helpers:482:
#: include/drm/drm_privacy_screen_machine.h:21
msgid "``list``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1124
msgid "to keep track of all added bridges"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1126
msgid "``timings``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1127
msgid "the timing specification for the bridge, if any (may be NULL)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1132
msgid "control functions"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1135
#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:272
msgid "``container``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1136
msgid ""
"Pointer to the private driver struct embedding this **struct** drm_bridge."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1141
#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:278
msgid "``refcount``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1142
msgid "reference count of users referencing this bridge."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1145
#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:152
msgid "``driver_private``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1146
msgid "pointer to the bridge driver's internal context"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1147
#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:102
#: ../../../gpu/drm-kms-helpers:479: include/drm/drm_privacy_screen_driver.h:60
msgid "``ops``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1148
msgid "bitmask of operations supported by the bridge"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1151
msgid ""
"Type of the connection at the bridge output (DRM_MODE_CONNECTOR_*). For "
"bridges at the end of this chain this identifies the type of connected "
"display."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1156
msgid "``interlace_allowed``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1157
msgid "Indicate that the bridge can handle interlaced modes."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1161
msgid "``ycbcr_420_allowed``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1162
msgid "Indicate that the bridge can handle YCbCr 420 output."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1166
msgid "``pre_enable_prev_first``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1167
msgid ""
"The bridge requires that the prev bridge **pre_enable** function is called "
"before its **pre_enable**, and conversely for post_disable. This is most "
"frequently a requirement for DSI devices which need the host to be "
"initialised before the peripheral."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1174
#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:369
msgid "``ddc``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1175
msgid "Associated I2C adapter for DDC access, if any."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1179
#: ../../../gpu/drm-kms-helpers:407: include/linux/hdmi.h:427
msgid "``vendor``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1180
msgid ""
"Vendor of the product to be used for the SPD InfoFrame generation. This is "
"required if **DRM_BRIDGE_OP_HDMI** is set."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1185
msgid "``product``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1186
msgid ""
"Name of the product to be used for the SPD InfoFrame generation. This is "
"required if **DRM_BRIDGE_OP_HDMI** is set."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1191
msgid "``supported_formats``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1192
msgid ""
"Bitmask of **hdmi_colorspace** listing supported output formats. This is "
"only relevant if **DRM_BRIDGE_OP_HDMI** is set."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1197
msgid "``max_bpc``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1198
msgid ""
"Maximum bits per char the HDMI bridge supports. Allowed values are 8, 10 and "
"12. This is only relevant if **DRM_BRIDGE_OP_HDMI** is set."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1204
msgid "``hdmi_cec_dev``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1205
msgid "device to be used as a containing device for CEC functions."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1210
msgid "``hdmi_audio_dev``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1211
msgid ""
"device to be used as a parent for the HDMI Codec if either of "
"**DRM_BRIDGE_OP_HDMI_AUDIO** or **DRM_BRIDGE_OP_DP_AUDIO** is set."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1216
msgid "``hdmi_audio_max_i2s_playback_channels``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1217
msgid ""
"maximum number of playback I2S channels for the **DRM_BRIDGE_OP_HDMI_AUDIO** "
"or **DRM_BRIDGE_OP_DP_AUDIO**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1223
msgid "``hdmi_audio_i2s_formats``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1224
msgid ""
"supported I2S formats, optional. The default is to allow all formats "
"supported by the corresponding I2S bus driver. This is only used for bridges "
"setting **DRM_BRIDGE_OP_HDMI_AUDIO** or **DRM_BRIDGE_OP_DP_AUDIO**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1231
msgid "``hdmi_audio_spdif_playback``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1232
msgid ""
"set if this bridge has S/PDIF playback port for **DRM_BRIDGE_OP_HDMI_AUDIO** "
"or **DRM_BRIDGE_OP_DP_AUDIO**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1237
msgid "``hdmi_audio_dai_port``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1238
msgid ""
"sound DAI port for either of **DRM_BRIDGE_OP_HDMI_AUDIO** and "
"**DRM_BRIDGE_OP_DP_AUDIO**, -1 if it is not used."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1244
msgid "``hdmi_cec_adapter_name``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1245
msgid "the name of the adapter to register"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1249
msgid "``hdmi_cec_available_las``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1250
msgid "number of logical addresses, CEC_MAX_LOG_ADDRS if unset"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1255
msgid "``hpd_mutex``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1256
msgid "Protects the **hpd_cb** and **hpd_data** fields."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1259
msgid "``hpd_cb``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1260
msgid "Hot plug detection callback, registered with drm_bridge_hpd_enable()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1264
msgid "``hpd_data``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1265
msgid "Private data passed to the Hot plug detection callback **hpd_cb**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1285
msgid "``devm_drm_bridge_alloc (dev, type, member, funcs)``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1283
msgid "Allocate and initialize a bridge"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1284
msgid "struct device of the bridge device"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1285
msgid "the type of the struct which contains struct :c:type:`drm_bridge`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1286
msgid "the name of the :c:type:`drm_bridge` within **type**"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1287
msgid "callbacks for this bridge"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1288
msgid ""
"The reference count of the returned bridge is initialized to 1. This "
"reference will be automatically dropped via devm (by calling "
"drm_bridge_put()) when **dev** is removed."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1293
msgid "Pointer to new bridge, or ERR_PTR on failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1317
msgid "Get the current bridge state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1319
msgid "This function must be called with the modeset lock held."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1322
msgid "The current bridge state, or NULL if there is none."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1349
msgid "Get the next bridge in the chain"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1352
msgid ""
"the next bridge in the chain after **bridge**, or NULL if **bridge** is the "
"last."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1365
msgid "Get the previous bridge in the chain"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1368
msgid "the previous bridge in the chain, or NULL if **bridge** is the first."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1381
msgid "Get the first bridge in the chain"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1382
msgid "encoder object"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1384
msgid ""
"the first bridge in the chain, or NULL if **encoder** has no bridge attached "
"to it."
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1398
msgid "``drm_for_each_bridge_in_chain (encoder, bridge)``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1396
msgid "Iterate over all bridges present in a chain"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1397
msgid "the encoder to iterate bridges on"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1399
msgid "``bridge``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1398
msgid ""
"a bridge pointer updated to point to the current bridge at each iteration"
msgstr ""

#: ../../../gpu/drm-kms-helpers:182: include/drm/drm_bridge.h:1400
msgid ""
"Iterate over all bridges present in the bridge chain attached to **encoder**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:213
msgid "Acquire a bridge reference"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:214
#: drivers/gpu/drm/drm_bridge.c:232
msgid "DRM bridge"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:215
msgid "This function increments the bridge's refcount."
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:218
msgid "Pointer to **bridge**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:231
msgid "Release a bridge reference"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:233
msgid ""
"This function decrements the bridge's reference count and frees the object "
"if the reference count drops to zero."
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:289
msgid "add the given bridge to the global bridge list"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:292
msgid ""
"The bridge to be added must have been allocated by devm_drm_bridge_alloc()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:321
msgid "devm managed version of drm_bridge_add()"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:327
#: drivers/gpu/drm/drm_bridge.c:1423 ../../../gpu/drm-kms-helpers:204:
#: drivers/gpu/drm/bridge/panel.c:374 drivers/gpu/drm/bridge/panel.c:394
#: drivers/gpu/drm/bridge/panel.c:490 ../../../gpu/drm-kms-helpers:218:
#: drivers/gpu/drm/drm_panel.c:52 drivers/gpu/drm/drm_panel.c:522
#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:268
#: drivers/gpu/drm/drm_mipi_dsi.c:427 ../../../gpu/drm-kms-helpers:410:
#: drivers/video/hdmi.c:1523 ../../../gpu/drm-kms-helpers:452:
#: drivers/gpu/drm/drm_of.c:107 drivers/gpu/drm/drm_of.c:567
#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:109
msgid "``struct device *dev``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:323
#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:370
#: drivers/gpu/drm/bridge/panel.c:390 drivers/gpu/drm/bridge/panel.c:485
#: drivers/gpu/drm/bridge/panel.c:519
msgid "device to tie the bridge lifetime to"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:325
msgid ""
"This is the managed version of drm_bridge_add() which automatically calls "
"drm_bridge_remove() when **dev** is unbound."
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:329
msgid "0 if no error or negative error code."
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:339
msgid "remove the given bridge from the global bridge list"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:386
msgid "attach the bridge to an encoder's chain"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:391
msgid "``struct drm_bridge *previous``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:390
msgid "previous bridge in the chain (optional)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:392
msgid "``enum drm_bridge_attach_flags flags``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:391
msgid "DRM_BRIDGE_ATTACH_* flags"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:392
msgid ""
"Called by a kms driver to link the bridge to an encoder's chain. The "
"previous argument specifies the previous bridge in the chain. If NULL, the "
"bridge is linked directly at the encoder's output. Otherwise it is linked at "
"the previous bridge's output."
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:397
msgid ""
"If non-NULL the previous bridge must be already attached by a call to this "
"function."
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:400
msgid ""
"Note that bridges attached to encoders are auto-detached during encoder "
"cleanup in drm_encoder_cleanup(), so drm_bridge_attach() should generally "
"*not* be balanced with a drm_bridge_detach() in driver code."
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:591
msgid "validate the mode against all bridges in the encoder chain."
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:595
msgid "``const struct drm_display_info *info``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:594
msgid "display info against which the mode shall be validated"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:596
#: drivers/gpu/drm/drm_bridge.c:637 ../../../gpu/drm-kms-helpers:248:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:877
#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:322
#: drivers/gpu/drm/drm_mipi_dbi.c:597 drivers/gpu/drm/drm_mipi_dbi.c:678
#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:1125
#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5850
#: drivers/gpu/drm/drm_edid.c:5998 drivers/gpu/drm/drm_edid.c:7288
#: drivers/gpu/drm/drm_edid.c:7366 drivers/gpu/drm/drm_edid.c:7448
msgid "``const struct drm_display_mode *mode``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:595
msgid "desired mode to be validated"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:596
msgid ""
"Calls :c:type:`drm_bridge_funcs.mode_valid <drm_bridge_funcs>` for all the "
"bridges in the encoder chain, starting from the first bridge to the last. If "
"at least one bridge does not accept the mode the function returns the error "
"code."
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:601
msgid "the bridge passed should be the one closest to the encoder."
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:603
msgid "MODE_OK on success, drm_mode_status Enum error code on failure"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:633
msgid "set proposed mode for all bridges in the encoder chain"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:636
msgid "desired mode to be set for the encoder chain"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:638
msgid "``const struct drm_display_mode *adjusted_mode``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:637
msgid "updated mode that works for this encoder chain"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:638
msgid ""
"Calls :c:type:`drm_bridge_funcs.mode_set <drm_bridge_funcs>` op for all the "
"bridges in the encoder chain, starting from the first bridge to the last."
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:642
#: drivers/gpu/drm/drm_bridge.c:671 drivers/gpu/drm/drm_bridge.c:727
#: drivers/gpu/drm/drm_bridge.c:821 drivers/gpu/drm/drm_bridge.c:889
msgid "the bridge passed should be the one closest to the encoder"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:662
msgid "disables all bridges in the encoder chain"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:664
#: drivers/gpu/drm/drm_bridge.c:709 drivers/gpu/drm/drm_bridge.c:804
#: drivers/gpu/drm/drm_bridge.c:882
msgid "atomic state being committed"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:665
msgid ""
"Calls :c:type:`drm_bridge_funcs.atomic_disable <drm_bridge_funcs>` (falls "
"back on :c:type:`drm_bridge_funcs.disable <drm_bridge_funcs>`) op for all "
"the bridges in the encoder chain, starting from the last bridge to the "
"first. These are called before calling :c:type:`drm_encoder_helper_funcs."
"atomic_disable <drm_encoder_helper_funcs>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:706
msgid "cleans up after disabling all bridges in the encoder chain"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:710
msgid ""
"Calls :c:type:`drm_bridge_funcs.atomic_post_disable <drm_bridge_funcs>` "
"(falls back on :c:type:`drm_bridge_funcs.post_disable <drm_bridge_funcs>`) "
"op for all the bridges in the encoder chain, starting from the first bridge "
"to the last. These are called after completing :c:type:"
"`drm_encoder_helper_funcs.atomic_disable <drm_encoder_helper_funcs>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:715
msgid ""
"If a bridge sets **pre_enable_prev_first**, then the **post_disable** for "
"that bridge will be called before the previous one to reverse the "
"**pre_enable** calling direction."
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:719
#: drivers/gpu/drm/drm_bridge.c:813
msgid "**Example**"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:720
#: drivers/gpu/drm/drm_bridge.c:814
msgid "Bridge A ---> Bridge B ---> Bridge C ---> Bridge D ---> Bridge E"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:722
msgid ""
"With pre_enable_prev_first flag enable in Bridge B, D, E then the resulting "
"**post_disable** order would be, Bridge B, Bridge A, Bridge E, Bridge D, "
"Bridge C."
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:801
msgid "prepares for enabling all bridges in the encoder chain"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:805
msgid ""
"Calls :c:type:`drm_bridge_funcs.atomic_pre_enable <drm_bridge_funcs>` (falls "
"back on :c:type:`drm_bridge_funcs.pre_enable <drm_bridge_funcs>`) op for all "
"the bridges in the encoder chain, starting from the last bridge to the "
"first. These are called before calling :c:type:`drm_encoder_helper_funcs."
"atomic_enable <drm_encoder_helper_funcs>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:810
msgid ""
"If a bridge sets **pre_enable_prev_first**, then the pre_enable for the prev "
"bridge will be called before pre_enable of this bridge."
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:816
msgid ""
"With pre_enable_prev_first flag enable in Bridge B, D, E then the resulting "
"**pre_enable** order would be, Bridge C, Bridge D, Bridge E, Bridge A, "
"Bridge B."
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:880
msgid "enables all bridges in the encoder chain"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:883
msgid ""
"Calls :c:type:`drm_bridge_funcs.atomic_enable <drm_bridge_funcs>` (falls "
"back on :c:type:`drm_bridge_funcs.enable <drm_bridge_funcs>`) op for all the "
"bridges in the encoder chain, starting from the first bridge to the last. "
"These are called after completing :c:type:`drm_encoder_helper_funcs."
"atomic_enable <drm_encoder_helper_funcs>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1170
msgid "Do an atomic check on the bridge chain"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1174
msgid ""
"First trigger a bus format negotiation before calling :c:type:"
"`drm_bridge_funcs.atomic_check\\(\\) <drm_bridge_funcs>` (falls back on :c:"
"type:`drm_bridge_funcs.mode_fixup\\(\\) <drm_bridge_funcs>`) op for all the "
"bridges in the encoder chain, starting from the last bridge to the first. "
"These are called before calling :c:type:`drm_encoder_helper_funcs."
"atomic_check\\(\\) <drm_encoder_helper_funcs>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1181
msgid "0 on success, a negative error code on failure"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1228
msgid "check if anything is attached to the bridge output"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1230
msgid "attached connector"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1231
msgid ""
"If the bridge supports output detection, as reported by the "
"DRM_BRIDGE_OP_DETECT bridge ops flag, call :c:type:`drm_bridge_funcs.detect "
"<drm_bridge_funcs>` for the bridge and return the connection status. "
"Otherwise return connector_status_unknown."
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1237
msgid ""
"The detection status on success, or connector_status_unknown if the bridge "
"doesn't support output detection."
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1252
msgid "fill all modes currently valid for the sink into the **connector**"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1255
msgid "the connector to fill with modes"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1256
msgid ""
"If the bridge supports output modes retrieval, as reported by the "
"DRM_BRIDGE_OP_MODES bridge ops flag, call :c:type:`drm_bridge_funcs."
"get_modes <drm_bridge_funcs>` to fill the connector with all valid modes and "
"return the number of modes added. Otherwise return 0."
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1262
#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:1231
msgid "The number of modes added to the connector."
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1276
msgid "read the EDID data of the connected display"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1278
msgid "the connector to read EDID for"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1279
msgid ""
"If the bridge supports output EDID retrieval, as reported by the "
"DRM_BRIDGE_OP_EDID bridge ops flag, call :c:type:`drm_bridge_funcs.edid_read "
"<drm_bridge_funcs>` to get the EDID and return it. Otherwise return NULL."
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1284
msgid "The retrieved EDID on success, or NULL otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1298
msgid "enable hot plug detection for the bridge"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1301
msgid "``void (*cb)(void *data, enum drm_connector_status status)``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1300
msgid "hot-plug detection callback"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1302
#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:837
#: drivers/gpu/drm/drm_mipi_dsi.c:1059 ../../../gpu/drm-kms-helpers:485:
#: drivers/gpu/drm/drm_privacy_screen.c:384
msgid "``void *data``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1301
msgid "data to be passed to the hot-plug detection callback"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1302
msgid ""
"Call :c:type:`drm_bridge_funcs.hpd_enable <drm_bridge_funcs>` if implemented "
"and register the given **cb** and **data** as hot plug notification "
"callback. From now on the **cb** will be called with **data** when an output "
"status change is detected by the bridge, until hot plug notification gets "
"disabled with drm_bridge_hpd_disable()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1307
#: drivers/gpu/drm/drm_bridge.c:1347
msgid ""
"Hot plug detection is supported only if the DRM_BRIDGE_OP_HPD flag is set in "
"bridge->ops. This function shall not be called when the flag is not set."
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1310
msgid ""
"Only one hot plug detection callback can be registered at a time, it is an "
"error to call this function when hot plug detection is already enabled for "
"the bridge."
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1340
msgid "disable hot plug detection for the bridge"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1342
msgid ""
"Call :c:type:`drm_bridge_funcs.hpd_disable <drm_bridge_funcs>` if "
"implemented and unregister the hot plug detection callback previously "
"registered with drm_bridge_hpd_enable(). Once this function returns the "
"callback will not be called by the bridge when an output status change "
"occurs."
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1367
msgid "notify hot plug detection events"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1370
#: ../../../gpu/drm-kms-helpers:248:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:1156
#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1799
msgid "``enum drm_connector_status status``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1369
msgid "output connection status"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1370
msgid ""
"Bridge drivers shall call this function to report hot plug events when they "
"detect a change in the output status, when hot plug detection has been "
"enabled by drm_bridge_hpd_enable()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1374
msgid "This function shall be called in a context that can sleep."
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1389
msgid ""
"find the bridge corresponding to the device node in the global bridge list"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1395
#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:487
#: drivers/gpu/drm/bridge/panel.c:521 ../../../gpu/drm-kms-helpers:348:
#: drivers/gpu/drm/drm_mipi_dsi.c:110
msgid "``struct device_node *np``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1392
msgid "device node"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1394
msgid "drm_bridge control struct on success, NULL on failure"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1417
msgid "Release a bridge reference obtained via devm"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1418
msgid "device that got the bridge via devm"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1419
msgid "pointer to a struct drm_bridge obtained via devm"
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1420
msgid ""
"Same as drm_bridge_put() for bridge pointers obtained via devm functions "
"such as devm_drm_bridge_alloc()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:185: drivers/gpu/drm/drm_bridge.c:1423
msgid ""
"This function is a temporary workaround and MUST NOT be used. Manual "
"handling of bridge lifetime is inherently unsafe."
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:189
msgid "MIPI-DSI bridge operation"
msgstr ""

#: ../../../gpu/drm-kms-helpers:191: drivers/gpu/drm/drm_bridge.c:162
msgid ""
"DSI host interfaces are expected to be implemented as bridges rather than "
"encoders, however there are a few aspects of their operation that need to be "
"defined in order to provide a consistent interface."
msgstr ""

#: ../../../gpu/drm-kms-helpers:191: drivers/gpu/drm/drm_bridge.c:166
msgid ""
"A DSI host should keep the PHY powered down until the pre_enable operation "
"is called. All lanes are in an undefined idle state up to this point, and it "
"must not be assumed that it is LP-11. pre_enable should initialise the PHY, "
"set the data lanes to LP-11, and the clock lane to either LP-11 or HS "
"depending on the mode_flag ``MIPI_DSI_CLOCK_NON_CONTINUOUS``."
msgstr ""

#: ../../../gpu/drm-kms-helpers:191: drivers/gpu/drm/drm_bridge.c:173
msgid ""
"Ordinarily the downstream bridge DSI peripheral pre_enable will have been "
"called before the DSI host. If the DSI peripheral requires LP-11 and/or the "
"clock lane to be in HS mode prior to pre_enable, then it can set the :c:type:"
"`pre_enable_prev_first` flag to request the pre_enable (and post_disable) "
"order to be altered to enable the DSI host first."
msgstr ""

#: ../../../gpu/drm-kms-helpers:191: drivers/gpu/drm/drm_bridge.c:179
msgid ""
"Either the CRTC being enabled, or the DSI host enable operation should "
"switch the host to actively transmitting video on the data lanes."
msgstr ""

#: ../../../gpu/drm-kms-helpers:191: drivers/gpu/drm/drm_bridge.c:182
msgid ""
"The reverse also applies. The DSI host disable operation or stopping the "
"CRTC should stop transmitting video, and the data lanes should return to the "
"LP-11 state. The DSI host :c:type:`post_disable` operation should disable "
"the PHY. If the :c:type:`pre_enable_prev_first` flag is set, then the DSI "
"peripheral's bridge :c:type:`post_disable` will be called before the DSI "
"host's post_disable."
msgstr ""

#: ../../../gpu/drm-kms-helpers:191: drivers/gpu/drm/drm_bridge.c:188
msgid ""
"Whilst it is valid to call :c:type:`host_transfer` prior to pre_enable or "
"after post_disable, the exact state of the lanes is undefined at this point. "
"The DSI host should initialise the interface, transmit the data, and then "
"disable the interface again."
msgstr ""

#: ../../../gpu/drm-kms-helpers:191: drivers/gpu/drm/drm_bridge.c:193
msgid ""
"Ultra Low Power State (ULPS) is not explicitly supported by DRM. If "
"implemented, it therefore needs to be handled entirely within the DSI Host "
"driver."
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:196
msgid "Bridge Connector Helper Reference"
msgstr ""

#: ../../../gpu/drm-kms-helpers:198:
#: drivers/gpu/drm/display/drm_bridge_connector.c:622
msgid "Initialise a connector for a chain of bridges"
msgstr ""

#: ../../../gpu/drm-kms-helpers:198:
#: drivers/gpu/drm/display/drm_bridge_connector.c:623
msgid "the DRM device"
msgstr ""

#: ../../../gpu/drm-kms-helpers:198:
#: drivers/gpu/drm/display/drm_bridge_connector.c:624
msgid "the encoder where the bridge chain starts"
msgstr ""

#: ../../../gpu/drm-kms-helpers:198:
#: drivers/gpu/drm/display/drm_bridge_connector.c:625
msgid ""
"Allocate, initialise and register a :c:type:`drm_bridge_connector` with the "
"**drm** device. The connector is associated with a chain of bridges that "
"starts at the **encoder**. All bridges in the chain shall report bridge "
"operation flags (:c:type:`drm_bridge->ops <drm_bridge>`) and bridge output "
"type (:c:type:`drm_bridge->type <drm_bridge>`), and none of them may create "
"a DRM connector directly."
msgstr ""

#: ../../../gpu/drm-kms-helpers:198:
#: drivers/gpu/drm/display/drm_bridge_connector.c:631
msgid ""
"Returns a pointer to the new connector on success, or a negative error "
"pointer otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:202
msgid "Panel-Bridge Helper Reference"
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:224
msgid "Checks if a drm_bridge is a panel_bridge."
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:230
msgid "``const struct drm_bridge *bridge``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:226
msgid "The drm_bridge to be checked."
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:227
msgid "Returns true if the bridge is a panel bridge, or false otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:237
msgid ""
"Creates a :c:type:`drm_bridge` and :c:type:`drm_connector` that just calls "
"the appropriate functions from :c:type:`drm_panel`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:243
#: drivers/gpu/drm/bridge/panel.c:277 drivers/gpu/drm/bridge/panel.c:372
#: drivers/gpu/drm/bridge/panel.c:392 drivers/gpu/drm/bridge/panel.c:439
#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:55
#: drivers/gpu/drm/drm_panel.c:81 drivers/gpu/drm/drm_panel.c:97
#: drivers/gpu/drm/drm_panel.c:111 drivers/gpu/drm/drm_panel.c:155
#: drivers/gpu/drm/drm_panel.c:207 drivers/gpu/drm/drm_panel.c:243
#: drivers/gpu/drm/drm_panel.c:286 drivers/gpu/drm/drm_panel.c:322
#: drivers/gpu/drm/drm_panel.c:341 drivers/gpu/drm/drm_panel.c:651
#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4391
msgid "``struct drm_panel *panel``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:240
#: drivers/gpu/drm/bridge/panel.c:273 drivers/gpu/drm/bridge/panel.c:371
#: drivers/gpu/drm/bridge/panel.c:391 drivers/gpu/drm/bridge/panel.c:438
msgid "The drm_panel being wrapped.  Must be non-NULL."
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:241
msgid ""
"For drivers converting from directly using drm_panel: The expected usage "
"pattern is that during either encoder module probe or DSI host attach, a "
"drm_panel will be looked up through drm_of_find_panel_or_bridge().  "
"drm_panel_bridge_add() is used to wrap that panel in the new bridge, and the "
"result can then be passed to drm_bridge_attach().  The drm_panel_prepare() "
"and related functions can be dropped from the encoder driver (they're now "
"called by the KMS helpers before calling into the encoder), along with "
"connector creation.  When done with the bridge (after "
"drm_mode_config_cleanup() if the bridge has already been attached), then "
"drm_panel_bridge_remove() to free it."
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:253
msgid ""
"The connector type is set to **panel->connector_type**, which must be set to "
"a known type. Calling this function with a panel whose connector type is "
"DRM_MODE_CONNECTOR_Unknown will return ERR_PTR(-EINVAL)."
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:257
msgid ""
"See devm_drm_panel_bridge_add() for an automatically managed version of this "
"function."
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:271
msgid ""
"Creates a :c:type:`drm_bridge` and :c:type:`drm_connector` with an explicit "
"connector type."
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:275
#: drivers/gpu/drm/bridge/panel.c:393
msgid "``u32 connector_type``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:274
#: drivers/gpu/drm/bridge/panel.c:392
msgid "The connector type (DRM_MODE_CONNECTOR_*)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:275
msgid ""
"This is just like drm_panel_bridge_add(), but forces the connector type to "
"**connector_type** instead of infering it from the panel."
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:278
msgid ""
"This function is deprecated and should not be used in new drivers. Use "
"drm_panel_bridge_add() instead, and fix panel drivers as necessary if they "
"don't report a connector type."
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:311
msgid "Unregisters and frees a drm_bridge created by drm_panel_bridge_add()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:314
msgid "The drm_bridge being freed."
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:337
msgid ""
"Set the connector's panel orientation from the bridge that can be "
"transformed to panel bridge."
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:340
msgid "The connector to be set panel orientation."
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:341
msgid "The drm_bridge to be transformed to panel bridge."
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:342
msgid "Returns 0 on success, negative errno on failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:368
msgid ""
"Creates a managed :c:type:`drm_bridge` and :c:type:`drm_connector` that just "
"calls the appropriate functions from :c:type:`drm_panel`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:372
msgid ""
"This is the managed version of drm_panel_bridge_add() which automatically "
"calls drm_panel_bridge_remove() when **dev** is unbound."
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:388
msgid ""
"Creates a managed :c:type:`drm_bridge` and :c:type:`drm_connector` with an "
"explicit connector type."
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:393
msgid ""
"This is just like devm_drm_panel_bridge_add(), but forces the connector type "
"to **connector_type** instead of infering it from the panel."
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:396
msgid ""
"This function is deprecated and should not be used in new drivers. Use "
"devm_drm_panel_bridge_add() instead, and fix panel drivers as necessary if "
"they don't report a connector type."
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:433
msgid ""
"Creates a DRM-managed :c:type:`drm_bridge` and :c:type:`drm_connector` that "
"just calls the appropriate functions from :c:type:`drm_panel`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:437
msgid "DRM device to tie the bridge lifetime to"
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:439
msgid ""
"This is the DRM-managed version of drm_panel_bridge_add() which "
"automatically calls drm_panel_bridge_remove() when **dev** is cleaned up."
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:464
msgid "return the connector for the panel bridge"
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:465
msgid "The drm_bridge."
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:466
msgid ""
"drm_panel_bridge creates the connector. This function gives external access "
"to the connector."
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:470
msgid "Pointer to drm_connector"
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:484
#: drivers/gpu/drm/bridge/panel.c:518
msgid "Return next bridge in the chain"
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:486
#: drivers/gpu/drm/bridge/panel.c:520 ../../../gpu/drm-kms-helpers:452:
#: drivers/gpu/drm/drm_of.c:222
msgid "device tree node containing encoder output ports"
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:488
#: drivers/gpu/drm/bridge/panel.c:522
msgid "``u32 port``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:487
#: drivers/gpu/drm/bridge/panel.c:521 ../../../gpu/drm-kms-helpers:452:
#: drivers/gpu/drm/drm_of.c:223
msgid "port in the device tree node"
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:489
#: drivers/gpu/drm/bridge/panel.c:523
msgid "``u32 endpoint``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:488
#: drivers/gpu/drm/bridge/panel.c:522 ../../../gpu/drm-kms-helpers:452:
#: drivers/gpu/drm/drm_of.c:224
msgid "endpoint in the device tree node"
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:489
#: drivers/gpu/drm/bridge/panel.c:523
msgid ""
"Given a DT node's port and endpoint number, finds the connected node and "
"returns the associated bridge if any, or creates and returns a drm panel "
"bridge instance if a panel is connected."
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:493
msgid ""
"Returns a pointer to the bridge if successful, or an error pointer otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:204: drivers/gpu/drm/bridge/panel.c:527
msgid ""
"Returns a drmm managed pointer to the bridge if successful, or an error "
"pointer otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:210
msgid "Panel Helper Reference"
msgstr ""

#: ../../../gpu/drm-kms-helpers:212: drivers/gpu/drm/drm_panel.c:38
msgid ""
"The DRM panel helpers allow drivers to register panel objects with a central "
"registry and provide functions to retrieve those panels in display drivers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:212: drivers/gpu/drm/drm_panel.c:42
msgid ""
"For easy integration into drivers using the :c:type:`drm_bridge` "
"infrastructure please take look at drm_panel_bridge_add() and "
"devm_drm_panel_bridge_add()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:44
msgid "perform operations on a given panel"
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:76
msgid "Turn on panel and perform set up."
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:85
msgid "Enable panel (turn on back light, etc.)."
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:94
msgid "Disable panel (turn off back light, etc.)."
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:102
msgid "``unprepare``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:103
msgid "Turn off panel."
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:112
msgid ""
"Add modes to the connector that the panel is attached to and returns the "
"number of modes added."
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:115
msgid "This function is mandatory."
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:122
msgid "``get_orientation``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:123
msgid "Return the panel orientation set by device tree or EDID."
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:131
msgid "``get_timings``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:132
msgid ""
"Copy display timings into the provided array and return the number of "
"display timings available."
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:143
msgid "Allows panels to create panels-specific debugfs files."
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:45
msgid ""
"The .prepare() function is typically called before the display controller "
"starts to transmit video data. Panel drivers can use this to turn the panel "
"on and wait for it to become ready. If additional configuration is required "
"(via a control bus such as I2C, SPI or DSI for example) this is a good time "
"to do that."
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:51
msgid ""
"After the display controller has started transmitting video data, it's safe "
"to call the .enable() function. This will typically enable the backlight to "
"make the image on screen visible. Some panels require a certain amount of "
"time or frames before the image is displayed. This function is responsible "
"for taking this into account before enabling the backlight to avoid visual "
"glitches."
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:58
msgid ""
"Before stopping video transmission from the display controller it can be "
"necessary to turn off the panel to avoid visual glitches. This is done in "
"the .disable() function. Analogously to .enable() this typically involves "
"turning off the backlight and waiting for some time to make sure no image is "
"visible on the panel. It is then safe for the display controller to cease "
"transmission of video data."
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:65
msgid ""
"To save power when no video data is transmitted, a driver can power down the "
"panel. This is the job of the .unprepare() function."
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:68
msgid ""
"Backlight can be handled automatically if configured using "
"drm_panel_of_backlight() or drm_panel_dp_aux_backlight(). Then the driver "
"does not need to implement the functionality to enable/disable backlight."
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:189
msgid "DRM panel object"
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:194
msgid "Parent device of the panel."
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:200
#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:132
msgid "``backlight``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:201
msgid ""
"Backlight device, used to turn on backlight after the call to enable(), and "
"to turn off backlight before the call to disable(). backlight is set by "
"drm_panel_of_backlight() or drm_panel_dp_aux_backlight() and drivers shall "
"not assign it."
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:212
msgid "Operations that can be performed on the panel."
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:218
#: include/drm/drm_panel.h:295
msgid "``connector_type``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:219
msgid ""
"Type of the panel as a DRM_MODE_CONNECTOR_* value. This is used to "
"initialise the drm_connector corresponding to the panel with the correct "
"connector type."
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:228
msgid "Panel entry in registry."
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:234
msgid "``followers``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:235
msgid "A list of struct drm_panel_follower dependent on this panel."
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:241
msgid "``follower_lock``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:242
msgid "Lock for followers list."
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:248
msgid "``prepare_prev_first``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:249
msgid ""
"The previous controller should be prepared first, before the prepare for the "
"panel is called. This is largely required for DSI panels where the DSI host "
"controller should be initialised to LP-11 before the panel is powered up."
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:258
msgid "``prepared``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:259
msgid "If true then the panel has been prepared."
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:265
msgid "``enabled``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:266
msgid "If true then the panel has been enabled."
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:273
msgid ""
"Pointer to the private driver struct embedding this **struct** drm_panel."
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:279
msgid "reference count of users referencing this panel."
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:290
msgid "``devm_drm_panel_alloc (dev, type, member, funcs, connector_type)``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:288
msgid "Allocate and initialize a refcounted panel."
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:290
msgid "struct device of the panel device"
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:291
msgid "the type of the struct which contains struct :c:type:`drm_panel`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:292
msgid "the name of the :c:type:`drm_panel` within **type**"
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:293
msgid "callbacks for this panel"
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:294
msgid ""
"the connector type (DRM_MODE_CONNECTOR_*) corresponding to the panel "
"interface"
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:296
msgid ""
"The reference count of the returned panel is initialized to 1. This "
"reference will be automatically dropped via devm (by calling "
"drm_panel_put()) when **dev** is removed."
msgstr ""

#: ../../../gpu/drm-kms-helpers:215: include/drm/drm_panel.h:301
msgid "Pointer to container structure embedding the panel, ERR_PTR on failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:49
msgid "initialize a panel"
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:50
#: drivers/gpu/drm/drm_panel.c:92 drivers/gpu/drm/drm_panel.c:106
#: drivers/gpu/drm/drm_panel.c:150 drivers/gpu/drm/drm_panel.c:202
#: drivers/gpu/drm/drm_panel.c:238 drivers/gpu/drm/drm_panel.c:281
#: drivers/gpu/drm/drm_panel.c:317 drivers/gpu/drm/drm_panel.c:336
#: drivers/gpu/drm/drm_panel.c:646 ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4386
msgid "DRM panel"
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:51
msgid "parent device of the panel"
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:53
msgid "``const struct drm_panel_funcs *funcs``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:52
msgid "panel operations"
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:54
msgid "``int connector_type``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:53
msgid ""
"the connector type (DRM_MODE_CONNECTOR_*) corresponding to the panel "
"interface (must NOT be DRM_MODE_CONNECTOR_Unknown)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:55
msgid ""
"Initialize the panel structure for subsequent registration with "
"drm_panel_add()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:75
msgid "add a panel to the global registry"
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:76
msgid "panel to add"
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:77
msgid ""
"Add a panel to the global registry so that it can be looked up by display "
"drivers. The panel to be added must have been allocated by "
"devm_drm_panel_alloc()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:91
msgid "remove a panel from the global registry"
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:93
msgid "Removes a panel from the global registry."
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:105
msgid "power on a panel"
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:107
msgid ""
"Calling this function will enable power and deassert any reset signals to "
"the panel. After this has completed it is possible to communicate with any "
"integrated circuitry via a command bus. This function cannot fail (as it is "
"called from the pre_enable call chain). There will always be a call to "
"drm_panel_disable() afterwards."
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:149
msgid "power off a panel"
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:151
msgid ""
"Calling this function will completely power off a panel (assert the panel's "
"reset, turn off power supplies, ...). After this function has completed, it "
"is usually no longer possible to communicate with the panel until another "
"call to drm_panel_prepare()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:201
msgid "enable a panel"
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:203
msgid ""
"Calling this function will cause the panel display drivers to be turned on "
"and the backlight to be enabled. Content will be visible on screen after "
"this call completes. This function cannot fail (as it is called from the "
"enable call chain). There will always be a call to drm_panel_disable() "
"afterwards."
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:237
msgid "disable a panel"
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:239
msgid ""
"This will typically turn off the panel's backlight or disable the display "
"drivers. For smart panels it should still be possible to communicate with "
"the integrated circuitry via any command bus after this call."
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:280
msgid "probe the available display modes of a panel"
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:283
msgid ""
"The modes probed from the panel are automatically added to the connector "
"that the panel is attached to."
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:287
msgid ""
"The number of modes available from the panel on success, or 0 on failure (no "
"modes)."
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:316
msgid "Acquire a panel reference"
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:318
msgid "This function increments the panel's refcount."
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:320
msgid "Pointer to **panel**"
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:335
msgid "Release a panel reference"
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:337
msgid ""
"This function decrements the panel's reference count and frees the object if "
"the reference count drops to zero."
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:397
msgid "look up a panel using a device tree node"
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:403
#: drivers/gpu/drm/drm_panel.c:440 ../../../gpu/drm-kms-helpers:452:
#: drivers/gpu/drm/drm_of.c:227
msgid "``const struct device_node *np``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:398
#: drivers/gpu/drm/drm_panel.c:436
msgid "device tree node of the panel"
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:399
msgid ""
"Searches the set of registered panels for one that matches the given device "
"tree node. If a matching panel is found, return a pointer to it."
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:403
msgid "Possible error codes returned by this function:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:405
msgid ""
"EPROBE_DEFER: the panel device has not been probed yet, and the caller "
"should retry later"
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:407
msgid "ENODEV: the device is not available (status != \"okay\" or \"ok\")"
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:403
msgid ""
"A pointer to the panel registered for the specified device tree node or an "
"ERR_PTR() if no panel matching the device tree node can be found."
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:434
msgid ""
"look up the orientation of the panel through the \"rotation\" binding from a "
"device tree node"
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:438
msgid "``enum drm_panel_orientation *orientation``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:437
msgid "orientation enum to be filled in"
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:438
msgid ""
"Looks up the rotation of a panel in the device tree. The orientation of the "
"panel is expressed as a property name \"rotation\" in the device tree. The "
"rotation in the device tree is counter clockwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:443
msgid ""
"0 when a valid rotation value (0, 90, 180, or 270) is read or the rotation "
"property doesn't exist. Return a negative error code on failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:516
msgid "Check if the device is a panel follower"
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:517
msgid "The 'struct device' to check"
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:518
msgid ""
"This checks to see if a device needs to be power sequenced together with a "
"panel using the panel follower API."
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:521
#: drivers/gpu/drm/drm_panel.c:549
msgid ""
"The \"panel\" property of the follower points to the panel to be followed."
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:524
msgid "true if we should be power sequenced with a panel; false otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:538
msgid "Register something to follow panel state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:544
#: drivers/gpu/drm/drm_panel.c:627
msgid "``struct device *follower_dev``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:539
#: drivers/gpu/drm/drm_panel.c:622
msgid "The 'struct device' for the follower."
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:541
#: drivers/gpu/drm/drm_panel.c:592 drivers/gpu/drm/drm_panel.c:624
msgid "``struct drm_panel_follower *follower``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:540
#: drivers/gpu/drm/drm_panel.c:587 drivers/gpu/drm/drm_panel.c:623
msgid "The panel follower descriptor for the follower."
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:541
msgid ""
"A panel follower is called right after preparing the panel and right before "
"unpreparing the panel. It's primary intention is to power on an associated "
"touchscreen, though it could be used for any similar devices. Multiple "
"devices are allowed the follow the same panel."
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:546
msgid ""
"If a follower is added to a panel that's already been turned on, the "
"follower's prepare callback is called right away."
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:552
msgid ""
"0 or an error code. Note that -ENODEV means that we detected that "
"follower_dev is not actually following a panel. The caller may choose to "
"ignore this return value if following a panel is optional."
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:586
msgid "Reverse drm_panel_add_follower()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:588
msgid ""
"Undo drm_panel_add_follower(). This includes calling the follower's "
"unprepare function if we're removed from a panel that's currently prepared."
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:592
#: drivers/gpu/drm/drm_panel.c:627
msgid "0 or an error code."
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:621
msgid "devm version of drm_panel_add_follower()"
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:624
msgid ""
"Handles calling drm_panel_remove_follower() using devm on the follower_dev."
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:645
msgid "use backlight device node for backlight"
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:647
msgid ""
"Use this function to enable backlight handling if your panel uses device "
"tree and has a backlight phandle."
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:650
#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4392
msgid ""
"When the panel is enabled backlight will be enabled after a successful call "
"to :c:type:`drm_panel_funcs.enable\\(\\) <drm_panel_funcs>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:653
#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4395
msgid ""
"When the panel is disabled backlight will be disabled before the call to :c:"
"type:`drm_panel_funcs.disable\\(\\) <drm_panel_funcs>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:218: drivers/gpu/drm/drm_panel.c:656
msgid ""
"A typical implementation for a panel driver supporting device tree will call "
"this function at probe time. Backlight will then be handled transparently "
"without requiring any intervention from the driver. drm_panel_of_backlight() "
"must be called after the call to drm_panel_init()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:221:
#: drivers/gpu/drm/drm_panel_orientation_quirks.c:540
msgid "Check for panel orientation quirks"
msgstr ""

#: ../../../gpu/drm-kms-helpers:221:
#: drivers/gpu/drm/drm_panel_orientation_quirks.c:546
#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:99
#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:240
#: drivers/gpu/drm/drm_rect.c:306
msgid "``int width``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:221:
#: drivers/gpu/drm/drm_panel_orientation_quirks.c:541
msgid "width in pixels of the panel"
msgstr ""

#: ../../../gpu/drm-kms-helpers:221:
#: drivers/gpu/drm/drm_panel_orientation_quirks.c:543
#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:100
#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:241
#: drivers/gpu/drm/drm_rect.c:307
msgid "``int height``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:221:
#: drivers/gpu/drm/drm_panel_orientation_quirks.c:542
msgid "height in pixels of the panel"
msgstr ""

#: ../../../gpu/drm-kms-helpers:221:
#: drivers/gpu/drm/drm_panel_orientation_quirks.c:543
msgid ""
"This function checks for platform specific (e.g. DMI based) quirks providing "
"info on panel_orientation for systems where this cannot be probed from the "
"hard-/firm-ware. To avoid false-positive this function takes the panel "
"resolution as argument and checks that against the resolution expected by "
"the quirk-table entry."
msgstr ""

#: ../../../gpu/drm-kms-helpers:221:
#: drivers/gpu/drm/drm_panel_orientation_quirks.c:549
msgid ""
"Note this function is also used outside of the drm-subsys, by for example "
"the efifb code. Because of this this function gets compiled into its own "
"kernel-module when built as a module."
msgstr ""

#: ../../../gpu/drm-kms-helpers:221:
#: drivers/gpu/drm/drm_panel_orientation_quirks.c:554
msgid ""
"A DRM_MODE_PANEL_ORIENTATION_* value if there is a quirk for this system, or "
"DRM_MODE_PANEL_ORIENTATION_UNKNOWN if there is no quirk."
msgstr ""

#: ../../../gpu/drm-kms-helpers:224:
#: drivers/gpu/drm/drm_panel_backlight_quirks.c:60
msgid "Get minimum supported brightness level for a panel."
msgstr ""

#: ../../../gpu/drm-kms-helpers:224:
#: drivers/gpu/drm/drm_panel_backlight_quirks.c:66
msgid "``const struct drm_edid *edid``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:224:
#: drivers/gpu/drm/drm_panel_backlight_quirks.c:61
msgid "EDID of the panel to check"
msgstr ""

#: ../../../gpu/drm-kms-helpers:224:
#: drivers/gpu/drm/drm_panel_backlight_quirks.c:62
msgid ""
"This function checks for platform specific (e.g. DMI based) quirks providing "
"info on the minimum backlight brightness for systems where this cannot be "
"probed correctly from the hard-/firm-ware."
msgstr ""

#: ../../../gpu/drm-kms-helpers:224:
#: drivers/gpu/drm/drm_panel_backlight_quirks.c:67
msgid ""
"A negative error value or an override value in the range [0, 255] "
"representing 0-100% to be scaled to the drivers target range."
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:228
msgid "Panel Self Refresh Helper Reference"
msgstr ""

#: ../../../gpu/drm-kms-helpers:230:
#: drivers/gpu/drm/drm_self_refresh_helper.c:25
msgid ""
"This helper library provides an easy way for drivers to leverage the atomic "
"framework to implement panel self refresh (SR) support. Drivers are "
"responsible for initializing and cleaning up the SR helpers on load/unload "
"(see :c:type:`drm_self_refresh_helper_init`/:c:type:"
"`drm_self_refresh_helper_cleanup`). The connector is responsible for "
"setting :c:type:`drm_connector_state.self_refresh_aware "
"<drm_connector_state>` to true at runtime if it is SR-aware (meaning it "
"knows how to initiate self refresh on the panel)."
msgstr ""

#: ../../../gpu/drm-kms-helpers:230:
#: drivers/gpu/drm/drm_self_refresh_helper.c:33
msgid ""
"Once a crtc has enabled SR using :c:type:`drm_self_refresh_helper_init`, the "
"helpers will monitor activity and call back into the driver to enable/"
"disable SR as appropriate. The best way to think about this is that it's a "
"DPMS on/off request with :c:type:`drm_crtc_state.self_refresh_active "
"<drm_crtc_state>` set in crtc state that tells you to disable/enable SR on "
"the panel instead of power-cycling it."
msgstr ""

#: ../../../gpu/drm-kms-helpers:230:
#: drivers/gpu/drm/drm_self_refresh_helper.c:39
msgid ""
"During SR, drivers may choose to fully disable their crtc/encoder/bridge "
"hardware (in which case no driver changes are necessary), or they can "
"inspect :c:type:`drm_crtc_state.self_refresh_active <drm_crtc_state>` if "
"they want to enter low power mode without full disable (in case full disable/"
"enable is too slow)."
msgstr ""

#: ../../../gpu/drm-kms-helpers:230:
#: drivers/gpu/drm/drm_self_refresh_helper.c:44
msgid ""
"SR will be deactivated if there are any atomic updates affecting the pipe "
"that is in SR mode. If a crtc is driving multiple connectors, all connectors "
"must be SR aware and all will enter/exit SR mode at the same time."
msgstr ""

#: ../../../gpu/drm-kms-helpers:230:
#: drivers/gpu/drm/drm_self_refresh_helper.c:48
msgid ""
"If the crtc and connector are SR aware, but the panel connected does not "
"support it (or is otherwise unable to enter SR), the driver should fail "
"atomic_check when :c:type:`drm_crtc_state.self_refresh_active "
"<drm_crtc_state>` is true."
msgstr ""

#: ../../../gpu/drm-kms-helpers:233:
#: drivers/gpu/drm/drm_self_refresh_helper.c:134
msgid "Updates a crtc's SR time averages"
msgstr ""

#: ../../../gpu/drm-kms-helpers:233:
#: drivers/gpu/drm/drm_self_refresh_helper.c:135
msgid "the state which has just been applied to hardware"
msgstr ""

#: ../../../gpu/drm-kms-helpers:233:
#: drivers/gpu/drm/drm_self_refresh_helper.c:137
msgid "``unsigned int commit_time_ms``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:233:
#: drivers/gpu/drm/drm_self_refresh_helper.c:136
msgid "the amount of time in ms that this commit took to complete"
msgstr ""

#: ../../../gpu/drm-kms-helpers:233:
#: drivers/gpu/drm/drm_self_refresh_helper.c:138
msgid "``unsigned int new_self_refresh_mask``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:233:
#: drivers/gpu/drm/drm_self_refresh_helper.c:137
msgid "bitmask of crtc's that have self_refresh_active in new state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:233:
#: drivers/gpu/drm/drm_self_refresh_helper.c:139
msgid ""
"Called after :c:type:`drm_mode_config_funcs.atomic_commit_tail "
"<drm_mode_config_funcs>`, this function will update the average entry/exit "
"self refresh times on self refresh transitions. These averages will be used "
"when calculating how long to delay before entering self refresh mode after "
"activity."
msgstr ""

#: ../../../gpu/drm-kms-helpers:233:
#: drivers/gpu/drm/drm_self_refresh_helper.c:176
msgid "Alters the atomic state for SR exit"
msgstr ""

#: ../../../gpu/drm-kms-helpers:233:
#: drivers/gpu/drm/drm_self_refresh_helper.c:177
msgid "the state currently being checked"
msgstr ""

#: ../../../gpu/drm-kms-helpers:233:
#: drivers/gpu/drm/drm_self_refresh_helper.c:178
msgid ""
"Called at the end of atomic check. This function checks the state for flags "
"incompatible with self refresh exit and changes them. This is a bit "
"disingenuous since userspace is expecting one thing and we're giving it "
"another. However in order to keep self refresh entirely hidden from "
"userspace, this is required."
msgstr ""

#: ../../../gpu/drm-kms-helpers:233:
#: drivers/gpu/drm/drm_self_refresh_helper.c:184
msgid ""
"At the end, we queue up the self refresh entry work so we can enter PSR "
"after the desired delay."
msgstr ""

#: ../../../gpu/drm-kms-helpers:233:
#: drivers/gpu/drm/drm_self_refresh_helper.c:228
msgid "Initializes self refresh helpers for a crtc"
msgstr ""

#: ../../../gpu/drm-kms-helpers:233:
#: drivers/gpu/drm/drm_self_refresh_helper.c:229
msgid "the crtc which supports self refresh supported displays"
msgstr ""

#: ../../../gpu/drm-kms-helpers:233:
#: drivers/gpu/drm/drm_self_refresh_helper.c:230
msgid "Returns zero if successful or -errno on failure"
msgstr ""

#: ../../../gpu/drm-kms-helpers:233:
#: drivers/gpu/drm/drm_self_refresh_helper.c:266
msgid "Cleans up self refresh helpers for a crtc"
msgstr ""

#: ../../../gpu/drm-kms-helpers:233:
#: drivers/gpu/drm/drm_self_refresh_helper.c:267
msgid "the crtc to cleanup"
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:237
msgid "HDMI Atomic State Helpers"
msgstr ""

#: ../../../gpu/drm-kms-helpers:242:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:17
msgid ""
"These functions contain an implementation of the HDMI specification in the "
"form of KMS helpers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:242:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:20
msgid ""
"It contains TMDS character rate computation, automatic selection of output "
"formats, infoframes generation, etc."
msgstr ""

#: ../../../gpu/drm-kms-helpers:242:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:26
msgid ""
"Drivers using the helpers will expose the various infoframes generated "
"according to the HDMI specification in debugfs."
msgstr ""

#: ../../../gpu/drm-kms-helpers:242:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:29
msgid ""
"Compliance can then be tested using ``edid-decode`` from the ``v4l-utils`` "
"project (https://git.linuxtv.org/v4l-utils.git/). A sample run would look "
"like:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:242:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:297
msgid "The helpers have unit testing and can be tested using kunit with:"
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:246 ../../../gpu/drm-kms-helpers.rst:306
msgid "Functions Reference"
msgstr ""

#: ../../../gpu/drm-kms-helpers:248:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:309
msgid "Initializes all HDMI **drm_connector_state** resources"
msgstr ""

#: ../../../gpu/drm-kms-helpers:248:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:312
#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4682
msgid "``struct drm_connector_state *new_conn_state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:248:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:311
msgid "connector state to reset"
msgstr ""

#: ../../../gpu/drm-kms-helpers:248:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:312
msgid ""
"Initializes all HDMI resources from a **drm_connector_state** without "
"actually allocating it. This is useful for HDMI drivers, in combination with "
"__drm_atomic_helper_connector_reset() or drm_atomic_helper_connector_reset()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:248:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:821
msgid "Helper to check HDMI connector atomic state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:248:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:824
msgid ""
"Provides a default connector state check handler for HDMI connectors. Checks "
"that a desired connector update is valid, and updates various fields of "
"derived state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:248:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:829
#: ../../../gpu/drm-kms-helpers:461: drivers/gpu/drm/drm_plane_helper.c:162
#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:446
msgid "Zero on success, or an errno code otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:248:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:874
msgid "Check if mode is valid for HDMI connector"
msgstr ""

#: ../../../gpu/drm-kms-helpers:248:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:875
msgid "DRM connector to validate the mode"
msgstr ""

#: ../../../gpu/drm-kms-helpers:248:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:876
msgid "Display mode to validate"
msgstr ""

#: ../../../gpu/drm-kms-helpers:248:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:877
msgid "Generic .mode_valid implementation for HDMI connectors."
msgstr ""

#: ../../../gpu/drm-kms-helpers:248:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:984
msgid "Update the Infoframes"
msgstr ""

#: ../../../gpu/drm-kms-helpers:248:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:985
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:1051
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:1088
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:1154
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:1169
msgid "A pointer to the HDMI connector"
msgstr ""

#: ../../../gpu/drm-kms-helpers:248:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:986
msgid "The HDMI connector state to generate the infoframe from"
msgstr ""

#: ../../../gpu/drm-kms-helpers:248:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:987
msgid ""
"This function is meant for HDMI connector drivers to write their infoframes. "
"It will typically be used in a **drm_connector_helper_funcs.atomic_enable** "
"implementation."
msgstr ""

#: ../../../gpu/drm-kms-helpers:248:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:1050
msgid "Update the Audio Infoframe"
msgstr ""

#: ../../../gpu/drm-kms-helpers:248:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:1053
#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:355
#: drivers/video/hdmi.c:466
msgid "``struct hdmi_audio_infoframe *frame``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:248:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:1052
msgid "A pointer to the audio infoframe to write"
msgstr ""

#: ../../../gpu/drm-kms-helpers:248:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:1053
msgid ""
"This function is meant for HDMI connector drivers to update their audio "
"infoframe. It will typically be used in one of the ALSA hooks (most likely "
"prepare)."
msgstr ""

#: ../../../gpu/drm-kms-helpers:248:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:1087
msgid "Stop sending the Audio Infoframe"
msgstr ""

#: ../../../gpu/drm-kms-helpers:248:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:1089
msgid ""
"This function is meant for HDMI connector drivers to stop sending their "
"audio infoframe. It will typically be used in one of the ALSA hooks (most "
"likely shutdown)."
msgstr ""

#: ../../../gpu/drm-kms-helpers:248:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:1153
msgid "Handle the hotplug event for the HDMI connector"
msgstr ""

#: ../../../gpu/drm-kms-helpers:248:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:1155
msgid "Connection status"
msgstr ""

#: ../../../gpu/drm-kms-helpers:248:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:1156
msgid ""
"This function should be called as a part of the .detect() / .detect_ctx() "
"callbacks for all status changes."
msgstr ""

#: ../../../gpu/drm-kms-helpers:248:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:1168
msgid "HDMI Connector implementation of the force callback"
msgstr ""

#: ../../../gpu/drm-kms-helpers:248:
#: drivers/gpu/drm/display/drm_hdmi_state_helper.c:1170
msgid ""
"This function implements the .force() callback for the HDMI connectors. It "
"can either be used directly as the callback or should be called from within "
"the .force() callback implementation to maintain the HDMI-specific "
"connector's data."
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:252
msgid "HDCP Helper Functions Reference"
msgstr ""

#: ../../../gpu/drm-kms-helpers:254:
#: drivers/gpu/drm/display/drm_hdcp_helper.c:259
msgid "Check the revoked status of the IDs"
msgstr ""

#: ../../../gpu/drm-kms-helpers:254:
#: drivers/gpu/drm/display/drm_hdcp_helper.c:265
msgid "``struct drm_device *drm_dev``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:254:
#: drivers/gpu/drm/display/drm_hdcp_helper.c:261
msgid "drm_device for which HDCP revocation check is requested"
msgstr ""

#: ../../../gpu/drm-kms-helpers:254:
#: drivers/gpu/drm/display/drm_hdcp_helper.c:263
msgid "``u8 *ksvs``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:254:
#: drivers/gpu/drm/display/drm_hdcp_helper.c:262
msgid "List of KSVs (HDCP receiver IDs)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:254:
#: drivers/gpu/drm/display/drm_hdcp_helper.c:264
msgid "``u32 ksv_count``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:254:
#: drivers/gpu/drm/display/drm_hdcp_helper.c:263
msgid "KSV count passed in through **ksvs**"
msgstr ""

#: ../../../gpu/drm-kms-helpers:254:
#: drivers/gpu/drm/display/drm_hdcp_helper.c:264
msgid ""
"This function reads the HDCP System renewability Message(SRM Table) from "
"userspace as a firmware and parses it for the revoked HDCP KSVs(Receiver "
"IDs) detected by DCP LLC. Once the revoked KSVs are known, revoked state of "
"the KSVs in the list passed in by display drivers are decided and response "
"is sent."
msgstr ""

#: ../../../gpu/drm-kms-helpers:254:
#: drivers/gpu/drm/display/drm_hdcp_helper.c:270
msgid "SRM should be presented in the name of \"display_hdcp_srm.bin\"."
msgstr ""

#: ../../../gpu/drm-kms-helpers:254:
#: drivers/gpu/drm/display/drm_hdcp_helper.c:272
msgid ""
"Format of the SRM table, that userspace needs to write into the binary file, "
"is defined at: 1. Renewability chapter on 55th page of HDCP 1.4 "
"specification https://www.digital-cp.com/sites/default/files/specifications/"
"HDCP``20Specification````20Rev1_4_Secure``.pdf 2. Renewability chapter on "
"63rd page of HDCP 2.2 specification https://www.digital-cp.com/sites/default/"
"files/specifications/"
"HDCP``20on````20HDMI````20Specification````20Rev2_2_Final1``.pdf"
msgstr ""

#: ../../../gpu/drm-kms-helpers:254:
#: drivers/gpu/drm/display/drm_hdcp_helper.c:280
msgid "Count of the revoked KSVs or -ve error number in case of the failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:254:
#: drivers/gpu/drm/display/drm_hdcp_helper.c:326
msgid "attach content protection property"
msgstr ""

#: ../../../gpu/drm-kms-helpers:254:
#: drivers/gpu/drm/display/drm_hdcp_helper.c:329
msgid "connector to attach CP property on."
msgstr ""

#: ../../../gpu/drm-kms-helpers:254:
#: drivers/gpu/drm/display/drm_hdcp_helper.c:331
msgid "``bool hdcp_content_type``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:254:
#: drivers/gpu/drm/display/drm_hdcp_helper.c:330
msgid "is HDCP Content Type property needed for connector"
msgstr ""

#: ../../../gpu/drm-kms-helpers:254:
#: drivers/gpu/drm/display/drm_hdcp_helper.c:331
msgid ""
"This is used to add support for content protection on select connectors. "
"Content Protection is intentionally vague to allow for different underlying "
"technologies, however it is most implemented by HDCP."
msgstr ""

#: ../../../gpu/drm-kms-helpers:254:
#: drivers/gpu/drm/display/drm_hdcp_helper.c:335
msgid ""
"When hdcp_content_type is true enum property called HDCP Content Type is "
"created (if it is not already) and attached to the connector."
msgstr ""

#: ../../../gpu/drm-kms-helpers:254:
#: drivers/gpu/drm/display/drm_hdcp_helper.c:338
msgid ""
"This property is used for sending the protected content's stream type from "
"userspace to kernel on selected connectors. Protected content provider will "
"decide their type of their content and declare the same to kernel."
msgstr ""

#: ../../../gpu/drm-kms-helpers:254:
#: drivers/gpu/drm/display/drm_hdcp_helper.c:342
msgid ""
"Content type will be used during the HDCP 2.2 authentication. Content type "
"will be set to :c:type:`drm_connector_state.hdcp_content_type "
"<drm_connector_state>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:254:
#: drivers/gpu/drm/display/drm_hdcp_helper.c:345
msgid ""
"The content protection will be set to :c:type:`drm_connector_state."
"content_protection <drm_connector_state>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:254:
#: drivers/gpu/drm/display/drm_hdcp_helper.c:347
msgid ""
"When kernel triggered content protection state change like DESIRED->ENABLED "
"and ENABLED->DESIRED, will use drm_hdcp_update_content_protection() to "
"update the content protection state of a connector."
msgstr ""

#: ../../../gpu/drm-kms-helpers:254:
#: drivers/gpu/drm/display/drm_hdcp_helper.c:352
#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7132
msgid "Zero on success, negative errno on failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:254:
#: drivers/gpu/drm/display/drm_hdcp_helper.c:394
msgid "Updates the content protection state of a connector"
msgstr ""

#: ../../../gpu/drm-kms-helpers:254:
#: drivers/gpu/drm/display/drm_hdcp_helper.c:397
msgid "drm_connector on which content protection state needs an update"
msgstr ""

#: ../../../gpu/drm-kms-helpers:254:
#: drivers/gpu/drm/display/drm_hdcp_helper.c:399
msgid "``u64 val``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:254:
#: drivers/gpu/drm/display/drm_hdcp_helper.c:398
msgid "New state of the content protection property"
msgstr ""

#: ../../../gpu/drm-kms-helpers:254:
#: drivers/gpu/drm/display/drm_hdcp_helper.c:399
msgid ""
"This function can be used by display drivers, to update the kernel triggered "
"content protection state changes of a drm_connector such as DESIRED->ENABLED "
"and ENABLED->DESIRED. No uevent for DESIRED->UNDESIRED or ENABLED-"
">UNDESIRED, as userspace is triggering such state change and kernel performs "
"it without fail.This function update the new state of the property into the "
"connector's state and generate an uevent to notify the userspace."
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:258
msgid "Display Port Helper Functions Reference"
msgstr ""

#: ../../../gpu/drm-kms-helpers:260: drivers/gpu/drm/display/drm_dp_helper.c:67
msgid ""
"These functions contain some common logic and helpers at various abstraction "
"levels to deal with Display Port sink devices and related things like DP aux "
"channel transfers, EDID reading over DP aux channels, decoding certain DPCD "
"blocks, ..."
msgstr ""

#: ../../../gpu/drm-kms-helpers:260:
#: drivers/gpu/drm/display/drm_dp_helper.c:570
msgid ""
"The DisplayPort AUX channel is an abstraction to allow generic, driver- "
"independent access to AUX functionality. Drivers can take advantage of this "
"by filling in the fields of the drm_dp_aux structure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:260:
#: drivers/gpu/drm/display/drm_dp_helper.c:574
msgid ""
"Transactions are described using a hardware-independent drm_dp_aux_msg "
"structure, which is passed into a driver's .transfer() implementation. Both "
"native and I2C-over-AUX transactions are supported."
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1708
#: include/drm/display/drm_dp.h:1728
msgid "DP secondary data packet header"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1709
msgid "``HB0``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1710
msgid "Secondary Data Packet ID"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1710
msgid "``HB1``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1711
msgid "Secondary Data Packet Type"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1711
msgid "``HB2``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1712
msgid "Secondary Data Packet Specific header, Byte 0"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1712
msgid "``HB3``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1713
msgid "Secondary Data packet Specific header, Byte 1"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1726
msgid "DP secondary data packet"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1727
msgid "``sdp_header``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1728
msgid "``db``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1729
msgid ""
"DP secondaray data packet data blocks VSC SDP Payload for PSR db[0]: Stereo "
"Interface db[1]: 0 - PSR State; 1 - Update RFB; 2 - CRC Valid db[2]: CRC "
"value bits 7:0 of the R or Cr component db[3]: CRC value bits 15:8 of the R "
"or Cr component db[4]: CRC value bits 7:0 of the G or Y component db[5]: CRC "
"value bits 15:8 of the G or Y component db[6]: CRC value bits 7:0 of the B "
"or Cb component db[7]: CRC value bits 15:8 of the B or Cb component db[8] - "
"db[31]: Reserved VSC SDP Payload for Pixel Encoding/Colorimetry Format db[0] "
"- db[15]: Reserved db[16]: Pixel Encoding and Colorimetry Formats db[17]: "
"Dynamic Range and Component Bit Depth db[18]: Content Type db[19] - db[31]: "
"Reserved"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1756
msgid "drm DP Pixel encoding formats"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1762
msgid "``DP_PIXELFORMAT_RGB``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1763
msgid "RGB pixel encoding format"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1765
msgid "``DP_PIXELFORMAT_YUV444``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1766
msgid "YCbCr 4:4:4 pixel encoding format"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1768
msgid "``DP_PIXELFORMAT_YUV422``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1769
msgid "YCbCr 4:2:2 pixel encoding format"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1771
msgid "``DP_PIXELFORMAT_YUV420``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1772
msgid "YCbCr 4:2:0 pixel encoding format"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1774
msgid "``DP_PIXELFORMAT_Y_ONLY``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1775
msgid "Y Only pixel encoding format"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1777
msgid "``DP_PIXELFORMAT_RAW``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1778
msgid "RAW pixel encoding format"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1780
msgid "``DP_PIXELFORMAT_RESERVED``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1781
msgid "Reserved pixel encoding format"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1757
msgid ""
"This enum is used to indicate DP VSC SDP Pixel encoding formats. It is based "
"on DP 1.4 spec [Table 2-117: VSC SDP Payload for DB16 through DB18]"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1781
msgid "drm DP Colorimetry formats"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1787
msgid "``DP_COLORIMETRY_DEFAULT``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1788
msgid "sRGB (IEC 61966-2-1) or ITU-R BT.601 colorimetry format"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1791
msgid "``DP_COLORIMETRY_RGB_WIDE_FIXED``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1792
msgid "RGB wide gamut fixed point colorimetry format"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1794
msgid "``DP_COLORIMETRY_BT709_YCC``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1795
msgid "ITU-R BT.709 colorimetry format"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1797
msgid "``DP_COLORIMETRY_RGB_WIDE_FLOAT``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1798
msgid ""
"RGB wide gamut floating point (scRGB (IEC 61966-2-2)) colorimetry format"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1801
msgid "``DP_COLORIMETRY_XVYCC_601``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1802
msgid "xvYCC601 colorimetry format"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1804
msgid "``DP_COLORIMETRY_OPRGB``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1805
msgid "OpRGB colorimetry format"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1807
msgid "``DP_COLORIMETRY_XVYCC_709``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1808
msgid "xvYCC709 colorimetry format"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1810
msgid "``DP_COLORIMETRY_DCI_P3_RGB``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1811
msgid "DCI-P3 (SMPTE RP 431-2) colorimetry format"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1813
msgid "``DP_COLORIMETRY_SYCC_601``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1814
msgid "sYCC601 colorimetry format"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1816
msgid "``DP_COLORIMETRY_RGB_CUSTOM``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1817
msgid "RGB Custom Color Profile colorimetry format"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1819
msgid "``DP_COLORIMETRY_OPYCC_601``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1820
msgid "opYCC601 colorimetry format"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1822
msgid "``DP_COLORIMETRY_BT2020_RGB``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1823
msgid "ITU-R BT.2020 R' G' B' colorimetry format"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1825
msgid "``DP_COLORIMETRY_BT2020_CYCC``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1826
msgid "ITU-R BT.2020 Y'c C'bc C'rc colorimetry format"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1828
msgid "``DP_COLORIMETRY_BT2020_YCC``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1829
msgid "ITU-R BT.2020 Y' C'b C'r colorimetry format"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1782
msgid ""
"This enum is used to indicate DP VSC SDP Colorimetry formats. It is based on "
"DP 1.4 spec [Table 2-117: VSC SDP Payload for DB16 through DB18] and a name "
"of enum member follows enum drm_colorimetry definition."
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1822
msgid "drm DP Dynamic Range"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1828
msgid "``DP_DYNAMIC_RANGE_VESA``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1829
msgid "VESA range"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1831
msgid "``DP_DYNAMIC_RANGE_CTA``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1832
msgid "CTA range"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1823
msgid ""
"This enum is used to indicate DP VSC SDP Dynamic Range. It is based on DP "
"1.4 spec [Table 2-117: VSC SDP Payload for DB16 through DB18]"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1837
msgid "drm DP Content Type"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1843
msgid "``DP_CONTENT_TYPE_NOT_DEFINED``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1844
msgid "Not defined type"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1846
msgid "``DP_CONTENT_TYPE_GRAPHICS``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1847
msgid "Graphics type"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1849
msgid "``DP_CONTENT_TYPE_PHOTO``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1850
msgid "Photo type"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1852
msgid "``DP_CONTENT_TYPE_VIDEO``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1853
msgid "Video type"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1855
msgid "``DP_CONTENT_TYPE_GAME``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1856
msgid "Game type"
msgstr ""

#: ../../../gpu/drm-kms-helpers:263: include/drm/display/drm_dp.h:1838
msgid ""
"This enum is used to indicate DP VSC SDP Content Types. It is based on DP "
"1.4 spec [Table 2-117: VSC SDP Payload for DB16 through DB18] CTA-861-G "
"defines content types and expected processing by a sink device"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:75
msgid "drm DP VSC SDP"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:81
#: include/drm/display/drm_dp_helper.h:108
msgid "``sdp_type``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:82
msgid "secondary-data packet type"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:82
#: include/drm/display/drm_dp_helper.h:109
msgid "``revision``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:83
msgid "revision number"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:83
#: include/drm/display/drm_dp_helper.h:110
msgid "``length``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:84
msgid "number of valid data bytes"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:84
msgid "``pixelformat``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:85
msgid "pixel encoding format"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:85
msgid "``colorimetry``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:86
msgid "colorimetry format"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:86
msgid "``bpc``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:87
msgid "bit per color"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:87
msgid "``dynamic_range``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:88
msgid "dynamic range information"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:88
msgid "``content_type``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:89
msgid ""
"CTA-861-G defines content types and expected processing by a sink device"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:76
msgid ""
"This structure represents a DP VSC SDP of drm It is based on DP 1.4 spec "
"[Table 2-116: VSC SDP Header Bytes] and [Table 2-117: VSC SDP Payload for "
"DB16 through DB18]"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:102
msgid "drm DP Adaptive Sync SDP"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:109
msgid "Secondary-data packet type"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:110
msgid "Revision Number"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:111
msgid "Number of valid data bytes"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:111
msgid "``vtotal``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:112
msgid "Minimum Vertical Vtotal"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:112
msgid "``target_rr``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:113
msgid "Target Refresh"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:113
msgid "``duration_incr_ms``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:114
msgid "Successive frame duration increase"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:114
msgid "``duration_decr_ms``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:115
msgid "Successive frame duration decrease"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:115
msgid "``target_rr_divider``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:116
msgid "Target refresh rate divider"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:116
#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:100
msgid "``mode``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:117
msgid "Adaptive Sync Operation Mode"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:103
msgid ""
"This structure represents a DP AS SDP of drm It is based on DP 2.1 spec "
"[Table 2-126:  Adaptive-Sync SDP Header Bytes] and [Table 2-127: Adaptive-"
"Sync SDP Payload for DB0 through DB8]"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:231
msgid "check if sink supports DSC with given output format"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:237
#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2674
#: drivers/gpu/drm/display/drm_dp_helper.c:2701
#: drivers/gpu/drm/display/drm_dp_helper.c:2760
#: drivers/gpu/drm/display/drm_dp_helper.c:2804
msgid "``const u8 dsc_dpcd[DP_DSC_RECEIVER_CAP_SIZE]``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:232
msgid "DSC-capability DPCDs of the sink"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:234
msgid "``u8 output_format``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:233
msgid "output_format which is to be checked"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:234
msgid ""
"Returns true if the sink supports DSC with the given output_format, false "
"otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:278
msgid "Check an eDP DPCD for VESA backlight support"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:284
#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4288
msgid "``const u8 edp_dpcd[EDP_DISPLAY_CTL_CAP_SIZE]``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:279
msgid "The DPCD to check"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:280
msgid ""
"Note that currently this function will return ``false`` for panels which "
"support various DPCD backlight features but which require the brightness be "
"set through PWM, and don't support setting the brightness level via the DPCD."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:285
msgid ""
"``True`` if **edp_dpcd** indicates that VESA backlight controls are "
"supported, ``false`` otherwise"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:295
msgid "Determine if a link rate is UHBR"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:301
#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3588
msgid "``int link_rate``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:296
#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3583
msgid "link rate in 10kbits/s units"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:297
msgid "Determine if the provided link rate is an UHBR rate."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:300
msgid "``True`` if **link_rate** is an UHBR rate."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:312
msgid "DisplayPort AUX channel transaction"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:313
msgid "``address``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:314
msgid "address of the (first) register to access"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:314
msgid "``request``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:315
msgid "contains the type of transaction (see DP_AUX_* macros)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:315
msgid "``reply``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:316
msgid "upon completion, contains the reply type of the transaction"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:317
msgid "pointer to a transmission or reception buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:317
#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:51
msgid "``size``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:318
msgid "size of **buffer**"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:332
msgid "DisplayPort CEC-Tunneling-over-AUX"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:334
msgid "mutex protecting this struct"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:334
msgid "``adap``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:335
msgid "the CEC adapter for CEC-Tunneling-over-AUX support."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:336
msgid "the connector this CEC adapter is associated with"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:336
msgid "``unregister_work``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:337
msgid "unregister the CEC adapter"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:346
#: include/drm/display/drm_dp_helper.h:601
#: include/drm/display/drm_dp_helper.h:617
#: include/drm/display/drm_dp_helper.h:633
#: include/drm/display/drm_dp_helper.h:647 ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:697
#: drivers/gpu/drm/display/drm_dp_helper.c:795
#: drivers/gpu/drm/display/drm_dp_helper.c:810
#: drivers/gpu/drm/display/drm_dp_helper.c:853
#: drivers/gpu/drm/display/drm_dp_helper.c:891
#: drivers/gpu/drm/display/drm_dp_helper.c:934
#: drivers/gpu/drm/display/drm_dp_helper.c:991
#: drivers/gpu/drm/display/drm_dp_helper.c:1005
#: drivers/gpu/drm/display/drm_dp_helper.c:1111
#: drivers/gpu/drm/display/drm_dp_helper.c:1221
#: drivers/gpu/drm/display/drm_dp_helper.c:1254
#: drivers/gpu/drm/display/drm_dp_helper.c:1641
#: drivers/gpu/drm/display/drm_dp_helper.c:1658
#: drivers/gpu/drm/display/drm_dp_helper.c:2320
#: drivers/gpu/drm/display/drm_dp_helper.c:2333
#: drivers/gpu/drm/display/drm_dp_helper.c:2364
#: drivers/gpu/drm/display/drm_dp_helper.c:2420
#: drivers/gpu/drm/display/drm_dp_helper.c:2464
#: drivers/gpu/drm/display/drm_dp_helper.c:2492
#: drivers/gpu/drm/display/drm_dp_helper.c:2611
#: drivers/gpu/drm/display/drm_dp_helper.c:2641
#: drivers/gpu/drm/display/drm_dp_helper.c:2861
#: drivers/gpu/drm/display/drm_dp_helper.c:2881
#: drivers/gpu/drm/display/drm_dp_helper.c:2950
#: drivers/gpu/drm/display/drm_dp_helper.c:2970
#: drivers/gpu/drm/display/drm_dp_helper.c:3057
#: drivers/gpu/drm/display/drm_dp_helper.c:3107
#: drivers/gpu/drm/display/drm_dp_helper.c:3326
#: drivers/gpu/drm/display/drm_dp_helper.c:3351
#: drivers/gpu/drm/display/drm_dp_helper.c:3487
#: drivers/gpu/drm/display/drm_dp_helper.c:3506
#: drivers/gpu/drm/display/drm_dp_helper.c:3528
#: drivers/gpu/drm/display/drm_dp_helper.c:3585
#: drivers/gpu/drm/display/drm_dp_helper.c:3615
#: drivers/gpu/drm/display/drm_dp_helper.c:3627
#: drivers/gpu/drm/display/drm_dp_helper.c:3651
#: drivers/gpu/drm/display/drm_dp_helper.c:3670
#: drivers/gpu/drm/display/drm_dp_helper.c:3701
#: drivers/gpu/drm/display/drm_dp_helper.c:3866
#: drivers/gpu/drm/display/drm_dp_helper.c:3879
#: ../../../gpu/drm-kms-helpers:278: drivers/gpu/drm/display/drm_dp_cec.c:238
#: drivers/gpu/drm/display/drm_dp_cec.c:428
#: drivers/gpu/drm/display/drm_dp_cec.c:450
msgid "DisplayPort AUX channel"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:360
#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:171
#: ../../../gpu/drm-kms-helpers:431: include/drm/drm_flip_work.h:55
msgid "``name``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:361
msgid "user-visible name of this AUX channel and the I2C-over-AUX adapter."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:364
msgid ""
"It's also used to specify the name of the I2C adapter. If set to ``NULL``, "
"dev_name() of **dev** will be used."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:370
msgid "I2C adapter that can be used for I2C-over-AUX communication"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:376
msgid "pointer to struct device that is the parent for this AUX channel."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:381
msgid "``drm_dev``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:382
msgid ""
"pointer to the :c:type:`drm_device` that owns this AUX channel. Beware, this "
"may be ``NULL`` before drm_dp_aux_register() has been called."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:386
msgid ""
"It should be set to the :c:type:`drm_device` that will be using this AUX "
"channel as early as possible. For many graphics drivers this should happen "
"before drm_dp_aux_init(), however it's perfectly fine to set this field "
"later so long as it's assigned before calling drm_dp_aux_register()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:395
msgid "backpointer to the crtc that is currently using this AUX channel"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:400
msgid "``hw_mutex``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:401
msgid "internal mutex used for locking transfers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:403
msgid ""
"Note that if the underlying hardware is shared among multiple channels, the "
"driver needs to do additional locking to prevent concurrent access."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:409
msgid "``crc_work``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:410
msgid "worker that captures CRCs for each frame"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:414
msgid "``crc_count``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:415
msgid "counter of captured frame CRCs"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:419
#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:71
msgid "``transfer``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:420
msgid "transfers a message representing a single AUX transaction."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:423
msgid ""
"This is a hardware-specific implementation of how transactions are executed "
"that the drivers must provide."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:426
msgid ""
"A pointer to a :c:type:`drm_dp_aux_msg` structure describing the transaction "
"is passed into this function. Upon success, the implementation should return "
"the number of payload bytes that were transferred, or a negative error-code "
"on failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:431
msgid ""
"Helpers will propagate these errors, with the exception of the ``-EBUSY`` "
"error, which causes a transaction to be retried. On a short, helpers will "
"return ``-EPROTO`` to make it simpler to check for failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:436
msgid ""
"The **transfer\\(\\)** function must only modify the reply field of the :c:"
"type:`drm_dp_aux_msg` structure. The retry logic and i2c helpers assume this "
"is the case."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:440
msgid ""
"Also note that this callback can be called no matter the state **dev** is in "
"and also no matter what state the panel is in. It's expected:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:444
msgid ""
"If the **dev** providing the AUX bus is currently unpowered then it will "
"power itself up for the transfer."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:447
msgid ""
"If we're on eDP (using a drm_panel) and the panel is not in a state where it "
"can respond (it's not powered or it's in a low power state) then this "
"function may return an error, but not crash. It's up to the caller of this "
"code to make sure that the panel is powered on if getting an error back is "
"not OK. If a drm_panel driver is initiating a DP AUX transfer it may power "
"itself up however it wants. All other code should ensure that the "
"pre_enable() bridge chain (which eventually calls the drm_panel prepare "
"function) has powered the panel."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:460
msgid "``wait_hpd_asserted``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:461
msgid "wait for HPD to be asserted"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:463
msgid ""
"This is mainly useful for eDP panels drivers to wait for an eDP panel to "
"finish powering on. It is optional for DP AUX controllers to implement this "
"function. It is required for DP AUX endpoints (panel drivers) to call this "
"function after powering up but before doing AUX transfers unless the DP AUX "
"endpoint driver knows that we're not using the AUX controller's HPD. One "
"example of the panel driver not needing to call this is if HPD is hooked up "
"to a GPIO that the panel driver can read directly."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:472
msgid ""
"If a DP AUX controller does not implement this function then it may still "
"support eDP panels that use the AUX controller's built-in HPD signal by "
"implementing a long wait for HPD in the transfer() callback, though this is "
"deprecated."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:477
msgid ""
"This function will efficiently wait for the HPD signal to be asserted. The "
"`wait_us` parameter that is passed in says that we know that the HPD signal "
"is expected to be asserted within `wait_us` microseconds. This function "
"could wait for longer than `wait_us` if the logic in the DP controller has a "
"long debouncing time. The important thing is that if this function returns "
"success that the DP controller is ready to send AUX transactions."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:485
msgid ""
"This function returns 0 if HPD was asserted or -ETIMEDOUT if time expired "
"and HPD wasn't asserted. This function should not print timeout errors to "
"the log."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:489
msgid ""
"The semantics of this function are designed to match the "
"readx_poll_timeout() function. That means a `wait_us` of 0 means to wait "
"forever. Like readx_poll_timeout(), this function may sleep."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:493
msgid ""
"NOTE: this function specifically reports the state of the HPD pin that's "
"associated with the DP AUX channel. This is different from the HPD concept "
"in much of the rest of DRM which is more about physical presence of a "
"display. For eDP, for instance, a display is assumed always present even if "
"the HPD pin is deasserted."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:501
msgid "``i2c_nack_count``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:502
msgid "Counts I2C NACKs, used for DP validation."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:505
msgid "``i2c_defer_count``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:506
msgid "Counts I2C DEFERs, used for DP validation."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:509
msgid "``cec``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:510
msgid "struct containing fields used for CEC-Tunneling-over-AUX."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:513
msgid "``is_remote``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:514
msgid "Is this AUX CH actually using sideband messaging."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:518
msgid "``powered_down``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:519
msgid "If true then the remote endpoint is powered down."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:523
msgid "``no_zero_sized``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:524
msgid "If the hw can't use zero sized transfers (NVIDIA)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:528
msgid "``dpcd_probe_disabled``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:529
msgid "If probing before a DPCD access is disabled."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:347
msgid ""
"An AUX channel can also be used to transport I2C messages to a sink. A "
"typical application of that is to access an EDID that's present in the sink "
"device. The **transfer\\(\\)** function can also be used to execute such "
"transactions. The drm_dp_aux_register() function registers an I2C adapter "
"that can be passed to drm_probe_ddc(). Upon removal, drivers should call "
"drm_dp_aux_unregister() to remove the I2C adapter. The I2C adapter uses long "
"transfers by default; if a partial response is received, the adapter will "
"drop down to the size given by the partial response for this transaction "
"only."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:542
#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:724
msgid "read a series of bytes from the DPCD"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:548
#: include/drm/display/drm_dp_helper.h:577
#: include/drm/display/drm_dp_helper.h:606
#: include/drm/display/drm_dp_helper.h:622
#: include/drm/display/drm_dp_helper.h:638
#: include/drm/display/drm_dp_helper.h:652 ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:470
#: drivers/gpu/drm/display/drm_dp_helper.c:654
#: drivers/gpu/drm/display/drm_dp_helper.c:679
#: drivers/gpu/drm/display/drm_dp_helper.c:702
#: drivers/gpu/drm/display/drm_dp_helper.c:730
#: drivers/gpu/drm/display/drm_dp_helper.c:768
#: drivers/gpu/drm/display/drm_dp_helper.c:800
#: drivers/gpu/drm/display/drm_dp_helper.c:815
#: drivers/gpu/drm/display/drm_dp_helper.c:858
#: drivers/gpu/drm/display/drm_dp_helper.c:896
#: drivers/gpu/drm/display/drm_dp_helper.c:939
#: drivers/gpu/drm/display/drm_dp_helper.c:996
#: drivers/gpu/drm/display/drm_dp_helper.c:1010
#: drivers/gpu/drm/display/drm_dp_helper.c:1116
#: drivers/gpu/drm/display/drm_dp_helper.c:1225
#: drivers/gpu/drm/display/drm_dp_helper.c:1259
#: drivers/gpu/drm/display/drm_dp_helper.c:1646
#: drivers/gpu/drm/display/drm_dp_helper.c:1659
#: drivers/gpu/drm/display/drm_dp_helper.c:1850
#: drivers/gpu/drm/display/drm_dp_helper.c:2325
#: drivers/gpu/drm/display/drm_dp_helper.c:2338
#: drivers/gpu/drm/display/drm_dp_helper.c:2369
#: drivers/gpu/drm/display/drm_dp_helper.c:2425
#: drivers/gpu/drm/display/drm_dp_helper.c:2469
#: drivers/gpu/drm/display/drm_dp_helper.c:2497
#: drivers/gpu/drm/display/drm_dp_helper.c:2616
#: drivers/gpu/drm/display/drm_dp_helper.c:2646
#: drivers/gpu/drm/display/drm_dp_helper.c:2866
#: drivers/gpu/drm/display/drm_dp_helper.c:2886
#: drivers/gpu/drm/display/drm_dp_helper.c:2955
#: drivers/gpu/drm/display/drm_dp_helper.c:2975
#: drivers/gpu/drm/display/drm_dp_helper.c:3062
#: drivers/gpu/drm/display/drm_dp_helper.c:3112
#: drivers/gpu/drm/display/drm_dp_helper.c:3331
#: drivers/gpu/drm/display/drm_dp_helper.c:3356
#: drivers/gpu/drm/display/drm_dp_helper.c:3492
#: drivers/gpu/drm/display/drm_dp_helper.c:3511
#: drivers/gpu/drm/display/drm_dp_helper.c:3533
#: drivers/gpu/drm/display/drm_dp_helper.c:3590
#: drivers/gpu/drm/display/drm_dp_helper.c:3620
#: drivers/gpu/drm/display/drm_dp_helper.c:3632
#: drivers/gpu/drm/display/drm_dp_helper.c:3656
#: drivers/gpu/drm/display/drm_dp_helper.c:3675
#: drivers/gpu/drm/display/drm_dp_helper.c:3705
#: drivers/gpu/drm/display/drm_dp_helper.c:3870
#: drivers/gpu/drm/display/drm_dp_helper.c:3883
#: drivers/gpu/drm/display/drm_dp_helper.c:3955
#: drivers/gpu/drm/display/drm_dp_helper.c:4035
#: drivers/gpu/drm/display/drm_dp_helper.c:4103
#: drivers/gpu/drm/display/drm_dp_helper.c:4287
#: drivers/gpu/drm/display/drm_dp_helper.c:4388
#: ../../../gpu/drm-kms-helpers:278: drivers/gpu/drm/display/drm_dp_cec.c:243
#: drivers/gpu/drm/display/drm_dp_cec.c:433
#: drivers/gpu/drm/display/drm_dp_cec.c:455 ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3615
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5699
msgid "``struct drm_dp_aux *aux``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:543
#: include/drm/display/drm_dp_helper.h:572 ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:725
#: drivers/gpu/drm/display/drm_dp_helper.c:763
msgid "DisplayPort AUX channel (SST or MST)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:545
#: include/drm/display/drm_dp_helper.h:574
#: include/drm/display/drm_dp_helper.h:603
#: include/drm/display/drm_dp_helper.h:619
#: include/drm/display/drm_dp_helper.h:635
#: include/drm/display/drm_dp_helper.h:649 ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:651
#: drivers/gpu/drm/display/drm_dp_helper.c:727
#: drivers/gpu/drm/display/drm_dp_helper.c:765
msgid "``unsigned int offset``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:544
#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:726
msgid "address of the (first) register to read"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:546
#: include/drm/display/drm_dp_helper.h:575 ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:728
#: drivers/gpu/drm/display/drm_dp_helper.c:766
#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:55
#: ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:63
#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:100
#: drivers/video/hdmi.c:189 drivers/video/hdmi.c:271 drivers/video/hdmi.c:323
#: drivers/video/hdmi.c:417 drivers/video/hdmi.c:464 drivers/video/hdmi.c:601
#: drivers/video/hdmi.c:662 drivers/video/hdmi.c:745 drivers/video/hdmi.c:816
#: drivers/video/hdmi.c:901 drivers/video/hdmi.c:951
msgid "``void *buffer``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:545
#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:727
msgid "buffer to store the register values"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:547
#: include/drm/display/drm_dp_helper.h:576 ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:729
#: drivers/gpu/drm/display/drm_dp_helper.c:767
#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:56
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:120
#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:737
#: drivers/gpu/drm/drm_mipi_dsi.c:780 drivers/gpu/drm/drm_mipi_dsi.c:808
#: drivers/gpu/drm/drm_mipi_dsi.c:838 ../../../gpu/drm-kms-helpers:378:
#: drivers/gpu/drm/drm_edid.c:2516 ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:64
#: drivers/gpu/drm/display/drm_scdc_helper.c:104
#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:101
#: drivers/video/hdmi.c:190 drivers/video/hdmi.c:272 drivers/video/hdmi.c:324
#: drivers/video/hdmi.c:418 drivers/video/hdmi.c:465 drivers/video/hdmi.c:602
#: drivers/video/hdmi.c:663 drivers/video/hdmi.c:746 drivers/video/hdmi.c:817
#: drivers/video/hdmi.c:902 drivers/video/hdmi.c:952 drivers/video/hdmi.c:1792
#: drivers/video/hdmi.c:1881
msgid "``size_t size``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:546
#: include/drm/display/drm_dp_helper.h:575 ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:728
#: drivers/gpu/drm/display/drm_dp_helper.c:766
msgid "number of bytes in **buffer**"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:547
#: include/drm/display/drm_dp_helper.h:576
msgid ""
"Returns zero (0) on success, or a negative error code on failure. -EIO is "
"returned if the request was NAKed by the sink or if the retry count was "
"exceeded. If not all bytes were transferred, this function returns -EPROTO. "
"Errors from the underlying AUX channel transfer function, with the exception "
"of -EBUSY (which causes the transaction to be retried), are propagated to "
"the caller."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:571
#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:762
msgid "write a series of bytes to the DPCD"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:573
#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:764
msgid "address of the (first) register to write"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:574
#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:765
msgid "buffer containing the values to write"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:600
#: include/drm/display/drm_dp_helper.h:632
msgid "read a single byte from the DPCD"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:602
#: include/drm/display/drm_dp_helper.h:634
msgid "address of the register to read"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:604
#: include/drm/display/drm_dp_helper.h:636
msgid "``u8 *valuep``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:603
#: include/drm/display/drm_dp_helper.h:635
msgid "location where the value of the register will be stored"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:604
msgid ""
"Returns the number of bytes transferred (1) on success, or a negative error "
"code on failure. In most of the cases you should be using "
"drm_dp_dpcd_read_byte() instead."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:616
#: include/drm/display/drm_dp_helper.h:646
msgid "write a single byte to the DPCD"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:618
#: include/drm/display/drm_dp_helper.h:648
msgid "address of the register to write"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:620
#: include/drm/display/drm_dp_helper.h:650 ../../../gpu/drm-kms-helpers:393:
#: include/drm/display/drm_scdc_helper.h:62
msgid "``u8 value``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:619
#: include/drm/display/drm_dp_helper.h:649
msgid "value to write to the register"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:620
msgid ""
"Returns the number of bytes transferred (1) on success, or a negative error "
"code on failure. In most of the cases you should be using "
"drm_dp_dpcd_write_byte() instead."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:636
#: include/drm/display/drm_dp_helper.h:650
msgid "Returns zero (0) on success, or a negative error code on failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:758
msgid "DP branch/sink device descriptor"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:759
msgid "``ident``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:760
msgid "DP device identification from DPCD 0x400 (sink) or 0x500 (branch)."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:760
msgid "``quirks``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:761
msgid "Quirks; use drm_dp_has_quirk() to query for the quirks."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:773
msgid "Display Port sink/branch device specific quirks"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:779
msgid "``DP_DPCD_QUIRK_CONSTANT_N``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:780
msgid ""
"The device requires main link attributes Mvid and Nvid to be limited to 16 "
"bits. So will give a constant value (0x8000) for compatability."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:783
msgid "``DP_DPCD_QUIRK_NO_PSR``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:784
msgid ""
"The device does not support PSR even if reports that it supports or driver "
"still need to implement proper handling for such device."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:787
msgid "``DP_DPCD_QUIRK_NO_SINK_COUNT``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:788
msgid ""
"The device does not set SINK_COUNT to a non-zero value. The driver should "
"ignore SINK_COUNT during detection. Note that drm_dp_read_sink_count_cap() "
"automatically checks for this quirk."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:792
msgid "``DP_DPCD_QUIRK_DSC_WITHOUT_VIRTUAL_DPCD``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:793
msgid ""
"The device supports MST DSC despite not supporting Virtual DPCD. The DSC "
"caps can be read from the physical aux instead."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:796
msgid "``DP_DPCD_QUIRK_CAN_DO_MAX_LINK_RATE_3_24_GBPS``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:797
msgid ""
"The device supports a link rate of 3.24 Gbps (multiplier 0xc) despite the "
"DP_MAX_LINK_RATE register reporting a lower max multiplier."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:800
msgid "``DP_DPCD_QUIRK_HBLANK_EXPANSION_REQUIRES_DSC``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:801
msgid ""
"The device applies HBLANK expansion for some modes, but this requires "
"enabling DSC."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:774
msgid ""
"Display Port sink and branch devices in the wild have a variety of bugs, try "
"to collect them here. The quirks are shared, but it's up to the drivers to "
"implement workarounds for them."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:826
msgid "does the DP device have a specific quirk"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:832
#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1825
msgid "``const struct drm_dp_desc *desc``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:827
msgid "Device descriptor filled by drm_dp_read_desc()"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:829
msgid "``enum drm_dp_quirk quirk``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:828
msgid "Quirk to query for"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:829
msgid "Return true if DP device identified by **desc** has **quirk**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:839
msgid "Probed eDP backlight info struct"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:840
msgid "``pwmgen_bit_count``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:841
msgid "The pwmgen bit count"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:841
msgid "``pwm_freq_pre_divider``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:842
msgid ""
"The PWM frequency pre-divider value being used for this backlight, if any"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:842
msgid "``max``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:843
msgid "The maximum backlight level that may be set"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:843
msgid "``lsb_reg_used``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:844
msgid ""
"Do we also write values to the DP_EDP_BACKLIGHT_BRIGHTNESS_LSB register?"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:844
msgid "``aux_enable``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:845
msgid "Does the panel support the AUX enable cap?"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:845
msgid "``aux_set``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:846
msgid "Does the panel support setting the brightness through AUX?"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:846
msgid "``luminance_set``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:847
msgid ""
"Does the panel support setting the brightness through AUX using luminance "
"values?"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:847
msgid ""
"This structure contains various data about an eDP backlight, which can be "
"populated by using drm_edp_backlight_init()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:928
msgid "DP Phy Compliance parameters"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:929
msgid "``link_rate``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:930
msgid "Requested Link rate from DPCD 0x219"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:930
msgid "``num_lanes``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:931
msgid "Number of lanes requested by sing through DPCD 0x220"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:931
msgid "``phy_pattern``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:932
msgid "DP Phy test pattern from DPCD 0x248"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:932
msgid "``hbr2_reset``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:933
msgid "DP HBR2_COMPLIANCE_SCRAMBLER_RESET from DCPD 0x24A and 0x24B"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:933
msgid "``custom80``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:934
msgid "DP Test_80BIT_CUSTOM_PATTERN from DPCDs 0x250 through 0x259"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:934
msgid "``enhanced_frame_cap``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:266: include/drm/display/drm_dp_helper.h:935
msgid "flag for enhanced frame capability."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:410
msgid "Get the name of the given DP PHY"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:416
#: drivers/gpu/drm/display/drm_dp_helper.c:812
#: drivers/gpu/drm/display/drm_dp_helper.c:2643
#: drivers/gpu/drm/display/drm_dp_helper.c:2884
msgid "``enum drm_dp_phy dp_phy``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:411
msgid "The DP PHY identifier"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:412
msgid ""
"Given the **dp_phy**, get a user friendly name of the DP PHY, either "
"\"DPRX\" or \"LTTPR <N>\", or \"<INVALID DP PHY>\" on errors. The returned "
"string is always non-NULL and valid."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:417
msgid "Name of the DP PHY."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:464
msgid "Grant extended time for sink to wake up"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:465
#: drivers/gpu/drm/display/drm_dp_helper.c:1845
#: drivers/gpu/drm/display/drm_dp_helper.c:3950
#: drivers/gpu/drm/display/drm_dp_helper.c:4030
#: drivers/gpu/drm/display/drm_dp_helper.c:4098
#: drivers/gpu/drm/display/drm_dp_helper.c:4387
#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3610
msgid "The DP AUX channel to use"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:467
msgid "``bool transparent_mode``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:466
msgid "This is true if lttpr is in transparent mode"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:467
msgid ""
"This function checks if the sink needs any extended wake time, if it does it "
"grants this request. Post this setup the source device can keep trying the "
"Aux transaction till the granted wake timeout. If this function is not "
"called all Aux transactions are expected to take a default of 1ms before "
"they throw an error."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:648
msgid "probe a given DPCD address with a 1-byte read access"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:649
msgid "DisplayPort AUX channel (SST)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:650
msgid "address of the register to probe"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:651
msgid ""
"Probe the provided DPCD address by reading 1 byte from it. The function can "
"be used to trigger some side-effect the read access has, like waking up the "
"sink, without the need for the read-out value."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:655
msgid ""
"Returns 0 if the read access suceeded, or a negative error code on failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:673
msgid "Set whether the DP device is powered"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:674
msgid ""
"DisplayPort AUX channel; for convenience it's OK to pass NULL here and the "
"function will be a no-op."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:677
msgid "``bool powered``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:676
msgid "true if powered; false if not"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:677
msgid ""
"If the endpoint device on the DP AUX bus is known to be powered down then "
"this function can be called to make future transfers fail immediately "
"instead of needing to time out."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:681
msgid ""
"If this function is never called then a device defaults to being powered."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:696
msgid "Set whether a probing before DPCD access is done"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:699
#: drivers/gpu/drm/display/drm_dp_helper.c:2952
#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:353
#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5470
#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:657
#: drivers/gpu/drm/drm_mipi_dsi.c:695 drivers/gpu/drm/drm_mipi_dsi.c:1516
#: drivers/gpu/drm/drm_mipi_dsi.c:1547 ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:175
msgid "``bool enable``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:698
msgid "Enable the probing if required"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:729
#: drivers/gpu/drm/display/drm_dp_helper.c:767
msgid ""
"Returns the number of bytes transferred on success, or a negative error code "
"on failure. -EIO is returned if the request was NAKed by the sink or if the "
"retry count was exceeded. If not all bytes were transferred, this function "
"returns -EPROTO. Errors from the underlying AUX channel transfer function, "
"with the exception of -EBUSY (which causes the transaction to be retried), "
"are propagated to the caller."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:736
msgid "In most of the cases you want to use drm_dp_dpcd_read_data() instead."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:774
msgid "In most of the cases you want to use drm_dp_dpcd_write_data() instead."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:794
msgid "read DPCD link status (bytes 0x202-0x207)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:797
msgid "``u8 status[DP_LINK_STATUS_SIZE]``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:796
msgid "buffer to store the link status in (must be at least 6 bytes)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:797
msgid "Returns a negative error code on failure or 0 on success."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:809
msgid "get the link status information for a DP PHY"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:811
msgid "the DP PHY to get the link status for"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:813
msgid "``u8 link_status[DP_LINK_STATUS_SIZE]``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:812
msgid "buffer to return the status in"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:813
msgid ""
"Fetch the AUX DPCD registers for the DPRX or an LTTPR PHY link status. The "
"layout of the returned **link_status** matches the DPCD register layout of "
"the DPRX PHY link status."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:817
msgid ""
"Returns 0 if the information was read successfully or a negative error code "
"on failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:852
msgid "power up a DisplayPort link"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:855
#: drivers/gpu/drm/display/drm_dp_helper.c:893
msgid "``unsigned char revision``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:854
#: drivers/gpu/drm/display/drm_dp_helper.c:892
msgid "DPCD revision supported on the link"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:855
#: drivers/gpu/drm/display/drm_dp_helper.c:893
#: drivers/gpu/drm/display/drm_dp_helper.c:2386
#: drivers/gpu/drm/display/drm_dp_helper.c:2466
#: drivers/gpu/drm/display/drm_dp_helper.c:2493
#: drivers/gpu/drm/display/drm_dp_helper.c:2617
#: drivers/gpu/drm/display/drm_dp_helper.c:2646
#: drivers/gpu/drm/display/drm_dp_helper.c:2866
#: drivers/gpu/drm/display/drm_dp_helper.c:2887
#: drivers/gpu/drm/display/drm_dp_helper.c:3059
#: drivers/gpu/drm/display/drm_dp_helper.c:3110
#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:87
#: drivers/video/hdmi.c:219 drivers/video/hdmi.c:258 drivers/video/hdmi.c:351
#: drivers/video/hdmi.c:382 drivers/video/hdmi.c:529 drivers/video/hdmi.c:586
#: drivers/video/hdmi.c:701 drivers/video/hdmi.c:1796 drivers/video/hdmi.c:1886
msgid "Returns 0 on success or a negative error code on failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:890
msgid "power down a DisplayPort link"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:933
msgid "Write Virtual Channel information to payload table"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:936
msgid "``int vcpid``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:935
msgid "Virtual Channel Payload ID"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:937
msgid "``u8 start_time_slot``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:936
msgid "Starting time slot"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:938
msgid "``u8 time_slot_count``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:937
msgid "Time slot count"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:938
msgid ""
"Write the Virtual Channel payload allocation table, checking the payload "
"update status and retrying as necessary."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:942
msgid "0 on success, negative error otherwise"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:990
msgid "Clear the entire VC Payload ID table"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:992
msgid "Clear the entire VC Payload ID table."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:995
msgid "0 on success, negative error code on errors."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1004
msgid "Poll for ACT handled status"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1007
msgid "``int timeout_ms``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1006
msgid "Timeout in ms"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1007
msgid ""
"Try waiting for the sink to finish updating its payload table by polling for "
"the ACT handled bit of DP_PAYLOAD_TABLE_UPDATE_STATUS for up to "
"**timeout_ms** milliseconds, defaulting to 3000 ms if 0."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1012
#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4763
msgid "0 if the ACT was handled in time, negative error code on failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1053
msgid "is the downstream facing port of certain type?"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1059
#: drivers/gpu/drm/display/drm_dp_helper.c:1081
#: drivers/gpu/drm/display/drm_dp_helper.c:1256
#: drivers/gpu/drm/display/drm_dp_helper.c:1306
#: drivers/gpu/drm/display/drm_dp_helper.c:1334
#: drivers/gpu/drm/display/drm_dp_helper.c:1399
#: drivers/gpu/drm/display/drm_dp_helper.c:1442
#: drivers/gpu/drm/display/drm_dp_helper.c:1499
#: drivers/gpu/drm/display/drm_dp_helper.c:1530
#: drivers/gpu/drm/display/drm_dp_helper.c:1559
#: drivers/gpu/drm/display/drm_dp_helper.c:1588
#: drivers/gpu/drm/display/drm_dp_helper.c:1656
#: drivers/gpu/drm/display/drm_dp_helper.c:1750
#: drivers/gpu/drm/display/drm_dp_helper.c:1824
#: drivers/gpu/drm/display/drm_dp_helper.c:2863
#: drivers/gpu/drm/display/drm_dp_helper.c:2883
#: drivers/gpu/drm/display/drm_dp_helper.c:3328
#: drivers/gpu/drm/display/drm_dp_helper.c:3353
#: drivers/gpu/drm/display/drm_dp_helper.c:3453
#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3612
msgid "``const u8 dpcd[DP_RECEIVER_CAP_SIZE]``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1054
#: drivers/gpu/drm/display/drm_dp_helper.c:1076
#: drivers/gpu/drm/display/drm_dp_helper.c:1301
#: drivers/gpu/drm/display/drm_dp_helper.c:1329
#: drivers/gpu/drm/display/drm_dp_helper.c:1394
#: drivers/gpu/drm/display/drm_dp_helper.c:1438
#: drivers/gpu/drm/display/drm_dp_helper.c:1495
#: drivers/gpu/drm/display/drm_dp_helper.c:1526
#: drivers/gpu/drm/display/drm_dp_helper.c:1555
#: drivers/gpu/drm/display/drm_dp_helper.c:1587
#: drivers/gpu/drm/display/drm_dp_helper.c:1655
#: drivers/gpu/drm/display/drm_dp_helper.c:1745
#: drivers/gpu/drm/display/drm_dp_helper.c:1799
#: drivers/gpu/drm/display/drm_dp_helper.c:2862
#: drivers/gpu/drm/display/drm_dp_helper.c:2882
#: drivers/gpu/drm/display/drm_dp_helper.c:3327
#: drivers/gpu/drm/display/drm_dp_helper.c:3352
#: drivers/gpu/drm/display/drm_dp_helper.c:3448
msgid "DisplayPort configuration data"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1056
#: drivers/gpu/drm/display/drm_dp_helper.c:1078
#: drivers/gpu/drm/display/drm_dp_helper.c:1303
#: drivers/gpu/drm/display/drm_dp_helper.c:1331
#: drivers/gpu/drm/display/drm_dp_helper.c:1396
#: drivers/gpu/drm/display/drm_dp_helper.c:1440
#: drivers/gpu/drm/display/drm_dp_helper.c:1497
#: drivers/gpu/drm/display/drm_dp_helper.c:1528
#: drivers/gpu/drm/display/drm_dp_helper.c:1557
#: drivers/gpu/drm/display/drm_dp_helper.c:1589
#: drivers/gpu/drm/display/drm_dp_helper.c:1657
#: drivers/gpu/drm/display/drm_dp_helper.c:1747
#: drivers/gpu/drm/display/drm_dp_helper.c:1801
#: drivers/gpu/drm/display/drm_dp_helper.c:3450
msgid "``const u8 port_cap[4]``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1055
#: drivers/gpu/drm/display/drm_dp_helper.c:1077
#: drivers/gpu/drm/display/drm_dp_helper.c:1302
#: drivers/gpu/drm/display/drm_dp_helper.c:1330
#: drivers/gpu/drm/display/drm_dp_helper.c:1395
#: drivers/gpu/drm/display/drm_dp_helper.c:1588
#: drivers/gpu/drm/display/drm_dp_helper.c:1656
#: drivers/gpu/drm/display/drm_dp_helper.c:1746
#: drivers/gpu/drm/display/drm_dp_helper.c:1800
#: drivers/gpu/drm/display/drm_dp_helper.c:3449
msgid "port capabilities"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1057
#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:469
#: drivers/gpu/drm/drm_mipi_dsi.c:507
msgid "``u8 type``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1056
msgid ""
"port type to be checked. Can be: ``DP_DS_PORT_TYPE_DP``, "
"``DP_DS_PORT_TYPE_VGA``, ``DP_DS_PORT_TYPE_DVI``, ``DP_DS_PORT_TYPE_HDMI``, "
"``DP_DS_PORT_TYPE_NON_EDID``, ``DP_DS_PORT_TYPE_DP_DUALMODE`` or "
"``DP_DS_PORT_TYPE_WIRELESS``."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1060
msgid "Caveat: Only works with DPCD 1.1+ port caps."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1063
msgid "whether the downstream facing port matches the type."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1075
msgid "is the downstream facing port TMDS?"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1079
#: drivers/gpu/drm/display/drm_dp_helper.c:1332
#: drivers/gpu/drm/display/drm_dp_helper.c:1397
#: drivers/gpu/drm/display/drm_dp_helper.c:1441
#: drivers/gpu/drm/display/drm_dp_helper.c:1658
#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2064
#: drivers/gpu/drm/drm_edid.c:2476 drivers/gpu/drm/drm_edid.c:2552
#: drivers/gpu/drm/drm_edid.c:2569 drivers/gpu/drm/drm_edid.c:2731
#: drivers/gpu/drm/drm_edid.c:2788 drivers/gpu/drm/drm_edid.c:5545
#: drivers/gpu/drm/drm_edid.c:7069 drivers/gpu/drm/drm_edid.c:7586
msgid "``const struct drm_edid *drm_edid``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1078
#: drivers/gpu/drm/display/drm_dp_helper.c:1331
#: drivers/gpu/drm/display/drm_dp_helper.c:1396
#: drivers/gpu/drm/display/drm_dp_helper.c:1440
#: drivers/gpu/drm/display/drm_dp_helper.c:1657
#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2726
#: drivers/gpu/drm/drm_edid.c:5540 drivers/gpu/drm/drm_edid.c:7068
msgid "EDID"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1080
msgid "whether the downstream facing port is TMDS (HDMI/DVI)."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1110
msgid "send back real edid checksum value"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1113
msgid "``u8 real_edid_checksum``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1112
msgid "real edid checksum for the last block"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1114
msgid "True on success"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1219
msgid "read DPCD caps and extended DPCD caps if available"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1223
msgid "``u8 dpcd[DP_RECEIVER_CAP_SIZE]``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1222
msgid "Buffer to store the resulting DPCD in"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1223
msgid ""
"Attempts to read the base DPCD caps for **aux**. Additionally, this function "
"checks for and reads the extended DPRX caps (``DP_DP13_DPCD_REV``) if "
"present."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1228
msgid "``0`` if the DPCD was read successfully, negative error code otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1253
msgid "read DPCD downstream port info if available"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1255
msgid "A cached copy of the port's DPCD"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1257
msgid "``u8 downstream_ports[DP_MAX_DOWNSTREAM_PORTS]``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1256
msgid "buffer to store the downstream port info in"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1257
msgid "See also: drm_dp_downstream_max_clock() drm_dp_downstream_max_bpc()"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1262
msgid ""
"0 if either the downstream port info was read successfully or there was no "
"downstream info to read, or a negative error code otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1300
msgid "extract downstream facing port max dot clock"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1304
msgid ""
"Downstream facing port max dot clock in kHz on success, or 0 if max clock "
"not defined"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1328
msgid "extract downstream facing port max TMDS clock"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1333
msgid ""
"HDMI/DVI downstream facing port max TMDS clock in kHz on success, or 0 if "
"max TMDS clock not defined"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1393
msgid "extract downstream facing port min TMDS clock"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1398
msgid ""
"HDMI/DVI downstream facing port min TMDS clock in kHz on success, or 0 if "
"max TMDS clock not defined"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1436
msgid "extract downstream facing port max bits per component"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1439
#: drivers/gpu/drm/display/drm_dp_helper.c:1496
#: drivers/gpu/drm/display/drm_dp_helper.c:1527
#: drivers/gpu/drm/display/drm_dp_helper.c:1556
msgid "downstream facing port capabilities"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1442
msgid "Max bpc on success or 0 if max bpc not defined"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1493
msgid "determine downstream facing port YCbCr 4:2:0 pass-through capability"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1498
msgid "whether the downstream facing port can pass through YCbCr 4:2:0"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1524
msgid ""
"determine downstream facing port YCbCr 4:4:4->4:2:0 conversion capability"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1529
msgid "whether the downstream facing port can convert YCbCr 4:4:4 to 4:2:0"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1553
msgid "determine downstream facing port RGB->YCbCr conversion capability"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1558
msgid "``u8 color_spc``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1557
msgid "Colorspace for which conversion cap is sought"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1559
msgid ""
"whether the downstream facing port can convert RGB->YCbCr for a given "
"colorspace."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1585
msgid "return a mode for downstream facing port"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1589
msgid "Provides a suitable mode for downstream facing ports without EDID."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1592
#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:4635
msgid "A new drm_display_mode on success or NULL on failure"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1640
msgid "identify branch device"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1643
msgid "``char id[6]``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1642
msgid "DisplayPort branch device id"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1643
msgid "Returns branch device id on success or NULL on failure"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1653
msgid "debug DP branch devices"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1659
#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4906
msgid "``struct seq_file *m``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1654
msgid "pointer for debugfs file"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1744
msgid "get DP branch device type"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1796
msgid "set subconnector for DP connector"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1797
msgid "connector to set property on"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1798
msgid "connector status"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1800
msgid "``const u8 *dpcd``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1801
msgid "Called by a driver on every detect event."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1820
msgid "Check whether a given connector has a valid sink count"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1822
msgid "The DRM connector to check"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1823
msgid "A cached copy of the connector's DPCD RX capabilities"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1824
msgid "A cached copy of the connector's DP descriptor"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1825
msgid "See also: drm_dp_read_sink_count()"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1828
msgid ""
"``True`` if the (e)DP connector has a valid sink count that should be "
"probed, ``false`` otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1844
msgid "Retrieve the sink count for a given sink"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1846
msgid "See also: drm_dp_read_sink_count_cap()"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:1849
msgid ""
"The current sink count reported by **aux**, or a negative error code "
"otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2319
msgid "minimally initialise a remote aux channel"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2321
msgid ""
"Used for remote aux channel in general. Merely initialize the crc work "
"struct."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2332
msgid "minimally initialise an aux channel"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2334
msgid ""
"If you need to use the drm_dp_aux's i2c adapter prior to registering it with "
"the outside world, call drm_dp_aux_init() first. For drivers which are "
"grandparents to their AUX adapters (e.g. the AUX adapter is parented by a :c:"
"type:`drm_connector`), you must still call drm_dp_aux_register() once the "
"connector has been registered to allow userspace access to the auxiliary DP "
"channel. Likewise, for such drivers you should also assign :c:type:"
"`drm_dp_aux.drm_dev <drm_dp_aux>` as early as possible so that the :c:type:"
"`drm_device` that corresponds to the AUX adapter may be mentioned in "
"debugging output from the DRM DP helpers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2343
msgid ""
"For devices which use a separate platform device for their AUX adapters, "
"this may be called as early as required by the driver."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2363
msgid "initialise and register aux channel"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2365
msgid ""
"Automatically calls drm_dp_aux_init() if this hasn't been done yet. This "
"should only be called once the parent of **aux**, :c:type:`drm_dp_aux.dev "
"<drm_dp_aux>`, is initialized. For devices which are grandparents of their "
"AUX channels, :c:type:`drm_dp_aux.dev <drm_dp_aux>` will typically be the :c:"
"type:`drm_connector` :c:type:`device` which corresponds to **aux**. For "
"these devices, it's advised to call drm_dp_aux_register() in :c:type:"
"`drm_connector_funcs.late_register <drm_connector_funcs>`, and likewise to "
"call drm_dp_aux_unregister() in :c:type:`drm_connector_funcs."
"early_unregister <drm_connector_funcs>`. Functions which don't follow this "
"will likely Oops when ``CONFIG_DRM_DISPLAY_DP_AUX_CHARDEV`` is enabled."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2375
msgid ""
"For devices where the AUX channel is a device that exists independently of "
"the :c:type:`drm_device` that uses it, such as SoCs and bridge devices, it "
"is recommended to call drm_dp_aux_register() after a :c:type:`drm_device` "
"has been assigned to :c:type:`drm_dp_aux.drm_dev <drm_dp_aux>`, and likewise "
"to call drm_dp_aux_unregister() once the :c:type:`drm_device` should no "
"longer be associated with the AUX channel (e.g. on bridge detach)."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2382
msgid ""
"Drivers which need to use the aux channel before either of the two points "
"mentioned above need to call drm_dp_aux_init() in order to use the AUX "
"channel before registration."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2419
msgid "unregister an AUX adapter"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2432
msgid "PSR setup in time usec"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2438
msgid "``const u8 psr_cap[EDP_PSR_RECEIVER_CAP_SIZE]``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2433
msgid "PSR capabilities from DPCD"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2435
msgid ""
"PSR setup time for the panel in microseconds,  negative error code on "
"failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2463
msgid "start capture of frame CRCs"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2465
msgid "CRTC displaying the frames whose CRCs are to be captured"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2491
msgid "stop capture of frame CRCs"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2610
msgid "read sink/branch descriptor from DPCD"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2613
msgid "``struct drm_dp_desc *desc``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2612
msgid "Device descriptor to fill from DPCD"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2614
msgid "``bool is_branch``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2613
msgid "true for branch devices, false for sink devices"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2614
msgid ""
"Read DPCD 0x400 (sink) or 0x500 (branch) into **desc**. Also debug log the "
"identification."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2640
msgid "read and dump the DPCD descriptor for an LTTPR PHY"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2642
msgid "LTTPR PHY instance"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2643
msgid ""
"Read the DPCD LTTPR PHY descriptor for **dp_phy** and print a debug message "
"with its details to dmesg."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2668
msgid "Get bits per pixel increment"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2669
#: drivers/gpu/drm/display/drm_dp_helper.c:2697
#: drivers/gpu/drm/display/drm_dp_helper.c:2755
#: drivers/gpu/drm/display/drm_dp_helper.c:2800
msgid "DSC capabilities from DPCD"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2670
msgid "Returns the bpp precision supported by the DP sink."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2695
msgid "Get the max slice count supported by the DSC sink."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2699
msgid "``bool is_edp``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2698
msgid "true if its eDP, false for DP"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2699
msgid ""
"Read the slice capabilities DPCD register from DSC sink to get the maximum "
"slice count supported. This is used to populate the DSC parameters in the :c:"
"type:`struct drm_dsc_config <drm_dsc_config>` by the driver. Driver creates "
"an infoframe using these parameters to populate :c:type:`struct "
"drm_dsc_pps_infoframe <drm_dsc_pps_infoframe>`. These are sent to the sink "
"using DSC infoframe using the helper function drm_dsc_pps_infoframe_pack()"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2707
msgid "Maximum slice count supported by DSC sink or 0 its invalid"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2754
msgid "Get the line buffer depth in bits"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2756
msgid ""
"Read the DSC DPCD register to parse the line buffer depth in bits which is "
"number of bits of precision within the decoder line buffer supported by the "
"DSC sink. This is used to populate the DSC parameters in the :c:type:`struct "
"drm_dsc_config <drm_dsc_config>` by the driver. Driver creates an infoframe "
"using these parameters to populate :c:type:`struct drm_dsc_pps_infoframe "
"<drm_dsc_pps_infoframe>`. These are sent to the sink using DSC infoframe "
"using the helper function drm_dsc_pps_infoframe_pack()"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2765
msgid "Line buffer depth supported by DSC panel or 0 its invalid"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2798
msgid "Get all the input bits per component values supported by the DSC sink."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2802
msgid "``u8 dsc_bpc[3]``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2801
msgid "An array to be filled by this helper with supported input bpcs."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2803
msgid ""
"Read the DSC DPCD from the sink device to parse the supported bits per "
"component values. This is used to populate the DSC parameters in the :c:type:"
"`struct drm_dsc_config <drm_dsc_config>` by the driver. Driver creates an "
"infoframe using these parameters to populate :c:type:`struct "
"drm_dsc_pps_infoframe <drm_dsc_pps_infoframe>`. These are sent to the sink "
"using DSC infoframe using the helper function drm_dsc_pps_infoframe_pack()"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2811
msgid "Number of input BPC values parsed from the DPCD"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2860
msgid "read the LTTPR common capabilities"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2864
msgid "``u8 caps[DP_LTTPR_COMMON_CAP_SIZE]``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2863
#: drivers/gpu/drm/display/drm_dp_helper.c:2884
msgid "buffer to return the capability info in"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2864
msgid "Read capabilities common to all LTTPRs."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2880
msgid "read the capabilities for a given LTTPR PHY"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2883
msgid "LTTPR PHY to read the capabilities for"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2885
msgid "``u8 caps[DP_LTTPR_PHY_CAP_SIZE]``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2885
msgid "Read the capabilities for the given LTTPR PHY."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2907
msgid "get the number of detected LTTPRs"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2913
#: drivers/gpu/drm/display/drm_dp_helper.c:2941
#: drivers/gpu/drm/display/drm_dp_helper.c:3016
msgid "``const u8 caps[DP_LTTPR_COMMON_CAP_SIZE]``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2908
#: drivers/gpu/drm/display/drm_dp_helper.c:2936
#: drivers/gpu/drm/display/drm_dp_helper.c:3011
msgid "LTTPR common capabilities"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2909
msgid ""
"Get the number of detected LTTPRs from the LTTPR common capabilities info."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2912
msgid ""
"-ERANGE if more than supported number (8) of LTTPRs are detected -EINVAL if "
"the DP_PHY_REPEATER_CNT register contains an invalid value otherwise the "
"number of detected LTTPRs"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2935
msgid "get the maximum link rate supported by all LTTPRs"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2937
msgid "Returns the maximum link rate supported by all detected LTTPRs."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2949
msgid "set the LTTPR in transparent mode"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2951
msgid "Enable or disable transparent mode"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2969
msgid "init LTTPR transparency mode according to DP standard"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2972
msgid "``int lttpr_count``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:2971
msgid ""
"Number of LTTPRs. Between 0 and 8, according to DP standard. Negative error "
"code for any non-valid number. See drm_dp_lttpr_count()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3010
msgid "get the maximum lane count supported by all LTTPRs"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3012
msgid "Returns the maximum lane count supported by all detected LTTPRs."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3024
msgid "check for LTTPR vswing3 support"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3030
#: drivers/gpu/drm/display/drm_dp_helper.c:3046
msgid "``const u8 caps[DP_LTTPR_PHY_CAP_SIZE]``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3025
#: drivers/gpu/drm/display/drm_dp_helper.c:3041
msgid "LTTPR PHY capabilities"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3026
msgid ""
"Returns true if the **caps** for an LTTPR TX PHY indicate support for "
"voltage swing level 3."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3040
msgid "check for LTTPR preemph3 support"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3042
msgid ""
"Returns true if the **caps** for an LTTPR TX PHY indicate support for pre-"
"emphasis level 3."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3056
msgid "get the requested pattern from the sink."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3059
#: drivers/gpu/drm/display/drm_dp_helper.c:3109
msgid "``struct drm_dp_phy_test_params *data``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3058
#: drivers/gpu/drm/display/drm_dp_helper.c:3108
msgid "DP phy compliance test parameters."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3106
msgid "set the pattern to the sink."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3110
msgid "``u8 dp_rev``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3109
msgid "DP revision to use for compliance testing"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3325
msgid "check if adaptive sync sdp is supported"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3328
msgid "Returns true if adaptive sync sdp is supported, else returns false"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3350
msgid "check if vsc sdp is supported"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3353
msgid "Returns true if vsc sdp is supported, else returns false"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3373
msgid "pack a given vsc sdp into generic dp_sdp"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3379
msgid "``const struct drm_dp_vsc_sdp *vsc``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3374
msgid ""
"vsc sdp initialized according to its purpose as defined in table 2-118 - "
"table 2-120 in DP 1.4a specification"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3377
#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:494
msgid "``struct dp_sdp *sdp``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3376
msgid "valid handle to the generic dp_sdp which will be packed"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3377
msgid "Returns length of sdp on success and error code on failure"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3447
msgid "maximum frl supported by PCON"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3450
msgid ""
"Returns maximum frl bandwidth supported by PCON in GBPS, returns 0 if not "
"supported."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3486
msgid "Prepare PCON for FRL."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3489
msgid "``bool enable_frl_ready_hpd``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3488
msgid "Configure DP_PCON_ENABLE_HPD_READY."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3489
#: drivers/gpu/drm/display/drm_dp_helper.c:3534
#: drivers/gpu/drm/display/drm_dp_helper.c:3591
#: drivers/gpu/drm/display/drm_dp_helper.c:3616
#: drivers/gpu/drm/display/drm_dp_helper.c:3628
msgid "Returns 0 if success, else returns negative error code."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3505
msgid "Is PCON ready for FRL"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3507
msgid "Returns true if success, else returns false."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3527
msgid "Set HDMI LINK Configuration-Step1"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3530
msgid "``int max_frl_gbps``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3529
msgid "maximum frl bw to be configured between PCON and HDMI sink"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3531
msgid "``u8 frl_mode``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3530
msgid ""
"FRL Training mode, it can be either Concurrent or Sequential. In Concurrent "
"Mode, the FRL link bring up can be done along with DP Link training. In "
"Sequential mode, the FRL link bring up is done prior to the DP Link training."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3584
msgid "Set HDMI Link configuration Step-2"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3587
msgid "``int max_frl_mask``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3586
msgid "Max FRL BW to be tried by the PCON with HDMI Sink"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3588
msgid "``u8 frl_type``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3587
msgid ""
"FRL training type, can be Extended, or Normal. In Normal FRL training, the "
"PCON tries each frl bw from the max_frl_mask starting from min, and stops "
"when link training is successful. In Extended FRL training, all frl bw "
"selected in the mask are trained by the PCON."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3614
msgid "Re-Set HDMI Link configuration."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3626
msgid "Enable HDMI link through FRL"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3650
msgid "check if the PCON HDMI LINK status is active."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3652
msgid "Returns true if link is active else returns false."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3669
msgid "get the PCON HDMI LINK MODE"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3672
msgid "``u8 *frl_trained_mask``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3671
msgid ""
"pointer to store bitmask of the trained bw configuration. Valid only if the "
"MODE returned is FRL. For Normal Link training mode only 1 of the bits will "
"be set, but in case of Extended mode, more than one bits can be set."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3675
msgid ""
"Returns the link mode : TMDS or FRL on success, else returns negative error "
"code."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3699
msgid ""
"print the error count per lane during link failure between PCON and HDMI sink"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3702
msgid "DRM connector code."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3864
msgid ""
"Let PCON fill the default pps parameters for DSC1.2 between PCON & HDMI2.1 "
"sink"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3867
#: drivers/gpu/drm/display/drm_dp_helper.c:3881
msgid "Returns 0 on success, else returns negative error code."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3877
msgid "Configure PPS encoder override buffer for HDMI sink"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3881
msgid "``u8 pps_buf[128]``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3880
msgid "128 bytes to be written into PPS buffer for HDMI sink by PCON."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3949
msgid "Set the backlight level of an eDP panel via AUX"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3952
#: drivers/gpu/drm/display/drm_dp_helper.c:4032
#: drivers/gpu/drm/display/drm_dp_helper.c:4100
msgid "``const struct drm_edp_backlight_info *bl``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3951
#: drivers/gpu/drm/display/drm_dp_helper.c:4031
#: drivers/gpu/drm/display/drm_dp_helper.c:4099
msgid "Backlight capability info from drm_edp_backlight_init()"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3953
msgid "``u32 level``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3952
msgid "The brightness level to set"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3953
msgid ""
"Sets the brightness level of an eDP panel's backlight. Note that the panel's "
"backlight must already have been enabled by the driver by calling "
"drm_edp_backlight_enable()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:3957
msgid "``0`` on success, negative error code on failure"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4029
msgid "Enable an eDP panel's backlight using DPCD"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4033
msgid "``const u32 level``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4032
msgid "The initial backlight level to set via AUX, if there is one"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4033
msgid ""
"This function handles enabling DPCD backlight controls on a panel over DPCD, "
"while additionally restoring any important backlight state such as the given "
"backlight level, the brightness byte count, backlight frequency, etc."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4037
msgid ""
"Note that certain panels do not support being enabled or disabled via DPCD, "
"but instead require that the driver handle enabling/disabling the panel "
"through implementation-specific means using the EDP_BL_PWR GPIO. For such "
"panels, :c:type:`drm_edp_backlight_info.aux_enable <drm_edp_backlight_info>` "
"will be set to ``false``, this function becomes a no-op, and the driver is "
"expected to handle powering the panel on using the EDP_BL_PWR GPIO."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4044
#: drivers/gpu/drm/display/drm_dp_helper.c:4298
msgid "``0`` on success, negative error code on failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4097
msgid "Disable an eDP backlight using DPCD, if supported"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4100
msgid ""
"This function handles disabling DPCD backlight controls on a panel over AUX."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4102
msgid ""
"Note that certain panels do not support being enabled or disabled via DPCD, "
"but instead require that the driver handle enabling/disabling the panel "
"through implementation-specific means using the EDP_BL_PWR GPIO. For such "
"panels, :c:type:`drm_edp_backlight_info.aux_enable <drm_edp_backlight_info>` "
"will be set to ``false``, this function becomes a no-op, and the driver is "
"expected to handle powering the panel off using the EDP_BL_PWR GPIO."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4109
msgid "``0`` on success or no-op, negative error code on failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4281
msgid ""
"Probe a display panel's TCON using the standard VESA eDP backlight interface."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4283
msgid "The DP aux device to use for probing"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4285
msgid "``struct drm_edp_backlight_info *bl``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4284
msgid ""
"The :c:type:`drm_edp_backlight_info` struct to fill out with information on "
"the backlight"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4286
msgid "``u32 max_luminance``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4285
msgid "max luminance when need luminance is set as true"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4287
msgid "``u16 driver_pwm_freq_hz``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4286
msgid "Optional PWM frequency from the driver in hz"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4287
msgid "A cached copy of the eDP DPCD"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4289
msgid "``u32 *current_level``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4288
msgid "Where to store the probed brightness level, if any"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4290
msgid "``u8 *current_mode``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4289
msgid "Where to store the currently set backlight control mode"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4291
msgid "``bool need_luminance``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4290
msgid "Tells us if a we want to manipulate backlight using luminance values"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4291
msgid ""
"Initializes a :c:type:`drm_edp_backlight_info` struct by probing **aux** for "
"it's backlight capabilities, along with also probing the current and maximum "
"supported brightness levels."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4294
msgid ""
"If **driver_pwm_freq_hz** is non-zero, this will be used as the backlight "
"frequency. Otherwise, the default frequency from the panel is used."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4385
msgid "create and use DP AUX backlight"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4388
msgid ""
"Use this function to create and handle backlight if your panel supports "
"backlight control over DP AUX channel using DPCD registers as per VESA's "
"standard backlight control interface."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4398
msgid ""
"A typical implementation for a panel driver supporting backlight control "
"over DP AUX will call this function at probe time. Backlight will then be "
"handled transparently without requiring any intervention from the driver."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4403
msgid ""
"drm_panel_dp_aux_backlight() must be called after the call to "
"drm_panel_init()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4473
msgid "calculate the link symbol count with/without dsc"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4479
#: drivers/gpu/drm/display/drm_dp_helper.c:4510
msgid "``int lane_count``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4474
#: drivers/gpu/drm/display/drm_dp_helper.c:4505
msgid "DP link lane count"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4476
msgid "``int pixels``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4475
msgid "number of pixels in a scanline"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4477
#: drivers/gpu/drm/display/drm_dp_helper.c:4508
msgid "``int dsc_slice_count``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4476
#: drivers/gpu/drm/display/drm_dp_helper.c:4507
msgid "number of slices for DSC or '0' for non-DSC"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4478
#: drivers/gpu/drm/display/drm_dp_helper.c:4509
msgid "``int bpp_x16``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4477
msgid "bits per pixel in .4 binary fixed format"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4479
msgid "``int symbol_size``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4478
msgid "DP symbol size"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4480
msgid "``bool is_mst``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4479
msgid "``true`` for MST and ``false`` for SST"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4480
msgid ""
"Calculate the link symbol cycles for both DSC (**dsc_slice_count** !=0) and "
"non-DSC case (**dsc_slice_count** == 0) and return the count."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4504
msgid "Calculate the BW overhead of a DP link stream"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4507
msgid "``int hactive``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4506
msgid "pixel count of the active period in one scanline of the stream"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4508
msgid "bits per pixel in .4 binary fixed point"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4510
msgid "``unsigned long flags``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4509
msgid "DRM_DP_OVERHEAD_x flags"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4510
msgid ""
"Calculate the BW allocation overhead of a DP link stream, depending on the "
"link's - **lane_count** - SST/MST mode (**flags** / ``DRM_DP_OVERHEAD_MST``) "
"- symbol size (**flags** / ``DRM_DP_OVERHEAD_UHBR``) - FEC mode (**flags** / "
"``DRM_DP_OVERHEAD_FEC``) - SSC/REF_CLK mode (**flags** / "
"``DRM_DP_OVERHEAD_SSC_REF_CLK``) as well as the stream's - **hactive** "
"timing - **bpp_x16** color depth - compression mode (**dsc_slice_count** != "
"0) Note that this overhead doesn't account for the 8b/10b, 128b/132b channel "
"coding efficiency, for that see "
"**drm_dp_link_bw_channel_coding_efficiency\\(\\)**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4525
msgid "Returns the overhead as 100% + overhead% in 1ppm units."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4588
msgid "Get a DP link's channel coding efficiency"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4594
msgid "``bool is_uhbr``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4589
msgid "Whether the link has a 128b/132b channel coding"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4590
msgid ""
"Return the channel coding efficiency of the given DP link type, which is "
"either 8b/10b or 128b/132b (aka UHBR). The corresponding overhead includes "
"the 8b -> 10b, 128b -> 132b pixel data to link symbol conversion overhead "
"and for 128b/132b any link or PHY level control symbol insertion overhead "
"(LLCP, FEC, PHY sync, see DP Standard v2.1 3.5.2.18). For 8b/10b the "
"corresponding FEC overhead is BW allocation specific, included in the value "
"returned by drm_dp_bw_overhead()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4598
msgid ""
"Returns the efficiency in the 100%/coding-overhead% ratio in 1ppm units."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4617
msgid "Get the max data bandwidth of a DPRX sink"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4623
msgid "``int max_link_rate``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4618
msgid "max DPRX link rate in 10kbps units"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4620
msgid "``int max_lanes``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4619
msgid "max DPRX lane count"
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4620
msgid "Given a link rate and lanes, get the data bandwidth."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4622
msgid ""
"Data bandwidth is the actual payload rate, which depends on the data "
"bandwidth efficiency and the link rate."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4625
msgid ""
"Note that protocol layers above the DPRX link level considered here can "
"further limit the maximum data rate. Such layers are the MST topology (with "
"limits on the link between the source and first branch device as well as on "
"the whole MST path until the DPRX link) and (Thunderbolt) DP tunnels - which "
"in turn can encapsulate an MST link with its own limit - with each SST or "
"MST encapsulated tunnel sharing the BW of a tunnel group."
msgstr ""

#: ../../../gpu/drm-kms-helpers:269:
#: drivers/gpu/drm/display/drm_dp_helper.c:4632
msgid "Returns the maximum data rate in kBps units."
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:273
msgid "Display Port CEC Helper Functions Reference"
msgstr ""

#: ../../../gpu/drm-kms-helpers:275: drivers/gpu/drm/display/drm_dp_cec.c:56
msgid ""
"These functions take care of supporting the CEC-Tunneling-over-AUX feature "
"of DisplayPort-to-HDMI adapters."
msgstr ""

#: ../../../gpu/drm-kms-helpers:278: drivers/gpu/drm/display/drm_dp_cec.c:237
msgid "handle CEC interrupt, if any"
msgstr ""

#: ../../../gpu/drm-kms-helpers:278: drivers/gpu/drm/display/drm_dp_cec.c:239
msgid ""
"Should be called when handling an IRQ_HPD request. If CEC-tunneling-over-AUX "
"is present, then it will check for a CEC_IRQ and handle it accordingly."
msgstr ""

#: ../../../gpu/drm-kms-helpers:278: drivers/gpu/drm/display/drm_dp_cec.c:427
msgid "register a new connector"
msgstr ""

#: ../../../gpu/drm-kms-helpers:278: drivers/gpu/drm/display/drm_dp_cec.c:430
msgid ""
"A new connector was registered with associated CEC adapter name and CEC "
"adapter parent device. After registering the name and parent "
"drm_dp_cec_set_edid() is called to check if the connector supports CEC and "
"to register a CEC adapter if that is the case."
msgstr ""

#: ../../../gpu/drm-kms-helpers:278: drivers/gpu/drm/display/drm_dp_cec.c:449
msgid "unregister the CEC adapter, if any"
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:282
msgid "Display Port Dual Mode Adaptor Helper Functions Reference"
msgstr ""

#: ../../../gpu/drm-kms-helpers:284:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:35
msgid "Helper functions to deal with DP dual mode (aka. DP++) adaptors."
msgstr ""

#: ../../../gpu/drm-kms-helpers:284:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:37
msgid ""
"Type 1: Adaptor registers (if any) and the sink DDC bus may be accessed via "
"I2C."
msgstr ""

#: ../../../gpu/drm-kms-helpers:284:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:40
msgid ""
"Type 2: Adaptor registers and sink DDC bus can be accessed either via I2C or "
"I2C-over-AUX. Source devices may choose to implement either of these access "
"methods."
msgstr ""

#: ../../../gpu/drm-kms-helpers:287:
#: include/drm/display/drm_dp_dual_mode_helper.h:80
msgid "``DRM_LSPCON_MODE_INVALID``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:287:
#: include/drm/display/drm_dp_dual_mode_helper.h:81
msgid "No LSPCON."
msgstr ""

#: ../../../gpu/drm-kms-helpers:287:
#: include/drm/display/drm_dp_dual_mode_helper.h:83
msgid "``DRM_LSPCON_MODE_LS``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:287:
#: include/drm/display/drm_dp_dual_mode_helper.h:84
msgid "Level shifter mode of LSPCON which drives DP++ to HDMI 1.4 conversion."
msgstr ""

#: ../../../gpu/drm-kms-helpers:287:
#: include/drm/display/drm_dp_dual_mode_helper.h:87
msgid "``DRM_LSPCON_MODE_PCON``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:287:
#: include/drm/display/drm_dp_dual_mode_helper.h:88
msgid ""
"Protocol converter mode of LSPCON which drives DP++ to HDMI 2.0 active "
"conversion."
msgstr ""

#: ../../../gpu/drm-kms-helpers:287:
#: include/drm/display/drm_dp_dual_mode_helper.h:88
msgid "Type of the DP dual mode adaptor"
msgstr ""

#: ../../../gpu/drm-kms-helpers:287:
#: include/drm/display/drm_dp_dual_mode_helper.h:94
msgid "``DRM_DP_DUAL_MODE_NONE``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:287:
#: include/drm/display/drm_dp_dual_mode_helper.h:95
msgid "No DP dual mode adaptor"
msgstr ""

#: ../../../gpu/drm-kms-helpers:287:
#: include/drm/display/drm_dp_dual_mode_helper.h:97
msgid "``DRM_DP_DUAL_MODE_UNKNOWN``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:287:
#: include/drm/display/drm_dp_dual_mode_helper.h:98
msgid "Could be either none or type 1 DVI adaptor"
msgstr ""

#: ../../../gpu/drm-kms-helpers:287:
#: include/drm/display/drm_dp_dual_mode_helper.h:100
msgid "``DRM_DP_DUAL_MODE_TYPE1_DVI``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:287:
#: include/drm/display/drm_dp_dual_mode_helper.h:101
msgid "Type 1 DVI adaptor"
msgstr ""

#: ../../../gpu/drm-kms-helpers:287:
#: include/drm/display/drm_dp_dual_mode_helper.h:103
msgid "``DRM_DP_DUAL_MODE_TYPE1_HDMI``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:287:
#: include/drm/display/drm_dp_dual_mode_helper.h:104
msgid "Type 1 HDMI adaptor"
msgstr ""

#: ../../../gpu/drm-kms-helpers:287:
#: include/drm/display/drm_dp_dual_mode_helper.h:106
msgid "``DRM_DP_DUAL_MODE_TYPE2_DVI``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:287:
#: include/drm/display/drm_dp_dual_mode_helper.h:107
msgid "Type 2 DVI adaptor"
msgstr ""

#: ../../../gpu/drm-kms-helpers:287:
#: include/drm/display/drm_dp_dual_mode_helper.h:109
msgid "``DRM_DP_DUAL_MODE_TYPE2_HDMI``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:287:
#: include/drm/display/drm_dp_dual_mode_helper.h:110
msgid "Type 2 HDMI adaptor"
msgstr ""

#: ../../../gpu/drm-kms-helpers:287:
#: include/drm/display/drm_dp_dual_mode_helper.h:112
msgid "``DRM_DP_DUAL_MODE_LSPCON``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:287:
#: include/drm/display/drm_dp_dual_mode_helper.h:113
msgid "Level shifter / protocol converter"
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:51
msgid "Read from the DP dual mode adaptor register(s)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:57
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:121
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:193
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:266
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:310
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:352
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:440
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:488
#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2583
#: drivers/gpu/drm/drm_edid.c:2595 drivers/gpu/drm/drm_edid.c:2668
#: drivers/gpu/drm/drm_edid.c:2828 drivers/gpu/drm/drm_edid.c:2872
#: drivers/gpu/drm/drm_edid.c:2901 ../../../gpu/drm-kms-helpers:393:
#: include/drm/display/drm_scdc_helper.h:46
#: include/drm/display/drm_scdc_helper.h:64 ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:65
#: drivers/gpu/drm/display/drm_scdc_helper.c:105
msgid "``struct i2c_adapter *adapter``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:52
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:116
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:192
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:265
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:309
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:351
msgid "I2C adapter for the DDC bus"
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:54
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:118
#: ../../../gpu/drm-kms-helpers:393: include/drm/display/drm_scdc_helper.h:43
#: include/drm/display/drm_scdc_helper.h:61 ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:62
#: drivers/gpu/drm/display/drm_scdc_helper.c:102
msgid "``u8 offset``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:53
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:117
msgid "register offset"
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:54
msgid "buffer for return data"
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:55
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:119
msgid "size of the buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:56
msgid ""
"Reads **size** bytes from the DP dual mode adaptor registers starting at "
"**offset**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:60
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:124
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:319
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:358
msgid "0 on success, negative error code on failure"
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:115
msgid "Write to the DP dual mode adaptor register(s)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:119
#: ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:103
#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:1791
#: drivers/video/hdmi.c:1880
msgid "``const void *buffer``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:118
msgid "buffer for write data"
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:120
msgid ""
"Writes **size** bytes to the DP dual mode adaptor registers starting at "
"**offset**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:190
msgid "Identify the DP dual mode adaptor"
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:196
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:268
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:312
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:354
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:442
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:490
msgid "``const struct drm_device *dev``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:191
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:263
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:307
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:349
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:438
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:486
msgid ":c:type:`drm_device` to use"
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:193
msgid "Attempt to identify the type of the DP dual mode adaptor used."
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:195
msgid ""
"Note that when the answer is **DRM_DP_DUAL_MODE_UNKNOWN** it's not certain "
"whether we're dealing with a native HDMI port or a type 1 DVI dual mode "
"adaptor. The driver will have to use some other hardware/driver specific "
"mechanism to make that distinction."
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:202
msgid "The type of the DP dual mode adaptor used"
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:262
msgid "Max TMDS clock for DP dual mode adaptor"
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:265
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:309
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:351
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:413
msgid "``enum drm_dp_dual_mode_type type``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:264
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:308
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:350
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:408
msgid "DP dual mode adaptor type"
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:266
msgid ""
"Determine the max TMDS clock the adaptor supports based on the type of the "
"dual mode adaptor and the DP_DUAL_MODE_MAX_TMDS_CLOCK register (on type2 "
"adaptors). As some type 1 adaptors have problems with registers (see "
"comments in drm_dp_dual_mode_detect()) we don't read the register on those, "
"instead we simply assume a 165 MHz limit based on the specification."
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:274
msgid "Maximum supported TMDS clock rate for the DP dual mode adaptor in kHz."
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:306
msgid "Get the state of the TMDS output buffers in the DP dual mode adaptor"
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:311
msgid "``bool *enabled``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:310
msgid "current state of the TMDS output buffers"
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:311
msgid ""
"Get the state of the TMDS output buffers in the adaptor. For type2 adaptors "
"this is queried from the DP_DUAL_MODE_TMDS_OEN register. As some type 1 "
"adaptors have problems with registers (see comments in "
"drm_dp_dual_mode_detect()) we don't read the register on those, instead we "
"simply assume that the buffers are always enabled."
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:348
msgid "Enable/disable TMDS output buffers in the DP dual mode adaptor"
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:352
msgid "enable (as opposed to disable) the TMDS output buffers"
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:353
msgid ""
"Set the state of the TMDS output buffers in the adaptor. For type2 this is "
"set via the DP_DUAL_MODE_TMDS_OEN register. Type1 adaptors do not support "
"any register writes."
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:407
msgid "Get the name of the DP dual mode adaptor type as a string"
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:410
msgid "String representation of the DP dual mode adaptor type"
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:436
msgid "Get LSPCON's current mode of operation by reading offset (0x80, 0x41)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:439
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:487
msgid "I2C-over-aux adapter"
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:441
msgid "``enum drm_lspcon_mode *mode``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:440
msgid "current lspcon mode of operation output variable"
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:442
msgid ""
"0 on success, sets the current_mode value to appropriate mode -error on "
"failure"
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:484
msgid "Change LSPCON's mode of operation by writing offset (0x80, 0x40)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:489
msgid "``enum drm_lspcon_mode mode``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:488
msgid "required mode of operation"
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:490
msgid "``int time_out``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:489
msgid "LSPCON mode change settle timeout"
msgstr ""

#: ../../../gpu/drm-kms-helpers:290:
#: drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:491
msgid "0 on success, -error on failure/timeout"
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:294
msgid "Display Port MST Helpers"
msgstr ""

#: ../../../gpu/drm-kms-helpers:299:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:54
msgid ""
"These functions contain parts of the DisplayPort 1.2a MultiStream Transport "
"protocol. The helpers contain a topology manager and bandwidth manager. The "
"helpers encapsulate the sending and received of sideband msgs."
msgstr ""

#: ../../../gpu/drm-kms-helpers:302:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1364
msgid ""
"The refcounting schemes for :c:type:`struct drm_dp_mst_branch "
"<drm_dp_mst_branch>` and :c:type:`struct drm_dp_mst_port <drm_dp_mst_port>` "
"are somewhat unusual. Both ports and branch devices have two different kinds "
"of refcounts: topology refcounts, and malloc refcounts."
msgstr ""

#: ../../../gpu/drm-kms-helpers:302:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1368
msgid ""
"Topology refcounts are not exposed to drivers, and are handled internally by "
"the DP MST helpers. The helpers use them in order to prevent the in-memory "
"topology state from being changed in the middle of critical operations like "
"changing the internal state of payload allocations. This means each branch "
"and port will be considered to be connected to the rest of the topology "
"until its topology refcount reaches zero. Additionally, for ports this means "
"that their associated :c:type:`struct drm_connector <drm_connector>` will "
"stay registered with userspace until the port's refcount reaches 0."
msgstr ""

#: ../../../gpu/drm-kms-helpers:302:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1380
msgid ""
"Malloc references are used to keep a :c:type:`struct drm_dp_mst_port "
"<drm_dp_mst_port>` or :c:type:`struct drm_dp_mst_branch <drm_dp_mst_branch>` "
"allocated even after all of its topology references have been dropped, so "
"that the driver or MST helpers can safely access each branch's last known "
"state before it was disconnected from the topology. When the malloc refcount "
"of a port or branch reaches 0, the memory allocation containing the :c:type:"
"`struct drm_dp_mst_branch <drm_dp_mst_branch>` or :c:type:`struct "
"drm_dp_mst_port <drm_dp_mst_port>` respectively will be freed."
msgstr ""

#: ../../../gpu/drm-kms-helpers:302:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1388
msgid ""
"For :c:type:`struct drm_dp_mst_branch <drm_dp_mst_branch>`, malloc refcounts "
"are not currently exposed to drivers. As of writing this documentation, "
"there are no drivers that have a usecase for accessing :c:type:`struct "
"drm_dp_mst_branch <drm_dp_mst_branch>` outside of the MST helpers. Exposing "
"this API to drivers in a race-free manner would take more tweaking of the "
"refcounting scheme, however patches are welcome provided there is a "
"legitimate driver usecase for this."
msgstr ""

#: ../../../gpu/drm-kms-helpers:302:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1398
msgid ""
"Let's take a look at why the relationship between topology and malloc "
"refcounts is designed the way it is."
msgstr ""

#: ../../../gpu/drm-kms-helpers:302:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1403
msgid ""
"An example of topology and malloc refs in a DP MST topology with two active "
"payloads. Topology refcount increments are indicated by solid lines, and "
"malloc refcount increments are indicated by dashed lines. Each starts from "
"the branch which incremented the refcount, and ends at the branch to which "
"the refcount belongs to, i.e. the arrow points the same way as the C "
"pointers used to reference a structure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:302:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1410
msgid ""
"As you can see in the above figure, every branch increments the topology "
"refcount of its children, and increments the malloc refcount of its parent. "
"Additionally, every payload increments the malloc refcount of its assigned "
"port by 1."
msgstr ""

#: ../../../gpu/drm-kms-helpers:302:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1415
msgid ""
"So, what would happen if MSTB #3 from the above figure was unplugged from "
"the system, but the driver hadn't yet removed payload #2 from port #3? The "
"topology would start to look like the figure below."
msgstr ""

#: ../../../gpu/drm-kms-helpers:302:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1421
msgid ""
"Ports and branch devices which have been released from memory are colored "
"grey, and references which have been removed are colored red."
msgstr ""

#: ../../../gpu/drm-kms-helpers:302:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1424
msgid ""
"Whenever a port or branch device's topology refcount reaches zero, it will "
"decrement the topology refcounts of all its children, the malloc refcount of "
"its parent, and finally its own malloc refcount. For MSTB #4 and port #4, "
"this means they both have been disconnected from the topology and freed from "
"memory. But, because payload #2 is still holding a reference to port #3, "
"port #3 is removed from the topology but its :c:type:`struct drm_dp_mst_port "
"<drm_dp_mst_port>` is still accessible from memory. This also means port #3 "
"has not yet decremented the malloc refcount of MSTB #3, so its :c:type:"
"`struct drm_dp_mst_branch <drm_dp_mst_branch>` will also stay allocated in "
"memory until port #3's malloc refcount reaches 0."
msgstr ""

#: ../../../gpu/drm-kms-helpers:302:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1435
msgid ""
"This relationship is necessary because in order to release payload #2, we "
"need to be able to figure out the last relative of port #3 that's still "
"connected to the topology. In this case, we would travel up the topology as "
"shown below."
msgstr ""

#: ../../../gpu/drm-kms-helpers:302:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1442
msgid ""
"And finally, remove payload #2 by communicating with port #2 through "
"sideband transactions."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308: include/drm/display/drm_dp_mst_helper.h:60
msgid "MST port"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308: include/drm/display/drm_dp_mst_helper.h:95
#: include/drm/display/drm_dp_mst_helper.h:199
msgid "``topology_kref``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308: include/drm/display/drm_dp_mst_helper.h:96
msgid ""
"refcount for this port's lifetime in the topology, only the DP MST helpers "
"should need to touch this"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:101
#: include/drm/display/drm_dp_mst_helper.h:205
msgid "``malloc_kref``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:102
msgid ""
"refcount for the memory allocation containing this structure. See "
"drm_dp_mst_get_port_malloc() and drm_dp_mst_put_port_malloc()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:109
#: include/drm/display/drm_dp_mst_helper.h:213
msgid "``topology_ref_history``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:110
#: include/drm/display/drm_dp_mst_helper.h:214
msgid ""
"A history of each topology reference/dereference. See "
"CONFIG_DRM_DEBUG_DP_MST_TOPOLOGY_REFS."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308: include/drm/display/drm_dp_mst_helper.h:61
msgid "``port_num``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308: include/drm/display/drm_dp_mst_helper.h:62
msgid "port number"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308: include/drm/display/drm_dp_mst_helper.h:62
msgid "``input``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308: include/drm/display/drm_dp_mst_helper.h:63
msgid ""
"if this port is an input port. Protected by :c:type:`drm_dp_mst_topology_mgr."
"base <drm_dp_mst_topology_mgr>`.lock."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308: include/drm/display/drm_dp_mst_helper.h:64
msgid "``mcs``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308: include/drm/display/drm_dp_mst_helper.h:65
msgid ""
"message capability status - DP 1.2 spec. Protected by :c:type:"
"`drm_dp_mst_topology_mgr.base <drm_dp_mst_topology_mgr>`.lock."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308: include/drm/display/drm_dp_mst_helper.h:66
msgid "``ddps``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308: include/drm/display/drm_dp_mst_helper.h:67
msgid ""
"DisplayPort Device Plug Status - DP 1.2. Protected by :c:type:"
"`drm_dp_mst_topology_mgr.base <drm_dp_mst_topology_mgr>`.lock."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308: include/drm/display/drm_dp_mst_helper.h:68
msgid "``pdt``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308: include/drm/display/drm_dp_mst_helper.h:69
msgid ""
"Peer Device Type. Protected by :c:type:`drm_dp_mst_topology_mgr.base "
"<drm_dp_mst_topology_mgr>`.lock."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308: include/drm/display/drm_dp_mst_helper.h:70
msgid "``ldps``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308: include/drm/display/drm_dp_mst_helper.h:71
msgid ""
"Legacy Device Plug Status. Protected by :c:type:`drm_dp_mst_topology_mgr."
"base <drm_dp_mst_topology_mgr>`.lock."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308: include/drm/display/drm_dp_mst_helper.h:72
msgid "``dpcd_rev``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308: include/drm/display/drm_dp_mst_helper.h:73
msgid ""
"DPCD revision of device on this port. Protected by :c:type:"
"`drm_dp_mst_topology_mgr.base <drm_dp_mst_topology_mgr>`.lock."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308: include/drm/display/drm_dp_mst_helper.h:74
msgid "``num_sdp_streams``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308: include/drm/display/drm_dp_mst_helper.h:75
msgid ""
"Number of simultaneous streams. Protected by :c:type:"
"`drm_dp_mst_topology_mgr.base <drm_dp_mst_topology_mgr>`.lock."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308: include/drm/display/drm_dp_mst_helper.h:76
msgid "``num_sdp_stream_sinks``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308: include/drm/display/drm_dp_mst_helper.h:77
msgid ""
"Number of stream sinks. Protected by :c:type:`drm_dp_mst_topology_mgr.base "
"<drm_dp_mst_topology_mgr>`.lock."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308: include/drm/display/drm_dp_mst_helper.h:78
msgid "``full_pbn``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308: include/drm/display/drm_dp_mst_helper.h:79
msgid ""
"Max possible bandwidth for this port. Protected by :c:type:"
"`drm_dp_mst_topology_mgr.base <drm_dp_mst_topology_mgr>`.lock."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308: include/drm/display/drm_dp_mst_helper.h:80
#: include/drm/display/drm_dp_mst_helper.h:584
msgid "``next``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308: include/drm/display/drm_dp_mst_helper.h:81
msgid "link to next port on this branch device"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:127
msgid "``mstb``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:128
msgid ""
"the branch device connected to this port, if there is one. This should be "
"considered protected for reading by :c:type:`drm_dp_mst_topology_mgr.lock "
"<drm_dp_mst_topology_mgr>`. There are two exceptions to this: :c:type:"
"`drm_dp_mst_topology_mgr.up_req_work <drm_dp_mst_topology_mgr>` and :c:type:"
"`drm_dp_mst_topology_mgr.work <drm_dp_mst_topology_mgr>`, which do not grab :"
"c:type:`drm_dp_mst_topology_mgr.lock <drm_dp_mst_topology_mgr>` during reads "
"but are the only updaters of this list and are protected from writing "
"concurrently by :c:type:`drm_dp_mst_topology_mgr.probe_lock "
"<drm_dp_mst_topology_mgr>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308: include/drm/display/drm_dp_mst_helper.h:81
#: include/drm/display/drm_dp_mst_helper.h:659
msgid "``aux``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308: include/drm/display/drm_dp_mst_helper.h:82
msgid ""
"i2c aux transport to talk to device connected to this port, protected by :c:"
"type:`drm_dp_mst_topology_mgr.base <drm_dp_mst_topology_mgr>`.lock."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308: include/drm/display/drm_dp_mst_helper.h:83
msgid "``passthrough_aux``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308: include/drm/display/drm_dp_mst_helper.h:84
msgid ""
"parent aux to which DSC pass-through requests should be sent, only set if "
"DSC pass-through is possible."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308: include/drm/display/drm_dp_mst_helper.h:85
msgid "``parent``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308: include/drm/display/drm_dp_mst_helper.h:86
msgid "branch device parent of this port"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308: include/drm/display/drm_dp_mst_helper.h:87
msgid ""
"DRM connector this port is connected to. Protected by :c:type:"
"`drm_dp_mst_topology_mgr.base <drm_dp_mst_topology_mgr>`.lock."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308: include/drm/display/drm_dp_mst_helper.h:88
#: include/drm/display/drm_dp_mst_helper.h:188
#: include/drm/display/drm_dp_mst_helper.h:597
#: include/drm/display/drm_dp_mst_helper.h:1027
#: include/drm/display/drm_dp_mst_helper.h:1046
#: include/drm/display/drm_dp_mst_helper.h:1063
msgid "``mgr``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308: include/drm/display/drm_dp_mst_helper.h:89
msgid "topology manager this port lives under."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:145
msgid "``cached_edid``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:146
msgid ""
"for DP logical ports - make tiling work by ensuring that the EDID for all "
"connectors is read immediately."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:151
msgid "``fec_capable``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:152
msgid ""
"bool indicating if FEC can be supported up to that point in the MST topology."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308: include/drm/display/drm_dp_mst_helper.h:89
msgid ""
"This structure represents an MST port endpoint on a device somewhere in the "
"MST topology."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:183
msgid "MST branch device."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:200
msgid ""
"refcount for this branch device's lifetime in the topology, only the DP MST "
"helpers should need to touch this"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:206
msgid ""
"refcount for the memory allocation containing this structure. See "
"drm_dp_mst_get_mstb_malloc() and drm_dp_mst_put_mstb_malloc()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:220
msgid "``destroy_next``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:221
msgid "linked-list entry used by drm_dp_delayed_destroy_work()"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:226
msgid "``rad``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:227
msgid ""
"Relative Address of the MST branch. For :c:type:`drm_dp_mst_topology_mgr."
"mst_primary <drm_dp_mst_topology_mgr>`, it's rad[8] are all 0, unset and "
"unused. For MST branches connected after mst_primary, in each element of "
"rad[] the nibbles are ordered by the most signifcant 4 bits first and the "
"least significant 4 bits second."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:185
msgid "``lct``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:186
msgid "Link count total to talk to this branch device."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:186
msgid "``num_ports``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:187
msgid "number of ports on the branch."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:237
msgid "``ports``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:238
msgid ""
"the list of ports on this branch device. This should be considered protected "
"for reading by :c:type:`drm_dp_mst_topology_mgr.lock "
"<drm_dp_mst_topology_mgr>`. There are two exceptions to this: :c:type:"
"`drm_dp_mst_topology_mgr.up_req_work <drm_dp_mst_topology_mgr>` and :c:type:"
"`drm_dp_mst_topology_mgr.work <drm_dp_mst_topology_mgr>`, which do not grab :"
"c:type:`drm_dp_mst_topology_mgr.lock <drm_dp_mst_topology_mgr>` during reads "
"but are the only updaters of this list and are protected from updating the "
"list concurrently by **drm_dp_mst_topology_mgr.probe_lock**"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:187
msgid "``port_parent``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:188
msgid "pointer to the port parent, NULL if toplevel."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:189
msgid "topology manager for this branch device."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:189
msgid "``link_address_sent``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:190
msgid "if a link address message has been sent to this device yet."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:190
msgid "``guid``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:191
msgid ""
"guid for DP 1.2 branch device. port under this branch can be identified by "
"port #."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:192
msgid ""
"This structure represents an MST branch device, there is one primary branch "
"device at the root, along with any other branches connected to downstream "
"port of parent branches."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:530
msgid "Atomic state struct for an MST payload"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:536
msgid "``port``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:537
msgid "The MST port assigned to this payload"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:540
msgid "``vc_start_slot``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:541
msgid ""
"The time slot that this payload starts on. Because payload start slots can't "
"be determined ahead of time, the contents of this value are UNDEFINED at "
"atomic check time. This shouldn't usually matter, as the start slot should "
"never be relevant for atomic state computations."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:546
msgid ""
"Since this value is determined at commit time instead of check time, this "
"value is protected by the MST helpers ensuring that async commits operating "
"on the given topology never run in parallel. In the event that a driver does "
"need to read this value (e.g. to inform hardware of the starting timeslot "
"for a payload), the driver may either:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:551
msgid ""
"Read this field during the atomic commit after "
"drm_dp_mst_atomic_wait_for_dependencies() has been called, which will ensure "
"the previous MST states payload start slots have been copied over to the new "
"state. Note that a new start slot won't be assigned/removed from this "
"payload until drm_dp_add_payload_part1()/drm_dp_remove_payload_part2() have "
"been called."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:556
msgid ""
"Acquire the MST modesetting lock, and then wait for any pending MST-related "
"commits to get committed to hardware by calling drm_crtc_commit_wait() on "
"each of the :c:type:`drm_crtc_commit` structs in :c:type:"
"`drm_dp_mst_topology_state.commit_deps <drm_dp_mst_topology_state>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:560
msgid ""
"If neither of the two above solutions suffice (e.g. the driver needs to read "
"the start slot in the middle of an atomic commit without waiting for some "
"reason), then drivers should cache this value themselves after changing "
"payloads."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:565
msgid "``vcpi``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:566
msgid "The Virtual Channel Payload Identifier"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:568
msgid "``time_slots``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:569
msgid ""
"The number of timeslots allocated to this payload from the source DP Tx to "
"the immediate downstream DP Rx"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:573
msgid "``pbn``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:574
msgid "The payload bandwidth for this payload"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:576
msgid "``delete``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:577
msgid ""
"Whether or not we intend to delete this payload during this atomic commit"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:578
msgid "``dsc_enabled``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:579
msgid "Whether or not this payload has DSC enabled"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:581
msgid "``payload_allocation_status``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:582
msgid "The allocation status of this payload"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:585
msgid "The list node for this payload"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:531
msgid ""
"The primary atomic state structure for a given MST payload. Stores "
"information like current bandwidth allocation, intended action for this "
"payload, etc."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:589
msgid "DisplayPort MST topology atomic state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:595
msgid "Base private state for atomic"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:598
msgid "The topology manager"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:601
msgid "``pending_crtc_mask``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:602
msgid ""
"A bitmask of all CRTCs this topology state touches, drivers may modify this "
"to add additional dependencies if needed."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:606
msgid "``commit_deps``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:607
msgid ""
"A list of all CRTC commits affecting this topology, this field isn't "
"populated until drm_dp_mst_atomic_wait_for_dependencies() is called."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:610
msgid "``num_commit_deps``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:611
msgid "The number of CRTC commits in **commit_deps**"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:613
msgid "``payload_mask``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:614
msgid "A bitmask of allocated VCPIs, used for VCPI assignments"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:615
msgid "``payloads``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:616
msgid "The list of payloads being created/destroyed in this state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:618
msgid "``total_avail_slots``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:619
msgid "The total number of slots this topology can handle (63 or 64)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:620
msgid "``start_slot``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:621
msgid "The first usable time slot in this topology (1 or 0)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:624
msgid "``pbn_div``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:625
msgid ""
"The current PBN divisor for this topology. The driver is expected to fill "
"this out itself."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:590
msgid ""
"This struct represents the atomic state of the toplevel DisplayPort MST "
"manager"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:633
msgid "DisplayPort MST manager"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:642
msgid "Base private object for atomic"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:647
msgid "device pointer for adding i2c devices etc."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:650
msgid "``cbs``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:651
msgid "callbacks for connector addition and destruction."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:654
msgid "``max_dpcd_transaction_bytes``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:655
msgid "maximum number of bytes to read/write in one go."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:660
msgid "AUX channel for the DP MST connector this topolgy mgr is controlling."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:664
msgid "``max_payloads``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:665
msgid "maximum number of payloads the GPU can generate."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:668
msgid "``conn_base_id``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:669
msgid ""
"DRM connector ID this mgr is connected to. Only used to build the MST "
"connector path value."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:674
msgid "``up_req_recv``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:675
msgid "Message receiver state for up requests."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:679
msgid "``down_rep_recv``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:680
msgid "Message receiver state for replies to down requests."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:686
msgid ""
"protects **mst_state**, **mst_primary**, **dpcd**, and "
"**payload_id_table_cleared**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:691
msgid "``probe_lock``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:692
msgid ""
"Prevents **work** and **up_req_work**, the only writers of :c:type:"
"`drm_dp_mst_port.mstb <drm_dp_mst_port>` and :c:type:`drm_dp_mst_branch."
"ports <drm_dp_mst_branch>`, from racing while they update the topology."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:698
msgid "``mst_state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:699
msgid ""
"If this manager is enabled for an MST capable port. False if no MST sink/"
"branch devices is connected."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:704
msgid "``payload_id_table_cleared``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:705
msgid ""
"Whether or not we've cleared the payload ID table for **mst_primary**. "
"Protected by **lock**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:710
msgid "``reset_rx_state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:711
msgid ""
"The down request's reply and up request message receiver state must be "
"reset, after the topology manager got removed. Protected by **lock**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:717
msgid "``payload_count``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:718
msgid ""
"The number of currently active payloads in hardware. This value is only "
"intended to be used internally by MST helpers for payload tracking, and is "
"only safe to read/write from the atomic commit (not check) context."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:724
msgid "``next_start_slot``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:725
msgid ""
"The starting timeslot to use for new VC payloads. This value is used "
"internally by MST helpers for payload tracking, and is only safe to read/"
"write from the atomic commit (not check) context."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:731
msgid "``mst_primary``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:732
msgid "Pointer to the primary/first branch device."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:736
msgid "``dpcd``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:737
msgid "Cache of DPCD for primary port."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:740
msgid "``sink_count``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:741
msgid "Sink count from DEVICE_SERVICE_IRQ_VECTOR_ESI0."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:746
msgid "Atomic helper callbacks"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:750
msgid "``qlock``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:751
msgid ""
"protects **tx_msg_downq** and :c:type:`drm_dp_sideband_msg_tx.state "
"<drm_dp_sideband_msg_tx>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:755
msgid "``tx_msg_downq``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:756
msgid "List of pending down requests"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:760
msgid "``tx_waitq``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:761
msgid "Wait to queue stall for the tx worker."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:764
msgid "``work``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:765
msgid "Probe work."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:768
msgid "``tx_work``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:769
msgid ""
"Sideband transmit worker. This can nest within the main **work** worker for "
"each transaction **work** launches."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:774
msgid "``destroy_port_list``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:775
msgid "List of to be destroyed connectors."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:778
msgid "``destroy_branch_device_list``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:779
msgid "List of to be destroyed branch devices."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:783
msgid "``delayed_destroy_lock``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:784
msgid "Protects **destroy_port_list** and **destroy_branch_device_list**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:789
msgid "``delayed_destroy_wq``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:790
msgid ""
"Workqueue used for delayed_destroy_work items. A dedicated WQ makes it "
"possible to drain any requeued work items on it."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:796
msgid "``delayed_destroy_work``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:797
msgid ""
"Work item to destroy MST port and branch devices, needed to avoid locking "
"inversion."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:802
msgid "``up_req_list``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:803
msgid ""
"List of pending up requests from the topology that need to be processed, in "
"chronological order."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:807
msgid "``up_req_lock``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:808
msgid "Protects **up_req_list**"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:811
msgid "``up_req_work``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:812
msgid ""
"Work item to process up requests received from the topology. Needed to avoid "
"blocking hotplug handling and sideband transmissions."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:819
msgid "``topology_ref_history_lock``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:820
msgid ""
"protects :c:type:`drm_dp_mst_port.topology_ref_history <drm_dp_mst_port>` "
"and :c:type:`drm_dp_mst_branch.topology_ref_history <drm_dp_mst_branch>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:634
msgid ""
"This struct represents the toplevel displayport MST topology manager. There "
"should be one instance of this for every MST capable DP connector on the GPU."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:835
msgid "sink's MST mode capability"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:841
msgid "``DRM_DP_SST``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:842
msgid "The sink does not support MST nor single stream sideband messaging."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:845
msgid "``DRM_DP_MST``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:846
msgid ""
"Sink supports MST, more than one stream and single stream sideband messaging."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:849
msgid "``DRM_DP_SST_SIDEBAND_MSG``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:850
msgid "Sink supports only one stream and single stream sideband messaging."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:983
msgid "private atomic state iterator function for macro-internal use"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:985
#: include/drm/display/drm_dp_mst_helper.h:1025
#: include/drm/display/drm_dp_mst_helper.h:1044
#: include/drm/display/drm_dp_mst_helper.h:1061
msgid ":c:type:`struct drm_atomic_state <drm_atomic_state>` pointer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:987
msgid "``struct drm_dp_mst_topology_mgr **mgr``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:986
msgid ""
"pointer to the :c:type:`struct drm_dp_mst_topology_mgr "
"<drm_dp_mst_topology_mgr>` iteration cursor"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:988
msgid "``struct drm_dp_mst_topology_state **old_state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:987
msgid ""
"optional pointer to the old :c:type:`struct drm_dp_mst_topology_state "
"<drm_dp_mst_topology_state>` iteration cursor"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:990
msgid "``struct drm_dp_mst_topology_state **new_state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:989
msgid ""
"optional pointer to the new :c:type:`struct drm_dp_mst_topology_state "
"<drm_dp_mst_topology_state>` iteration cursor"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:992
msgid "``int i``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:991
#: include/drm/display/drm_dp_mst_helper.h:1031
#: include/drm/display/drm_dp_mst_helper.h:1048
#: include/drm/display/drm_dp_mst_helper.h:1065
msgid "int iteration cursor, for macro-internal use"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:992
msgid ""
"Used by for_each_oldnew_mst_mgr_in_state(), for_each_old_mst_mgr_in_state(), "
"and for_each_new_mst_mgr_in_state(). Don't call this directly."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:997
msgid ""
"True if the current :c:type:`struct drm_private_obj <drm_private_obj>` is a :"
"c:type:`struct drm_dp_mst_topology_mgr <drm_dp_mst_topology_mgr>`, false "
"otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:1025
msgid ""
"``for_each_oldnew_mst_mgr_in_state (__state, mgr, old_state, new_state, "
"__i)``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:1023
#: include/drm/display/drm_dp_mst_helper.h:1042
#: include/drm/display/drm_dp_mst_helper.h:1059
msgid "iterate over all DP MST topology managers in an atomic update"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:1029
#: include/drm/display/drm_dp_mst_helper.h:1048
#: include/drm/display/drm_dp_mst_helper.h:1065
msgid "``__state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:1026
#: include/drm/display/drm_dp_mst_helper.h:1045
#: include/drm/display/drm_dp_mst_helper.h:1062
msgid ""
":c:type:`struct drm_dp_mst_topology_mgr <drm_dp_mst_topology_mgr>` iteration "
"cursor"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:1028
#: include/drm/display/drm_dp_mst_helper.h:1047
msgid "``old_state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:1027
#: include/drm/display/drm_dp_mst_helper.h:1046
msgid ""
":c:type:`struct drm_dp_mst_topology_state <drm_dp_mst_topology_state>` "
"iteration cursor for the old state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:1030
#: include/drm/display/drm_dp_mst_helper.h:1064
msgid "``new_state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:1029
#: include/drm/display/drm_dp_mst_helper.h:1063
msgid ""
":c:type:`struct drm_dp_mst_topology_state <drm_dp_mst_topology_state>` "
"iteration cursor for the new state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:1032
#: include/drm/display/drm_dp_mst_helper.h:1049
#: include/drm/display/drm_dp_mst_helper.h:1066
msgid "``__i``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:1032
msgid ""
"This iterates over all DRM DP MST topology managers in an atomic update, "
"tracking both old and new state. This is useful in places where the state "
"delta needs to be considered, for example in atomic check functions."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:1044
msgid "``for_each_old_mst_mgr_in_state (__state, mgr, old_state, __i)``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:1049
msgid ""
"This iterates over all DRM DP MST topology managers in an atomic update, "
"tracking only the old state. This is useful in disable functions, where we "
"need the old state the hardware is still in."
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:1061
msgid "``for_each_new_mst_mgr_in_state (__state, mgr, new_state, __i)``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:308:
#: include/drm/display/drm_dp_mst_helper.h:1066
msgid ""
"This iterates over all DRM DP MST topology managers in an atomic update, "
"tracking only the new state. This is useful in enable functions, where we "
"need the new state the hardware should be in when the atomic commit "
"operation has completed."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1494
msgid "Increment the malloc refcount of an MST port"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1500
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1525
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:2236
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:2258
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4297
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4352
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4384
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4413
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4504
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5232
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5468
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:6054
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:6070
#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1860
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1898
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1923
msgid "``struct drm_dp_mst_port *port``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1495
msgid ""
"The :c:type:`struct drm_dp_mst_port <drm_dp_mst_port>` to increment the "
"malloc refcount of"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1496
msgid ""
"Increments :c:type:`drm_dp_mst_port.malloc_kref <drm_dp_mst_port>`. When :c:"
"type:`drm_dp_mst_port.malloc_kref <drm_dp_mst_port>` reaches 0, the memory "
"allocation for **port** will be released and **port** may no longer be used."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1500
msgid ""
"Because **port** could potentially be freed at any time by the DP MST "
"helpers if :c:type:`drm_dp_mst_port.malloc_kref <drm_dp_mst_port>` reaches "
"0, including during a call to this function, drivers that which to make use "
"of :c:type:`struct drm_dp_mst_port <drm_dp_mst_port>` should ensure that "
"they grab at least one main malloc reference to their MST ports in :c:type:"
"`drm_dp_mst_topology_cbs.add_connector <drm_dp_mst_topology_cbs>`. This "
"callback is called before there is any chance for :c:type:`drm_dp_mst_port."
"malloc_kref <drm_dp_mst_port>` to reach 0."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1507
msgid "See also: drm_dp_mst_put_port_malloc()"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1519
msgid "Decrement the malloc refcount of an MST port"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1520
msgid ""
"The :c:type:`struct drm_dp_mst_port <drm_dp_mst_port>` to decrement the "
"malloc refcount of"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1521
msgid ""
"Decrements :c:type:`drm_dp_mst_port.malloc_kref <drm_dp_mst_port>`. When :c:"
"type:`drm_dp_mst_port.malloc_kref <drm_dp_mst_port>` reaches 0, the memory "
"allocation for **port** will be released and **port** may no longer be used."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1525
msgid "See also: drm_dp_mst_get_port_malloc()"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:2233
msgid "Late MST connector registration"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:2234
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:2256
msgid "The MST connector"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:2235
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:2257
msgid "The MST port for this connector"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:2236
msgid ""
"Helper to register the remote aux device for this MST port. Drivers should "
"call this from their mst connector's late_register hook to enable MST aux "
"devices."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:2255
msgid "Early MST connector unregistration"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:2258
msgid ""
"Helper to unregister the remote aux device for this MST port, registered by "
"drm_dp_mst_connector_late_register(). Drivers should call this from their "
"mst connector's early_unregister hook."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3308
msgid "Execute payload update part 1"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3314
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3368
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3399
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3434
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3643
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3732
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3759
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3783
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4218
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4270
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4296
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4351
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4383
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4412
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4503
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4680
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4762
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4903
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5235
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5407
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5523
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5631
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5650
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5674
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5701
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5770
msgid "``struct drm_dp_mst_topology_mgr *mgr``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3309
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3363
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3394
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3429
msgid "Manager to use."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3311
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3365
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3396
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4741
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5524
msgid "``struct drm_dp_mst_topology_state *mst_state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3310
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3364
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3395
msgid "The MST atomic state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3312
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3366
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3431
msgid "``struct drm_dp_mst_atomic_payload *payload``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3311
msgid "The payload to write"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3312
msgid ""
"Determines the starting time slot for the given payload, and programs the "
"VCPI for this payload into the DPCD of DPRX. After calling this, the driver "
"should generate ACT and payload packets."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3316
msgid "0 on success, error code on failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3362
msgid "Remove an MST payload along the virtual channel"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3365
msgid "The payload to remove"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3366
msgid ""
"Removes a payload along the virtual channel if it was successfully "
"allocated. After calling this, the driver should set HW to generate ACT and "
"then switch to new payload allocation state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3393
msgid "Remove an MST payload locally"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3397
msgid "``const struct drm_dp_mst_atomic_payload *old_payload``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3396
msgid "The payload with its old state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3398
msgid "``struct drm_dp_mst_atomic_payload *new_payload``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3397
msgid "The payload with its latest state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3398
msgid ""
"Updates the starting time slots of all other payloads which would have been "
"shifted towards the start of the payload ID table as a result of removing a "
"payload. Driver should call this function whenever it removes a payload in "
"its HW. It's independent to the result of payload allocation/deallocation at "
"branch devices along the virtual channel."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3428
msgid "Execute payload update part 2"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3430
msgid "The payload to update"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3431
msgid ""
"If **payload** was successfully assigned a starting time slot by "
"drm_dp_add_payload_part1(), this function will send the sideband messages to "
"finish allocating this payload."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3582
msgid "get the VC payload BW for an MTP link"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3585
msgid "``int link_lane_count``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3584
msgid "lane count"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3585
msgid ""
"Calculate the total bandwidth of a MultiStream Transport link. The returned "
"value is in units of PBNs/(timeslots/1 MTP). This value can be used to "
"convert the number of PBNs required for a given stream to the number of "
"timeslots this stream requires in each MTP."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3590
msgid "Returns the BW / timeslot value in 20.12 fixed point format."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3609
msgid "Read the sink's MST mode capability"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3611
msgid "A cached copy of the DPCD capabilities for this sink"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3613
msgid "enum drm_dp_mst_mode to indicate MST mode capability"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3637
msgid "Set the MST state for a topology manager"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3638
msgid "manager to set state for"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3640
msgid "``bool mst_state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3639
msgid "true to enable MST on this connector - false to disable."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3640
msgid ""
"This is called by the driver when it detects an MST capable device plugged "
"into a DP MST capable port, or when a DP MST capable device is unplugged."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3726
msgid "Queue a topology probe"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3727
msgid "manager to probe"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3728
msgid ""
"Queue a work to probe the MST topology. Driver's should call this only to "
"sync the topology's HW->SW state after the MST link's parameters have "
"changed in a way the state could've become out-of-sync. This is the case for "
"instance when the link rate between the source and first downstream branch "
"device has switched between UHBR and non-UHBR rates. Except of those cases - "
"for instance when a sink gets plugged/unplugged to a port - the SW state "
"will get updated automatically via MST UP message notifications."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3753
msgid "suspend the MST manager"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3754
msgid "manager to suspend"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3755
msgid ""
"This function tells the MST device that we can't handle UP messages anymore. "
"This should stop it from sending any since we are suspended."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3777
msgid "resume the MST manager"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3778
msgid "manager to resume"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3780
msgid "``bool sync``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3779
msgid "whether or not to perform topology reprobing synchronously"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3780
msgid ""
"This will fetch DPCD and see if the device is still there, if it is, it will "
"rewrite the MSTM control bits, and return."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3783
msgid ""
"If the device fails this returns -1, and the driver should do a full MST "
"reprobe, in case we were undocked."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3786
msgid ""
"During system resume (where it is assumed that the driver will be calling "
"drm_atomic_helper_resume()) this function should be called beforehand with "
"**sync** set to true. In contexts like runtime resume where the driver is "
"not expected to be calling drm_atomic_helper_resume(), this function should "
"be called with **sync** set to false in order to avoid deadlocking."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:3793
msgid ""
"-1 if the MST topology was removed while we were suspended, 0 otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4212
msgid "MST hotplug IRQ handle MST event"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4213
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4265
msgid "manager to notify irq for."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4215
msgid "``const u8 *esi``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4214
msgid "4 bytes from SINK_COUNT_ESI"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4216
msgid "``u8 *ack``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4215
msgid "4 bytes used to ack events starting from SINK_COUNT_ESI"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4217
msgid "``bool *handled``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4216
msgid "whether the hpd interrupt was consumed or not"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4217
msgid ""
"This should be called from the driver when it detects a HPD IRQ, along with "
"the value of the DEVICE_SERVICE_IRQ_VECTOR_ESI0. The topology manager will "
"process the sideband messages received as indicated in the "
"DEVICE_SERVICE_IRQ_VECTOR_ESI0 and set the corresponding flags that Driver "
"has to ack the DP receiver later."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4223
msgid ""
"Note that driver shall also call drm_dp_mst_hpd_irq_send_new_request() if "
"the 'handled' is set after calling this function, to try to kick off a new "
"request in the queue if the previous message transaction is completed."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4228
msgid "See also: drm_dp_mst_hpd_irq_send_new_request()"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4264
msgid "MST hotplug IRQ kick off new request"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4266
msgid ""
"This should be called from the driver when mst irq event is handled and "
"acked. Note that new down request should only be sent when previous message "
"transaction is completed. Source is not supposed to generate interleaved "
"message transactions."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4292
msgid "get connection status for an MST port"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4293
msgid "DRM connector for this port"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4294
msgid "The acquisition context to use for grabbing locks"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4295
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4350
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4382
msgid "manager for this port"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4296
msgid "pointer to a port"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4297
msgid "This returns the current connection state for a port."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4348
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4380
msgid "get EDID for an MST port"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4349
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4381
msgid "toplevel connector to get EDID for"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4351
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4383
msgid "unverified pointer to a port."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4352
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4386
msgid ""
"This returns an EDID for the port connected to a connector, It validates the "
"pointer still exists so the caller doesn't require a reference."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4384
msgid "This function is deprecated; please use drm_dp_mst_edid_read() instead."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4409
msgid "Find and add time slots to the state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4410
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4501
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4584
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4628
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5629
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5648
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5672
msgid "global atomic state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4411
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4502
msgid "MST topology manager for the port"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4412
msgid "port to find time slots for"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4414
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5469
msgid "``int pbn``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4413
msgid "bandwidth required for the mode in PBN"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4414
msgid ""
"Allocates time slots to **port**, replacing any previous time slot "
"allocations it may have had. Any atomic drivers which support MST must call "
"this function in their :c:type:`drm_encoder_helper_funcs.atomic_check\\(\\) "
"<drm_encoder_helper_funcs>` callback unconditionally to change the current "
"time slot allocation for the new state, and ensure the MST atomic state is "
"added whenever the state of payloads in the topology changes."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4420
msgid ""
"Allocations set by this function are not checked against the bandwidth "
"restraints of **mgr** until the driver calls drm_dp_mst_atomic_check()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4423
msgid ""
"Additionally, it is OK to call this function multiple times on the same "
"**port** as needed. It is not OK however, to call this function and "
"drm_dp_atomic_release_time_slots() in the same atomic check phase."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4427
msgid "See also: drm_dp_atomic_release_time_slots() drm_dp_mst_atomic_check()"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4432
msgid ""
"Total slots in the atomic state assigned for this port, or a negative error "
"code if the port no longer exists"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4500
msgid "Release allocated time slots"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4503
msgid "The port to release the time slots from"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4504
msgid ""
"Releases any time slots that have been allocated to a port in the atomic "
"state. Any atomic drivers which support MST must call this function "
"unconditionally in their :c:type:`drm_connector_helper_funcs."
"atomic_check\\(\\) <drm_connector_helper_funcs>` callback. This helper will "
"check whether time slots would be released by the new state and respond "
"accordingly, along with ensuring the MST state is always added to the atomic "
"state whenever a new state would modify the state of payloads on the "
"topology."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4512
msgid ""
"It is OK to call this even if **port** has been removed from the system. "
"Additionally, it is OK to call this function multiple times on the same "
"**port** as needed. It is not OK however, to call this function and "
"drm_dp_atomic_find_time_slots() on the same **port** in a single atomic "
"check phase."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4518
msgid "See also: drm_dp_atomic_find_time_slots() drm_dp_mst_atomic_check()"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4523
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4694
msgid "0 on success, negative error code otherwise"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4583
msgid "setup_commit hook for MST helpers"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4585
msgid ""
"This function saves all of the :c:type:`drm_crtc_commit` structs in an "
"atomic state that touch any CRTCs currently assigned to an MST topology. "
"Drivers must call this hook from their :c:type:`drm_mode_config_helper_funcs."
"atomic_commit_setup <drm_mode_config_helper_funcs>` hook."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4590
msgid ""
"0 if all CRTC commits were retrieved successfully, negative error code "
"otherwise"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4626
msgid ""
"Wait for all pending commits on MST topologies, prepare new MST state for "
"commit"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4629
msgid ""
"Goes through any MST topologies in this atomic state, and waits for any "
"pending commits which touched CRTCs that were/are on an MST topology to be "
"programmed to hardware and flipped to before returning. This is to prevent "
"multiple non-blocking commits affecting an MST topology from racing with "
"eachother by forcing them to be executed sequentially in situations where "
"the only resources the modeset objects in these commits share are an MST "
"topology."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4635
msgid ""
"This function also prepares the new MST state for commit by performing some "
"state preparation which can't be done until this point, such as reading back "
"the final VC start slots (which are determined at commit-time) from the "
"previous state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4639
msgid ""
"All MST drivers must call this function after calling "
"drm_atomic_helper_wait_for_dependencies(), or whatever their equivalent of "
"that is."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4676
msgid "Serialize CRTC commits on MST-capable connectors operating in SST mode"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4678
msgid "The new connector state of the :c:type:`drm_connector`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4679
msgid "The MST topology manager for the :c:type:`drm_connector`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4680
msgid ""
"Since MST uses fake :c:type:`drm_encoder` structs, the generic atomic "
"modesetting code isn't able to serialize non-blocking commits happening on "
"the real DP connector of an MST topology switching into/away from MST mode - "
"as the CRTC on the real DP connector and the CRTCs on the connector's MST "
"topology will never share the same :c:type:`drm_encoder`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4685
msgid ""
"This function takes care of this serialization issue, by checking a root MST "
"connector's atomic state to determine if it is about to have a modeset - and "
"then pulling in the MST topology state if so, along with adding any relevant "
"CRTCs to :c:type:`drm_dp_mst_topology_state.pending_crtc_mask "
"<drm_dp_mst_topology_state>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4689
msgid ""
"Drivers implementing MST must call this function from the :c:type:"
"`drm_connector_helper_funcs.atomic_check <drm_connector_helper_funcs>` hook "
"of any physical DP :c:type:`drm_connector` capable of driving MST sinks."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4735
msgid "updates the slot info depending on the DP ecoding format"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4736
msgid "mst_state to update"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4738
msgid "``uint8_t link_encoding_cap``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4737
msgid "the ecoding format on the link"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4756
msgid "Polls for ACT handled status."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4757
msgid "manager to use"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4758
msgid ""
"Tries waiting for the MST hub to finish updating it's payload table by "
"polling for the ACT handled bit for up to 3 seconds (yes-some hubs really "
"take that long)."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4779
msgid "Calculate the PBN for a mode."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4785
msgid "``int clock``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4780
msgid "dot clock"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4782
msgid "``int bpp``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4781
msgid "bpp as .4 binary fixed point"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4782
msgid ""
"This uses the formula in the spec to calculate the PBN value for a mode."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4900
msgid "dump topology to seq file."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4901
msgid "seq_file to dump output to"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4902
msgid "manager to dump current topology for."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:4903
msgid "helper to dump MST topology to a seq file for debugfs."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5229
msgid "check if a port is downstream of a parent port"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5230
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5406
msgid "MST topology manager"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5231
msgid "the port being looked up"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5233
msgid "``struct drm_dp_mst_port *parent``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5232
msgid "the parent port"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5233
msgid ""
"The function returns ``true`` if **port** is downstream of **parent**. If "
"**parent** is ``NULL`` - denoting the root port - the function returns "
"``true`` if **port** is in **mgr**'s topology."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5405
msgid "Pointer to the new struct drm_dp_mst_topology_state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5407
msgid ""
"Whenever there is a change in mst topology DSC configuration would have to "
"be recalculated therefore we need to trigger modeset on all affected CRTCs "
"in that topology"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5412
msgid "See also: drm_dp_mst_atomic_enable_dsc()"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5465
msgid "Set DSC Enable Flag to On/Off"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5466
msgid "Pointer to the new drm_atomic_state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5467
msgid "Pointer to the affected MST Port"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5468
msgid "Newly recalculated bw required for link with DSC enabled"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5469
msgid "Boolean flag to enable or disable DSC on the port"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5470
msgid ""
"This function enables DSC on the given Port by recalculating its vcpi from "
"pbn provided and sets dsc_enable flag to keep track of which ports have DSC "
"enabled"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5520
msgid "Check the atomic state of an MST topology manager"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5521
msgid "The global atomic state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5522
msgid "Manager to check"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5523
msgid "The MST atomic state for **mgr**"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5525
msgid "``struct drm_dp_mst_port **failing_port``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5524
msgid "Returns the port with a BW limitation"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5525
msgid ""
"Checks the given MST manager's topology state for an atomic update to ensure "
"that it's valid. This includes checking whether there's enough bandwidth to "
"support the new timeslot allocations in the atomic update."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5529
msgid ""
"Any atomic drivers supporting DP MST must make sure to call this or the "
"drm_dp_mst_atomic_check() function after checking the rest of their state in "
"their :c:type:`drm_mode_config_funcs.atomic_check\\(\\) "
"<drm_mode_config_funcs>` callback."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5533
msgid ""
"See also: drm_dp_mst_atomic_check() drm_dp_atomic_find_time_slots() "
"drm_dp_atomic_release_time_slots()"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5539
msgid ""
"The non-root port where a BW limit check failed with all the ports "
"downstream of **failing_port** passing the BW limit check. The returned port "
"pointer is valid until at least one payload downstream of it exists."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5544
msgid ""
"``NULL`` if the BW limit check failed at the root port with all the ports "
"downstream of the root port passing the BW limit check."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5548
msgid ""
"``-EINVAL``, if the new state is invalid, because the root port has too many "
"payloads."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5539
msgid "0 if the new state is valid"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5540
msgid "``-ENOSPC``, if the new state is invalid, because of BW limitation"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5541
msgid "**failing_port** is set to:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5582
msgid ""
"Check that the new state of an MST topology in an atomic update is valid"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5584
msgid ""
"Pointer to the new :c:type:`struct drm_dp_mst_topology_state "
"<drm_dp_mst_topology_state>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5585
msgid ""
"Checks the given topology state for an atomic update to ensure that it's "
"valid, calling drm_dp_mst_atomic_check_mgr() for all MST manager in the "
"atomic state. This includes checking whether there's enough bandwidth to "
"support the new timeslot allocations in the atomic update."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5590
msgid ""
"Any atomic drivers supporting DP MST must make sure to call this after "
"checking the rest of their state in their :c:type:`drm_mode_config_funcs."
"atomic_check\\(\\) <drm_mode_config_funcs>` callback."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5594
msgid ""
"See also: drm_dp_mst_atomic_check_mgr() drm_dp_atomic_find_time_slots() "
"drm_dp_atomic_release_time_slots()"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5600
msgid "0 if the new state is valid, negative error code otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5628
msgid "get MST topology state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5630
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5649
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5673
msgid "MST topology manager, also the private object in this case"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5631
msgid ""
"This function wraps drm_atomic_get_priv_obj_state() passing in the MST "
"atomic state vtable so that the private object state returned is that of a "
"MST topology object."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5636
msgid "The MST topology state or error pointer."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5647
msgid "get old MST topology state in atomic state, if any"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5650
msgid ""
"This function wraps drm_atomic_get_old_private_obj_state() passing in the "
"MST atomic state vtable so that the private object state returned is that of "
"a MST topology object."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5655
msgid ""
"The old MST topology state, or NULL if there's no topology state for this "
"MST mgr in the global atomic state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5671
msgid "get new MST topology state in atomic state, if any"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5674
msgid ""
"This function wraps drm_atomic_get_new_private_obj_state() passing in the "
"MST atomic state vtable so that the private object state returned is that of "
"a MST topology object."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5679
msgid ""
"The new MST topology state, or NULL if there's no topology state for this "
"MST mgr in the global atomic state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5695
msgid "initialise a topology manager"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5696
msgid "manager struct to initialise"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5697
msgid "device providing this structure - for i2c addition."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5698
msgid "DP helper aux channel to talk to this device"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5700
msgid "``int max_dpcd_transaction_bytes``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5699
msgid "hw specific DPCD transaction limit"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5701
msgid "``int max_payloads``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5700
msgid "maximum number of payloads this GPU can source"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5702
msgid "``int conn_base_id``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5701
msgid "the connector object ID the MST device is connected to."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5702
msgid "Return 0 for success, or negative error code on failure"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5764
msgid "destroy topology manager."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:5765
msgid "manager to destroy"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:6048
msgid "Get the AUX device for an MST port's parent"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:6049
msgid "MST port whose parent's AUX device is returned"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:6050
msgid ""
"Return the AUX device for **port**'s parent or NULL if port's parent is the "
"root port."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:6064
msgid "Find the correct aux for DSC"
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:6065
msgid "The port to check. A leaf of the MST tree with an attached display."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:6066
msgid ""
"Depending on the situation, DSC may be enabled via the endpoint aux, the "
"immediately upstream aux, or the connector's physical aux."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:6069
msgid ""
"This is both the correct aux to read DSC_CAPABILITY and the correct aux to "
"write DSC_ENABLED."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:6072
msgid ""
"This operation can be expensive (up to four aux reads), so the caller should "
"cache the return."
msgstr ""

#: ../../../gpu/drm-kms-helpers:311:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:6076
msgid "NULL if DSC cannot be enabled on this port, otherwise the aux device"
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:315
msgid "Topology Lifetime Internals"
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:317
msgid ""
"These functions aren't exported to drivers, but are documented here to help "
"make the MST topology helpers easier to understand"
msgstr ""

#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1449
msgid "Increment the malloc refcount of a branch device"
msgstr ""

#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1455
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1473
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1745
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1784
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1810
msgid "``struct drm_dp_mst_branch *mstb``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1451
msgid ""
"The :c:type:`struct drm_dp_mst_branch <drm_dp_mst_branch>` to increment the "
"malloc refcount of"
msgstr ""

#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1452
msgid ""
"Increments :c:type:`drm_dp_mst_branch.malloc_kref <drm_dp_mst_branch>`. "
"When :c:type:`drm_dp_mst_branch.malloc_kref <drm_dp_mst_branch>` reaches 0, "
"the memory allocation for **mstb** will be released and **mstb** may no "
"longer be used."
msgstr ""

#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1456
msgid "See also: drm_dp_mst_put_mstb_malloc()"
msgstr ""

#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1467
msgid "Decrement the malloc refcount of a branch device"
msgstr ""

#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1469
msgid ""
"The :c:type:`struct drm_dp_mst_branch <drm_dp_mst_branch>` to decrement the "
"malloc refcount of"
msgstr ""

#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1470
msgid ""
"Decrements :c:type:`drm_dp_mst_branch.malloc_kref <drm_dp_mst_branch>`. "
"When :c:type:`drm_dp_mst_branch.malloc_kref <drm_dp_mst_branch>` reaches 0, "
"the memory allocation for **mstb** will be released and **mstb** may no "
"longer be used."
msgstr ""

#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1474
msgid "See also: drm_dp_mst_get_mstb_malloc()"
msgstr ""

#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1739
msgid "Increment the topology refcount of a branch device unless it's zero"
msgstr ""

#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1741
msgid ""
":c:type:`struct drm_dp_mst_branch <drm_dp_mst_branch>` to increment the "
"topology refcount of"
msgstr ""

#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1742
msgid ""
"Attempts to grab a topology reference to **mstb**, if it hasn't yet been "
"removed from the topology (e.g. :c:type:`drm_dp_mst_branch.topology_kref "
"<drm_dp_mst_branch>` has reached 0). Holding a topology reference implies "
"that a malloc reference will be held to **mstb** as long as the user holds "
"the topology reference."
msgstr ""

#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1747
msgid ""
"Care should be taken to ensure that the user has at least one malloc "
"reference to **mstb**. If you already have a topology reference to **mstb**, "
"you should use drm_dp_mst_topology_get_mstb() instead."
msgstr ""

#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1751
msgid "See also: drm_dp_mst_topology_get_mstb() drm_dp_mst_topology_put_mstb()"
msgstr ""

#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1756
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1871
msgid "1: A topology reference was grabbed successfully"
msgstr ""

#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1757
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1872
msgid "0: **port** is no longer in the topology, no reference was grabbed"
msgstr ""

#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1778
msgid "Increment the topology refcount of a branch device"
msgstr ""

#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1780
msgid ""
"The :c:type:`struct drm_dp_mst_branch <drm_dp_mst_branch>` to increment the "
"topology refcount of"
msgstr ""

#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1781
msgid ""
"Increments :c:type:`drm_dp_mst_branch.topology_refcount <drm_dp_mst_branch>` "
"without checking whether or not it's already reached 0. This is only valid "
"to use in scenarios where you are already guaranteed to have at least one "
"active topology reference to **mstb**. Otherwise, "
"drm_dp_mst_topology_try_get_mstb() must be used."
msgstr ""

#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1786
msgid ""
"See also: drm_dp_mst_topology_try_get_mstb() drm_dp_mst_topology_put_mstb()"
msgstr ""

#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1804
msgid "release a topology reference to a branch device"
msgstr ""

#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1806
msgid ""
"The :c:type:`struct drm_dp_mst_branch <drm_dp_mst_branch>` to release the "
"topology reference from"
msgstr ""

#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1807
msgid ""
"Releases a topology reference from **mstb** by decrementing :c:type:"
"`drm_dp_mst_branch.topology_kref <drm_dp_mst_branch>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1810
msgid ""
"See also: drm_dp_mst_topology_try_get_mstb() drm_dp_mst_topology_get_mstb()"
msgstr ""

#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1854
msgid "Increment the topology refcount of a port unless it's zero"
msgstr ""

#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1856
msgid ""
":c:type:`struct drm_dp_mst_port <drm_dp_mst_port>` to increment the topology "
"refcount of"
msgstr ""

#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1857
msgid ""
"Attempts to grab a topology reference to **port**, if it hasn't yet been "
"removed from the topology (e.g. :c:type:`drm_dp_mst_port.topology_kref "
"<drm_dp_mst_port>` has reached 0). Holding a topology reference implies that "
"a malloc reference will be held to **port** as long as the user holds the "
"topology reference."
msgstr ""

#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1862
msgid ""
"Care should be taken to ensure that the user has at least one malloc "
"reference to **port**. If you already have a topology reference to **port**, "
"you should use drm_dp_mst_topology_get_port() instead."
msgstr ""

#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1866
msgid "See also: drm_dp_mst_topology_get_port() drm_dp_mst_topology_put_port()"
msgstr ""

#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1892
msgid "Increment the topology refcount of a port"
msgstr ""

#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1893
msgid ""
"The :c:type:`struct drm_dp_mst_port <drm_dp_mst_port>` to increment the "
"topology refcount of"
msgstr ""

#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1894
msgid ""
"Increments :c:type:`drm_dp_mst_port.topology_refcount <drm_dp_mst_port>` "
"without checking whether or not it's already reached 0. This is only valid "
"to use in scenarios where you are already guaranteed to have at least one "
"active topology reference to **port**. Otherwise, "
"drm_dp_mst_topology_try_get_port() must be used."
msgstr ""

#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1899
msgid ""
"See also: drm_dp_mst_topology_try_get_port() drm_dp_mst_topology_put_port()"
msgstr ""

#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1917
msgid "release a topology reference to a port"
msgstr ""

#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1918
msgid ""
"The :c:type:`struct drm_dp_mst_port <drm_dp_mst_port>` to release the "
"topology reference from"
msgstr ""

#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1919
msgid ""
"Releases a topology reference from **port** by decrementing :c:type:"
"`drm_dp_mst_port.topology_kref <drm_dp_mst_port>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:320:
#: drivers/gpu/drm/display/drm_dp_mst_topology.c:1922
msgid ""
"See also: drm_dp_mst_topology_try_get_port() drm_dp_mst_topology_get_port()"
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:328
msgid "MIPI DBI Helper Functions Reference"
msgstr ""

#: ../../../gpu/drm-kms-helpers:330: drivers/gpu/drm/drm_mipi_dbi.c:43
msgid ""
"This library provides helpers for MIPI Display Bus Interface (DBI) "
"compatible display controllers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:330: drivers/gpu/drm/drm_mipi_dbi.c:46
msgid ""
"Many controllers for tiny lcd displays are MIPI compliant and can use this "
"library. If a controller uses registers 0x2A and 0x2B to set the area to "
"update and uses register 0x2C to write to frame memory, it is most likely "
"MIPI compliant."
msgstr ""

#: ../../../gpu/drm-kms-helpers:330: drivers/gpu/drm/drm_mipi_dbi.c:51
msgid ""
"Only MIPI Type 1 displays are supported since a full frame memory is needed."
msgstr ""

#: ../../../gpu/drm-kms-helpers:330: drivers/gpu/drm/drm_mipi_dbi.c:53
msgid "There are 3 MIPI DBI implementation types:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:330: drivers/gpu/drm/drm_mipi_dbi.c:55
msgid "Motorola 6800 type parallel bus"
msgstr ""

#: ../../../gpu/drm-kms-helpers:330: drivers/gpu/drm/drm_mipi_dbi.c:57
msgid "Intel 8080 type parallel bus"
msgstr ""

#: ../../../gpu/drm-kms-helpers:330: drivers/gpu/drm/drm_mipi_dbi.c:59
msgid "SPI type with 3 options:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:330: drivers/gpu/drm/drm_mipi_dbi.c:61
msgid "9-bit with the Data/Command signal as the ninth bit"
msgstr ""

#: ../../../gpu/drm-kms-helpers:330: drivers/gpu/drm/drm_mipi_dbi.c:62
msgid "Same as above except it's sent as 16 bits"
msgstr ""

#: ../../../gpu/drm-kms-helpers:330: drivers/gpu/drm/drm_mipi_dbi.c:63
msgid "8-bit with the Data/Command signal as a separate D/CX pin"
msgstr ""

#: ../../../gpu/drm-kms-helpers:330: drivers/gpu/drm/drm_mipi_dbi.c:65
msgid ""
"Currently mipi_dbi only supports Type C options 1 and 3 with "
"mipi_dbi_spi_init()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:23
#: include/drm/drm_mipi_dbi.h:148
msgid "MIPI DBI interface"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:27
msgid "``cmdlock``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:28
msgid "Command lock"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:32
msgid "``command``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:33
msgid "Bus specific callback executing commands."
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:37
msgid "``read_commands``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:38
msgid "Array of read commands terminated by a zero entry."
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:39
msgid "Reading is disabled if this is NULL."
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:43
msgid "``swap_bytes``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:44
msgid "Swap bytes in buffer before transfer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:48
msgid "``reset``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:49
msgid "Optional reset gpio"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:55
msgid "``spi``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:56
#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:843
#: drivers/gpu/drm/drm_mipi_dbi.c:1236 drivers/gpu/drm/drm_mipi_dbi.c:1321
msgid "SPI device"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:60
msgid "``write_memory_bpw``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:61
msgid "Bits per word used on a MIPI_DCS_WRITE_MEMORY_START transfer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:65
msgid "``dc``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:66
msgid "Optional D/C gpio."
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:70
msgid "``tx_buf9``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:71
msgid "Buffer used for Option 1 9-bit conversion"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:75
msgid "``tx_buf9_len``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:76
msgid "Size of tx_buf9."
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:81
msgid "MIPI DBI device"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:85
#: ../../../gpu/drm-kms-helpers:407: include/linux/hdmi.h:429
msgid "``drm``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:90
msgid "``pipe``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:91
msgid "Display pipe structure"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:96
#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7067
#: drivers/gpu/drm/drm_edid.c:7092
msgid "Connector"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:101
msgid "Fixed display mode"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:105
msgid "``pixel_format``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:106
msgid "Native pixel format (DRM_FORMAT\\_\\*)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:110
#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:30
msgid "``tx_buf``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:111
msgid "Buffer used for transfer (copy clip rect area)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:115
msgid "``rotation``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:116
msgid "initial rotation in degrees Counter Clock Wise"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:120
msgid "``left_offset``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:121
msgid "Horizontal offset of the display relative to the"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:122
#: include/drm/drm_mipi_dbi.h:128
msgid "controller's driver array"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:126
msgid "``top_offset``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:127
msgid "Vertical offset of the display relative to the"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:133
msgid "backlight device (optional)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:137
msgid "``regulator``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:138
msgid "power regulator (Vdd) (optional)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:142
msgid "``io_regulator``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:143
msgid "I/O power regulator (Vddi) (optional)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:147
#: include/drm/drm_mipi_dbi.h:216
msgid "``dbi``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:153
msgid "Driver private data."
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:154
msgid ""
"Necessary for drivers with private data since devm_drm_dev_alloc() can't "
"allocate structures that embed a structure which then again embeds "
"drm_device."
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:212
msgid "``mipi_dbi_command (dbi, cmd, seq...)``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:210
msgid "MIPI DCS command with optional parameter(s)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:211
#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:124
#: drivers/gpu/drm/drm_mipi_dbi.c:147 drivers/gpu/drm/drm_mipi_dbi.c:706
#: drivers/gpu/drm/drm_mipi_dbi.c:724
msgid "MIPI DBI structure"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:213
#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:429
msgid "``cmd``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:212
#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:125
#: drivers/gpu/drm/drm_mipi_dbi.c:148 ../../../gpu/drm-kms-helpers:345:
#: include/drm/drm_mipi_dsi.h:428
msgid "Command"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:214
#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:396
#: include/drm/drm_mipi_dsi.h:414 include/drm/drm_mipi_dsi.h:430
msgid "``seq...``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:213
msgid "Optional parameter(s)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:214
msgid ""
"Send MIPI DCS command to the controller. Use mipi_dbi_command_read() for get/"
"read."
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:241
msgid "``DRM_MIPI_DBI_SIMPLE_DISPLAY_PIPE_FUNCS (enable_)``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:239
msgid "Initializes struct drm_simple_display_pipe_funcs for MIPI-DBI devices"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:245
msgid "``enable_``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:241
msgid "Enable-callback implementation"
msgstr ""

#: ../../../gpu/drm-kms-helpers:333: include/drm/drm_mipi_dbi.h:242
msgid ""
"This macro initializes struct drm_simple_display_pipe_funcs with default "
"values for MIPI-DBI-based devices. The only callback that depends on the "
"hardware is **enable**, for which the driver has to provide an "
"implementation. MIPI-based drivers are encouraged to use this macro for "
"initialization."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:123
msgid "MIPI DCS read command"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:129
#: drivers/gpu/drm/drm_mipi_dbi.c:152 drivers/gpu/drm/drm_mipi_dbi.c:711
#: drivers/gpu/drm/drm_mipi_dbi.c:729 drivers/gpu/drm/drm_mipi_dbi.c:1238
msgid "``struct mipi_dbi *dbi``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:126
#: drivers/gpu/drm/drm_mipi_dbi.c:149 ../../../gpu/drm-kms-helpers:348:
#: drivers/gpu/drm/drm_mipi_dsi.c:1014 drivers/gpu/drm/drm_mipi_dsi.c:1058
msgid "``u8 cmd``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:127
msgid "``u8 *val``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:126
msgid "Value read"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:127
msgid "Send MIPI DCS read command to the controller."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:146
msgid "MIPI DCS command with parameter(s) in an array"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:150
msgid "``u8 *data``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:149
msgid "Parameter buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:151
#: drivers/gpu/drm/drm_mipi_dbi.c:845 drivers/gpu/drm/drm_mipi_dbi.c:1326
#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:917
#: drivers/gpu/drm/drm_mipi_dsi.c:959 drivers/gpu/drm/drm_mipi_dsi.c:987
#: drivers/gpu/drm/drm_mipi_dsi.c:1016 drivers/gpu/drm/drm_mipi_dsi.c:1060
msgid "``size_t len``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:150
#: drivers/gpu/drm/drm_mipi_dbi.c:1325
msgid "Buffer length"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:195
msgid "Copy a framebuffer, transforming it if necessary"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:201
msgid "``void *dst``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:196
msgid "The destination buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:198
msgid "``struct iosys_map *src``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:197
msgid "The source buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:198
msgid "The source framebuffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:200
msgid "``struct drm_rect *clip``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:199
msgid "Clipping rectangle of the area to be copied"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:201
msgid "``bool swap``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:200
msgid "When true, swap MSB/LSB of 16-bit values"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:202
msgid "``struct drm_format_conv_state *fmtcnv_state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:319
msgid "MIPI DBI mode-valid helper"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:320
#: drivers/gpu/drm/drm_mipi_dbi.c:338
msgid "Simple display pipe"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:321
msgid "The mode to test"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:322
msgid ""
"This function validates a given display mode against the MIPI DBI's hardware "
"display. Drivers can use this as their :c:type:"
"`drm_simple_display_pipe_funcs->mode_valid <drm_simple_display_pipe_funcs>` "
"callback."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:337
msgid "Display pipe update helper"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:340
msgid ""
"This function handles framebuffer flushing and vblank events. Drivers can "
"use this as their :c:type:`drm_simple_display_pipe_funcs->update "
"<drm_simple_display_pipe_funcs>` callback."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:371
msgid "MIPI DBI enable helper"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:377
#: drivers/gpu/drm/drm_mipi_dbi.c:597 drivers/gpu/drm/drm_mipi_dbi.c:680
#: drivers/gpu/drm/drm_mipi_dbi.c:812 drivers/gpu/drm/drm_mipi_dbi.c:828
msgid "``struct mipi_dbi_dev *dbidev``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:372
#: drivers/gpu/drm/drm_mipi_dbi.c:807 drivers/gpu/drm/drm_mipi_dbi.c:823
msgid "MIPI DBI device structure"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:373
msgid "CRTC state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:374
#: drivers/gpu/drm/drm_mipi_dbi.c:462 drivers/gpu/drm/drm_mipi_dbi.c:482
#: drivers/gpu/drm/drm_mipi_dbi.c:529
msgid "Plane state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:375
msgid ""
"Flushes the whole framebuffer and enables the backlight. Drivers can use "
"this in their :c:type:`drm_simple_display_pipe_funcs->enable "
"<drm_simple_display_pipe_funcs>` callback."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:379
msgid ""
"Drivers which don't use mipi_dbi_pipe_update() because they have custom "
"framebuffer flushing, can't use this function since they both use the same "
"flushing code."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:434
msgid "MIPI DBI pipe disable helper"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:435
#: drivers/gpu/drm/drm_mipi_dbi.c:461 drivers/gpu/drm/drm_mipi_dbi.c:481
#: drivers/gpu/drm/drm_mipi_dbi.c:497 drivers/gpu/drm/drm_mipi_dbi.c:510
#: drivers/gpu/drm/drm_mipi_dbi.c:528
msgid "Display pipe"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:436
msgid ""
"This function disables backlight if present, if not the display memory is "
"blanked. The regulator is disabled if in use. Drivers can use this as their :"
"c:type:`drm_simple_display_pipe_funcs->disable "
"<drm_simple_display_pipe_funcs>` callback."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:460
msgid "MIPI DBI pipe begin-access helper"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:463
msgid ""
"This function implements struct :c:type:`drm_simple_display_funcs."
"begin_fb_access <drm_simple_display_funcs>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:465
msgid ""
"See drm_gem_begin_shadow_fb_access() for details and "
"mipi_dbi_pipe_cleanup_fb() for cleanup."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:480
msgid "MIPI DBI pipe end-access helper"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:483
msgid ""
"This function implements struct :c:type:`drm_simple_display_funcs."
"end_fb_access <drm_simple_display_funcs>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:485
msgid "See mipi_dbi_pipe_begin_fb_access()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:496
msgid "MIPI DBI plane-reset helper"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:498
msgid ""
"This function implements struct :c:type:`drm_simple_display_funcs."
"reset_plane <drm_simple_display_funcs>` for MIPI DBI planes."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:509
msgid "duplicates MIPI DBI plane state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:511
msgid ""
"This function implements struct :c:type:`drm_simple_display_funcs."
"duplicate_plane_state <drm_simple_display_funcs>` for MIPI DBI planes."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:514
msgid "See drm_gem_duplicate_shadow_plane_state() for additional details."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:527
msgid "cleans up MIPI DBI plane state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:530
msgid ""
"This function implements struct drm_simple_display_funcs.destroy_plane_state "
"for MIPI DBI planes."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:533
msgid "See drm_gem_destroy_shadow_plane_state() for additional details."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:591
msgid "MIPI DBI device initialization with custom formats"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:592
#: drivers/gpu/drm/drm_mipi_dbi.c:675
msgid "MIPI DBI device structure to initialize"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:593
#: drivers/gpu/drm/drm_mipi_dbi.c:676
msgid "Display pipe functions"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:594
msgid "Array of supported formats (DRM_FORMAT\\_\\*)."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:595
msgid "Number of elements in **formats**"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:596
#: drivers/gpu/drm/drm_mipi_dbi.c:677
msgid "Display mode"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:598
#: drivers/gpu/drm/drm_mipi_dbi.c:679 ../../../gpu/drm-kms-helpers:422:
#: drivers/gpu/drm/drm_rect.c:242 drivers/gpu/drm/drm_rect.c:308
msgid "``unsigned int rotation``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:597
#: drivers/gpu/drm/drm_mipi_dbi.c:678
msgid "Initial rotation in degrees Counter Clock Wise"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:599
msgid "``size_t tx_buf_size``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:598
msgid "Allocate a transmit buffer of this size."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:599
msgid ""
"This function sets up a :c:type:`drm_simple_display_pipe` with a :c:type:"
"`drm_connector` that has one fixed :c:type:`drm_display_mode` which is "
"rotated according to **rotation**. This mode is used to set the mode config "
"min/max width/height properties."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:603
msgid ""
"Use mipi_dbi_dev_init() if you want native RGB565 and emulated XRGB8888 "
"format."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:606
msgid ""
"Some of the helper functions expects RGB565 to be the default format and the "
"transmit buffer sized to fit that."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:674
msgid "MIPI DBI device initialization"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:679
msgid ""
"This function sets up a :c:type:`drm_simple_display_pipe` with a :c:type:"
"`drm_connector` that has one fixed :c:type:`drm_display_mode` which is "
"rotated according to **rotation**. This mode is used to set the mode config "
"min/max width/height properties. Additionally :c:type:`mipi_dbi.tx_buf "
"<mipi_dbi>` is allocated."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:684
msgid "Supported formats: Native RGB565 and emulated XRGB8888."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:705
msgid "Hardware reset of controller"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:707
msgid ""
"Reset controller if the :c:type:`mipi_dbi->reset <mipi_dbi>` gpio is set."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:723
msgid "Check if display is on"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:725
msgid ""
"This function checks the Power Mode register (if readable) to see if display "
"output is turned on. This can be used to see if the bootloader has already "
"turned on the display avoiding flicker when the pipeline is enabled."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:731
msgid "true if the display can be verified to be on, false otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:806
msgid "MIPI DBI poweron and reset"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:808
msgid ""
"This function enables the regulator if used and does a hardware and software "
"reset."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:812
msgid "Zero on success, or a negative error code."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:822
msgid "MIPI DBI poweron and conditional reset"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:824
msgid ""
"This function enables the regulator if used and if the display is off, it "
"does a hardware and software reset. If mipi_dbi_display_is_on() determines "
"that the display is on, no reset is performed."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:829
msgid ""
"Zero if the controller was reset, 1 if the display was already on, or a "
"negative error code."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:842
msgid "get the maximum SPI bus speed"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:848
#: drivers/gpu/drm/drm_mipi_dbi.c:1241 drivers/gpu/drm/drm_mipi_dbi.c:1326
msgid "``struct spi_device *spi``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:844
msgid "The transfer buffer length."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:845
msgid ""
"Many controllers have a max speed of 10MHz, but can be pushed way beyond "
"that. Increase reliability by running pixel data at max speed and the rest "
"at 10MHz, preventing transfer glitches from messing up the init settings."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:1235
msgid "Initialize MIPI DBI SPI interface"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:1237
msgid "MIPI DBI structure to initialize"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:1239
msgid "``struct gpio_desc *dc``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:1238
msgid "D/C gpio (optional)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:1239
msgid ""
"This function sets :c:type:`mipi_dbi->command <mipi_dbi>`, enables :c:type:"
"`mipi_dbi->read_commands <mipi_dbi>` for the usual read commands. It should "
"be followed by a call to mipi_dbi_dev_init() or a driver-specific init."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:1243
msgid ""
"If **dc** is set, a Type C Option 3 interface is assumed, if not Type C "
"Option 1."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:1246
msgid ""
"If the command is ``MIPI_DCS_WRITE_MEMORY_START`` and the pixel format is "
"RGB565, endianness has to be taken into account. The MIPI DBI serial "
"interface is big endian and framebuffers are assumed stored in memory as "
"little endian (``DRM_FORMAT_BIG_ENDIAN`` is not supported)."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:1250
msgid "This is how endianness is handled:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:1252
msgid ""
"Option 1 (D/C as a bit): The buffer is sent on the wire byte by byte so the "
"16-bit buffer is"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:1253
msgid "byteswapped before transfer."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:1255
msgid ""
"Option 3 (D/C as a gpio): If the SPI controller supports 16 bits per word "
"the buffer can be"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:1256
msgid ""
"sent as-is. If not the caller is responsible for swapping the bytes before "
"calling mipi_dbi_command_buf() and the buffer is sent 8 bpw."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:1259
msgid "This handling is optimised for ``DRM_FORMAT_RGB565`` framebuffers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:1261
msgid ""
"If the interface is Option 1 and the SPI controller doesn't support 9 bits "
"per word, the buffer is sent as 9x 8-bit words, padded with MIPI DCS no-op "
"commands if necessary."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:1320
msgid "SPI transfer helper"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:1323
msgid "``u32 speed_hz``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:1322
msgid "Override speed (optional)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:1324
msgid "``u8 bpw``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:1323
msgid "Bits per word"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:1325
msgid "``const void *buf``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:1324
msgid "Buffer to transfer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:1326
msgid ""
"This SPI transfer helper breaks up the transfer of **buf** into chunks which "
"the SPI controller driver can handle. The SPI bus must be locked when "
"calling this."
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:1497
msgid "Create debugfs entries"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:1503
msgid "``struct drm_minor *minor``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:1498
msgid "DRM minor"
msgstr ""

#: ../../../gpu/drm-kms-helpers:336: drivers/gpu/drm/drm_mipi_dbi.c:1499
msgid ""
"This function creates a 'command' debugfs file for sending commands to the "
"controller or getting the read command values. Drivers can use this as "
"their :c:type:`drm_driver->debugfs_init <drm_driver>` callback."
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:340
msgid "MIPI DSI Helper Functions Reference"
msgstr ""

#: ../../../gpu/drm-kms-helpers:342: drivers/gpu/drm/drm_mipi_dsi.c:45
msgid ""
"These functions contain some common logic and helpers to deal with MIPI DSI "
"peripherals."
msgstr ""

#: ../../../gpu/drm-kms-helpers:342: drivers/gpu/drm/drm_mipi_dsi.c:48
msgid ""
"Helpers are provided for a number of standard MIPI DSI command as well as a "
"subset of the MIPI DCS command set."
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:25
msgid "read/write DSI buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:26
#: include/drm/drm_mipi_dsi.h:154 include/drm/drm_mipi_dsi.h:172
msgid "``channel``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:27
msgid "virtual channel id"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:28
msgid "payload data type"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:28
msgid "``flags``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:29
msgid "flags controlling this message transmission"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:29
msgid "``tx_len``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:30
msgid "length of **tx_buf**"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:31
msgid "data to be written"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:31
msgid "``rx_len``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:32
msgid "length of **rx_buf**"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:32
msgid "``rx_buf``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:33
msgid "data to be read, or NULL"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:50
msgid "represents a MIPI DSI packet in protocol format"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:52
msgid "size (in bytes) of the packet"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:52
msgid "``header``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:53
msgid ""
"the four bytes that make up the header (Data ID, Word Count or Packet Data, "
"and ECC)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:54
msgid "``payload_length``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:55
msgid "number of bytes in the payload"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:55
msgid "``payload``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:56
msgid "a pointer to a buffer containing the payload, if any"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:68
msgid "DSI bus operations"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:70
msgid "attach DSI device to DSI host"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:71
msgid "detach DSI device from DSI host"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:72
msgid "transmit a DSI packet"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:72
msgid ""
"DSI packets transmitted by .transfer() are passed in as mipi_dsi_msg "
"structures. This structure contains information about the type of packet "
"being transmitted as well as the transmit and receive buffers. When an error "
"is encountered during transmission, this function will return a negative "
"error code. On success it shall return the number of bytes transmitted for "
"write packets or the number of bytes received for read packets."
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:80
msgid ""
"Note that typically DSI packet transmission is atomic, so the .transfer() "
"function will seldomly return anything other than the number of bytes "
"contained in the transmit buffer on success."
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:84
msgid ""
"Also note that those callbacks can be called no matter the state the host is "
"in. Drivers that need the underlying device to be powered to perform these "
"operations will first need to make sure it's been properly enabled."
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:100
msgid "DSI host device"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:102
msgid "driver model device node for this DSI host"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:103
msgid "DSI host operations"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:104
msgid "list management"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:152
msgid "template for creating a mipi_dsi_device"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:154
#: include/drm/drm_mipi_dsi.h:172
msgid "DSI peripheral chip type"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:155
msgid "DSI virtual channel assigned to peripheral"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:155
msgid "``node``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:156
msgid "pointer to OF device node or NULL"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:156
msgid ""
"This is populated and passed to mipi_dsi_device_new to create a new DSI "
"device"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:167
#: include/drm/drm_mipi_dsi.h:394 ../../../gpu/drm-kms-helpers:348:
#: drivers/gpu/drm/drm_mipi_dsi.c:246 drivers/gpu/drm/drm_mipi_dsi.c:588
#: drivers/gpu/drm/drm_mipi_dsi.c:608 drivers/gpu/drm/drm_mipi_dsi.c:655
#: drivers/gpu/drm/drm_mipi_dsi.c:693 drivers/gpu/drm/drm_mipi_dsi.c:709
#: drivers/gpu/drm/drm_mipi_dsi.c:734 drivers/gpu/drm/drm_mipi_dsi.c:777
#: drivers/gpu/drm/drm_mipi_dsi.c:833 drivers/gpu/drm/drm_mipi_dsi.c:914
#: drivers/gpu/drm/drm_mipi_dsi.c:956 drivers/gpu/drm/drm_mipi_dsi.c:1012
#: drivers/gpu/drm/drm_mipi_dsi.c:1056 drivers/gpu/drm/drm_mipi_dsi.c:1081
#: drivers/gpu/drm/drm_mipi_dsi.c:1101 drivers/gpu/drm/drm_mipi_dsi.c:1122
#: drivers/gpu/drm/drm_mipi_dsi.c:1147 drivers/gpu/drm/drm_mipi_dsi.c:1172
#: drivers/gpu/drm/drm_mipi_dsi.c:1193 drivers/gpu/drm/drm_mipi_dsi.c:1214
#: drivers/gpu/drm/drm_mipi_dsi.c:1235 drivers/gpu/drm/drm_mipi_dsi.c:1256
#: drivers/gpu/drm/drm_mipi_dsi.c:1283 drivers/gpu/drm/drm_mipi_dsi.c:1310
#: drivers/gpu/drm/drm_mipi_dsi.c:1335 drivers/gpu/drm/drm_mipi_dsi.c:1359
#: drivers/gpu/drm/drm_mipi_dsi.c:1384 drivers/gpu/drm/drm_mipi_dsi.c:1410
#: drivers/gpu/drm/drm_mipi_dsi.c:1436 drivers/gpu/drm/drm_mipi_dsi.c:1459
msgid "DSI peripheral device"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:168
msgid "``host``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:169
msgid "DSI host for this peripheral"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:170
msgid "driver model device node for this peripheral"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:170
msgid "``attached``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:171
msgid "the DSI device has been successfully attached"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:173
msgid "virtual channel assigned to the peripheral"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:174
msgid "``lanes``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:175
msgid "number of active data lanes"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:173
msgid "``format``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:174
msgid "pixel format for video mode"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:175
msgid "``mode_flags``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:176
msgid "DSI operation mode related flags"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:176
msgid "``hs_rate``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:177
msgid ""
"maximum lane frequency for high speed mode in hertz, this should be set to "
"the real limits of the hardware, zero is only accepted for legacy drivers"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:179
msgid "``lp_rate``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:180
msgid ""
"maximum lane frequency for low power mode in hertz, this should be set to "
"the real limits of the hardware, zero is only accepted for legacy drivers"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:182
msgid "``dsc``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:183
msgid "panel/bridge DSC pps payload to be sent"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:200
msgid "Context to call multiple MIPI DSI funcs in a row"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:204
#: include/drm/drm_mipi_dsi.h:392
msgid "``dsi``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:205
msgid "Pointer to the MIPI DSI device"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:209
msgid "``accum_err``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:210
msgid "Storage for the accumulated error over the multiple calls"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:212
msgid ""
"Init to 0. If a function encounters an error then the error code will be "
"stored here. If you call a function and this points to a non-zero value then "
"the function will be a noop. This allows calling a function many times in a "
"row and just checking the error at the end to see if any of them failed."
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:228
msgid ""
"obtain the number of bits per pixel for any given pixel format defined by "
"the MIPI DSI specification"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:234
msgid "``enum mipi_dsi_pixel_format fmt``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:231
msgid "MIPI DSI pixel format"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:233
msgid "The number of bits per pixel of the given pixel format."
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:312
msgid "Tearing Effect Output Line mode"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:318
msgid "``MIPI_DSI_DCS_TEAR_MODE_VBLANK``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:319
msgid "the TE output line consists of V-Blanking information only"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:322
msgid "``MIPI_DSI_DCS_TEAR_MODE_VHBLANK``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:323
msgid ""
"the TE output line consists of both V-Blanking and H-Blanking information"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:388
msgid "``mipi_dsi_generic_write_seq (dsi, seq...)``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:386
#: include/drm/drm_mipi_dsi.h:407 ../../../gpu/drm-kms-helpers:348:
#: drivers/gpu/drm/drm_mipi_dsi.c:733
msgid "transmit data using a generic write packet"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:395
#: include/drm/drm_mipi_dsi.h:413 ../../../gpu/drm-kms-helpers:348:
#: drivers/gpu/drm/drm_mipi_dsi.c:735 drivers/gpu/drm/drm_mipi_dsi.c:778
#: drivers/gpu/drm/drm_mipi_dsi.c:806
msgid "buffer containing the payload"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:387
msgid ""
"This macro will print errors for you and will RETURN FROM THE CALLING "
"FUNCTION (yes this is non-intuitive) upon error."
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:390
msgid ""
"Because of the non-intuitive return behavior, THIS MACRO IS DEPRECATED. "
"Please replace calls of it with mipi_dsi_generic_write_seq_multi()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:409
msgid "``mipi_dsi_generic_write_seq_multi (ctx, seq...)``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:413
#: include/drm/drm_mipi_dsi.h:428
msgid "``ctx``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:412
#: include/drm/drm_mipi_dsi.h:427 ../../../gpu/drm-kms-helpers:348:
#: drivers/gpu/drm/drm_mipi_dsi.c:805 drivers/gpu/drm/drm_mipi_dsi.c:984
#: drivers/gpu/drm/drm_mipi_dsi.c:1487 drivers/gpu/drm/drm_mipi_dsi.c:1514
#: drivers/gpu/drm/drm_mipi_dsi.c:1545 drivers/gpu/drm/drm_mipi_dsi.c:1561
#: drivers/gpu/drm/drm_mipi_dsi.c:1586 drivers/gpu/drm/drm_mipi_dsi.c:1611
#: drivers/gpu/drm/drm_mipi_dsi.c:1636 drivers/gpu/drm/drm_mipi_dsi.c:1661
#: drivers/gpu/drm/drm_mipi_dsi.c:1686 drivers/gpu/drm/drm_mipi_dsi.c:1713
#: drivers/gpu/drm/drm_mipi_dsi.c:1739 drivers/gpu/drm/drm_mipi_dsi.c:1761
#: drivers/gpu/drm/drm_mipi_dsi.c:1787 drivers/gpu/drm/drm_mipi_dsi.c:1815
#: drivers/gpu/drm/drm_mipi_dsi.c:1843 drivers/gpu/drm/drm_mipi_dsi.c:1872
#: drivers/gpu/drm/drm_mipi_dsi.c:1901
msgid "Context for multiple DSI transactions"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:408
#: include/drm/drm_mipi_dsi.h:423
msgid ""
"This macro will print errors for you and error handling is optimized for "
"callers that call this multiple times in a row."
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:424
msgid "``mipi_dsi_dcs_write_seq_multi (ctx, cmd, seq...)``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:422
#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:913
msgid "transmit a DCS command with payload"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:429
#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:915
#: drivers/gpu/drm/drm_mipi_dsi.c:957 drivers/gpu/drm/drm_mipi_dsi.c:985
msgid "buffer containing data to be transmitted"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:438
msgid "DSI driver"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:439
msgid "``driver``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:440
msgid "device driver model driver"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:440
msgid "``probe``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:441
msgid "callback for device binding"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:441
msgid "``remove``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:442
msgid "callback for device unbinding"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:442
msgid "``shutdown``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:345: include/drm/drm_mipi_dsi.h:443
msgid "called at shutdown time to quiesce the device"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:104
msgid "find the MIPI DSI device matching a device tree node"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:106
#: drivers/gpu/drm/drm_mipi_dsi.c:306
msgid "device tree node"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:108
msgid ""
"A pointer to the MIPI DSI device corresponding to **np** or NULL if no such "
"device exists (or has not been registered yet)."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:194
msgid "create a MIPI DSI device"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:200
#: drivers/gpu/drm/drm_mipi_dsi.c:265
msgid "``struct mipi_dsi_host *host``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:195
#: drivers/gpu/drm/drm_mipi_dsi.c:264
msgid "DSI host to which this device is connected"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:197
#: drivers/gpu/drm/drm_mipi_dsi.c:266
msgid "``const struct mipi_dsi_device_info *info``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:196
#: drivers/gpu/drm/drm_mipi_dsi.c:265
msgid "pointer to template containing DSI device information"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:197
#: drivers/gpu/drm/drm_mipi_dsi.c:266
msgid ""
"Create a MIPI DSI device by using the device information provided by "
"mipi_dsi_device_info template"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:201
#: drivers/gpu/drm/drm_mipi_dsi.c:274
msgid ""
"A pointer to the newly created MIPI DSI device, or, a pointer encoded with "
"an error"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:245
msgid "unregister MIPI DSI device"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:251
#: drivers/gpu/drm/drm_mipi_dsi.c:378 drivers/gpu/drm/drm_mipi_dsi.c:400
#: drivers/gpu/drm/drm_mipi_dsi.c:424 drivers/gpu/drm/drm_mipi_dsi.c:593
#: drivers/gpu/drm/drm_mipi_dsi.c:613 drivers/gpu/drm/drm_mipi_dsi.c:660
#: drivers/gpu/drm/drm_mipi_dsi.c:698 drivers/gpu/drm/drm_mipi_dsi.c:714
#: drivers/gpu/drm/drm_mipi_dsi.c:739 drivers/gpu/drm/drm_mipi_dsi.c:782
#: drivers/gpu/drm/drm_mipi_dsi.c:838 drivers/gpu/drm/drm_mipi_dsi.c:919
#: drivers/gpu/drm/drm_mipi_dsi.c:961 drivers/gpu/drm/drm_mipi_dsi.c:1017
#: drivers/gpu/drm/drm_mipi_dsi.c:1061 drivers/gpu/drm/drm_mipi_dsi.c:1086
#: drivers/gpu/drm/drm_mipi_dsi.c:1106 drivers/gpu/drm/drm_mipi_dsi.c:1126
#: drivers/gpu/drm/drm_mipi_dsi.c:1151 drivers/gpu/drm/drm_mipi_dsi.c:1176
#: drivers/gpu/drm/drm_mipi_dsi.c:1197 drivers/gpu/drm/drm_mipi_dsi.c:1218
#: drivers/gpu/drm/drm_mipi_dsi.c:1239 drivers/gpu/drm/drm_mipi_dsi.c:1260
#: drivers/gpu/drm/drm_mipi_dsi.c:1287 drivers/gpu/drm/drm_mipi_dsi.c:1314
#: drivers/gpu/drm/drm_mipi_dsi.c:1339 drivers/gpu/drm/drm_mipi_dsi.c:1363
#: drivers/gpu/drm/drm_mipi_dsi.c:1388 drivers/gpu/drm/drm_mipi_dsi.c:1414
#: drivers/gpu/drm/drm_mipi_dsi.c:1440 drivers/gpu/drm/drm_mipi_dsi.c:1463
msgid "``struct mipi_dsi_device *dsi``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:262
msgid "create a managed MIPI DSI device"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:263
msgid "device to tie the MIPI-DSI device lifetime to"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:269
msgid ""
"This is the managed version of mipi_dsi_device_register_full() which "
"automatically calls mipi_dsi_device_unregister() when **dev** is unbound."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:304
msgid "find the MIPI DSI host matching a device tree node"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:310
#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:88
msgid "``struct device_node *node``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:308
msgid ""
"A pointer to the MIPI DSI host corresponding to **node** or NULL if no such "
"device exists (or has not been registered yet)."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:372
msgid "attach a DSI device to its DSI host"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:373
#: drivers/gpu/drm/drm_mipi_dsi.c:395 drivers/gpu/drm/drm_mipi_dsi.c:423
msgid "DSI peripheral"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:394
msgid "detach a DSI device from its DSI host"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:421
msgid "Attach a MIPI-DSI device to its DSI Host"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:422
msgid "device to tie the MIPI-DSI device attachment lifetime to"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:424
msgid ""
"This is the managed version of mipi_dsi_attach() which automatically calls "
"mipi_dsi_detach() when **dev** is unbound."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:428
msgid "0 on success, a negative error code on failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:463
msgid "check if a packet is of the short format"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:464
#: drivers/gpu/drm/drm_mipi_dsi.c:502
msgid "MIPI DSI data type of the packet"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:466
msgid ""
"true if the packet for the given data type is a short packet, false "
"otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:501
msgid "check if a packet is of the long format"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:504
msgid ""
"true if the packet for the given data type is a long packet, false otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:534
msgid "create a packet from a message according to the DSI protocol"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:540
msgid "``struct mipi_dsi_packet *packet``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:536
msgid "pointer to a DSI packet structure"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:538
msgid "``const struct mipi_dsi_msg *msg``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:537
msgid "message to translate into a packet"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:587
msgid "sends a Shutdown Peripheral command"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:607
#: drivers/gpu/drm/drm_mipi_dsi.c:1712
msgid "sends a Turn On Peripheral command"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:609
msgid ""
"This function is deprecated. Use mipi_dsi_turn_on_peripheral_multi() instead."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:654
#: drivers/gpu/drm/drm_mipi_dsi.c:692 drivers/gpu/drm/drm_mipi_dsi.c:1513
#: drivers/gpu/drm/drm_mipi_dsi.c:1544
msgid "enable/disable DSC on the peripheral"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:656
#: drivers/gpu/drm/drm_mipi_dsi.c:694 drivers/gpu/drm/drm_mipi_dsi.c:1515
#: drivers/gpu/drm/drm_mipi_dsi.c:1546
msgid "Whether to enable or disable the DSC"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:658
#: drivers/gpu/drm/drm_mipi_dsi.c:1517
msgid "``enum mipi_dsi_compression_algo algo``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:657
#: drivers/gpu/drm/drm_mipi_dsi.c:1516
msgid "Selected compression algorithm"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:659
#: drivers/gpu/drm/drm_mipi_dsi.c:1518
msgid "``unsigned int pps_selector``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:658
#: drivers/gpu/drm/drm_mipi_dsi.c:1517
msgid "Select PPS from the table of pre-stored or uploaded PPS entries"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:659
msgid ""
"Enable or disable Display Stream Compression on the peripheral. This "
"function is deprecated. Use mipi_dsi_compression_mode_ext_multi() instead."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:695
#: drivers/gpu/drm/drm_mipi_dsi.c:1547
msgid ""
"Enable or disable Display Stream Compression on the peripheral using the "
"default Picture Parameter Set and VESA DSC 1.1 algorithm."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:708
#: drivers/gpu/drm/drm_mipi_dsi.c:1486
msgid "transmit the DSC PPS to the peripheral"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:711
#: drivers/gpu/drm/drm_mipi_dsi.c:1489
msgid "``const struct drm_dsc_picture_parameter_set *pps``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:710
#: drivers/gpu/drm/drm_mipi_dsi.c:1488
msgid "VESA DSC 1.1 Picture Parameter Set"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:711
msgid ""
"Transmit the VESA DSC 1.1 Picture Parameter Set to the peripheral. This "
"function is deprecated. Use mipi_dsi_picture_parameter_set_multi() instead."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:736
#: drivers/gpu/drm/drm_mipi_dsi.c:779 drivers/gpu/drm/drm_mipi_dsi.c:807
msgid "``const void *payload``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:736
#: drivers/gpu/drm/drm_mipi_dsi.c:779 drivers/gpu/drm/drm_mipi_dsi.c:807
msgid "size of payload buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:737
msgid ""
"This function will automatically choose the right data type depending on the "
"payload length."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:741
msgid ""
"The number of bytes transmitted on success or a negative error code on "
"failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:776
msgid "mipi_dsi_generic_write() w/ an error log"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:780
msgid ""
"Like mipi_dsi_generic_write() but includes a dev_err() call for you and "
"returns 0 upon success, not the number of bytes sent."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:804
msgid "mipi_dsi_generic_write_chatty() w/ accum_err"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:810
#: drivers/gpu/drm/drm_mipi_dsi.c:989 drivers/gpu/drm/drm_mipi_dsi.c:1492
#: drivers/gpu/drm/drm_mipi_dsi.c:1519 drivers/gpu/drm/drm_mipi_dsi.c:1550
#: drivers/gpu/drm/drm_mipi_dsi.c:1566 drivers/gpu/drm/drm_mipi_dsi.c:1591
#: drivers/gpu/drm/drm_mipi_dsi.c:1616 drivers/gpu/drm/drm_mipi_dsi.c:1641
#: drivers/gpu/drm/drm_mipi_dsi.c:1666 drivers/gpu/drm/drm_mipi_dsi.c:1691
#: drivers/gpu/drm/drm_mipi_dsi.c:1718 drivers/gpu/drm/drm_mipi_dsi.c:1743
#: drivers/gpu/drm/drm_mipi_dsi.c:1766 drivers/gpu/drm/drm_mipi_dsi.c:1791
#: drivers/gpu/drm/drm_mipi_dsi.c:1819 drivers/gpu/drm/drm_mipi_dsi.c:1847
#: drivers/gpu/drm/drm_mipi_dsi.c:1876 drivers/gpu/drm/drm_mipi_dsi.c:1905
msgid "``struct mipi_dsi_multi_context *ctx``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:808
msgid ""
"Like mipi_dsi_generic_write_chatty() but deals with errors in a way that "
"makes it convenient to make several calls in a row."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:832
msgid "receive data using a generic read packet"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:835
msgid "``const void *params``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:834
msgid "buffer containing the request parameters"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:836
msgid "``size_t num_params``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:835
msgid "number of request parameters"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:836
msgid "buffer in which to return the received data"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:837
#: drivers/gpu/drm/drm_mipi_dsi.c:1059
msgid "size of receive buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:838
msgid ""
"This function will automatically choose the right data type depending on the "
"number of parameters passed in."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:842
msgid ""
"The number of bytes successfully read or a negative error code on failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:878
msgid ""
"Get the required MEDIA_BUS_FMT_* based input pixel format for a given DSI "
"output pixel format"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:884
msgid "``enum mipi_dsi_pixel_format dsi_format``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:881
msgid "pixel format that a DSI host needs to output"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:882
msgid ""
"Various DSI hosts can use this function during their :c:type:"
"`drm_bridge_funcs.atomic_get_input_bus_fmts <drm_bridge_funcs>` operation to "
"ascertain the MEDIA_BUS_FMT_* pixel format required as input."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:887
msgid "a 32-bit MEDIA_BUS_FMT_* value on success or 0 in case of failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:916
#: drivers/gpu/drm/drm_mipi_dsi.c:958 drivers/gpu/drm/drm_mipi_dsi.c:986
#: drivers/gpu/drm/drm_mipi_dsi.c:1015
msgid "``const void *data``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:916
#: drivers/gpu/drm/drm_mipi_dsi.c:958 drivers/gpu/drm/drm_mipi_dsi.c:986
msgid "size of transmission buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:917
#: drivers/gpu/drm/drm_mipi_dsi.c:1016
msgid ""
"This function will automatically choose the right data type depending on the "
"command payload length."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:921
#: drivers/gpu/drm/drm_mipi_dsi.c:1020
msgid ""
"The number of bytes successfully transmitted or a negative error code on "
"failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:955
msgid "mipi_dsi_dcs_write_buffer() w/ an error log"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:959
msgid ""
"Like mipi_dsi_dcs_write_buffer() but includes a dev_err() call for you and "
"returns 0 upon success, not the number of bytes sent."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:983
msgid "mipi_dsi_dcs_write_buffer_chatty() w/ accum_err"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:987
msgid ""
"Like mipi_dsi_dcs_write_buffer_chatty() but deals with errors in a way that "
"makes it convenient to make several calls in a row."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1011
msgid "send DCS write command"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1013
#: drivers/gpu/drm/drm_mipi_dsi.c:1057
msgid "DCS command"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1014
msgid "buffer containing the command payload"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1015
msgid "command payload length"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1055
msgid "send DCS read request command"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1058
msgid "buffer in which to receive data"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1061
msgid "The number of bytes read or a negative error code on failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1080
msgid "send DCS nop packet"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1082
msgid "This function is deprecated. Use mipi_dsi_dcs_nop_multi() instead."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1100
#: drivers/gpu/drm/drm_mipi_dsi.c:1760
msgid "perform a software reset of the display module"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1102
msgid ""
"This function is deprecated. Use mipi_dsi_dcs_soft_reset_multi() instead."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1120
msgid "query the display module's current power mode"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1124
msgid "``u8 *mode``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1123
msgid "return location for the current power mode"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1145
msgid "gets the pixel format for the RGB image data used by the interface"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1149
msgid "``u8 *format``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1148
msgid "return location for the pixel format"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1170
msgid ""
"disable all unnecessary blocks inside the display module except interface "
"communication"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1173
msgid ""
"This function is deprecated. Use mipi_dsi_dcs_enter_sleep_mode_multi() "
"instead."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1191
msgid "enable all blocks inside the display module"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1194
msgid ""
"This function is deprecated. Use mipi_dsi_dcs_exit_sleep_mode_multi() "
"instead."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1212
msgid "stop displaying the image data on the display device"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1215
msgid ""
"This function is deprecated. Use mipi_dsi_dcs_set_display_off_multi() "
"instead."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1233
msgid "start displaying the image data on the display device"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1236
msgid ""
"This function is deprecated. Use mipi_dsi_dcs_set_display_on_multi() instead."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1239
#: drivers/gpu/drm/drm_mipi_dsi.c:1315 drivers/gpu/drm/drm_mipi_dsi.c:1365
msgid "0 on success or a negative error code on failure"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1254
#: drivers/gpu/drm/drm_mipi_dsi.c:1841
msgid ""
"define the column extent of the frame memory accessed by the host processor"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1258
#: drivers/gpu/drm/drm_mipi_dsi.c:1285 drivers/gpu/drm/drm_mipi_dsi.c:1845
#: drivers/gpu/drm/drm_mipi_dsi.c:1874
msgid "``u16 start``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1257
#: drivers/gpu/drm/drm_mipi_dsi.c:1844
msgid "first column of frame memory"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1259
#: drivers/gpu/drm/drm_mipi_dsi.c:1286 drivers/gpu/drm/drm_mipi_dsi.c:1846
#: drivers/gpu/drm/drm_mipi_dsi.c:1875
msgid "``u16 end``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1258
#: drivers/gpu/drm/drm_mipi_dsi.c:1845
msgid "last column of frame memory"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1259
msgid ""
"This function is deprecated. Use mipi_dsi_dcs_set_column_address_multi() "
"instead."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1281
#: drivers/gpu/drm/drm_mipi_dsi.c:1870
msgid ""
"define the page extent of the frame memory accessed by the host processor"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1284
#: drivers/gpu/drm/drm_mipi_dsi.c:1873
msgid "first page of frame memory"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1285
#: drivers/gpu/drm/drm_mipi_dsi.c:1874
msgid "last page of frame memory"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1286
msgid ""
"This function is deprecated. Use mipi_dsi_dcs_set_page_address_multi() "
"instead."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1308
msgid ""
"turn on the display module's Tearing Effect output signal on the TE signal "
"line."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1312
#: drivers/gpu/drm/drm_mipi_dsi.c:1688
msgid "``enum mipi_dsi_dcs_tear_mode mode``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1311
#: drivers/gpu/drm/drm_mipi_dsi.c:1687
msgid "the Tearing Effect Output Line mode"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1312
msgid ""
"This function is deprecated. Use mipi_dsi_dcs_set_tear_on_multi() instead."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1333
#: drivers/gpu/drm/drm_mipi_dsi.c:1813
msgid "sets the pixel format for the RGB image data used by the interface"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1337
#: drivers/gpu/drm/drm_mipi_dsi.c:1817
msgid "``u8 format``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1336
#: drivers/gpu/drm/drm_mipi_dsi.c:1816
msgid "pixel format"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1337
msgid ""
"This function is deprecated. Use mipi_dsi_dcs_set_pixel_format_multi() "
"instead."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1357
#: drivers/gpu/drm/drm_mipi_dsi.c:1899
msgid ""
"set the scanline to use as trigger for the Tearing Effect output signal of "
"the display module"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1361
#: drivers/gpu/drm/drm_mipi_dsi.c:1903
msgid "``u16 scanline``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1360
#: drivers/gpu/drm/drm_mipi_dsi.c:1902
msgid "scanline to use as trigger"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1361
msgid ""
"This function is deprecated. Use mipi_dsi_dcs_set_tear_scanline_multi() "
"instead."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1382
#: drivers/gpu/drm/drm_mipi_dsi.c:1785
msgid "sets the brightness value of the display"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1386
#: drivers/gpu/drm/drm_mipi_dsi.c:1438 drivers/gpu/drm/drm_mipi_dsi.c:1789
msgid "``u16 brightness``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1385
#: drivers/gpu/drm/drm_mipi_dsi.c:1411 drivers/gpu/drm/drm_mipi_dsi.c:1437
#: drivers/gpu/drm/drm_mipi_dsi.c:1460 drivers/gpu/drm/drm_mipi_dsi.c:1788
msgid "brightness value"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1386
msgid ""
"This function is deprecated. Use mipi_dsi_dcs_set_display_brightness_multi() "
"instead."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1408
msgid "gets the current brightness value of the display"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1412
#: drivers/gpu/drm/drm_mipi_dsi.c:1461
msgid "``u16 *brightness``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1434
msgid "sets the 16-bit brightness value of the display"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1457
msgid "gets the current 16-bit brightness value of the display"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1489
msgid ""
"Like mipi_dsi_picture_parameter_set() but deals with errors in a way that "
"makes it convenient to make several calls in a row."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1518
msgid ""
"Like mipi_dsi_compression_mode_ext() but deals with errors in a way that "
"makes it convenient to make several calls in a row."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1560
msgid "send DCS NOP packet"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1562
msgid ""
"Like mipi_dsi_dcs_nop() but deals with errors in a way that makes it "
"convenient to make several calls in a row."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1585
msgid "send DCS ENTER_SLEEP_MODE packet"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1587
msgid ""
"Like mipi_dsi_dcs_enter_sleep_mode() but deals with errors in a way that "
"makes it convenient to make several calls in a row."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1610
msgid "send DCS EXIT_SLEEP_MODE packet"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1612
msgid ""
"Like mipi_dsi_dcs_exit_sleep_mode() but deals with errors in a way that "
"makes it convenient to make several calls in a row."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1635
msgid "send DCS SET_DISPLAY_OFF packet"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1637
msgid ""
"Like mipi_dsi_dcs_set_display_off() but deals with errors in a way that "
"makes it convenient to make several calls in a row."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1660
msgid "send DCS SET_DISPLAY_ON packet"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1662
msgid ""
"Like mipi_dsi_dcs_set_display_on() but deals with errors in a way that makes "
"it convenient to make several calls in a row."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1685
msgid "send DCS SET_TEAR_ON packet"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1688
msgid ""
"Like mipi_dsi_dcs_set_tear_on() but deals with errors in a way that makes it "
"convenient to make several calls in a row."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1714
msgid ""
"Like mipi_dsi_turn_on_peripheral() but deals with errors in a way that makes "
"it convenient to make several calls in a row."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1737
msgid ""
"turn off the display module's Tearing Effect output signal on the TE signal "
"line"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1762
msgid ""
"Like mipi_dsi_dcs_soft_reset() but deals with errors in a way that makes it "
"convenient to make several calls in a row."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1789
msgid ""
"Like mipi_dsi_dcs_set_display_brightness() but deals with errors in a way "
"that makes it convenient to make several calls in a row."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1817
msgid ""
"Like mipi_dsi_dcs_set_pixel_format() but deals with errors in a way that "
"makes it convenient to make several calls in a row."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1846
msgid ""
"Like mipi_dsi_dcs_set_column_address() but deals with errors in a way that "
"makes it convenient to make several calls in a row."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1875
msgid ""
"Like mipi_dsi_dcs_set_page_address() but deals with errors in a way that "
"makes it convenient to make several calls in a row."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1903
msgid ""
"Like mipi_dsi_dcs_set_tear_scanline() but deals with errors in a way that "
"makes it convenient to make several calls in a row."
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1953
msgid "register a driver for DSI devices"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1959
#: drivers/gpu/drm/drm_mipi_dsi.c:1983
msgid "``struct mipi_dsi_driver *drv``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1954
#: drivers/gpu/drm/drm_mipi_dsi.c:1978
msgid "DSI driver structure"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1956
msgid "``struct module *owner``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1955
msgid "owner module"
msgstr ""

#: ../../../gpu/drm-kms-helpers:348: drivers/gpu/drm/drm_mipi_dsi.c:1977
msgid "unregister a driver for DSI devices"
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:352
msgid "Display Stream Compression Helper Functions Reference"
msgstr ""

#: ../../../gpu/drm-kms-helpers:354:
#: drivers/gpu/drm/display/drm_dsc_helper.c:22
msgid ""
"VESA specification for DP 1.4 adds a new feature called Display Stream "
"Compression (DSC) used to compress the pixel bits before sending it on DP/"
"eDP/MIPI DSI interface. DSC is required to be enabled so that the existing "
"display interfaces can support high resolutions at higher frames rates uisng "
"the maximum available link capacity of these interfaces."
msgstr ""

#: ../../../gpu/drm-kms-helpers:354:
#: drivers/gpu/drm/display/drm_dsc_helper.c:28
msgid ""
"These functions contain some common logic and helpers to deal with VESA "
"Display Stream Compression standard required for DSC on Display Port/eDP or "
"MIPI display interfaces."
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:45
msgid "DSC Rate Control range parameters"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:52
msgid "``range_min_qp``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:53
msgid "Min Quantization Parameters allowed for this range"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:56
msgid "``range_max_qp``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:57
msgid "Max Quantization Parameters allowed for this range"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:60
msgid "``range_bpg_offset``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:61
msgid "Bits/group offset to apply to target for this group"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:46
msgid ""
"This defines different rate control parameters used by the DSC engine to "
"compress the frame."
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:67
msgid "Parameters required to configure DSC"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:74
msgid "``line_buf_depth``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:75
msgid "Bits per component for previous reconstructed line buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:79
msgid "``bits_per_component``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:80
msgid "Bits per component to code (8/10/12)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:83
msgid "``convert_rgb``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:84
msgid ""
"Flag to indicate if RGB - YCoCg conversion is needed True if RGB input, "
"False if YCoCg input"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:89
msgid "``slice_count``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:90
msgid "Number fo slices per line used by the DSC encoder"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:93
#: include/drm/display/drm_dsc.h:352
msgid "``slice_width``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:94
msgid "Width of each slice in pixels"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:97
#: include/drm/display/drm_dsc.h:347
msgid "``slice_height``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:98
msgid "Slice height in pixels"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:101
msgid "``simple_422``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:102
msgid "True if simple 4_2_2 mode is enabled else False"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:105
#: include/drm/display/drm_dsc.h:341
msgid "``pic_width``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:106
msgid "Width of the input display frame in pixels"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:109
#: include/drm/display/drm_dsc.h:335
msgid "``pic_height``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:110
msgid "Vertical height of the input display frame"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:113
msgid "``rc_tgt_offset_high``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:114
#: include/drm/display/drm_dsc.h:119
msgid "Offset to bits/group used by RC to determine QP adjustment"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:118
msgid "``rc_tgt_offset_low``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:123
msgid "``bits_per_pixel``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:124
msgid "Target bits per pixel with 4 fractional bits, bits_per_pixel << 4"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:128
#: include/drm/display/drm_dsc.h:468
msgid "``rc_edge_factor``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:129
msgid "Factor to determine if an edge is present based on the bits produced"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:133
#: include/drm/display/drm_dsc.h:481
msgid "``rc_quant_incr_limit1``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:134
#: include/drm/display/drm_dsc.h:139
msgid "Slow down incrementing once the range reaches this value"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:138
#: include/drm/display/drm_dsc.h:475
msgid "``rc_quant_incr_limit0``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:143
msgid "``initial_xmit_delay``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:144
msgid "Number of pixels to delay the initial transmission"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:148
#: include/drm/display/drm_dsc.h:376
msgid "``initial_dec_delay``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:149
msgid ""
"Initial decoder delay, number of pixel times that the decoder accumulates "
"data in its rate buffer before starting to decode and output pixels."
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:155
msgid "``block_pred_enable``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:156
msgid ""
"True if block prediction is used to code any groups within the picture. "
"False if BP not used"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:161
#: include/drm/display/drm_dsc.h:420
msgid "``first_line_bpg_offset``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:162
msgid ""
"Number of additional bits allocated for each group on the first line of "
"slice."
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:167
#: include/drm/display/drm_dsc.h:439
msgid "``initial_offset``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:168
msgid "Value to use for RC model offset at slice start"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:171
#: include/drm/display/drm_dsc.h:495
msgid "``rc_buf_thresh``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:172
msgid "Thresholds defining each of the buffer ranges"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:175
msgid "``rc_range_params``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:176
msgid ""
"Parameters for each of the RC ranges defined in :c:type:`struct "
"drm_dsc_rc_range_parameters <drm_dsc_rc_range_parameters>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:181
#: include/drm/display/drm_dsc.h:463
msgid "``rc_model_size``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:182
msgid "Total size of RC model"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:185
#: include/drm/display/drm_dsc.h:449
msgid "``flatness_min_qp``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:186
msgid "Minimum QP where flatness information is sent"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:189
#: include/drm/display/drm_dsc.h:456
msgid "``flatness_max_qp``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:190
msgid "Maximum QP where flatness information is sent"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:193
#: include/drm/display/drm_dsc.h:390
msgid "``initial_scale_value``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:194
msgid "Initial value for the scale factor"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:197
msgid "``scale_decrement_interval``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:198
msgid ""
"Specifies number of group times between decrementing the scale factor at "
"beginning of a slice."
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:203
#: include/drm/display/drm_dsc.h:397
msgid "``scale_increment_interval``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:204
msgid ""
"Number of group times between incrementing the scale factor value used at "
"the beginning of a slice."
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:209
#: include/drm/display/drm_dsc.h:427
msgid "``nfl_bpg_offset``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:210
msgid "Non first line BPG offset to be used"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:213
#: include/drm/display/drm_dsc.h:433
msgid "``slice_bpg_offset``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:214
msgid "BPG offset used to enforce slice bit"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:217
#: include/drm/display/drm_dsc.h:444
msgid "``final_offset``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:218
msgid "Final RC linear transformation offset value"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:221
msgid "``vbr_enable``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:222
msgid "True if VBR mode is enabled, false if disabled"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:225
msgid "``mux_word_size``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:226
msgid "Mux word size (in bits) for SSM mode"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:229
msgid "``slice_chunk_size``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:230
msgid ""
"The (max) size in bytes of the \"chunks\" that are used in slice "
"multiplexing."
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:235
msgid "``rc_bits``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:236
msgid "Rate control buffer size in bits"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:239
msgid "``dsc_version_minor``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:240
msgid "DSC minor version"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:243
msgid "``dsc_version_major``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:244
msgid "DSC major version"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:247
msgid "``native_422``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:248
msgid "True if Native 4:2:2 supported, else false"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:251
msgid "``native_420``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:252
msgid "True if Native 4:2:0 supported else false."
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:255
#: include/drm/display/drm_dsc.h:516
msgid "``second_line_bpg_offset``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:256
msgid "Additional bits/grp for seconnd line of slice for native 4:2:0"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:260
#: include/drm/display/drm_dsc.h:524
msgid "``nsl_bpg_offset``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:261
msgid ""
"Num of bits deallocated for each grp that is not in second line of slice"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:266
#: include/drm/display/drm_dsc.h:530
msgid "``second_line_offset_adj``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:267
msgid "Offset adjustment for second line in Native 4:2:0 mode"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:68
msgid ""
"Driver populates this structure with all the parameters required to "
"configure the display stream compression on the source."
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:273
msgid "Represents 128 bytes of Picture Parameter Set"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:285
msgid "``dsc_version``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:286
msgid ""
"PPS0[3:0] - dsc_version_minor: Contains Minor version of DSC PPS0[7:4] - "
"dsc_version_major: Contains major version of DSC"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:291
msgid "``pps_identifier``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:292
msgid ""
"PPS1[7:0] - Application specific identifier that can be used to "
"differentiate between different PPS tables."
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:297
msgid "``pps_reserved``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:298
msgid "PPS2[7:0]- RESERVED Byte"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:302
msgid "``pps_3``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:303
msgid ""
"PPS3[3:0] - linebuf_depth: Contains linebuffer bit depth used to generate "
"the bitstream. (0x0 - 16 bits for DSC 1.2, 0x8 - 8 bits, 0xA - 10 bits, 0xB "
"- 11 bits, 0xC - 12 bits, 0xD - 13 bits, 0xE - 14 bits for DSC1.2, 0xF - 14 "
"bits for DSC 1.2. PPS3[7:4] - bits_per_component: Bits per component for the "
"original pixels of the encoded picture. 0x0 = 16bpc (allowed only when "
"dsc_version_minor = 0x2) 0x8 = 8bpc, 0xA = 10bpc, 0xC = 12bpc, 0xE = 14bpc "
"(also allowed only when dsc_minor_version = 0x2)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:315
msgid "``pps_4``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:316
msgid ""
"PPS4[1:0] -These are the most significant 2 bits of compressed BPP "
"bits_per_pixel[9:0] syntax element. PPS4[2] - vbr_enable: 0 = VBR disabled, "
"1 = VBR enabled PPS4[3] - simple_422: Indicates if decoder drops samples to "
"reconstruct the 4:2:2 picture. PPS4[4] - Convert_rgb: Indicates if DSC color "
"space conversion is active. PPS4[5] - blobk_pred_enable: Indicates if BP is "
"used to code any groups in picture PPS4[7:6] - Reseved bits"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:329
msgid "``bits_per_pixel_low``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:330
msgid ""
"PPS5[7:0] - This indicates the lower significant 8 bits of the compressed "
"BPP bits_per_pixel[9:0] element."
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:336
msgid ""
"PPS6[7:0], PPS7[7:0] -pic_height: Specifies the number of pixel rows within "
"the raster."
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:342
msgid ""
"PPS8[7:0], PPS9[7:0] - pic_width: Number of pixel columns within the raster."
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:348
msgid "PPS10[7:0], PPS11[7:0] - Slice height in units of pixels."
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:353
msgid "PPS12[7:0], PPS13[7:0] - Slice width in terms of pixels."
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:357
msgid "``chunk_size``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:358
msgid ""
"PPS14[7:0], PPS15[7:0] - Size in units of bytes of the chunks that are used "
"for slice multiplexing."
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:363
msgid "``initial_xmit_delay_high``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:364
msgid ""
"PPS16[1:0] - Most Significant two bits of initial transmission delay. It "
"specifies the number of pixel times that the encoder waits before "
"transmitting data from its rate buffer. PPS16[7:2] - Reserved"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:371
msgid "``initial_xmit_delay_low``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:372
msgid "PPS17[7:0] - Least significant 8 bits of initial transmission delay."
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:377
msgid ""
"PPS18[7:0], PPS19[7:0] - Initial decoding delay which is the number of pixel "
"times that the decoder accumulates data in its rate buffer before starting "
"to decode and output pixels."
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:384
msgid "``pps20_reserved``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:385
msgid "PPS20[7:0] - Reserved"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:391
msgid ""
"PPS21[5:0] - Initial rcXformScale factor used at beginning of a slice. "
"PPS21[7:6] - Reserved"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:398
msgid ""
"PPS22[7:0], PPS23[7:0] - Number of group times between incrementing the "
"rcXformScale factor at end of a slice."
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:403
msgid "``scale_decrement_interval_high``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:404
msgid ""
"PPS24[3:0] - Higher 4 bits indicating number of group times between "
"decrementing the rcXformScale factor at beginning of a slice. PPS24[7:4] - "
"Reserved"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:410
msgid "``scale_decrement_interval_low``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:411
msgid "PPS25[7:0] - Lower 8 bits of scale decrement interval"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:415
msgid "``pps26_reserved``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:416
msgid "PPS26[7:0]"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:421
msgid ""
"PPS27[4:0] - Number of additional bits that are allocated for each group on "
"first line of a slice. PPS27[7:5] - Reserved"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:428
msgid ""
"PPS28[7:0], PPS29[7:0] - Number of bits including frac bits deallocated for "
"each group for groups after the first line of slice."
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:434
msgid ""
"PPS30, PPS31[7:0] - Number of bits that are deallocated for each group to "
"enforce the slice constraint."
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:440
msgid "PPS32,33[7:0] - Initial value for rcXformOffset"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:445
msgid "PPS34,35[7:0] - Maximum end-of-slice value for rcXformOffset"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:450
msgid ""
"PPS36[4:0] - Minimum QP at which flatness is signaled and flatness QP "
"adjustment is made. PPS36[7:5] - Reserved"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:457
msgid ""
"PPS37[4:0] - Max QP at which flatness is signalled and the flatness "
"adjustment is made. PPS37[7:5] - Reserved"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:464
msgid "PPS38,39[7:0] - Number of bits within RC Model."
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:469
msgid ""
"PPS40[3:0] - Ratio of current activity vs, previous activity to determine "
"presence of edge. PPS40[7:4] - Reserved"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:476
msgid "PPS41[4:0] - QP threshold used in short term RC PPS41[7:5] - Reserved"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:482
msgid "PPS42[4:0] - QP threshold used in short term RC PPS42[7:5] - Reserved"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:487
msgid "``rc_tgt_offset``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:488
msgid ""
"PPS43[3:0] - Lower end of the variability range around the target bits per "
"group that is allowed by short term RC. PPS43[7:4]- Upper end of the "
"variability range around the target bits per group that i allowed by short "
"term rc."
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:496
msgid ""
"PPS44[7:0] - PPS57[7:0] - Specifies the thresholds in RC model for the 15 "
"ranges defined by 14 thresholds."
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:501
msgid "``rc_range_parameters``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:502
msgid ""
"PPS58[7:0] - PPS87[7:0] Parameters that correspond to each of the 15 ranges."
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:507
msgid "``native_422_420``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:508
msgid ""
"PPS88[0] - 0 = Native 4:2:2 not used 1 = Native 4:2:2 used PPS88[1] - 0 = "
"Native 4:2:0 not use 1 = Native 4:2:0 used PPS88[7:2] - Reserved 6 bits"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:517
msgid ""
"PPS89[4:0] - Additional bits/group budget for the second line of a slice in "
"Native 4:2:0 mode. Set to 0 if DSC minor version is 1 or native420 is 0. "
"PPS89[7:5] - Reserved"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:525
msgid ""
"PPS90[7:0], PPS91[7:0] - Number of bits that are deallocated for each group "
"that is not in the second line of a slice."
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:531
msgid ""
"PPS92[7:0], PPS93[7:0] - Used as offset adjustment for the second line in "
"Native 4:2:0 mode."
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:536
msgid "``pps_long_94_reserved``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:537
msgid "PPS 94, 95, 96, 97 - Reserved"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:541
msgid "``pps_long_98_reserved``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:542
msgid "PPS 98, 99, 100, 101 - Reserved"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:546
msgid "``pps_long_102_reserved``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:547
msgid "PPS 102, 103, 104, 105 - Reserved"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:551
msgid "``pps_long_106_reserved``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:552
msgid "PPS 106, 107, 108, 109 - reserved"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:556
msgid "``pps_long_110_reserved``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:557
msgid "PPS 110, 111, 112, 113 - reserved"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:561
msgid "``pps_long_114_reserved``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:562
msgid "PPS 114 - 117 - reserved"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:566
msgid "``pps_long_118_reserved``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:567
msgid "PPS 118 - 121 - reserved"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:571
msgid "``pps_long_122_reserved``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:572
msgid "PPS 122- 125 - reserved"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:576
msgid "``pps_short_126_reserved``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:577
msgid "PPS 126, 127 - reserved"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:274
msgid ""
"The VESA DSC standard defines picture parameter set (PPS) which display "
"stream compression encoders must communicate to decoders. The PPS is "
"encapsulated in 128 bytes (PPS 0 through PPS 127). The fields in this "
"structure are as per Table 4.1 in Vesa DSC specification v1.1/v1.2. The PPS "
"fields that span over more than a byte should be stored in Big Endian format."
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:583
msgid "DSC infoframe carrying the Picture Parameter Set Metadata"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:592
msgid "``pps_header``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:593
msgid ""
"Header for PPS as per DP SDP header format of type :c:type:`struct "
"dp_sdp_header <dp_sdp_header>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:594
msgid "``pps_payload``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:595
msgid ""
"PPS payload fields as per DSC specification Table 4-1 as represented in :c:"
"type:`struct drm_dsc_picture_parameter_set <drm_dsc_picture_parameter_set>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:357: include/drm/display/drm_dsc.h:584
msgid ""
"This structure represents the DSC PPS infoframe required to send the Picture "
"Parameter Set metadata required before enabling VESA Display Stream "
"Compression. This is based on the DP Secondary Data Packet structure and "
"comprises of SDP Header as defined :c:type:`struct dp_sdp_header "
"<dp_sdp_header>` in drm_dp_helper.h and PPS payload defined in :c:type:"
"`struct drm_dsc_picture_parameter_set <drm_dsc_picture_parameter_set>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:36
msgid "Initializes the PPS Header for DisplayPort as per the DP 1.4 spec."
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:42
msgid "``struct dp_sdp_header *pps_header``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:38
msgid ""
"Secondary data packet header for DSC Picture Parameter Set as defined in :c:"
"type:`struct dp_sdp_header <dp_sdp_header>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:40
msgid ""
"DP 1.4 spec defines the secondary data packet for sending the picture "
"parameter infoframes from the source to the sink. This function populates "
"the SDP header defined in :c:type:`struct dp_sdp_header <dp_sdp_header>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:56
msgid "get rc buffer size in bytes"
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:62
msgid "``u8 rc_buffer_block_size``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:57
msgid "block size code, according to DPCD offset 62h"
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:59
msgid "``u8 rc_buffer_size``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:58
msgid "number of blocks - 1, according to DPCD offset 63h"
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:60
msgid "buffer size in bytes, or 0 on invalid input"
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:83
msgid "Populates the DSC PPS"
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:89
msgid "``struct drm_dsc_picture_parameter_set *pps_payload``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:85
msgid ""
"Bitwise struct for DSC Picture Parameter Set. This is defined by :c:type:"
"`struct drm_dsc_picture_parameter_set <drm_dsc_picture_parameter_set>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:88
msgid "``const struct drm_dsc_config *dsc_cfg``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:88
msgid ""
"DSC Configuration data filled by driver as defined by :c:type:`struct "
"drm_dsc_config <drm_dsc_config>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:91
msgid ""
"DSC source device sends a picture parameter set (PPS) containing the "
"information required by the sink to decode the compressed frame. Driver "
"populates the DSC PPS struct using the DSC configuration parameters in the "
"order expected by the DSC Display Sink device. For the DSC, the sink device "
"expects the PPS payload in big endian format for fields that span more than "
"1 byte."
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:276
msgid "Set DSC parameters considered typically constant across operation modes"
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:282
#: drivers/gpu/drm/display/drm_dsc_helper.c:310
#: drivers/gpu/drm/display/drm_dsc_helper.c:1240
#: drivers/gpu/drm/display/drm_dsc_helper.c:1310
msgid "``struct drm_dsc_config *vdsc_cfg``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:279
#: drivers/gpu/drm/display/drm_dsc_helper.c:307
#: drivers/gpu/drm/display/drm_dsc_helper.c:1239
#: drivers/gpu/drm/display/drm_dsc_helper.c:1310
msgid "DSC Configuration data partially filled by driver"
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:304
msgid ""
"Set thresholds for the RC model in accordance with the DSC 1.2 specification."
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:1234
msgid ""
"Set parameters and limits for RC model in accordance with the DSC 1.1 or 1.2 "
"specification and DSC C Model Required bits_per_pixel and bits_per_component "
"to be set before calling this function."
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:1241
msgid "``enum drm_dsc_params_type type``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:1240
msgid "operating mode and standard to follow"
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:1242
msgid "0 or -error code in case of an error"
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:1304
msgid ""
"Write rate control parameters to the dsc configuration defined in :c:type:"
"`struct drm_dsc_config <drm_dsc_config>` in accordance with the DSC 1.2 "
"specification. Some configuration fields must be present beforehand."
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:1442
msgid "Get integer bits per pixel value for the given DRM DSC config"
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:1448
msgid "``const struct drm_dsc_config *vdsc_cfg``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:1443
#: drivers/gpu/drm/display/drm_dsc_helper.c:1456
#: drivers/gpu/drm/display/drm_dsc_helper.c:1468
msgid "Pointer to DRM DSC config struct"
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:1445
msgid "Integer BPP value"
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:1455
msgid "Calculate the initial scale value for the given DSC config"
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:1461
#: drivers/gpu/drm/display/drm_dsc_helper.c:1473
msgid "``const struct drm_dsc_config *dsc``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:1458
msgid "Calculated initial scale value"
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:1467
msgid "Calculate the flatness_det_thresh for the given DSC config"
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:1470
msgid "Calculated flatness det thresh value"
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:1553
msgid "Dump the provided DSC configuration"
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:1559
#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2759
msgid "``struct drm_printer *p``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:1554
msgid "The printer used for output"
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:1556
msgid "``int indent``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:1555
msgid "Tab indentation level (max 5)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:1557
msgid "``const struct drm_dsc_config *cfg``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:1556
msgid "DSC configuration to print"
msgstr ""

#: ../../../gpu/drm-kms-helpers:360:
#: drivers/gpu/drm/display/drm_dsc_helper.c:1557
msgid "Print the provided DSC configuration in **cfg**."
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:364
msgid "Output Probing Helper Functions Reference"
msgstr ""

#: ../../../gpu/drm-kms-helpers:366: drivers/gpu/drm/drm_probe_helper.c:49
msgid ""
"This library provides some helper code for output probing. It provides an "
"implementation of the core :c:type:`drm_connector_funcs.fill_modes "
"<drm_connector_funcs>` interface with "
"drm_helper_probe_single_connector_modes()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:366: drivers/gpu/drm/drm_probe_helper.c:53
msgid ""
"It also provides support for polling connectors with a work item and for "
"generic hotplug interrupt handling where the driver doesn't or cannot keep "
"track of a per-connector hpd interrupt."
msgstr ""

#: ../../../gpu/drm-kms-helpers:366: drivers/gpu/drm/drm_probe_helper.c:57
msgid ""
"This helper library can be used independently of the modeset helper library. "
"Drivers can also overwrite different parts e.g. use their own hotplug "
"handling code to avoid probing unrelated outputs."
msgstr ""

#: ../../../gpu/drm-kms-helpers:366: drivers/gpu/drm/drm_probe_helper.c:61
msgid ""
"The probe helpers share the function table structures with other display "
"helper libraries. See :c:type:`struct drm_connector_helper_funcs "
"<drm_connector_helper_funcs>` for the details."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:287
msgid "re-enable output polling."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:288
#: drivers/gpu/drm/drm_probe_helper.c:320
#: drivers/gpu/drm/drm_probe_helper.c:875
#: drivers/gpu/drm/drm_probe_helper.c:906
#: drivers/gpu/drm/drm_probe_helper.c:934
#: drivers/gpu/drm/drm_probe_helper.c:954
#: drivers/gpu/drm/drm_probe_helper.c:1056
msgid "drm_device"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:289
msgid ""
"This function re-enables the output polling work, after it has been "
"temporarily disabled using drm_kms_helper_poll_disable(), for example over "
"suspend/resume."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:293
msgid ""
"Drivers can call this helper from their device resume implementation. It is "
"not an error to call this even when output polling isn't enabled."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:296
msgid ""
"If device polling was never initialized before, this call will trigger a "
"warning and return."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:299
#: drivers/gpu/drm/drm_probe_helper.c:885
msgid ""
"Note that calls to enable and disable polling must be strictly ordered, "
"which is automatically the case when they're only call from suspend/resume "
"callbacks."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:319
msgid "reschedule the output polling work"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:321
msgid ""
"This function reschedules the output polling work, after polling for a "
"connector has been enabled."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:324
msgid ""
"Drivers must call this helper after enabling polling for a connector by "
"setting ``DRM_CONNECTOR_POLL_CONNECT`` / ``DRM_CONNECTOR_POLL_DISCONNECT`` "
"flags in drm_connector::polled. Note that after disabling polling by "
"clearing these flags for a connector will stop the output polling work "
"automatically if the polling is disabled for all other connectors as well."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:330
msgid ""
"The function can be called only after polling has been enabled by calling "
"drm_kms_helper_poll_init() / drm_kms_helper_poll_enable()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:386
msgid "probe connector status"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:387
#: drivers/gpu/drm/drm_probe_helper.c:501
msgid "connector to probe"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:388
msgid "acquire_ctx, or NULL to let this function handle locking."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:390
#: drivers/gpu/drm/drm_probe_helper.c:1309
msgid "``bool force``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:389
msgid "Whether destructive probe operations should be performed."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:390
msgid ""
"This function calls the detect callbacks of the connector. This function "
"returns :c:type:`drm_connector_status`, or if **ctx** is set, it might also "
"return -EDEADLK."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:500
msgid "get complete set of display modes"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:503
msgid "``uint32_t maxX``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:502
msgid "max width for modes"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:504
msgid "``uint32_t maxY``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:503
msgid "max height for modes"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:504
msgid ""
"Based on the helper callbacks implemented by **connector** in struct :c:type:"
"`drm_connector_helper_funcs` try to detect all valid modes.  Modes will "
"first be added to the connector's probed_modes list, then culled (based on "
"validity and the **maxX**, **maxY** parameters) and put into the normal "
"modes list."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:509
msgid ""
"Intended to be used as a generic implementation of the :c:type:"
"`drm_connector_funcs.fill_modes\\(\\) <drm_connector_funcs>` vfunc for "
"drivers that use the CRTC helpers for output mode filtering and detection."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:513
msgid "The basic procedure is as follows"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:515
msgid "All modes currently on the connector's modes list are marked as stale"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:517
msgid ""
"New modes are added to the connector's probed_modes list with "
"drm_mode_probed_add(). New modes start their life with status as OK. Modes "
"are added from a single source using the following priority order."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:521
msgid ""
":c:type:`drm_connector_helper_funcs.get_modes <drm_connector_helper_funcs>` "
"vfunc"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:522
msgid ""
"if the connector status is connector_status_connected, standard VESA DMT "
"modes up to 1024x768 are automatically added (drm_add_modes_noedid())"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:526
msgid ""
"Finally modes specified via the kernel command line (video=...) are added in "
"addition to what the earlier probes produced "
"(drm_helper_probe_add_cmdline_mode()). These modes are generated using the "
"VESA GTF/CVT formulas."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:531
msgid ""
"Modes are moved from the probed_modes list to the modes list. Potential "
"duplicates are merged together (see drm_connector_list_update()). After this "
"step the probed_modes list will be empty again."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:535
msgid "Any non-stale mode on the modes list then undergoes validation"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:537
msgid "drm_mode_validate_basic() performs basic sanity checks"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:538
msgid ""
"drm_mode_validate_size() filters out modes larger than **maxX** and **maxY** "
"(if specified)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:540
msgid ""
"drm_mode_validate_flag() checks the modes against basic connector "
"capabilities (interlace_allowed,doublescan_allowed,stereo_allowed)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:542
msgid ""
"the optional :c:type:`drm_connector_helper_funcs.mode_valid "
"<drm_connector_helper_funcs>` or :c:type:`drm_connector_helper_funcs."
"mode_valid_ctx <drm_connector_helper_funcs>` helpers can perform driver and/"
"or sink specific checks"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:545
msgid ""
"the optional :c:type:`drm_crtc_helper_funcs.mode_valid "
"<drm_crtc_helper_funcs>`, :c:type:`drm_bridge_funcs.mode_valid "
"<drm_bridge_funcs>` and :c:type:`drm_encoder_helper_funcs.mode_valid "
"<drm_encoder_helper_funcs>` helpers can perform driver and/or source "
"specific checks which are also enforced by the modeset/atomic helpers"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:550
msgid ""
"Any mode whose status is not OK is pruned from the connector's modes list, "
"accompanied by a debug message indicating the reason for the mode's "
"rejection (see drm_mode_prune_invalid())."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:555
msgid "The number of modes found on **connector**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:714
msgid "fire off KMS hotplug events"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:715
msgid "drm_device whose connector state changed"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:716
msgid ""
"This function fires off the uevent for userspace and also calls the client "
"hotplug function, which is most commonly used to inform the fbdev emulation "
"code and allow it to update the fbcon output configuration."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:720
msgid ""
"Drivers should call this from their hotplug handling code when a change is "
"detected. Note that this function does not do any output detection of its "
"own, like drm_helper_hpd_irq_event() does - this is assumed to be done by "
"the driver already."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:725
#: drivers/gpu/drm/drm_probe_helper.c:1024
#: drivers/gpu/drm/drm_probe_helper.c:1071
msgid ""
"This function must be called from process context with no mode setting locks "
"held."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:728
msgid ""
"If only a single connector has changed, consider calling "
"drm_kms_helper_connector_hotplug_event() instead."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:740
msgid "fire off a KMS connector hotplug event"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:741
msgid "drm_connector which has changed"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:742
msgid ""
"This is the same as drm_kms_helper_hotplug_event(), except it fires a more "
"fine-grained uevent for a single connector."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:854
msgid "is ``current`` task an output poll worker?"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:860
msgid "``void``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:1
msgid "no arguments"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:855
msgid ""
"Determine if ``current`` task is an output poll worker.  This can be used to "
"select distinct code paths for output polling versus other contexts."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:858
msgid ""
"One use case is to avoid a deadlock between the output poll worker and the "
"autosuspend worker wherein the latter waits for polling to finish upon "
"calling drm_kms_helper_poll_disable(), while the former waits for runtime "
"suspend to finish upon calling pm_runtime_get_sync() in a connector ->detect "
"hook."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:874
msgid "disable output polling"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:876
msgid "This function disables the output polling work."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:878
msgid ""
"Drivers can call this helper from their device suspend implementation. It is "
"not an error to call this even when output polling isn't enabled or already "
"disabled. Polling is re-enabled by calling drm_kms_helper_poll_enable()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:882
msgid ""
"If however, the polling was never initialized, this call will trigger a "
"warning and return."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:905
#: drivers/gpu/drm/drm_probe_helper.c:953
msgid "initialize and enable output polling"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:907
msgid ""
"This function initializes and then also enables output polling support for "
"**dev**. Drivers which do not have reliable hotplug support in hardware can "
"use this helper infrastructure to regularly poll such connectors for changes "
"in their connection state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:912
msgid ""
"Drivers can control which connectors are polled by setting the "
"DRM_CONNECTOR_POLL_CONNECT and DRM_CONNECTOR_POLL_DISCONNECT flags. On "
"connectors where probing live outputs can result in visual distortion "
"drivers should not set the DRM_CONNECTOR_POLL_DISCONNECT flag to avoid this. "
"Connectors which have no flag or only DRM_CONNECTOR_POLL_HPD set are "
"completely ignored by the polling logic."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:919
#: drivers/gpu/drm/drm_probe_helper.c:1027
#: drivers/gpu/drm/drm_probe_helper.c:1074
msgid ""
"Note that a connector can be both polled and probed from the hotplug "
"handler, in case the hotplug interrupt is known to be unreliable."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:933
msgid "disable output polling and clean it up"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:955
msgid ""
"This function initializes and then also enables output polling support for "
"**dev** similar to drm_kms_helper_poll_init(). Polling will automatically be "
"cleaned up when the DRM device goes away."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:959
msgid "See drm_kms_helper_poll_init() for more information."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:1014
#: drivers/gpu/drm/drm_probe_helper.c:1055
msgid "hotplug processing"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:1015
msgid "drm_connector"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:1016
msgid ""
"Drivers can use this helper function to run a detect cycle on a connector "
"which has the DRM_CONNECTOR_POLL_HPD flag set in its :c:type:`polled` member."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:1019
msgid ""
"This helper function is useful for drivers which can track hotplug "
"interrupts for a single connector. Drivers that want to send a hotplug event "
"for all connectors or can't track hotplug interrupts per connector need to "
"use drm_helper_hpd_irq_event()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:1031
#: drivers/gpu/drm/drm_probe_helper.c:1078
msgid "A boolean indicating whether the connector status changed or not"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:1057
msgid ""
"Drivers can use this helper function to run a detect cycle on all connectors "
"which have the DRM_CONNECTOR_POLL_HPD flag set in their :c:type:`polled` "
"member. All other connectors are ignored, which is useful to avoid reprobing "
"fixed panels."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:1062
msgid ""
"This helper function is useful for drivers which can't or don't track "
"hotplug interrupts for each connector."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:1065
msgid ""
"Drivers which support hotplug interrupts for each connector individually and "
"which have a more fine-grained detect logic can use "
"drm_connector_helper_hpd_irq_event(). Alternatively, they should bypass this "
"code and directly call drm_kms_helper_hotplug_event() in case the connector "
"state changed."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:1122
msgid "Validates a display mode"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:1123
msgid "the crtc"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:1124
msgid "the mode to validate"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:1126
#: drivers/gpu/drm/drm_probe_helper.c:1149
msgid "``const struct drm_display_mode *fixed_mode``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:1125
#: drivers/gpu/drm/drm_probe_helper.c:1148
msgid "the display hardware's mode"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:1127
msgid "MODE_OK on success, or another mode-status code otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:1146
msgid "Duplicates a display mode for a connector"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:1147
#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7286
#: drivers/gpu/drm/drm_edid.c:7364 drivers/gpu/drm/drm_edid.c:7446
msgid "the connector"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:1149
msgid ""
"This function duplicates a display modes for a connector. Drivers for "
"hardware that only supports a single fixed mode can use this function in "
"their connector's get_modes helper."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:1154
msgid "The number of created modes."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:1186
msgid "Read EDID and update connector."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:1187
#: drivers/gpu/drm/drm_probe_helper.c:1223
#: drivers/gpu/drm/drm_probe_helper.c:1306
msgid "The connector"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:1188
msgid ""
"Read the EDID using drm_edid_read() (which requires that connector->ddc is "
"set), and update the connector using the EDID."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:1191
msgid ""
"This can be used as the \"default\" connector helper .get_modes() hook if "
"the driver does not need any special processing. This is sets the example "
"what custom .get_modes() hooks should do regarding EDID read and connector "
"update."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:1196
msgid "Number of modes."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:1222
msgid "Fills the modes availables to a TV connector"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:1224
msgid ""
"Fills the available modes for a TV connector based on the supported TV "
"modes, and the default mode expressed by the kernel command line."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:1227
msgid ""
"This can be used as the default TV connector helper .get_modes() hook if the "
"driver does not need any special processing."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:1305
msgid "Read EDID and detect connector status."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:1307
msgid "Acquire context"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:1308
msgid "Perform screen-destructive operations, if necessary"
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:1309
msgid ""
"Detects the connector status by reading the EDID using drm_probe_ddc(), "
"which requires connector->ddc to be set. Returns connector_status_connected "
"on success or connector_status_disconnected on failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:369: drivers/gpu/drm/drm_probe_helper.c:1314
msgid "The connector status as defined by enum drm_connector_status."
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:373
msgid "EDID Helper Functions Reference"
msgstr ""

#: ../../../gpu/drm-kms-helpers:375: include/drm/drm_edid.h:374
msgid "Decode the manufacturer ID"
msgstr ""

#: ../../../gpu/drm-kms-helpers:375: include/drm/drm_edid.h:380
msgid "``u16 mfg_id``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:375: include/drm/drm_edid.h:375
msgid "The manufacturer ID"
msgstr ""

#: ../../../gpu/drm-kms-helpers:375: include/drm/drm_edid.h:377
#: include/drm/drm_edid.h:414
msgid "``char vend[4]``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:375: include/drm/drm_edid.h:376
#: include/drm/drm_edid.h:413
msgid ""
"A 4-byte buffer to store the 3-letter vendor string plus a '\\0' termination"
msgstr ""

#: ../../../gpu/drm-kms-helpers:375: include/drm/drm_edid.h:392
msgid ""
"``drm_edid_encode_panel_id (vend_chr_0, vend_chr_1, vend_chr_2, product_id)``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:375: include/drm/drm_edid.h:390
msgid "Encode an ID for matching against drm_edid_get_panel_id()"
msgstr ""

#: ../../../gpu/drm-kms-helpers:375: include/drm/drm_edid.h:396
msgid "``vend_chr_0``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:375: include/drm/drm_edid.h:391
msgid "First character of the vendor string."
msgstr ""

#: ../../../gpu/drm-kms-helpers:375: include/drm/drm_edid.h:393
msgid "``vend_chr_1``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:375: include/drm/drm_edid.h:392
msgid "Second character of the vendor string."
msgstr ""

#: ../../../gpu/drm-kms-helpers:375: include/drm/drm_edid.h:394
msgid "``vend_chr_2``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:375: include/drm/drm_edid.h:393
msgid "Third character of the vendor string."
msgstr ""

#: ../../../gpu/drm-kms-helpers:375: include/drm/drm_edid.h:395
msgid "``product_id``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:375: include/drm/drm_edid.h:394
msgid "The 16-bit product ID."
msgstr ""

#: ../../../gpu/drm-kms-helpers:375: include/drm/drm_edid.h:395
msgid ""
"This is a macro so that it can be calculated at compile time and used as an "
"initializer."
msgstr ""

#: ../../../gpu/drm-kms-helpers:375: include/drm/drm_edid.h:398
msgid "For instance:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:375: include/drm/drm_edid.h:399
msgid "drm_edid_encode_panel_id('B', 'O', 'E', 0x2d08) => 0x09e52d08"
msgstr ""

#: ../../../gpu/drm-kms-helpers:375: include/drm/drm_edid.h:402
msgid "a 32-bit ID per panel."
msgstr ""

#: ../../../gpu/drm-kms-helpers:375: include/drm/drm_edid.h:411
msgid "Decode a panel ID from drm_edid_encode_panel_id()"
msgstr ""

#: ../../../gpu/drm-kms-helpers:375: include/drm/drm_edid.h:417
msgid "``u32 panel_id``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:375: include/drm/drm_edid.h:412
msgid "The panel ID to decode."
msgstr ""

#: ../../../gpu/drm-kms-helpers:375: include/drm/drm_edid.h:416
msgid "``u16 *product_id``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:375: include/drm/drm_edid.h:415
msgid "The product ID will be returned here."
msgstr ""

#: ../../../gpu/drm-kms-helpers:375: include/drm/drm_edid.h:416
msgid "For instance, after:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:375: include/drm/drm_edid.h:417
msgid "drm_edid_decode_panel_id(0x09e52d08, vend, :c:type:`product_id`)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:375: include/drm/drm_edid.h:418
msgid "These will be true:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:375: include/drm/drm_edid.h:419
msgid ""
"vend[0] = 'B' vend[1] = 'O' vend[2] = 'E' vend[3] = '\\0' product_id = 0x2d08"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:1775
msgid "sanity check the header of the base EDID block"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:1781
msgid "``const void *_edid``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:1776
msgid "pointer to raw base EDID block"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:1777
msgid "Sanity check the header of the base EDID block."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:1780
msgid "8 if the header is perfect, down to 0 if it's totally wrong."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2032
#: drivers/gpu/drm/drm_edid.c:2058
msgid "sanity check EDID data"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2038
#: drivers/gpu/drm/drm_edid.c:7148
msgid "``struct edid *edid``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2033
#: drivers/gpu/drm/drm_edid.c:2059 drivers/gpu/drm/drm_edid.c:7147
msgid "EDID data"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2034
msgid "Sanity-check an entire EDID record (including extensions)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2037
#: drivers/gpu/drm/drm_edid.c:2064
msgid "True if the EDID data is valid, false otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2060
msgid ""
"Sanity check an EDID. Cross check block count against allocated size and "
"checksum the blocks."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2297
msgid "add modes from override/firmware EDID"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2298
#: drivers/gpu/drm/drm_edid.c:2593 drivers/gpu/drm/drm_edid.c:2870
#: drivers/gpu/drm/drm_edid.c:2899 drivers/gpu/drm/drm_edid.c:7146
#: drivers/gpu/drm/drm_edid.c:7178
msgid "connector we're probing"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2299
msgid ""
"Add modes from the override/firmware EDID, if available. Only to be used "
"from drm_helper_probe_single_connector_modes() as a fallback for when DDC "
"probe failed during drm_get_edid() and caused the override/firmware EDID to "
"be skipped."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2305
#: drivers/gpu/drm/drm_edid.c:7155 drivers/gpu/drm/drm_edid.c:7185
msgid "The number of modes added or 0 if we couldn't find any."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2470
#: drivers/gpu/drm/drm_edid.c:2472
msgid "Get a pointer to the raw EDID data."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2471
msgid "drm_edid container"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2474
msgid "This is for transition only. Avoid using this like the plague."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2477
msgid "Pointer to raw EDID data."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2513
msgid "Allocate a new drm_edid container"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2519
msgid "``const void *edid``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2514
msgid "Pointer to raw EDID data"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2515
msgid "Size of memory allocated for EDID"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2516
msgid ""
"Allocate a new drm_edid container. Do not calculate edid size from edid, "
"pass the actual size that has been allocated for the data. There is no "
"validation of the raw EDID data against the size, but at least the EDID base "
"block must fit in the buffer."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2521
#: drivers/gpu/drm/drm_edid.c:2548 drivers/gpu/drm/drm_edid.c:2636
#: drivers/gpu/drm/drm_edid.c:2677 drivers/gpu/drm/drm_edid.c:2710
msgid "The returned pointer must be freed using drm_edid_free()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2524
msgid "drm_edid container, or NULL on errors"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2546
msgid "Duplicate a drm_edid container"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2547
#: drivers/gpu/drm/drm_edid.c:2928
msgid "EDID to duplicate"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2551
msgid "drm_edid container copy, or NULL on errors"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2563
msgid "Free the drm_edid container"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2564
msgid "EDID to free"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2577
msgid "probe DDC presence"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2578
msgid "I2C adapter to probe"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2580
msgid "True on success, false on failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2592
msgid "get EDID data, if available"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2594
#: drivers/gpu/drm/drm_edid.c:2667 drivers/gpu/drm/drm_edid.c:2823
#: drivers/gpu/drm/drm_edid.c:2871 drivers/gpu/drm/drm_edid.c:2900
msgid "I2C adapter to use for DDC"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2595
msgid ""
"Poke the given I2C channel to grab EDID data if possible.  If found, attach "
"it to the connector."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2599
msgid "Pointer to valid EDID or NULL if we couldn't find any."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2619
msgid "Read EDID data using given EDID block read function"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2620
#: drivers/gpu/drm/drm_edid.c:2666 drivers/gpu/drm/drm_edid.c:2703
msgid "Connector to use"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2622
msgid "``read_block_fn read_block``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2621
msgid "EDID block read function"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2623
msgid "``void *context``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2622
msgid "Private data passed to the block read function"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2623
msgid ""
"When the I2C adapter connected to the DDC bus is hidden behind a device that "
"exposes a different interface to read EDID blocks this function can be used "
"to get EDID data using a custom block read function."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2627
msgid ""
"As in the general case the DDC bus is accessible by the kernel at the I2C "
"level, drivers must make all reasonable efforts to expose it as an I2C "
"adapter and use drm_edid_read() or drm_edid_read_ddc() instead of abusing "
"this function."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2632
#: drivers/gpu/drm/drm_edid.c:2670 drivers/gpu/drm/drm_edid.c:2706
msgid ""
"The EDID may be overridden using debugfs override_edid or firmware EDID "
"(drm_edid_load_firmware() and drm.edid_firmware parameter), in this priority "
"order. Having either of them bypasses actual EDID reads."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2639
#: drivers/gpu/drm/drm_edid.c:2680 drivers/gpu/drm/drm_edid.c:2713
msgid "Pointer to EDID, or NULL if probe/read failed."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2665
msgid "Read EDID data using given I2C adapter"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2668
msgid "Read EDID using the given I2C adapter."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2674
msgid ""
"Prefer initializing connector->ddc with drm_connector_init_with_ddc() and "
"using drm_edid_read() instead of this function."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2702
msgid "Read EDID data using connector's I2C adapter"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2704
msgid "Read EDID using the connector's I2C adapter."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2725
msgid "Get the vendor and product identification"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2728
msgid "``struct drm_edid_product_id *id``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2727
msgid "Where to place the product id"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2753
msgid "Print decoded product id to printer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2754
msgid "drm printer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2756
msgid "``const struct drm_edid_product_id *id``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2755
msgid "EDID product id"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2757
msgid "``bool raw``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2756
msgid "If true, also print the raw hex"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2757
msgid "See VESA E-EDID 1.4 section 3.4."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2782
msgid "Get a panel's ID from EDID"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2783
msgid "EDID that contains panel ID."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2784
msgid ""
"This function uses the first block of the EDID of a panel and (assuming that "
"the EDID is valid) extracts the ID out of it. The ID is a 32-bit value (16 "
"bits of manufacturer ID and 16 bits of per-manufacturer ID) that's supposed "
"to be different for each different modem of panel."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2790
msgid ""
"A 32-bit ID that should be different for each make/model of panel. See the "
"functions drm_edid_encode_panel_id() and drm_edid_decode_panel_id() for some "
"details on the structure of this ID. Return 0 if the EDID size is less than "
"a base block."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2822
msgid "Get a panel's EDID base block"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2824
msgid ""
"This function returns the drm_edid containing the first block of the EDID of "
"a panel."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2827
msgid ""
"This function is intended to be used during early probing on devices where "
"more than one panel might be present. Because of its intended use it must "
"assume that the EDID of the panel is correct, at least as far as the base "
"block is concerned (in other words, we don't process any overrides here)."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2832
msgid "Caller should call drm_edid_free() after use."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2835
msgid ""
"it's expected that this function and drm_do_get_edid() will both be read the "
"EDID, but there is no caching between them. Since we're only reading the "
"first block, hopefully this extra overhead won't be too big."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2839
msgid ""
"WARNING: Only use this function when the connector is unknown. For example, "
"during the early probe of panel. The EDID read from the function is "
"temporary and should be replaced by the full EDID returned from other "
"drm_edid_read."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2843
msgid "Pointer to allocated EDID base block, or NULL on any failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2869
#: drivers/gpu/drm/drm_edid.c:2898
msgid "get EDID data for a vga_switcheroo output"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2872
msgid ""
"Wrapper around drm_get_edid() for laptops with dual GPUs using one set of "
"outputs. The wrapper adds the requisite vga_switcheroo calls to temporarily "
"switch DDC to the GPU which is retrieving EDID."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2877
#: drivers/gpu/drm/drm_edid.c:2906
msgid "Pointer to valid EDID or ``NULL`` if we couldn't find any."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2901
msgid ""
"Wrapper around drm_edid_read_ddc() for laptops with dual GPUs using one set "
"of outputs. The wrapper adds the requisite vga_switcheroo calls to "
"temporarily switch DDC to the GPU which is retrieving EDID."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2927
msgid "duplicate an EDID and the extensions"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2933
#: drivers/gpu/drm/drm_edid.c:5606 drivers/gpu/drm/drm_edid.c:5787
#: drivers/gpu/drm/drm_edid.c:5832 drivers/gpu/drm/drm_edid.c:5916
#: drivers/gpu/drm/drm_edid.c:5977 drivers/gpu/drm/drm_edid.c:7123
msgid "``const struct edid *edid``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:2930
msgid "Pointer to duplicated EDID or NULL on allocation failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:4356
msgid "look for a CEA mode matching given mode"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:4362
msgid "``const struct drm_display_mode *to_match``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:4357
#: drivers/gpu/drm/drm_edid.c:5993
msgid "display mode"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:4359
msgid "The CEA Video ID (VIC) of the mode or 0 if it isn't a CEA-861 mode."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:4629
msgid "return a mode for CEA VIC"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:4632
msgid "``u8 video_code``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:4631
msgid "CEA VIC of the mode"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:4632
msgid "Creates a new mode matching the specified CEA VIC."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5539
msgid "match drm_edid with given identity"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5542
msgid "``const struct drm_edid_ident *ident``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5541
msgid "the EDID identity to match with"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5542
msgid "Check if the EDID matches with the given identity."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5545
msgid "True if the given identity matched with EDID, false otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5600
msgid "fetch the monitor name from the edid"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5601
#: drivers/gpu/drm/drm_edid.c:5911
msgid "monitor EDID information"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5603
msgid "``char *name``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5602
msgid "pointer to a character array to hold the name of the monitor"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5604
msgid "``int bufsize``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5603
msgid "The size of the name buffer (should be at least 14 chars.)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5781
msgid "extracts SADs from EDID"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5782
#: drivers/gpu/drm/drm_edid.c:5827
msgid "EDID to parse"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5784
msgid "``struct cea_sad **sads``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5783
msgid "pointer that will be set to the extracted SADs"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5784
msgid ""
"Looks for CEA EDID block and extracts SADs (Short Audio Descriptors) from it."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5787
#: drivers/gpu/drm/drm_edid.c:5832
msgid "The returned pointer needs to be freed using kfree()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5789
msgid "The number of found SADs or negative number on error."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5826
msgid "extracts Speaker Allocation Data Blocks from EDID"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5829
msgid "``u8 **sadb``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5828
msgid "pointer to the speaker block"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5829
msgid ""
"Looks for CEA EDID block and extracts the Speaker Allocation Data Block from "
"it."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5834
msgid ""
"The number of found Speaker Allocation Blocks or negative number on error."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5847
msgid "compute the HDMI/DP sink audio-video sync delay"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5848
msgid "connector associated with the HDMI/DP sink"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5849
msgid "the display mode"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5851
msgid ""
"The HDMI/DP sink's audio-video sync delay in milliseconds or 0 if the sink "
"doesn't support audio or video."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5910
msgid "detect whether monitor is HDMI"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5912
msgid "Parse the CEA extension according to CEA-861-B."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5914
msgid ""
"Drivers that have added the modes parsed from EDID to drm_display_info "
"should use :c:type:`drm_display_info.is_hdmi <drm_display_info>` instead of "
"calling this function."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5918
msgid "True if the monitor is HDMI, false if not or unknown."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5971
msgid "check monitor audio capability"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5972
msgid "EDID block to scan"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5973
msgid ""
"Monitor should have CEA extension block. If monitor has 'basic audio', but "
"no CEA audio blocks, it's 'basic audio' only. If there is any audio "
"extension block and supported audio format, assume at least 'basic audio' "
"support, even if 'basic audio' is not defined in EDID."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5980
msgid "True if the monitor supports audio, false otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5992
msgid "default RGB quantization range"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5994
msgid ""
"Determine the default RGB quantization range for the mode, as specified in "
"CEA-861."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:5998
msgid "The default RGB quantization range for the mode"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7066
msgid "Update connector information from EDID"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7069
msgid ""
"Update the connector display info, ELD, HDR metadata, relevant properties, "
"etc. from the passed in EDID."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7072
msgid "If EDID is NULL, reset the information."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7074
msgid "Must be called before calling drm_edid_connector_add_modes()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7077
msgid "0 on success, negative error on errors."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7091
msgid "Update probed modes from the EDID property"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7093
msgid ""
"Add the modes from the previously updated EDID property to the connector "
"probed modes list."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7096
msgid ""
"drm_edid_connector_update() must have been called before this to update the "
"EDID property."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7100
msgid "The number of modes added, or 0 if we couldn't find any."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7120
msgid "update the edid property of a connector"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7122
msgid "new value of the edid property"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7123
msgid ""
"This function creates a new blob modeset object and assigns its id to the "
"connector's edid property. Since we also parse tile information from EDID's "
"displayID block, we also set the connector's tile property here. See "
"drm_connector_set_tile_property() for more details."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7129
msgid "This function is deprecated. Use drm_edid_connector_update() instead."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7145
msgid "add modes from EDID data, if available"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7148
msgid ""
"Add the specified modes to the connector's mode list. Also fills out the :c:"
"type:`drm_display_info` structure and ELD in **connector** with any "
"information which can be derived from the edid."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7152
msgid ""
"This function is deprecated. Use drm_edid_connector_add_modes() instead."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7177
msgid "add modes for the connectors without EDID"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7180
msgid "``unsigned int hdisplay``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7179
msgid "the horizontal display limit"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7181
msgid "``unsigned int vdisplay``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7180
msgid "the vertical display limit"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7181
msgid ""
"Add the specified modes to the connector's mode list. Only when the hdisplay/"
"vdisplay is not beyond the given limit, it will be added."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7283
msgid "fill an HDMI AVI infoframe with data from a DRM display mode"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7289
#: drivers/gpu/drm/drm_edid.c:7367 ../../../gpu/drm-kms-helpers:410:
#: drivers/video/hdmi.c:61 drivers/video/hdmi.c:88 drivers/video/hdmi.c:191
msgid "``struct hdmi_avi_infoframe *frame``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7285
#: drivers/gpu/drm/drm_edid.c:7363 ../../../gpu/drm-kms-helpers:410:
#: drivers/video/hdmi.c:56 drivers/video/hdmi.c:83 drivers/video/hdmi.c:98
#: drivers/video/hdmi.c:187
msgid "HDMI AVI infoframe"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7287
#: drivers/gpu/drm/drm_edid.c:7365 drivers/gpu/drm/drm_edid.c:7447
msgid "``const struct drm_connector *connector``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7287
#: drivers/gpu/drm/drm_edid.c:7365 drivers/gpu/drm/drm_edid.c:7447
msgid "DRM display mode"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7361
msgid "fill the HDMI AVI infoframe quantization range information"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7367
msgid "``enum hdmi_quantization_range rgb_quant_range``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7366
msgid "RGB quantization range (Q)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7443
msgid "fill an HDMI infoframe with data from a DRM display mode"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7449
#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:533
#: drivers/video/hdmi.c:587 drivers/video/hdmi.c:664
msgid "``struct hdmi_vendor_infoframe *frame``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7445
#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:528
msgid "HDMI vendor infoframe"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7448
msgid ""
"Note that there's is a need to send HDMI vendor infoframes only when using a "
"4k or stereoscopic 3D mode. So when giving any other mode as input this "
"function will return -EINVAL, error that can be safely ignored."
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7580
msgid "is digital?"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7581
msgid "The EDID"
msgstr ""

#: ../../../gpu/drm-kms-helpers:378: drivers/gpu/drm/drm_edid.c:7582
msgid "Return true if input is digital."
msgstr ""

#: ../../../gpu/drm-kms-helpers:381: include/drm/drm_eld.h:72
msgid "Get ELD monitor name length in bytes."
msgstr ""

#: ../../../gpu/drm-kms-helpers:381: include/drm/drm_eld.h:78
#: include/drm/drm_eld.h:90 include/drm/drm_eld.h:109 include/drm/drm_eld.h:119
#: include/drm/drm_eld.h:132 include/drm/drm_eld.h:147
#: include/drm/drm_eld.h:159 ../../../gpu/drm-kms-helpers:384:
#: drivers/gpu/drm/drm_eld.c:20
msgid "``const u8 *eld``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:381: include/drm/drm_eld.h:73
msgid "pointer to an eld memory structure with mnl set"
msgstr ""

#: ../../../gpu/drm-kms-helpers:381: include/drm/drm_eld.h:84
msgid "Get ELD SAD structures."
msgstr ""

#: ../../../gpu/drm-kms-helpers:381: include/drm/drm_eld.h:85
#: include/drm/drm_eld.h:104
msgid "pointer to an eld memory structure with sad_count set"
msgstr ""

#: ../../../gpu/drm-kms-helpers:381: include/drm/drm_eld.h:103
msgid "Get ELD SAD count."
msgstr ""

#: ../../../gpu/drm-kms-helpers:381: include/drm/drm_eld.h:113
msgid "Calculate baseline block size in bytes"
msgstr ""

#: ../../../gpu/drm-kms-helpers:381: include/drm/drm_eld.h:114
msgid "pointer to an eld memory structure with mnl and sad_count set"
msgstr ""

#: ../../../gpu/drm-kms-helpers:381: include/drm/drm_eld.h:115
msgid ""
"This is a helper for determining the payload size of the baseline block, in "
"bytes, for e.g. setting the Baseline_ELD_Len field in the ELD header block."
msgstr ""

#: ../../../gpu/drm-kms-helpers:381: include/drm/drm_eld.h:126
msgid "Get ELD size in bytes"
msgstr ""

#: ../../../gpu/drm-kms-helpers:381: include/drm/drm_eld.h:127
msgid "pointer to a complete eld memory structure"
msgstr ""

#: ../../../gpu/drm-kms-helpers:381: include/drm/drm_eld.h:128
msgid ""
"The returned value does not include the vendor block. It's vendor specific, "
"and comprises of the remaining bytes in the ELD memory buffer after "
"drm_eld_size() bytes of header and baseline block."
msgstr ""

#: ../../../gpu/drm-kms-helpers:381: include/drm/drm_eld.h:132
msgid "The returned value is guaranteed to be a multiple of 4."
msgstr ""

#: ../../../gpu/drm-kms-helpers:381: include/drm/drm_eld.h:141
msgid "Get speaker allocation"
msgstr ""

#: ../../../gpu/drm-kms-helpers:381: include/drm/drm_eld.h:142
#: include/drm/drm_eld.h:154
msgid "pointer to an ELD memory structure"
msgstr ""

#: ../../../gpu/drm-kms-helpers:381: include/drm/drm_eld.h:143
msgid ""
"The returned value is the speakers mask. User has to use ``DRM_ELD_SPEAKER`` "
"field definitions to identify speakers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:381: include/drm/drm_eld.h:153
msgid "Get device type hdmi/dp connected"
msgstr ""

#: ../../../gpu/drm-kms-helpers:381: include/drm/drm_eld.h:155
msgid ""
"The caller need to use ``DRM_ELD_CONN_TYPE_HDMI`` or "
"``DRM_ELD_CONN_TYPE_DP`` to identify the display type connected."
msgstr ""

#: ../../../gpu/drm-kms-helpers:384: drivers/gpu/drm/drm_eld.c:14
msgid "get SAD from ELD to struct cea_sad"
msgstr ""

#: ../../../gpu/drm-kms-helpers:384: drivers/gpu/drm/drm_eld.c:15
#: drivers/gpu/drm/drm_eld.c:38
msgid "ELD buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:384: drivers/gpu/drm/drm_eld.c:17
#: drivers/gpu/drm/drm_eld.c:40
msgid "``int sad_index``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:384: drivers/gpu/drm/drm_eld.c:16
#: drivers/gpu/drm/drm_eld.c:39
msgid "SAD index"
msgstr ""

#: ../../../gpu/drm-kms-helpers:384: drivers/gpu/drm/drm_eld.c:18
msgid "``struct cea_sad *cta_sad``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:384: drivers/gpu/drm/drm_eld.c:17
msgid "destination struct cea_sad"
msgstr ""

#: ../../../gpu/drm-kms-helpers:384: drivers/gpu/drm/drm_eld.c:19
#: drivers/gpu/drm/drm_eld.c:42
msgid "0 on success, or negative on errors"
msgstr ""

#: ../../../gpu/drm-kms-helpers:384: drivers/gpu/drm/drm_eld.c:37
msgid "set SAD to ELD from struct cea_sad"
msgstr ""

#: ../../../gpu/drm-kms-helpers:384: drivers/gpu/drm/drm_eld.c:43
msgid "``u8 *eld``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:384: drivers/gpu/drm/drm_eld.c:41
msgid "``const struct cea_sad *cta_sad``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:384: drivers/gpu/drm/drm_eld.c:40
msgid "source struct cea_sad"
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:388
msgid "SCDC Helper Functions Reference"
msgstr ""

#: ../../../gpu/drm-kms-helpers:390:
#: drivers/gpu/drm/display/drm_scdc_helper.c:35
msgid ""
"Status and Control Data Channel (SCDC) is a mechanism introduced by the HDMI "
"2.0 specification. It is a point-to-point protocol that allows the HDMI "
"source and HDMI sink to exchange data. The same I2C interface that is used "
"to access EDID serves as the transport mechanism for SCDC."
msgstr ""

#: ../../../gpu/drm-kms-helpers:390:
#: drivers/gpu/drm/display/drm_scdc_helper.c:40
msgid ""
"Note: The SCDC status is going to be lost when the display is disconnected. "
"This can happen physically when the user disconnects the cable, but also "
"when a display is switched on (such as waking up a TV)."
msgstr ""

#: ../../../gpu/drm-kms-helpers:390:
#: drivers/gpu/drm/display/drm_scdc_helper.c:45
msgid ""
"This is further complicated by the fact that, upon a disconnection / "
"reconnection, KMS won't change the mode on its own. This means that one "
"can't just rely on setting the SCDC status on enable, but also has to track "
"the connector status changes using interrupts and restore the SCDC status. "
"The typical solution for this is to trigger an empty modeset in "
"drm_connector_helper_funcs.detect_ctx(), like what vc4 does in "
"vc4_hdmi_reset_link()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:393: include/drm/display/drm_scdc_helper.h:40
msgid "read a single byte from SCDC"
msgstr ""

#: ../../../gpu/drm-kms-helpers:393: include/drm/display/drm_scdc_helper.h:41
#: include/drm/display/drm_scdc_helper.h:59
msgid "I2C adapter"
msgstr ""

#: ../../../gpu/drm-kms-helpers:393: include/drm/display/drm_scdc_helper.h:42
#: include/drm/display/drm_scdc_helper.h:60
msgid "offset of register to read"
msgstr ""

#: ../../../gpu/drm-kms-helpers:393: include/drm/display/drm_scdc_helper.h:44
msgid "``u8 *value``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:393: include/drm/display/drm_scdc_helper.h:43
#: include/drm/display/drm_scdc_helper.h:61
msgid "return location for the register value"
msgstr ""

#: ../../../gpu/drm-kms-helpers:393: include/drm/display/drm_scdc_helper.h:44
msgid ""
"Reads a single byte from SCDC. This is a convenience wrapper around the "
"drm_scdc_read() function."
msgstr ""

#: ../../../gpu/drm-kms-helpers:393: include/drm/display/drm_scdc_helper.h:58
msgid "write a single byte to SCDC"
msgstr ""

#: ../../../gpu/drm-kms-helpers:393: include/drm/display/drm_scdc_helper.h:62
msgid ""
"Writes a single byte to SCDC. This is a convenience wrapper around the "
"drm_scdc_write() function."
msgstr ""

#: ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:59
msgid "read a block of data from SCDC"
msgstr ""

#: ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:60
#: drivers/gpu/drm/display/drm_scdc_helper.c:100
msgid "I2C controller"
msgstr ""

#: ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:61
msgid "start offset of block to read"
msgstr ""

#: ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:62
msgid "return location for the block to read"
msgstr ""

#: ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:63
msgid "size of the block to read"
msgstr ""

#: ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:64
msgid "Reads a block of data from SCDC, starting at a given offset."
msgstr ""

#: ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:99
msgid "write a block of data to SCDC"
msgstr ""

#: ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:101
msgid "start offset of block to write"
msgstr ""

#: ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:102
msgid "block of data to write"
msgstr ""

#: ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:103
msgid "size of the block to write"
msgstr ""

#: ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:104
msgid "Writes a block of data to SCDC, starting at a given offset."
msgstr ""

#: ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:145
msgid "what is status of scrambling?"
msgstr ""

#: ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:146
#: drivers/gpu/drm/display/drm_scdc_helper.c:173
#: drivers/gpu/drm/display/drm_scdc_helper.c:216
msgid "connector"
msgstr ""

#: ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:147
msgid "Reads the scrambler status over SCDC, and checks the scrambling status."
msgstr ""

#: ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:151
msgid "True if the scrambling is enabled, false otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:172
msgid "enable scrambling"
msgstr ""

#: ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:174
msgid "bool to indicate if scrambling is to be enabled/disabled"
msgstr ""

#: ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:175
msgid ""
"Writes the TMDS config register over SCDC channel, and: enables scrambling "
"when enable = 1 disables scrambling when enable = 0"
msgstr ""

#: ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:180
msgid "True if scrambling is set/reset successfully, false otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:215
msgid "set TMDS clock ratio"
msgstr ""

#: ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:218
msgid "``bool set``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:217
msgid "ret or reset the high clock ratio"
msgstr ""

#: ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:218
msgid "TMDS clock ratio calculations go like this:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:219
msgid "TMDS character = 10 bit TMDS encoded value"
msgstr ""

#: ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:221
msgid ""
"TMDS character rate = The rate at which TMDS characters are transmitted "
"(Mcsc)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:224
msgid "TMDS bit rate = 10x TMDS character rate"
msgstr ""

#: ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:226
msgid "As per the spec:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:227
msgid ""
"TMDS clock rate for pixel clock < 340 MHz = 1x the character rate = 1/10 "
"pixel clock rate"
msgstr ""

#: ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:230
msgid ""
"TMDS clock rate for pixel clock > 340 MHz = 0.25x the character rate = 1/40 "
"pixel clock rate"
msgstr ""

#: ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:233
msgid "Writes to the TMDS config register over SCDC channel, and:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:234
msgid "sets TMDS clock ratio to 1/40 when set = 1"
msgstr ""

#: ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:236
msgid "sets TMDS clock ratio to 1/10 when set = 0"
msgstr ""

#: ../../../gpu/drm-kms-helpers:396:
#: drivers/gpu/drm/display/drm_scdc_helper.c:240
msgid "True if write is successful, false otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:400
msgid "HDMI Infoframes Helper Reference"
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:402
msgid ""
"Strictly speaking this is not a DRM helper library but generally usable by "
"any driver interfacing with HDMI outputs like v4l or alsa drivers. But it "
"nicely fits into the overall topic of mode setting helper libraries and "
"hence is also included here."
msgstr ""

#: ../../../gpu/drm-kms-helpers:407: include/linux/hdmi.h:388
msgid "HDR sink metadata"
msgstr ""

#: ../../../gpu/drm-kms-helpers:407: include/linux/hdmi.h:394
msgid "``metadata_type``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:407: include/linux/hdmi.h:395
msgid "Static_Metadata_Descriptor_ID."
msgstr ""

#: ../../../gpu/drm-kms-helpers:407: include/linux/hdmi.h:1
msgid "``{unnamed_union}``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:407: include/linux/hdmi.h:2
msgid "anonymous"
msgstr ""

#: ../../../gpu/drm-kms-helpers:407: include/linux/hdmi.h:398
msgid "``hdmi_type1``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:407: include/linux/hdmi.h:399
msgid "HDR Metadata Infoframe."
msgstr ""

#: ../../../gpu/drm-kms-helpers:407: include/linux/hdmi.h:389
msgid "Metadata Information read from Sink's EDID"
msgstr ""

#: ../../../gpu/drm-kms-helpers:407: include/linux/hdmi.h:423
msgid "overall union of all abstract infoframe representations"
msgstr ""

#: ../../../gpu/drm-kms-helpers:407: include/linux/hdmi.h:424
msgid "``any``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:407: include/linux/hdmi.h:425
msgid "generic infoframe"
msgstr ""

#: ../../../gpu/drm-kms-helpers:407: include/linux/hdmi.h:425
msgid "``avi``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:407: include/linux/hdmi.h:426
msgid "avi infoframe"
msgstr ""

#: ../../../gpu/drm-kms-helpers:407: include/linux/hdmi.h:426
msgid "``spd``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:407: include/linux/hdmi.h:427
msgid "spd infoframe"
msgstr ""

#: ../../../gpu/drm-kms-helpers:407: include/linux/hdmi.h:428
msgid "union of all vendor infoframes"
msgstr ""

#: ../../../gpu/drm-kms-helpers:407: include/linux/hdmi.h:428
msgid "``audio``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:407: include/linux/hdmi.h:429
msgid "audio infoframe"
msgstr ""

#: ../../../gpu/drm-kms-helpers:407: include/linux/hdmi.h:430
msgid "Dynamic Range and Mastering infoframe"
msgstr ""

#: ../../../gpu/drm-kms-helpers:407: include/linux/hdmi.h:430
msgid ""
"This is used by the generic pack function. This works since all infoframes "
"have the same header which also indicates which type of infoframe should be "
"packed."
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:55
msgid "initialize an HDMI AVI infoframe"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:82
msgid "check a HDMI AVI infoframe"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:84
#: drivers/video/hdmi.c:255 drivers/video/hdmi.c:379 drivers/video/hdmi.c:583
msgid ""
"Validates that the infoframe is consistent and updates derived fields (eg. "
"length) based on other fields."
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:97
msgid "write HDMI AVI infoframe to binary buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:103
msgid "``const struct hdmi_avi_infoframe *frame``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:99
#: drivers/video/hdmi.c:188 drivers/video/hdmi.c:270 drivers/video/hdmi.c:322
#: drivers/video/hdmi.c:416 drivers/video/hdmi.c:463 drivers/video/hdmi.c:600
#: drivers/video/hdmi.c:661 drivers/video/hdmi.c:744 drivers/video/hdmi.c:815
#: drivers/video/hdmi.c:900 drivers/video/hdmi.c:950
msgid "destination buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:100
#: drivers/video/hdmi.c:189 drivers/video/hdmi.c:271 drivers/video/hdmi.c:323
#: drivers/video/hdmi.c:417 drivers/video/hdmi.c:464 drivers/video/hdmi.c:601
#: drivers/video/hdmi.c:662 drivers/video/hdmi.c:745 drivers/video/hdmi.c:816
#: drivers/video/hdmi.c:901 drivers/video/hdmi.c:951 drivers/video/hdmi.c:1791
#: drivers/video/hdmi.c:1880
msgid "size of buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:101
#: drivers/video/hdmi.c:272 drivers/video/hdmi.c:418 drivers/video/hdmi.c:602
#: drivers/video/hdmi.c:746 drivers/video/hdmi.c:902
msgid ""
"Packs the information contained in the **frame** structure into a binary "
"representation that can be written into the corresponding controller "
"registers. Also computes the checksum as required by section 5.3.5 of the "
"HDMI 1.4 specification."
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:106
#: drivers/video/hdmi.c:197 drivers/video/hdmi.c:277 drivers/video/hdmi.c:331
#: drivers/video/hdmi.c:423 drivers/video/hdmi.c:472 drivers/video/hdmi.c:607
#: drivers/video/hdmi.c:670 drivers/video/hdmi.c:751 drivers/video/hdmi.c:824
#: drivers/video/hdmi.c:907 drivers/video/hdmi.c:959
msgid ""
"Returns the number of bytes packed into the binary buffer or a negative "
"error code on failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:185
msgid "check a HDMI AVI infoframe, and write it to binary buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:190
#: drivers/video/hdmi.c:324 drivers/video/hdmi.c:465 drivers/video/hdmi.c:663
#: drivers/video/hdmi.c:817 drivers/video/hdmi.c:952
msgid ""
"Validates that the infoframe is consistent and updates derived fields (eg. "
"length) based on other fields, after which it packs the information "
"contained in the **frame** structure into a binary representation that can "
"be written into the corresponding controller registers. This function also "
"computes the checksum as required by section 5.3.5 of the HDMI 1.4 "
"specification."
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:215
msgid "initialize an HDMI SPD infoframe"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:221
#: drivers/video/hdmi.c:259 drivers/video/hdmi.c:325
msgid "``struct hdmi_spd_infoframe *frame``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:216
#: drivers/video/hdmi.c:254 drivers/video/hdmi.c:269 drivers/video/hdmi.c:321
msgid "HDMI SPD infoframe"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:218
msgid "``const char *vendor``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:217
msgid "vendor string"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:219
msgid "``const char *product``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:218
msgid "product string"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:253
msgid "check a HDMI SPD infoframe"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:268
msgid "write HDMI SPD infoframe to binary buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:274
msgid "``const struct hdmi_spd_infoframe *frame``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:319
msgid "check a HDMI SPD infoframe, and write it to binary buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:349
msgid "initialize an HDMI audio infoframe"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:350
#: drivers/video/hdmi.c:378 drivers/video/hdmi.c:415
msgid "HDMI audio infoframe"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:377
msgid "check a HDMI audio infoframe"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:383
#: drivers/video/hdmi.c:420 drivers/video/hdmi.c:496
msgid "``const struct hdmi_audio_infoframe *frame``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:414
msgid "write HDMI audio infoframe to binary buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:460
msgid "check a HDMI Audio infoframe, and write it to binary buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:462
#: drivers/video/hdmi.c:492
msgid "HDMI Audio infoframe"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:490
msgid "Pack a HDMI Audio infoframe for DisplayPort"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:493
msgid "Secondary data packet for DisplayPort."
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:495
msgid "``u8 dp_version``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:494
msgid "DisplayPort version to be encoded in the header"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:495
msgid ""
"Packs a HDMI Audio Infoframe to be sent over DisplayPort. This function "
"fills the secondary data packet to be used for DisplayPort."
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:499
msgid "Number of total written bytes or a negative errno on failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:527
msgid "initialize an HDMI vendor infoframe"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:581
msgid "check a HDMI vendor infoframe"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:582
#: drivers/video/hdmi.c:599 drivers/video/hdmi.c:899 drivers/video/hdmi.c:949
#: drivers/video/hdmi.c:1523 drivers/video/hdmi.c:1878
msgid "HDMI infoframe"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:598
msgid "write a HDMI vendor infoframe to binary buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:604
msgid "``const struct hdmi_vendor_infoframe *frame``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:658
msgid "check a HDMI Vendor infoframe, and write it to binary buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:660
msgid "HDMI Vendor infoframe"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:698
msgid "initialize an HDMI Dynaminc Range and mastering infoframe"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:704
#: drivers/video/hdmi.c:735 drivers/video/hdmi.c:818 drivers/video/hdmi.c:1792
msgid "``struct hdmi_drm_infoframe *frame``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:700
#: drivers/video/hdmi.c:730 drivers/video/hdmi.c:743 drivers/video/hdmi.c:814
#: drivers/video/hdmi.c:1789
msgid "HDMI DRM infoframe"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:729
msgid "check a HDMI DRM infoframe"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:731
msgid ""
"Validates that the infoframe is consistent. Returns 0 on success or a "
"negative error code on failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:742
msgid "write HDMI DRM infoframe to binary buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:748
msgid "``const struct hdmi_drm_infoframe *frame``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:812
msgid "check a HDMI DRM infoframe, and write it to binary buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:898
msgid "write a HDMI infoframe to binary buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:904
#: drivers/video/hdmi.c:1524
msgid "``const union hdmi_infoframe *frame``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:947
msgid "check a HDMI infoframe, and write it to binary buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:953
#: drivers/video/hdmi.c:1883
msgid "``union hdmi_infoframe *frame``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:1520
msgid "log info of HDMI infoframe"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:1526
msgid "``const char *level``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:1521
msgid "logging level"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:1522
msgid "device"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:1786
msgid ""
"unpack binary buffer of CTA-861-G DRM infoframe DataBytes to a HDMI DRM "
"infoframe"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:1790
#: drivers/video/hdmi.c:1879
msgid "source buffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:1792
msgid ""
"Unpacks CTA-861-G DRM infoframe DataBytes contained in the binary **buffer** "
"into a structured **frame** of the HDMI Dynamic Range and Mastering (DRM) "
"infoframe."
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:1877
msgid "unpack binary buffer to a HDMI infoframe"
msgstr ""

#: ../../../gpu/drm-kms-helpers:410: drivers/video/hdmi.c:1881
msgid ""
"Unpacks the information contained in binary buffer **buffer** into a "
"structured **frame** of a HDMI infoframe. Also verifies the checksum as "
"required by section 5.3.5 of the HDMI 1.4 specification."
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:414
msgid "Rectangle Utilities Reference"
msgstr ""

#: ../../../gpu/drm-kms-helpers:416: include/drm/drm_rect.h:30
msgid ""
"Utility functions to help manage rectangular areas for clipping, scaling, "
"etc. calculations."
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:37
msgid "two dimensional rectangle"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:38
msgid "``x1``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:39
msgid "horizontal starting coordinate (inclusive)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:40
msgid "``y1``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:41
msgid "vertical starting coordinate (inclusive)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:39
msgid "``x2``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:40
msgid "horizontal ending coordinate (exclusive)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:41
msgid "``y2``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:42
msgid "vertical ending coordinate (exclusive)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:42
msgid ""
"Note that this must match the layout of struct drm_mode_rect or the damage "
"helpers like drm_atomic_helper_damage_iter_init() break."
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:53
msgid "``DRM_RECT_INIT (x, y, w, h)``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:51
msgid "initialize a rectangle from x/y/w/h"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:57
msgid "``x``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:52
#: include/drm/drm_rect.h:96
msgid "x coordinate"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:54
msgid "``y``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:53
#: include/drm/drm_rect.h:97
msgid "y coordinate"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:55
msgid "``w``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:54
#: include/drm/drm_rect.h:98
msgid "width"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:56
msgid "``h``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:55
#: include/drm/drm_rect.h:99
msgid "height"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:57
msgid "A new rectangle of the specified size."
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:69
msgid "``DRM_RECT_FMT``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:67
msgid "printf string for :c:type:`struct drm_rect <drm_rect>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:73
msgid "``DRM_RECT_ARG (r)``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:71
msgid "printf arguments for :c:type:`struct drm_rect <drm_rect>`"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:77
#: include/drm/drm_rect.h:87
msgid "``r``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:72
#: include/drm/drm_rect.h:82
msgid "rectangle struct"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:79
msgid "``DRM_RECT_FP_FMT``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:77
msgid ""
"printf string for :c:type:`struct drm_rect <drm_rect>` in 16.16 fixed point"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:83
msgid "``DRM_RECT_FP_ARG (r)``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:81
msgid ""
"printf arguments for :c:type:`struct drm_rect <drm_rect>` in 16.16 fixed "
"point"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:83
msgid ""
"This is useful for e.g. printing plane source rectangles, which are in 16.16 "
"fixed point."
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:94
msgid "initialize the rectangle from x/y/w/h"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:100
#: include/drm/drm_rect.h:117 include/drm/drm_rect.h:137
#: include/drm/drm_rect.h:154 include/drm/drm_rect.h:168
#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:243
#: drivers/gpu/drm/drm_rect.c:309
msgid "``struct drm_rect *r``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:95
msgid "rectangle"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:97
#: include/drm/drm_rect.h:151 ../../../gpu/drm-kms-helpers:470:
#: drivers/gpu/drm/drm_crtc_helper.c:268
msgid "``int x``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:98
#: include/drm/drm_rect.h:152 ../../../gpu/drm-kms-helpers:470:
#: drivers/gpu/drm/drm_crtc_helper.c:269
msgid "``int y``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:111
msgid "adjust the size of the rectangle"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:112
msgid "rectangle to be adjusted"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:114
msgid "``int dw``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:113
msgid "horizontal adjustment"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:115
msgid "``int dh``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:114
msgid "vertical adjustment"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:115
msgid ""
"Change the size of rectangle **r** by **dw** in the horizontal direction, "
"and by **dh** in the vertical direction, while keeping the center of **r** "
"stationary."
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:119
msgid ""
"Positive **dw** and **dh** increase the size, negative values decrease it."
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:131
msgid "translate the rectangle"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:132
#: include/drm/drm_rect.h:149
msgid "rectangle to be translated"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:134
msgid "``int dx``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:133
msgid "horizontal translation"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:135
msgid "``int dy``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:134
msgid "vertical translation"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:135
msgid ""
"Move rectangle **r** by **dx** in the horizontal direction, and by **dy** in "
"the vertical direction."
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:148
msgid "translate the rectangle to an absolute position"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:150
msgid "horizontal position"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:151
msgid "vertical position"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:152
msgid ""
"Move rectangle **r** to **x** in the horizontal direction, and to **y** in "
"the vertical direction."
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:162
msgid "downscale a rectangle"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:163
msgid "rectangle to be downscaled"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:165
msgid "``int horz``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:164
msgid "horizontal downscale factor"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:166
msgid "``int vert``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:165
msgid "vertical downscale factor"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:166
msgid "Divide the coordinates of rectangle **r** by **horz** and **vert**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:178
msgid "determine the rectangle width"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:184
#: include/drm/drm_rect.h:196 include/drm/drm_rect.h:208
#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:225
msgid "``const struct drm_rect *r``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:179
msgid "rectangle whose width is returned"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:181
msgid "The width of the rectangle."
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:190
msgid "determine the rectangle height"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:191
msgid "rectangle whose height is returned"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:193
msgid "The height of the rectangle."
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:202
msgid "determine if the rectangle is visible"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:203
msgid "rectangle whose visibility is returned"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:205
msgid "``true`` if the rectangle is visible, ``false`` otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:214
msgid "determine if two rectangles are equal"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:220
msgid "``const struct drm_rect *r1``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:215
#: include/drm/drm_rect.h:243 ../../../gpu/drm-kms-helpers:422:
#: drivers/gpu/drm/drm_rect.c:34
msgid "first rectangle"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:217
#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:36
msgid "``const struct drm_rect *r2``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:216
#: include/drm/drm_rect.h:244 ../../../gpu/drm-kms-helpers:422:
#: drivers/gpu/drm/drm_rect.c:35
msgid "second rectangle"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:218
msgid "``true`` if the rectangles are equal, ``false`` otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:229
msgid "Convert a rect in 16.16 fixed point form to int form."
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:235
#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:81
msgid "``struct drm_rect *dst``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:230
msgid "rect to be stored the converted value"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:232
#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:158
#: drivers/gpu/drm/drm_rect.c:193
msgid "``const struct drm_rect *src``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:231
msgid "rect in 16.16 fixed point form"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:242
msgid "Check if two rectangles overlap"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:248
msgid "``const struct drm_rect *a``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:245
msgid "``const struct drm_rect *b``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:419: include/drm/drm_rect.h:246
msgid "``true`` if the rectangles overlap, ``false`` otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:33
msgid "intersect two rectangles"
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:39
msgid "``struct drm_rect *r1``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:36
msgid ""
"Calculate the intersection of rectangles **r1** and **r2**. **r1** will be "
"overwritten with the intersection."
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:40
msgid ""
"``true`` if rectangle **r1** is still visible after the operation, ``false`` "
"otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:78
msgid "perform a scaled clip operation"
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:84
msgid "``struct drm_rect *src``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:79
#: drivers/gpu/drm/drm_rect.c:153 drivers/gpu/drm/drm_rect.c:188
msgid "source window rectangle"
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:80
#: drivers/gpu/drm/drm_rect.c:154 drivers/gpu/drm/drm_rect.c:189
msgid "destination window rectangle"
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:81
msgid "clip rectangle"
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:82
msgid ""
"Clip rectangle **dst** by rectangle **clip**. Clip rectangle **src** by the "
"corresponding amounts, retaining the vertical and horizontal scaling factors "
"from **src** to **dst**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:87
msgid ""
"``true`` if rectangle **dst** is still visible after being clipped, "
"``false`` otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:152
msgid "calculate the horizontal scaling factor"
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:155
#: drivers/gpu/drm/drm_rect.c:190
msgid "``const struct drm_rect *dst``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:156
msgid "``int min_hscale``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:155
msgid "minimum allowed horizontal scaling factor"
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:157
msgid "``int max_hscale``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:156
msgid "maximum allowed horizontal scaling factor"
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:157
msgid ""
"Calculate the horizontal scaling factor as (**src** width) / (**dst** width)."
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:160
#: drivers/gpu/drm/drm_rect.c:195
msgid ""
"If the scale is below 1 << 16, round down. If the scale is above 1 << 16, "
"round up. This will calculate the scale with the most pessimistic limit "
"calculation."
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:165
msgid "The horizontal scaling factor, or errno of out of limits."
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:187
msgid "calculate the vertical scaling factor"
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:191
msgid "``int min_vscale``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:190
msgid "minimum allowed vertical scaling factor"
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:192
msgid "``int max_vscale``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:191
msgid "maximum allowed vertical scaling factor"
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:192
msgid ""
"Calculate the vertical scaling factor as (**src** height) / (**dst** height)."
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:200
msgid "The vertical scaling factor, or errno of out of limits."
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:222
msgid "print the rectangle information"
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:228
msgid "``const char *prefix``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:223
msgid "prefix string"
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:224
msgid "rectangle to print"
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:226
msgid "``bool fixed_point``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:225
msgid "rectangle is in 16.16 fixed point format"
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:237
msgid "Rotate the rectangle"
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:238
#: drivers/gpu/drm/drm_rect.c:304
msgid "rectangle to be rotated"
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:239
#: drivers/gpu/drm/drm_rect.c:305
msgid "Width of the coordinate space"
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:240
#: drivers/gpu/drm/drm_rect.c:306
msgid "Height of the coordinate space"
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:241
msgid "Transformation to be applied"
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:242
msgid "Apply **rotation** to the coordinates of rectangle **r**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:244
#: drivers/gpu/drm/drm_rect.c:311
msgid ""
"**width** and **height** combined with **rotation** define the location of "
"the new origin."
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:247
msgid ""
"**width** correcsponds to the horizontal and **height** to the vertical axis "
"of the untransformed coordinate space."
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:303
msgid "Inverse rotate the rectangle"
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:307
msgid "Transformation whose inverse is to be applied"
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:308
msgid ""
"Apply the inverse of **rotation** to the coordinates of rectangle **r**."
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:314
msgid ""
"**width** correcsponds to the horizontal and **height** to the vertical axis "
"of the original untransformed coordinate space, so that you never have to "
"flip them when doing a rotatation and its inverse. That is, if you do ::"
msgstr ""

#: ../../../gpu/drm-kms-helpers:422: drivers/gpu/drm/drm_rect.c:323
msgid "you will always get back the original rectangle."
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:426
msgid "Flip-work Helper Reference"
msgstr ""

#: ../../../gpu/drm-kms-helpers:428: include/drm/drm_flip_work.h:32
msgid ""
"Utility to queue up work to run from work-queue context after flip/vblank. "
"Typically this can be used to defer unref of framebuffer's, cursor bo's, etc "
"until after vblank. The APIs are all thread-safe. Moreover, "
"drm_flip_work_commit() can be called in atomic context."
msgstr ""

#: ../../../gpu/drm-kms-helpers:431: include/drm/drm_flip_work.h:54
msgid "flip work queue"
msgstr ""

#: ../../../gpu/drm-kms-helpers:431: include/drm/drm_flip_work.h:56
#: ../../../gpu/drm-kms-helpers:434: drivers/gpu/drm/drm_flip_work.c:130
msgid "debug name"
msgstr ""

#: ../../../gpu/drm-kms-helpers:431: include/drm/drm_flip_work.h:56
msgid "``func``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:431: include/drm/drm_flip_work.h:57
msgid "callback fxn called for each committed item"
msgstr ""

#: ../../../gpu/drm-kms-helpers:431: include/drm/drm_flip_work.h:57
msgid "``worker``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:431: include/drm/drm_flip_work.h:58
msgid "worker which calls **func**"
msgstr ""

#: ../../../gpu/drm-kms-helpers:431: include/drm/drm_flip_work.h:58
msgid "``queued``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:431: include/drm/drm_flip_work.h:59
msgid "queued tasks"
msgstr ""

#: ../../../gpu/drm-kms-helpers:431: include/drm/drm_flip_work.h:59
msgid "``commited``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:431: include/drm/drm_flip_work.h:60
msgid "commited tasks"
msgstr ""

#: ../../../gpu/drm-kms-helpers:431: include/drm/drm_flip_work.h:61
msgid "lock to access queued and commited lists"
msgstr ""

#: ../../../gpu/drm-kms-helpers:434: drivers/gpu/drm/drm_flip_work.c:57
msgid "queue work"
msgstr ""

#: ../../../gpu/drm-kms-helpers:434: drivers/gpu/drm/drm_flip_work.c:63
#: drivers/gpu/drm/drm_flip_work.c:86 drivers/gpu/drm/drm_flip_work.c:134
#: drivers/gpu/drm/drm_flip_work.c:155
msgid "``struct drm_flip_work *work``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:434: drivers/gpu/drm/drm_flip_work.c:58
#: drivers/gpu/drm/drm_flip_work.c:81
msgid "the flip-work"
msgstr ""

#: ../../../gpu/drm-kms-helpers:434: drivers/gpu/drm/drm_flip_work.c:60
msgid "``void *val``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:434: drivers/gpu/drm/drm_flip_work.c:59
msgid "the value to queue"
msgstr ""

#: ../../../gpu/drm-kms-helpers:434: drivers/gpu/drm/drm_flip_work.c:60
msgid ""
"Queues work, that will later be run (passed back to drm_flip_func_t func) on "
"a work queue after drm_flip_work_commit() is called."
msgstr ""

#: ../../../gpu/drm-kms-helpers:434: drivers/gpu/drm/drm_flip_work.c:80
msgid "commit queued work"
msgstr ""

#: ../../../gpu/drm-kms-helpers:434: drivers/gpu/drm/drm_flip_work.c:83
msgid "``struct workqueue_struct *wq``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:434: drivers/gpu/drm/drm_flip_work.c:82
msgid "the work-queue to run the queued work on"
msgstr ""

#: ../../../gpu/drm-kms-helpers:434: drivers/gpu/drm/drm_flip_work.c:83
msgid ""
"Trigger work previously queued by drm_flip_work_queue() to run on a "
"workqueue.  The typical usage would be to queue work (via "
"drm_flip_work_queue()) at any point (from vblank irq and/or prior), and then "
"from vblank irq commit the queued work."
msgstr ""

#: ../../../gpu/drm-kms-helpers:434: drivers/gpu/drm/drm_flip_work.c:128
msgid "initialize flip-work"
msgstr ""

#: ../../../gpu/drm-kms-helpers:434: drivers/gpu/drm/drm_flip_work.c:129
msgid "the flip-work to initialize"
msgstr ""

#: ../../../gpu/drm-kms-helpers:434: drivers/gpu/drm/drm_flip_work.c:131
msgid "``const char *name``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:434: drivers/gpu/drm/drm_flip_work.c:132
msgid "``drm_flip_func_t func``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:434: drivers/gpu/drm/drm_flip_work.c:131
msgid "the callback work function"
msgstr ""

#: ../../../gpu/drm-kms-helpers:434: drivers/gpu/drm/drm_flip_work.c:132
msgid "Initializes/allocates resources for the flip-work"
msgstr ""

#: ../../../gpu/drm-kms-helpers:434: drivers/gpu/drm/drm_flip_work.c:149
msgid "cleans up flip-work"
msgstr ""

#: ../../../gpu/drm-kms-helpers:434: drivers/gpu/drm/drm_flip_work.c:150
msgid "the flip-work to cleanup"
msgstr ""

#: ../../../gpu/drm-kms-helpers:434: drivers/gpu/drm/drm_flip_work.c:151
msgid "Destroy resources allocated for the flip-work"
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:438
msgid "Auxiliary Modeset Helpers"
msgstr ""

#: ../../../gpu/drm-kms-helpers:440: drivers/gpu/drm/drm_modeset_helper.c:35
msgid ""
"This helper library contains various one-off functions which don't really "
"fit anywhere else in the DRM modeset helper library."
msgstr ""

#: ../../../gpu/drm-kms-helpers:443: drivers/gpu/drm/drm_modeset_helper.c:42
msgid "move panels to the front in the connector list"
msgstr ""

#: ../../../gpu/drm-kms-helpers:443: drivers/gpu/drm/drm_modeset_helper.c:44
msgid "drm device to operate on"
msgstr ""

#: ../../../gpu/drm-kms-helpers:443: drivers/gpu/drm/drm_modeset_helper.c:45
msgid ""
"Some userspace presumes that the first connected connector is the main "
"display, where it's supposed to display e.g. the login screen. For laptops, "
"this should be the main panel. Use this function to sort all (eDP/LVDS/DSI) "
"panels to the front of the connector list, instead of painstakingly trying "
"to initialize them in the right order."
msgstr ""

#: ../../../gpu/drm-kms-helpers:443: drivers/gpu/drm/drm_modeset_helper.c:74
msgid "fill out framebuffer metadata"
msgstr ""

#: ../../../gpu/drm-kms-helpers:443: drivers/gpu/drm/drm_modeset_helper.c:76
msgid "drm_framebuffer object to fill out"
msgstr ""

#: ../../../gpu/drm-kms-helpers:443: drivers/gpu/drm/drm_modeset_helper.c:78
msgid "metadata from the userspace fb creation request"
msgstr ""

#: ../../../gpu/drm-kms-helpers:443: drivers/gpu/drm/drm_modeset_helper.c:79
msgid ""
"This helper can be used in a drivers fb_create callback to pre-fill the fb's "
"metadata fields."
msgstr ""

#: ../../../gpu/drm-kms-helpers:443: drivers/gpu/drm/drm_modeset_helper.c:119
msgid "Legacy CRTC initialization function"
msgstr ""

#: ../../../gpu/drm-kms-helpers:443: drivers/gpu/drm/drm_modeset_helper.c:121
msgid "CRTC object to init"
msgstr ""

#: ../../../gpu/drm-kms-helpers:443: drivers/gpu/drm/drm_modeset_helper.c:123
msgid "``const struct drm_crtc_funcs *funcs``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:443: drivers/gpu/drm/drm_modeset_helper.c:122
msgid "callbacks for the new CRTC"
msgstr ""

#: ../../../gpu/drm-kms-helpers:443: drivers/gpu/drm/drm_modeset_helper.c:123
msgid ""
"Initialize a CRTC object with a default helper-provided primary plane and no "
"cursor plane."
msgstr ""

#: ../../../gpu/drm-kms-helpers:443: drivers/gpu/drm/drm_modeset_helper.c:126
msgid ""
"Note that we make some assumptions about hardware limitations that may not "
"be true for all hardware:"
msgstr ""

#: ../../../gpu/drm-kms-helpers:443: drivers/gpu/drm/drm_modeset_helper.c:129
msgid "Primary plane cannot be repositioned."
msgstr ""

#: ../../../gpu/drm-kms-helpers:443: drivers/gpu/drm/drm_modeset_helper.c:130
msgid "Primary plane cannot be scaled."
msgstr ""

#: ../../../gpu/drm-kms-helpers:443: drivers/gpu/drm/drm_modeset_helper.c:131
msgid "Primary plane must cover the entire CRTC."
msgstr ""

#: ../../../gpu/drm-kms-helpers:443: drivers/gpu/drm/drm_modeset_helper.c:132
msgid "Subpixel positioning is not supported."
msgstr ""

#: ../../../gpu/drm-kms-helpers:443: drivers/gpu/drm/drm_modeset_helper.c:133
msgid "The primary plane must always be on if the CRTC is enabled."
msgstr ""

#: ../../../gpu/drm-kms-helpers:443: drivers/gpu/drm/drm_modeset_helper.c:135
msgid ""
"This is purely a backwards compatibility helper for old drivers. Drivers "
"should instead implement their own primary plane. Atomic drivers must do so. "
"Drivers with the above hardware restriction can look into using :c:type:"
"`struct drm_simple_display_pipe <drm_simple_display_pipe>`, which "
"encapsulates the above limitations into a nice interface."
msgstr ""

#: ../../../gpu/drm-kms-helpers:443: drivers/gpu/drm/drm_modeset_helper.c:180
msgid "Modeset suspend helper"
msgstr ""

#: ../../../gpu/drm-kms-helpers:443: drivers/gpu/drm/drm_modeset_helper.c:182
msgid ""
"This helper function takes care of suspending the modeset side. It disables "
"output polling if initialized, suspends fbdev if used and finally calls "
"drm_atomic_helper_suspend(). If suspending fails, fbdev and polling is re-"
"enabled."
msgstr ""

#: ../../../gpu/drm-kms-helpers:443: drivers/gpu/drm/drm_modeset_helper.c:188
msgid "See also: drm_kms_helper_poll_disable() and drm_client_dev_suspend()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:443: drivers/gpu/drm/drm_modeset_helper.c:188
#: drivers/gpu/drm/drm_modeset_helper.c:234
msgid "Zero on success, negative error code on error."
msgstr ""

#: ../../../gpu/drm-kms-helpers:443: drivers/gpu/drm/drm_modeset_helper.c:227
msgid "Modeset resume helper"
msgstr ""

#: ../../../gpu/drm-kms-helpers:443: drivers/gpu/drm/drm_modeset_helper.c:229
msgid ""
"This helper function takes care of resuming the modeset side. It calls "
"drm_atomic_helper_resume(), resumes fbdev if used and enables output polling "
"if initiaized."
msgstr ""

#: ../../../gpu/drm-kms-helpers:443: drivers/gpu/drm/drm_modeset_helper.c:234
msgid "See also: drm_client_dev_resume() and drm_kms_helper_poll_enable()."
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:447
msgid "OF/DT Helpers"
msgstr ""

#: ../../../gpu/drm-kms-helpers:449: drivers/gpu/drm/drm_of.c:18
msgid ""
"A set of helper functions to aid DRM drivers in parsing standard DT "
"properties."
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:25
msgid "find the mask of a registered CRTC by port OF node"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:28
#: drivers/gpu/drm/drm_of.c:53
msgid "``struct device_node *port``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:27
msgid "port OF node"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:28
msgid ""
"Given a port OF node, return the possible mask of the corresponding CRTC "
"within a device's list of CRTCs.  Returns zero if not found."
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:50
msgid "find the possible CRTCs for an encoder port"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:52
msgid "encoder port to scan for endpoints"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:53
msgid ""
"Scan all endpoints attached to a port, locate their attached CRTCs, and "
"generate the DRM mask of CRTCs which may be attached to this encoder."
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:57
msgid "See Documentation/devicetree/bindings/graph.txt for the bindings."
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:83
msgid "Add a component helper OF node match rule"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:89
msgid "``struct device *master``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:84
msgid "master device"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:86
msgid "``struct component_match **matchptr``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:85
msgid "component match pointer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:87
msgid "``int (*compare)(struct device *, void *)``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:86
msgid "compare function used for matching component"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:87
msgid "of_node"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:101
msgid "Generic probe function for a component based master"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:102
msgid "master device containing the OF node"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:104
msgid "``int (*compare_of)(struct device *, void *)``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:103
msgid "compare function used for matching components"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:105
msgid "``const struct component_master_ops *m_ops``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:104
msgid "component master ops to be used"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:105
msgid ""
"Parse the platform device OF node and bind all the components associated "
"with the master. Interface ports are added before the encoders in order to "
"satisfy their .bind requirements See Documentation/devicetree/bindings/graph."
"txt for the bindings."
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:110
#: drivers/gpu/drm/drm_of.c:234
msgid ""
"Returns zero if successful, or one of the standard error codes if it fails."
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:221
msgid "return connected panel or bridge device"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:224
msgid "``int port``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:225
msgid "``int endpoint``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:226
msgid "``struct drm_panel **panel``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:225
msgid "pointer to hold returned drm_panel"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:227
msgid "``struct drm_bridge **bridge``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:226
msgid "pointer to hold returned drm_bridge"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:227
msgid ""
"Given a DT node's port and endpoint number, find the connected node and "
"return either the associated struct drm_panel or drm_bridge device. Either "
"**panel** or **bridge** must not be NULL."
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:231
msgid ""
"This function is deprecated and should not be used in new drivers. Use "
"devm_drm_of_get_bridge() instead."
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:360
msgid "Get LVDS dual-link source pixel order"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:366
msgid "``const struct device_node *port1``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:361
msgid "First DT port node of the Dual-link LVDS source"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:363
msgid "``const struct device_node *port2``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:362
msgid "Second DT port node of the Dual-link LVDS source"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:363
msgid ""
"An LVDS dual-link connection is made of two links, with even pixels "
"transitting on one link, and odd pixels on the other link. This function "
"returns, for two ports of an LVDS dual-link source, which port shall "
"transmit the even and odd pixels, based on the requirements of the connected "
"sink."
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:368
#: drivers/gpu/drm/drm_of.c:418
msgid ""
"The pixel order is determined from the dual-lvds-even-pixels and dual-lvds-"
"odd-pixels properties in the sink's DT port nodes. If those properties are "
"not present, or if their usage is not valid, this function returns -EINVAL."
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:373
#: drivers/gpu/drm/drm_of.c:423
msgid "If either port is not connected, this function returns -EPIPE."
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:375
msgid ""
"**port1** and **port2** are typically DT sibling nodes, but may have "
"different parents when, for instance, two separate LVDS encoders carry the "
"even and odd pixels."
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:380
msgid ""
"DRM_LVDS_DUAL_LINK_EVEN_ODD_PIXELS - **port1** carries even pixels and "
"**port2** carries odd pixels"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:382
msgid ""
"DRM_LVDS_DUAL_LINK_ODD_EVEN_PIXELS - **port1** carries odd pixels and "
"**port2** carries even pixels"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:384
msgid ""
"-EINVAL - **port1** and **port2** are not connected to a dual-link LVDS "
"sink, or the sink configuration is invalid"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:386
#: drivers/gpu/drm/drm_of.c:435
msgid "-EPIPE - when **port1** or **port2** are not connected"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:410
msgid "Get LVDS dual-link sink pixel order"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:416
msgid "``struct device_node *port1``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:411
msgid "First DT port node of the Dual-link LVDS sink"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:413
msgid "``struct device_node *port2``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:412
msgid "Second DT port node of the Dual-link LVDS sink"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:413
msgid ""
"An LVDS dual-link connection is made of two links, with even pixels "
"transitting on one link, and odd pixels on the other link. This function "
"returns, for two ports of an LVDS dual-link sink, which port shall transmit "
"the even and odd pixels, based on the requirements of the sink."
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:425
msgid ""
"**port1** and **port2** are typically DT sibling nodes, but may have "
"different parents when, for instance, two separate LVDS decoders receive the "
"even and odd pixels."
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:430
msgid ""
"DRM_LVDS_DUAL_LINK_EVEN_ODD_PIXELS - **port1** receives even pixels and "
"**port2** receives odd pixels"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:432
msgid ""
"DRM_LVDS_DUAL_LINK_ODD_EVEN_PIXELS - **port1** receives odd pixels and "
"**port2** receives even pixels"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:434
msgid "-EINVAL - **port1** or **port2** are NULL"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:459
msgid "Get LVDS data mapping"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:465
#: drivers/gpu/drm/drm_of.c:533
msgid "``const struct device_node *port``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:460
msgid "DT port node of the LVDS source or sink"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:461
msgid ""
"Convert DT \"data-mapping\" property string value into media bus format "
"value."
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:464
msgid "MEDIA_BUS_FMT_RGB666_1X7X3_SPWG - data-mapping is \"jeida-18\""
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:465
msgid "MEDIA_BUS_FMT_RGB888_1X7X4_JEIDA - data-mapping is \"jeida-24\""
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:466
msgid "MEDIA_BUS_FMT_RGB101010_1X7X5_JEIDA - data-mapping is \"jeida-30\""
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:467
msgid "MEDIA_BUS_FMT_RGB888_1X7X4_SPWG - data-mapping is \"vesa-24\""
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:468
msgid "MEDIA_BUS_FMT_RGB101010_1X7X5_SPWG - data-mapping is \"vesa-30\""
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:469
#: drivers/gpu/drm/drm_of.c:538
msgid "-EINVAL - the \"data-mapping\" property is unsupported"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:470
#: drivers/gpu/drm/drm_of.c:539
msgid "-ENODEV - the \"data-mapping\" property is missing"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:498
msgid "Get DSI/(e)DP data lane count"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:504
msgid "``const struct device_node *endpoint``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:499
msgid "DT endpoint node of the DSI/(e)DP source or sink"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:501
#: drivers/gpu/drm/drm_of.c:532
msgid "``const unsigned int min``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:500
#: drivers/gpu/drm/drm_of.c:531
msgid "minimum supported number of data lanes"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:502
#: drivers/gpu/drm/drm_of.c:533
msgid "``const unsigned int max``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:501
#: drivers/gpu/drm/drm_of.c:532
msgid "maximum supported number of data lanes"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:502
msgid "Count DT \"data-lanes\" property elements and check for validity."
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:505
#: drivers/gpu/drm/drm_of.c:537
msgid "min..max - positive integer count of \"data-lanes\" elements"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:506
msgid "-ve - the \"data-lanes\" property is missing or invalid"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:507
msgid "-EINVAL - the \"data-lanes\" property is unsupported"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:527
msgid "Get DSI/(e)DP data lane count by endpoint"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:528
msgid "DT port node of the DSI/(e)DP source or sink"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:530
msgid "``int port_reg``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:529
msgid "identifier (value of reg property) of the parent port node"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:531
msgid "``int reg``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:530
msgid "identifier (value of reg property) of the endpoint node"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:533
msgid ""
"Count DT \"data-lanes\" property elements and check for validity. This "
"variant uses endpoint specifier."
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:561
msgid "find the DSI bus for a given device"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:562
msgid "parent device of display (SPI, I2C)"
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:563
msgid ""
"Gets parent DSI bus for a DSI device controlled through a bus other than "
"MIPI-DCS (SPI, I2C, etc.) using the Device Tree."
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:566
msgid "This function assumes that the device's port**0** is the DSI input."
msgstr ""

#: ../../../gpu/drm-kms-helpers:452: drivers/gpu/drm/drm_of.c:568
msgid ""
"Returns pointer to mipi_dsi_host if successful, -EINVAL if the request is "
"unsupported, -EPROBE_DEFER if the DSI host is found but not available, or -"
"ENODEV otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:456
msgid "Legacy Plane Helper Reference"
msgstr ""

#: ../../../gpu/drm-kms-helpers:458: drivers/gpu/drm/drm_plane_helper.c:42
msgid ""
"This helper library contains helpers to implement primary plane support on "
"top of the normal CRTC configuration interface. Since the legacy :c:type:"
"`drm_mode_config_funcs.set_config <drm_mode_config_funcs>` interface ties "
"the primary plane together with the CRTC state this does not allow userspace "
"to disable the primary plane itself. The default primary plane only expose "
"XRBG8888 and ARGB8888 as valid pixel formats for the attached framebuffer."
msgstr ""

#: ../../../gpu/drm-kms-helpers:458: drivers/gpu/drm/drm_plane_helper.c:49
msgid ""
"Drivers are highly recommended to implement proper support for primary "
"planes, and newly merged drivers must not rely upon these transitional "
"helpers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:458: drivers/gpu/drm/drm_plane_helper.c:53
msgid ""
"The plane helpers share the function table structures with other helpers, "
"specifically also the atomic helpers. See :c:type:`struct "
"drm_plane_helper_funcs <drm_plane_helper_funcs>` for the details."
msgstr ""

#: ../../../gpu/drm-kms-helpers:461: drivers/gpu/drm/drm_plane_helper.c:143
msgid "Helper for updating primary planes"
msgstr ""

#: ../../../gpu/drm-kms-helpers:461: drivers/gpu/drm/drm_plane_helper.c:144
msgid "plane to update"
msgstr ""

#: ../../../gpu/drm-kms-helpers:461: drivers/gpu/drm/drm_plane_helper.c:145
msgid "the plane's new CRTC"
msgstr ""

#: ../../../gpu/drm-kms-helpers:461: drivers/gpu/drm/drm_plane_helper.c:146
msgid "the plane's new framebuffer"
msgstr ""

#: ../../../gpu/drm-kms-helpers:461: drivers/gpu/drm/drm_plane_helper.c:147
msgid "x coordinate within CRTC"
msgstr ""

#: ../../../gpu/drm-kms-helpers:461: drivers/gpu/drm/drm_plane_helper.c:148
msgid "y coordinate within CRTC"
msgstr ""

#: ../../../gpu/drm-kms-helpers:461: drivers/gpu/drm/drm_plane_helper.c:149
msgid "width coordinate within CRTC"
msgstr ""

#: ../../../gpu/drm-kms-helpers:461: drivers/gpu/drm/drm_plane_helper.c:150
msgid "height coordinate within CRTC"
msgstr ""

#: ../../../gpu/drm-kms-helpers:461: drivers/gpu/drm/drm_plane_helper.c:151
msgid "x coordinate within source"
msgstr ""

#: ../../../gpu/drm-kms-helpers:461: drivers/gpu/drm/drm_plane_helper.c:152
msgid "y coordinate within source"
msgstr ""

#: ../../../gpu/drm-kms-helpers:461: drivers/gpu/drm/drm_plane_helper.c:153
msgid "width coordinate within source"
msgstr ""

#: ../../../gpu/drm-kms-helpers:461: drivers/gpu/drm/drm_plane_helper.c:154
msgid "height coordinate within source"
msgstr ""

#: ../../../gpu/drm-kms-helpers:461: drivers/gpu/drm/drm_plane_helper.c:155
#: drivers/gpu/drm/drm_plane_helper.c:247
msgid "modeset locking context"
msgstr ""

#: ../../../gpu/drm-kms-helpers:461: drivers/gpu/drm/drm_plane_helper.c:156
msgid ""
"This helper validates the given parameters and updates the primary plane."
msgstr ""

#: ../../../gpu/drm-kms-helpers:461: drivers/gpu/drm/drm_plane_helper.c:158
#: drivers/gpu/drm/drm_plane_helper.c:251
msgid ""
"This function is only useful for non-atomic modesetting. Don't use it in new "
"drivers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:461: drivers/gpu/drm/drm_plane_helper.c:245
msgid "Helper for disabling primary planes"
msgstr ""

#: ../../../gpu/drm-kms-helpers:461: drivers/gpu/drm/drm_plane_helper.c:248
msgid "This helper returns an error when trying to disable the primary plane."
msgstr ""

#: ../../../gpu/drm-kms-helpers:461: drivers/gpu/drm/drm_plane_helper.c:255
msgid "An errno code."
msgstr ""

#: ../../../gpu/drm-kms-helpers:461: drivers/gpu/drm/drm_plane_helper.c:270
msgid "Helper for primary plane destruction"
msgstr ""

#: ../../../gpu/drm-kms-helpers:461: drivers/gpu/drm/drm_plane_helper.c:271
msgid "plane to destroy"
msgstr ""

#: ../../../gpu/drm-kms-helpers:461: drivers/gpu/drm/drm_plane_helper.c:272
msgid ""
"Provides a default plane destroy handler for primary planes.  This handler "
"is called during CRTC destruction.  We disable the primary plane, remove it "
"from the DRM plane list, and deallocate the plane structure."
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:465
msgid "Legacy CRTC/Modeset Helper Functions Reference"
msgstr ""

#: ../../../gpu/drm-kms-helpers:467: drivers/gpu/drm/drm_crtc_helper.c:66
msgid ""
"The CRTC modeset helper library provides a default set_config implementation "
"in drm_crtc_helper_set_config(). Plus a few other convenience functions "
"using the same callbacks which drivers can use to e.g. restore the modeset "
"configuration on resume with drm_helper_resume_force_mode()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:467: drivers/gpu/drm/drm_crtc_helper.c:71
msgid ""
"Note that this helper library doesn't track the current power state of CRTCs "
"and encoders. It can call callbacks like :c:type:`drm_encoder_helper_funcs."
"dpms <drm_encoder_helper_funcs>` even though the hardware is already in the "
"desired state. This deficiency has been fixed in the atomic helpers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:467: drivers/gpu/drm/drm_crtc_helper.c:76
msgid ""
"The driver callbacks are mostly compatible with the atomic modeset helpers, "
"except for the handling of the primary plane: Atomic helpers require that "
"the primary plane is implemented as a real standalone plane and not directly "
"tied to the CRTC state. For easier transition this library provides "
"functions to implement the old semantics required by the CRTC helpers using "
"the new plane and atomic helper callbacks."
msgstr ""

#: ../../../gpu/drm-kms-helpers:467: drivers/gpu/drm/drm_crtc_helper.c:83
msgid ""
"Drivers are strongly urged to convert to the atomic helpers (by way of first "
"converting to the plane helpers). New drivers must not use these functions "
"but need to implement the atomic interface instead, potentially using the "
"atomic helpers for that."
msgstr ""

#: ../../../gpu/drm-kms-helpers:467: drivers/gpu/drm/drm_crtc_helper.c:88
msgid ""
"These legacy modeset helpers use the same function table structures as all "
"other modesetting helpers. See the documentation for struct :c:type:"
"`drm_crtc_helper_funcs`, :c:type:`struct drm_encoder_helper_funcs "
"<drm_encoder_helper_funcs>` and struct :c:type:`drm_connector_helper_funcs`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:97
msgid "check if a given encoder is in use"
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:98
msgid "encoder to check"
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:99
msgid ""
"Checks whether **encoder** is with the current mode setting output "
"configuration in use by any connector. This doesn't mean that it is actually "
"enabled since the DPMS state is tracked separately."
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:104
msgid "True if **encoder** is used, false otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:138
msgid "check if a given CRTC is in a mode_config"
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:139
#: drivers/gpu/drm/drm_crtc_helper.c:439
msgid "CRTC to check"
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:140
msgid ""
"Checks whether **crtc** is with the current mode setting output "
"configuration in use by any connector. This doesn't mean that it is actually "
"enabled since the DPMS state is tracked separately."
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:145
msgid "True if **crtc** is used, false otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:213
msgid "disable unused objects"
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:215
msgid ""
"This function walks through the entire mode setting configuration of "
"**dev**. It will remove any CRTC links of unused encoders and encoder links "
"of disconnected connectors. Then it will disable all unused encoders and "
"CRTCs either by calling their disable callback if available or by calling "
"their dpms callback with DRM_MODE_DPMS_OFF."
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:222
msgid ""
"This function is part of the legacy modeset helper library and will cause "
"major confusion with atomic drivers. This is because atomic helpers "
"guarantee to never call ->disable() hooks on a disabled function, or -"
">enable() hooks on an enabled functions. "
"drm_helper_disable_unused_functions() on the other hand throws such "
"guarantees into the wind and calls disable hooks unconditionally on unused "
"functions."
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:264
msgid "internal helper to set a mode"
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:265
msgid "CRTC to program"
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:267
msgid "``struct drm_display_mode *mode``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:266
msgid "mode to use"
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:267
msgid "horizontal offset into the surface"
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:268
msgid "vertical offset into the surface"
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:270
msgid "``struct drm_framebuffer *old_fb``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:269
msgid "old framebuffer, for cleanup"
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:270
msgid ""
"Try to set **mode** on **crtc**.  Give **crtc** and its associated "
"connectors a chance to fixup or reject the mode prior to trying to set it. "
"This is an internal helper that drivers could e.g. use to update properties "
"that require the entire output pipe to be disabled and re-enabled in a new "
"configuration. For example for changing whether audio is enabled on a hdmi "
"link or for changing panel fitter or dither attributes. It is also called by "
"the drm_crtc_helper_set_config() helper function to drive the mode setting "
"sequence."
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:280
msgid "True if the mode was set successfully, false otherwise."
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:438
msgid "Helper to check CRTC atomic-state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:441
msgid ""
"Provides a default CRTC-state check handler for CRTCs that only have one "
"primary plane attached to it. This is often the case for the CRTC of simple "
"framebuffers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:517
msgid "lock acquire context, not used here"
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:518
msgid ""
"The drm_crtc_helper_set_config() helper function implements the of :c:type:"
"`drm_crtc_funcs.set_config <drm_crtc_funcs>` callback for drivers using the "
"legacy CRTC helpers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:522
msgid ""
"It first tries to locate the best encoder for each connector by calling the "
"connector **drm_connector_helper_funcs.best_encoder** helper operation."
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:525
msgid ""
"After locating the appropriate encoders, the helper function will call the "
"mode_fixup encoder and CRTC helper operations to adjust the requested mode, "
"or reject it completely in which case an error will be returned to the "
"application. If the new configuration after mode adjustment is identical to "
"the current configuration the helper function will return without performing "
"any other operation."
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:532
msgid ""
"If the adjusted mode is identical to the current mode but changes to the "
"frame buffer need to be applied, the drm_crtc_helper_set_config() function "
"will call the CRTC :c:type:`drm_crtc_helper_funcs.mode_set_base "
"<drm_crtc_helper_funcs>` helper operation."
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:536
msgid ""
"If the adjusted mode differs from the current mode, or if the -"
">mode_set_base() helper operation is not provided, the helper function "
"performs a full mode set sequence by calling the ->prepare(), ->mode_set() "
"and ->commit() CRTC and encoder helper operations, in that order. "
"Alternatively it can also use the dpms and disable helper operations. For "
"details see :c:type:`struct drm_crtc_helper_funcs <drm_crtc_helper_funcs>` "
"and struct :c:type:`drm_encoder_helper_funcs`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:544
msgid ""
"This function is deprecated.  New drivers must implement atomic modeset "
"support, for which this function is unsuitable. Instead drivers should use "
"drm_atomic_helper_set_config()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:889
msgid "connector dpms helper implementation"
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:890
msgid "affected connector"
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:892
msgid "``int mode``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:891
msgid "DPMS mode"
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:892
msgid ""
"The drm_helper_connector_dpms() helper function implements the :c:type:"
"`drm_connector_funcs.dpms <drm_connector_funcs>` callback for drivers using "
"the legacy CRTC helpers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:896
msgid ""
"This is the main helper function provided by the CRTC helper framework for "
"implementing the DPMS connector attribute. It computes the new desired DPMS "
"state for all encoders and CRTCs in the output mesh and calls the :c:type:"
"`drm_crtc_helper_funcs.dpms <drm_crtc_helper_funcs>` and :c:type:"
"`drm_encoder_helper_funcs.dpms <drm_encoder_helper_funcs>` callbacks "
"provided by the driver."
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:902
msgid ""
"This function is deprecated.  New drivers must implement atomic modeset "
"support, where DPMS is handled in the DRM core."
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:906
msgid "Always returns 0."
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:957
msgid "force-restore mode setting configuration"
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:958
msgid "drm_device which should be restored"
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:959
msgid ""
"Drivers which use the mode setting helpers can use this function to force-"
"restore the mode setting configuration e.g. on resume or when something else "
"might have trampled over the hw state (like some overzealous old BIOSen "
"tended to do)."
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:964
msgid ""
"This helper doesn't provide a error return value since restoring the old "
"config should never fail due to resource allocation issues since the driver "
"has successfully set the restored configuration already. Hence this should "
"boil down to the equivalent of a few dpms on calls, which also don't provide "
"an error code."
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:970
msgid ""
"Drivers where simply restoring an old configuration again might fail (e.g. "
"due to slight differences in allocating shared resources when the "
"configuration is restored in a different order than when userspace set it "
"up) need to use their own restore logic."
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:975
msgid ""
"This function is deprecated. New drivers should implement atomic mode- "
"setting and use the atomic suspend/resume helpers."
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:1032
msgid "Forcibly turn off all enabled CRTCs"
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:1033
msgid "DRM device whose CRTCs to turn off"
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:1034
msgid ""
"Drivers may want to call this on unload to ensure that all displays are "
"unlit and the GPU is in a consistent, low power state. Takes modeset locks."
msgstr ""

#: ../../../gpu/drm-kms-helpers:470: drivers/gpu/drm/drm_crtc_helper.c:1038
msgid ""
"This should only be used by non-atomic legacy drivers. For an atomic version "
"look at drm_atomic_helper_shutdown()."
msgstr ""

#: ../../../gpu/drm-kms-helpers.rst:474
msgid "Privacy-screen class"
msgstr ""

#: ../../../gpu/drm-kms-helpers:476: drivers/gpu/drm/drm_privacy_screen.c:22
msgid ""
"This class allows non KMS drivers, from e.g. drivers/platform/x86 to "
"register a privacy-screen device, which the KMS drivers can then use to "
"implement the standard privacy-screen properties, see :ref:`Standard "
"Connector Properties<standard_connector_properties>`."
msgstr ""

#: ../../../gpu/drm-kms-helpers:476: drivers/gpu/drm/drm_privacy_screen.c:27
msgid ""
"KMS drivers using a privacy-screen class device are advised to use the "
"drm_connector_attach_privacy_screen_provider() and "
"drm_connector_update_privacy_screen() helpers for dealing with this."
msgstr ""

#: ../../../gpu/drm-kms-helpers:479: include/drm/drm_privacy_screen_driver.h:20
msgid "drm_privacy_screen operations"
msgstr ""

#: ../../../gpu/drm-kms-helpers:479: include/drm/drm_privacy_screen_driver.h:27
msgid "``set_sw_state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:479: include/drm/drm_privacy_screen_driver.h:28
msgid ""
"Called to request a change of the privacy-screen state. The privacy-screen "
"class code contains a check to avoid this getting called when the hw_state "
"reports the state is locked. It is the driver's responsibility to update "
"sw_state and hw_state. This is always called with the drm_privacy_screen's "
"lock held."
msgstr ""

#: ../../../gpu/drm-kms-helpers:479: include/drm/drm_privacy_screen_driver.h:36
msgid "``get_hw_state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:479: include/drm/drm_privacy_screen_driver.h:37
msgid ""
"Called to request that the driver gets the current privacy-screen state from "
"the hardware and then updates sw_state and hw_state accordingly. This will "
"be called by the core just before the privacy-screen is registered in sysfs."
msgstr ""

#: ../../../gpu/drm-kms-helpers:479: include/drm/drm_privacy_screen_driver.h:21
msgid ""
"Defines the operations which the privacy-screen class code may call. These "
"functions should be implemented by the privacy-screen driver."
msgstr ""

#: ../../../gpu/drm-kms-helpers:479: include/drm/drm_privacy_screen_driver.h:45
msgid "central privacy-screen structure"
msgstr ""

#: ../../../gpu/drm-kms-helpers:479: include/drm/drm_privacy_screen_driver.h:52
msgid "device used to register the privacy-screen in sysfs."
msgstr ""

#: ../../../gpu/drm-kms-helpers:479: include/drm/drm_privacy_screen_driver.h:54
msgid "mutex protection all fields in this struct."
msgstr ""

#: ../../../gpu/drm-kms-helpers:479: include/drm/drm_privacy_screen_driver.h:56
msgid "privacy-screen devices list list-entry."
msgstr ""

#: ../../../gpu/drm-kms-helpers:479: include/drm/drm_privacy_screen_driver.h:57
msgid "``notifier_head``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:479: include/drm/drm_privacy_screen_driver.h:58
msgid "privacy-screen notifier head."
msgstr ""

#: ../../../gpu/drm-kms-helpers:479: include/drm/drm_privacy_screen_driver.h:61
msgid ""
":c:type:`struct drm_privacy_screen_ops <drm_privacy_screen_ops>` for this "
"privacy-screen. This is NULL if the driver has unregistered the privacy-"
"screen."
msgstr ""

#: ../../../gpu/drm-kms-helpers:479: include/drm/drm_privacy_screen_driver.h:65
msgid "``sw_state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:479: include/drm/drm_privacy_screen_driver.h:66
msgid ""
"The privacy-screen's software state, see :ref:`Standard Connector "
"Properties<standard_connector_properties>` for more info."
msgstr ""

#: ../../../gpu/drm-kms-helpers:479: include/drm/drm_privacy_screen_driver.h:71
msgid "``hw_state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:479: include/drm/drm_privacy_screen_driver.h:72
msgid ""
"The privacy-screen's hardware state, see :ref:`Standard Connector "
"Properties<standard_connector_properties>` for more info."
msgstr ""

#: ../../../gpu/drm-kms-helpers:479: include/drm/drm_privacy_screen_driver.h:77
msgid "``drvdata``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:479: include/drm/drm_privacy_screen_driver.h:78
#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:383
msgid "Private data owned by the privacy screen provider"
msgstr ""

#: ../../../gpu/drm-kms-helpers:479: include/drm/drm_privacy_screen_driver.h:46
msgid ""
"Central privacy-screen structure, this contains the struct device used to "
"register the screen in sysfs, the screen's state, ops, etc."
msgstr ""

#: ../../../gpu/drm-kms-helpers:482:
#: include/drm/drm_privacy_screen_machine.h:15
msgid "static privacy-screen lookup list entry"
msgstr ""

#: ../../../gpu/drm-kms-helpers:482:
#: include/drm/drm_privacy_screen_machine.h:22
msgid "Lookup list list-entry."
msgstr ""

#: ../../../gpu/drm-kms-helpers:482:
#: include/drm/drm_privacy_screen_machine.h:23
msgid "``dev_id``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:482:
#: include/drm/drm_privacy_screen_machine.h:24
msgid "Consumer device name or NULL to match all devices."
msgstr ""

#: ../../../gpu/drm-kms-helpers:482:
#: include/drm/drm_privacy_screen_machine.h:25
msgid "``con_id``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:482:
#: include/drm/drm_privacy_screen_machine.h:26
msgid "Consumer connector name or NULL to match all connectors."
msgstr ""

#: ../../../gpu/drm-kms-helpers:482:
#: include/drm/drm_privacy_screen_machine.h:27
msgid "``provider``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:482:
#: include/drm/drm_privacy_screen_machine.h:28
msgid "dev_name() of the privacy_screen provider."
msgstr ""

#: ../../../gpu/drm-kms-helpers:482:
#: include/drm/drm_privacy_screen_machine.h:16
msgid ""
"Used for the static lookup-list for mapping privacy-screen consumer dev-"
"connector pairs to a privacy-screen provider."
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:46
msgid "add an entry to the static privacy-screen lookup list"
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:52
#: drivers/gpu/drm/drm_privacy_screen.c:71
msgid "``struct drm_privacy_screen_lookup *lookup``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:48
msgid "lookup list entry to add"
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:49
msgid ""
"Add an entry to the static privacy-screen lookup list. Note the :c:type:"
"`struct list_head <list_head>` which is part of the :c:type:`struct "
"drm_privacy_screen_lookup <drm_privacy_screen_lookup>` gets added to a list "
"owned by the privacy-screen core. So the passed in :c:type:`struct "
"drm_privacy_screen_lookup <drm_privacy_screen_lookup>` must not be free-ed "
"until it is removed from the lookup list by calling "
"drm_privacy_screen_lookup_remove()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:65
msgid "remove an entry to the static privacy-screen lookup list"
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:67
msgid "lookup list entry to remove"
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:68
msgid ""
"Remove an entry previously added with drm_privacy_screen_lookup_add() from "
"the static privacy-screen lookup list."
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:103
msgid "get a privacy-screen provider"
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:104
msgid "consumer-device for which to get a privacy-screen provider"
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:106
msgid "``const char *con_id``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:105
msgid "(video)connector name for which to get a privacy-screen provider"
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:106
msgid ""
"Get a privacy-screen provider for a privacy-screen attached to the display "
"described by the **dev** and **con_id** parameters."
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:110
msgid ""
"A pointer to a :c:type:`struct drm_privacy_screen <drm_privacy_screen>` on "
"success."
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:111
msgid "ERR_PTR(-ENODEV) if no matching privacy-screen is found"
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:112
msgid "ERR_PTR(-EPROBE_DEFER) if there is a matching privacy-screen,"
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:113
msgid "but it has not been registered yet."
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:180
msgid "release a privacy-screen reference"
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:186
#: drivers/gpu/drm/drm_privacy_screen.c:203
#: drivers/gpu/drm/drm_privacy_screen.c:248
#: drivers/gpu/drm/drm_privacy_screen.c:268
#: drivers/gpu/drm/drm_privacy_screen.c:295
#: drivers/gpu/drm/drm_privacy_screen.c:436
#: drivers/gpu/drm/drm_privacy_screen.c:461
msgid "``struct drm_privacy_screen *priv``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:181
msgid "privacy screen reference to release"
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:182
msgid ""
"Release a privacy-screen provider reference gotten through "
"drm_privacy_screen_get(). May be called with a NULL or ERR_PTR, in which "
"case it is a no-op."
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:197
msgid "set a privacy-screen's sw-state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:198
msgid "privacy screen to set the sw-state for"
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:200
msgid "``enum drm_privacy_screen_status sw_state``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:199
msgid "new sw-state value to set"
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:200
msgid ""
"Set the sw-state of a privacy screen. If the privacy-screen is not in a "
"locked hw-state, then the actual and hw-state of the privacy-screen will be "
"immediately updated to the new value. If the privacy-screen is in a locked "
"hw-state, then the new sw-state will be remembered as the requested state to "
"put the privacy-screen in when it becomes unlocked."
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:242
msgid "get privacy-screen's current state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:243
msgid "privacy screen to get the state for"
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:245
msgid "``enum drm_privacy_screen_status *sw_state_ret``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:244
msgid "address where to store the privacy-screens current sw-state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:246
msgid "``enum drm_privacy_screen_status *hw_state_ret``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:245
msgid "address where to store the privacy-screens current hw-state"
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:246
msgid ""
"Get the current state of a privacy-screen, both the sw-state and the hw-"
"state."
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:262
msgid "register a notifier"
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:263
#: drivers/gpu/drm/drm_privacy_screen.c:290
#: drivers/gpu/drm/drm_privacy_screen.c:456
msgid "Privacy screen to register the notifier with"
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:265
#: drivers/gpu/drm/drm_privacy_screen.c:292
msgid "``struct notifier_block *nb``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:264
#: drivers/gpu/drm/drm_privacy_screen.c:291
msgid "Notifier-block for the notifier to register"
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:265
msgid ""
"Register a notifier with the privacy-screen to be notified of changes made "
"to the privacy-screen state from outside of the privacy-screen class. E.g. "
"the state may be changed by the hardware itself in response to a hotkey "
"press."
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:270
msgid ""
"The notifier is called with no locks held. The new hw_state and sw_state can "
"be retrieved using the drm_privacy_screen_get_state() function. A pointer to "
"the drm_privacy_screen's struct is passed as the ``void *data`` argument of "
"the notifier_block's notifier_call."
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:275
msgid ""
"The notifier will NOT be called when changes are made through "
"drm_privacy_screen_set_sw_state(). It is only called for external changes."
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:289
msgid "unregister a notifier"
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:292
msgid ""
"Unregister a notifier registered with drm_privacy_screen_register_notifier()."
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:380
msgid "register a privacy-screen"
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:386
msgid "``struct device *parent``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:381
msgid "parent-device for the privacy-screen"
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:383
msgid "``const struct drm_privacy_screen_ops *ops``"
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:382
msgid ""
":c:type:`struct drm_privacy_screen_ops <drm_privacy_screen_ops>` pointer "
"with ops for the privacy-screen"
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:384
msgid "Create and register a privacy-screen."
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:387
msgid "A pointer to the created privacy-screen on success."
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:388
msgid "An ERR_PTR(errno) on failure."
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:430
msgid "unregister privacy-screen"
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:431
msgid "privacy-screen to unregister"
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:432
msgid ""
"Unregister a privacy-screen registered with drm_privacy_screen_register(). "
"May be called with a NULL or ERR_PTR, in which case it is a no-op."
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:455
msgid "notify consumers of state change"
msgstr ""

#: ../../../gpu/drm-kms-helpers:485: drivers/gpu/drm/drm_privacy_screen.c:457
msgid ""
"A privacy-screen provider driver can call this functions upon external "
"changes to the privacy-screen state. E.g. the state may be changed by the "
"hardware itself in response to a hotkey press. This function must be called "
"without holding the privacy-screen lock. the driver must update sw_state and "
"hw_state to reflect the new state before calling this function. The expected "
"behavior from the driver upon receiving an external state change event is: "
"1. Take the lock; 2. Update sw_state and hw_state; 3. Release the lock. 4. "
"Call drm_privacy_screen_call_notifier_chain()."
msgstr ""
