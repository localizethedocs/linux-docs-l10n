# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 08:27+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../bpf/map_cpumap.rst:6
msgid "BPF_MAP_TYPE_CPUMAP"
msgstr ""

#: ../../../bpf/map_cpumap.rst:9
msgid "``BPF_MAP_TYPE_CPUMAP`` was introduced in kernel version 4.15"
msgstr ""

#: ../../../bpf/map_cpumap:11: kernel/bpf/cpumap.c:8
msgid ""
"The 'cpumap' is primarily used as a backend map for XDP BPF helper call "
"bpf_redirect_map() and XDP_REDIRECT action, like 'devmap'."
msgstr ""

#: ../../../bpf/map_cpumap:11: kernel/bpf/cpumap.c:11
msgid ""
"Unlike devmap which redirects XDP frames out to another NIC device, this map "
"type redirects raw XDP frames to another CPU.  The remote CPU will do SKB-"
"allocation and call the normal network stack."
msgstr ""

#: ../../../bpf/map_cpumap.rst:14
msgid ""
"An example use-case for this map type is software based Receive Side Scaling "
"(RSS)."
msgstr ""

#: ../../../bpf/map_cpumap.rst:16
msgid ""
"The CPUMAP represents the CPUs in the system indexed as the map-key, and the "
"map-value is the config setting (per CPUMAP entry). Each CPUMAP entry has a "
"dedicated kernel thread bound to the given CPU to represent the remote CPU "
"execution unit."
msgstr ""

#: ../../../bpf/map_cpumap.rst:20
msgid ""
"Starting from Linux kernel version 5.9 the CPUMAP can run a second XDP "
"program on the remote CPU. This allows an XDP program to split its "
"processing across multiple CPUs. For example, a scenario where the initial "
"CPU (that sees/receives the packets) needs to do minimal packet processing "
"and the remote CPU (to which the packet is directed) can afford to spend "
"more cycles processing the frame. The initial CPU is where the XDP redirect "
"program is executed. The remote CPU receives raw ``xdp_frame`` objects."
msgstr ""

#: ../../../bpf/map_cpumap.rst:29
msgid "Usage"
msgstr ""

#: ../../../bpf/map_cpumap.rst:32
msgid "Kernel BPF"
msgstr ""

#: ../../../bpf/map_cpumap.rst:34
msgid "bpf_redirect_map()"
msgstr ""

#: ../../../bpf/map_cpumap.rst:39
msgid ""
"Redirect the packet to the endpoint referenced by ``map`` at index ``key``. "
"For ``BPF_MAP_TYPE_CPUMAP`` this map contains references to CPUs."
msgstr ""

#: ../../../bpf/map_cpumap.rst:42
msgid ""
"The lower two bits of ``flags`` are used as the return code if the map "
"lookup fails. This is so that the return value can be one of the XDP program "
"return codes up to ``XDP_TX``, as chosen by the caller."
msgstr ""

#: ../../../bpf/map_cpumap.rst:47 ../../../bpf/map_cpumap.rst:157
msgid "User space"
msgstr ""

#: ../../../bpf/map_cpumap.rst:49
msgid ""
"CPUMAP entries can only be updated/looked up/deleted from user space and not "
"from an eBPF program. Trying to call these functions from a kernel eBPF "
"program will result in the program failing to load and a verifier warning."
msgstr ""

#: ../../../bpf/map_cpumap.rst:54
msgid "bpf_map_update_elem()"
msgstr ""

#: ../../../bpf/map_cpumap.rst:59
msgid ""
"CPU entries can be added or updated using the ``bpf_map_update_elem()`` "
"helper. This helper replaces existing elements atomically. The ``value`` "
"parameter can be ``struct bpf_cpumap_val``."
msgstr ""

#: ../../../bpf/map_cpumap.rst:73
msgid "The flags argument can be one of the following:"
msgstr ""

#: ../../../bpf/map_cpumap.rst:74
msgid "BPF_ANY: Create a new element or update an existing element."
msgstr ""

#: ../../../bpf/map_cpumap.rst:75
msgid "BPF_NOEXIST: Create a new element only if it did not exist."
msgstr ""

#: ../../../bpf/map_cpumap.rst:76
msgid "BPF_EXIST: Update an existing element."
msgstr ""

#: ../../../bpf/map_cpumap.rst:79
msgid "bpf_map_lookup_elem()"
msgstr ""

#: ../../../bpf/map_cpumap.rst:84
msgid ""
"CPU entries can be retrieved using the ``bpf_map_lookup_elem()`` helper."
msgstr ""

#: ../../../bpf/map_cpumap.rst:88
msgid "bpf_map_delete_elem()"
msgstr ""

#: ../../../bpf/map_cpumap.rst:93
msgid ""
"CPU entries can be deleted using the ``bpf_map_delete_elem()`` helper. This "
"helper will return 0 on success, or negative error in case of failure."
msgstr ""

#: ../../../bpf/map_cpumap.rst:98
msgid "Examples"
msgstr ""

#: ../../../bpf/map_cpumap.rst:100
msgid "Kernel"
msgstr ""

#: ../../../bpf/map_cpumap.rst:102
msgid ""
"The following code snippet shows how to declare a ``BPF_MAP_TYPE_CPUMAP`` "
"called ``cpu_map`` and how to redirect packets to a remote CPU using a round "
"robin scheme."
msgstr ""

#: ../../../bpf/map_cpumap.rst:159
msgid ""
"The following code snippet shows how to dynamically set the max_entries for "
"a CPUMAP to the max number of cpus available on the system."
msgstr ""

#: ../../../bpf/map_cpumap.rst:175
msgid "References"
msgstr ""

#: ../../../bpf/map_cpumap.rst:177
msgid ""
"https://developers.redhat.com/blog/2021/05/13/receive-side-scaling-rss-with-"
"ebpf-and-cpumap#redirecting_into_a_cpumap"
msgstr ""
