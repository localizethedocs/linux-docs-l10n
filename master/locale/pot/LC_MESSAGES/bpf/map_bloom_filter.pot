# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../bpf/map_bloom_filter.rst:6
msgid "BPF_MAP_TYPE_BLOOM_FILTER"
msgstr ""

#: ../../../bpf/map_bloom_filter.rst:9
msgid "``BPF_MAP_TYPE_BLOOM_FILTER`` was introduced in kernel version 5.16"
msgstr ""

#: ../../../bpf/map_bloom_filter.rst:11
msgid ""
"``BPF_MAP_TYPE_BLOOM_FILTER`` provides a BPF bloom filter map. Bloom filters "
"are a space-efficient probabilistic data structure used to quickly test "
"whether an element exists in a set. In a bloom filter, false positives are "
"possible whereas false negatives are not."
msgstr ""

#: ../../../bpf/map_bloom_filter.rst:16
msgid ""
"The bloom filter map does not have keys, only values. When the bloom filter "
"map is created, it must be created with a ``key_size`` of 0.  The bloom "
"filter map supports two operations:"
msgstr ""

#: ../../../bpf/map_bloom_filter.rst:20
msgid "push: adding an element to the map"
msgstr ""

#: ../../../bpf/map_bloom_filter.rst:21
msgid "peek: determining whether an element is present in the map"
msgstr ""

#: ../../../bpf/map_bloom_filter.rst:23
msgid ""
"BPF programs must use ``bpf_map_push_elem`` to add an element to the bloom "
"filter map and ``bpf_map_peek_elem`` to query the map. These operations are "
"exposed to userspace applications using the existing ``bpf`` syscall in the "
"following way:"
msgstr ""

#: ../../../bpf/map_bloom_filter.rst:28
msgid "``BPF_MAP_UPDATE_ELEM`` -> push"
msgstr ""

#: ../../../bpf/map_bloom_filter.rst:29
msgid "``BPF_MAP_LOOKUP_ELEM`` -> peek"
msgstr ""

#: ../../../bpf/map_bloom_filter.rst:31
msgid ""
"The ``max_entries`` size that is specified at map creation time is used to "
"approximate a reasonable bitmap size for the bloom filter, and is not "
"otherwise strictly enforced. If the user wishes to insert more entries into "
"the bloom filter than ``max_entries``, this may lead to a higher false "
"positive rate."
msgstr ""

#: ../../../bpf/map_bloom_filter.rst:37
msgid ""
"The number of hashes to use for the bloom filter is configurable using the "
"lower 4 bits of ``map_extra`` in ``union bpf_attr`` at map creation time. If "
"no number is specified, the default used will be 5 hash functions. In "
"general, using more hashes decreases both the false positive rate and the "
"speed of a lookup."
msgstr ""

#: ../../../bpf/map_bloom_filter.rst:43
msgid ""
"It is not possible to delete elements from a bloom filter map. A bloom "
"filter map may be used as an inner map. The user is responsible for "
"synchronising concurrent updates and lookups to ensure no false negative "
"lookups occur."
msgstr ""

#: ../../../bpf/map_bloom_filter.rst:49
msgid "Usage"
msgstr ""

#: ../../../bpf/map_bloom_filter.rst:52 ../../../bpf/map_bloom_filter.rst:110
msgid "Kernel BPF"
msgstr ""

#: ../../../bpf/map_bloom_filter.rst:55
msgid "bpf_map_push_elem()"
msgstr ""

#: ../../../bpf/map_bloom_filter.rst:61
msgid ""
"A ``value`` can be added to a bloom filter using the ``bpf_map_push_elem()`` "
"helper. The ``flags`` parameter must be set to ``BPF_ANY`` when adding an "
"entry to the bloom filter. This helper returns ``0`` on success, or negative "
"error in case of failure."
msgstr ""

#: ../../../bpf/map_bloom_filter.rst:67
msgid "bpf_map_peek_elem()"
msgstr ""

#: ../../../bpf/map_bloom_filter.rst:73
msgid ""
"The ``bpf_map_peek_elem()`` helper is used to determine whether ``value`` is "
"present in the bloom filter map. This helper returns ``0`` if ``value`` is "
"probably present in the map, or ``-ENOENT`` if ``value`` is definitely not "
"present in the map."
msgstr ""

#: ../../../bpf/map_bloom_filter.rst:79 ../../../bpf/map_bloom_filter.rst:140
msgid "Userspace"
msgstr ""

#: ../../../bpf/map_bloom_filter.rst:82
msgid "bpf_map_update_elem()"
msgstr ""

#: ../../../bpf/map_bloom_filter.rst:88
msgid ""
"A userspace program can add a ``value`` to a bloom filter using libbpf's "
"``bpf_map_update_elem`` function. The ``key`` parameter must be set to "
"``NULL`` and ``flags`` must be set to ``BPF_ANY``. Returns ``0`` on success, "
"or negative error in case of failure."
msgstr ""

#: ../../../bpf/map_bloom_filter.rst:94
msgid "bpf_map_lookup_elem()"
msgstr ""

#: ../../../bpf/map_bloom_filter.rst:100
msgid ""
"A userspace program can determine the presence of ``value`` in a bloom "
"filter using libbpf's ``bpf_map_lookup_elem`` function. The ``key`` "
"parameter must be set to ``NULL``. Returns ``0`` if ``value`` is probably "
"present in the map, or ``-ENOENT`` if ``value`` is definitely not present in "
"the map."
msgstr ""

#: ../../../bpf/map_bloom_filter.rst:107
msgid "Examples"
msgstr ""

#: ../../../bpf/map_bloom_filter.rst:112
msgid "This snippet shows how to declare a bloom filter in a BPF program:"
msgstr ""

#: ../../../bpf/map_bloom_filter.rst:123
msgid ""
"This snippet shows how to determine presence of a value in a bloom filter in "
"a BPF program:"
msgstr ""

#: ../../../bpf/map_bloom_filter.rst:142
msgid ""
"This snippet shows how to use libbpf to create a bloom filter map from "
"userspace:"
msgstr ""

#: ../../../bpf/map_bloom_filter.rst:160
msgid ""
"This snippet shows how to add an element to a bloom filter from userspace:"
msgstr ""

#: ../../../bpf/map_bloom_filter.rst:172
msgid "References"
msgstr ""

#: ../../../bpf/map_bloom_filter.rst:174
msgid "https://lwn.net/ml/bpf/20210831225005.2762202-1-joannekoong@fb.com/"
msgstr ""
