# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../core-api/genalloc.rst:2
msgid "The genalloc/genpool subsystem"
msgstr ""

#: ../../../core-api/genalloc.rst:4
msgid ""
"There are a number of memory-allocation subsystems in the kernel, each aimed "
"at a specific need.  Sometimes, however, a kernel developer needs to "
"implement a new allocator for a specific range of special-purpose memory; "
"often that memory is located on a device somewhere.  The author of the "
"driver for that device can certainly write a little allocator to get the job "
"done, but that is the way to fill the kernel with dozens of poorly tested "
"allocators.  Back in 2005, Jes Sorensen lifted one of those allocators from "
"the sym53c8xx_2 driver and posted_ it as a generic module for the creation "
"of ad hoc memory allocators.  This code was merged for the 2.6.13 release; "
"it has been modified considerably since then."
msgstr ""

#: ../../../core-api/genalloc.rst:17
msgid ""
"Code using this allocator should include <linux/genalloc.h>.  The action "
"begins with the creation of a pool using one of:"
msgstr ""

#: ../../../core-api/genalloc:20: lib/genalloc.c:146
msgid "create a new special memory pool"
msgstr ""

#: ../../../core-api/genalloc:125: lib/genalloc.c:215
#: ../../../core-api/genalloc:128: lib/genalloc.c:527
#: ../../../core-api/genalloc:131: lib/genalloc.c:549
#: ../../../core-api/genalloc:134: lib/genalloc.c:579
#: ../../../core-api/genalloc:137: lib/genalloc.c:598
#: ../../../core-api/genalloc:140: lib/genalloc.c:804
#: ../../../core-api/genalloc:143: lib/genalloc.c:874
#: ../../../core-api/genalloc:20: lib/genalloc.c:150
#: ../../../core-api/genalloc:23: lib/genalloc.c:823
#: ../../../core-api/genalloc:41: lib/genalloc.c:240
#: ../../../core-api/genalloc:52: include/linux/genalloc.h:112
#: ../../../core-api/genalloc:55: lib/genalloc.c:175
#: ../../../core-api/genalloc:68: include/linux/genalloc.h:146
#: ../../../core-api/genalloc:71: lib/genalloc.c:333
#: ../../../core-api/genalloc:74: lib/genalloc.c:481
#: ../../../core-api/genalloc:91: lib/genalloc.c:269
#: ../../../core-api/genalloc:94: lib/genalloc.c:617
msgid "**Parameters**"
msgstr ""

#: ../../../core-api/genalloc:20: lib/genalloc.c:152
#: ../../../core-api/genalloc:23: lib/genalloc.c:822
msgid "``int min_alloc_order``"
msgstr ""

#: ../../../core-api/genalloc:20: lib/genalloc.c:147
#: ../../../core-api/genalloc:23: lib/genalloc.c:821
msgid "log base 2 of number of bytes each bitmap bit represents"
msgstr ""

#: ../../../core-api/genalloc:20: lib/genalloc.c:149
#: ../../../core-api/genalloc:23: lib/genalloc.c:823
#: ../../../core-api/genalloc:52: include/linux/genalloc.h:113
#: ../../../core-api/genalloc:55: lib/genalloc.c:177
msgid "``int nid``"
msgstr ""

#: ../../../core-api/genalloc:20: lib/genalloc.c:148
msgid "node id of the node the pool structure should be allocated on, or -1"
msgstr ""

#: ../../../core-api/genalloc:125: lib/genalloc.c:215
#: ../../../core-api/genalloc:128: lib/genalloc.c:528
#: ../../../core-api/genalloc:131: lib/genalloc.c:550
#: ../../../core-api/genalloc:134: lib/genalloc.c:578
#: ../../../core-api/genalloc:137: lib/genalloc.c:597
#: ../../../core-api/genalloc:140: lib/genalloc.c:804
#: ../../../core-api/genalloc:143: lib/genalloc.c:875
#: ../../../core-api/genalloc:20: lib/genalloc.c:150
#: ../../../core-api/genalloc:23: lib/genalloc.c:825
#: ../../../core-api/genalloc:41: lib/genalloc.c:239
#: ../../../core-api/genalloc:52: include/linux/genalloc.h:115
#: ../../../core-api/genalloc:55: lib/genalloc.c:180
#: ../../../core-api/genalloc:68: include/linux/genalloc.h:146
#: ../../../core-api/genalloc:71: lib/genalloc.c:334
#: ../../../core-api/genalloc:74: lib/genalloc.c:483
#: ../../../core-api/genalloc:91: lib/genalloc.c:272
#: ../../../core-api/genalloc:94: lib/genalloc.c:618
msgid "**Description**"
msgstr ""

#: ../../../core-api/genalloc:20: lib/genalloc.c:149
msgid ""
"Create a new special memory pool that can be used to manage special purpose "
"memory not managed by the regular kmalloc/kfree interface."
msgstr ""

#: ../../../core-api/genalloc:23: lib/genalloc.c:819
msgid "managed gen_pool_create"
msgstr ""

#: ../../../core-api/genalloc:140: lib/genalloc.c:806
#: ../../../core-api/genalloc:23: lib/genalloc.c:825
msgid "``struct device *dev``"
msgstr ""

#: ../../../core-api/genalloc:23: lib/genalloc.c:820
msgid "device that provides the gen_pool"
msgstr ""

#: ../../../core-api/genalloc:23: lib/genalloc.c:822
msgid "node selector for allocated gen_pool, ``NUMA_NO_NODE`` for all nodes"
msgstr ""

#: ../../../core-api/genalloc:140: lib/genalloc.c:803
#: ../../../core-api/genalloc:23: lib/genalloc.c:824
msgid "``const char *name``"
msgstr ""

#: ../../../core-api/genalloc:140: lib/genalloc.c:802
#: ../../../core-api/genalloc:23: lib/genalloc.c:823
msgid "name of a gen_pool or NULL, identifies a particular gen_pool on device"
msgstr ""

#: ../../../core-api/genalloc:23: lib/genalloc.c:824
msgid ""
"Create a new special memory pool that can be used to manage special purpose "
"memory not managed by the regular kmalloc/kfree interface. The pool will be "
"automatically destroyed by the device management code."
msgstr ""

#: ../../../core-api/genalloc.rst:26
msgid ""
"A call to gen_pool_create() will create a pool.  The granularity of "
"allocations is set with min_alloc_order; it is a log-base-2 number like "
"those used by the page allocator, but it refers to bytes rather than pages. "
"So, if min_alloc_order is passed as 3, then all allocations will be a "
"multiple of eight bytes.  Increasing min_alloc_order decreases the memory "
"required to track the memory in the pool.  The nid parameter specifies which "
"NUMA node should be used for the allocation of the housekeeping structures; "
"it can be -1 if the caller doesn't care."
msgstr ""

#: ../../../core-api/genalloc.rst:35
msgid ""
"The \"managed\" interface devm_gen_pool_create() ties the pool to a specific "
"device.  Among other things, it will automatically clean up the pool when "
"the given device is destroyed."
msgstr ""

#: ../../../core-api/genalloc.rst:39
msgid "A pool is shut down with:"
msgstr ""

#: ../../../core-api/genalloc:41: lib/genalloc.c:236
msgid "destroy a special memory pool"
msgstr ""

#: ../../../core-api/genalloc:125: lib/genalloc.c:217
#: ../../../core-api/genalloc:128: lib/genalloc.c:529
#: ../../../core-api/genalloc:131: lib/genalloc.c:551
#: ../../../core-api/genalloc:134: lib/genalloc.c:581
#: ../../../core-api/genalloc:137: lib/genalloc.c:600
#: ../../../core-api/genalloc:41: lib/genalloc.c:242
#: ../../../core-api/genalloc:52: include/linux/genalloc.h:114
#: ../../../core-api/genalloc:55: lib/genalloc.c:177
#: ../../../core-api/genalloc:68: include/linux/genalloc.h:148
#: ../../../core-api/genalloc:71: lib/genalloc.c:335
#: ../../../core-api/genalloc:74: lib/genalloc.c:483
#: ../../../core-api/genalloc:91: lib/genalloc.c:271
#: ../../../core-api/genalloc:94: lib/genalloc.c:619
msgid "``struct gen_pool *pool``"
msgstr ""

#: ../../../core-api/genalloc:41: lib/genalloc.c:237
msgid "pool to destroy"
msgstr ""

#: ../../../core-api/genalloc:41: lib/genalloc.c:238
msgid ""
"Destroy the specified special memory pool. Verifies that there are no "
"outstanding allocations."
msgstr ""

#: ../../../core-api/genalloc.rst:44
msgid ""
"It's worth noting that, if there are still allocations outstanding from the "
"given pool, this function will take the rather extreme step of invoking "
"BUG(), crashing the entire system.  You have been warned."
msgstr ""

#: ../../../core-api/genalloc.rst:48
msgid ""
"A freshly created pool has no memory to allocate.  It is fairly useless in "
"that state, so one of the first orders of business is usually to add memory "
"to the pool.  That can be done with one of:"
msgstr ""

#: ../../../core-api/genalloc:52: include/linux/genalloc.h:108
#: ../../../core-api/genalloc:55: lib/genalloc.c:171
msgid "add a new chunk of special memory to the pool"
msgstr ""

#: ../../../core-api/genalloc:52: include/linux/genalloc.h:109
#: ../../../core-api/genalloc:55: lib/genalloc.c:172
msgid "pool to add new memory chunk to"
msgstr ""

#: ../../../core-api/genalloc:125: lib/genalloc.c:214
#: ../../../core-api/genalloc:52: include/linux/genalloc.h:111
#: ../../../core-api/genalloc:74: lib/genalloc.c:480
msgid "``unsigned long addr``"
msgstr ""

#: ../../../core-api/genalloc:52: include/linux/genalloc.h:110
msgid "starting address of memory chunk to add to pool"
msgstr ""

#: ../../../core-api/genalloc:131: lib/genalloc.c:549
#: ../../../core-api/genalloc:52: include/linux/genalloc.h:112
#: ../../../core-api/genalloc:55: lib/genalloc.c:176
#: ../../../core-api/genalloc:68: include/linux/genalloc.h:145
#: ../../../core-api/genalloc:71: lib/genalloc.c:332
#: ../../../core-api/genalloc:74: lib/genalloc.c:481
#: ../../../core-api/genalloc:91: lib/genalloc.c:268
msgid "``size_t size``"
msgstr ""

#: ../../../core-api/genalloc:52: include/linux/genalloc.h:111
#: ../../../core-api/genalloc:55: lib/genalloc.c:175
msgid "size in bytes of the memory chunk to add to pool"
msgstr ""

#: ../../../core-api/genalloc:52: include/linux/genalloc.h:112
#: ../../../core-api/genalloc:55: lib/genalloc.c:176
msgid ""
"node id of the node the chunk structure and bitmap should be allocated on, "
"or -1"
msgstr ""

#: ../../../core-api/genalloc:52: include/linux/genalloc.h:114
#: ../../../core-api/genalloc:55: lib/genalloc.c:179
msgid "Add a new chunk of special memory to the specified pool."
msgstr ""

#: ../../../core-api/genalloc:52: include/linux/genalloc.h:116
#: ../../../core-api/genalloc:55: lib/genalloc.c:181
msgid "Returns 0 on success or a -ve errno on failure."
msgstr ""

#: ../../../core-api/genalloc:55: lib/genalloc.c:174
msgid "``unsigned long virt``"
msgstr ""

#: ../../../core-api/genalloc:55: lib/genalloc.c:173
msgid "virtual starting address of memory chunk to add to pool"
msgstr ""

#: ../../../core-api/genalloc:55: lib/genalloc.c:175
msgid "``phys_addr_t phys``"
msgstr ""

#: ../../../core-api/genalloc:55: lib/genalloc.c:174
msgid "physical starting address of memory chunk to add to pool"
msgstr ""

#: ../../../core-api/genalloc:55: lib/genalloc.c:179
msgid "``void *owner``"
msgstr ""

#: ../../../core-api/genalloc:55: lib/genalloc.c:178
msgid "private data the publisher would like to recall at alloc time"
msgstr ""

#: ../../../core-api/genalloc.rst:58
msgid ""
"A call to gen_pool_add() will place the size bytes of memory starting at "
"addr (in the kernel's virtual address space) into the given pool, once again "
"using nid as the node ID for ancillary memory allocations. The "
"gen_pool_add_virt() variant associates an explicit physical address with the "
"memory; this is only necessary if the pool will be used for DMA allocations."
msgstr ""

#: ../../../core-api/genalloc.rst:65
msgid ""
"The functions for allocating memory from the pool (and putting it back) are:"
msgstr ""

#: ../../../core-api/genalloc:68: include/linux/genalloc.h:142
#: ../../../core-api/genalloc:91: lib/genalloc.c:265
msgid "allocate special memory from the pool"
msgstr ""

#: ../../../core-api/genalloc:125: lib/genalloc.c:212
#: ../../../core-api/genalloc:68: include/linux/genalloc.h:143
#: ../../../core-api/genalloc:71: lib/genalloc.c:330
#: ../../../core-api/genalloc:91: lib/genalloc.c:266
msgid "pool to allocate from"
msgstr ""

#: ../../../core-api/genalloc:68: include/linux/genalloc.h:144
#: ../../../core-api/genalloc:71: lib/genalloc.c:331
#: ../../../core-api/genalloc:91: lib/genalloc.c:267
msgid "number of bytes to allocate from the pool"
msgstr ""

#: ../../../core-api/genalloc:68: include/linux/genalloc.h:145
#: ../../../core-api/genalloc:71: lib/genalloc.c:333
#: ../../../core-api/genalloc:91: lib/genalloc.c:271
msgid ""
"Allocate the requested number of bytes from the specified pool. Uses the "
"pool allocation function (with first-fit algorithm by default). Can not be "
"used in NMI handler on architectures without NMI-safe cmpxchg implementation."
msgstr ""

#: ../../../core-api/genalloc:71: lib/genalloc.c:329
msgid "allocate special memory from the pool for DMA usage"
msgstr ""

#: ../../../core-api/genalloc:71: lib/genalloc.c:333
msgid "``dma_addr_t *dma``"
msgstr ""

#: ../../../core-api/genalloc:71: lib/genalloc.c:332
msgid "dma-view physical address return value.  Use ``NULL`` if unneeded."
msgstr ""

#: ../../../core-api/genalloc:71: lib/genalloc.c:338
msgid "**Return**"
msgstr ""

#: ../../../core-api/genalloc:71: lib/genalloc.c:339
msgid "virtual address of the allocated memory, or ``NULL`` on failure"
msgstr ""

#: ../../../core-api/genalloc:74: lib/genalloc.c:477
msgid "free allocated special memory back to the pool"
msgstr ""

#: ../../../core-api/genalloc:74: lib/genalloc.c:478
msgid "pool to free to"
msgstr ""

#: ../../../core-api/genalloc:74: lib/genalloc.c:479
msgid "starting address of memory to free back to pool"
msgstr ""

#: ../../../core-api/genalloc:74: lib/genalloc.c:480
msgid "size in bytes of memory to free"
msgstr ""

#: ../../../core-api/genalloc:74: lib/genalloc.c:482
#: ../../../core-api/genalloc:91: lib/genalloc.c:271
msgid "``void **owner``"
msgstr ""

#: ../../../core-api/genalloc:74: lib/genalloc.c:481
msgid "private data stashed at gen_pool_add() time"
msgstr ""

#: ../../../core-api/genalloc:74: lib/genalloc.c:482
msgid ""
"Free previously allocated special memory back to the specified pool.  Can "
"not be used in NMI handler on architectures without NMI-safe cmpxchg "
"implementation."
msgstr ""

#: ../../../core-api/genalloc.rst:77
msgid ""
"As one would expect, gen_pool_alloc() will allocate size< bytes from the "
"given pool.  The gen_pool_dma_alloc() variant allocates memory for use with "
"DMA operations, returning the associated physical address in the space "
"pointed to by dma.  This will only work if the memory was added with "
"gen_pool_add_virt().  Note that this function departs from the usual genpool "
"pattern of using unsigned long values to represent kernel addresses; it "
"returns a void * instead."
msgstr ""

#: ../../../core-api/genalloc.rst:85
msgid ""
"That all seems relatively simple; indeed, some developers clearly found it "
"to be too simple.  After all, the interface above provides no control over "
"how the allocation functions choose which specific piece of memory to "
"return.  If that sort of control is needed, the following functions will be "
"of interest:"
msgstr ""

#: ../../../core-api/genalloc:91: lib/genalloc.c:269
#: ../../../core-api/genalloc:94: lib/genalloc.c:616
msgid "``genpool_algo_t algo``"
msgstr ""

#: ../../../core-api/genalloc:91: lib/genalloc.c:268
msgid "algorithm passed from caller"
msgstr ""

#: ../../../core-api/genalloc:128: lib/genalloc.c:527
#: ../../../core-api/genalloc:91: lib/genalloc.c:270
#: ../../../core-api/genalloc:94: lib/genalloc.c:617
msgid "``void *data``"
msgstr ""

#: ../../../core-api/genalloc:91: lib/genalloc.c:269
msgid "data passed to algorithm"
msgstr ""

#: ../../../core-api/genalloc:91: lib/genalloc.c:270
msgid "optionally retrieve the chunk owner"
msgstr ""

#: ../../../core-api/genalloc:94: lib/genalloc.c:613
msgid "set the allocation algorithm"
msgstr ""

#: ../../../core-api/genalloc:94: lib/genalloc.c:614
msgid "pool to change allocation algorithm"
msgstr ""

#: ../../../core-api/genalloc:94: lib/genalloc.c:615
msgid "custom algorithm function"
msgstr ""

#: ../../../core-api/genalloc:94: lib/genalloc.c:616
msgid "additional data used by **algo**"
msgstr ""

#: ../../../core-api/genalloc:94: lib/genalloc.c:617
msgid ""
"Call **algo** for each memory allocation in the pool. If **algo** is NULL "
"use gen_pool_first_fit as default memory allocation function."
msgstr ""

#: ../../../core-api/genalloc.rst:97
msgid ""
"Allocations with gen_pool_alloc_algo() specify an algorithm to be used to "
"choose the memory to be allocated; the default algorithm can be set with "
"gen_pool_set_algo().  The data value is passed to the algorithm; most ignore "
"it, but it is occasionally needed.  One can, naturally, write a special-"
"purpose algorithm, but there is a fair set already available:"
msgstr ""

#: ../../../core-api/genalloc.rst:104
msgid ""
"gen_pool_first_fit is a simple first-fit allocator; this is the default "
"algorithm if none other has been specified."
msgstr ""

#: ../../../core-api/genalloc.rst:107
msgid ""
"gen_pool_first_fit_align forces the allocation to have a specific alignment "
"(passed via data in a genpool_data_align structure)."
msgstr ""

#: ../../../core-api/genalloc.rst:110
msgid ""
"gen_pool_first_fit_order_align aligns the allocation to the order of the "
"size.  A 60-byte allocation will thus be 64-byte aligned, for example."
msgstr ""

#: ../../../core-api/genalloc.rst:113
msgid "gen_pool_best_fit, as one would expect, is a simple best-fit allocator."
msgstr ""

#: ../../../core-api/genalloc.rst:115
msgid ""
"gen_pool_fixed_alloc allocates at a specific offset (passed in a "
"genpool_data_fixed structure via the data parameter) within the pool. If the "
"indicated memory is not available the allocation fails."
msgstr ""

#: ../../../core-api/genalloc.rst:119
msgid ""
"There is a handful of other functions, mostly for purposes like querying the "
"space available in the pool or iterating through chunks of memory. Most "
"users, however, should not need much beyond what has been described above.  "
"With luck, wider awareness of this module will help to prevent the writing "
"of special-purpose memory allocators in the future."
msgstr ""

#: ../../../core-api/genalloc:125: lib/genalloc.c:211
msgid "return the physical address of memory"
msgstr ""

#: ../../../core-api/genalloc:125: lib/genalloc.c:213
msgid "starting address of memory"
msgstr ""

#: ../../../core-api/genalloc:125: lib/genalloc.c:214
msgid "Returns the physical address on success, or -1 on error."
msgstr ""

#: ../../../core-api/genalloc:128: lib/genalloc.c:523
msgid "call func for every chunk of generic memory pool"
msgstr ""

#: ../../../core-api/genalloc:128: lib/genalloc.c:524
#: ../../../core-api/genalloc:131: lib/genalloc.c:546
msgid "the generic memory pool"
msgstr ""

#: ../../../core-api/genalloc:128: lib/genalloc.c:526
msgid ""
"``void (*func)(struct gen_pool *pool, struct gen_pool_chunk *chunk, void "
"*data)``"
msgstr ""

#: ../../../core-api/genalloc:128: lib/genalloc.c:525
msgid "func to call"
msgstr ""

#: ../../../core-api/genalloc:128: lib/genalloc.c:526
msgid "additional data used by **func**"
msgstr ""

#: ../../../core-api/genalloc:128: lib/genalloc.c:527
msgid ""
"Call **func** for every chunk of generic memory pool.  The **func** is "
"called with rcu_read_lock held."
msgstr ""

#: ../../../core-api/genalloc:131: lib/genalloc.c:545
msgid "checks if an address falls within the range of a pool"
msgstr ""

#: ../../../core-api/genalloc:131: lib/genalloc.c:548
msgid "``unsigned long start``"
msgstr ""

#: ../../../core-api/genalloc:131: lib/genalloc.c:547
msgid "start address"
msgstr ""

#: ../../../core-api/genalloc:131: lib/genalloc.c:548
msgid "size of the region"
msgstr ""

#: ../../../core-api/genalloc:131: lib/genalloc.c:549
msgid ""
"Check if the range of addresses falls within the specified pool. Returns "
"true if the entire range is contained in the pool and false otherwise."
msgstr ""

#: ../../../core-api/genalloc:134: lib/genalloc.c:575
msgid "get available free space of the pool"
msgstr ""

#: ../../../core-api/genalloc:134: lib/genalloc.c:576
msgid "pool to get available free space"
msgstr ""

#: ../../../core-api/genalloc:134: lib/genalloc.c:577
msgid "Return available free space of the specified pool."
msgstr ""

#: ../../../core-api/genalloc:137: lib/genalloc.c:594
msgid "get size in bytes of memory managed by the pool"
msgstr ""

#: ../../../core-api/genalloc:137: lib/genalloc.c:595
msgid "pool to get size"
msgstr ""

#: ../../../core-api/genalloc:137: lib/genalloc.c:596
msgid "Return size in bytes of memory managed by the pool."
msgstr ""

#: ../../../core-api/genalloc:140: lib/genalloc.c:800
msgid "Obtain the gen_pool (if any) for a device"
msgstr ""

#: ../../../core-api/genalloc:140: lib/genalloc.c:801
msgid "device to retrieve the gen_pool from"
msgstr ""

#: ../../../core-api/genalloc:140: lib/genalloc.c:803
msgid "Returns the gen_pool for the device if one is present, or NULL."
msgstr ""

#: ../../../core-api/genalloc:143: lib/genalloc.c:870
msgid "find a pool by phandle property"
msgstr ""

#: ../../../core-api/genalloc:143: lib/genalloc.c:876
msgid "``struct device_node *np``"
msgstr ""

#: ../../../core-api/genalloc:143: lib/genalloc.c:871
msgid "device node"
msgstr ""

#: ../../../core-api/genalloc:143: lib/genalloc.c:873
msgid "``const char *propname``"
msgstr ""

#: ../../../core-api/genalloc:143: lib/genalloc.c:872
msgid "property name containing phandle(s)"
msgstr ""

#: ../../../core-api/genalloc:143: lib/genalloc.c:874
msgid "``int index``"
msgstr ""

#: ../../../core-api/genalloc:143: lib/genalloc.c:873
msgid "index into the phandle array"
msgstr ""

#: ../../../core-api/genalloc:143: lib/genalloc.c:874
msgid ""
"Returns the pool that contains the chunk starting at the physical address of "
"the device tree node pointed at by the phandle property, or NULL if not "
"found."
msgstr ""
