# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 08:27+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../core-api/cgroup.rst:3
msgid "Cgroup Kernel APIs"
msgstr ""

#: ../../../core-api/cgroup.rst:6
msgid "Device Memory Cgroup API (dmemcg)"
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:255
msgid "Check if we should evict from test_pool"
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:259
#: kernel/cgroup/dmem.c:423 kernel/cgroup/dmem.c:460 kernel/cgroup/dmem.c:517
#: kernel/cgroup/dmem.c:568 kernel/cgroup/dmem.c:587
msgid "**Parameters**"
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:261
msgid "``struct dmem_cgroup_pool_state *limit_pool``"
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:256
msgid "The pool for which we hit limits"
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:258
msgid "``struct dmem_cgroup_pool_state *test_pool``"
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:257
msgid "The pool for which to test"
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:259
msgid "``bool ignore_low``"
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:258
msgid "Whether we have to respect low watermarks."
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:260
msgid "``bool *ret_hit_low``"
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:259
msgid "Pointer to whether it makes sense to consider low watermark."
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:3 kernel/cgroup/dmem.c:261
#: kernel/cgroup/dmem.c:422 kernel/cgroup/dmem.c:516 kernel/cgroup/dmem.c:568
#: kernel/cgroup/dmem.c:589
msgid "**Description**"
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:260
msgid ""
"This function returns true if we can evict from **test_pool**, false if not. "
"When returning false and **ignore_low** is false, **ret_hit_low** may be set "
"to true to indicate this function can be retried with **ignore_low** set to "
"true."
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:265
#: kernel/cgroup/dmem.c:463 kernel/cgroup/dmem.c:598
msgid "**Return**"
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:266
msgid "bool"
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:419
msgid "Unregister a previously registered region."
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:425
#: kernel/cgroup/dmem.c:589
msgid "``struct dmem_cgroup_region *region``"
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:420
msgid "The region to unregister."
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:421
msgid "This function undoes dmem_cgroup_register_region."
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:456
msgid "Register a regions for dev cgroup."
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:462
#: kernel/cgroup/dmem.c:567 kernel/cgroup/dmem.c:586
msgid "``u64 size``"
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:457
msgid "Size of region to register, in bytes."
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:459
msgid "``const char *fmt``"
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:458
msgid "Region parameters to register"
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:460
msgid "``...``"
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:1
msgid "variable arguments"
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:459
msgid ""
"This function registers a node in the dmem cgroup with the name given. After "
"calling this function, the region can be used for allocations."
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:464
msgid "NULL or a struct on success, PTR_ERR on failure."
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:513
msgid "Drop a reference to a dmem_cgroup_pool_state"
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:519
#: kernel/cgroup/dmem.c:570
msgid "``struct dmem_cgroup_pool_state *pool``"
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:514
msgid ":c:type:`dmem_cgroup_pool_state`"
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:515
msgid ""
"Called to drop a reference to the limiting pool returned by "
"dmem_cgroup_try_charge()."
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:564
msgid "Uncharge a pool."
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:565
msgid "Pool to uncharge."
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:566
msgid "Size to uncharge."
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:567
msgid ""
"Undoes the effects of dmem_cgroup_try_charge. Must be called with the "
"returned pool as argument, and same **index** and **size**."
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:583
msgid "Try charging a new allocation to a region."
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:584
msgid "dmem region to charge"
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:585
msgid "Size (in bytes) to charge."
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:587
msgid "``struct dmem_cgroup_pool_state **ret_pool``"
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:586
msgid "On succesfull allocation, the pool that is charged."
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:588
msgid "``struct dmem_cgroup_pool_state **ret_limit_pool``"
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:587
msgid "On a failed allocation, the limiting pool."
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:588
msgid ""
"This function charges the **region** region for a size of **size** bytes."
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:590
msgid ""
"If the function succeeds, **ret_pool** is set, which must be passed to "
"dmem_cgroup_uncharge() when undoing the allocation."
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:593
msgid ""
"When this function fails with -EAGAIN and **ret_limit_pool** is non-null, it "
"will be set to the pool for which the limit is hit. This can be used for "
"eviction as argument to dmem_cgroup_evict_valuable(). This reference must be "
"freed with **dmem_cgroup_pool_state_put\\(\\)**."
msgstr ""

#: ../../../core-api/cgroup:7: kernel/cgroup/dmem.c:599
msgid ""
"0 on success, -EAGAIN on hitting a limit, or a negative errno on failure."
msgstr ""
