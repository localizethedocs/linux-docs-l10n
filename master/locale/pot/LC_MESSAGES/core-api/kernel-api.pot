# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-20 11:24+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../core-api/kernel-api.rst:3
msgid "The Linux Kernel API"
msgstr ""

#: ../../../core-api/kernel-api.rst:7
msgid "Basic C Library Functions"
msgstr ""

#: ../../../core-api/kernel-api.rst:9
msgid ""
"When writing drivers, you cannot in general use routines which are from the "
"C Library. Some of the functions have been found generally useful and they "
"are listed below. The behaviour of these functions may vary slightly from "
"those defined by ANSI, and these deviations are noted in the text."
msgstr ""

#: ../../../core-api/kernel-api.rst:16
msgid "String Conversions"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:103
#: ../../../core-api/kernel-api:24: lib/kstrtox.c:117
msgid "convert a string to an unsigned long long"
msgstr ""

#: ../../../core-api/kernel-api:102: lib/sort.c:282 lib/sort.c:317
#: ../../../core-api/kernel-api:105: lib/list_sort.c:103
#: ../../../core-api/kernel-api:114: lib/textsearch.c:136 lib/textsearch.c:171
#: lib/textsearch.c:223 lib/textsearch.c:250 lib/textsearch.c:311
#: ../../../core-api/kernel-api:117: include/linux/textsearch.h:98
#: include/linux/textsearch.h:121 include/linux/textsearch.h:136
#: include/linux/textsearch.h:145 ../../../core-api/kernel-api:127:
#: include/linux/overflow.h:61 include/linux/overflow.h:75
#: include/linux/overflow.h:91 include/linux/overflow.h:107
#: include/linux/overflow.h:121 include/linux/overflow.h:137
#: include/linux/overflow.h:153 include/linux/overflow.h:167
#: include/linux/overflow.h:183 include/linux/overflow.h:227
#: include/linux/overflow.h:246 include/linux/overflow.h:267
#: include/linux/overflow.h:281 include/linux/overflow.h:302
#: include/linux/overflow.h:316 include/linux/overflow.h:332
#: include/linux/overflow.h:351 include/linux/overflow.h:370
#: include/linux/overflow.h:392 include/linux/overflow.h:404
#: include/linux/overflow.h:417 include/linux/overflow.h:434
#: include/linux/overflow.h:450 include/linux/overflow.h:466
#: include/linux/overflow.h:485 include/linux/overflow.h:498
#: include/linux/overflow.h:517 include/linux/overflow.h:537
#: ../../../core-api/kernel-api:133: lib/crc/crc4.c:20
#: ../../../core-api/kernel-api:136: lib/crc/crc7.c:57
#: ../../../core-api/kernel-api:139: lib/crc/crc8.c:29 lib/crc/crc8.c:51
#: lib/crc/crc8.c:72 ../../../core-api/kernel-api:142: lib/crc/crc16.c:52
#: ../../../core-api/kernel-api:145: lib/crc/crc-ccitt.c:55
#: ../../../core-api/kernel-api:148: lib/crc/crc-itu-t.c:54
#: ../../../core-api/kernel-api:151: include/linux/crc32.h:13
#: include/linux/crc32.h:44 include/linux/crc32.h:66
#: ../../../core-api/kernel-api:153: include/linux/crc64.h:12
#: include/linux/crc64.h:21 ../../../core-api/kernel-api:158:
#: include/linux/log2.h:41 include/linux/log2.h:55 include/linux/log2.h:65
#: include/linux/log2.h:75 include/linux/log2.h:151 include/linux/log2.h:171
#: include/linux/log2.h:188 include/linux/log2.h:209 include/linux/log2.h:240
#: include/linux/log2.h:264 ../../../core-api/kernel-api:164:
#: include/linux/int_log.h:18 include/linux/int_log.h:40
#: ../../../core-api/kernel-api:166: lib/math/int_pow.c:17
#: ../../../core-api/kernel-api:169: lib/math/int_sqrt.c:19
#: lib/math/int_sqrt.c:49 ../../../core-api/kernel-api:175:
#: include/asm-generic/div64.h:36 ../../../core-api/kernel-api:178:
#: include/linux/math64.h:20 include/linux/math64.h:37
#: include/linux/math64.h:51 include/linux/math64.h:65
#: include/linux/math64.h:77 include/linux/math64.h:120
#: include/linux/math64.h:139 include/linux/math64.h:292
#: include/linux/math64.h:305 include/linux/math64.h:318
#: include/linux/math64.h:331 include/linux/math64.h:344
#: include/linux/math64.h:364 ../../../core-api/kernel-api:181:
#: lib/math/gcd.c:50 ../../../core-api/kernel-api:187: lib/uuid.c:29
#: lib/uuid.c:81 ../../../core-api/kernel-api:18: lib/vsprintf.c:107
#: lib/vsprintf.c:122 lib/vsprintf.c:143 lib/vsprintf.c:175 lib/vsprintf.c:2820
#: lib/vsprintf.c:2974 lib/vsprintf.c:3005 lib/vsprintf.c:3032
#: lib/vsprintf.c:3056 lib/vsprintf.c:3076 lib/vsprintf.c:3108
#: lib/vsprintf.c:3243 lib/vsprintf.c:3429 lib/vsprintf.c:3706
#: ../../../core-api/kernel-api:196: ipc/util.c:85 ipc/util.c:113
#: ipc/util.c:136 ipc/util.c:167 ipc/util.c:268 ipc/util.c:334 ipc/util.c:355
#: ipc/util.c:388 ipc/util.c:444 ipc/util.c:459 ipc/util.c:494 ipc/util.c:519
#: ipc/util.c:547 ipc/util.c:584 ipc/util.c:603 ipc/util.c:622 ipc/util.c:643
#: ipc/util.c:665 ipc/util.c:684 ipc/util.c:704 ipc/util.c:754 ipc/util.c:787
#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:115
#: include/linux/kfifo.h:122 include/linux/kfifo.h:130
#: include/linux/kfifo.h:145 include/linux/kfifo.h:184
#: include/linux/kfifo.h:193 include/linux/kfifo.h:199
#: include/linux/kfifo.h:205 include/linux/kfifo.h:211
#: include/linux/kfifo.h:225 include/linux/kfifo.h:239
#: include/linux/kfifo.h:249 include/linux/kfifo.h:259
#: include/linux/kfifo.h:275 include/linux/kfifo.h:290
#: include/linux/kfifo.h:300 include/linux/kfifo.h:316
#: include/linux/kfifo.h:331 include/linux/kfifo.h:337
#: include/linux/kfifo.h:354 include/linux/kfifo.h:377
#: include/linux/kfifo.h:389 include/linux/kfifo.h:409
#: include/linux/kfifo.h:446 include/linux/kfifo.h:485
#: include/linux/kfifo.h:523 include/linux/kfifo.h:547
#: include/linux/kfifo.h:567 include/linux/kfifo.h:591
#: include/linux/kfifo.h:617 include/linux/kfifo.h:639
#: include/linux/kfifo.h:665 include/linux/kfifo.h:693
#: include/linux/kfifo.h:721 include/linux/kfifo.h:752
#: include/linux/kfifo.h:775 include/linux/kfifo.h:808
#: include/linux/kfifo.h:824 include/linux/kfifo.h:850
#: include/linux/kfifo.h:880 ../../../core-api/kernel-api:218:
#: kernel/relay.c:239 kernel/relay.c:319 kernel/relay.c:464 kernel/relay.c:550
#: kernel/relay.c:616 kernel/relay.c:649 kernel/relay.c:677
#: ../../../core-api/kernel-api:21: include/linux/kstrtox.h:20
#: include/linux/kstrtox.h:48 ../../../core-api/kernel-api:221:
#: kernel/relay.c:79 kernel/relay.c:105 kernel/relay.c:145 kernel/relay.c:180
#: kernel/relay.c:193 kernel/relay.c:214 kernel/relay.c:228 kernel/relay.c:271
#: kernel/relay.c:285 kernel/relay.c:427 kernel/relay.c:704 kernel/relay.c:740
#: kernel/relay.c:756 kernel/relay.c:769 kernel/relay.c:793 kernel/relay.c:885
#: kernel/relay.c:912 kernel/relay.c:941 ../../../core-api/kernel-api:230:
#: kernel/module/kmod.c:120 ../../../core-api/kernel-api:24: lib/kstrtox.c:121
#: lib/kstrtox.c:145 lib/kstrtox.c:217 lib/kstrtox.c:248 lib/kstrtox.c:343
#: ../../../core-api/kernel-api:262: kernel/dma.c:70 kernel/dma.c:89
#: ../../../core-api/kernel-api:268: kernel/resource.c:273
#: kernel/resource.c:328 kernel/resource.c:755 kernel/resource.c:847
#: kernel/resource.c:921 kernel/resource.c:1182 kernel/resource.c:1437
#: kernel/resource.c:1556 ../../../core-api/kernel-api:271:
#: kernel/resource.c:290 kernel/resource.c:307 kernel/resource.c:410
#: kernel/resource.c:623 kernel/resource.c:733 kernel/resource.c:804
#: kernel/resource.c:947 kernel/resource.c:966 kernel/resource.c:1007
#: kernel/resource.c:1070 kernel/resource.c:1314 kernel/resource.c:1348
#: kernel/resource.c:1616 kernel/resource.c:1665 kernel/resource.c:2043
#: kernel/resource.c:2075 ../../../core-api/kernel-api:277:
#: arch/x86/kernel/cpu/mtrr/mtrr.c:473 ../../../core-api/kernel-api:27:
#: lib/string_helpers.c:29 lib/string_helpers.c:165 lib/string_helpers.c:289
#: lib/string_helpers.c:505 lib/string_helpers.c:755 lib/string_helpers.c:788
#: lib/string_helpers.c:844 lib/string_helpers.c:858 lib/string_helpers.c:884
#: lib/string_helpers.c:911 lib/string_helpers.c:945 lib/string_helpers.c:979
#: lib/string_helpers.c:1000 ../../../core-api/kernel-api:283:
#: security/security.c:527 security/security.c:617 security/security.c:678
#: security/security.c:701 security/security.c:715 security/security.c:729
#: security/security.c:750 security/security.c:772 security/security.c:785
#: security/security.c:799 security/security.c:813 security/security.c:827
#: security/security.c:842 security/security.c:855 security/security.c:868
#: security/security.c:882 security/security.c:896 security/security.c:910
#: security/security.c:1031 security/security.c:1044 security/security.c:1059
#: security/security.c:1074 security/security.c:1090 security/security.c:1109
#: security/security.c:1124 security/security.c:1146 security/security.c:1168
#: security/security.c:1189 security/security.c:1205 security/security.c:1218
#: security/security.c:1233 security/security.c:1248 security/security.c:1283
#: security/security.c:1308 security/security.c:1332 security/security.c:1349
#: security/security.c:1366 security/security.c:1382 security/security.c:1396
#: security/security.c:1412 security/security.c:1441 security/security.c:1463
#: security/security.c:1475 security/security.c:1553 security/security.c:1566
#: security/security.c:1580 security/security.c:1594 security/security.c:1617
#: security/security.c:1631 security/security.c:1696 security/security.c:1711
#: security/security.c:1728 security/security.c:1758 security/security.c:1905
#: security/security.c:1947 security/security.c:1980 security/security.c:2013
#: security/security.c:2031 security/security.c:2075 security/security.c:2092
#: security/security.c:2110 security/security.c:2127 security/security.c:2160
#: security/security.c:2175 security/security.c:2193 security/security.c:2209
#: security/security.c:2246 security/security.c:2262 security/security.c:2284
#: security/security.c:2316 security/security.c:2331 security/security.c:2350
#: security/security.c:2393 security/security.c:2409 security/security.c:2424
#: security/security.c:2470 security/security.c:2491 security/security.c:2508
#: security/security.c:2527 security/security.c:2546 security/security.c:2563
#: security/security.c:2581 security/security.c:2598 security/security.c:2614
#: security/security.c:2655 security/security.c:2669 security/security.c:2684
#: security/security.c:2699 security/security.c:2715 security/security.c:2732
#: security/security.c:2759 security/security.c:2806 security/security.c:2881
#: security/security.c:2897 security/security.c:2921 security/security.c:2942
#: security/security.c:2953 security/security.c:3042 security/security.c:3060
#: security/security.c:3073 security/security.c:3089 security/security.c:3104
#: security/security.c:3123 security/security.c:3139 security/security.c:3159
#: security/security.c:3173 security/security.c:3208 security/security.c:3223
#: security/security.c:3244 security/security.c:3259 security/security.c:3282
#: security/security.c:3303 security/security.c:3326 security/security.c:3368
#: security/security.c:3383 security/security.c:3399 security/security.c:3487
#: security/security.c:3507 security/security.c:3527 security/security.c:3544
#: security/security.c:3559 security/security.c:3573 security/security.c:3615
#: security/security.c:3629 security/security.c:3643 security/security.c:3656
#: security/security.c:3673 security/security.c:3691 security/security.c:3705
#: security/security.c:3718 security/security.c:3731 security/security.c:3752
#: security/security.c:3784 security/security.c:3797 security/security.c:3810
#: security/security.c:3824 security/security.c:3838 security/security.c:3859
#: security/security.c:3872 security/security.c:3893 security/security.c:3906
#: security/security.c:3922 security/security.c:3937 security/security.c:3954
#: security/security.c:3975 security/security.c:3996 security/security.c:4009
#: security/security.c:4026 security/security.c:4041 security/security.c:4059
#: security/security.c:4080 security/security.c:4093 security/security.c:4109
#: security/security.c:4124 security/security.c:4161 security/security.c:4254
#: security/security.c:4305 security/security.c:4329 security/security.c:4521
#: security/security.c:4540 security/security.c:4556 security/security.c:4628
#: security/security.c:4644 security/security.c:4685 security/security.c:4703
#: security/security.c:4720 security/security.c:4734 security/security.c:4750
#: security/security.c:4765 security/security.c:4782 security/security.c:4796
#: security/security.c:4809 security/security.c:4825 security/security.c:4840
#: security/security.c:4873 security/security.c:4916 security/security.c:4930
#: security/security.c:4953 security/security.c:5037 security/security.c:5267
#: security/security.c:5378 security/security.c:5406 security/security.c:5437
#: security/security.c:5469 security/security.c:5480 security/security.c:5497
#: security/security.c:5530 security/security.c:5555 security/security.c:5579
#: security/security.c:5591 security/security.c:5607 security/security.c:5626
#: security/security.c:5647 security/security.c:5666 security/security.c:5680
#: security/security.c:5692 security/security.c:5713 security/security.c:5731
#: security/security.c:5746 security/security.c:5760 security/security.c:5787
#: security/security.c:5815 security/security.c:5841 security/security.c:5857
#: security/security.c:5873 security/security.c:5886 security/security.c:5899
#: security/security.c:6008 security/security.c:6021 security/security.c:6046
#: security/security.c:6058 security/security.c:6071 security/security.c:6086
#: security/security.c:6100 security/security.c:6113 security/security.c:6126
#: security/security.c:6139 ../../../core-api/kernel-api:286:
#: security/inode.c:182 security/inode.c:215 security/inode.c:241
#: security/inode.c:295 ../../../core-api/kernel-api:292: kernel/audit.c:1893
#: kernel/audit.c:2046 kernel/audit.c:2280 kernel/audit.c:2630
#: kernel/audit.c:2655 ../../../core-api/kernel-api:295: kernel/auditsc.c:818
#: kernel/auditsc.c:852 kernel/auditsc.c:968 kernel/auditsc.c:1053
#: kernel/auditsc.c:1619 kernel/auditsc.c:1801 kernel/auditsc.c:1844
#: kernel/auditsc.c:1872 kernel/auditsc.c:1907 kernel/auditsc.c:1975
#: kernel/auditsc.c:2029 kernel/auditsc.c:2177 kernel/auditsc.c:2200
#: kernel/auditsc.c:2267 kernel/auditsc.c:2492 kernel/auditsc.c:2513
#: kernel/auditsc.c:2535 kernel/auditsc.c:2561 kernel/auditsc.c:2581
#: kernel/auditsc.c:2596 kernel/auditsc.c:2613 kernel/auditsc.c:2642
#: kernel/auditsc.c:2660 kernel/auditsc.c:2674 kernel/auditsc.c:2710
#: kernel/auditsc.c:2761 kernel/auditsc.c:2808 kernel/auditsc.c:2940
#: kernel/auditsc.c:2965 ../../../core-api/kernel-api:298:
#: kernel/auditfilter.c:1132 kernel/auditfilter.c:1173
#: kernel/auditfilter.c:1279 kernel/auditfilter.c:1309
#: ../../../core-api/kernel-api:304: kernel/acct.c:289 kernel/acct.c:562
#: kernel/acct.c:619 ../../../core-api/kernel-api:310: include/linux/bio.h:128
#: include/linux/bio.h:319 include/linux/bio.h:333 include/linux/bio.h:432
#: include/linux/bio.h:705 ../../../core-api/kernel-api:311:
#: block/blk-core.c:80 block/blk-core.c:91 block/blk-core.c:121
#: block/blk-core.c:207 block/blk-core.c:232 block/blk-core.c:274
#: block/blk-core.c:483 block/blk-core.c:778 block/blk-core.c:903
#: block/blk-core.c:930 block/blk-core.c:1052 block/blk-core.c:1088
#: block/blk-core.c:1155 block/blk-core.c:1244
#: ../../../core-api/kernel-api:314: block/blk-core.c:304
#: ../../../core-api/kernel-api:317: block/blk-map.c:503 block/blk-map.c:624
#: block/blk-map.c:659 ../../../core-api/kernel-api:320: block/blk-sysfs.c:912
#: block/blk-sysfs.c:984 ../../../core-api/kernel-api:323:
#: block/blk-settings.c:35 block/blk-settings.c:517 block/blk-settings.c:554
#: block/blk-settings.c:579 block/blk-settings.c:740 block/blk-settings.c:914
#: block/blk-settings.c:939 block/blk-settings.c:995
#: ../../../core-api/kernel-api:326: block/blk-flush.c:466
#: ../../../core-api/kernel-api:329: block/blk-lib.c:80 block/blk-lib.c:260
#: block/blk-lib.c:301 ../../../core-api/kernel-api:335:
#: kernel/trace/blktrace.c:701 kernel/trace/blktrace.c:741
#: kernel/trace/blktrace.c:789 kernel/trace/blktrace.c:854
#: kernel/trace/blktrace.c:963 kernel/trace/blktrace.c:997
#: ../../../core-api/kernel-api:338: block/genhd.c:1267
#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:134
#: include/linux/fortify-string.h:169 include/linux/fortify-string.h:214
#: include/linux/fortify-string.h:249 include/linux/fortify-string.h:339
#: include/linux/fortify-string.h:402 include/linux/fortify-string.h:428
#: include/linux/fortify-string.h:774 ../../../core-api/kernel-api:341:
#: block/genhd.c:159 block/genhd.c:213 block/genhd.c:580 block/genhd.c:620
#: block/genhd.c:684 block/genhd.c:795 block/genhd.c:835 block/genhd.c:1534
#: block/genhd.c:1564 ../../../core-api/kernel-api:344: block/bdev.c:160
#: block/bdev.c:276 block/bdev.c:318 block/bdev.c:574 block/bdev.c:661
#: block/bdev.c:1157 block/bdev.c:1190 block/bdev.c:1230
#: ../../../core-api/kernel-api:350: fs/char_dev.c:196 fs/char_dev.c:230
#: fs/char_dev.c:252 fs/char_dev.c:307 fs/char_dev.c:329 fs/char_dev.c:474
#: fs/char_dev.c:511 fs/char_dev.c:526 fs/char_dev.c:568 fs/char_dev.c:595
#: fs/char_dev.c:640 fs/char_dev.c:655 ../../../core-api/kernel-api:36:
#: lib/string.c:39 lib/string.c:198 lib/string.c:278 lib/string.c:301
#: lib/string.c:326 lib/string.c:345 lib/string.c:380 lib/string.c:398
#: lib/string.c:445 lib/string.c:464 lib/string.c:483 lib/string.c:502
#: lib/string.c:531 lib/string.c:551 lib/string.c:573 lib/string.c:595
#: lib/string.c:617 lib/string.c:639 lib/string.c:671 lib/string.c:707
#: lib/string.c:726 lib/string.c:751 lib/string.c:776 lib/string.c:801
#: lib/string.c:834 ../../../core-api/kernel-api:389: include/linux/clk.h:99
#: include/linux/clk.h:110 include/linux/clk.h:117 include/linux/clk.h:128
#: include/linux/clk.h:138 include/linux/clk.h:148 include/linux/clk.h:157
#: include/linux/clk.h:168 include/linux/clk.h:178 include/linux/clk.h:191
#: include/linux/clk.h:209 include/linux/clk.h:221 include/linux/clk.h:304
#: include/linux/clk.h:316 include/linux/clk.h:352 include/linux/clk.h:377
#: include/linux/clk.h:394 include/linux/clk.h:416 include/linux/clk.h:437
#: include/linux/clk.h:449 include/linux/clk.h:463 include/linux/clk.h:486
#: include/linux/clk.h:503 include/linux/clk.h:521 include/linux/clk.h:542
#: include/linux/clk.h:563 include/linux/clk.h:583 include/linux/clk.h:606
#: include/linux/clk.h:628 include/linux/clk.h:650 include/linux/clk.h:676
#: include/linux/clk.h:693 include/linux/clk.h:705 include/linux/clk.h:717
#: include/linux/clk.h:733 include/linux/clk.h:751 include/linux/clk.h:758
#: include/linux/clk.h:770 include/linux/clk.h:783 include/linux/clk.h:796
#: include/linux/clk.h:814 include/linux/clk.h:837 include/linux/clk.h:849
#: include/linux/clk.h:866 include/linux/clk.h:878 include/linux/clk.h:888
#: include/linux/clk.h:897 include/linux/clk.h:906 include/linux/clk.h:915
#: include/linux/clk.h:924 include/linux/clk.h:941 include/linux/clk.h:950
#: include/linux/clk.h:1190 include/linux/clk.h:1201
#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:58
#: include/linux/rcupdate.h:232 include/linux/rcupdate.h:257
#: include/linux/rcupdate.h:390 include/linux/rcupdate.h:519
#: include/linux/rcupdate.h:556 include/linux/rcupdate.h:562
#: include/linux/rcupdate.h:604 include/linux/rcupdate.h:622
#: include/linux/rcupdate.h:651 include/linux/rcupdate.h:688
#: include/linux/rcupdate.h:704 include/linux/rcupdate.h:721
#: include/linux/rcupdate.h:749 include/linux/rcupdate.h:769
#: include/linux/rcupdate.h:777 include/linux/rcupdate.h:785
#: include/linux/rcupdate.h:793 include/linux/rcupdate.h:801
#: include/linux/rcupdate.h:823 include/linux/rcupdate.h:887
#: include/linux/rcupdate.h:907 include/linux/rcupdate.h:930
#: include/linux/rcupdate.h:944 include/linux/rcupdate.h:975
#: include/linux/rcupdate.h:1010 include/linux/rcupdate.h:1054
#: include/linux/rcupdate.h:1064 include/linux/rcupdate.h:1095
#: include/linux/rcupdate.h:1157 include/linux/rcupdate.h:1172
#: ../../../core-api/kernel-api:39: include/linux/string.h:27
#: include/linux/string.h:47 include/linux/string.h:96
#: include/linux/string.h:133 include/linux/string.h:292
#: include/linux/string.h:334 include/linux/string.h:355
#: include/linux/string.h:375 include/linux/string.h:397
#: include/linux/string.h:424 include/linux/string.h:449
#: include/linux/string.h:476 include/linux/string.h:504
#: include/linux/string.h:521 include/linux/string.h:539
#: include/linux/string.h:560 ../../../core-api/kernel-api:400:
#: kernel/rcu/tree.c:242 kernel/rcu/tree.c:303 kernel/rcu/tree.c:374
#: kernel/rcu/tree.c:622 kernel/rcu/tree.c:640 kernel/rcu/tree.c:736
#: kernel/rcu/tree.c:782 kernel/rcu/tree.c:3160 kernel/rcu/tree.c:3189
#: kernel/rcu/tree.c:3308 kernel/rcu/tree.c:3385 kernel/rcu/tree.c:3400
#: kernel/rcu/tree.c:3418 kernel/rcu/tree.c:3478 kernel/rcu/tree.c:3496
#: kernel/rcu/tree.c:3515 kernel/rcu/tree.c:3559 kernel/rcu/tree.c:3608
#: kernel/rcu/tree.c:3633 kernel/rcu/tree.c:3801 kernel/rcu/tree.c:3912
#: ../../../core-api/kernel-api:402: kernel/rcu/tree_exp.h:905
#: kernel/rcu/tree_exp.h:1015 kernel/rcu/tree_exp.h:1049
#: kernel/rcu/tree_exp.h:1067 kernel/rcu/tree_exp.h:1094
#: ../../../core-api/kernel-api:404: kernel/rcu/update.c:72
#: kernel/rcu/update.c:165 kernel/rcu/update.c:178 kernel/rcu/update.c:205
#: kernel/rcu/update.c:218 kernel/rcu/update.c:330 kernel/rcu/update.c:360
#: kernel/rcu/update.c:401 kernel/rcu/update.c:480 kernel/rcu/update.c:496
#: kernel/rcu/update.c:574 ../../../core-api/kernel-api:406:
#: include/linux/srcu.h:78 include/linux/srcu.h:97 include/linux/srcu.h:132
#: include/linux/srcu.h:195 include/linux/srcu.h:211 include/linux/srcu.h:223
#: include/linux/srcu.h:231 include/linux/srcu.h:262 include/linux/srcu.h:304
#: include/linux/srcu.h:323 include/linux/srcu.h:355 include/linux/srcu.h:384
#: include/linux/srcu.h:400 include/linux/srcu.h:427 include/linux/srcu.h:444
#: include/linux/srcu.h:468 include/linux/srcu.h:485 include/linux/srcu.h:499
#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:306
#: kernel/rcu/srcutree.c:575 kernel/rcu/srcutree.c:676
#: kernel/rcu/srcutree.c:1409 kernel/rcu/srcutree.c:1472
#: kernel/rcu/srcutree.c:1488 kernel/rcu/srcutree.c:1546
#: kernel/rcu/srcutree.c:1565 kernel/rcu/srcutree.c:1581
#: kernel/rcu/srcutree.c:1655 kernel/rcu/srcutree.c:1696
#: ../../../core-api/kernel-api:410: include/linux/rculist_bl.h:32
#: include/linux/rculist_bl.h:57 include/linux/rculist_bl.h:92
#: ../../../core-api/kernel-api:412: include/linux/rculist.h:50
#: include/linux/rculist.h:60 include/linux/rculist.h:114
#: include/linux/rculist.h:135 include/linux/rculist.h:157
#: include/linux/rculist.h:187 include/linux/rculist.h:220
#: include/linux/rculist.h:248 include/linux/rculist.h:269
#: include/linux/rculist.h:329 include/linux/rculist.h:344
#: include/linux/rculist.h:359 include/linux/rculist.h:401
#: include/linux/rculist.h:419 include/linux/rculist.h:440
#: include/linux/rculist.h:457 include/linux/rculist.h:476
#: include/linux/rculist.h:492 include/linux/rculist.h:510
#: include/linux/rculist.h:533 include/linux/rculist.h:554
#: include/linux/rculist.h:579 include/linux/rculist.h:601
#: include/linux/rculist.h:629 include/linux/rculist.h:660
#: include/linux/rculist.h:697 include/linux/rculist.h:724
#: include/linux/rculist.h:757 include/linux/rculist.h:776
#: include/linux/rculist.h:797 include/linux/rculist.h:817
#: include/linux/rculist.h:834 include/linux/rculist.h:846
#: include/linux/rculist.h:858 ../../../core-api/kernel-api:414:
#: include/linux/rculist_nulls.h:18 include/linux/rculist_nulls.h:46
#: include/linux/rculist_nulls.h:53 include/linux/rculist_nulls.h:60
#: include/linux/rculist_nulls.h:85 include/linux/rculist_nulls.h:116
#: include/linux/rculist_nulls.h:160 include/linux/rculist_nulls.h:179
#: ../../../core-api/kernel-api:416: include/linux/rcu_sync.h:30
#: ../../../core-api/kernel-api:418: kernel/rcu/sync.c:22 kernel/rcu/sync.c:39
#: kernel/rcu/sync.c:95 kernel/rcu/sync.c:147 kernel/rcu/sync.c:174
#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:1182
#: kernel/rcu/tasks.h:1206 kernel/rcu/tasks.h:1230 kernel/rcu/tasks.h:1396
#: kernel/rcu/tasks.h:2007 kernel/rcu/tasks.h:2027 kernel/rcu/tasks.h:2051
#: ../../../core-api/kernel-api:422: kernel/rcu/tree_stall.h:185
#: kernel/rcu/tree_stall.h:1137 kernel/rcu/tree_stall.h:1160
#: ../../../core-api/kernel-api:424: include/linux/rcupdate_trace.h:42
#: include/linux/rcupdate_trace.h:66 ../../../core-api/kernel-api:426:
#: include/linux/rcupdate_wait.h:43 ../../../core-api/kernel-api:428:
#: include/linux/rcuref.h:24 include/linux/rcuref.h:34
#: include/linux/rcuref.h:52 include/linux/rcuref.h:70
#: include/linux/rcuref.h:125 include/linux/rcuref.h:152
#: ../../../core-api/kernel-api:42: mm/util.c:79 mm/util.c:93 mm/util.c:113
#: mm/util.c:129 mm/util.c:188 mm/util.c:213 mm/util.c:239 mm/util.c:265
#: mm/util.c:296 ../../../core-api/kernel-api:430: include/linux/rcutree.h:55
#: ../../../core-api/kernel-api:54:
#: include/asm-generic/bitops/instrumented-atomic.h:21
#: include/asm-generic/bitops/instrumented-atomic.h:37
#: include/asm-generic/bitops/instrumented-atomic.h:50
#: include/asm-generic/bitops/instrumented-atomic.h:66
#: include/asm-generic/bitops/instrumented-atomic.h:80
#: include/asm-generic/bitops/instrumented-atomic.h:94
#: ../../../core-api/kernel-api:57:
#: include/asm-generic/bitops/instrumented-non-atomic.h:21
#: include/asm-generic/bitops/instrumented-non-atomic.h:37
#: include/asm-generic/bitops/instrumented-non-atomic.h:53
#: include/asm-generic/bitops/instrumented-non-atomic.h:93
#: include/asm-generic/bitops/instrumented-non-atomic.h:108
#: include/asm-generic/bitops/instrumented-non-atomic.h:123
#: include/asm-generic/bitops/instrumented-non-atomic.h:138
#: include/asm-generic/bitops/instrumented-non-atomic.h:150
#: ../../../core-api/kernel-api:60:
#: include/asm-generic/bitops/instrumented-lock.h:21
#: include/asm-generic/bitops/instrumented-lock.h:35
#: include/asm-generic/bitops/instrumented-lock.h:51
#: include/asm-generic/bitops/instrumented-lock.h:66
#: ../../../core-api/kernel-api:78: lib/bitmap.c:86 lib/bitmap.c:130
#: lib/bitmap.c:167 lib/bitmap.c:405 lib/bitmap.c:470 lib/bitmap.c:524
#: lib/bitmap.c:787 lib/bitmap.c:810 lib/bitmap.c:835 lib/bitmap.c:865
#: ../../../core-api/kernel-api:81: lib/bitmap.c:444 lib/bitmap.c:563
#: lib/bitmap.c:697 ../../../core-api/kernel-api:84: include/linux/bitmap.h:199
#: include/linux/bitmap.h:391 include/linux/bitmap.h:537
#: include/linux/bitmap.h:585 include/linux/bitmap.h:650
#: include/linux/bitmap.h:665 include/linux/bitmap.h:687
#: include/linux/bitmap.h:713 include/linux/bitmap.h:746
#: include/linux/bitmap.h:761 include/linux/bitmap.h:790
#: ../../../core-api/kernel-api:90: lib/cmdline.c:40 lib/cmdline.c:87
#: lib/cmdline.c:146 ../../../core-api/kernel-api:96: include/linux/err.h:27
#: include/linux/err.h:35 include/linux/err.h:55 include/linux/err.h:68
#: include/linux/err.h:81 include/linux/err.h:92 include/linux/err.h:105
msgid "**Parameters**"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:109 lib/vsprintf.c:124
#: lib/vsprintf.c:145 lib/vsprintf.c:177
msgid "``const char *cp``"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:104 lib/vsprintf.c:119
#: lib/vsprintf.c:140 lib/vsprintf.c:172
msgid "The start of the string"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:106 lib/vsprintf.c:121
#: lib/vsprintf.c:142 lib/vsprintf.c:174
msgid "``char **endp``"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:105 lib/vsprintf.c:120
#: lib/vsprintf.c:141 lib/vsprintf.c:173
msgid "A pointer to the end of the parsed string will be placed here"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:107 lib/vsprintf.c:122
#: lib/vsprintf.c:143 lib/vsprintf.c:175 ../../../core-api/kernel-api:21:
#: include/linux/kstrtox.h:21 include/linux/kstrtox.h:49
#: ../../../core-api/kernel-api:24: lib/kstrtox.c:122 lib/kstrtox.c:146
#: lib/kstrtox.c:218 lib/kstrtox.c:249
msgid "``unsigned int base``"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:106 lib/vsprintf.c:121
#: lib/vsprintf.c:142 lib/vsprintf.c:174
msgid "The number base to use"
msgstr ""

#: ../../../core-api/kernel-api:102: lib/sort.c:286 lib/sort.c:321
#: ../../../core-api/kernel-api:105: lib/list_sort.c:104
#: ../../../core-api/kernel-api:114: lib/textsearch.c:135 lib/textsearch.c:170
#: lib/textsearch.c:225 lib/textsearch.c:253 lib/textsearch.c:310
#: ../../../core-api/kernel-api:117: include/linux/textsearch.h:98
#: include/linux/textsearch.h:121 ../../../core-api/kernel-api:127:
#: include/linux/overflow.h:62 include/linux/overflow.h:76
#: include/linux/overflow.h:91 include/linux/overflow.h:108
#: include/linux/overflow.h:122 include/linux/overflow.h:137
#: include/linux/overflow.h:154 include/linux/overflow.h:168
#: include/linux/overflow.h:184 include/linux/overflow.h:229
#: include/linux/overflow.h:247 include/linux/overflow.h:269
#: include/linux/overflow.h:282 include/linux/overflow.h:304
#: include/linux/overflow.h:317 include/linux/overflow.h:392
#: include/linux/overflow.h:405 include/linux/overflow.h:419
#: include/linux/overflow.h:435 include/linux/overflow.h:451
#: include/linux/overflow.h:502 include/linux/overflow.h:522
#: ../../../core-api/kernel-api:133: lib/crc/crc4.c:21
#: ../../../core-api/kernel-api:136: lib/crc/crc7.c:59
#: ../../../core-api/kernel-api:142: lib/crc/crc16.c:53
#: ../../../core-api/kernel-api:148: lib/crc/crc-itu-t.c:56
#: ../../../core-api/kernel-api:151: include/linux/crc32.h:15
#: include/linux/crc32.h:46 include/linux/crc32.h:68
#: ../../../core-api/kernel-api:153: include/linux/crc64.h:23
#: ../../../core-api/kernel-api:158: include/linux/log2.h:40
#: include/linux/log2.h:74 include/linux/log2.h:150 include/linux/log2.h:170
#: include/linux/log2.h:187 include/linux/log2.h:208 include/linux/log2.h:239
#: include/linux/log2.h:263 ../../../core-api/kernel-api:164:
#: include/linux/int_log.h:18 include/linux/int_log.h:40
#: ../../../core-api/kernel-api:166: lib/math/int_pow.c:17
#: ../../../core-api/kernel-api:169: lib/math/int_sqrt.c:18
#: ../../../core-api/kernel-api:175: include/asm-generic/div64.h:36
#: ../../../core-api/kernel-api:178: include/linux/math64.h:23
#: include/linux/math64.h:120 include/linux/math64.h:292
#: include/linux/math64.h:305 include/linux/math64.h:318
#: include/linux/math64.h:331 include/linux/math64.h:344
#: include/linux/math64.h:364 ../../../core-api/kernel-api:187: lib/uuid.c:28
#: lib/uuid.c:80 ../../../core-api/kernel-api:18: lib/vsprintf.c:108
#: lib/vsprintf.c:123 lib/vsprintf.c:144 lib/vsprintf.c:176 lib/vsprintf.c:2822
#: lib/vsprintf.c:2976 lib/vsprintf.c:3007 lib/vsprintf.c:3034
#: lib/vsprintf.c:3057 lib/vsprintf.c:3077 lib/vsprintf.c:3110
#: lib/vsprintf.c:3245 ../../../core-api/kernel-api:196: ipc/util.c:3
#: ipc/util.c:112 ipc/util.c:167 ipc/util.c:269 ipc/util.c:336 ipc/util.c:357
#: ipc/util.c:390 ipc/util.c:444 ipc/util.c:459 ipc/util.c:494 ipc/util.c:519
#: ipc/util.c:548 ipc/util.c:584 ipc/util.c:603 ipc/util.c:623 ipc/util.c:644
#: ipc/util.c:668 ipc/util.c:708 ipc/util.c:753 ipc/util.c:787
#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:183
#: include/linux/kfifo.h:336 include/linux/kfifo.h:355
#: include/linux/kfifo.h:390 include/linux/kfifo.h:409
#: include/linux/kfifo.h:446 include/linux/kfifo.h:485
#: include/linux/kfifo.h:524 include/linux/kfifo.h:549
#: include/linux/kfifo.h:570 include/linux/kfifo.h:592
#: include/linux/kfifo.h:619 include/linux/kfifo.h:642
#: include/linux/kfifo.h:667 include/linux/kfifo.h:695
#: include/linux/kfifo.h:724 include/linux/kfifo.h:752
#: include/linux/kfifo.h:778 include/linux/kfifo.h:808
#: include/linux/kfifo.h:825 include/linux/kfifo.h:851
#: include/linux/kfifo.h:881 ../../../core-api/kernel-api:218:
#: kernel/relay.c:238 kernel/relay.c:318 kernel/relay.c:468 kernel/relay.c:550
#: kernel/relay.c:617 kernel/relay.c:648 kernel/relay.c:676
#: ../../../core-api/kernel-api:21: include/linux/kstrtox.h:27
#: include/linux/kstrtox.h:55 ../../../core-api/kernel-api:221:
#: kernel/relay.c:79 kernel/relay.c:105 kernel/relay.c:144 kernel/relay.c:179
#: kernel/relay.c:213 kernel/relay.c:227 kernel/relay.c:270 kernel/relay.c:285
#: kernel/relay.c:426 kernel/relay.c:704 kernel/relay.c:740 kernel/relay.c:756
#: kernel/relay.c:769 kernel/relay.c:793 kernel/relay.c:911
#: ../../../core-api/kernel-api:230: kernel/module/kmod.c:121
#: ../../../core-api/kernel-api:24: lib/kstrtox.c:128 lib/kstrtox.c:152
#: lib/kstrtox.c:224 lib/kstrtox.c:255 lib/kstrtox.c:343
#: ../../../core-api/kernel-api:268: kernel/resource.c:273
#: kernel/resource.c:337 kernel/resource.c:847 kernel/resource.c:921
#: kernel/resource.c:1181 kernel/resource.c:1437 kernel/resource.c:1556
#: ../../../core-api/kernel-api:271: kernel/resource.c:290
#: kernel/resource.c:416 kernel/resource.c:625 kernel/resource.c:735
#: kernel/resource.c:947 kernel/resource.c:966 kernel/resource.c:1006
#: kernel/resource.c:1071 kernel/resource.c:1349 kernel/resource.c:1617
#: kernel/resource.c:1665 kernel/resource.c:2044 kernel/resource.c:2077
#: ../../../core-api/kernel-api:277: arch/x86/kernel/cpu/mtrr/mtrr.c:473
#: ../../../core-api/kernel-api:27: lib/string_helpers.c:32
#: lib/string_helpers.c:166 lib/string_helpers.c:291 lib/string_helpers.c:512
#: lib/string_helpers.c:756 lib/string_helpers.c:790 lib/string_helpers.c:843
#: lib/string_helpers.c:857 lib/string_helpers.c:884 lib/string_helpers.c:912
#: lib/string_helpers.c:946 lib/string_helpers.c:980
#: ../../../core-api/kernel-api:283: security/security.c:3
#: security/security.c:618 security/security.c:679 security/security.c:701
#: security/security.c:714 security/security.c:728 security/security.c:750
#: security/security.c:771 security/security.c:784 security/security.c:798
#: security/security.c:812 security/security.c:826 security/security.c:841
#: security/security.c:854 security/security.c:867 security/security.c:881
#: security/security.c:895 security/security.c:914 security/security.c:1030
#: security/security.c:1044 security/security.c:1059 security/security.c:1075
#: security/security.c:1090 security/security.c:1108 security/security.c:1126
#: security/security.c:1149 security/security.c:1170 security/security.c:1191
#: security/security.c:1204 security/security.c:1217 security/security.c:1233
#: security/security.c:1248 security/security.c:1282 security/security.c:1308
#: security/security.c:1331 security/security.c:1348 security/security.c:1365
#: security/security.c:1382 security/security.c:1396 security/security.c:1412
#: security/security.c:1440 security/security.c:1462 security/security.c:1474
#: security/security.c:1552 security/security.c:1566 security/security.c:1579
#: security/security.c:1597 security/security.c:1617 security/security.c:1631
#: security/security.c:1696 security/security.c:1712 security/security.c:1728
#: security/security.c:1757 security/security.c:1906 security/security.c:1947
#: security/security.c:1980 security/security.c:2014 security/security.c:2032
#: security/security.c:2074 security/security.c:2092 security/security.c:2111
#: security/security.c:2126 security/security.c:2160 security/security.c:2176
#: security/security.c:2193 security/security.c:2210 security/security.c:2246
#: security/security.c:2264 security/security.c:2287 security/security.c:2315
#: security/security.c:2332 security/security.c:2350 security/security.c:2394
#: security/security.c:2408 security/security.c:2428 security/security.c:2472
#: security/security.c:2492 security/security.c:2509 security/security.c:2528
#: security/security.c:2547 security/security.c:2566 security/security.c:2581
#: security/security.c:2597 security/security.c:2615 security/security.c:2655
#: security/security.c:2669 security/security.c:2684 security/security.c:2698
#: security/security.c:2715 security/security.c:2735 security/security.c:2762
#: security/security.c:2806 security/security.c:2881 security/security.c:2897
#: security/security.c:2920 security/security.c:2941 security/security.c:2952
#: security/security.c:3043 security/security.c:3059 security/security.c:3074
#: security/security.c:3089 security/security.c:3105 security/security.c:3122
#: security/security.c:3140 security/security.c:3158 security/security.c:3172
#: security/security.c:3207 security/security.c:3223 security/security.c:3243
#: security/security.c:3259 security/security.c:3281 security/security.c:3304
#: security/security.c:3326 security/security.c:3368 security/security.c:3383
#: security/security.c:3398 security/security.c:3488 security/security.c:3508
#: security/security.c:3527 security/security.c:3544 security/security.c:3558
#: security/security.c:3572 security/security.c:3615 security/security.c:3629
#: security/security.c:3642 security/security.c:3657 security/security.c:3674
#: security/security.c:3690 security/security.c:3704 security/security.c:3717
#: security/security.c:3733 security/security.c:3755 security/security.c:3784
#: security/security.c:3796 security/security.c:3810 security/security.c:3824
#: security/security.c:3837 security/security.c:3858 security/security.c:3871
#: security/security.c:3892 security/security.c:3906 security/security.c:3922
#: security/security.c:3938 security/security.c:3957 security/security.c:3974
#: security/security.c:3995 security/security.c:4009 security/security.c:4026
#: security/security.c:4042 security/security.c:4058 security/security.c:4079
#: security/security.c:4093 security/security.c:4109 security/security.c:4126
#: security/security.c:4165 security/security.c:4256 security/security.c:4307
#: security/security.c:4331 security/security.c:4522 security/security.c:4539
#: security/security.c:4556 security/security.c:4630 security/security.c:4647
#: security/security.c:4686 security/security.c:4704 security/security.c:4720
#: security/security.c:4734 security/security.c:4751 security/security.c:4767
#: security/security.c:4781 security/security.c:4795 security/security.c:4810
#: security/security.c:4826 security/security.c:4840 security/security.c:4875
#: security/security.c:4916 security/security.c:4931 security/security.c:4952
#: security/security.c:5037 security/security.c:5267 security/security.c:5378
#: security/security.c:5405 security/security.c:5438 security/security.c:5468
#: security/security.c:5480 security/security.c:5498 security/security.c:5530
#: security/security.c:5556 security/security.c:5578 security/security.c:5592
#: security/security.c:5607 security/security.c:5630 security/security.c:5650
#: security/security.c:5665 security/security.c:5679 security/security.c:5694
#: security/security.c:5715 security/security.c:5731 security/security.c:5745
#: security/security.c:5762 security/security.c:5789 security/security.c:5816
#: security/security.c:5842 security/security.c:5858 security/security.c:5872
#: security/security.c:5885 security/security.c:5898 security/security.c:6007
#: security/security.c:6020 security/security.c:6045 security/security.c:6057
#: security/security.c:6070 security/security.c:6085 security/security.c:6112
#: ../../../core-api/kernel-api:286: security/inode.c:191 security/inode.c:219
#: security/inode.c:251 security/inode.c:295 ../../../core-api/kernel-api:292:
#: kernel/audit.c:1894 kernel/audit.c:2047 kernel/audit.c:2280
#: kernel/audit.c:2629 kernel/audit.c:2658 ../../../core-api/kernel-api:295:
#: kernel/auditsc.c:821 kernel/auditsc.c:967 kernel/auditsc.c:1052
#: kernel/auditsc.c:1800 kernel/auditsc.c:1845 kernel/auditsc.c:1871
#: kernel/auditsc.c:1907 kernel/auditsc.c:1978 kernel/auditsc.c:2029
#: kernel/auditsc.c:2176 kernel/auditsc.c:2199 kernel/auditsc.c:2492
#: kernel/auditsc.c:2615 kernel/auditsc.c:2674 kernel/auditsc.c:2709
#: kernel/auditsc.c:2762 kernel/auditsc.c:2808 kernel/auditsc.c:2939
#: kernel/auditsc.c:2966 ../../../core-api/kernel-api:304: kernel/acct.c:288
#: ../../../core-api/kernel-api:310: include/linux/bio.h:128
#: include/linux/bio.h:432 include/linux/bio.h:704
#: ../../../core-api/kernel-api:311: block/blk-core.c:120 block/blk-core.c:206
#: block/blk-core.c:273 block/blk-core.c:482 block/blk-core.c:777
#: block/blk-core.c:902 block/blk-core.c:931 block/blk-core.c:1051
#: block/blk-core.c:1087 block/blk-core.c:1154 block/blk-core.c:1243
#: ../../../core-api/kernel-api:317: block/blk-map.c:506 block/blk-map.c:623
#: block/blk-map.c:661 ../../../core-api/kernel-api:323:
#: block/blk-settings.c:34 block/blk-settings.c:517 block/blk-settings.c:554
#: block/blk-settings.c:579 block/blk-settings.c:741 block/blk-settings.c:916
#: block/blk-settings.c:939 ../../../core-api/kernel-api:326:
#: block/blk-flush.c:465 ../../../core-api/kernel-api:329: block/blk-lib.c:82
#: block/blk-lib.c:264 block/blk-lib.c:304 ../../../core-api/kernel-api:335:
#: kernel/trace/blktrace.c:792 kernel/trace/blktrace.c:856
#: kernel/trace/blktrace.c:965 kernel/trace/blktrace.c:999
#: ../../../core-api/kernel-api:338: block/genhd.c:1266
#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:137
#: include/linux/fortify-string.h:171 include/linux/fortify-string.h:215
#: include/linux/fortify-string.h:249 include/linux/fortify-string.h:341
#: include/linux/fortify-string.h:403 include/linux/fortify-string.h:430
#: include/linux/fortify-string.h:775 ../../../core-api/kernel-api:341:
#: block/genhd.c:159 block/genhd.c:219 block/genhd.c:582 block/genhd.c:621
#: block/genhd.c:683 block/genhd.c:794 block/genhd.c:834 block/genhd.c:1533
#: block/genhd.c:1564 ../../../core-api/kernel-api:344: block/bdev.c:160
#: block/bdev.c:275 block/bdev.c:317 block/bdev.c:575 block/bdev.c:661
#: block/bdev.c:1156 block/bdev.c:1190 block/bdev.c:1230
#: ../../../core-api/kernel-api:350: fs/char_dev.c:3 fs/char_dev.c:198
#: fs/char_dev.c:232 fs/char_dev.c:255 fs/char_dev.c:307 fs/char_dev.c:331
#: fs/char_dev.c:476 fs/char_dev.c:511 fs/char_dev.c:526 fs/char_dev.c:568
#: fs/char_dev.c:594 fs/char_dev.c:655 ../../../core-api/kernel-api:36:
#: lib/string.c:201 lib/string.c:326 lib/string.c:345 lib/string.c:399
#: lib/string.c:502 lib/string.c:532 lib/string.c:552 lib/string.c:574
#: lib/string.c:596 lib/string.c:618 lib/string.c:640 lib/string.c:708
#: lib/string.c:727 lib/string.c:802 lib/string.c:835
#: ../../../core-api/kernel-api:389: include/linux/clk.h:3
#: include/linux/clk.h:51 include/linux/clk.h:68 include/linux/clk.h:85
#: include/linux/clk.h:99 include/linux/clk.h:118 include/linux/clk.h:128
#: include/linux/clk.h:138 include/linux/clk.h:147 include/linux/clk.h:158
#: include/linux/clk.h:168 include/linux/clk.h:178 include/linux/clk.h:191
#: include/linux/clk.h:209 include/linux/clk.h:221 include/linux/clk.h:303
#: include/linux/clk.h:315 include/linux/clk.h:351 include/linux/clk.h:377
#: include/linux/clk.h:395 include/linux/clk.h:417 include/linux/clk.h:438
#: include/linux/clk.h:450 include/linux/clk.h:464 include/linux/clk.h:486
#: include/linux/clk.h:503 include/linux/clk.h:529 include/linux/clk.h:550
#: include/linux/clk.h:571 include/linux/clk.h:593 include/linux/clk.h:615
#: include/linux/clk.h:638 include/linux/clk.h:662 include/linux/clk.h:678
#: include/linux/clk.h:692 include/linux/clk.h:705 include/linux/clk.h:716
#: include/linux/clk.h:734 include/linux/clk.h:814 include/linux/clk.h:837
#: include/linux/clk.h:850 include/linux/clk.h:866 include/linux/clk.h:879
#: include/linux/clk.h:888 include/linux/clk.h:897 include/linux/clk.h:906
#: include/linux/clk.h:914 include/linux/clk.h:924 include/linux/clk.h:1189
#: include/linux/clk.h:1202 ../../../core-api/kernel-api:398:
#: include/linux/rcupdate.h:3 include/linux/rcupdate.h:58
#: include/linux/rcupdate.h:242 include/linux/rcupdate.h:256
#: include/linux/rcupdate.h:390 include/linux/rcupdate.h:438
#: include/linux/rcupdate.h:446 include/linux/rcupdate.h:456
#: include/linux/rcupdate.h:466 include/linux/rcupdate.h:518
#: include/linux/rcupdate.h:562 include/linux/rcupdate.h:605
#: include/linux/rcupdate.h:621 include/linux/rcupdate.h:651
#: include/linux/rcupdate.h:688 include/linux/rcupdate.h:704
#: include/linux/rcupdate.h:721 include/linux/rcupdate.h:749
#: include/linux/rcupdate.h:768 include/linux/rcupdate.h:776
#: include/linux/rcupdate.h:784 include/linux/rcupdate.h:792
#: include/linux/rcupdate.h:800 include/linux/rcupdate.h:1010
#: include/linux/rcupdate.h:1054 include/linux/rcupdate.h:1064
#: include/linux/rcupdate.h:1094 include/linux/rcupdate.h:1156
#: include/linux/rcupdate.h:1172 ../../../core-api/kernel-api:39:
#: include/linux/string.h:97 include/linux/string.h:134
#: include/linux/string.h:334 include/linux/string.h:399
#: include/linux/string.h:425 include/linux/string.h:449
#: include/linux/string.h:477 include/linux/string.h:506
#: include/linux/string.h:523 include/linux/string.h:539
#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3 kernel/rcu/tree.c:305
#: kernel/rcu/tree.c:3163 kernel/rcu/tree.c:3193 kernel/rcu/tree.c:3384
#: kernel/rcu/tree.c:3417 kernel/rcu/tree.c:3495 kernel/rcu/tree.c:3514
#: kernel/rcu/tree.c:3558 kernel/rcu/tree.c:3607 kernel/rcu/tree.c:3632
#: ../../../core-api/kernel-api:402: kernel/rcu/tree_exp.h:3
#: kernel/rcu/tree_exp.h:1048 kernel/rcu/tree_exp.h:1067
#: kernel/rcu/tree_exp.h:1093 ../../../core-api/kernel-api:404:
#: kernel/rcu/update.c:3 kernel/rcu/update.c:71 kernel/rcu/update.c:400
#: kernel/rcu/update.c:479 kernel/rcu/update.c:495
#: ../../../core-api/kernel-api:406: include/linux/srcu.h:3
#: include/linux/srcu.h:97 include/linux/srcu.h:131 include/linux/srcu.h:197
#: include/linux/srcu.h:212 include/linux/srcu.h:230 include/linux/srcu.h:261
#: include/linux/srcu.h:303 include/linux/srcu.h:322 include/linux/srcu.h:354
#: include/linux/srcu.h:384 include/linux/srcu.h:400 include/linux/srcu.h:427
#: include/linux/srcu.h:444 include/linux/srcu.h:468
#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:305
#: kernel/rcu/srcutree.c:575 kernel/rcu/srcutree.c:675
#: kernel/rcu/srcutree.c:1410 kernel/rcu/srcutree.c:1471
#: kernel/rcu/srcutree.c:1487 kernel/rcu/srcutree.c:1545
#: kernel/rcu/srcutree.c:1564 kernel/rcu/srcutree.c:1581
#: kernel/rcu/srcutree.c:1695 ../../../core-api/kernel-api:410:
#: include/linux/rculist_bl.h:57 ../../../core-api/kernel-api:412:
#: include/linux/rculist.h:114 include/linux/rculist.h:135
#: include/linux/rculist.h:186 include/linux/rculist.h:248
#: include/linux/rculist.h:271 include/linux/rculist.h:360
#: include/linux/rculist.h:402 include/linux/rculist.h:421
#: include/linux/rculist.h:442 include/linux/rculist.h:459
#: include/linux/rculist.h:477 include/linux/rculist.h:493
#: include/linux/rculist.h:511 include/linux/rculist.h:534
#: include/linux/rculist.h:579 include/linux/rculist.h:601
#: include/linux/rculist.h:629 include/linux/rculist.h:660
#: include/linux/rculist.h:697 include/linux/rculist.h:724
#: include/linux/rculist.h:759 include/linux/rculist.h:778
#: include/linux/rculist.h:798 include/linux/rculist.h:818
#: ../../../core-api/kernel-api:414: include/linux/rculist_nulls.h:85
#: include/linux/rculist_nulls.h:116 include/linux/rculist_nulls.h:162
#: ../../../core-api/kernel-api:416: include/linux/rcu_sync.h:29
#: ../../../core-api/kernel-api:418: kernel/rcu/sync.c:38 kernel/rcu/sync.c:94
#: kernel/rcu/sync.c:146 ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:3
#: kernel/rcu/tasks.h:1182 kernel/rcu/tasks.h:2007
#: ../../../core-api/kernel-api:422: kernel/rcu/tree_stall.h:3
#: kernel/rcu/tree_stall.h:1136 kernel/rcu/tree_stall.h:1159
#: ../../../core-api/kernel-api:424: include/linux/rcupdate_trace.h:3
#: ../../../core-api/kernel-api:426: include/linux/rcupdate_wait.h:42
#: ../../../core-api/kernel-api:428: include/linux/rcuref.h:69
#: include/linux/rcuref.h:124 include/linux/rcuref.h:151
#: ../../../core-api/kernel-api:430: include/linux/rcutree.h:55
#: ../../../core-api/kernel-api:54:
#: include/asm-generic/bitops/instrumented-atomic.h:21
#: include/asm-generic/bitops/instrumented-atomic.h:37
#: include/asm-generic/bitops/instrumented-atomic.h:50
#: include/asm-generic/bitops/instrumented-atomic.h:66
#: include/asm-generic/bitops/instrumented-atomic.h:80
#: include/asm-generic/bitops/instrumented-atomic.h:94
#: ../../../core-api/kernel-api:57:
#: include/asm-generic/bitops/instrumented-non-atomic.h:21
#: include/asm-generic/bitops/instrumented-non-atomic.h:37
#: include/asm-generic/bitops/instrumented-non-atomic.h:53
#: include/asm-generic/bitops/instrumented-non-atomic.h:93
#: include/asm-generic/bitops/instrumented-non-atomic.h:108
#: include/asm-generic/bitops/instrumented-non-atomic.h:123
#: ../../../core-api/kernel-api:60:
#: include/asm-generic/bitops/instrumented-lock.h:21
#: include/asm-generic/bitops/instrumented-lock.h:35
#: include/asm-generic/bitops/instrumented-lock.h:51
#: include/asm-generic/bitops/instrumented-lock.h:67
#: ../../../core-api/kernel-api:78: lib/bitmap.c:88 lib/bitmap.c:132
#: lib/bitmap.c:170 lib/bitmap.c:409 lib/bitmap.c:473 lib/bitmap.c:526
#: ../../../core-api/kernel-api:81: lib/bitmap.c:445 lib/bitmap.c:565
#: lib/bitmap.c:699 ../../../core-api/kernel-api:84: include/linux/bitmap.h:202
#: include/linux/bitmap.h:539 include/linux/bitmap.h:587
#: include/linux/bitmap.h:651 include/linux/bitmap.h:666
#: include/linux/bitmap.h:688 include/linux/bitmap.h:712
#: include/linux/bitmap.h:745 include/linux/bitmap.h:792
#: ../../../core-api/kernel-api:90: lib/cmdline.c:40 lib/cmdline.c:88
#: lib/cmdline.c:146 ../../../core-api/kernel-api:96: include/linux/err.h:26
#: include/linux/err.h:34 include/linux/err.h:80 include/linux/err.h:91
#: include/linux/err.h:104
msgid "**Description**"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:107
msgid "This function has caveats. Please use kstrtoull instead."
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:118
#: ../../../core-api/kernel-api:21: include/linux/kstrtox.h:16
msgid "convert a string to an unsigned long"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:122
msgid "This function has caveats. Please use kstrtoul instead."
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:139
msgid "convert a string to a signed long"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:143
msgid "This function has caveats. Please use kstrtol instead."
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:171
msgid "convert a string to a signed long long"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:175
msgid "This function has caveats. Please use kstrtoll instead."
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:2816 lib/vsprintf.c:2970
#: lib/vsprintf.c:3001 lib/vsprintf.c:3028 lib/vsprintf.c:3052
#: lib/vsprintf.c:3072
msgid "Format a string and place it in a buffer"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:2822 lib/vsprintf.c:2976
#: lib/vsprintf.c:3007 lib/vsprintf.c:3034 lib/vsprintf.c:3058
#: lib/vsprintf.c:3078 lib/vsprintf.c:3245 ../../../core-api/kernel-api:27:
#: lib/string_helpers.c:30
msgid "``char *buf``"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:2817 lib/vsprintf.c:2971
#: lib/vsprintf.c:3002 lib/vsprintf.c:3029 lib/vsprintf.c:3053
#: lib/vsprintf.c:3073 lib/vsprintf.c:3240
msgid "The buffer to place the result into"
msgstr ""

#: ../../../core-api/kernel-api:102: lib/sort.c:282 lib/sort.c:317
#: ../../../core-api/kernel-api:18: lib/vsprintf.c:2819 lib/vsprintf.c:2973
#: lib/vsprintf.c:3004 lib/vsprintf.c:3031 lib/vsprintf.c:3107
#: lib/vsprintf.c:3242 ../../../core-api/kernel-api:271: kernel/resource.c:622
#: ../../../core-api/kernel-api:27: lib/string_helpers.c:289
#: ../../../core-api/kernel-api:283: security/security.c:677
#: security/security.c:2426 security/security.c:2564 security/security.c:2760
#: security/security.c:4330 ../../../core-api/kernel-api:36: lib/string.c:726
#: ../../../core-api/kernel-api:39: include/linux/string.h:27
#: include/linux/string.h:47
msgid "``size_t size``"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:2818 lib/vsprintf.c:2972
#: lib/vsprintf.c:3003 lib/vsprintf.c:3030 lib/vsprintf.c:3241
msgid "The size of the buffer, including the trailing null space"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:2820 lib/vsprintf.c:3108
#: lib/vsprintf.c:3243
msgid "``const char *fmt_str``"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:2819 lib/vsprintf.c:2973
#: lib/vsprintf.c:3004 lib/vsprintf.c:3031 lib/vsprintf.c:3054
#: lib/vsprintf.c:3074 lib/vsprintf.c:3107 lib/vsprintf.c:3242
msgid "The format string to use"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:2821 lib/vsprintf.c:2975
#: lib/vsprintf.c:3056 lib/vsprintf.c:3109 lib/vsprintf.c:3429
msgid "``va_list args``"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:2820 lib/vsprintf.c:2974
#: lib/vsprintf.c:3005 lib/vsprintf.c:3032 lib/vsprintf.c:3055
#: lib/vsprintf.c:3075 lib/vsprintf.c:3108
msgid "Arguments for the format string"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:2821
msgid ""
"This function generally follows C99 vsnprintf, but has some extensions and a "
"few limitations:"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:2824
msgid "````n```` is unsupported"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:2825
msgid "````p*```` is handled by pointer()"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:2827
msgid ""
"See pointer() or Documentation/core-api/printk-formats.rst for more "
"extensive description."
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:2830
msgid "**Please update the documentation in both places when making changes**"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:2832 lib/vsprintf.c:3251
msgid ""
"The return value is the number of characters which would be generated for "
"the given input, excluding the trailing '\\0', as per ISO C99. If you want "
"to have the exact number of characters written into **buf** as return value "
"(not including the trailing '\\0'), use vscnprintf(). If the return is "
"greater than or equal to **size**, the resulting string is truncated."
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:2840
msgid "If you're not already dealing with a va_list consider using snprintf()."
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:2974 lib/vsprintf.c:3005
#: lib/vsprintf.c:3032 lib/vsprintf.c:3055 lib/vsprintf.c:3075
#: lib/vsprintf.c:3428 lib/vsprintf.c:3705 ../../../core-api/kernel-api:230:
#: kernel/module/kmod.c:119 ../../../core-api/kernel-api:292:
#: kernel/audit.c:2045 kernel/audit.c:2656
msgid "``const char *fmt``"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:2975
msgid ""
"The return value is the number of characters which have been written into "
"the **buf** not including the trailing '\\0'. If **size** is == 0 the "
"function returns 0."
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:2979
msgid ""
"If you're not already dealing with a va_list consider using scnprintf()."
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:2981 lib/vsprintf.c:3011
#: lib/vsprintf.c:3062 lib/vsprintf.c:3080
msgid ""
"See the vsnprintf() documentation for format string extensions over C99."
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:3006 lib/vsprintf.c:3033
#: lib/vsprintf.c:3076 lib/vsprintf.c:3706 ../../../core-api/kernel-api:230:
#: kernel/module/kmod.c:120 ../../../core-api/kernel-api:292:
#: kernel/audit.c:2046 kernel/audit.c:2657 ../../../core-api/kernel-api:39:
#: include/linux/string.h:96 include/linux/string.h:133
#: ../../../core-api/kernel-api:426: include/linux/rcupdate_wait.h:45
msgid "``...``"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:3006
msgid ""
"The return value is the number of characters which would be generated for "
"the given input, excluding the trailing null, as per ISO C99.  If the return "
"is greater than or equal to **size**, the resulting string is truncated."
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:3033
msgid ""
"The return value is the number of characters written into **buf** not "
"including the trailing '\\0'. If **size** is == 0 the function returns 0."
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:3056
msgid ""
"The function returns the number of characters written into **buf**. Use "
"vsnprintf() or vscnprintf() in order to avoid buffer overflows."
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:3060
msgid "If you're not already dealing with a va_list consider using sprintf()."
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:3076
msgid ""
"The function returns the number of characters written into **buf**. Use "
"snprintf() or scnprintf() in order to avoid buffer overflows."
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:3104
msgid "Parse a format string and place args' binary value in a buffer"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:3110
msgid "``u32 *bin_buf``"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:3105
msgid "The buffer to place args' binary value"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:3106
msgid "The size of the buffer(by words(32bits), not characters)"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:3109
msgid ""
"The format follows C99 vsnprintf, except ``n`` is ignored, and its argument "
"is skipped."
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:3112
msgid ""
"The return value is the number of words(32bits) which would be generated for "
"the given input."
msgstr ""

#: ../../../core-api/kernel-api:175: include/asm-generic/div64.h:42
#: ../../../core-api/kernel-api:18: lib/vsprintf.c:3115
#: ../../../core-api/kernel-api:271: kernel/resource.c:418
#: ../../../core-api/kernel-api:350: fs/char_dev.c:540 fs/char_dev.c:573
#: fs/char_dev.c:596
msgid "**NOTE**"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:3116
msgid ""
"If the return value is greater than **size**, the resulting bin_buf is NOT "
"valid for bstr_printf()."
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:3239
msgid "Format a string from binary arguments and place it in a buffer"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:3244
msgid "``const u32 *bin_buf``"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:3243
msgid "Binary arguments for the format string"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:3244
msgid ""
"This function like C99 vsnprintf, but the difference is that vsnprintf gets "
"arguments from stack, and bstr_printf gets arguments from **bin_buf** which "
"is a binary buffer that generated by vbin_printf."
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:3248
msgid "The format follows C99 vsnprintf, but has some extensions:"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:3249
msgid "see vsnprintf comment for details."
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:3425 lib/vsprintf.c:3702
msgid "Unformat a buffer into a list of arguments"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:3431 lib/vsprintf.c:3708
msgid "``const char *buf``"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:3426 lib/vsprintf.c:3703
msgid "input buffer"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:3427
msgid "format of buffer"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:3428
msgid "arguments"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:3704
msgid "formatting of buffer"
msgstr ""

#: ../../../core-api/kernel-api:18: lib/vsprintf.c:3705
msgid "resulting arguments"
msgstr ""

#: ../../../core-api/kernel-api:21: include/linux/kstrtox.h:22
#: include/linux/kstrtox.h:50 ../../../core-api/kernel-api:24:
#: lib/kstrtox.c:123 lib/kstrtox.c:147 lib/kstrtox.c:219 lib/kstrtox.c:250
#: lib/kstrtox.c:345 ../../../core-api/kernel-api:36: lib/string.c:328
#: lib/string.c:347 lib/string.c:382 lib/string.c:400 lib/string.c:447
#: lib/string.c:466 ../../../core-api/kernel-api:42: mm/util.c:81 mm/util.c:95
#: mm/util.c:115 mm/util.c:190
msgid "``const char *s``"
msgstr ""

#: ../../../core-api/kernel-api:21: include/linux/kstrtox.h:17
#: ../../../core-api/kernel-api:24: lib/kstrtox.c:118 lib/kstrtox.c:214
msgid ""
"The start of the string. The string must be null-terminated, and may also "
"include a single newline before its terminating null. The first character "
"may also be a plus sign, but not a minus sign."
msgstr ""

#: ../../../core-api/kernel-api:21: include/linux/kstrtox.h:20
#: include/linux/kstrtox.h:48 ../../../core-api/kernel-api:24:
#: lib/kstrtox.c:121 lib/kstrtox.c:145 lib/kstrtox.c:217 lib/kstrtox.c:248
msgid ""
"The number base to use. The maximum supported base is 16. If base is given "
"as 0, then the base of the string is automatically detected with the "
"conventional semantics - If it begins with 0x the number will be parsed as a "
"hexadecimal (case insensitive), if it otherwise begins with 0, it will be "
"parsed as an octal number. Otherwise it will be parsed as a decimal."
msgstr ""

#: ../../../core-api/kernel-api:21: include/linux/kstrtox.h:26
msgid "``unsigned long *res``"
msgstr ""

#: ../../../core-api/kernel-api:21: include/linux/kstrtox.h:25
#: include/linux/kstrtox.h:53 ../../../core-api/kernel-api:24:
#: lib/kstrtox.c:126 lib/kstrtox.c:150 lib/kstrtox.c:222 lib/kstrtox.c:253
msgid "Where to write the result of the conversion on success."
msgstr ""

#: ../../../core-api/kernel-api:21: include/linux/kstrtox.h:26
#: ../../../core-api/kernel-api:24: lib/kstrtox.c:223
msgid ""
"Returns 0 on success, -ERANGE on overflow and -EINVAL on parsing error. "
"Preferred over simple_strtoul(). Return code must be checked."
msgstr ""

#: ../../../core-api/kernel-api:21: include/linux/kstrtox.h:44
msgid "convert a string to a long"
msgstr ""

#: ../../../core-api/kernel-api:21: include/linux/kstrtox.h:45
#: ../../../core-api/kernel-api:24: lib/kstrtox.c:142 lib/kstrtox.c:245
msgid ""
"The start of the string. The string must be null-terminated, and may also "
"include a single newline before its terminating null. The first character "
"may also be a plus sign or a minus sign."
msgstr ""

#: ../../../core-api/kernel-api:21: include/linux/kstrtox.h:54
msgid "``long *res``"
msgstr ""

#: ../../../core-api/kernel-api:21: include/linux/kstrtox.h:54
#: ../../../core-api/kernel-api:24: lib/kstrtox.c:254
msgid ""
"Returns 0 on success, -ERANGE on overflow and -EINVAL on parsing error. "
"Preferred over simple_strtol(). Return code must be checked."
msgstr ""

#: ../../../core-api/kernel-api:24: lib/kstrtox.c:127
msgid "``unsigned long long *res``"
msgstr ""

#: ../../../core-api/kernel-api:24: lib/kstrtox.c:127
msgid ""
"Returns 0 on success, -ERANGE on overflow and -EINVAL on parsing error. "
"Preferred over simple_strtoull(). Return code must be checked."
msgstr ""

#: ../../../core-api/kernel-api:24: lib/kstrtox.c:141
msgid "convert a string to a long long"
msgstr ""

#: ../../../core-api/kernel-api:24: lib/kstrtox.c:151
msgid "``long long *res``"
msgstr ""

#: ../../../core-api/kernel-api:24: lib/kstrtox.c:151
msgid ""
"Returns 0 on success, -ERANGE on overflow and -EINVAL on parsing error. "
"Preferred over simple_strtoll(). Return code must be checked."
msgstr ""

#: ../../../core-api/kernel-api:24: lib/kstrtox.c:213
msgid "convert a string to an unsigned int"
msgstr ""

#: ../../../core-api/kernel-api:24: lib/kstrtox.c:223
msgid "``unsigned int *res``"
msgstr ""

#: ../../../core-api/kernel-api:24: lib/kstrtox.c:244
msgid "convert a string to an int"
msgstr ""

#: ../../../core-api/kernel-api:24: lib/kstrtox.c:254
msgid "``int *res``"
msgstr ""

#: ../../../core-api/kernel-api:24: lib/kstrtox.c:339
msgid "convert common user inputs into boolean values"
msgstr ""

#: ../../../core-api/kernel-api:24: lib/kstrtox.c:340
msgid "input string"
msgstr ""

#: ../../../core-api/kernel-api:24: lib/kstrtox.c:342
msgid "``bool *res``"
msgstr ""

#: ../../../core-api/kernel-api:24: lib/kstrtox.c:341
msgid "result"
msgstr ""

#: ../../../core-api/kernel-api:24: lib/kstrtox.c:342
msgid ""
"This routine returns 0 iff the first character is one of 'YyTt1NnFf0', or "
"[oO][NnFf] for \"on\" and \"off\". Otherwise it will return -EINVAL.  Value "
"pointed to by res is updated upon finding a match."
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:25
msgid "get the size in the specified units"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:31
msgid "``u64 size``"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:26
msgid "The size to be converted in blocks"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:28
msgid "``u64 blk_size``"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:27
msgid "Size of the block (use 1 for size in bytes)"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:29
msgid "``const enum string_size_units units``"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:28
msgid ""
"Units to use (powers of 1000 or 1024), whether to include space separator"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:29
msgid "buffer to format to"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:31
#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2676
msgid "``int len``"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:30
msgid "length of buffer"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:31
msgid ""
"This function returns a string formatted to 3 significant figures giving the "
"size in the required units.  **buf** should have room for at least 9 bytes "
"and will always be zero terminated."
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:35
msgid ""
"Return value: number of characters of output that would have been written "
"(which may be greater than len, if output was truncated)."
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:161
msgid "Split string into a sequence of integers"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:167
msgid "``const char __user *from``"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:162
msgid "The user space buffer to read from"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:940
#: ../../../core-api/kernel-api:27: lib/string_helpers.c:164
#: lib/string_helpers.c:1001 ../../../core-api/kernel-api:36: lib/string.c:301
#: lib/string.c:397 lib/string.c:531 lib/string.c:551 lib/string.c:573
#: lib/string.c:595 lib/string.c:617 lib/string.c:639 lib/string.c:671
#: ../../../core-api/kernel-api:39: include/linux/string.h:355
msgid "``size_t count``"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:163
msgid "The maximum number of bytes to read"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:165
msgid "``int **array``"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:164
msgid "Returned pointer to sequence of integers"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:165
msgid ""
"On success **array** is allocated and initialized with a sequence of "
"integers extracted from the **from** plus an additional element that begins "
"the sequence and specifies the integers count."
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:169
msgid ""
"Caller takes responsibility for freeing **array** when it is no longer "
"needed."
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:285
msgid "unquote characters in the given string"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:291
msgid "``char *src``"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:286
msgid "source buffer (escaped)"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:288
#: lib/string_helpers.c:505
msgid "``char *dst``"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:287
msgid "destination buffer (unescaped)"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:288
msgid "size of the destination buffer (0 to unlimit)"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:290
#: lib/string_helpers.c:507 ../../../core-api/kernel-api:283:
#: security/security.c:2286 security/security.c:3656
#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2267
#: ../../../core-api/kernel-api:311: block/blk-core.c:930
msgid "``unsigned int flags``"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:289
msgid "combination of the flags."
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:291
msgid "The function unquotes characters in the given string."
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:293
msgid ""
"Because the size of the output will be the same as or less than the size of "
"the input, the transformation may be performed in place."
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:296
msgid ""
"Caller must provide valid source and destination pointers. Be aware that "
"destination buffer will always be NULL-terminated. Source string must be "
"NULL-terminated as well.  The supported flags are::"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:233
#: include/linux/overflow.h:250 include/linux/overflow.h:270
#: include/linux/overflow.h:285 include/linux/overflow.h:305
#: include/linux/overflow.h:332 include/linux/overflow.h:351
#: include/linux/overflow.h:370 include/linux/overflow.h:393
#: include/linux/overflow.h:406 include/linux/overflow.h:421
#: include/linux/overflow.h:437 include/linux/overflow.h:455
#: ../../../core-api/kernel-api:151: include/linux/crc32.h:30
#: include/linux/crc32.h:58 include/linux/crc32.h:81
#: ../../../core-api/kernel-api:158: include/linux/log2.h:42
#: ../../../core-api/kernel-api:164: include/linux/int_log.h:29
#: include/linux/int_log.h:51 ../../../core-api/kernel-api:175:
#: include/asm-generic/div64.h:39 ../../../core-api/kernel-api:178:
#: include/linux/math64.h:21 include/linux/math64.h:38
#: include/linux/math64.h:52 include/linux/math64.h:65
#: include/linux/math64.h:77 include/linux/math64.h:123
#: include/linux/math64.h:139 include/linux/math64.h:294
#: include/linux/math64.h:307 include/linux/math64.h:320
#: include/linux/math64.h:333 include/linux/math64.h:346
#: include/linux/math64.h:366 ../../../core-api/kernel-api:187: lib/uuid.c:85
#: ../../../core-api/kernel-api:271: kernel/resource.c:737
#: ../../../core-api/kernel-api:27: lib/string_helpers.c:318
#: lib/string_helpers.c:570 lib/string_helpers.c:919 lib/string_helpers.c:981
#: ../../../core-api/kernel-api:283: security/security.c:1031
#: security/security.c:1045 security/security.c:1060 security/security.c:1076
#: security/security.c:1096 security/security.c:1111 security/security.c:1130
#: security/security.c:1151 security/security.c:1173 security/security.c:1192
#: security/security.c:1205 security/security.c:1220 security/security.c:1235
#: security/security.c:1252 security/security.c:1295 security/security.c:1319
#: security/security.c:1336 security/security.c:1383 security/security.c:1399
#: security/security.c:1414 security/security.c:1443 security/security.c:1553
#: security/security.c:1567 security/security.c:1581 security/security.c:1603
#: security/security.c:1618 security/security.c:1632 security/security.c:1697
#: security/security.c:1714 security/security.c:1731 security/security.c:1908
#: security/security.c:1981 security/security.c:2015 security/security.c:2033
#: security/security.c:2077 security/security.c:2095 security/security.c:2112
#: security/security.c:2127 security/security.c:2177 security/security.c:2194
#: security/security.c:2211 security/security.c:2247 security/security.c:2268
#: security/security.c:2288 security/security.c:2316 security/security.c:2334
#: security/security.c:2356 security/security.c:2409 security/security.c:2442
#: security/security.c:2474 security/security.c:2511 security/security.c:2530
#: security/security.c:2583 security/security.c:2599 security/security.c:2629
#: security/security.c:2671 security/security.c:2686 security/security.c:2700
#: security/security.c:2717 security/security.c:2740 security/security.c:2766
#: security/security.c:2883 security/security.c:2908 security/security.c:2922
#: security/security.c:3045 security/security.c:3060 security/security.c:3075
#: security/security.c:3091 security/security.c:3110 security/security.c:3126
#: security/security.c:3145 security/security.c:3160 security/security.c:3178
#: security/security.c:3210 security/security.c:3224 security/security.c:3261
#: security/security.c:3305 security/security.c:3370 security/security.c:3386
#: security/security.c:3400 security/security.c:3493 security/security.c:3513
#: security/security.c:3531 security/security.c:3546 security/security.c:3560
#: security/security.c:3573 security/security.c:3616 security/security.c:3630
#: security/security.c:3643 security/security.c:3659 security/security.c:3677
#: security/security.c:3692 security/security.c:3705 security/security.c:3718
#: security/security.c:3738 security/security.c:3757 security/security.c:3797
#: security/security.c:3811 security/security.c:3839 security/security.c:3873
#: security/security.c:3909 security/security.c:3924 security/security.c:3940
#: security/security.c:3961 security/security.c:3976 security/security.c:4013
#: security/security.c:4028 security/security.c:4045 security/security.c:4060
#: security/security.c:4096 security/security.c:4111 security/security.c:4128
#: security/security.c:4308 security/security.c:4333 security/security.c:4523
#: security/security.c:4541 security/security.c:4560 security/security.c:4631
#: security/security.c:4654 security/security.c:4689 security/security.c:4706
#: security/security.c:4721 security/security.c:4737 security/security.c:4752
#: security/security.c:4768 security/security.c:4783 security/security.c:4796
#: security/security.c:4812 security/security.c:4827 security/security.c:4842
#: security/security.c:4879 security/security.c:4933 security/security.c:5271
#: security/security.c:5380 security/security.c:5406 security/security.c:5441
#: security/security.c:5483 security/security.c:5499 security/security.c:5531
#: security/security.c:5558 security/security.c:5593 security/security.c:5610
#: security/security.c:5651 security/security.c:5667 security/security.c:5696
#: security/security.c:5718 security/security.c:5733 security/security.c:5747
#: security/security.c:5764 security/security.c:5792 security/security.c:5818
#: security/security.c:5844 security/security.c:5860 security/security.c:6008
#: security/security.c:6021 security/security.c:6058 security/security.c:6071
#: security/security.c:6087 security/security.c:6100 security/security.c:6113
#: security/security.c:6125 ../../../core-api/kernel-api:304: kernel/acct.c:292
#: ../../../core-api/kernel-api:310: include/linux/bio.h:335
#: ../../../core-api/kernel-api:311: block/blk-core.c:1097
#: ../../../core-api/kernel-api:344: block/bdev.c:162 block/bdev.c:282
#: block/bdev.c:318 block/bdev.c:578 block/bdev.c:1195
#: ../../../core-api/kernel-api:389: include/linux/clk.h:523
#: include/linux/clk.h:544 include/linux/clk.h:565 include/linux/clk.h:586
#: include/linux/clk.h:608 include/linux/clk.h:631 include/linux/clk.h:655
#: ../../../core-api/kernel-api:39: include/linux/string.h:28
#: include/linux/string.h:48 include/linux/string.h:143
#: include/linux/string.h:292 include/linux/string.h:544
#: ../../../core-api/kernel-api:428: include/linux/rcuref.h:33
#: include/linux/rcuref.h:51 include/linux/rcuref.h:77
#: include/linux/rcuref.h:137 ../../../core-api/kernel-api:42: mm/util.c:79
#: mm/util.c:96 mm/util.c:116 mm/util.c:131 mm/util.c:189 mm/util.c:214
#: mm/util.c:240 mm/util.c:265 mm/util.c:297 ../../../core-api/kernel-api:60:
#: include/asm-generic/bitops/instrumented-lock.h:72
#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:393
#: include/linux/bitmap.h:667 include/linux/bitmap.h:692
#: include/linux/bitmap.h:762 ../../../core-api/kernel-api:96:
#: include/linux/err.h:36 include/linux/err.h:54 include/linux/err.h:67
#: include/linux/err.h:114
msgid "**Return**"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:319
msgid ""
"The amount of the characters processed to the destination buffer excluding "
"trailing '\\0' is returned."
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:501
msgid "quote characters in the given memory buffer"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:507
msgid "``const char *src``"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:502
msgid "source buffer (unescaped)"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:504
msgid "``size_t isz``"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:503
msgid "source buffer size"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:504
msgid "destination buffer (escaped)"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:506
msgid "``size_t osz``"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:505
msgid "destination buffer size"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:506
msgid "combination of the flags"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:508
msgid "``const char *only``"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:507
msgid ""
"NULL-terminated string containing characters used to limit the selected "
"escape class. If characters are included in **only** that would not normally "
"be escaped by the classes selected in **flags**, they will be copied to "
"**dst** unescaped."
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:512
msgid ""
"The process of escaping byte buffer includes several parts. They are applied "
"in the following sequence."
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:515
msgid ""
"The character is not matched to the one from **only** string and thus must "
"go as-is to the output."
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:517
msgid ""
"The character is matched to the printable and ASCII classes, if asked, and "
"in case of match it passes through to the output."
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:519
msgid ""
"The character is matched to the printable or ASCII class, if asked, and in "
"case of match it passes through to the output."
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:521
msgid ""
"The character is checked if it falls into the class given by **flags**. "
"``ESCAPE_OCTAL`` and ``ESCAPE_HEX`` are going last since they cover any "
"character. Note that they actually can't go together, otherwise "
"``ESCAPE_HEX`` will be ignored."
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:526
msgid ""
"Caller must provide valid source and destination pointers. Be aware that "
"destination buffer will not be NULL-terminated, thus caller have to append "
"it if needs. The supported flags are::"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:560
msgid ""
"``ESCAPE_APPEND`` would help to pass additional characters to the escaped, "
"when one of ``ESCAPE_NP``, ``ESCAPE_NA``, or ``ESCAPE_NAP`` is provided."
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:563
msgid ""
"One notable caveat, the ``ESCAPE_NAP``, ``ESCAPE_NP`` and ``ESCAPE_NA`` have "
"the higher priority than the rest of the flags (``ESCAPE_NAP`` is the "
"highest). It doesn't make much sense to use either of them without "
"``ESCAPE_OCTAL`` or ``ESCAPE_HEX``, because they cover most of the other "
"character classes. ``ESCAPE_NAP`` can utilize ``ESCAPE_SPACE`` or "
"``ESCAPE_SPECIAL`` in addition to the above."
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:571
msgid ""
"The total size of the escaped output that would be generated for the given "
"input and flags. To check whether the output was truncated, compare the "
"return value to osz. There is room left in dst for a '\\0' terminator if and "
"only if ret < osz."
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:751
msgid "allocate and fill array of sequential strings"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:757
#: ../../../core-api/kernel-api:283: security/security.c:678
#: security/security.c:700 security/security.c:749 security/security.c:1727
#: security/security.c:3258 security/security.c:3303 security/security.c:4915
#: security/security.c:5649 ../../../core-api/kernel-api:310:
#: include/linux/bio.h:333 ../../../core-api/kernel-api:42: mm/util.c:78
#: mm/util.c:92 mm/util.c:113 mm/util.c:130 mm/util.c:188
msgid "``gfp_t gfp``"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:752
msgid "flags for the slab allocator"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:754
#: ../../../core-api/kernel-api:39: include/linux/string.h:538
#: include/linux/string.h:559
msgid "``const char *prefix``"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:753
msgid "prefix to be used"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:755
#: lib/string_helpers.c:789 lib/string_helpers.c:910 lib/string_helpers.c:944
#: ../../../core-api/kernel-api:36: lib/string.c:801
#: ../../../core-api/kernel-api:39: include/linux/string.h:26
#: include/linux/string.h:46 include/linux/string.h:291
msgid "``size_t n``"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:754
msgid "amount of lines to be allocated and filled"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:755
msgid ""
"Allocates and fills **n** strings using pattern \"``s-````zu``\", where "
"prefix is provided by caller. The caller is responsible to free them with "
"kfree_strarray() after use."
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:759
msgid "Returns array of strings or NULL when memory can't be allocated."
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:784
msgid ""
"free a number of dynamically allocated strings contained in an array and the "
"array itself"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:790
msgid "``char **array``"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:787
msgid "Dynamically allocated array of strings to free."
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:788
msgid "Number of strings (starting from the beginning of the array) to free."
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:789
msgid ""
"Passing a non-NULL **array** and **n** == 0 as well as NULL **array** are "
"valid use-cases. If **array** is NULL, the function does nothing."
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:840
msgid "Removes leading whitespace from **str**."
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:846
#: lib/string_helpers.c:945 ../../../core-api/kernel-api:39:
#: include/linux/string.h:541 include/linux/string.h:562
#: ../../../core-api/kernel-api:90: lib/cmdline.c:89
msgid "``const char *str``"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:841
#: lib/string_helpers.c:855
msgid "The string to be stripped."
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:842
msgid "Returns a pointer to the first non-whitespace character in **str**."
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:854
msgid "Removes leading and trailing whitespace from **s**."
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:860
msgid "``char *s``"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:856
msgid ""
"Note that the first trailing whitespace is replaced with a ``NUL-"
"terminator`` in the given string **s**. Returns a pointer to the first non-"
"whitespace character in **s**."
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:880
msgid "return true if strings are equal, modulo trailing newline"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:886
#: ../../../core-api/kernel-api:36: lib/string.c:41 lib/string.c:753
#: lib/string.c:778
msgid "``const char *s1``"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:881
msgid "one string"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:883
#: ../../../core-api/kernel-api:36: lib/string.c:38 lib/string.c:750
#: lib/string.c:775
msgid "``const char *s2``"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:882
msgid "another string"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:883
msgid ""
"This routine returns true iff two strings are equal, treating both NUL and "
"newline-then-NUL as equivalent string terminations.  It's geared for use "
"with sysfs input strings, which generally terminate with newlines but are "
"compared against values without newlines."
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:907
#: lib/string_helpers.c:941 ../../../core-api/kernel-api:39:
#: include/linux/string.h:330
msgid "matches given string in an array"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:913
#: lib/string_helpers.c:947
msgid "``const char * const *array``"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:908
#: lib/string_helpers.c:942 ../../../core-api/kernel-api:39:
#: include/linux/string.h:331
msgid "array of strings"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:909
#: lib/string_helpers.c:943
msgid "number of strings in the array or -1 for NULL terminated arrays"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:911
msgid "``const char *string``"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:910
#: lib/string_helpers.c:944 ../../../core-api/kernel-api:39:
#: include/linux/string.h:332
msgid "string to match with"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:911
#: lib/string_helpers.c:948
msgid ""
"This routine will look for a string in an array of strings up to the n-th "
"element in the array or until the first NULL element."
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:914
#: lib/string_helpers.c:951
msgid ""
"Historically the value of -1 for **n**, was used to search in arrays that "
"are NULL terminated. However, the function does not make a distinction when "
"finishing the search: either **n** elements have been compared OR the first "
"NULL element was found."
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:920
msgid ""
"index of a **string** in the **array** if matches, or ``-EINVAL`` otherwise."
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:945
msgid ""
"Returns index of **str** in the **array** or -EINVAL, just like "
"match_string(). Uses sysfs_streq instead of strcmp for matching."
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:975
msgid "Replace all occurrences of character in string."
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:981
msgid "``char *str``"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:976
msgid "The string to operate on."
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:978
msgid "``char old``"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:977
msgid "The character being replaced."
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:979
msgid "``char new``"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:978
msgid "The character **old** is replaced with."
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:979
msgid ""
"Replaces the each **old** character with a **new** one in the given string "
"**str**."
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:982
msgid "pointer to the string **str** itself."
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:996
msgid "Copy one buffer to another with padding"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:1002
#: ../../../core-api/kernel-api:36: lib/string.c:619 lib/string.c:641
msgid "``void *dest``"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:997
#: ../../../core-api/kernel-api:36: lib/string.c:614 lib/string.c:636
msgid "Where to copy to"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:999
msgid "``size_t dest_len``"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:998
msgid "The destination buffer size"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:1000
#: ../../../core-api/kernel-api:36: lib/string.c:616 lib/string.c:638
#: ../../../core-api/kernel-api:42: mm/util.c:131
msgid "``const void *src``"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:999
#: ../../../core-api/kernel-api:36: lib/string.c:615 lib/string.c:637
msgid "Where to copy from"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:1000
msgid "The number of bytes to copy"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:1002
msgid "``int pad``"
msgstr ""

#: ../../../core-api/kernel-api:27: lib/string_helpers.c:1001
msgid "Character to use for padding if space is left in destination."
msgstr ""

#: ../../../core-api/kernel-api.rst:31
msgid "String Manipulation"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:132
msgid "``unsafe_memcpy (dst, src, bytes, justification)``"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:130
msgid "memcpy implementation with no FORTIFY bounds checking"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:136
#: ../../../core-api/kernel-api:39: include/linux/string.h:98
#: include/linux/string.h:135
msgid "``dst``"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:132
msgid "Destination memory address to write to"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:134
#: ../../../core-api/kernel-api:39: include/linux/string.h:95
#: include/linux/string.h:132 include/linux/string.h:397
#: include/linux/string.h:424 include/linux/string.h:448
#: include/linux/string.h:476
msgid "``src``"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:133
msgid "Source memory address to read from"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:135
msgid "``bytes``"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:134
msgid "How many bytes to write to **dst** from **src**"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:136
msgid "``justification``"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:135
msgid "Free-form text or comment describing why the use is needed"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:136
msgid ""
"This should be used for corner cases where the compiler cannot do the right "
"thing, or during transitions between APIs, etc. It should be used very "
"rarely, and includes a place for justification detailing where bounds "
"checking has happened, and why existing solutions cannot be employed."
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:165
msgid "Copy a string to memory with non-guaranteed NUL padding"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:171
#: include/linux/fortify-string.h:341 include/linux/fortify-string.h:404
#: include/linux/fortify-string.h:430 include/linux/fortify-string.h:776
msgid "``char * const p``"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:167
#: include/linux/fortify-string.h:772
msgid "pointer to destination of copy"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:169
#: include/linux/fortify-string.h:402
msgid "``const char *q``"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:168
#: include/linux/fortify-string.h:773
msgid "pointer to NUL-terminated source string to copy"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:170
msgid "``__kernel_size_t size``"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:169
msgid "bytes to write at **p**"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:170
msgid ""
"If strlen(**q**) >= **size**, the copy of **q** will stop after **size** "
"bytes, and **p** will NOT be NUL-terminated"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:173
msgid ""
"If strlen(**q**) < **size**, following the copy of **q**, trailing NUL bytes "
"will be written to **p** until **size** total bytes have been written."
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:176
msgid ""
"Do not use this function. While FORTIFY_SOURCE tries to avoid over-reads of "
"**q**, it cannot defend against writing unterminated results to **p**. Using "
"strncpy() remains ambiguous and fragile. Instead, please choose an "
"alternative, so that the expectation of **p**'s contents is unambiguous:"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:183
msgid "**p** needs to be:"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:183
msgid "padded to **size**"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:183
msgid "not padded"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:185
msgid "NUL-terminated"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:185
msgid "strscpy_pad()"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:185
msgid "strscpy()"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:187
msgid "not NUL-terminated"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:187
msgid "strtomem_pad()"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:187
msgid "strtomem()"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:190
msgid ""
"Note strscpy*()'s differing return values for detecting truncation, and "
"strtomem*()'s expectation that the destination is marked with __nonstring "
"when it is a character array."
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:210
msgid "Return bounded count of characters in a NUL-terminated string"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:216
msgid "``const char * const p``"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:212
#: include/linux/fortify-string.h:247
msgid "pointer to NUL-terminated string to count."
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:214
msgid "``__kernel_size_t maxlen``"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:213
msgid "maximum number of characters to count."
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:214
msgid ""
"Returns number of characters in **p** (NOT including the final NUL), or "
"**maxlen**, if no NUL has been found up to there."
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:247
msgid "``strlen (p)``"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:245
msgid "Return count of characters in a NUL-terminated string"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:419
#: include/linux/overflow.h:436 ../../../core-api/kernel-api:33:
#: include/linux/fortify-string.h:251 ../../../core-api/kernel-api:398:
#: include/linux/rcupdate.h:521 include/linux/rcupdate.h:564
#: include/linux/rcupdate.h:624 include/linux/rcupdate.h:653
#: include/linux/rcupdate.h:690 include/linux/rcupdate.h:706
#: include/linux/rcupdate.h:723 include/linux/rcupdate.h:751
#: include/linux/rcupdate.h:771 include/linux/rcupdate.h:779
#: include/linux/rcupdate.h:787 include/linux/rcupdate.h:795
#: include/linux/rcupdate.h:803 include/linux/rcupdate.h:1012
#: include/linux/rcupdate.h:1056 ../../../core-api/kernel-api:406:
#: include/linux/srcu.h:197 include/linux/srcu.h:213 include/linux/srcu.h:225
msgid "``p``"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:248
msgid ""
"Do not use this function unless the string length is known at compile-time. "
"When **p** is unterminated, this function may crash or return unexpected "
"counts that could lead to memory content exposures. Prefer strnlen()."
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:253
msgid "Returns number of characters in **p** (NOT including the final NUL)."
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:335
#: include/linux/fortify-string.h:398 include/linux/fortify-string.h:424
msgid "Append a string to an existing string"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:337
msgid "pointer to ``NUL-terminated`` string to append to"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:339
#: include/linux/fortify-string.h:428 include/linux/fortify-string.h:774
msgid "``const char * const q``"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:338
msgid "pointer to ``NUL-terminated`` string to append from"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:340
msgid "``size_t avail``"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:339
msgid "Maximum bytes available in **p**"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:340
msgid ""
"Appends ``NUL-terminated`` string **q** after the ``NUL-terminated`` string "
"at **p**, but will not write beyond **avail** bytes total, potentially "
"truncating the copy from **q**. **p** will stay ``NUL-terminated`` only if a "
"``NUL`` already existed within the **avail** bytes of **p**. If so, the "
"resulting number of bytes copied from **q** will be at most \"**avail** - "
"strlen(**p**) - 1\"."
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:347
msgid ""
"Do not use this function. While FORTIFY_SOURCE tries to avoid read and write "
"overflows, this is only possible when the sizes of **p** and **q** are known "
"to the compiler. Prefer building the string with formatting, via "
"scnprintf(), seq_buf, or similar."
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:352
msgid ""
"Returns total bytes that _would_ have been contained by **p** regardless of "
"truncation, similar to snprintf(). If return value is >= **avail**, the "
"string has been truncated."
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:400
#: include/linux/fortify-string.h:426
msgid "pointer to NUL-terminated string to append to"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:401
msgid "pointer to NUL-terminated source string to append from"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:402
msgid ""
"Do not use this function. While FORTIFY_SOURCE tries to avoid read and write "
"overflows, this is only possible when the destination buffer size is known "
"to the compiler. Prefer building the string with formatting, via scnprintf() "
"or similar. At the very least, use strncat()."
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:408
#: include/linux/fortify-string.h:438 include/linux/fortify-string.h:779
msgid "Returns **p**."
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:427
msgid "pointer to source string to append from"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:429
msgid "``__kernel_size_t count``"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:428
msgid "Maximum bytes to read from **q**"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:429
msgid ""
"Appends at most **count** bytes from **q** (stopping at the first NUL byte) "
"after the NUL-terminated string at **p**. **p** will be NUL-terminated."
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:433
msgid ""
"Do not use this function. While FORTIFY_SOURCE tries to avoid read and write "
"overflows, this is only possible when the sizes of **p** and **q** are known "
"to the compiler. Prefer building the string with formatting, via scnprintf() "
"or similar."
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:770
msgid "Copy a string into another string buffer"
msgstr ""

#: ../../../core-api/kernel-api:33: include/linux/fortify-string.h:774
msgid ""
"Do not use this function. While FORTIFY_SOURCE tries to avoid overflows, "
"this is only possible when the sizes of **q** and **p** are known to the "
"compiler. Prefer strscpy(), though note its different return values for "
"detecting truncation."
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:35
msgid "Case insensitive, length-limited string comparison"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:36 lib/string.c:275
#: lib/string.c:298
msgid "One string"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:37
msgid "The other string"
msgstr ""

#: ../../../core-api/kernel-api:136: lib/crc/crc7.c:57
#: ../../../core-api/kernel-api:142: lib/crc/crc16.c:52
#: ../../../core-api/kernel-api:145: lib/crc/crc-ccitt.c:56
#: ../../../core-api/kernel-api:148: lib/crc/crc-itu-t.c:55
#: ../../../core-api/kernel-api:151: include/linux/crc32.h:14
#: include/linux/crc32.h:45 include/linux/crc32.h:67
#: ../../../core-api/kernel-api:153: include/linux/crc64.h:13
#: include/linux/crc64.h:22 ../../../core-api/kernel-api:36: lib/string.c:39
#: lib/string.c:707 lib/string.c:776 ../../../core-api/kernel-api:42:
#: mm/util.c:129 mm/util.c:187 mm/util.c:213 mm/util.c:239 mm/util.c:296
msgid "``size_t len``"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:38
msgid "the maximum number of characters to compare"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:194
msgid ""
"copy a string from src to dest returning a pointer to the new end of dest, "
"including src's ``NUL-terminator``. May overrun dest."
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:200
msgid "``char *__restrict__ dest``"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:196
msgid ""
"pointer to end of string being copied into. Must be large enough to receive "
"copy."
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:199
msgid "``const char *__restrict__ src``"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:198
msgid ""
"pointer to the beginning of string being copied from. Must not overlap dest."
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:200
msgid ""
"stpcpy differs from strcpy in a key way: the return value is a pointer to "
"the new ``NUL-terminating`` character in **dest**. (For strcpy, the return "
"value is a pointer to the start of **dest**). This interface is considered "
"unsafe as it doesn't perform bounds checking of the inputs. As such it's not "
"recommended for usage. Instead, its definition is provided in case the "
"compiler lowers other libcalls to stpcpy."
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:274
msgid "Compare two strings"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:280 lib/string.c:303
#: lib/string.c:485
msgid "``const char *cs``"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:277 lib/string.c:300
#: lib/string.c:482 lib/string.c:501
msgid "``const char *ct``"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:276 lib/string.c:299
msgid "Another string"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:297
msgid "Compare two length-limited strings"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:300
msgid "The maximum number of bytes to compare"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:322
msgid "Find the first occurrence of a character in a string"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:323 lib/string.c:342
#: lib/string.c:377 lib/string.c:395 lib/string.c:442 lib/string.c:461
#: lib/string.c:480 lib/string.c:499 lib/string.c:748 lib/string.c:773
msgid "The string to be searched"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:325 lib/string.c:344
#: lib/string.c:379 lib/string.c:398 lib/string.c:530 lib/string.c:725
#: lib/string.c:800 lib/string.c:833
msgid "``int c``"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:324 lib/string.c:343
#: lib/string.c:378 lib/string.c:397
msgid "The character to search for"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:325 lib/string.c:398
msgid ""
"Note that the ``NUL-terminator`` is considered part of the string, and can "
"be searched for."
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:341
msgid "Find and return a character in a string, or end of string"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:344
msgid ""
"Returns pointer to first occurrence of 'c' in s. If c is not found, then "
"return a pointer to the null byte at the end of s."
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:376
msgid "Find the last occurrence of a character in a string"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:394
msgid "Find a character in a length limited string"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:396
msgid "The number of characters to be searched"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:441
msgid ""
"Calculate the length of the initial substring of **s** which only contain "
"letters in **accept**"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:444
msgid "``const char *accept``"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:443 lib/string.c:749
#: lib/string.c:774
msgid "The string to search for"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:460
msgid ""
"Calculate the length of the initial substring of **s** which does not "
"contain letters in **reject**"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:463
msgid "``const char *reject``"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:462
msgid "The string to avoid"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:479
msgid "Find the first occurrence of a set of characters"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:481 lib/string.c:500
msgid "The characters to search for"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:498
msgid "Split a string into tokens"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:504
msgid "``char **s``"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:501
msgid ""
"strsep() updates **s** to point after the token, ready for the next call."
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:503
msgid ""
"It returns empty tokens, too, behaving exactly like the libc function of "
"that name. In fact, it was stolen from glibc2 and de-fancy-fied. Same "
"semantics, slimmer shape. ;)"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:527
msgid "Fill a region of memory with the given value"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:533
#: ../../../core-api/kernel-api:39: include/linux/string.h:357
msgid "``void *s``"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:528 lib/string.c:548
#: lib/string.c:570 lib/string.c:592 ../../../core-api/kernel-api:39:
#: include/linux/string.h:353
msgid "Pointer to the start of the area."
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:529
msgid "The byte to fill the area with"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:530 lib/string.c:616
#: lib/string.c:638 lib/string.c:670 lib/string.c:725 lib/string.c:800
#: lib/string.c:833 ../../../core-api/kernel-api:39: include/linux/string.h:354
msgid "The size of the area."
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:531
msgid "Do not use memset() to access IO space, use memset_io() instead."
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:547
msgid "Fill a memory area with a uint16_t"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:553
msgid "``uint16_t *s``"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:550
msgid "``uint16_t v``"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:549 lib/string.c:571
#: lib/string.c:593
msgid "The value to fill the area with"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:550 lib/string.c:572
#: lib/string.c:594
msgid "The number of values to store"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:551
msgid ""
"Differs from memset() in that it fills with a uint16_t instead of a byte.  "
"Remember that **count** is the number of uint16_ts to store, not the number "
"of bytes."
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:569
msgid "Fill a memory area with a uint32_t"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:575
msgid "``uint32_t *s``"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:572
msgid "``uint32_t v``"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:573
msgid ""
"Differs from memset() in that it fills with a uint32_t instead of a byte.  "
"Remember that **count** is the number of uint32_ts to store, not the number "
"of bytes."
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:591
msgid "Fill a memory area with a uint64_t"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:597
msgid "``uint64_t *s``"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:594
msgid "``uint64_t v``"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:595
msgid ""
"Differs from memset() in that it fills with a uint64_t instead of a byte.  "
"Remember that **count** is the number of uint64_ts to store, not the number "
"of bytes."
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:613 lib/string.c:635
msgid "Copy one area of memory to another"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:617
msgid ""
"You should not use this function to access IO space, use memcpy_toio() or "
"memcpy_fromio() instead."
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:639
msgid "Unlike memcpy(), memmove() copes with overlapping areas."
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:667
msgid "Compare two areas of memory"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:673
msgid "``const void *cs``"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:668
msgid "One area of memory"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:670
msgid "``const void *ct``"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:669
msgid "Another area of memory"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:703
msgid "returns 0 if and only if the buffers have identical contents."
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:709
msgid "``const void *a``"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:704
msgid "pointer to first buffer."
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:706
msgid "``const void *b``"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:705
msgid "pointer to second buffer."
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:706
msgid "size of buffers."
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:707
msgid ""
"The sign or magnitude of a non-zero return value has no particular meaning, "
"and architectures may implement their own more efficient bcmp(). So while "
"this particular implementation is a simple (tail) call to memcmp, do not "
"rely on anything but whether the return value is zero or non-zero."
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:722 lib/string.c:797
msgid "Find a character in an area of memory."
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:728
msgid "``void *addr``"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:723 lib/string.c:798
#: lib/string.c:831 ../../../core-api/kernel-api:39: include/linux/string.h:289
msgid "The memory area"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:724 lib/string.c:799
msgid "The byte to search for"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:726
msgid ""
"returns the address of the first occurrence of **c**, or 1 byte past the "
"area if **c** is not found"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:747
msgid "Find the first substring in a ``NUL`` terminated string"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:772
msgid "Find the first substring in a length-limited string"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:775
msgid "the maximum number of characters to search"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:803
#: ../../../core-api/kernel-api:39: include/linux/string.h:294
msgid "``const void *s``"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:801
msgid ""
"returns the address of the first occurrence of **c**, or ``NULL`` if **c** "
"is not found"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:830
msgid "Find an unmatching character in an area of memory."
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:836
msgid "``const void *start``"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:832
msgid "Find a character other than c"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:834
msgid "``size_t bytes``"
msgstr ""

#: ../../../core-api/kernel-api:36: lib/string.c:834
msgid ""
"returns the address of the first character other than **c**, or ``NULL`` if "
"the whole buffer contains just **c**."
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:23
#: include/linux/string.h:43
msgid "duplicate array from user space"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:29
#: include/linux/string.h:49 ../../../core-api/kernel-api:42: mm/util.c:215
#: mm/util.c:241 mm/util.c:298
msgid "``const void __user *src``"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:24
#: include/linux/string.h:44 ../../../core-api/kernel-api:42: mm/util.c:211
#: mm/util.c:237 mm/util.c:294
msgid "source address in user space"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:25
#: include/linux/string.h:45
msgid "number of array members to copy"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:26
#: include/linux/string.h:46
msgid "size of one array member"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:28
msgid ""
"an ERR_PTR() on failure. Result is physically contiguous, to be freed by "
"kfree()."
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:48
msgid ""
"an ERR_PTR() on failure. Result may be not physically contiguous. Use "
"kvfree() to free."
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:94
msgid "``strscpy (dst, src, ...)``"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:92
#: include/linux/string.h:129
msgid "Copy a C-string into a sized buffer"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:93
#: include/linux/string.h:130
msgid "Where to copy the string to"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:94
#: include/linux/string.h:131
msgid "Where to copy the string from"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:95
msgid "Size of destination buffer (optional)"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:96
msgid ""
"Copy the source string **src**, or as much of it as fits, into the "
"destination **dst** buffer. The behavior is undefined if the string buffers "
"overlap. The destination **dst** buffer is always NUL terminated, unless "
"it's zero-sized."
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:101
msgid ""
"The size argument **...** is only required when **dst** is not an array, or "
"when the copy needs to be smaller than sizeof(**dst**)."
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:104
msgid ""
"Preferred to strncpy() since it always returns a valid string, and doesn't "
"unnecessarily force the tail of the destination buffer to be zero padded. If "
"padding is desired please use strscpy_pad()."
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:108
msgid ""
"Returns the number of characters copied in **dst** (not including the "
"trailing ``NUL``) or -E2BIG if **size** is 0 or the copy from **src** was "
"truncated."
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:131
msgid "``strscpy_pad (dst, src, ...)``"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:132
msgid "Size of destination buffer"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:133
msgid ""
"Copy the string, or as much of it as fits, into the dest buffer. The "
"behavior is undefined if the string buffers overlap. The destination buffer "
"is always ``NUL`` terminated, unless it's zero-sized."
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:137
msgid ""
"If the source string is shorter than the destination buffer, the remaining "
"bytes in the buffer will be filled with ``NUL`` bytes."
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:140
msgid ""
"For full explanation of why you may want to consider using the 'strscpy' "
"functions please see the function docstring for strscpy()."
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:144
msgid "The number of characters copied (not including the trailing ``NULs``)"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:145
msgid "-E2BIG if count is 0 or **src** was truncated."
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:288
msgid "Check if an area of memory is all 0's."
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:290
msgid "The size of the area"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:292
msgid "True if the area of memory is all 0's."
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:332
msgid "``sysfs_match_string (_a, _s)``"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:336
msgid "``_a``"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:333
msgid "``_s``"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:333
msgid ""
"Helper for __sysfs_match_string(). Calculates the size of **a** "
"automatically."
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:351
msgid "Fill a region of memory (e.g. sensitive keying data) with 0s."
msgstr ""

#: ../../../core-api/kernel-api:114: lib/textsearch.c:255
#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:146
#: include/linux/kfifo.h:210 include/linux/kfifo.h:224
#: ../../../core-api/kernel-api:268: kernel/resource.c:1441
#: kernel/resource.c:1562 ../../../core-api/kernel-api:311:
#: block/blk-core.c:933 ../../../core-api/kernel-api:320: block/blk-sysfs.c:983
#: ../../../core-api/kernel-api:341: block/genhd.c:1535
#: ../../../core-api/kernel-api:389: include/linux/clk.h:757
#: include/linux/clk.h:770 include/linux/clk.h:783 include/linux/clk.h:796
#: ../../../core-api/kernel-api:39: include/linux/string.h:356
#: ../../../core-api/kernel-api:410: include/linux/rculist_bl.h:31
#: ../../../core-api/kernel-api:412: include/linux/rculist.h:59
#: include/linux/rculist.h:156 include/linux/rculist.h:188
#: include/linux/rculist.h:219 include/linux/rculist.h:251
#: include/linux/rculist.h:553 ../../../core-api/kernel-api:414:
#: include/linux/rculist_nulls.h:17 include/linux/rculist_nulls.h:59
#: ../../../core-api/kernel-api:42: mm/util.c:93 mm/util.c:114
msgid "**Note**"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:356
msgid ""
"usually using memset() is just fine (!), but in cases where clearing out "
"_local_ data at the end of a scope is necessary, memzero_explicit() should "
"be used instead in order to prevent the compiler from optimising away "
"zeroing."
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:361
msgid ""
"memzero_explicit() doesn't need an arch-specific version as it just invokes "
"the one of memset() implicitly."
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:371
msgid "return the last part of a pathname."
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:138
#: ../../../core-api/kernel-api:298: kernel/auditfilter.c:1281
#: kernel/auditfilter.c:1309 ../../../core-api/kernel-api:39:
#: include/linux/string.h:377
msgid "``const char *path``"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:373
msgid "path to extract the filename from."
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:395
msgid "``strtomem_pad (dest, src, pad)``"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:393
#: include/linux/string.h:420
msgid "Copy NUL-terminated string to non-NUL-terminated buffer"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:399
#: include/linux/string.h:426 include/linux/string.h:451
#: include/linux/string.h:478
msgid "``dest``"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:395
#: include/linux/string.h:422
msgid "Pointer of destination character array (marked as __nonstring)"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:396
#: include/linux/string.h:423
msgid "Pointer to NUL-terminated string"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:398
msgid "``pad``"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:397
msgid "Padding character to fill any remaining bytes of **dest** after copy"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:398
msgid ""
"This is a replacement for strncpy() uses where the destination is not a NUL-"
"terminated string, but with bounds checking on the source size, and an "
"explicit padding character. If padding is not required, use strtomem()."
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:402
#: include/linux/string.h:428
msgid ""
"Note that the size of **dest** is not an argument, as the length of **dest** "
"must be discoverable by the compiler."
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:422
msgid "``strtomem (dest, src)``"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:424
msgid ""
"This is a replacement for strncpy() uses where the destination is not a NUL-"
"terminated string, but with bounds checking on the source size, and without "
"trailing padding. If padding is required, use strtomem_pad()."
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:447
msgid "``memtostr (dest, src)``"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:445
msgid "Copy a possibly non-NUL-term string to a NUL-term string"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:446
#: include/linux/string.h:474
msgid "Pointer to destination NUL-terminates string"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:447
#: include/linux/string.h:475
msgid "Pointer to character array (likely marked as __nonstring)"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:448
#: include/linux/string.h:476
msgid ""
"This is a replacement for strncpy() uses where the source is not a NUL-"
"terminated string."
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:451
#: include/linux/string.h:479
msgid "Note that sizes of **dest** and **src** must be known at compile-time."
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:474
msgid "``memtostr_pad (dest, src)``"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:472
msgid ""
"Copy a possibly non-NUL-term string to a NUL-term string with NUL padding in "
"the destination"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:502
msgid "``memset_after (obj, v, member)``"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:500
msgid "Set a value after a struct member to the end of a struct"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:506
#: include/linux/string.h:523
msgid "``obj``"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:502
#: include/linux/string.h:519
msgid "Address of target struct instance"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:558
#: include/linux/rcupdate.h:561 include/linux/rcupdate.h:1009
#: include/linux/rcupdate.h:1053 ../../../core-api/kernel-api:39:
#: include/linux/string.h:504 include/linux/string.h:521
msgid "``v``"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:503
#: include/linux/string.h:520
msgid "Byte value to repeatedly write"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:417
#: include/linux/overflow.h:433 include/linux/overflow.h:449
#: include/linux/overflow.h:468 include/linux/overflow.h:487
#: include/linux/overflow.h:500 ../../../core-api/kernel-api:39:
#: include/linux/string.h:505 include/linux/string.h:522
#: ../../../core-api/kernel-api:410: include/linux/rculist_bl.h:93
#: ../../../core-api/kernel-api:412: include/linux/rculist.h:359
#: include/linux/rculist.h:401 include/linux/rculist.h:420
#: include/linux/rculist.h:440 include/linux/rculist.h:457
#: include/linux/rculist.h:476 include/linux/rculist.h:492
#: include/linux/rculist.h:510 include/linux/rculist.h:533
#: include/linux/rculist.h:757 include/linux/rculist.h:776
#: include/linux/rculist.h:797 include/linux/rculist.h:817
#: include/linux/rculist.h:833 include/linux/rculist.h:845
#: include/linux/rculist.h:857 ../../../core-api/kernel-api:414:
#: include/linux/rculist_nulls.h:161 include/linux/rculist_nulls.h:181
msgid "``member``"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:504
msgid "after which struct member to start writing bytes"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:505
msgid "This is good for clearing padding following the given member."
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:519
msgid "``memset_startat (obj, v, member)``"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:517
msgid "Set a value starting at a member to the end of a struct"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:521
msgid "struct member to start writing at"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:522
msgid ""
"Note that if there is padding between the prior member and the target "
"member, memset_after() should be used to clear the prior padding."
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:535
msgid "Test if a string has a given prefix"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:536
msgid "The string to test"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:537
msgid "The string to see if **str** starts with"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:538
msgid "A common way to test a prefix of a string is to do:"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:539
msgid "strncmp(str, prefix, sizeof(prefix) - 1)"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:541
msgid ""
"But this can lead to bugs due to typos, or if prefix is a pointer and not a "
"constant. Instead use str_has_prefix()."
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:545
msgid "strlen(**prefix**) if **str** starts with **prefix**"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:546
msgid "0 if **str** does not start with **prefix**"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:556
msgid "does **str** start with **prefix**?"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:557
msgid "string to examine"
msgstr ""

#: ../../../core-api/kernel-api:39: include/linux/string.h:558
msgid "prefix to look for."
msgstr ""

#: ../../../core-api/kernel-api:42: mm/util.c:75 mm/util.c:109
msgid "allocate space for and copy an existing string"
msgstr ""

#: ../../../core-api/kernel-api:42: mm/util.c:76 mm/util.c:90 mm/util.c:110
msgid "the string to duplicate"
msgstr ""

#: ../../../core-api/kernel-api:42: mm/util.c:77 mm/util.c:91 mm/util.c:112
#: mm/util.c:187
msgid "the GFP mask used in the kmalloc() call when allocating memory"
msgstr ""

#: ../../../core-api/kernel-api:42: mm/util.c:79 mm/util.c:116
msgid "newly allocated copy of **s** or ``NULL`` in case of error"
msgstr ""

#: ../../../core-api/kernel-api:42: mm/util.c:89
msgid "conditionally duplicate an existing const string"
msgstr ""

#: ../../../core-api/kernel-api:42: mm/util.c:93
msgid ""
"Strings allocated by kstrdup_const should be freed by kfree_const and must "
"not be passed to krealloc()."
msgstr ""

#: ../../../core-api/kernel-api:42: mm/util.c:96
msgid ""
"source string if it is in .rodata section otherwise fallback to kstrdup."
msgstr ""

#: ../../../core-api/kernel-api:42: mm/util.c:112
msgid "``size_t max``"
msgstr ""

#: ../../../core-api/kernel-api:42: mm/util.c:111
msgid "read at most **max** chars from **s**"
msgstr ""

#: ../../../core-api/kernel-api:42: mm/util.c:114
msgid "Use kmemdup_nul() instead if the size is known exactly."
msgstr ""

#: ../../../core-api/kernel-api:42: mm/util.c:125
msgid "duplicate region of memory"
msgstr ""

#: ../../../core-api/kernel-api:42: mm/util.c:127
msgid "memory region to duplicate"
msgstr ""

#: ../../../core-api/kernel-api:42: mm/util.c:128
msgid "memory region length"
msgstr ""

#: ../../../core-api/kernel-api:42: mm/util.c:129
msgid "GFP mask to use"
msgstr ""

#: ../../../core-api/kernel-api:42: mm/util.c:131
msgid ""
"newly allocated copy of **src** or ``NULL`` in case of error, result is "
"physically contiguous. Use kfree() to free."
msgstr ""

#: ../../../core-api/kernel-api:42: mm/util.c:184
msgid "Create a NUL-terminated string from unterminated data"
msgstr ""

#: ../../../core-api/kernel-api:42: mm/util.c:185
msgid "The data to stringify"
msgstr ""

#: ../../../core-api/kernel-api:42: mm/util.c:186
msgid "The size of the data"
msgstr ""

#: ../../../core-api/kernel-api:42: mm/util.c:189
msgid ""
"newly allocated copy of **s** with NUL-termination or ``NULL`` in case of "
"error"
msgstr ""

#: ../../../core-api/kernel-api:42: mm/util.c:209 mm/util.c:235
msgid "duplicate memory region from user space"
msgstr ""

#: ../../../core-api/kernel-api:42: mm/util.c:212 mm/util.c:238 mm/util.c:295
msgid "number of bytes to copy"
msgstr ""

#: ../../../core-api/kernel-api:42: mm/util.c:214
msgid ""
"an ERR_PTR() on failure.  Result is physically contiguous, to be freed by "
"kfree()."
msgstr ""

#: ../../../core-api/kernel-api:42: mm/util.c:240
msgid ""
"an ERR_PTR() on failure.  Result may be not physically contiguous.  Use "
"kvfree() to free."
msgstr ""

#: ../../../core-api/kernel-api:42: mm/util.c:261
msgid "duplicate an existing string from user space"
msgstr ""

#: ../../../core-api/kernel-api:42: mm/util.c:267
msgid "``const char __user *s``"
msgstr ""

#: ../../../core-api/kernel-api:42: mm/util.c:262
msgid "The string to duplicate"
msgstr ""

#: ../../../core-api/kernel-api:42: mm/util.c:264
msgid "``long n``"
msgstr ""

#: ../../../core-api/kernel-api:42: mm/util.c:263
msgid "Maximum number of bytes to copy, including the trailing NUL."
msgstr ""

#: ../../../core-api/kernel-api:42: mm/util.c:265
msgid "newly allocated copy of **s** or an ERR_PTR() in case of error"
msgstr ""

#: ../../../core-api/kernel-api:42: mm/util.c:292
msgid "duplicate memory region from user space and NUL-terminate"
msgstr ""

#: ../../../core-api/kernel-api:42: mm/util.c:297
msgid "an ERR_PTR() on failure."
msgstr ""

#: ../../../core-api/kernel-api.rst:47
msgid "Basic Kernel Library Functions"
msgstr ""

#: ../../../core-api/kernel-api.rst:49
msgid "The Linux kernel provides more basic utility functions."
msgstr ""

#: ../../../core-api/kernel-api.rst:52
msgid "Bit Operations"
msgstr ""

#: ../../../core-api/kernel-api:54:
#: include/asm-generic/bitops/instrumented-atomic.h:17
msgid "Atomically set a bit in memory"
msgstr ""

#: ../../../core-api/kernel-api:54:
#: include/asm-generic/bitops/instrumented-atomic.h:23
#: include/asm-generic/bitops/instrumented-atomic.h:39
#: include/asm-generic/bitops/instrumented-atomic.h:52
#: include/asm-generic/bitops/instrumented-atomic.h:68
#: include/asm-generic/bitops/instrumented-atomic.h:82
#: include/asm-generic/bitops/instrumented-atomic.h:96
#: ../../../core-api/kernel-api:60:
#: include/asm-generic/bitops/instrumented-lock.h:23
#: include/asm-generic/bitops/instrumented-lock.h:37
#: include/asm-generic/bitops/instrumented-lock.h:53
msgid "``long nr``"
msgstr ""

#: ../../../core-api/kernel-api:54:
#: include/asm-generic/bitops/instrumented-atomic.h:18
#: ../../../core-api/kernel-api:57:
#: include/asm-generic/bitops/instrumented-non-atomic.h:18
#: ../../../core-api/kernel-api:60:
#: include/asm-generic/bitops/instrumented-lock.h:18
msgid "the bit to set"
msgstr ""

#: ../../../core-api/kernel-api:54:
#: include/asm-generic/bitops/instrumented-atomic.h:20
#: include/asm-generic/bitops/instrumented-atomic.h:36
#: include/asm-generic/bitops/instrumented-atomic.h:49
#: include/asm-generic/bitops/instrumented-atomic.h:65
#: include/asm-generic/bitops/instrumented-atomic.h:79
#: include/asm-generic/bitops/instrumented-atomic.h:93
#: ../../../core-api/kernel-api:57:
#: include/asm-generic/bitops/instrumented-non-atomic.h:20
#: include/asm-generic/bitops/instrumented-non-atomic.h:36
#: include/asm-generic/bitops/instrumented-non-atomic.h:52
#: include/asm-generic/bitops/instrumented-non-atomic.h:92
#: include/asm-generic/bitops/instrumented-non-atomic.h:107
#: include/asm-generic/bitops/instrumented-non-atomic.h:122
#: ../../../core-api/kernel-api:60:
#: include/asm-generic/bitops/instrumented-lock.h:20
#: include/asm-generic/bitops/instrumented-lock.h:34
#: include/asm-generic/bitops/instrumented-lock.h:50
#: include/asm-generic/bitops/instrumented-lock.h:66
msgid "``volatile unsigned long *addr``"
msgstr ""

#: ../../../core-api/kernel-api:54:
#: include/asm-generic/bitops/instrumented-atomic.h:19
#: ../../../core-api/kernel-api:57:
#: include/asm-generic/bitops/instrumented-non-atomic.h:19
#: include/asm-generic/bitops/instrumented-non-atomic.h:35
#: include/asm-generic/bitops/instrumented-non-atomic.h:51
#: ../../../core-api/kernel-api:60:
#: include/asm-generic/bitops/instrumented-lock.h:19
msgid "the address to start counting from"
msgstr ""

#: ../../../core-api/kernel-api:54:
#: include/asm-generic/bitops/instrumented-atomic.h:20
#: include/asm-generic/bitops/instrumented-atomic.h:36
#: include/asm-generic/bitops/instrumented-atomic.h:49
msgid "This is a relaxed atomic operation (no implied memory barriers)."
msgstr ""

#: ../../../core-api/kernel-api:54:
#: include/asm-generic/bitops/instrumented-atomic.h:22
#: include/asm-generic/bitops/instrumented-atomic.h:51
msgid ""
"Note that **nr** may be almost arbitrarily large; this function is not "
"restricted to acting on a single-word quantity."
msgstr ""

#: ../../../core-api/kernel-api:54:
#: include/asm-generic/bitops/instrumented-atomic.h:33
#: ../../../core-api/kernel-api:57:
#: include/asm-generic/bitops/instrumented-non-atomic.h:33
#: ../../../core-api/kernel-api:60:
#: include/asm-generic/bitops/instrumented-lock.h:31
msgid "Clears a bit in memory"
msgstr ""

#: ../../../core-api/kernel-api:54:
#: include/asm-generic/bitops/instrumented-atomic.h:34
#: include/asm-generic/bitops/instrumented-atomic.h:77
#: ../../../core-api/kernel-api:57:
#: include/asm-generic/bitops/instrumented-non-atomic.h:105
#: ../../../core-api/kernel-api:60:
#: include/asm-generic/bitops/instrumented-lock.h:32
msgid "Bit to clear"
msgstr ""

#: ../../../core-api/kernel-api:54:
#: include/asm-generic/bitops/instrumented-atomic.h:35
#: include/asm-generic/bitops/instrumented-atomic.h:48
#: ../../../core-api/kernel-api:57:
#: include/asm-generic/bitops/instrumented-non-atomic.h:136
#: include/asm-generic/bitops/instrumented-non-atomic.h:148
#: ../../../core-api/kernel-api:60:
#: include/asm-generic/bitops/instrumented-lock.h:33
msgid "Address to start counting from"
msgstr ""

#: ../../../core-api/kernel-api:54:
#: include/asm-generic/bitops/instrumented-atomic.h:46
#: ../../../core-api/kernel-api:57:
#: include/asm-generic/bitops/instrumented-non-atomic.h:49
msgid "Toggle a bit in memory"
msgstr ""

#: ../../../core-api/kernel-api:54:
#: include/asm-generic/bitops/instrumented-atomic.h:47
#: include/asm-generic/bitops/instrumented-atomic.h:91
#: ../../../core-api/kernel-api:57:
#: include/asm-generic/bitops/instrumented-non-atomic.h:120
msgid "Bit to change"
msgstr ""

#: ../../../core-api/kernel-api:54:
#: include/asm-generic/bitops/instrumented-atomic.h:62
#: ../../../core-api/kernel-api:57:
#: include/asm-generic/bitops/instrumented-non-atomic.h:89
msgid "Set a bit and return its old value"
msgstr ""

#: ../../../core-api/kernel-api:54:
#: include/asm-generic/bitops/instrumented-atomic.h:63
#: ../../../core-api/kernel-api:57:
#: include/asm-generic/bitops/instrumented-non-atomic.h:90
#: ../../../core-api/kernel-api:60:
#: include/asm-generic/bitops/instrumented-lock.h:48
msgid "Bit to set"
msgstr ""

#: ../../../core-api/kernel-api:54:
#: include/asm-generic/bitops/instrumented-atomic.h:64
#: include/asm-generic/bitops/instrumented-atomic.h:78
#: include/asm-generic/bitops/instrumented-atomic.h:92
#: ../../../core-api/kernel-api:57:
#: include/asm-generic/bitops/instrumented-non-atomic.h:91
#: include/asm-generic/bitops/instrumented-non-atomic.h:106
#: include/asm-generic/bitops/instrumented-non-atomic.h:121
#: ../../../core-api/kernel-api:60:
#: include/asm-generic/bitops/instrumented-lock.h:49
msgid "Address to count from"
msgstr ""

#: ../../../core-api/kernel-api:54:
#: include/asm-generic/bitops/instrumented-atomic.h:65
#: include/asm-generic/bitops/instrumented-atomic.h:79
#: include/asm-generic/bitops/instrumented-atomic.h:93
msgid ""
"This is an atomic fully-ordered operation (implied full memory barrier)."
msgstr ""

#: ../../../core-api/kernel-api:54:
#: include/asm-generic/bitops/instrumented-atomic.h:76
#: ../../../core-api/kernel-api:57:
#: include/asm-generic/bitops/instrumented-non-atomic.h:104
msgid "Clear a bit and return its old value"
msgstr ""

#: ../../../core-api/kernel-api:54:
#: include/asm-generic/bitops/instrumented-atomic.h:90
#: ../../../core-api/kernel-api:57:
#: include/asm-generic/bitops/instrumented-non-atomic.h:119
msgid "Change a bit and return its old value"
msgstr ""

#: ../../../core-api/kernel-api:57:
#: include/asm-generic/bitops/instrumented-non-atomic.h:17
msgid "Set a bit in memory"
msgstr ""

#: ../../../core-api/kernel-api:57:
#: include/asm-generic/bitops/instrumented-non-atomic.h:23
#: include/asm-generic/bitops/instrumented-non-atomic.h:39
#: include/asm-generic/bitops/instrumented-non-atomic.h:55
#: include/asm-generic/bitops/instrumented-non-atomic.h:95
#: include/asm-generic/bitops/instrumented-non-atomic.h:110
#: include/asm-generic/bitops/instrumented-non-atomic.h:125
#: include/asm-generic/bitops/instrumented-non-atomic.h:140
#: include/asm-generic/bitops/instrumented-non-atomic.h:152
msgid "``unsigned long nr``"
msgstr ""

#: ../../../core-api/kernel-api:57:
#: include/asm-generic/bitops/instrumented-non-atomic.h:20
msgid ""
"Unlike set_bit(), this function is non-atomic. If it is called on the same "
"region of memory concurrently, the effect may be that only one operation "
"succeeds."
msgstr ""

#: ../../../core-api/kernel-api:57:
#: include/asm-generic/bitops/instrumented-non-atomic.h:34
msgid "the bit to clear"
msgstr ""

#: ../../../core-api/kernel-api:57:
#: include/asm-generic/bitops/instrumented-non-atomic.h:36
msgid ""
"Unlike clear_bit(), this function is non-atomic. If it is called on the same "
"region of memory concurrently, the effect may be that only one operation "
"succeeds."
msgstr ""

#: ../../../core-api/kernel-api:57:
#: include/asm-generic/bitops/instrumented-non-atomic.h:50
msgid "the bit to change"
msgstr ""

#: ../../../core-api/kernel-api:57:
#: include/asm-generic/bitops/instrumented-non-atomic.h:52
msgid ""
"Unlike change_bit(), this function is non-atomic. If it is called on the "
"same region of memory concurrently, the effect may be that only one "
"operation succeeds."
msgstr ""

#: ../../../core-api/kernel-api:57:
#: include/asm-generic/bitops/instrumented-non-atomic.h:92
#: include/asm-generic/bitops/instrumented-non-atomic.h:107
#: include/asm-generic/bitops/instrumented-non-atomic.h:122
msgid ""
"This operation is non-atomic. If two instances of this operation race, one "
"can appear to succeed but actually fail."
msgstr ""

#: ../../../core-api/kernel-api:57:
#: include/asm-generic/bitops/instrumented-non-atomic.h:134
msgid "Determine whether a bit is set"
msgstr ""

#: ../../../core-api/kernel-api:57:
#: include/asm-generic/bitops/instrumented-non-atomic.h:135
#: include/asm-generic/bitops/instrumented-non-atomic.h:147
msgid "bit number to test"
msgstr ""

#: ../../../core-api/kernel-api:57:
#: include/asm-generic/bitops/instrumented-non-atomic.h:137
#: include/asm-generic/bitops/instrumented-non-atomic.h:149
msgid "``const volatile unsigned long *addr``"
msgstr ""

#: ../../../core-api/kernel-api:57:
#: include/asm-generic/bitops/instrumented-non-atomic.h:146
msgid "Determine, with acquire semantics, whether a bit is set"
msgstr ""

#: ../../../core-api/kernel-api:60:
#: include/asm-generic/bitops/instrumented-lock.h:17
msgid "Clear a bit in memory, for unlock"
msgstr ""

#: ../../../core-api/kernel-api:60:
#: include/asm-generic/bitops/instrumented-lock.h:20
msgid "This operation is atomic and provides release barrier semantics."
msgstr ""

#: ../../../core-api/kernel-api:60:
#: include/asm-generic/bitops/instrumented-lock.h:34
msgid ""
"This is a non-atomic operation but implies a release barrier before the "
"memory operation. It can be used for an unlock if no other CPUs can "
"concurrently modify other bits in the word."
msgstr ""

#: ../../../core-api/kernel-api:60:
#: include/asm-generic/bitops/instrumented-lock.h:47
msgid "Set a bit and return its old value, for lock"
msgstr ""

#: ../../../core-api/kernel-api:60:
#: include/asm-generic/bitops/instrumented-lock.h:50
msgid ""
"This operation is atomic and provides acquire barrier semantics if the "
"returned value is 0. It can be used to implement bit locks."
msgstr ""

#: ../../../core-api/kernel-api:60:
#: include/asm-generic/bitops/instrumented-lock.h:62
msgid "XOR a single byte in memory and test if it is negative, for unlock."
msgstr ""

#: ../../../core-api/kernel-api:60:
#: include/asm-generic/bitops/instrumented-lock.h:68
msgid "``unsigned long mask``"
msgstr ""

#: ../../../core-api/kernel-api:60:
#: include/asm-generic/bitops/instrumented-lock.h:64
msgid "Change the bits which are set in this mask."
msgstr ""

#: ../../../core-api/kernel-api:60:
#: include/asm-generic/bitops/instrumented-lock.h:65
msgid "The address of the word containing the byte to change."
msgstr ""

#: ../../../core-api/kernel-api:60:
#: include/asm-generic/bitops/instrumented-lock.h:66
msgid ""
"Changes some of bits 0-6 in the word pointed to by **addr**. This operation "
"is atomic and provides release barrier semantics. Used to optimise some "
"folio operations which are commonly paired with an unlock or end of "
"writeback.  Bit 7 is used as PG_waiters to indicate whether anybody is "
"waiting for the unlock."
msgstr ""

#: ../../../core-api/kernel-api:60:
#: include/asm-generic/bitops/instrumented-lock.h:73
msgid "Whether the top bit of the byte is set."
msgstr ""

#: ../../../core-api/kernel-api.rst:64
msgid "Bitmap Operations"
msgstr ""

#: ../../../core-api/kernel-api:66: lib/bitmap.c:15
msgid ""
"bitmaps provide an array of bits, implemented using an array of unsigned "
"longs.  The number of valid bits in a given bitmap does _not_ need to be an "
"exact multiple of BITS_PER_LONG."
msgstr ""

#: ../../../core-api/kernel-api:66: lib/bitmap.c:20
msgid ""
"The possible unused bits in the last, partially used word of a bitmap are "
"'don't care'.  The implementation makes no particular effort to keep them "
"zero.  It ensures that their value will not affect the results of any "
"operation. The bitmap operations that return Boolean (bitmap_empty, for "
"example) or scalar (bitmap_weight, for example) results carefully filter out "
"these unused bits from impacting their results."
msgstr ""

#: ../../../core-api/kernel-api:66: lib/bitmap.c:29
msgid ""
"The byte ordering of bitmaps is more natural on little endian "
"architectures.  See the big-endian headers include/asm-ppc64/bitops.h and "
"include/asm-s390/bitops.h for the best explanations of this ordering."
msgstr ""

#: ../../../core-api/kernel-api:69: include/linux/bitmap.h:122
msgid ""
"The DECLARE_BITMAP(name,bits) macro, in linux/types.h, can be used to "
"declare an array named 'name' of just enough unsigned longs to contain all "
"bit positions from 0 to 'bits' - 1."
msgstr ""

#: ../../../core-api/kernel-api:72: include/linux/bitmap.h:33
msgid ""
"The available bitmap operations and their rough meaning in the case that the "
"bitmap is a single unsigned long are thus:"
msgstr ""

#: ../../../core-api/kernel-api:72: include/linux/bitmap.h:36
msgid ""
"The generated code is more efficient when nbits is known at compile-time and "
"at most BITS_PER_LONG."
msgstr ""

#: ../../../core-api/kernel-api:72: include/linux/bitmap.h:89
msgid ""
"Note, bitmap_zero() and bitmap_fill() operate over the region of unsigned "
"longs, that is, bits behind bitmap till the unsigned long boundary will be "
"zeroed or filled as well. Consider to use bitmap_clear() or bitmap_set() to "
"make explicit zeroing or filling respectively."
msgstr ""

#: ../../../core-api/kernel-api:75: include/linux/bitmap.h:99
msgid "Also the following operations in asm/bitops.h apply to bitmaps.::"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:82
msgid "logical right shift of the bits in a bitmap"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:88 lib/bitmap.c:132
#: lib/bitmap.c:169 lib/bitmap.c:472 ../../../core-api/kernel-api:81:
#: lib/bitmap.c:565 lib/bitmap.c:699 ../../../core-api/kernel-api:84:
#: include/linux/bitmap.h:539 include/linux/bitmap.h:587
#: include/linux/bitmap.h:748
msgid "``unsigned long *dst``"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:83 lib/bitmap.c:127
#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:744
msgid "destination bitmap"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:85 lib/bitmap.c:129
#: lib/bitmap.c:166 lib/bitmap.c:469 ../../../core-api/kernel-api:84:
#: include/linux/bitmap.h:536 include/linux/bitmap.h:584
msgid "``const unsigned long *src``"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:84 lib/bitmap.c:128
#: lib/bitmap.c:165 ../../../core-api/kernel-api:84: include/linux/bitmap.h:743
msgid "source bitmap"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:86
msgid "``unsigned shift``"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:85 lib/bitmap.c:129
msgid "shift by this many bits"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:87
msgid "``unsigned nbits``"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:86 lib/bitmap.c:130
#: lib/bitmap.c:168
msgid "bitmap size, in bits"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:87
msgid ""
"Shifting right (dividing) means moving bits in the MS -> LS bit direction.  "
"Zeros are fed into the vacated MS positions and the LS bits shifted off the "
"bottom are lost."
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:126
msgid "logical left shift of the bits in a bitmap"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:130
msgid "``unsigned int shift``"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:131 lib/bitmap.c:169
#: lib/bitmap.c:472 lib/bitmap.c:787 lib/bitmap.c:810 lib/bitmap.c:835
#: lib/bitmap.c:865 ../../../core-api/kernel-api:81: lib/bitmap.c:444
#: lib/bitmap.c:698 ../../../core-api/kernel-api:84: include/linux/bitmap.h:392
#: include/linux/bitmap.h:538 include/linux/bitmap.h:586
msgid "``unsigned int nbits``"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:131
msgid ""
"Shifting left (multiplying) means moving bits in the LS -> MS direction.  "
"Zeros are fed into the vacated LS bit positions and those MS bits shifted "
"off the top are lost."
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:163
msgid "remove bit region from bitmap and right shift remaining bits"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:164
msgid "destination bitmap, might overlap with src"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:167
msgid "``unsigned int first``"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:166
msgid "start bit of region to be removed"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:168
msgid "``unsigned int cut``"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:167
msgid "number of bits to remove"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:169
msgid ""
"Set the n-th bit of **dst** iff the n-th bit of **src** is set and n is less "
"than **first**, or the m-th bit of **src** is set for any m such that "
"**first** <= n < nbits, and m = n + **cut**."
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:173
msgid "In pictures, example for a big-endian 32-bit architecture:"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:175
msgid "The **src** bitmap is::"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:183
msgid ""
"if **cut** is 3, and **first** is 14, bits 14-16 in **src** are cut and "
"**dst** is::"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:192
msgid "Note that **dst** and **src** might overlap partially or entirely."
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:194
msgid ""
"This is implemented in the obvious way, with a shift and carry step for each "
"moved bit. Optimisation is left as an exercise for the compiler."
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:401
#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:195
msgid "find a contiguous aligned zero area"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:407
#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:201
#: include/linux/bitmap.h:792
msgid "``unsigned long *map``"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:402
#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:196
msgid "The address to base the search on"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:2045
#: kernel/resource.c:2074 ../../../core-api/kernel-api:277:
#: arch/x86/kernel/cpu/mtrr/mtrr.c:472 ../../../core-api/kernel-api:78:
#: lib/bitmap.c:404 ../../../core-api/kernel-api:84: include/linux/bitmap.h:198
msgid "``unsigned long size``"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:403
#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:197
msgid "The bitmap size in bits"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:405
#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:199
#: include/linux/bitmap.h:760 include/linux/bitmap.h:790
msgid "``unsigned long start``"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:404
#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:198
msgid "The bitnumber to start searching at"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:406
#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:200
msgid "``unsigned int nr``"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:405
#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:199
msgid "The number of zeroed bits we're looking for"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:407
#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:201
msgid "``unsigned long align_mask``"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:406
#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:200
msgid "Alignment mask for zero area"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:408
msgid "``unsigned long align_offset``"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:407
msgid "Alignment offset for zero area."
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:408
msgid ""
"The **align_mask** should be one less than a power of 2; the effect is that "
"the bit offset of all zero areas this function finds plus **align_offset** "
"is multiple of that power of 2."
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:466
msgid "Apply map defined by a pair of bitmaps to another bitmap"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:467
msgid "remapped result"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:468
msgid "subset to be remapped"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:470 lib/bitmap.c:523
msgid "``const unsigned long *old``"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:469 lib/bitmap.c:522
msgid "defines domain of map"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:471 lib/bitmap.c:524
msgid "``const unsigned long *new``"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:470 lib/bitmap.c:523
msgid "defines range of map"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:471 lib/bitmap.c:524
#: ../../../core-api/kernel-api:81: lib/bitmap.c:563 lib/bitmap.c:697
#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:391
#: include/linux/bitmap.h:537 include/linux/bitmap.h:585
msgid "number of bits in each of these bitmaps"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:472 lib/bitmap.c:525
msgid ""
"Let **old** and **new** define a mapping of bit positions, such that "
"whatever position is held by the n-th set bit in **old** is mapped to the n-"
"th set bit in **new**.  In the more general case, allowing for the "
"possibility that the weight 'w' of **new** is less than the weight of "
"**old**, map the position of the n-th set bit in **old** to the position of "
"the m-th set bit in **new**, where m == n % w."
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:479
msgid ""
"If either of the **old** and **new** bitmaps are empty, or if **src** and "
"**dst** point to the same location, then this routine copies **src** to "
"**dst**."
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:483 lib/bitmap.c:532
msgid ""
"The positions of unset bits in **old** are mapped to themselves (the "
"identity map)."
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:486
msgid ""
"Apply the above specified mapping to **src**, placing the result in **dst**, "
"clearing any bits previously set in **dst**."
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:489
msgid ""
"For example, lets say that **old** has bits 4 through 7 set, and **new** has "
"bits 12 through 15 set.  This defines the mapping of bit position 4 to 12, 5 "
"to 13, 6 to 14 and 7 to 15, and of all other bit positions unchanged.  So if "
"say **src** comes into this routine with bits 1, 5 and 7 set, then **dst** "
"should leave with bits 1, 13 and 15 set."
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:520
msgid "Apply map defined by a pair of bitmaps to a single bit"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:526
msgid "``int oldbit``"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:521
msgid "bit position to be mapped"
msgstr ""

#: ../../../core-api/kernel-api:133: lib/crc/crc4.c:20
#: ../../../core-api/kernel-api:78: lib/bitmap.c:525
msgid "``int bits``"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:535
msgid ""
"Apply the above specified mapping to bit position **oldbit**, returning the "
"new bit position."
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:538
msgid ""
"For example, lets say that **old** has bits 4 through 7 set, and **new** has "
"bits 12 through 15 set.  This defines the mapping of bit position 4 to 12, 5 "
"to 13, 6 to 14 and 7 to 15, and of all other bit positions unchanged.  So if "
"say **oldbit** is 5, then this routine returns 13."
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:783
msgid "copy the contents of u32 array of bits to bitmap"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:789 lib/bitmap.c:837
#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:652
#: include/linux/bitmap.h:667 include/linux/bitmap.h:689
msgid "``unsigned long *bitmap``"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:784 lib/bitmap.c:832
msgid "array of unsigned longs, the destination bitmap"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:786
msgid "``const u32 *buf``"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:785
msgid "array of u32 (in host byte order), the source bitmap"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:786 lib/bitmap.c:809
#: lib/bitmap.c:834 lib/bitmap.c:864
msgid "number of bits in **bitmap**"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:806
msgid "copy the contents of bitmap to a u32 array of bits"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:812
msgid "``u32 *buf``"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:807
msgid "array of u32 (in host byte order), the dest bitmap"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:809 lib/bitmap.c:864
msgid "``const unsigned long *bitmap``"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:808 lib/bitmap.c:863
msgid "array of unsigned longs, the source bitmap"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:831
msgid "copy the contents of u64 array of bits to bitmap"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:834
msgid "``const u64 *buf``"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:833
msgid "array of u64 (in host byte order), the source bitmap"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:861
msgid "copy the contents of bitmap to a u64 array of bits"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:867
msgid "``u64 *buf``"
msgstr ""

#: ../../../core-api/kernel-api:78: lib/bitmap.c:862
msgid "array of u64 (in host byte order), the dest bitmap"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:440
msgid "find ordinal of set bit at given position in bitmap"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:446
msgid "``const unsigned long *buf``"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:441
msgid "pointer to a bitmap"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:443
#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:649
#: include/linux/bitmap.h:664
msgid "``unsigned int pos``"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:442
msgid "a bit position in **buf** (0 <= **pos** < **nbits**)"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:443
msgid "number of valid bit positions in **buf**"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:444
msgid ""
"Map the bit at position **pos** in **buf** (of length **nbits**) to the "
"ordinal of which set bit it is.  If it is not set or if **pos** is not a "
"valid bit position, map to -1."
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:448
msgid ""
"If for example, just bits 4 through 7 are set in **buf**, then **pos** "
"values 4 through 7 will get mapped to 0 through 3, respectively, and other "
"**pos** values will get mapped to -1.  When **pos** value 7 gets mapped to "
"(returns) **ord** value 3 in this example, that means that bit 7 is the 3rd "
"(starting with 0th) set bit in **buf**."
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:454
msgid "The bit positions 0 through **bits** are valid positions in **buf**."
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:559
msgid "translate one bitmap relative to another"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:560
msgid "resulting translated bitmap"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:562 lib/bitmap.c:696
msgid "``const unsigned long *orig``"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:561
msgid "original untranslated bitmap"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:563
msgid "``const unsigned long *relmap``"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:562
msgid "bitmap relative to which translated"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:564
#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:686
msgid "``unsigned int bits``"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:564
msgid ""
"Set the n-th bit of **dst** iff there exists some m such that the n-th bit "
"of **relmap** is set, the m-th bit of **orig** is set, and the n-th bit of "
"**relmap** is also the m-th _set_ bit of **relmap**. (If you understood the "
"previous sentence the first time your read it, you're overqualified for your "
"current job.)"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:570
msgid ""
"In other words, **orig** is mapped onto (surjectively) **dst**, using the "
"map { <n, m> | the n-th bit of **relmap** is the m-th set bit of "
"**relmap** }."
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:574
msgid ""
"Any set bits in **orig** above bit number W, where W is the weight of "
"(number of set bits in) **relmap** are mapped nowhere. In particular, if for "
"all bits m set in **orig**, m >= W, then **dst** will end up empty.  In "
"situations where the possibility of such an empty result is not desired, one "
"way to avoid it is to use the bitmap_fold() operator, below, to first fold "
"the **orig** bitmap over itself so that all its set bits x are in the range "
"0 <= x < W.  The bitmap_fold() operator does this by setting the bit (m % W) "
"in **dst**, for each bit (m) set in **orig**."
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:584
msgid "Example [1] for bitmap_onto():"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:585
msgid ""
"Let's say **relmap** has bits 30-39 set, and **orig** has bits 1, 3, 5, 7, 9 "
"and 11 set.  Then on return from this routine, **dst** will have bits 31, "
"33, 35, 37 and 39 set."
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:589
msgid ""
"When bit 0 is set in **orig**, it means turn on the bit in **dst** "
"corresponding to whatever is the first bit (if any) that is turned on in "
"**relmap**.  Since bit 0 was off in the above example, we leave off that bit "
"(bit 30) in **dst**."
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:594
msgid ""
"When bit 1 is set in **orig** (as in the above example), it means turn on "
"the bit in **dst** corresponding to whatever is the second bit that is "
"turned on in **relmap**.  The second bit in **relmap** that was turned on in "
"the above example was bit 31, so we turned on bit 31 in **dst**."
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:600
msgid ""
"Similarly, we turned on bits 33, 35, 37 and 39 in **dst**, because they were "
"the 4th, 6th, 8th and 10th set bits set in **relmap**, and the 4th, 6th, 8th "
"and 10th bits of **orig** (i.e. bits 3, 5, 7 and 9) were also set."
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:605
msgid ""
"When bit 11 is set in **orig**, it means turn on the bit in **dst** "
"corresponding to whatever is the twelfth bit that is turned on in "
"**relmap**.  In the above example, there were only ten bits turned on in "
"**relmap** (30..39), so that bit 11 was set in **orig** had no affect on "
"**dst**."
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:611
msgid "Example [2] for bitmap_fold() + bitmap_onto():"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:612
msgid "Let's say **relmap** has these ten bits set::"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:616
msgid ""
"(for the curious, that's 40 plus the first ten terms of the Fibonacci "
"sequence.)"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:619
msgid ""
"Further lets say we use the following code, invoking bitmap_fold() then "
"bitmap_onto, as suggested above to avoid the possibility of an empty **dst** "
"result::"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:628
msgid ""
"Then this table shows what various values of **dst** would be, for various "
"**orig**'s.  I list the zero-based positions of each set bit. The tmp column "
"shows the intermediate result, as computed by using bitmap_fold() to fold "
"the **orig** bitmap modulo ten (the weight of **relmap**):"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:635
msgid "**orig**"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:635
msgid "tmp"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:635
msgid "**dst**"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:636 lib/bitmap.c:639
#: lib/bitmap.c:643
msgid "0"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:636 lib/bitmap.c:643
msgid "40"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:637
msgid "1"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:637
msgid "41"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:638
msgid "9"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:638
msgid "95"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:639
msgid "10"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:639
msgid "40 [#f1]_"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:640
msgid "1 3 5 7"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:640
msgid "41 43 48 61"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:641
msgid "0 1 2 3 4"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:641
msgid "40 41 42 43 45"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:642
msgid "0 9 18 27"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:642
msgid "0 9 8 7"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:642
msgid "40 61 74 95"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:643
msgid "0 10 20 30"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:644
msgid "0 11 22 33"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:644
msgid "0 1 2 3"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:644
msgid "40 41 42 43"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:645
msgid "0 12 24 36"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:645
msgid "0 2 4 6"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:645
msgid "40 42 45 53"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:646
msgid "78 102 211"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:646
msgid "1 2 8"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:646
msgid "41 42 74 [#f1]_"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:651
msgid ""
"For these marked lines, if we hadn't first done bitmap_fold() into tmp, then "
"the **dst** result would have been empty."
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:654
msgid ""
"If either of **orig** or **relmap** is empty (no set bits), then **dst** "
"will be returned empty."
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:657
msgid ""
"If (as explained above) the only set bits in **orig** are in positions m "
"where m >= W, (where W is the weight of **relmap**) then **dst** will once "
"again be returned empty."
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:661
msgid "All bits in **dst** not set by the above rule are cleared."
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:693
msgid "fold larger bitmap into smaller, modulo specified size"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:694
msgid "resulting smaller bitmap"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:695
msgid "original larger bitmap"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:697
msgid "``unsigned int sz``"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:696
msgid "specified size"
msgstr ""

#: ../../../core-api/kernel-api:81: lib/bitmap.c:698
msgid ""
"For each bit oldbit in **orig**, set bit oldbit mod **sz** in **dst**. Clear "
"all other bits in **dst**.  See further the comment and Example [2] for "
"bitmap_onto() for why and how to use this."
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:201
msgid ""
"The **align_mask** should be one less than a power of 2; the effect is that "
"the bit offset of all zero areas this function finds is multiples of that "
"power of 2. A **align_mask** of 0 means no alignment is required."
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:387
msgid "Check whether the or of two bitmaps is equal to a third"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:393
msgid "``const unsigned long *src1``"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:388
msgid "Pointer to bitmap 1"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:390
msgid "``const unsigned long *src2``"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:389
msgid "Pointer to bitmap 2 will be or'ed with bitmap 1"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:391
msgid "``const unsigned long *src3``"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:390
msgid "Pointer to bitmap 3. Compare to the result of ***src1** | ***src2**"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:393
msgid "True if (***src1** | ***src2**) == ***src3**, false otherwise"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:533
msgid "Scatter a bitmap according to the given mask"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:534
#: include/linux/bitmap.h:583
msgid "scattered bitmap"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:535
#: include/linux/bitmap.h:582
msgid "gathered bitmap"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:537
#: include/linux/bitmap.h:585
msgid "``const unsigned long *mask``"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:536
msgid "mask representing bits to assign to in the scattered bitmap"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:538
msgid "Scatters bitmap with sequential bits according to the given **mask**."
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:540
#: include/linux/bitmap.h:588
msgid "**Example**"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:541
msgid ""
"If **src** bitmap = 0x005a, with **mask** = 0x1313, **dst** will be 0x0302."
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:543
msgid ""
"Or in binary form **src**                 **mask**                   **dst** "
"0000000001011010     0001001100010011        0000001100000010"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:547
msgid "(Bits 0, 1, 2, 3, 4, 5 are copied to the bits 0, 1, 4, 8, 9, 12)"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:549
#: include/linux/bitmap.h:597
msgid "A more 'visual' description of the operation::"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:562
msgid ""
"A relationship exists between bitmap_scatter() and bitmap_gather(). See "
"bitmap_gather() for the bitmap gather detailed operations. TL;DR: "
"bitmap_gather() can be seen as the 'reverse' bitmap_scatter() operation."
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:581
msgid "Gather a bitmap according to given mask"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:584
msgid "mask representing bits to extract from in the scattered bitmap"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:586
msgid "Gathers bitmap with sparse bits according to the given **mask**."
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:589
msgid ""
"If **src** bitmap = 0x0302, with **mask** = 0x1313, **dst** will be 0x001a."
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:591
msgid ""
"Or in binary form **src**                 **mask**                   **dst** "
"0000001100000010     0001001100010011        0000000000011010"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:595
msgid "(Bits 0, 1, 4, 8, 9, 12 are copied to the bits 0, 1, 2, 3, 4, 5)"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:609
msgid ""
"A relationship exists between bitmap_gather() and bitmap_scatter(). See "
"bitmap_scatter() for the bitmap scatter detailed operations. TL;DR: "
"bitmap_scatter() can be seen as the 'reverse' bitmap_gather() operation."
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:613
msgid ""
"Suppose scattered computed using bitmap_scatter(scattered, src, mask, n). "
"The operation bitmap_gather(result, scattered, mask, n) leads to a result "
"equal or equivalent to src."
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:617
msgid ""
"The result can be 'equivalent' because bitmap_scatter() and bitmap_gather() "
"are not bijective. The result and src values are equivalent in that sense "
"that a call to bitmap_scatter(res, src, mask, n) and a call to "
"bitmap_scatter(res, result, mask, n) will lead to the same res value."
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:646
msgid "release allocated bitmap region"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:647
#: include/linux/bitmap.h:662 include/linux/bitmap.h:684
msgid "array of unsigned longs corresponding to the bitmap"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:648
msgid "beginning of bit region to release"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:650
#: include/linux/bitmap.h:665 include/linux/bitmap.h:687
msgid "``int order``"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:649
msgid "region size (log base 2 of number of bits) to release"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:650
msgid ""
"This is the complement to __bitmap_find_free_region() and releases the found "
"region (by clearing it in the bitmap)."
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:661
msgid "allocate bitmap region"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:663
msgid "beginning of bit region to allocate"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:664
msgid "region size (log base 2 of number of bits) to allocate"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:665
msgid "Allocate (set bits in) a specified region of a bitmap."
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:668
msgid ""
"0 on success, or ``-EBUSY`` if specified region wasn't free (not all bits "
"were zero)."
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:683
msgid "find a contiguous aligned mem region"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:685
msgid "number of bits in the bitmap"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:686
msgid "region size (log base 2 of number of bits) to find"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:687
msgid ""
"Find a region of free (zero) bits in a **bitmap** of **bits** bits and "
"allocate them (set them to one).  Only consider regions of length a power "
"(**order**) of two, aligned to that power of two, which makes the search "
"algorithm much faster."
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:693
msgid "the bit offset in bitmap of the allocated region, or -errno on failure."
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:711
msgid "``BITMAP_FROM_U64 (n)``"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:709
msgid "Represent u64 value in the format suitable for bitmap."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:229
#: include/linux/overflow.h:318 ../../../core-api/kernel-api:158:
#: include/linux/log2.h:77 include/linux/log2.h:153 include/linux/log2.h:173
#: include/linux/log2.h:190 include/linux/log2.h:211 include/linux/log2.h:242
#: ../../../core-api/kernel-api:175: include/asm-generic/div64.h:38
#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:523
#: include/linux/kfifo.h:547 include/linux/kfifo.h:568
#: include/linux/kfifo.h:591 include/linux/kfifo.h:617
#: include/linux/kfifo.h:640 include/linux/kfifo.h:824
#: include/linux/kfifo.h:850 include/linux/kfifo.h:880
#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:715
msgid "``n``"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:710
msgid "u64 value"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:711
msgid ""
"Linux bitmaps are internally arrays of unsigned longs, i.e. 32-bit integers "
"in 32-bit environment, and 64-bit integers in 64-bit one."
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:714
msgid ""
"There are four combinations of endianness and length of the word in linux "
"ABIs: LE64, BE64, LE32 and BE32."
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:717
msgid ""
"On 64-bit kernels 64-bit LE and BE numbers are naturally ordered in bitmaps "
"and therefore don't require any special handling."
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:720
msgid ""
"On 32-bit kernels 32-bit LE ABI orders lo word of 64-bit number in memory "
"prior to hi, and 32-bit BE orders hi word prior to lo. The bitmap on the "
"other hand is represented as an array of 32-bit words and the position of "
"bit N may therefore be calculated as: word #(N/32) and bit #(N``32``) in "
"that word.  For example, bit #42 is located at 10th position of 2nd word. It "
"matches 32-bit LE ABI, and we can simply let the compiler store 64-bit "
"values in memory as it usually does. But for BE we need to swap hi and lo "
"words manually."
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:729
msgid ""
"With all that, the macro BITMAP_FROM_U64() does explicit reordering of hi "
"and lo parts of u64.  For LE32 it does nothing, and for BE environment it "
"swaps hi and lo words, as is expected by bitmap."
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:742
msgid "Check and swap words within u64."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1710
#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:746
msgid "``u64 mask``"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:745
msgid ""
"In 32-bit Big Endian kernel, when using ``(u32 *)(:c:type:`val`)[*]`` to "
"read u64 mask, we will get the wrong word. That is ``(u32 *)(:c:type:`val`)"
"[0]`` gets the upper 32 bits, but we expect the lower 32-bits of u64."
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:757
msgid "read a value of n-bits from the memory region"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:763
msgid "``const unsigned long *map``"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:758
#: include/linux/bitmap.h:787
msgid "address to the bitmap memory region"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:759
#: include/linux/bitmap.h:789
msgid "bit offset of the n-bit value"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:761
#: include/linux/bitmap.h:791
msgid "``unsigned long nbits``"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:760
msgid "size of value in bits, nonzero, up to BITS_PER_LONG"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:762
msgid ""
"value of **nbits** bits located at the **start** bit offset within the "
"**map** memory region. For **nbits** = 0 and **nbits** > BITS_PER_LONG the "
"return value is undefined."
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:786
msgid "write n-bit value within a memory region"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:789
msgid "``unsigned long value``"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:788
msgid "value to write, clamped to nbits"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:790
msgid "size of value in bits, nonzero, up to BITS_PER_LONG."
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:791
msgid ""
"bitmap_write() behaves as-if implemented as **nbits** calls of "
"__assign_bit(), i.e. bits beyond **nbits** are ignored:"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:794
msgid "for (bit = 0; bit < nbits; bit++)"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:795
msgid "__assign_bit(start + bit, bitmap, val & BIT(bit));"
msgstr ""

#: ../../../core-api/kernel-api:84: include/linux/bitmap.h:797
msgid ""
"For **nbits** == 0 and **nbits** > BITS_PER_LONG no writes are performed."
msgstr ""

#: ../../../core-api/kernel-api.rst:88
msgid "Command-line Parsing"
msgstr ""

#: ../../../core-api/kernel-api:90: lib/cmdline.c:36
msgid "Parse integer from an option string"
msgstr ""

#: ../../../core-api/kernel-api:90: lib/cmdline.c:42
msgid "``char **str``"
msgstr ""

#: ../../../core-api/kernel-api:90: lib/cmdline.c:37
msgid "option string"
msgstr ""

#: ../../../core-api/kernel-api:90: lib/cmdline.c:39
msgid "``int *pint``"
msgstr ""

#: ../../../core-api/kernel-api:90: lib/cmdline.c:38
msgid "(optional output) integer value parsed from **str**"
msgstr ""

#: ../../../core-api/kernel-api:90: lib/cmdline.c:39
msgid ""
"Read an int from an option string; if available accept a subsequent comma as "
"well."
msgstr ""

#: ../../../core-api/kernel-api:90: lib/cmdline.c:42
msgid ""
"When **pint** is NULL the function can be used as a validator of the current "
"option in the string."
msgstr ""

#: ../../../core-api/kernel-api:90: lib/cmdline.c:45
msgid ""
"Return values: 0 - no int in string 1 - int found, no subsequent comma 2 - "
"int found including a subsequent comma 3 - hyphen found to denote a range"
msgstr ""

#: ../../../core-api/kernel-api:90: lib/cmdline.c:51
msgid ""
"Leading hyphen without integer is no integer case, but we consume it for the "
"sake of simplification."
msgstr ""

#: ../../../core-api/kernel-api:90: lib/cmdline.c:83
msgid "Parse a string into a list of integers"
msgstr ""

#: ../../../core-api/kernel-api:90: lib/cmdline.c:84
msgid "String to be parsed"
msgstr ""

#: ../../../core-api/kernel-api:90: lib/cmdline.c:86
msgid "``int nints``"
msgstr ""

#: ../../../core-api/kernel-api:90: lib/cmdline.c:85
msgid "size of integer array"
msgstr ""

#: ../../../core-api/kernel-api:90: lib/cmdline.c:87
msgid "``int *ints``"
msgstr ""

#: ../../../core-api/kernel-api:90: lib/cmdline.c:86
msgid "integer array (must have room for at least one element)"
msgstr ""

#: ../../../core-api/kernel-api:90: lib/cmdline.c:87
msgid ""
"This function parses a string containing a comma-separated list of integers, "
"a hyphen-separated range of _positive_ integers, or a combination of both.  "
"The parse halts when the array is full, or when no more numbers can be "
"retrieved from the string."
msgstr ""

#: ../../../core-api/kernel-api:90: lib/cmdline.c:93
msgid ""
"When **nints** is 0, the function just validates the given **str** and "
"returns the amount of parseable integers as described below."
msgstr ""

#: ../../../core-api/kernel-api:90: lib/cmdline.c:97
msgid ""
"The first element is filled by the number of collected integers in the "
"range. The rest is what was parsed from the **str**."
msgstr ""

#: ../../../core-api/kernel-api:90: lib/cmdline.c:100
msgid ""
"Return value is the character in the string which caused the parse to end "
"(typically a null terminator, if **str** is completely parseable)."
msgstr ""

#: ../../../core-api/kernel-api:90: lib/cmdline.c:142
msgid "parse a string with mem suffixes into a number"
msgstr ""

#: ../../../core-api/kernel-api:90: lib/cmdline.c:148
msgid "``const char *ptr``"
msgstr ""

#: ../../../core-api/kernel-api:90: lib/cmdline.c:143
msgid "Where parse begins"
msgstr ""

#: ../../../core-api/kernel-api:90: lib/cmdline.c:145
msgid "``char **retptr``"
msgstr ""

#: ../../../core-api/kernel-api:90: lib/cmdline.c:144
msgid "(output) Optional pointer to next char after parse completes"
msgstr ""

#: ../../../core-api/kernel-api:90: lib/cmdline.c:145
msgid ""
"Parses a string into a number.  The number stored at **ptr** is potentially "
"suffixed with K, M, G, T, P, E."
msgstr ""

#: ../../../core-api/kernel-api.rst:94
msgid "Error Pointers"
msgstr ""

#: ../../../core-api/kernel-api:96: include/linux/err.h:25
msgid "``IS_ERR_VALUE (x)``"
msgstr ""

#: ../../../core-api/kernel-api:96: include/linux/err.h:23
#: include/linux/err.h:64
msgid "Detect an error pointer."
msgstr ""

#: ../../../core-api/kernel-api:96: include/linux/err.h:29
msgid "``x``"
msgstr ""

#: ../../../core-api/kernel-api:96: include/linux/err.h:24
#: include/linux/err.h:65 include/linux/err.h:78
msgid "The pointer to check."
msgstr ""

#: ../../../core-api/kernel-api:96: include/linux/err.h:25
msgid ""
"Like IS_ERR(), but does not generate a compiler warning if result is unused."
msgstr ""

#: ../../../core-api/kernel-api:96: include/linux/err.h:31
msgid "Create an error pointer."
msgstr ""

#: ../../../core-api/kernel-api:96: include/linux/err.h:37
msgid "``long error``"
msgstr ""

#: ../../../core-api/kernel-api:96: include/linux/err.h:32
msgid "A negative error code."
msgstr ""

#: ../../../core-api/kernel-api:96: include/linux/err.h:33
msgid ""
"Encodes **error** into a pointer value. Users should consider the result "
"opaque and not assume anything about how the error is encoded."
msgstr ""

#: ../../../core-api/kernel-api:96: include/linux/err.h:37
msgid "A pointer with **error** encoded within its value."
msgstr ""

#: ../../../core-api/kernel-api:96: include/linux/err.h:51
msgid "Extract the error code from an error pointer."
msgstr ""

#: ../../../core-api/kernel-api:96: include/linux/err.h:57
#: include/linux/err.h:70 include/linux/err.h:83 include/linux/err.h:94
#: include/linux/err.h:107
msgid "``__force const void *ptr``"
msgstr ""

#: ../../../core-api/kernel-api:96: include/linux/err.h:52
msgid "An error pointer."
msgstr ""

#: ../../../core-api/kernel-api:96: include/linux/err.h:53
msgid "The error code within **ptr**."
msgstr ""

#: ../../../core-api/kernel-api:96: include/linux/err.h:66
msgid "true if **ptr** is an error pointer, false otherwise."
msgstr ""

#: ../../../core-api/kernel-api:96: include/linux/err.h:77
msgid "Detect an error pointer or a null pointer."
msgstr ""

#: ../../../core-api/kernel-api:96: include/linux/err.h:79
msgid "Like IS_ERR(), but also returns true for a null pointer."
msgstr ""

#: ../../../core-api/kernel-api:96: include/linux/err.h:88
msgid "Explicitly cast an error-valued pointer to another pointer type"
msgstr ""

#: ../../../core-api/kernel-api:96: include/linux/err.h:89
msgid "The pointer to cast."
msgstr ""

#: ../../../core-api/kernel-api:96: include/linux/err.h:90
msgid ""
"Explicitly cast an error-valued pointer to another pointer type in such a "
"way as to make it clear that's what's going on."
msgstr ""

#: ../../../core-api/kernel-api:96: include/linux/err.h:101
msgid "Extract the error code from a pointer if it has one."
msgstr ""

#: ../../../core-api/kernel-api:96: include/linux/err.h:102
msgid "A potential error pointer."
msgstr ""

#: ../../../core-api/kernel-api:96: include/linux/err.h:103
msgid ""
"Convenience function that can be used inside a function that returns an "
"error code to propagate errors received as error pointers. For example, "
"``return PTR_ERR_OR_ZERO(ptr);`` replaces:"
msgstr ""

#: ../../../core-api/kernel-api:96: include/linux/err.h:115
msgid "The error code within **ptr** if it is an error pointer; 0 otherwise."
msgstr ""

#: ../../../core-api/kernel-api.rst:100
msgid "Sorting"
msgstr ""

#: ../../../core-api/kernel-api:102: lib/sort.c:278
msgid "sort an array of elements"
msgstr ""

#: ../../../core-api/kernel-api:102: lib/sort.c:284 lib/sort.c:319
msgid "``void *base``"
msgstr ""

#: ../../../core-api/kernel-api:102: lib/sort.c:279 lib/sort.c:314
msgid "pointer to data to sort"
msgstr ""

#: ../../../core-api/kernel-api:102: lib/sort.c:281 lib/sort.c:316
msgid "``size_t num``"
msgstr ""

#: ../../../core-api/kernel-api:102: lib/sort.c:280 lib/sort.c:315
msgid "number of elements"
msgstr ""

#: ../../../core-api/kernel-api:102: lib/sort.c:281 lib/sort.c:316
msgid "size of each element"
msgstr ""

#: ../../../core-api/kernel-api:102: lib/sort.c:283 lib/sort.c:318
msgid "``cmp_r_func_t cmp_func``"
msgstr ""

#: ../../../core-api/kernel-api:102: lib/sort.c:282 lib/sort.c:317
msgid "pointer to comparison function"
msgstr ""

#: ../../../core-api/kernel-api:102: lib/sort.c:284 lib/sort.c:319
msgid "``swap_r_func_t swap_func``"
msgstr ""

#: ../../../core-api/kernel-api:102: lib/sort.c:283 lib/sort.c:318
msgid "pointer to swap function or NULL"
msgstr ""

#: ../../../core-api/kernel-api:102: lib/sort.c:285 lib/sort.c:320
msgid "``const void *priv``"
msgstr ""

#: ../../../core-api/kernel-api:102: lib/sort.c:284 lib/sort.c:319
msgid "third argument passed to comparison function"
msgstr ""

#: ../../../core-api/kernel-api:102: lib/sort.c:285
msgid ""
"This function does a heapsort on the given array.  You may provide a "
"swap_func function if you need to do something more than a memory copy (e.g. "
"fix up pointers or auxiliary data), but the built-in swap avoids a slow "
"retpoline and so is significantly faster."
msgstr ""

#: ../../../core-api/kernel-api:102: lib/sort.c:290
msgid ""
"The comparison function must adhere to specific mathematical properties to "
"ensure correct and stable sorting: - Antisymmetry: cmp_func(a, b) must "
"return the opposite sign of cmp_func(b, a). - Transitivity: if cmp_func(a, "
"b) <= 0 and cmp_func(b, c) <= 0, then cmp_func(a, c) <= 0."
msgstr ""

#: ../../../core-api/kernel-api:102: lib/sort.c:297
msgid ""
"Sorting time is O(n log n) both on average and worst-case. While quicksort "
"is slightly faster on average, it suffers from exploitable O(n*n) worst-case "
"behavior and extra memory requirements that make it less suitable for kernel "
"use."
msgstr ""

#: ../../../core-api/kernel-api:102: lib/sort.c:313
msgid "sort an array of elements, with cond_resched"
msgstr ""

#: ../../../core-api/kernel-api:102: lib/sort.c:320
msgid ""
"Same as sort_r, but preferred for larger arrays as it does a periodic "
"cond_resched()."
msgstr ""

#: ../../../core-api/kernel-api:105: lib/list_sort.c:99
msgid "sort a list"
msgstr ""

#: ../../../core-api/kernel-api:105: lib/list_sort.c:105
msgid "``void *priv``"
msgstr ""

#: ../../../core-api/kernel-api:105: lib/list_sort.c:100
msgid "private data, opaque to list_sort(), passed to **cmp**"
msgstr ""

#: ../../../core-api/kernel-api:105: lib/list_sort.c:102
#: ../../../core-api/kernel-api:412: include/linux/rculist.h:113
#: include/linux/rculist.h:134 include/linux/rculist.h:329
#: include/linux/rculist.h:344
msgid "``struct list_head *head``"
msgstr ""

#: ../../../core-api/kernel-api:105: lib/list_sort.c:101
msgid "the list to sort"
msgstr ""

#: ../../../core-api/kernel-api:105: lib/list_sort.c:103
msgid "``list_cmp_func_t cmp``"
msgstr ""

#: ../../../core-api/kernel-api:105: lib/list_sort.c:102
msgid "the elements comparison function"
msgstr ""

#: ../../../core-api/kernel-api:105: lib/list_sort.c:103
msgid ""
"The comparison function **cmp** must return > 0 if **a** should sort after "
"**b** (\"**a** > **b**\" if you want an ascending sort), and <= 0 if **a** "
"should sort before **b** *or* their original order should be preserved.  It "
"is always called with the element that came first in the input in **a**, and "
"list_sort is a stable sort, so it is not necessary to distinguish the **a** "
"< **b** and **a** == **b** cases."
msgstr ""

#: ../../../core-api/kernel-api:105: lib/list_sort.c:110
msgid ""
"The comparison function must adhere to specific mathematical properties to "
"ensure correct and stable sorting: - Antisymmetry: cmp(**a**, **b**) must "
"return the opposite sign of cmp(**b**, **a**). - Transitivity: if cmp(**a**, "
"**b**) <= 0 and cmp(**b**, **c**) <= 0, then cmp(**a**, **c**) <= 0."
msgstr ""

#: ../../../core-api/kernel-api:105: lib/list_sort.c:117
msgid ""
"This is compatible with two styles of **cmp** function: - The traditional "
"style which returns <0 / =0 / >0, or - Returning a boolean 0/1. The latter "
"offers a chance to save a few cycles in the comparison (which is used by e."
"g. plug_ctx_cmp() in block/blk-mq.c)."
msgstr ""

#: ../../../core-api/kernel-api:105: lib/list_sort.c:123
msgid "A good way to write a multi-word comparison is::"
msgstr ""

#: ../../../core-api/kernel-api:105: lib/list_sort.c:132
msgid ""
"This mergesort is as eager as possible while always performing at least 2:1 "
"balanced merges.  Given two pending sublists of size 2^k, they are merged to "
"a size-2^(k+1) list as soon as we have 2^k following elements."
msgstr ""

#: ../../../core-api/kernel-api:105: lib/list_sort.c:136
msgid ""
"Thus, it will avoid cache thrashing as long as 3*2^k elements can fit into "
"the cache.  Not quite as good as a fully-eager bottom-up mergesort, but it "
"does use 0.2*n fewer comparisons, so is faster in the common case that "
"everything fits into L1."
msgstr ""

#: ../../../core-api/kernel-api:105: lib/list_sort.c:142
msgid ""
"The merging is controlled by \"count\", the number of elements in the "
"pending lists.  This is beautifully simple code, but rather subtle."
msgstr ""

#: ../../../core-api/kernel-api:105: lib/list_sort.c:145
msgid ""
"Each time we increment \"count\", we set one bit (bit k) and clear bits "
"k-1 .. 0.  Each time this happens (except the very first time for each bit, "
"when count increments to 2^k), we merge two lists of size 2^k into one list "
"of size 2^(k+1)."
msgstr ""

#: ../../../core-api/kernel-api:105: lib/list_sort.c:150
msgid ""
"This merge happens exactly when the count reaches an odd multiple of 2^k, "
"which is when we have 2^k elements pending in smaller lists, so it's safe to "
"merge away two lists of size 2^k."
msgstr ""

#: ../../../core-api/kernel-api:105: lib/list_sort.c:154
msgid ""
"After this happens twice, we have created two lists of size 2^(k+1), which "
"will be merged into a list of size 2^(k+2) before we create a third list of "
"size 2^(k+1), so there are never more than two pending."
msgstr ""

#: ../../../core-api/kernel-api:105: lib/list_sort.c:158
msgid ""
"The number of pending lists of size 2^k is determined by the state of bit k "
"of \"count\" plus two extra pieces of information:"
msgstr ""

#: ../../../core-api/kernel-api:105: lib/list_sort.c:161
msgid "The state of bit k-1 (when k == 0, consider bit -1 always set), and"
msgstr ""

#: ../../../core-api/kernel-api:105: lib/list_sort.c:162
msgid ""
"Whether the higher-order bits are zero or non-zero (i.e. is count >= "
"2^(k+1))."
msgstr ""

#: ../../../core-api/kernel-api:105: lib/list_sort.c:165
msgid ""
"There are six states we distinguish.  \"x\" represents some arbitrary bits, "
"and \"y\" represents some arbitrary non-zero bits: 0:  00x: 0 pending of "
"size 2^k;           x pending of sizes < 2^k 1:  01x: 0 pending of size 2^k; "
"2^(k-1) + x pending of sizes < 2^k 2: x10x: 0 pending of size 2^k; 2^k     + "
"x pending of sizes < 2^k 3: x11x: 1 pending of size 2^k; 2^(k-1) + x pending "
"of sizes < 2^k 4: y00x: 1 pending of size 2^k; 2^k     + x pending of sizes "
"< 2^k 5: y01x: 2 pending of size 2^k; 2^(k-1) + x pending of sizes < 2^k "
"(merge and loop back to state 2)"
msgstr ""

#: ../../../core-api/kernel-api:105: lib/list_sort.c:175
msgid ""
"We gain lists of size 2^k in the 2->3 and 4->5 transitions (because bit k-1 "
"is set while the more significant bits are non-zero) and merge them away in "
"the 5->2 transition.  Note in particular that just before the 5->2 "
"transition, all lower-order bits are 11 (state 3), so there is one list of "
"each smaller size."
msgstr ""

#: ../../../core-api/kernel-api:105: lib/list_sort.c:181
msgid ""
"When we reach the end of the input, we merge all the pending lists, from "
"smallest to largest.  If you work through cases 2 to 5 above, you can see "
"that the number of elements we merge with a list of size 2^k varies from "
"2^(k-1) (cases 3 and 5 when x == 0) to 2^(k+1) - 1 (second merge of case 5 "
"when x == 2^(k-1) - 1)."
msgstr ""

#: ../../../core-api/kernel-api.rst:109
msgid "Text Searching"
msgstr ""

#: ../../../core-api/kernel-api:111: lib/textsearch.c:12
msgid "INTRODUCTION"
msgstr ""

#: ../../../core-api/kernel-api:111: lib/textsearch.c:14
msgid ""
"The textsearch infrastructure provides text searching facilities for both "
"linear and non-linear data. Individual search algorithms are implemented in "
"modules and chosen by the user."
msgstr ""

#: ../../../core-api/kernel-api:111: lib/textsearch.c:18
msgid "ARCHITECTURE"
msgstr ""

#: ../../../core-api/kernel-api:111: lib/textsearch.c:54
msgid "USAGE"
msgstr ""

#: ../../../core-api/kernel-api:111: lib/textsearch.c:56
msgid ""
"Before a search can be performed, a configuration must be created by calling "
"textsearch_prepare() specifying the searching algorithm, the pattern to look "
"for and flags. As a flag, you can set TS_IGNORECASE to perform case "
"insensitive matching. But it might slow down performance of algorithm, so "
"you should use it at own your risk. The returned configuration may then be "
"used for an arbitrary amount of times and even in parallel as long as a "
"separate struct ts_state variable is provided to every instance."
msgstr ""

#: ../../../core-api/kernel-api:111: lib/textsearch.c:65
msgid ""
"The actual search is performed by either calling "
"textsearch_find_continuous() for linear data or by providing an own "
"get_next_block() implementation and calling textsearch_find(). Both "
"functions return the position of the first occurrence of the pattern or "
"UINT_MAX if no match was found. Subsequent occurrences can be found by "
"calling textsearch_next() regardless of the linearity of the data."
msgstr ""

#: ../../../core-api/kernel-api:111: lib/textsearch.c:73
msgid ""
"Once you're done using a configuration it must be given back via "
"textsearch_destroy."
msgstr ""

#: ../../../core-api/kernel-api:111: lib/textsearch.c:76
msgid "EXAMPLE::"
msgstr ""

#: ../../../core-api/kernel-api:114: lib/textsearch.c:132
msgid "register a textsearch module"
msgstr ""

#: ../../../core-api/kernel-api:114: lib/textsearch.c:138 lib/textsearch.c:173
msgid "``struct ts_ops *ops``"
msgstr ""

#: ../../../core-api/kernel-api:114: lib/textsearch.c:133 lib/textsearch.c:168
msgid "operations lookup table"
msgstr ""

#: ../../../core-api/kernel-api:114: lib/textsearch.c:134
msgid ""
"This function must be called by textsearch modules to announce their "
"presence. The specified &**ops** must have ``name`` set to a unique "
"identifier and the callbacks find(), init(), get_pattern(), and "
"get_pattern_len() must be implemented."
msgstr ""

#: ../../../core-api/kernel-api:114: lib/textsearch.c:139
msgid ""
"Returns 0 or -EEXISTS if another module has already registered with same "
"name."
msgstr ""

#: ../../../core-api/kernel-api:114: lib/textsearch.c:167
msgid "unregister a textsearch module"
msgstr ""

#: ../../../core-api/kernel-api:114: lib/textsearch.c:169
msgid ""
"This function must be called by textsearch modules to announce their "
"disappearance for examples when the module gets unloaded. The :c:type:`ops` "
"parameter must be the same as the one during the registration."
msgstr ""

#: ../../../core-api/kernel-api:114: lib/textsearch.c:174
msgid ""
"Returns 0 on success or -ENOENT if no matching textsearch registration was "
"found."
msgstr ""

#: ../../../core-api/kernel-api:114: lib/textsearch.c:219
msgid "search a pattern in continuous/linear data"
msgstr ""

#: ../../../core-api/kernel-api:114: lib/textsearch.c:225 lib/textsearch.c:313
#: ../../../core-api/kernel-api:117: include/linux/textsearch.h:100
#: include/linux/textsearch.h:123 include/linux/textsearch.h:138
#: include/linux/textsearch.h:147
msgid "``struct ts_config *conf``"
msgstr ""

#: ../../../core-api/kernel-api:114: lib/textsearch.c:220 lib/textsearch.c:308
#: ../../../core-api/kernel-api:117: include/linux/textsearch.h:95
#: include/linux/textsearch.h:118 include/linux/textsearch.h:133
#: include/linux/textsearch.h:142
msgid "search configuration"
msgstr ""

#: ../../../core-api/kernel-api:114: lib/textsearch.c:222
#: ../../../core-api/kernel-api:117: include/linux/textsearch.h:97
#: include/linux/textsearch.h:120
msgid "``struct ts_state *state``"
msgstr ""

#: ../../../core-api/kernel-api:114: lib/textsearch.c:221
#: ../../../core-api/kernel-api:117: include/linux/textsearch.h:96
#: include/linux/textsearch.h:119
msgid "search state"
msgstr ""

#: ../../../core-api/kernel-api:114: lib/textsearch.c:223
msgid "``const void *data``"
msgstr ""

#: ../../../core-api/kernel-api:114: lib/textsearch.c:222
msgid "data to search in"
msgstr ""

#: ../../../core-api/kernel-api:114: lib/textsearch.c:224 lib/textsearch.c:250
#: ../../../core-api/kernel-api:283: security/security.c:4874
#: ../../../core-api/kernel-api:310: include/linux/bio.h:431
#: ../../../core-api/kernel-api:317: block/blk-map.c:659
msgid "``unsigned int len``"
msgstr ""

#: ../../../core-api/kernel-api:114: lib/textsearch.c:223
msgid "length of data"
msgstr ""

#: ../../../core-api/kernel-api:114: lib/textsearch.c:224
msgid ""
"A simplified version of textsearch_find() for continuous/linear data. Call "
"textsearch_next() to retrieve subsequent matches."
msgstr ""

#: ../../../core-api/kernel-api:114: lib/textsearch.c:227
msgid ""
"Returns the position of first occurrence of the pattern or ``UINT_MAX`` if "
"no occurrence was found."
msgstr ""

#: ../../../core-api/kernel-api:114: lib/textsearch.c:246
msgid "Prepare a search"
msgstr ""

#: ../../../core-api/kernel-api:114: lib/textsearch.c:252
msgid "``const char *algo``"
msgstr ""

#: ../../../core-api/kernel-api:114: lib/textsearch.c:247
msgid "name of search algorithm"
msgstr ""

#: ../../../core-api/kernel-api:114: lib/textsearch.c:249
msgid "``const void *pattern``"
msgstr ""

#: ../../../core-api/kernel-api:114: lib/textsearch.c:248
msgid "pattern data"
msgstr ""

#: ../../../core-api/kernel-api:114: lib/textsearch.c:249
msgid "length of pattern"
msgstr ""

#: ../../../core-api/kernel-api:114: lib/textsearch.c:251
#: ../../../core-api/kernel-api:292: kernel/audit.c:1892 kernel/audit.c:2654
#: ../../../core-api/kernel-api:317: block/blk-map.c:505 block/blk-map.c:660
#: ../../../core-api/kernel-api:329: block/blk-lib.c:81 block/blk-lib.c:261
#: block/blk-lib.c:302
msgid "``gfp_t gfp_mask``"
msgstr ""

#: ../../../core-api/kernel-api:114: lib/textsearch.c:250
msgid "allocation mask"
msgstr ""

#: ../../../core-api/kernel-api:114: lib/textsearch.c:252
#: ../../../core-api/kernel-api:221: kernel/relay.c:703
#: ../../../core-api/kernel-api:271: kernel/resource.c:1316
#: ../../../core-api/kernel-api:283: security/security.c:1616
#: security/security.c:2427 security/security.c:2565 security/security.c:2761
#: security/security.c:3487 security/security.c:3507 security/security.c:4766
msgid "``int flags``"
msgstr ""

#: ../../../core-api/kernel-api:114: lib/textsearch.c:251
msgid "search flags"
msgstr ""

#: ../../../core-api/kernel-api:114: lib/textsearch.c:252
msgid ""
"Looks up the search algorithm module and creates a new textsearch "
"configuration for the specified pattern."
msgstr ""

#: ../../../core-api/kernel-api:114: lib/textsearch.c:256
msgid "The format of the pattern may not be compatible between"
msgstr ""

#: ../../../core-api/kernel-api:114: lib/textsearch.c:257
msgid "the various search algorithms."
msgstr ""

#: ../../../core-api/kernel-api:114: lib/textsearch.c:259
msgid ""
"Returns a new textsearch configuration according to the specified parameters "
"or a ERR_PTR(). If a zero length pattern is passed, this function returns "
"EINVAL."
msgstr ""

#: ../../../core-api/kernel-api:114: lib/textsearch.c:307
msgid "destroy a search configuration"
msgstr ""

#: ../../../core-api/kernel-api:114: lib/textsearch.c:309
msgid "Releases all references of the configuration and frees up the memory."
msgstr ""

#: ../../../core-api/kernel-api:117: include/linux/textsearch.h:94
msgid "continue searching for a pattern"
msgstr ""

#: ../../../core-api/kernel-api:117: include/linux/textsearch.h:97
msgid ""
"Continues a search looking for more occurrences of the pattern. "
"textsearch_find() must be called to find the first occurrence in order to "
"reset the state."
msgstr ""

#: ../../../core-api/kernel-api:117: include/linux/textsearch.h:101
msgid ""
"Returns the position of the next occurrence of the pattern or UINT_MAX if "
"not match was found."
msgstr ""

#: ../../../core-api/kernel-api:117: include/linux/textsearch.h:117
msgid "start searching for a pattern"
msgstr ""

#: ../../../core-api/kernel-api:117: include/linux/textsearch.h:120
msgid ""
"Returns the position of first occurrence of the pattern or UINT_MAX if no "
"match was found."
msgstr ""

#: ../../../core-api/kernel-api:117: include/linux/textsearch.h:132
msgid "return head of the pattern"
msgstr ""

#: ../../../core-api/kernel-api:117: include/linux/textsearch.h:141
msgid "return length of the pattern"
msgstr ""

#: ../../../core-api/kernel-api.rst:122
msgid "CRC and Math Functions in Linux"
msgstr ""

#: ../../../core-api/kernel-api.rst:125
msgid "Arithmetic Overflow Checking"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:59
msgid "``check_add_overflow (a, b, d)``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:57
msgid "Calculate addition with overflow checking"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:63
#: include/linux/overflow.h:74 include/linux/overflow.h:109
#: include/linux/overflow.h:120 include/linux/overflow.h:155
#: include/linux/overflow.h:166 include/linux/overflow.h:185
#: include/linux/overflow.h:394 include/linux/overflow.h:406
msgid "``a``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:58
#: include/linux/overflow.h:73 include/linux/overflow.h:348
msgid "first addend"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:60
#: include/linux/overflow.h:75 include/linux/overflow.h:106
#: include/linux/overflow.h:121 include/linux/overflow.h:152
#: include/linux/overflow.h:167 include/linux/overflow.h:391
#: include/linux/overflow.h:403
msgid "``b``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:59
#: include/linux/overflow.h:74 include/linux/overflow.h:349
msgid "second addend"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:61
#: include/linux/overflow.h:107 include/linux/overflow.h:153
#: include/linux/overflow.h:183 ../../../core-api/kernel-api:178:
#: include/linux/math64.h:291 include/linux/math64.h:304
msgid "``d``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:60
msgid "pointer to store sum"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:61
#: include/linux/overflow.h:107 include/linux/overflow.h:153
msgid "Returns true on wrap-around, false otherwise."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:63
msgid ""
"***d** holds the results of the attempted addition, regardless of whether "
"wrap-around occurred."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:73
msgid "``wrapping_add (type, a, b)``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:71
msgid "Intentionally perform a wrapping addition"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:77
#: include/linux/overflow.h:123 include/linux/overflow.h:169
#: include/linux/overflow.h:269 include/linux/overflow.h:304
#: include/linux/overflow.h:452 include/linux/overflow.h:468
#: include/linux/overflow.h:487 include/linux/overflow.h:500
#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:114
#: include/linux/kfifo.h:121 include/linux/kfifo.h:144
#: ../../../core-api/kernel-api:412: include/linux/rculist.h:358
#: include/linux/rculist.h:400 include/linux/rculist.h:419
#: include/linux/rculist.h:475
msgid "``type``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:72
#: include/linux/overflow.h:118 include/linux/overflow.h:164
msgid "type for result of calculation"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:75
msgid ""
"Return the potentially wrapped-around addition without tripping any wrap-"
"around sanitizers that may be enabled."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:89
msgid "``wrapping_assign_add (var, offset)``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:87
msgid "Intentionally perform a wrapping increment assignment"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:93
#: include/linux/overflow.h:139
msgid "``var``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:88
msgid "variable to be incremented"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:90
#: include/linux/overflow.h:136 ../../../core-api/kernel-api:310:
#: include/linux/bio.h:268
msgid "``offset``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:89
msgid "amount to add"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:90
msgid ""
"Increments **var** by **offset** with wrap-around. Returns the resulting "
"value of **var**. Will not trip any wrap-around sanitizers."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:93
#: include/linux/overflow.h:139
msgid "Returns the new value of **var**."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:105
msgid "``check_sub_overflow (a, b, d)``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:103
msgid "Calculate subtraction with overflow checking"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:104
#: include/linux/overflow.h:119
msgid "minuend; value to subtract from"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:105
#: include/linux/overflow.h:120
msgid "subtrahend; value to subtract from **a**"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:106
msgid "pointer to store difference"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:109
msgid ""
"***d** holds the results of the attempted subtraction, regardless of whether "
"wrap-around occurred."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:119
msgid "``wrapping_sub (type, a, b)``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:117
msgid "Intentionally perform a wrapping subtraction"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:121
msgid ""
"Return the potentially wrapped-around subtraction without tripping any wrap-"
"around sanitizers that may be enabled."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:135
msgid "``wrapping_assign_sub (var, offset)``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:133
msgid "Intentionally perform a wrapping decrement assign"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:134
msgid "variable to be decremented"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:135
msgid "amount to subtract"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:136
msgid ""
"Decrements **var** by **offset** with wrap-around. Returns the resulting "
"value of **var**. Will not trip any wrap-around sanitizers."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:151
msgid "``check_mul_overflow (a, b, d)``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:149
msgid "Calculate multiplication with overflow checking"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:150
#: include/linux/overflow.h:165 include/linux/overflow.h:329
msgid "first factor"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:151
#: include/linux/overflow.h:166 include/linux/overflow.h:330
msgid "second factor"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:152
msgid "pointer to store product"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:155
msgid ""
"***d** holds the results of the attempted multiplication, regardless of "
"whether wrap-around occurred."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:165
msgid "``wrapping_mul (type, a, b)``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:163
msgid "Intentionally perform a wrapping multiplication"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:167
msgid ""
"Return the potentially wrapped-around multiplication without tripping any "
"wrap-around sanitizers that may be enabled."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:181
msgid "``check_shl_overflow (a, s, d)``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:179
msgid "Calculate a left-shifted value and check overflow"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:180
msgid "Value to be shifted"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:182
#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:389
msgid "``s``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:181
msgid "How many bits left to shift"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:182
msgid "Pointer to where to store the result"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:183
msgid "Computes ***d** = (**a** << **s**)"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:185
msgid ""
"Returns true if '***d**' cannot hold the result or when '**a** << **s**' "
"doesn't make sense. Example conditions:"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:188
msgid "'**a** << **s**' causes bits to be lost when stored in ***d**."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:189
msgid ""
"'**s**' is garbage (e.g. negative) or so large that the result of '**a** << "
"**s**' is guaranteed to be 0."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:191
msgid "'**a**' is negative."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:192
msgid "'**a** << **s**' sets the sign bit, if any, in '***d**'."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:194
msgid ""
"'***d**' will hold the results of the attempted shift, but is not considered "
"\"safe for use\" if true is returned."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:225
msgid "``overflows_type (n, T)``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:223
msgid ""
"helper for checking the overflows between value, variables, or data type"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:226
msgid "source constant value or variable to be checked"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:228
#: include/linux/overflow.h:316
msgid "``T``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:227
msgid "destination variable or data type proposed to store **x**"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:228
msgid ""
"Compares the **x** expression for whether or not it can safely fit in the "
"storage of the type in **T**. **x** and **T** can have different types. If "
"**x** is a constant expression, this will also resolve to a constant "
"expression."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:234
msgid "true if overflow can occur, false otherwise."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:244
msgid "``range_overflows (start, size, max)``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:242
#: include/linux/overflow.h:263
msgid "Check if a range is out of bounds"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:248
#: include/linux/overflow.h:266 include/linux/overflow.h:283
#: include/linux/overflow.h:301
msgid "``start``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:243
#: include/linux/overflow.h:265 include/linux/overflow.h:278
#: include/linux/overflow.h:300
msgid "Start of the range."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:245
#: include/linux/overflow.h:267 include/linux/overflow.h:280
#: include/linux/overflow.h:302 ../../../core-api/kernel-api:205:
#: include/linux/kfifo.h:122 include/linux/kfifo.h:145
#: include/linux/kfifo.h:353 include/linux/kfifo.h:389
msgid "``size``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:244
#: include/linux/overflow.h:266 include/linux/overflow.h:279
#: include/linux/overflow.h:301
msgid "Size of the range."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:246
#: include/linux/overflow.h:268 include/linux/overflow.h:281
#: include/linux/overflow.h:303
msgid "``max``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:245
#: include/linux/overflow.h:267 include/linux/overflow.h:280
#: include/linux/overflow.h:302
msgid "Exclusive upper boundary."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:246
msgid ""
"A strict check to determine if the range [**start**, **start** + **size**) "
"is invalid with respect to the allowable range [0, **max**). Any range "
"starting at or beyond **max** is considered an overflow, even if **size** is "
"0."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:251
#: include/linux/overflow.h:271
msgid "true if the range is out of bounds."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:265
msgid "``range_overflows_t (type, start, size, max)``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:264
#: include/linux/overflow.h:299
msgid "Data type to use."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:268
msgid "Same as range_overflows() but forcing the parameters to **type**."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:279
msgid "``range_end_overflows (start, size, max)``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:277
#: include/linux/overflow.h:298
msgid "Check if a range's endpoint is out of bounds"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:281
msgid ""
"Checks only if the endpoint of a range (**start** + **size**) exceeds "
"**max**. Unlike range_overflows(), a zero-sized range at the boundary "
"(**start** == **max**) is not considered an overflow. Useful for iterator-"
"style checks."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:286
#: include/linux/overflow.h:306
msgid "true if the endpoint exceeds the boundary."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:300
msgid "``range_end_overflows_t (type, start, size, max)``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:303
msgid "Same as range_end_overflows() but forcing the parameters to **type**."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:314
msgid "``castable_to_type (n, T)``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:312
msgid "like __same_type(), but also allows for casted literals"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:314
msgid "variable or constant value"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:315
msgid "variable or data type"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:316
msgid ""
"Unlike the __same_type() macro, this allows a constant value as the first "
"argument. If this value would not overflow into an assignment of the second "
"argument's type, it returns true. Otherwise, this falls back to "
"__same_type()."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:328
msgid "Calculate size_t multiplication with saturation at SIZE_MAX"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:334
msgid "``size_t factor1``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:331
msgid "``size_t factor2``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:332
msgid ""
"calculate **factor1** * **factor2**, both promoted to size_t, with any "
"overflow causing the return value to be SIZE_MAX. The lvalue must be size_t "
"to avoid implicit type conversion."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:347
msgid "Calculate size_t addition with saturation at SIZE_MAX"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:353
msgid "``size_t addend1``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:350
msgid "``size_t addend2``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:351
msgid ""
"calculate **addend1** + **addend2**, both promoted to size_t, with any "
"overflow causing the return value to be SIZE_MAX. The lvalue must be size_t "
"to avoid implicit type conversion."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:366
msgid "Calculate size_t subtraction with saturation at SIZE_MAX"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:372
msgid "``size_t minuend``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:367
msgid "value to subtract from"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:369
msgid "``size_t subtrahend``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:368
msgid "value to subtract from **minuend**"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:370
msgid ""
"calculate **minuend** - **subtrahend**, both promoted to size_t, with any "
"overflow causing the return value to be SIZE_MAX. For composition with the "
"size_add() and size_mul() helpers, neither argument may be SIZE_MAX (or the "
"result with be forced to SIZE_MAX). The lvalue must be size_t to avoid "
"implicit type conversion."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:390
msgid "``array_size (a, b)``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:388
msgid "Calculate size of 2-dimensional array."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:389
#: include/linux/overflow.h:401
msgid "dimension one"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:390
#: include/linux/overflow.h:402
msgid "dimension two"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:391
msgid "Calculates size of 2-dimensional array: **a** * **b**."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:394
#: include/linux/overflow.h:407
msgid "number of bytes needed to represent the array or SIZE_MAX on overflow."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:402
msgid "``array3_size (a, b, c)``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:400
msgid "Calculate size of 3-dimensional array."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:404
#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:392
#: include/linux/rcupdate.h:604 include/linux/rcupdate.h:650
#: include/linux/rcupdate.h:687 include/linux/rcupdate.h:703
#: include/linux/rcupdate.h:720 include/linux/rcupdate.h:748
#: ../../../core-api/kernel-api:406: include/linux/srcu.h:196
msgid "``c``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:403
msgid "dimension three"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:404
msgid "Calculates size of 3-dimensional array: **a** * **b** * **c**."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:415
msgid "``flex_array_size (p, member, count)``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:413
msgid ""
"Calculate size of a flexible array member within an enclosing structure."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:415
#: include/linux/overflow.h:431
msgid "Pointer to the structure."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:416
msgid "Name of the flexible array member."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:418
#: include/linux/overflow.h:434 include/linux/overflow.h:450
#: include/linux/overflow.h:469 include/linux/overflow.h:488
#: include/linux/overflow.h:501 ../../../core-api/kernel-api:205:
#: include/linux/kfifo.h:315
msgid "``count``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:417
#: include/linux/overflow.h:433 include/linux/overflow.h:449
msgid "Number of elements in the array."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:418
msgid ""
"Calculates size of a flexible array of **count** number of **member** "
"elements, at the end of structure **p**."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:422
#: include/linux/overflow.h:438 include/linux/overflow.h:456
msgid "number of bytes needed or SIZE_MAX on overflow."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:432
msgid "``struct_size (p, member, count)``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:430
msgid "Calculate size of structure with trailing flexible array."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:432
#: include/linux/overflow.h:448 include/linux/overflow.h:467
#: include/linux/overflow.h:486 include/linux/overflow.h:499
#: include/linux/overflow.h:518 include/linux/overflow.h:537
msgid "Name of the array member."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:434
msgid ""
"Calculates size of memory needed for structure of **p** followed by an array "
"of **count** number of **member** elements."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:448
msgid "``struct_size_t (type, member, count)``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:446
msgid "Calculate size of structure with trailing flexible array"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:447
msgid "structure type name."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:450
msgid ""
"Calculates size of memory needed for structure **type** followed by an array "
"of **count** number of **member** elements. Prefer using struct_size() when "
"possible instead, to keep calculations associated with a specific instance "
"variable of type **type**."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:464
msgid "``__DEFINE_FLEX (type, name, member, count, trailer...)``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:462
msgid ""
"helper macro for DEFINE_FLEX() family. Enables caller macro to pass "
"arbitrary trailing expressions"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:465
#: include/linux/overflow.h:484 include/linux/overflow.h:497
#: include/linux/overflow.h:516
msgid "structure type name, including \"struct\" keyword."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:467
#: include/linux/overflow.h:486 include/linux/overflow.h:499
#: include/linux/overflow.h:539 ../../../core-api/kernel-api:420:
#: kernel/rcu/tasks.h:91
msgid "``name``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:466
#: include/linux/overflow.h:485 include/linux/overflow.h:498
#: include/linux/overflow.h:517
msgid "Name for a variable to define."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:468
#: include/linux/overflow.h:487 include/linux/overflow.h:500
#: include/linux/overflow.h:520
msgid "Number of elements in the array; must be compile-time const."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:470
msgid "``trailer...``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:469
msgid "Trailing expressions for attributes and/or initializers."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:483
msgid "``_DEFINE_FLEX (type, name, member, count, initializer...)``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:481
msgid ""
"helper macro for DEFINE_FLEX() family. Enables caller macro to pass "
"(different) initializer."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:489
msgid "``initializer...``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:488
msgid "Initializer expression (e.g., pass `= { }` at minimum)."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:496
msgid "``DEFINE_RAW_FLEX (type, name, member, count)``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:494
msgid ""
"Define an on-stack instance of structure with a trailing flexible array "
"member, when it does not have a __counted_by annotation."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:501
msgid ""
"Define a zeroed, on-stack, instance of **type** structure with a trailing "
"flexible array member. Use __struct_size(**name**) to get compile-time size "
"of it afterwards. Use __member_size(**name->member**) to get compile-time "
"size of **name** members. Use STACK_FLEX_ARRAY_SIZE(**name**, **member**) to "
"get compile-time number of elements in array **member**."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:515
msgid "``DEFINE_FLEX (TYPE, NAME, MEMBER, COUNTER, COUNT)``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:513
msgid ""
"Define an on-stack instance of structure with a trailing flexible array "
"member."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:519
msgid "``TYPE``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:518
msgid "``NAME``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:519
msgid "``MEMBER``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:520
msgid "``COUNTER``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:519
msgid "Name of the __counted_by member."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:521
msgid "``COUNT``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:521
msgid ""
"Define a zeroed, on-stack, instance of **TYPE** structure with a trailing "
"flexible array member. Use __struct_size(**NAME**) to get compile-time size "
"of it afterwards. Use __member_size(**NAME->member**) to get compile-time "
"size of **NAME** members. Use STACK_FLEX_ARRAY_SIZE(**name**, **member**) to "
"get compile-time number of elements in array **member**."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:535
msgid "``STACK_FLEX_ARRAY_SIZE (name, array)``"
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:533
msgid ""
"helper macro for DEFINE_FLEX() family. Returns the number of elements in "
"**array**."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:536
msgid "Name for a variable defined in DEFINE_RAW_FLEX()/DEFINE_FLEX()."
msgstr ""

#: ../../../core-api/kernel-api:127: include/linux/overflow.h:538
msgid "``array``"
msgstr ""

#: ../../../core-api/kernel-api.rst:131
msgid "CRC Functions"
msgstr ""

#: ../../../core-api/kernel-api:133: lib/crc/crc4.c:16
msgid "calculate the 4-bit crc of a value."
msgstr ""

#: ../../../core-api/kernel-api:133: lib/crc/crc4.c:22
msgid "``uint8_t c``"
msgstr ""

#: ../../../core-api/kernel-api:133: lib/crc/crc4.c:17
msgid "starting crc4"
msgstr ""

#: ../../../core-api/kernel-api:133: lib/crc/crc4.c:19
msgid "``uint64_t x``"
msgstr ""

#: ../../../core-api/kernel-api:133: lib/crc/crc4.c:18
msgid "value to checksum"
msgstr ""

#: ../../../core-api/kernel-api:133: lib/crc/crc4.c:19
msgid "number of bits in **x** to checksum"
msgstr ""

#: ../../../core-api/kernel-api:133: lib/crc/crc4.c:20
msgid "Returns the crc4 value of **x**, using polynomial 0b10111."
msgstr ""

#: ../../../core-api/kernel-api:133: lib/crc/crc4.c:22
msgid ""
"The **x** value is treated as left-aligned, and bits above **bits** are "
"ignored in the crc calculations."
msgstr ""

#: ../../../core-api/kernel-api:136: lib/crc/crc7.c:53
msgid "update the CRC7 for the data buffer"
msgstr ""

#: ../../../core-api/kernel-api:136: lib/crc/crc7.c:59
#: ../../../core-api/kernel-api:139: lib/crc/crc8.c:74
msgid "``u8 crc``"
msgstr ""

#: ../../../core-api/kernel-api:136: lib/crc/crc7.c:54
msgid "previous CRC7 value"
msgstr ""

#: ../../../core-api/kernel-api:136: lib/crc/crc7.c:56
#: ../../../core-api/kernel-api:148: lib/crc/crc-itu-t.c:54
msgid "``const u8 *buffer``"
msgstr ""

#: ../../../core-api/kernel-api:136: lib/crc/crc7.c:55
#: ../../../core-api/kernel-api:142: lib/crc/crc16.c:50
#: ../../../core-api/kernel-api:145: lib/crc/crc-ccitt.c:54
#: ../../../core-api/kernel-api:148: lib/crc/crc-itu-t.c:53
msgid "data pointer"
msgstr ""

#: ../../../core-api/kernel-api:136: lib/crc/crc7.c:56
#: ../../../core-api/kernel-api:142: lib/crc/crc16.c:51
#: ../../../core-api/kernel-api:145: lib/crc/crc-ccitt.c:55
#: ../../../core-api/kernel-api:148: lib/crc/crc-itu-t.c:54
msgid "number of bytes in the buffer"
msgstr ""

#: ../../../core-api/kernel-api:136: lib/crc/crc7.c:58
#: ../../../core-api/kernel-api:151: include/linux/crc32.h:27
#: include/linux/crc32.h:55 include/linux/crc32.h:78
#: ../../../core-api/kernel-api:311: block/blk-core.c:483
#: ../../../core-api/kernel-api:338: block/genhd.c:1273
#: ../../../core-api/kernel-api:341: block/genhd.c:806 block/genhd.c:837
#: block/genhd.c:1539 ../../../core-api/kernel-api:344: block/bdev.c:1192
#: ../../../core-api/kernel-api:389: include/linux/clk.h:521
#: include/linux/clk.h:542 include/linux/clk.h:563 include/linux/clk.h:584
#: include/linux/clk.h:606 include/linux/clk.h:629 include/linux/clk.h:653
msgid "**Context**"
msgstr ""

#: ../../../core-api/kernel-api:136: lib/crc/crc7.c:57
msgid "any"
msgstr ""

#: ../../../core-api/kernel-api:136: lib/crc/crc7.c:58
msgid ""
"Returns the updated CRC7 value. The CRC7 is left-aligned in the byte (the "
"lsbit is always 0), as that makes the computation easier, and all callers "
"want it in that form."
msgstr ""

#: ../../../core-api/kernel-api:139: lib/crc/crc8.c:25
msgid "fill crc table for given polynomial in reverse bit order."
msgstr ""

#: ../../../core-api/kernel-api:139: lib/crc/crc8.c:31 lib/crc/crc8.c:53
msgid "``u8 table[CRC8_TABLE_SIZE]``"
msgstr ""

#: ../../../core-api/kernel-api:139: lib/crc/crc8.c:27 lib/crc/crc8.c:49
msgid "table to be filled."
msgstr ""

#: ../../../core-api/kernel-api:139: lib/crc/crc8.c:29 lib/crc/crc8.c:51
msgid "``u8 polynomial``"
msgstr ""

#: ../../../core-api/kernel-api:139: lib/crc/crc8.c:28 lib/crc/crc8.c:50
msgid "polynomial for which table is to be filled."
msgstr ""

#: ../../../core-api/kernel-api:139: lib/crc/crc8.c:47
msgid "fill crc table for given polynomial in regular bit order."
msgstr ""

#: ../../../core-api/kernel-api:139: lib/crc/crc8.c:68
msgid "calculate a crc8 over the given input data."
msgstr ""

#: ../../../core-api/kernel-api:139: lib/crc/crc8.c:74
msgid "``const u8 table[CRC8_TABLE_SIZE]``"
msgstr ""

#: ../../../core-api/kernel-api:139: lib/crc/crc8.c:70
msgid "crc table used for calculation."
msgstr ""

#: ../../../core-api/kernel-api:139: lib/crc/crc8.c:72
msgid "``const u8 *pdata``"
msgstr ""

#: ../../../core-api/kernel-api:139: lib/crc/crc8.c:71
msgid "pointer to data buffer."
msgstr ""

#: ../../../core-api/kernel-api:139: lib/crc/crc8.c:73
msgid "``size_t nbytes``"
msgstr ""

#: ../../../core-api/kernel-api:139: lib/crc/crc8.c:72
msgid "number of bytes in data buffer."
msgstr ""

#: ../../../core-api/kernel-api:139: lib/crc/crc8.c:73
msgid "previous returned crc8 value."
msgstr ""

#: ../../../core-api/kernel-api:142: lib/crc/crc16.c:48
msgid "compute the CRC-16 for the data buffer"
msgstr ""

#: ../../../core-api/kernel-api:142: lib/crc/crc16.c:54
#: ../../../core-api/kernel-api:145: lib/crc/crc-ccitt.c:57
#: ../../../core-api/kernel-api:148: lib/crc/crc-itu-t.c:56
msgid "``u16 crc``"
msgstr ""

#: ../../../core-api/kernel-api:142: lib/crc/crc16.c:49
#: ../../../core-api/kernel-api:145: lib/crc/crc-ccitt.c:53
#: ../../../core-api/kernel-api:148: lib/crc/crc-itu-t.c:52
msgid "previous CRC value"
msgstr ""

#: ../../../core-api/kernel-api:142: lib/crc/crc16.c:51
msgid "``const u8 *p``"
msgstr ""

#: ../../../core-api/kernel-api:142: lib/crc/crc16.c:52
msgid "Returns the updated CRC value."
msgstr ""

#: ../../../core-api/kernel-api:145: lib/crc/crc-ccitt.c:51
msgid "recompute the CRC (CRC-CCITT variant) for the data buffer"
msgstr ""

#: ../../../core-api/kernel-api:145: lib/crc/crc-ccitt.c:55
msgid "``u8 const *buffer``"
msgstr ""

#: ../../../core-api/kernel-api:148: lib/crc/crc-itu-t.c:50
msgid "Compute the CRC-ITU-T for the data buffer"
msgstr ""

#: ../../../core-api/kernel-api:148: lib/crc/crc-itu-t.c:55
msgid "Returns the updated CRC value"
msgstr ""

#: ../../../core-api/kernel-api:151: include/linux/crc32.h:9
msgid "Compute least-significant-bit-first IEEE CRC-32"
msgstr ""

#: ../../../core-api/kernel-api:151: include/linux/crc32.h:15
#: include/linux/crc32.h:46 include/linux/crc32.h:68
msgid "``u32 crc``"
msgstr ""

#: ../../../core-api/kernel-api:151: include/linux/crc32.h:10
#: include/linux/crc32.h:41 include/linux/crc32.h:63
msgid ""
"Initial CRC value.  ~0 (recommended) or 0 for a new CRC computation, or the "
"previous CRC value if computing incrementally."
msgstr ""

#: ../../../core-api/kernel-api:151: include/linux/crc32.h:13
#: include/linux/crc32.h:44 include/linux/crc32.h:66
#: ../../../core-api/kernel-api:153: include/linux/crc64.h:12
#: include/linux/crc64.h:21
msgid "``const void *p``"
msgstr ""

#: ../../../core-api/kernel-api:151: include/linux/crc32.h:12
#: include/linux/crc32.h:43 include/linux/crc32.h:65
msgid "Pointer to the data buffer"
msgstr ""

#: ../../../core-api/kernel-api:151: include/linux/crc32.h:13
#: include/linux/crc32.h:44 include/linux/crc32.h:66
msgid "Length of data in bytes"
msgstr ""

#: ../../../core-api/kernel-api:151: include/linux/crc32.h:14
msgid ""
"This implements the CRC variant that is often known as the IEEE CRC-32, or "
"simply CRC-32, and is widely used in Ethernet and other applications:"
msgstr ""

#: ../../../core-api/kernel-api:151: include/linux/crc32.h:17
#: include/linux/crc32.h:50
msgid ""
"Polynomial: x^32 + x^26 + x^23 + x^22 + x^16 + x^12 + x^11 + x^10 + x^8 +"
msgstr ""

#: ../../../core-api/kernel-api:151: include/linux/crc32.h:18
#: include/linux/crc32.h:51
msgid "x^7 + x^5 + x^4 + x^2 + x^1 + x^0"
msgstr ""

#: ../../../core-api/kernel-api:151: include/linux/crc32.h:19
#: include/linux/crc32.h:72
msgid "Bit order: Least-significant-bit-first"
msgstr ""

#: ../../../core-api/kernel-api:151: include/linux/crc32.h:20
msgid "Polynomial in integer form: 0xedb88320"
msgstr ""

#: ../../../core-api/kernel-api:151: include/linux/crc32.h:22
#: include/linux/crc32.h:75
msgid ""
"This does *not* invert the CRC at the beginning or end.  The caller is "
"expected to do that if it needs to.  Inverting at both ends is recommended."
msgstr ""

#: ../../../core-api/kernel-api:151: include/linux/crc32.h:25
msgid "For new applications, prefer to use CRC-32C instead.  See crc32c()."
msgstr ""

#: ../../../core-api/kernel-api:151: include/linux/crc32.h:28
#: include/linux/crc32.h:56 include/linux/crc32.h:79
msgid "Any context"
msgstr ""

#: ../../../core-api/kernel-api:151: include/linux/crc32.h:29
#: include/linux/crc32.h:57 include/linux/crc32.h:80
msgid "The new CRC value"
msgstr ""

#: ../../../core-api/kernel-api:151: include/linux/crc32.h:40
msgid "Compute most-significant-bit-first IEEE CRC-32"
msgstr ""

#: ../../../core-api/kernel-api:151: include/linux/crc32.h:45
msgid ""
"crc32_be() is the same as crc32_le() except that crc32_be() computes the "
"*most-significant-bit-first* variant of the CRC.  I.e., within each byte, "
"the most significant bit is processed first (treated as highest order "
"polynomial coefficient).  The same bit order is also used for the CRC value "
"itself:"
msgstr ""

#: ../../../core-api/kernel-api:151: include/linux/crc32.h:52
msgid "Bit order: Most-significant-bit-first"
msgstr ""

#: ../../../core-api/kernel-api:151: include/linux/crc32.h:53
msgid "Polynomial in integer form: 0x04c11db7"
msgstr ""

#: ../../../core-api/kernel-api:151: include/linux/crc32.h:62
msgid "Compute CRC-32C"
msgstr ""

#: ../../../core-api/kernel-api:151: include/linux/crc32.h:67
msgid ""
"This implements CRC-32C, i.e. the Castagnoli CRC.  This is the recommended "
"CRC variant to use in new applications that want a 32-bit CRC."
msgstr ""

#: ../../../core-api/kernel-api:151: include/linux/crc32.h:70
msgid ""
"Polynomial: x^32 + x^28 + x^27 + x^26 + x^25 + x^23 + x^22 + x^20 + x^19 +"
msgstr ""

#: ../../../core-api/kernel-api:151: include/linux/crc32.h:71
msgid "x^18 + x^14 + x^13 + x^11 + x^10 + x^9 + x^8 + x^6 + x^0"
msgstr ""

#: ../../../core-api/kernel-api:151: include/linux/crc32.h:73
msgid "Polynomial in integer form: 0x82f63b78"
msgstr ""

#: ../../../core-api/kernel-api:153: include/linux/crc64.h:8
msgid "Calculate bitwise big-endian ECMA-182 CRC64"
msgstr ""

#: ../../../core-api/kernel-api:153: include/linux/crc64.h:14
#: include/linux/crc64.h:23
msgid "``u64 crc``"
msgstr ""

#: ../../../core-api/kernel-api:153: include/linux/crc64.h:9
msgid ""
"seed value for computation. 0 or (u64)~0 for a new CRC calculation, or the "
"previous crc64 value if computing incrementally."
msgstr ""

#: ../../../core-api/kernel-api:153: include/linux/crc64.h:11
#: include/linux/crc64.h:20
msgid "pointer to buffer over which CRC64 is run"
msgstr ""

#: ../../../core-api/kernel-api:153: include/linux/crc64.h:12
#: include/linux/crc64.h:21
msgid "length of buffer **p**"
msgstr ""

#: ../../../core-api/kernel-api:153: include/linux/crc64.h:17
msgid "Calculate CRC64-NVME"
msgstr ""

#: ../../../core-api/kernel-api:153: include/linux/crc64.h:18
msgid ""
"seed value for computation. 0 for a new CRC calculation, or the previous "
"crc64 value if computing incrementally."
msgstr ""

#: ../../../core-api/kernel-api:153: include/linux/crc64.h:22
msgid ""
"This computes the CRC64 defined in the NVME NVM Command Set Specification, "
"*including the bitwise inversion at the beginning and end*."
msgstr ""

#: ../../../core-api/kernel-api.rst:156
msgid "Base 2 log and power Functions"
msgstr ""

#: ../../../core-api/kernel-api:158: include/linux/log2.h:37
msgid "check if a value is a power of two"
msgstr ""

#: ../../../core-api/kernel-api:158: include/linux/log2.h:43
#: include/linux/log2.h:57 include/linux/log2.h:67
msgid "``unsigned long n``"
msgstr ""

#: ../../../core-api/kernel-api:158: include/linux/log2.h:38
msgid "the value to check"
msgstr ""

#: ../../../core-api/kernel-api:158: include/linux/log2.h:39
msgid ""
"Determine whether some value is a power of two, where zero is *not* "
"considered a power of two."
msgstr ""

#: ../../../core-api/kernel-api:158: include/linux/log2.h:42
msgid "true if **n** is a power of 2, otherwise false."
msgstr ""

#: ../../../core-api/kernel-api:158: include/linux/log2.h:51
msgid "round up to nearest power of two"
msgstr ""

#: ../../../core-api/kernel-api:158: include/linux/log2.h:52
msgid "value to round up"
msgstr ""

#: ../../../core-api/kernel-api:158: include/linux/log2.h:61
msgid "round down to nearest power of two"
msgstr ""

#: ../../../core-api/kernel-api:158: include/linux/log2.h:62
msgid "value to round down"
msgstr ""

#: ../../../core-api/kernel-api:158: include/linux/log2.h:73
msgid "``const_ilog2 (n)``"
msgstr ""

#: ../../../core-api/kernel-api:158: include/linux/log2.h:71
msgid "log base 2 of 32-bit or a 64-bit constant unsigned value"
msgstr ""

#: ../../../core-api/kernel-api:158: include/linux/log2.h:72
#: include/linux/log2.h:148 include/linux/log2.h:168 include/linux/log2.h:185
#: include/linux/log2.h:206 include/linux/log2.h:237 include/linux/log2.h:261
msgid "parameter"
msgstr ""

#: ../../../core-api/kernel-api:158: include/linux/log2.h:73
msgid ""
"Use this where sparse expects a true constant expression, e.g. for array "
"indices."
msgstr ""

#: ../../../core-api/kernel-api:158: include/linux/log2.h:149
msgid "``ilog2 (n)``"
msgstr ""

#: ../../../core-api/kernel-api:158: include/linux/log2.h:147
msgid "log base 2 of 32-bit or a 64-bit unsigned value"
msgstr ""

#: ../../../core-api/kernel-api:158: include/linux/log2.h:149
msgid ""
"constant-capable log of base 2 calculation - this can be used to initialise "
"global variables from constant data, hence the massive ternary operator "
"construction"
msgstr ""

#: ../../../core-api/kernel-api:158: include/linux/log2.h:153
msgid ""
"selects the appropriately-sized optimised version depending on sizeof(n)"
msgstr ""

#: ../../../core-api/kernel-api:158: include/linux/log2.h:169
msgid "``roundup_pow_of_two (n)``"
msgstr ""

#: ../../../core-api/kernel-api:158: include/linux/log2.h:167
msgid "round the given value up to nearest power of two"
msgstr ""

#: ../../../core-api/kernel-api:158: include/linux/log2.h:169
msgid ""
"round the given value up to the nearest power of two - the result is "
"undefined when n == 0 - this can be used to initialise global variables from "
"constant data"
msgstr ""

#: ../../../core-api/kernel-api:158: include/linux/log2.h:186
msgid "``rounddown_pow_of_two (n)``"
msgstr ""

#: ../../../core-api/kernel-api:158: include/linux/log2.h:184
msgid "round the given value down to nearest power of two"
msgstr ""

#: ../../../core-api/kernel-api:158: include/linux/log2.h:186
msgid ""
"round the given value down to the nearest power of two - the result is "
"undefined when n == 0 - this can be used to initialise global variables from "
"constant data"
msgstr ""

#: ../../../core-api/kernel-api:158: include/linux/log2.h:207
msgid "``order_base_2 (n)``"
msgstr ""

#: ../../../core-api/kernel-api:158: include/linux/log2.h:205
msgid "calculate the (rounded up) base 2 order of the argument"
msgstr ""

#: ../../../core-api/kernel-api:158: include/linux/log2.h:207
msgid "The first few values calculated by this routine:"
msgstr ""

#: ../../../core-api/kernel-api:158: include/linux/log2.h:208
msgid ""
"ob2(0) = 0 ob2(1) = 0 ob2(2) = 1 ob2(3) = 2 ob2(4) = 2 ob2(5) = 3 ... and so "
"on."
msgstr ""

#: ../../../core-api/kernel-api:158: include/linux/log2.h:238
msgid "``bits_per (n)``"
msgstr ""

#: ../../../core-api/kernel-api:158: include/linux/log2.h:236
msgid "calculate the number of bits required for the argument"
msgstr ""

#: ../../../core-api/kernel-api:158: include/linux/log2.h:238
msgid ""
"This is constant-capable and can be used for compile time initializations, e."
"g bitfields."
msgstr ""

#: ../../../core-api/kernel-api:158: include/linux/log2.h:241
msgid ""
"The first few values calculated by this routine: bf(0) = 1 bf(1) = 1 bf(2) = "
"2 bf(3) = 2 bf(4) = 3 ... and so on."
msgstr ""

#: ../../../core-api/kernel-api:158: include/linux/log2.h:260
msgid "return highest power-of-2 factor"
msgstr ""

#: ../../../core-api/kernel-api:158: include/linux/log2.h:266
msgid "``unsigned int n``"
msgstr ""

#: ../../../core-api/kernel-api:158: include/linux/log2.h:262
msgid ""
"find highest power-of-2 which is evenly divisible into n. 0 is returned for "
"n == 0 or 1."
msgstr ""

#: ../../../core-api/kernel-api.rst:162
msgid "Integer log and power Functions"
msgstr ""

#: ../../../core-api/kernel-api:164: include/linux/int_log.h:14
msgid "computes log2 of a value; the result is shifted left by 24 bits"
msgstr ""

#: ../../../core-api/kernel-api:164: include/linux/int_log.h:20
#: include/linux/int_log.h:42
msgid "``u32 value``"
msgstr ""

#: ../../../core-api/kernel-api:164: include/linux/int_log.h:16
#: include/linux/int_log.h:38
msgid "The value (must be != 0)"
msgstr ""

#: ../../../core-api/kernel-api:164: include/linux/int_log.h:17
#: include/linux/int_log.h:39
msgid "to use rational values you can use the following method:"
msgstr ""

#: ../../../core-api/kernel-api:164: include/linux/int_log.h:19
msgid "intlog2(value) = intlog2(value * 2^x) - x * 2^24"
msgstr ""

#: ../../../core-api/kernel-api:164: include/linux/int_log.h:21
msgid "Some usecase examples:"
msgstr ""

#: ../../../core-api/kernel-api:164: include/linux/int_log.h:23
msgid "intlog2(8) will give 3 << 24 = 3 * 2^24"
msgstr ""

#: ../../../core-api/kernel-api:164: include/linux/int_log.h:25
msgid "intlog2(9) will give 3 << 24 + ... = 3.16... * 2^24"
msgstr ""

#: ../../../core-api/kernel-api:164: include/linux/int_log.h:27
msgid "intlog2(1.5) = intlog2(3) - 2^24 = 0.584... * 2^24"
msgstr ""

#: ../../../core-api/kernel-api:164: include/linux/int_log.h:31
msgid "log2(value) * 2^24"
msgstr ""

#: ../../../core-api/kernel-api:164: include/linux/int_log.h:36
msgid "computes log10 of a value; the result is shifted left by 24 bits"
msgstr ""

#: ../../../core-api/kernel-api:164: include/linux/int_log.h:41
msgid "intlog10(value) = intlog10(value * 10^x) - x * 2^24"
msgstr ""

#: ../../../core-api/kernel-api:164: include/linux/int_log.h:43
msgid "An usecase example:"
msgstr ""

#: ../../../core-api/kernel-api:164: include/linux/int_log.h:45
msgid "intlog10(1000) will give 3 << 24 = 3 * 2^24"
msgstr ""

#: ../../../core-api/kernel-api:164: include/linux/int_log.h:47
msgid "due to the implementation intlog10(1000) might be not exactly 3 * 2^24"
msgstr ""

#: ../../../core-api/kernel-api:164: include/linux/int_log.h:49
msgid "look at intlog2 for similar examples"
msgstr ""

#: ../../../core-api/kernel-api:164: include/linux/int_log.h:52
msgid "log10(value) * 2^24"
msgstr ""

#: ../../../core-api/kernel-api:166: lib/math/int_pow.c:13
msgid "computes the exponentiation of the given base and exponent"
msgstr ""

#: ../../../core-api/kernel-api:166: lib/math/int_pow.c:19
msgid "``u64 base``"
msgstr ""

#: ../../../core-api/kernel-api:166: lib/math/int_pow.c:14
msgid "base which will be raised to the given power"
msgstr ""

#: ../../../core-api/kernel-api:166: lib/math/int_pow.c:16
msgid "``unsigned int exp``"
msgstr ""

#: ../../../core-api/kernel-api:166: lib/math/int_pow.c:15
msgid "power to be raised to"
msgstr ""

#: ../../../core-api/kernel-api:166: lib/math/int_pow.c:16
msgid "Computes: pow(base, exp), i.e. **base** raised to the **exp** power"
msgstr ""

#: ../../../core-api/kernel-api:169: lib/math/int_sqrt.c:15
msgid "computes the integer square root"
msgstr ""

#: ../../../core-api/kernel-api:169: lib/math/int_sqrt.c:21
msgid "``unsigned long x``"
msgstr ""

#: ../../../core-api/kernel-api:169: lib/math/int_sqrt.c:16
msgid "integer of which to calculate the sqrt"
msgstr ""

#: ../../../core-api/kernel-api:169: lib/math/int_sqrt.c:17
msgid "Computes: floor(sqrt(x))"
msgstr ""

#: ../../../core-api/kernel-api:169: lib/math/int_sqrt.c:45
msgid "strongly typed int_sqrt function when minimum 64 bit input is expected."
msgstr ""

#: ../../../core-api/kernel-api:169: lib/math/int_sqrt.c:51
#: ../../../core-api/kernel-api:178: include/linux/math64.h:366
msgid "``u64 x``"
msgstr ""

#: ../../../core-api/kernel-api:169: lib/math/int_sqrt.c:47
msgid "64bit integer of which to calculate the sqrt"
msgstr ""

#: ../../../core-api/kernel-api.rst:173
msgid "Division Functions"
msgstr ""

#: ../../../core-api/kernel-api:175: include/asm-generic/div64.h:34
msgid "``do_div (n, base)``"
msgstr ""

#: ../../../core-api/kernel-api:175: include/asm-generic/div64.h:32
msgid "returns 2 values: calculate remainder and update new dividend"
msgstr ""

#: ../../../core-api/kernel-api:175: include/asm-generic/div64.h:33
msgid "uint64_t dividend (will be updated)"
msgstr ""

#: ../../../core-api/kernel-api:175: include/asm-generic/div64.h:35
msgid "``base``"
msgstr ""

#: ../../../core-api/kernel-api:175: include/asm-generic/div64.h:34
msgid "uint32_t divisor"
msgstr ""

#: ../../../core-api/kernel-api:175: include/asm-generic/div64.h:35
msgid "Summary: ``uint32_t remainder = n % base;`` ``n = n / base;``"
msgstr ""

#: ../../../core-api/kernel-api:175: include/asm-generic/div64.h:40
msgid "(uint32_t)remainder"
msgstr ""

#: ../../../core-api/kernel-api:175: include/asm-generic/div64.h:42
msgid ""
"macro parameter **n** is evaluated multiple times, beware of side effects!"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:16
msgid "unsigned 64bit divide with 32bit divisor with remainder"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:22
#: include/linux/math64.h:53 include/linux/math64.h:67
#: include/linux/math64.h:122
msgid "``u64 dividend``"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:17
#: include/linux/math64.h:48 include/linux/math64.h:62
#: include/linux/math64.h:117 include/linux/math64.h:289
#: include/linux/math64.h:302 include/linux/math64.h:315
#: include/linux/math64.h:328
msgid "unsigned 64bit dividend"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:19
#: include/linux/math64.h:119
msgid "``u32 divisor``"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:18
#: include/linux/math64.h:118 include/linux/math64.h:303
#: include/linux/math64.h:329
msgid "unsigned 32bit divisor"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:20
msgid "``u32 *remainder``"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:19
msgid "pointer to unsigned 32bit remainder"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:21
#: include/linux/math64.h:38 include/linux/math64.h:52
msgid "sets ``*remainder``, then returns dividend / divisor"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:22
msgid ""
"This is commonly provided by 32bit archs to provide an optimized 64bit "
"divide."
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:33
msgid "signed 64bit divide with 32bit divisor with remainder"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:39
#: include/linux/math64.h:79 include/linux/math64.h:141
msgid "``s64 dividend``"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:34
#: include/linux/math64.h:74 include/linux/math64.h:136
#: include/linux/math64.h:341
msgid "signed 64bit dividend"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:36
#: include/linux/math64.h:138
msgid "``s32 divisor``"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:35
#: include/linux/math64.h:137 include/linux/math64.h:342
msgid "signed 32bit divisor"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:37
msgid "``s32 *remainder``"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:36
msgid "pointer to signed 32bit remainder"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:47
msgid "unsigned 64bit divide with 64bit divisor and remainder"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:50
#: include/linux/math64.h:64
msgid "``u64 divisor``"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:49
#: include/linux/math64.h:63 include/linux/math64.h:290
#: include/linux/math64.h:316
msgid "unsigned 64bit divisor"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:51
msgid "``u64 *remainder``"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:50
msgid "pointer to unsigned 64bit remainder"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:61
msgid "unsigned 64bit divide with 64bit divisor"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:65
#: include/linux/math64.h:77 include/linux/math64.h:124
#: include/linux/math64.h:139
msgid "dividend / divisor"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:73
msgid "signed 64bit divide with 64bit divisor"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:76
msgid "``s64 divisor``"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:75
msgid "signed 64bit divisor"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:116
msgid "unsigned 64bit divide with 32bit divisor"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:119
msgid ""
"This is the most common 64bit divide and should be used if possible, as many "
"32bit archs can optimize this variant better than a full 64bit divide."
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:135
msgid "signed 64bit divide with 32bit divisor"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:290
msgid "``DIV64_U64_ROUND_UP (ll, d)``"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:288
msgid "unsigned 64bit divide with 64bit divisor rounded up"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:294
#: include/linux/math64.h:307
msgid "``ll``"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:291
msgid "Divide unsigned 64bit dividend by unsigned 64bit divisor and round up."
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:295
#: include/linux/math64.h:308
msgid "dividend / divisor rounded up"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:303
msgid "``DIV_U64_ROUND_UP (ll, d)``"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:301
msgid "unsigned 64bit divide with 32bit divisor rounded up"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:304
msgid "Divide unsigned 64bit dividend by unsigned 32bit divisor and round up."
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:316
msgid "``DIV64_U64_ROUND_CLOSEST (dividend, divisor)``"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:314
msgid "unsigned 64bit divide with 64bit divisor rounded to nearest integer"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:320
#: include/linux/math64.h:333 include/linux/math64.h:346
msgid "``dividend``"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:317
#: include/linux/math64.h:330 include/linux/math64.h:343
msgid "``divisor``"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:317
msgid ""
"Divide unsigned 64bit dividend by unsigned 64bit divisor and round to "
"closest integer."
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:321
#: include/linux/math64.h:334 include/linux/math64.h:347
msgid "dividend / divisor rounded to nearest integer"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:329
msgid "``DIV_U64_ROUND_CLOSEST (dividend, divisor)``"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:327
msgid "unsigned 64bit divide with 32bit divisor rounded to nearest integer"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:330
msgid ""
"Divide unsigned 64bit dividend by unsigned 32bit divisor and round to "
"closest integer."
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:342
msgid "``DIV_S64_ROUND_CLOSEST (dividend, divisor)``"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:340
msgid "signed 64bit divide with 32bit divisor rounded to nearest integer"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:343
msgid ""
"Divide signed 64bit dividend by signed 32bit divisor and round to closest "
"integer."
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:360
msgid "Round up a 64bit value to the next specified 32bit multiple"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:361
msgid "the value to up"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:363
msgid "``u32 y``"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:362
msgid "32bit multiple to round up to"
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:363
msgid ""
"Rounds **x** to the next multiple of **y**. For 32bit **x** values, see "
"roundup and the faster round_up() for powers of 2."
msgstr ""

#: ../../../core-api/kernel-api:178: include/linux/math64.h:367
msgid "rounded up value."
msgstr ""

#: ../../../core-api/kernel-api:181: lib/math/gcd.c:46
msgid "calculate and return the greatest common divisor of 2 unsigned longs"
msgstr ""

#: ../../../core-api/kernel-api:181: lib/math/gcd.c:52
msgid "``unsigned long a``"
msgstr ""

#: ../../../core-api/kernel-api:181: lib/math/gcd.c:47
msgid "first value"
msgstr ""

#: ../../../core-api/kernel-api:181: lib/math/gcd.c:49
msgid "``unsigned long b``"
msgstr ""

#: ../../../core-api/kernel-api:181: lib/math/gcd.c:48
msgid "second value"
msgstr ""

#: ../../../core-api/kernel-api.rst:185
msgid "UUID/GUID"
msgstr ""

#: ../../../core-api/kernel-api:187: lib/uuid.c:25
msgid "generate a random UUID"
msgstr ""

#: ../../../core-api/kernel-api:187: lib/uuid.c:31
msgid "``unsigned char uuid[16]``"
msgstr ""

#: ../../../core-api/kernel-api:187: lib/uuid.c:26
msgid "where to put the generated UUID"
msgstr ""

#: ../../../core-api/kernel-api:187: lib/uuid.c:27
msgid "Random UUID interface"
msgstr ""

#: ../../../core-api/kernel-api:187: lib/uuid.c:29
msgid ""
"Used to create a Boot ID or a filesystem UUID/GUID, but can be useful for "
"other kernel drivers."
msgstr ""

#: ../../../core-api/kernel-api:187: lib/uuid.c:77
msgid "checks if a UUID string is valid"
msgstr ""

#: ../../../core-api/kernel-api:187: lib/uuid.c:83
msgid "``const char *uuid``"
msgstr ""

#: ../../../core-api/kernel-api:187: lib/uuid.c:78
msgid "UUID string to check"
msgstr ""

#: ../../../core-api/kernel-api:187: lib/uuid.c:80
msgid "It checks if the UUID string is following the format:"
msgstr ""

#: ../../../core-api/kernel-api:187: lib/uuid.c:81
msgid "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
msgstr ""

#: ../../../core-api/kernel-api:187: lib/uuid.c:83
msgid "where x is a hex digit."
msgstr ""

#: ../../../core-api/kernel-api:187: lib/uuid.c:86
msgid "true if input is valid UUID string."
msgstr ""

#: ../../../core-api/kernel-api.rst:191
msgid "Kernel IPC facilities"
msgstr ""

#: ../../../core-api/kernel-api.rst:194
msgid "IPC utilities"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:81
msgid "initialise ipc subsystem"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:87
#: ../../../core-api/kernel-api:283: security/security.c:529
#: security/security.c:6102 security/security.c:6128 security/security.c:6141
#: ../../../core-api/kernel-api:304: kernel/acct.c:621
#: ../../../core-api/kernel-api:350: fs/char_dev.c:642
#: ../../../core-api/kernel-api:389: include/linux/clk.h:943
#: include/linux/clk.h:952 ../../../core-api/kernel-api:398:
#: include/linux/rcupdate.h:234 include/linux/rcupdate.h:825
#: include/linux/rcupdate.h:889 include/linux/rcupdate.h:909
#: include/linux/rcupdate.h:932 include/linux/rcupdate.h:946
#: include/linux/rcupdate.h:977 ../../../core-api/kernel-api:400:
#: kernel/rcu/tree.c:244 kernel/rcu/tree.c:376 kernel/rcu/tree.c:624
#: kernel/rcu/tree.c:642 kernel/rcu/tree.c:738 kernel/rcu/tree.c:3310
#: kernel/rcu/tree.c:3402 kernel/rcu/tree.c:3480 kernel/rcu/tree.c:3803
#: kernel/rcu/tree.c:3914 ../../../core-api/kernel-api:402:
#: kernel/rcu/tree_exp.h:907 kernel/rcu/tree_exp.h:1017
#: ../../../core-api/kernel-api:404: kernel/rcu/update.c:167
#: kernel/rcu/update.c:180 kernel/rcu/update.c:207 kernel/rcu/update.c:220
#: kernel/rcu/update.c:332 kernel/rcu/update.c:362 kernel/rcu/update.c:576
#: ../../../core-api/kernel-api:406: include/linux/srcu.h:80
#: include/linux/srcu.h:487 include/linux/srcu.h:501
#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:1208
#: kernel/rcu/tasks.h:1232 kernel/rcu/tasks.h:1398 kernel/rcu/tasks.h:2029
#: kernel/rcu/tasks.h:2053 ../../../core-api/kernel-api:422:
#: kernel/rcu/tree_stall.h:187 ../../../core-api/kernel-api:424:
#: include/linux/rcupdate_trace.h:44 include/linux/rcupdate_trace.h:68
msgid "``void``"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:1
#: ../../../core-api/kernel-api:283: security/security.c:1
#: ../../../core-api/kernel-api:304: kernel/acct.c:1
#: ../../../core-api/kernel-api:350: fs/char_dev.c:1
#: ../../../core-api/kernel-api:389: include/linux/clk.h:1
#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1
#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:1
#: ../../../core-api/kernel-api:402: kernel/rcu/tree_exp.h:1
#: ../../../core-api/kernel-api:404: kernel/rcu/update.c:1
#: ../../../core-api/kernel-api:406: include/linux/srcu.h:1
#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:1
#: ../../../core-api/kernel-api:422: kernel/rcu/tree_stall.h:1
#: ../../../core-api/kernel-api:424: include/linux/rcupdate_trace.h:1
msgid "no arguments"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:82
msgid ""
"The various sysv ipc resources (semaphores, messages and shared memory) are "
"initialised."
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:85
msgid ""
"A callback routine is registered into the memory hotplug notifier chain: "
"since msgmni scales to lowmem this callback routine will be called upon "
"successful memory add / remove to recompute msmgni."
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:109
msgid "initialise ipc identifiers"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:115 ipc/util.c:169
#: ipc/util.c:270 ipc/util.c:333 ipc/util.c:387 ipc/util.c:446 ipc/util.c:461
#: ipc/util.c:496 ipc/util.c:521 ipc/util.c:624 ipc/util.c:645 ipc/util.c:664
#: ipc/util.c:703 ipc/util.c:789
msgid "``struct ipc_ids *ids``"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:110 ipc/util.c:164
#: ipc/util.c:265 ipc/util.c:332 ipc/util.c:386 ipc/util.c:441 ipc/util.c:456
#: ipc/util.c:491 ipc/util.c:516 ipc/util.c:620 ipc/util.c:641 ipc/util.c:663
#: ipc/util.c:784
msgid "ipc identifier set"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:111
msgid ""
"Set up the sequence range to use for the ipc identifier range (limited below "
"ipc_mni) then initialise the keys hashtable and ids idr."
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:132
msgid "create a proc interface for sysipc types using a seq_file interface."
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:133
msgid "Path in procfs"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:135
msgid "``const char *header``"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:134
msgid "Banner to be printed at the beginning of the file."
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:136
msgid "``int ids``"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:135
msgid "ipc id table to iterate."
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:137
msgid "``int (*show)(struct seq_file *, void *)``"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:136
msgid "show routine."
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:163
msgid "find a key in an ipc identifier set"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:166
msgid "``key_t key``"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:165
msgid "key to find"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:166
msgid ""
"Returns the locked pointer to the ipc structure if found or NULL otherwise. "
"If key is found ipc points to the owning ipc structure"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:169 ipc/util.c:275
msgid "Called with writer ipc_ids.rwsem held."
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:264
msgid "add an ipc identifier"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:267
msgid "``struct kern_ipc_perm *new``"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:266
msgid "new ipc permission set"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:268 ipc/util.c:458
msgid "``int limit``"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:267
msgid "limit for the number of used ids"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:268
msgid ""
"Add an entry 'new' to the ipc ids idr. The permissions object is initialised "
"and the first free entry is set up and the index assigned is returned. The "
"'new' entry is returned in a locked state on success."
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:272
msgid ""
"On failure the entry is not locked and a negative err-code is returned. The "
"caller must use ipc_rcu_putref() to free the identifier."
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:330
msgid "create a new ipc object"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:336 ipc/util.c:357
#: ipc/util.c:390 ipc/util.c:549 ipc/util.c:667 ipc/util.c:706
msgid "``struct ipc_namespace *ns``"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:331 ipc/util.c:352
#: ipc/util.c:385 ipc/util.c:544 ipc/util.c:701
msgid "ipc namespace"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:334 ipc/util.c:355
#: ipc/util.c:388 ipc/util.c:665
msgid "``const struct ipc_ops *ops``"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:333 ipc/util.c:387
msgid "the actual creation routine to call"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:335 ipc/util.c:356
#: ipc/util.c:389 ipc/util.c:667
msgid "``struct ipc_params *params``"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:334 ipc/util.c:355
#: ipc/util.c:388
msgid "its parameters"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:335
msgid ""
"This routine is called by sys_msgget, sys_semget() and sys_shmget() when the "
"key is IPC_PRIVATE."
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:351
msgid "check security and permissions for an ipc object"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:354 ipc/util.c:443
#: ipc/util.c:493 ipc/util.c:518 ipc/util.c:546
#: ../../../core-api/kernel-api:283: security/security.c:3812
#: security/security.c:3826 ../../../core-api/kernel-api:295:
#: kernel/auditsc.c:2598
msgid "``struct kern_ipc_perm *ipcp``"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:353 ipc/util.c:545
msgid "ipc permission set"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:354
msgid "the actual security routine to call"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:356
msgid ""
"This routine is called by sys_msgget(), sys_semget() and sys_shmget() when "
"the key is not IPC_PRIVATE and that key already exists in the ds IDR."
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:360 ipc/util.c:394
msgid "On success, the ipc id is returned."
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:362
msgid "It is called with ipc_ids.rwsem and ipcp->lock held."
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:384
msgid "get an ipc object or create a new one"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:389
msgid ""
"This routine is called by sys_msgget, sys_semget() and sys_shmget() when the "
"key is not IPC_PRIVATE. It adds a new entry if the key is not found and does "
"some permission / security checkings if the key is found."
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:440
msgid "remove an ipc from the key hashtable"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:442
msgid "ipc perm structure containing the key to remove"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:443 ipc/util.c:493
#: ipc/util.c:518
msgid ""
"ipc_ids.rwsem (as a writer) and the spinlock for this ID are held before "
"this function is called, and remain locked on the exit."
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:455
msgid "search for the highest assigned index"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:457
msgid "known upper limit for highest assigned index"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:458
msgid ""
"The function determines the highest assigned index in **ids**. It is "
"intended to be called when ids->max_idx needs to be updated. Updating ids-"
">max_idx is necessary when the current highest index ipc object is deleted. "
"If no ipc object is allocated, then -1 is returned."
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:464
msgid "ipc_ids.rwsem needs to be held by the caller."
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:490
msgid "remove an ipc identifier"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:492
msgid "ipc perm structure containing the identifier to remove"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:515
msgid "switch the key of an existing ipc to IPC_PRIVATE"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:517
msgid "ipc perm structure containing the key to modify"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:543
msgid "check ipc permissions"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:547
#: ../../../core-api/kernel-api:283: security/security.c:3809
msgid "``short flag``"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:546
msgid "desired permission set"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:547
msgid ""
"Check user, group, other permissions for access to ipc resources. return 0 "
"if allowed"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:550
msgid "**flag** will most probably be 0 or ``S_...UGO`` from <linux/stat.h>"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:580
msgid "convert kernel ipc permissions to user"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:586
msgid "``struct kern_ipc_perm *in``"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:581
msgid "kernel permissions"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:583
msgid "``struct ipc64_perm *out``"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:582 ipc/util.c:600
msgid "new style ipc permissions"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:583
msgid ""
"Turn the kernel object **in** into a set of permissions descriptions for "
"returning to userspace (**out**)."
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:599
msgid "convert new ipc permissions to old"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:605 ipc/util.c:686
msgid "``struct ipc64_perm *in``"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:602
msgid "``struct ipc_perm *out``"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:601
msgid "old style ipc permissions"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:602
msgid ""
"Turn the new style permissions object **in** into a compatibility object and "
"store it into the **out** pointer."
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:618
msgid "Look for an id in the ipc ids idr and return associated ipc object."
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:622 ipc/util.c:643
#: ipc/util.c:704 ../../../core-api/kernel-api:283: security/security.c:1189
msgid "``int id``"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:621 ipc/util.c:642
msgid "ipc id to look for"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:622 ipc/util.c:643
msgid ""
"Call inside the RCU critical section. The ipc object is *not* locked on exit."
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:639
msgid ""
"Similar to ipc_obtain_object_idr() but also checks the ipc object sequence "
"number."
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:661
msgid "Common sys_*get() code"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:662
msgid "namespace"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:664
msgid ""
"operations to be called on ipc object creation, permission checks and "
"further checks"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:666
msgid "the parameters needed by the previous operations."
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:667
msgid "Common routine called by sys_msgget(), sys_semget() and sys_shmget()."
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:680
msgid "update the permissions of an ipc object"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:681
msgid "the permission given as input."
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:683
msgid "``struct kern_ipc_perm *out``"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:682
msgid "the permission of the ipc to set."
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:700
msgid "retrieve an ipc object and check permissions"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:702
msgid "the table of ids where to look for the ipc"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:703
msgid "the id of the ipc to retrieve"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:705
#: ../../../core-api/kernel-api:283: security/security.c:3921
#: security/security.c:4025 security/security.c:4108 security/security.c:5715
msgid "``int cmd``"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:704
msgid "the cmd to check"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:706
msgid "``struct ipc64_perm *perm``"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:705
msgid "the permission to set"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:707
msgid "``int extra_perm``"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:706
msgid "one extra permission parameter used by msq"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:707
msgid ""
"This function does some common audit and permissions check for some IPC_XXX "
"cmd and is called from semctl_down, shmctl_down and msgctl_down."
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:710
msgid "It:"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:711
msgid "retrieves the ipc object with the given id in the given table."
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:712
msgid "performs some audit and permission check, depending on the given cmd"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:713
msgid ""
"returns a pointer to the ipc object or otherwise, the corresponding error."
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:716
msgid "Call holding the both the rwsem and the rcu read lock."
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:750
msgid "ipc call version"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:756
msgid "``int *cmd``"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:751
msgid "pointer to command"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:752
msgid ""
"Return IPC_64 for new style IPC and IPC_OLD for old style IPC. The **cmd** "
"value is turned from an encoding command and version into just the command "
"code."
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:783
msgid "Find and lock the ipc structure based on seq pos"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:786
msgid "``loff_t *pos``"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:785
msgid "expected position"
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:786
msgid ""
"The function finds an ipc structure, based on the sequence file position "
"**pos**. If there is no ipc structure at position **pos**, then the "
"successor is selected. If a structure is found, then it is locked (both "
"rcu_read_lock() and ipc_lock_object()) and  **pos** is set to the position "
"needed to locate the found ipc structure. If nothing is found (i.e. EOF), "
"**pos** is not modified."
msgstr ""

#: ../../../core-api/kernel-api:196: ipc/util.c:794
msgid "The function returns the found ipc structure, or NULL at EOF."
msgstr ""

#: ../../../core-api/kernel-api.rst:200
msgid "FIFO Buffer"
msgstr ""

#: ../../../core-api/kernel-api.rst:203
msgid "kfifo interface"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:113
msgid "``DECLARE_KFIFO_PTR (fifo, type)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:111
msgid "macro to declare a fifo pointer object"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:117
#: include/linux/kfifo.h:124 include/linux/kfifo.h:132
#: include/linux/kfifo.h:147 include/linux/kfifo.h:186
#: include/linux/kfifo.h:195 include/linux/kfifo.h:201
#: include/linux/kfifo.h:207 include/linux/kfifo.h:213
#: include/linux/kfifo.h:227 include/linux/kfifo.h:241
#: include/linux/kfifo.h:251 include/linux/kfifo.h:261
#: include/linux/kfifo.h:277 include/linux/kfifo.h:292
#: include/linux/kfifo.h:302 include/linux/kfifo.h:318
#: include/linux/kfifo.h:333 include/linux/kfifo.h:339
#: include/linux/kfifo.h:356 include/linux/kfifo.h:379
#: include/linux/kfifo.h:391 include/linux/kfifo.h:411
#: include/linux/kfifo.h:448 include/linux/kfifo.h:487
#: include/linux/kfifo.h:525 include/linux/kfifo.h:549
#: include/linux/kfifo.h:569 include/linux/kfifo.h:593
#: include/linux/kfifo.h:619 include/linux/kfifo.h:641
#: include/linux/kfifo.h:667 include/linux/kfifo.h:695
#: include/linux/kfifo.h:723 include/linux/kfifo.h:754
#: include/linux/kfifo.h:777 include/linux/kfifo.h:810
#: include/linux/kfifo.h:826 include/linux/kfifo.h:852
#: include/linux/kfifo.h:882
msgid "``fifo``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:112
#: include/linux/kfifo.h:119
msgid "name of the declared fifo"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:113
#: include/linux/kfifo.h:120 include/linux/kfifo.h:143
msgid "type of the fifo elements"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:120
msgid "``DECLARE_KFIFO (fifo, type, size)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:118
msgid "macro to declare a fifo object"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:121
#: include/linux/kfifo.h:144 include/linux/kfifo.h:352
msgid "the number of elements in the fifo, this must be a power of 2"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:128
msgid "``INIT_KFIFO (fifo)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:126
msgid "Initialize a fifo declared by DECLARE_KFIFO"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:127
#: include/linux/kfifo.h:142
msgid "name of the declared fifo datatype"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:143
msgid "``DEFINE_KFIFO (fifo, type, size)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:141
msgid "macro to define and initialize a fifo"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:146
msgid "the macro can be used for global and local fifo data type variables."
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:182
msgid "``kfifo_initialized (fifo)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:180
msgid "Check if the fifo is initialized"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:181
msgid "address of the fifo to check"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:182
msgid ""
"Return ``true`` if fifo is initialized, otherwise ``false``. Assumes the "
"fifo was 0 before."
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:191
msgid "``kfifo_esize (fifo)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:189
msgid "returns the size of the element managed by the fifo"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:190
#: include/linux/kfifo.h:196 include/linux/kfifo.h:202
#: include/linux/kfifo.h:208 include/linux/kfifo.h:222
#: include/linux/kfifo.h:236 include/linux/kfifo.h:246
#: include/linux/kfifo.h:257 include/linux/kfifo.h:273
#: include/linux/kfifo.h:287 include/linux/kfifo.h:297
#: include/linux/kfifo.h:313 include/linux/kfifo.h:328
#: include/linux/kfifo.h:334 include/linux/kfifo.h:406
#: include/linux/kfifo.h:443 include/linux/kfifo.h:482
#: include/linux/kfifo.h:520 include/linux/kfifo.h:544
#: include/linux/kfifo.h:565 include/linux/kfifo.h:588
#: include/linux/kfifo.h:614 include/linux/kfifo.h:637
#: include/linux/kfifo.h:662 include/linux/kfifo.h:690
#: include/linux/kfifo.h:718 include/linux/kfifo.h:749
#: include/linux/kfifo.h:772 include/linux/kfifo.h:805
#: include/linux/kfifo.h:821 include/linux/kfifo.h:847
#: include/linux/kfifo.h:877
msgid "address of the fifo to be used"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:197
msgid "``kfifo_recsize (fifo)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:195
msgid "returns the size of the record length field"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:203
msgid "``kfifo_size (fifo)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:201
msgid "returns the size of the fifo in elements"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:209
msgid "``kfifo_reset (fifo)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:207
msgid "removes the entire fifo content"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:210
msgid ""
"usage of kfifo_reset() is dangerous. It should be only called when the fifo "
"is exclusived locked or when it is secured that no other thread is accessing "
"the fifo."
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:223
msgid "``kfifo_reset_out (fifo)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:221
msgid "skip fifo content"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:224
msgid ""
"The usage of kfifo_reset_out() is safe until it will be only called from the "
"reader thread and there is only one concurrent reader. Otherwise it is "
"dangerous and must be handled in the same way as kfifo_reset()."
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:237
msgid "``kfifo_len (fifo)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:235
msgid "returns the number of used elements in the fifo"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:247
msgid "``kfifo_is_empty (fifo)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:245
msgid "returns true if the fifo is empty"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:257
msgid "``kfifo_is_empty_spinlocked (fifo, lock)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:255
msgid "returns true if the fifo is empty using a spinlock for locking"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:259
#: include/linux/kfifo.h:275 include/linux/kfifo.h:548
#: include/linux/kfifo.h:569 include/linux/kfifo.h:618
#: include/linux/kfifo.h:641 ../../../core-api/kernel-api:420:
#: kernel/rcu/tasks.h:26
msgid "``lock``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:258
#: include/linux/kfifo.h:274
msgid "spinlock to be used for locking"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:273
msgid "``kfifo_is_empty_spinlocked_noirqsave (fifo, lock)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:271
msgid ""
"returns true if the fifo is empty using a spinlock for locking, doesn't "
"disable interrupts"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:288
msgid "``kfifo_is_full (fifo)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:286
msgid "returns true if the fifo is full"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:298
msgid "``kfifo_avail (fifo)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:296
msgid "returns the number of unused elements in the fifo"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:314
msgid "``kfifo_skip_count (fifo, count)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:312
#: include/linux/kfifo.h:327
msgid "skip output data"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:314
msgid "count of data to skip"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:329
msgid "``kfifo_skip (fifo)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:335
msgid "``kfifo_peek_len (fifo)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:333
msgid "gets the size of the next fifo record"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:335
msgid ""
"This function returns the size of the next fifo record in number of bytes."
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:352
msgid "``kfifo_alloc (fifo, size, gfp_mask)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:350
msgid "dynamically allocates a new fifo buffer"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:351
msgid "pointer to the fifo"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:354
msgid "``gfp_mask``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:353
msgid "get_free_pages mask, passed to kmalloc()"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:354
msgid "This macro dynamically allocates a new fifo buffer."
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:356
msgid ""
"The number of elements will be rounded-up to a power of 2. The fifo will be "
"release with kfifo_free(). Return 0 if no error, otherwise an error code."
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:375
msgid "``kfifo_free (fifo)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:373
msgid "frees the fifo"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:374
msgid "the fifo to be freed"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:387
msgid "``kfifo_init (fifo, buffer, size)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:385
msgid "initialize a fifo using a preallocated buffer"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:386
msgid "the fifo to assign the buffer"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:388
msgid "``buffer``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:387
msgid "the preallocated buffer to be used"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:388
msgid "the size of the internal buffer, this have to be a power of 2"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:389
msgid "This macro initializes a fifo using a preallocated buffer."
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:391
msgid ""
"The number of elements will be rounded-up to a power of 2. Return 0 if no "
"error, otherwise an error code."
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:407
msgid "``kfifo_put (fifo, val)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:405
#: include/linux/kfifo.h:519
msgid "put data into the fifo"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:408
#: include/linux/kfifo.h:445 include/linux/kfifo.h:484
msgid "``val``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:407
#: include/linux/kfifo.h:521 include/linux/kfifo.h:545
#: include/linux/kfifo.h:566
msgid "the data to be added"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:408
msgid ""
"This macro copies the given value into the fifo. It returns 0 if the fifo "
"was full. Otherwise it returns the number processed elements."
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:412
#: include/linux/kfifo.h:449 include/linux/kfifo.h:488
#: include/linux/kfifo.h:526 include/linux/kfifo.h:594
#: include/linux/kfifo.h:669 include/linux/kfifo.h:697
#: include/linux/kfifo.h:827 include/linux/kfifo.h:857
#: include/linux/kfifo.h:886
msgid ""
"Note that with only one concurrent reader and one concurrent writer, you "
"don't need extra locking to use these macro."
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:444
msgid "``kfifo_get (fifo, val)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:442
#: include/linux/kfifo.h:587
msgid "get data from the fifo"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:444
#: include/linux/kfifo.h:483
msgid "address where to store the data"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:445
msgid ""
"This macro reads the data from the fifo. It returns 0 if the fifo was empty. "
"Otherwise it returns the number processed elements."
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:483
msgid "``kfifo_peek (fifo, val)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:481
msgid "get data from the fifo without removing"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:484
msgid ""
"This reads the data from the fifo without removing it from the fifo. It "
"returns 0 if the fifo was empty. Otherwise it returns the number processed "
"elements."
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:521
msgid "``kfifo_in (fifo, buf, n)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:522
#: include/linux/kfifo.h:546 include/linux/kfifo.h:567
#: include/linux/kfifo.h:590 include/linux/kfifo.h:616
#: include/linux/kfifo.h:639 include/linux/kfifo.h:823
msgid "``buf``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:522
#: include/linux/kfifo.h:546 include/linux/kfifo.h:567
msgid "number of elements to be added"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:523
msgid ""
"This macro copies the given buffer into the fifo and returns the number of "
"copied elements."
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:545
msgid "``kfifo_in_spinlocked (fifo, buf, n, lock)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:543
msgid "put data into the fifo using a spinlock for locking"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:547
#: include/linux/kfifo.h:568 include/linux/kfifo.h:617
#: include/linux/kfifo.h:640
msgid "pointer to the spinlock to use for locking"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:548
msgid ""
"This macro copies the given values buffer into the fifo and returns the "
"number of copied elements."
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:565
msgid "``kfifo_in_spinlocked_noirqsave (fifo, buf, n, lock)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:563
msgid ""
"put data into fifo using a spinlock for locking, don't disable interrupts"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:569
msgid ""
"This is a variant of kfifo_in_spinlocked() but uses spin_lock/unlock() for "
"locking and doesn't disable interrupts."
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:589
msgid "``kfifo_out (fifo, buf, n)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:589
#: include/linux/kfifo.h:615 include/linux/kfifo.h:638
#: include/linux/kfifo.h:822
msgid "pointer to the storage buffer"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:590
#: include/linux/kfifo.h:616 include/linux/kfifo.h:639
#: include/linux/kfifo.h:823
msgid "max. number of elements to get"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:591
msgid ""
"This macro gets some data from the fifo and returns the numbers of elements "
"copied."
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:615
msgid "``kfifo_out_spinlocked (fifo, buf, n, lock)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:613
msgid "get data from the fifo using a spinlock for locking"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:618
msgid ""
"This macro gets the data from the fifo and returns the numbers of elements "
"copied."
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:637
msgid "``kfifo_out_spinlocked_noirqsave (fifo, buf, n, lock)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:635
msgid ""
"get data from the fifo using a spinlock for locking, don't disable interrupts"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:641
msgid ""
"This is a variant of kfifo_out_spinlocked() which uses spin_lock/unlock() "
"for locking and doesn't disable interrupts."
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:663
msgid "``kfifo_from_user (fifo, from, len, copied)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:661
msgid "puts some data from user space into the fifo"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:664
msgid "``from``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:663
msgid "pointer to the data to be added"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:665
#: include/linux/kfifo.h:693 include/linux/kfifo.h:722
#: include/linux/kfifo.h:751 include/linux/kfifo.h:776
#: include/linux/kfifo.h:807
msgid "``len``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:664
msgid "the length of the data to be added"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:666
#: include/linux/kfifo.h:694
msgid "``copied``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:665
#: include/linux/kfifo.h:693
msgid "pointer to output variable to store the number of copied bytes"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:666
msgid ""
"This macro copies at most **len** bytes from the **from** into the fifo, "
"depending of the available space and returns -EFAULT/0."
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:691
msgid "``kfifo_to_user (fifo, to, len, copied)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:689
msgid "copies data from the fifo into user space"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:692
msgid "``to``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:691
msgid "where the data must be copied"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:692
msgid "the size of the destination buffer"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:694
msgid ""
"This macro copies at most **len** bytes from the fifo into the **to** buffer "
"and returns -EFAULT/0."
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:719
msgid "``kfifo_dma_in_prepare_mapped (fifo, sgl, nents, len, dma)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:717
msgid "setup a scatterlist for DMA input"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:720
#: include/linux/kfifo.h:774
msgid "``sgl``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:719
#: include/linux/kfifo.h:773
msgid "pointer to the scatterlist array"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:721
#: include/linux/kfifo.h:775
msgid "``nents``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:720
#: include/linux/kfifo.h:774
msgid "number of entries in the scatterlist array"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:721
#: include/linux/kfifo.h:775
msgid "number of elements to transfer"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:723
#: include/linux/kfifo.h:777
msgid "``dma``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:722
#: include/linux/kfifo.h:776
msgid "mapped dma address to fill into **sgl**"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:723
msgid ""
"This macro fills a scatterlist for DMA input. It returns the number entries "
"in the scatterlist array."
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:726
#: include/linux/kfifo.h:754 include/linux/kfifo.h:782
#: include/linux/kfifo.h:810
msgid ""
"Note that with only one concurrent reader and one concurrent writer, you "
"don't need extra locking to use these macros."
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:750
msgid "``kfifo_dma_in_finish (fifo, len)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:748
msgid "finish a DMA IN operation"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:750
msgid "number of bytes to received"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:751
msgid ""
"This macro finishes a DMA IN operation. The in counter will be updated by "
"the len parameter. No error checking will be done."
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:773
msgid "``kfifo_dma_out_prepare_mapped (fifo, sgl, nents, len, dma)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:771
msgid "setup a scatterlist for DMA output"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:777
msgid ""
"This macro fills a scatterlist for DMA output which at most **len** bytes to "
"transfer. It returns the number entries in the scatterlist array. A zero "
"means there is no space available and the scatterlist is not filled."
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:806
msgid "``kfifo_dma_out_finish (fifo, len)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:804
msgid "finish a DMA OUT operation"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:806
msgid "number of bytes transferred"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:807
msgid ""
"This macro finishes a DMA OUT operation. The out counter will be updated by "
"the len parameter. No error checking will be done."
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:822
msgid "``kfifo_out_peek (fifo, buf, n)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:820
msgid "gets some data from the fifo"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:824
msgid ""
"This macro gets the data from the fifo and returns the numbers of elements "
"copied. The data is not removed from the fifo."
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:848
msgid "``kfifo_out_linear (fifo, tail, n)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:846
msgid "gets a tail of/offset to available data"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:849
msgid "``tail``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:848
msgid "pointer to an unsigned int to store the value of tail"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:849
#: include/linux/kfifo.h:879
msgid "max. number of elements to point at"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:850
msgid ""
"This macro obtains the offset (tail) to the available data in the fifo "
"buffer and returns the numbers of elements available. It returns the "
"available count till the end of data or till the end of the buffer. So that "
"it can be used for linear data processing (like memcpy() of (**fifo->data** "
"+ **tail**) with count returned)."
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:878
msgid "``kfifo_out_linear_ptr (fifo, ptr, n)``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:876
msgid "gets a pointer to the available data"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:879
#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:603
#: include/linux/rcupdate.h:1066 include/linux/rcupdate.h:1097
#: ../../../core-api/kernel-api:412: include/linux/rculist.h:361
#: include/linux/rculist.h:403 include/linux/rculist.h:418
#: include/linux/rculist.h:478
msgid "``ptr``"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:878
msgid "pointer to data to store the pointer to tail"
msgstr ""

#: ../../../core-api/kernel-api:205: include/linux/kfifo.h:880
msgid ""
"Similarly to kfifo_out_linear(), this macro obtains the pointer to the "
"available data in the fifo buffer and returns the numbers of elements "
"available. It returns the available count till the end of available data or "
"till the end of the buffer. So that it can be used for linear data "
"processing (like memcpy() of **ptr** with count returned)."
msgstr ""

#: ../../../core-api/kernel-api.rst:209
msgid "relay interface support"
msgstr ""

#: ../../../core-api/kernel-api.rst:211
msgid ""
"Relay interface support is designed to provide an efficient mechanism for "
"tools and facilities to relay large amounts of data from kernel space to "
"user space."
msgstr ""

#: ../../../core-api/kernel-api.rst:216
msgid "relay interface"
msgstr ""

#: ../../../core-api/kernel-api:218: kernel/relay.c:235
msgid "boolean, is the channel buffer full?"
msgstr ""

#: ../../../core-api/kernel-api:218: kernel/relay.c:241 kernel/relay.c:552
#: ../../../core-api/kernel-api:221: kernel/relay.c:81 kernel/relay.c:107
#: kernel/relay.c:195 kernel/relay.c:230 kernel/relay.c:287 kernel/relay.c:429
#: kernel/relay.c:884 kernel/relay.c:914 kernel/relay.c:943
msgid "``struct rchan_buf *buf``"
msgstr ""

#: ../../../core-api/kernel-api:218: kernel/relay.c:236 kernel/relay.c:547
#: ../../../core-api/kernel-api:221: kernel/relay.c:225 kernel/relay.c:424
msgid "channel buffer"
msgstr ""

#: ../../../core-api/kernel-api:218: kernel/relay.c:237
msgid "Returns 1 if the buffer is full, 0 otherwise."
msgstr ""

#: ../../../core-api/kernel-api:218: kernel/relay.c:315
msgid "reset the channel"
msgstr ""

#: ../../../core-api/kernel-api:218: kernel/relay.c:321 kernel/relay.c:618
#: kernel/relay.c:651 kernel/relay.c:679 ../../../core-api/kernel-api:221:
#: kernel/relay.c:147 kernel/relay.c:706
msgid "``struct rchan *chan``"
msgstr ""

#: ../../../core-api/kernel-api:218: kernel/relay.c:316 kernel/relay.c:613
#: kernel/relay.c:646 kernel/relay.c:674 ../../../core-api/kernel-api:221:
#: kernel/relay.c:701
msgid "the channel"
msgstr ""

#: ../../../core-api/kernel-api:218: kernel/relay.c:317
msgid ""
"This has the effect of erasing all data from all channel buffers and "
"restarting the channel in its initial state.  The buffers are not freed, so "
"any mappings are still in effect."
msgstr ""

#: ../../../core-api/kernel-api:218: kernel/relay.c:321
msgid ""
"NOTE. Care should be taken that the channel isn't actually being used by "
"anything when this call is made."
msgstr ""

#: ../../../core-api/kernel-api:218: kernel/relay.c:460
msgid "create a new relay channel"
msgstr ""

#: ../../../core-api/kernel-api:218: kernel/relay.c:466
msgid "``const char *base_filename``"
msgstr ""

#: ../../../core-api/kernel-api:218: kernel/relay.c:461
msgid "base name of files to create"
msgstr ""

#: ../../../core-api/kernel-api:218: kernel/relay.c:463
#: ../../../core-api/kernel-api:286: security/inode.c:183 security/inode.c:216
#: security/inode.c:242
msgid "``struct dentry *parent``"
msgstr ""

#: ../../../core-api/kernel-api:218: kernel/relay.c:462
msgid "dentry of parent directory, ``NULL`` for root directory or buffer"
msgstr ""

#: ../../../core-api/kernel-api:218: kernel/relay.c:464
msgid "``size_t subbuf_size``"
msgstr ""

#: ../../../core-api/kernel-api:218: kernel/relay.c:463
msgid "size of sub-buffers"
msgstr ""

#: ../../../core-api/kernel-api:218: kernel/relay.c:465
msgid "``size_t n_subbufs``"
msgstr ""

#: ../../../core-api/kernel-api:218: kernel/relay.c:464
msgid "number of sub-buffers"
msgstr ""

#: ../../../core-api/kernel-api:218: kernel/relay.c:466
msgid "``const struct rchan_callbacks *cb``"
msgstr ""

#: ../../../core-api/kernel-api:218: kernel/relay.c:465
msgid "client callback functions"
msgstr ""

#: ../../../core-api/kernel-api:218: kernel/relay.c:467
msgid "``void *private_data``"
msgstr ""

#: ../../../core-api/kernel-api:218: kernel/relay.c:466
msgid "user-defined data"
msgstr ""

#: ../../../core-api/kernel-api:218: kernel/relay.c:467
msgid "Returns channel pointer if successful, ``NULL`` otherwise."
msgstr ""

#: ../../../core-api/kernel-api:218: kernel/relay.c:469
msgid ""
"Creates a channel buffer for each cpu using the sizes and attributes "
"specified.  The created channel buffer files will be named base_filename0..."
"base_filenameN-1.  File permissions will be ``S_IRUSR``."
msgstr ""

#: ../../../core-api/kernel-api:218: kernel/relay.c:546
msgid "switch to a new sub-buffer"
msgstr ""

#: ../../../core-api/kernel-api:218: kernel/relay.c:549
msgid "``size_t length``"
msgstr ""

#: ../../../core-api/kernel-api:218: kernel/relay.c:548
msgid "size of current event"
msgstr ""

#: ../../../core-api/kernel-api:218: kernel/relay.c:549
msgid "Returns either the length passed in or 0 if full."
msgstr ""

#: ../../../core-api/kernel-api:218: kernel/relay.c:551
msgid ""
"Performs sub-buffer-switch tasks such as invoking callbacks, updating "
"padding counts, waking up readers, etc."
msgstr ""

#: ../../../core-api/kernel-api:218: kernel/relay.c:612
msgid "update the buffer's sub-buffers-consumed count"
msgstr ""

#: ../../../core-api/kernel-api:218: kernel/relay.c:615
msgid "``unsigned int cpu``"
msgstr ""

#: ../../../core-api/kernel-api:218: kernel/relay.c:614
msgid "the cpu associated with the channel buffer to update"
msgstr ""

#: ../../../core-api/kernel-api:218: kernel/relay.c:616
msgid "``size_t subbufs_consumed``"
msgstr ""

#: ../../../core-api/kernel-api:218: kernel/relay.c:615
msgid "number of sub-buffers to add to current buf's count"
msgstr ""

#: ../../../core-api/kernel-api:218: kernel/relay.c:616
msgid ""
"Adds to the channel buffer's consumed sub-buffer count. subbufs_consumed "
"should be the number of sub-buffers newly consumed, not the total consumed."
msgstr ""

#: ../../../core-api/kernel-api:218: kernel/relay.c:620
msgid ""
"NOTE. Kernel clients don't need to call this function if the channel mode is "
"'overwrite'."
msgstr ""

#: ../../../core-api/kernel-api:218: kernel/relay.c:645 kernel/relay.c:673
msgid "close the channel"
msgstr ""

#: ../../../core-api/kernel-api:218: kernel/relay.c:647
msgid "Closes all channel buffers and frees the channel."
msgstr ""

#: ../../../core-api/kernel-api:218: kernel/relay.c:675
msgid "Flushes all channel buffers, i.e. forces buffer switch."
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:75
msgid "mmap channel buffer to process address space"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:76 kernel/relay.c:883
#: kernel/relay.c:909 kernel/relay.c:939
msgid "relay channel buffer"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:78 kernel/relay.c:755
#: ../../../core-api/kernel-api:283: security/security.c:3075
msgid "``struct vm_area_struct *vma``"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:77
msgid "vm_area_struct describing memory to be mapped"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:78
msgid "Returns 0 if ok, negative on error"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:80
msgid "Caller should already have grabbed mmap_lock."
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:101
msgid "allocate a channel buffer"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:102 kernel/relay.c:190
msgid "the buffer struct"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:104
msgid "``size_t *size``"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:103
msgid "total size of the buffer"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:104
msgid ""
"Returns a pointer to the resulting buffer, ``NULL`` if unsuccessful. The "
"passed in size will get page aligned, if it isn't already."
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:141
msgid "allocate and initialize a channel buffer"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:142
msgid "the relay channel"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:143
msgid "Returns channel buffer if successful, ``NULL`` otherwise."
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:176
msgid "free the channel struct"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:182 kernel/relay.c:216
msgid "``struct kref *kref``"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:177
msgid "target kernel reference that contains the relay channel"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:178
msgid "Should only be called from kref_put()."
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:189
msgid "destroy an rchan_buf struct and associated buffer"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:210
msgid "remove a channel buffer"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:211
msgid "target kernel reference that contains the relay buffer"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:212
msgid ""
"Removes the file from the filesystem, which also frees the rchan_buf_struct "
"and the channel buffer.  Should only be called from kref_put()."
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:224
msgid "boolean, is the channel buffer empty?"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:226
msgid "Returns 1 if the buffer is empty, 0 otherwise."
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:267
msgid "wake up readers waiting on a channel"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:273
msgid "``struct irq_work *work``"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:268
msgid "contains the channel buffer"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:269
msgid "This is the function used to defer reader waking"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:281
msgid "reset a channel buffer"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:282
msgid "the channel buffer"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:284
msgid "``unsigned int init``"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:283
msgid "1 if this is a first-time initialization"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:284
msgid "See relay_reset() for description of effect."
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:423
msgid "close a channel buffer"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:425
msgid ""
"Marks the buffer finalized and restores the default callbacks. The channel "
"buffer and channel buffer data structure are then freed automatically when "
"the last reference is given up."
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:700
msgid "get channel buffer statistics"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:702
msgid "select particular information to get"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:703
msgid "Returns the count of certain field that caller specifies."
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:736
msgid "open file op for relay files"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:742 kernel/relay.c:795
#: ../../../core-api/kernel-api:283: security/security.c:752
#: security/security.c:1730 security/security.c:1760 security/security.c:1907
#: security/security.c:2159 security/security.c:2330 security/security.c:2352
#: security/security.c:2731 security/security.c:2761 security/security.c:2808
#: security/security.c:3382 security/security.c:3783
msgid "``struct inode *inode``"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:737 kernel/relay.c:790
#: ../../../core-api/kernel-api:283: security/security.c:1725
#: security/security.c:1755 security/security.c:1902
msgid "the inode"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:739 kernel/relay.c:758
#: kernel/relay.c:771 kernel/relay.c:792
msgid "``struct file *filp``"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:738 kernel/relay.c:753
#: kernel/relay.c:766 kernel/relay.c:791 ../../../core-api/kernel-api:283:
#: security/security.c:2918 security/security.c:2939 security/security.c:2950
#: security/security.c:3120
msgid "the file"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:739
msgid "Increments the channel buffer refcount."
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:752
msgid "mmap file op for relay files"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:754
msgid "the vma describing what to map"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:755
msgid "Calls upon relay_mmap_buf() to map the file into user space."
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:765
msgid "poll file op for relay files"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:768
msgid "``poll_table *wait``"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:767
msgid "poll table"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:768
msgid "Poll implemention."
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:789
msgid "release file op for relay files"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:792
msgid ""
"Decrements the channel refcount, as the filesystem is no longer using it."
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:881
msgid "return bytes available in sub-buffer"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:887 kernel/relay.c:941
msgid "``size_t read_pos``"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:882 kernel/relay.c:938
msgid "file read position"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:908
msgid "find the first available byte to read"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:910
msgid ""
"If the read_pos is in the middle of padding, return the position of the "
"first actually available byte, otherwise return the original value."
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:937
msgid "return the new read position"
msgstr ""

#: ../../../core-api/kernel-api:221: kernel/relay.c:940
msgid "number of bytes to be read"
msgstr ""

#: ../../../core-api/kernel-api.rst:225
msgid "Module Support"
msgstr ""

#: ../../../core-api/kernel-api.rst:228
msgid "Kernel module auto-loading"
msgstr ""

#: ../../../core-api/kernel-api:230: kernel/module/kmod.c:116
msgid "try to load a kernel module"
msgstr ""

#: ../../../core-api/kernel-api:230: kernel/module/kmod.c:122
msgid "``bool wait``"
msgstr ""

#: ../../../core-api/kernel-api:230: kernel/module/kmod.c:117
msgid "wait (or not) for the operation to complete"
msgstr ""

#: ../../../core-api/kernel-api:230: kernel/module/kmod.c:118
msgid "printf style format string for the name of the module"
msgstr ""

#: ../../../core-api/kernel-api:230: kernel/module/kmod.c:119
msgid "arguments as specified in the format string"
msgstr ""

#: ../../../core-api/kernel-api:230: kernel/module/kmod.c:120
msgid ""
"Load a module using the user mode module loader. The function returns zero "
"on success or a negative errno code or positive exit code from \"modprobe\" "
"on failure. Note that a successful module load does not mean the module did "
"not then unload and exit on an error of its own. Callers must check that the "
"service they requested is now available not blindly invoke it."
msgstr ""

#: ../../../core-api/kernel-api:230: kernel/module/kmod.c:127
msgid ""
"If module auto-loading support is disabled then this function simply returns "
"-ENOENT."
msgstr ""

#: ../../../core-api/kernel-api.rst:234
msgid "Module debugging"
msgstr ""

#: ../../../core-api/kernel-api:236: kernel/module/stats.c:21
msgid ""
"Enabling CONFIG_MODULE_STATS enables module debugging statistics which are "
"useful to monitor and root cause memory pressure issues with module loading. "
"These statistics are useful to allow us to improve production workloads."
msgstr ""

#: ../../../core-api/kernel-api:236: kernel/module/stats.c:26
msgid ""
"The current module debugging statistics supported help keep track of module "
"loading failures to enable improvements either for kernel module auto-"
"loading usage (request_module()) or interactions with userspace. Statistics "
"are provided to track all possible failures in the finit_module() path and "
"memory wasted in this process space.  Each of the failure counters are "
"associated to a type of module loading failure which is known to incur a "
"certain amount of memory allocation loss. In the worst case loading a module "
"will fail after a 3 step memory allocation process:"
msgstr ""

#: ../../../core-api/kernel-api:236: kernel/module/stats.c:35
msgid "memory allocated with kernel_read_file_from_fd()"
msgstr ""

#: ../../../core-api/kernel-api:236: kernel/module/stats.c:36
msgid ""
"module decompression processes the file read from "
"kernel_read_file_from_fd(), and vmap() is used to map the decompressed "
"module to a new local buffer which represents a copy of the decompressed "
"module passed from userspace. The buffer from kernel_read_file_from_fd() is "
"freed right away."
msgstr ""

#: ../../../core-api/kernel-api:236: kernel/module/stats.c:41
msgid ""
"layout_and_allocate() allocates space for the final resting place where we "
"would keep the module if it were to be processed successfully."
msgstr ""

#: ../../../core-api/kernel-api:236: kernel/module/stats.c:45
msgid ""
"If a failure occurs after these three different allocations only one counter "
"will be incremented with the summation of the allocated bytes freed incurred "
"during this failure. Likewise, if module loading failed only after step b) a "
"separate counter is used and incremented for the bytes freed and not used "
"during both of those allocations."
msgstr ""

#: ../../../core-api/kernel-api:236: kernel/module/stats.c:51
msgid ""
"Virtual memory space can be limited, for example on x86 virtual memory size "
"defaults to 128 MiB. We should strive to limit and avoid wasting virtual "
"memory allocations when possible. These module debugging statistics help to "
"evaluate how much memory is being wasted on bootup due to module loading "
"failures."
msgstr ""

#: ../../../core-api/kernel-api:236: kernel/module/stats.c:57
msgid ""
"All counters are designed to be incremental. Atomic counters are used so to "
"remain simple and avoid delays and deadlocks."
msgstr ""

#: ../../../core-api/kernel-api.rst:240
msgid "dup_failed_modules - tracks duplicate failed modules"
msgstr ""

#: ../../../core-api/kernel-api:242: kernel/module/stats.c:64
msgid ""
"Linked list of modules which failed to be loaded because an already existing "
"module with the same name was already being processed or already loaded. The "
"finit_module() system call incurs heavy virtual memory allocations. In the "
"worst case an finit_module() system call can end up allocating virtual "
"memory 3 times:"
msgstr ""

#: ../../../core-api/kernel-api:242: kernel/module/stats.c:70
msgid "kernel_read_file_from_fd() call uses vmalloc()"
msgstr ""

#: ../../../core-api/kernel-api:242: kernel/module/stats.c:71
msgid "optional module decompression uses vmap()"
msgstr ""

#: ../../../core-api/kernel-api:242: kernel/module/stats.c:72
msgid ""
"layout_and allocate() can use vzalloc() or an arch specific variation of "
"vmalloc to deal with ELF sections requiring special permissions"
msgstr ""

#: ../../../core-api/kernel-api:242: kernel/module/stats.c:75
msgid ""
"In practice on a typical boot today most finit_module() calls fail due to "
"the module with the same name already being loaded or about to be processed. "
"All virtual memory allocated to these failed modules will be freed with no "
"functional use."
msgstr ""

#: ../../../core-api/kernel-api:242: kernel/module/stats.c:80
msgid ""
"To help with this the dup_failed_modules allows us to track modules which "
"failed to load due to the fact that a module was already loaded or being "
"processed.  There are only two points at which we can fail such calls, we "
"list them below along with the number of virtual memory allocation calls:"
msgstr ""

#: ../../../core-api/kernel-api:242: kernel/module/stats.c:86
msgid ""
"FAIL_DUP_MOD_BECOMING: at the end of early_mod_check() before "
"layout_and_allocate(). - with module decompression: 2 virtual memory "
"allocation calls - without module decompression: 1 virtual memory allocation "
"calls"
msgstr ""

#: ../../../core-api/kernel-api:242: kernel/module/stats.c:90
msgid ""
"FAIL_DUP_MOD_LOAD: after layout_and_allocate() on add_unformed_module() - "
"with module decompression 3 virtual memory allocation calls - without module "
"decompression 2 virtual memory allocation calls"
msgstr ""

#: ../../../core-api/kernel-api:242: kernel/module/stats.c:94
msgid ""
"We should strive to get this list to be as small as possible. If this list "
"is not empty it is a reflection of possible work or optimizations possible "
"either in-kernel or in userspace."
msgstr ""

#: ../../../core-api/kernel-api.rst:246
msgid "module statistics debugfs counters"
msgstr ""

#: ../../../core-api/kernel-api:248: kernel/module/stats.c:103
msgid ""
"The total amount of wasted virtual memory allocation space during module "
"loading can be computed by adding the total from the summation:"
msgstr ""

#: ../../../core-api/kernel-api:248: kernel/module/stats.c:106
msgid ""
"**invalid_kread_bytes** + **invalid_decompress_bytes** + "
"**invalid_becoming_bytes** + **invalid_mod_bytes**"
msgstr ""

#: ../../../core-api/kernel-api:248: kernel/module/stats.c:111
msgid ""
"The following debugfs counters are available to inspect module loading "
"failures:"
msgstr ""

#: ../../../core-api/kernel-api:248: kernel/module/stats.c:114
msgid ""
"total_mod_size: total bytes ever used by all modules we've dealt with on "
"this system"
msgstr ""

#: ../../../core-api/kernel-api:248: kernel/module/stats.c:116
msgid ""
"total_text_size: total bytes of the .text and .init.text ELF section sizes "
"we've dealt with on this system"
msgstr ""

#: ../../../core-api/kernel-api:248: kernel/module/stats.c:118
msgid ""
"invalid_kread_bytes: bytes allocated and then freed on failures which happen "
"due to the initial kernel_read_file_from_fd(). kernel_read_file_from_fd() "
"uses vmalloc(). These should typically not happen unless your system is "
"under memory pressure."
msgstr ""

#: ../../../core-api/kernel-api:248: kernel/module/stats.c:122
msgid ""
"invalid_decompress_bytes: number of bytes allocated and freed due to memory "
"allocations in the module decompression path that use vmap(). These "
"typically should not happen unless your system is under memory pressure."
msgstr ""

#: ../../../core-api/kernel-api:248: kernel/module/stats.c:126
msgid ""
"invalid_becoming_bytes: total number of bytes allocated and freed used to "
"read the kernel module userspace wants us to read before we promote it to be "
"processed to be added to our **modules** linked list. These failures can "
"happen if we had a check in between a successful kernel_read_file_from_fd() "
"call and right before we allocate the our private memory for the module "
"which would be kept if the module is successfully loaded. The most common "
"reason for this failure is when userspace is racing to load a module which "
"it does not yet see loaded. The first module to succeed in "
"add_unformed_module() will add a module to our :c:type:`modules` list and "
"subsequent loads of modules with the same name will error out at the end of "
"early_mod_check(). The check for module_patient_check_exists() at the end of "
"early_mod_check() prevents duplicate allocations on layout_and_allocate() "
"for modules already being processed. These duplicate failed modules are non-"
"fatal, however they typically are indicative of userspace not seeing a "
"module in userspace loaded yet and unnecessarily trying to load a module "
"before the kernel even has a chance to begin to process prior requests. "
"Although duplicate failures can be non-fatal, we should try to reduce "
"vmalloc() pressure proactively, so ideally after boot this will be close to "
"as 0 as possible.  If module decompression was used we also add to this "
"counter the cost of the initial kernel_read_file_from_fd() of the compressed "
"module. If module decompression was not used the value represents the total "
"allocated and freed bytes in kernel_read_file_from_fd() calls for these type "
"of failures. These failures can occur because:"
msgstr ""

#: ../../../core-api/kernel-api:248: kernel/module/stats.c:151
msgid "module_sig_check() - module signature checks"
msgstr ""

#: ../../../core-api/kernel-api:248: kernel/module/stats.c:152
msgid "elf_validity_cache_copy() - some ELF validation issue"
msgstr ""

#: ../../../core-api/kernel-api:248: kernel/module/stats.c:153
msgid "early_mod_check():"
msgstr ""

#: ../../../core-api/kernel-api:248: kernel/module/stats.c:155
msgid "blacklisting"
msgstr ""

#: ../../../core-api/kernel-api:248: kernel/module/stats.c:156
msgid "failed to rewrite section headers"
msgstr ""

#: ../../../core-api/kernel-api:248: kernel/module/stats.c:157
msgid "version magic"
msgstr ""

#: ../../../core-api/kernel-api:248: kernel/module/stats.c:158
msgid "live patch requirements didn't check out"
msgstr ""

#: ../../../core-api/kernel-api:248: kernel/module/stats.c:159
msgid "the module was detected as being already present"
msgstr ""

#: ../../../core-api/kernel-api:248: kernel/module/stats.c:161
msgid ""
"invalid_mod_bytes: these are the total number of bytes allocated and freed "
"due to failures after we did all the sanity checks of the module which "
"userspace passed to us and after our first check that the module is unique.  "
"A module can still fail to load if we detect the module is loaded after we "
"allocate space for it with layout_and_allocate(), we do this check right "
"before processing the module as live and run its initialization routines. "
"Note that you have a failure of this type it also means the respective "
"kernel_read_file_from_fd() memory space was also freed and not used, and so "
"we increment this counter with twice the size of the module. Additionally if "
"you used module decompression the size of the compressed module is also "
"added to this counter."
msgstr ""

#: ../../../core-api/kernel-api:248: kernel/module/stats.c:173
msgid "modcount: how many modules we've loaded in our kernel life time"
msgstr ""

#: ../../../core-api/kernel-api:248: kernel/module/stats.c:174
msgid ""
"failed_kreads: how many modules failed due to failed "
"kernel_read_file_from_fd()"
msgstr ""

#: ../../../core-api/kernel-api:248: kernel/module/stats.c:175
msgid ""
"failed_decompress: how many failed module decompression attempts we've had. "
"These really should not happen unless your compression / decompression might "
"be broken."
msgstr ""

#: ../../../core-api/kernel-api:248: kernel/module/stats.c:178
msgid ""
"failed_becoming: how many modules failed after we kernel_read_file_from_fd() "
"it and before we allocate memory for it with layout_and_allocate(). This "
"counter is never incremented if you manage to validate the module and call "
"layout_and_allocate() for it."
msgstr ""

#: ../../../core-api/kernel-api:248: kernel/module/stats.c:182
msgid ""
"failed_load_modules: how many modules failed once we've allocated our "
"private space for our module using layout_and_allocate(). These failures "
"should hopefully mostly be dealt with already. Races in theory could still "
"exist here, but it would just mean the kernel had started processing two "
"threads concurrently up to early_mod_check() and one thread won. These "
"failures are good signs the kernel or userspace is doing something seriously "
"stupid or that could be improved. We should strive to fix these, but it is "
"perhaps not easy to fix them. A recent example are the modules requests "
"incurred for frequency modules, a separate module request was being issued "
"for each CPU on a system."
msgstr ""

#: ../../../core-api/kernel-api.rst:252
msgid "Inter Module support"
msgstr ""

#: ../../../core-api/kernel-api.rst:254
msgid "Refer to the files in kernel/module/ for more information."
msgstr ""

#: ../../../core-api/kernel-api.rst:257
msgid "Hardware Interfaces"
msgstr ""

#: ../../../core-api/kernel-api.rst:260
msgid "DMA Channels"
msgstr ""

#: ../../../core-api/kernel-api:262: kernel/dma.c:66
msgid "request and reserve a system DMA channel"
msgstr ""

#: ../../../core-api/kernel-api:262: kernel/dma.c:72 kernel/dma.c:91
msgid "``unsigned int dmanr``"
msgstr ""

#: ../../../core-api/kernel-api:262: kernel/dma.c:67 kernel/dma.c:86
msgid "DMA channel number"
msgstr ""

#: ../../../core-api/kernel-api:262: kernel/dma.c:69
msgid "``const char * device_id``"
msgstr ""

#: ../../../core-api/kernel-api:262: kernel/dma.c:68
msgid "reserving device ID string, used in /proc/dma"
msgstr ""

#: ../../../core-api/kernel-api:262: kernel/dma.c:85
msgid "free a reserved system DMA channel"
msgstr ""

#: ../../../core-api/kernel-api.rst:266
msgid "Resources Management"
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:269
#: ../../../core-api/kernel-api:271: kernel/resource.c:286
#: kernel/resource.c:1612
msgid "request and reserve an I/O or memory resource"
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:275
#: kernel/resource.c:757 kernel/resource.c:849
#: ../../../core-api/kernel-api:271: kernel/resource.c:292
#: kernel/resource.c:735 kernel/resource.c:806 kernel/resource.c:968
#: kernel/resource.c:1615
msgid "``struct resource *root``"
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:270
#: kernel/resource.c:755 kernel/resource.c:844
#: ../../../core-api/kernel-api:271: kernel/resource.c:287
#: kernel/resource.c:802 kernel/resource.c:963
msgid "root resource descriptor"
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:272
#: kernel/resource.c:920 ../../../core-api/kernel-api:271:
#: kernel/resource.c:289 kernel/resource.c:732 kernel/resource.c:804
#: kernel/resource.c:946 kernel/resource.c:965 kernel/resource.c:1616
#: kernel/resource.c:1664
msgid "``struct resource *new``"
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:271
#: kernel/resource.c:756 ../../../core-api/kernel-api:271:
#: kernel/resource.c:288 kernel/resource.c:803
msgid "resource descriptor desired by caller"
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:272
msgid "Returns 0 for success, conflict resource on error."
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:324
msgid ""
"Finds the lowest iomem resource that covers part of [**start**..**end**]."
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:330
#: kernel/resource.c:846 kernel/resource.c:1439
#: ../../../core-api/kernel-api:271: kernel/resource.c:625
#: kernel/resource.c:1069 kernel/resource.c:1313 kernel/resource.c:1347
msgid "``resource_size_t start``"
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:331
msgid "start address of the resource searched for"
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:333
msgid "``resource_size_t end``"
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:332
msgid "end address of same resource"
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:334
#: ../../../core-api/kernel-api:271: kernel/resource.c:411
#: kernel/resource.c:623 ../../../core-api/kernel-api:283:
#: security/security.c:1595 security/security.c:3042 security/security.c:5555
#: security/security.c:5628
msgid "``unsigned long flags``"
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:333
msgid "flags which the resource must have"
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:335
#: ../../../core-api/kernel-api:271: kernel/resource.c:412
#: kernel/resource.c:624
msgid "``unsigned long desc``"
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:334
msgid "descriptor the resource must have"
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:336
#: kernel/resource.c:1184 kernel/resource.c:1558
#: ../../../core-api/kernel-api:271: kernel/resource.c:1072
msgid "``struct resource *res``"
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:335
msgid "return ptr, if resource found"
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:325
msgid ""
"If a resource is found, returns 0 and *****res is overwritten with the part "
"of the resource that's within [**start**..**end**]; if none is found, "
"returns -ENODEV.  Returns -EINVAL for invalid parameters."
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:330
msgid ""
"The caller must specify **start**, **end**, **flags**, and **desc** (which "
"may be IORES_DESC_NONE)."
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:751
msgid ""
"allocate a slot in the resource tree given range & alignment. The resource "
"will be relocated if the new size cannot be reallocated in the current "
"location."
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:757
#: ../../../core-api/kernel-api:271: kernel/resource.c:309
#: kernel/resource.c:1009
msgid "``struct resource *old``"
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:758
msgid "``resource_size_t newsize``"
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:757
msgid "new size of the resource descriptor"
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:759
#: ../../../core-api/kernel-api:271: kernel/resource.c:734
msgid "``struct resource_constraint *constraint``"
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:758
msgid "the memory range and alignment constraints to be met."
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:843
msgid "find an existing resource by a resource start address"
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:845
#: kernel/resource.c:1434 ../../../core-api/kernel-api:271:
#: kernel/resource.c:1312 kernel/resource.c:1346
msgid "resource start address"
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:846
msgid "Returns a pointer to the resource if found, NULL otherwise"
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:917
msgid "Inserts resource in the resource tree"
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:923
#: ../../../core-api/kernel-api:271: kernel/resource.c:949
#: kernel/resource.c:1316 kernel/resource.c:1350
msgid "``struct resource *parent``"
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:918
#: ../../../core-api/kernel-api:271: kernel/resource.c:944
msgid "parent of the new resource"
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:919
#: ../../../core-api/kernel-api:271: kernel/resource.c:945
#: kernel/resource.c:964
msgid "new resource to insert"
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:920
msgid ""
"Returns 0 on success, conflict resource if the resource can't be inserted."
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:922
msgid ""
"This function is equivalent to request_resource_conflict when no conflict "
"happens. If a conflict happens, and the conflicting resources entirely fit "
"within the range of the new resource, then the new resource is inserted and "
"the conflicting resources become children of the new resource."
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:928
#: ../../../core-api/kernel-api:271: kernel/resource.c:948
msgid ""
"This function is intended for producers of resources, such as FW modules and "
"bus drivers."
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:1178
msgid "calculate resource's alignment"
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:1179
#: ../../../core-api/kernel-api:271: kernel/resource.c:304
msgid "resource pointer"
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:1180
msgid "Returns alignment on success, 0 (invalid alignment) on failure."
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:1433
msgid "release a previously reserved memory region"
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:1436
#: ../../../core-api/kernel-api:271: kernel/resource.c:733
#: kernel/resource.c:805 kernel/resource.c:1070
msgid "``resource_size_t size``"
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:1435
#: ../../../core-api/kernel-api:271: kernel/resource.c:1313
#: kernel/resource.c:1347
msgid "resource region size"
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:1436
msgid ""
"This interface is intended for memory hot-delete.  The requested region is "
"released from a currently busy memory resource.  The requested region must "
"either match exactly or fit into a single busy resource entry.  In the "
"latter case, the remaining resource is adjusted accordingly."
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:1442
msgid ""
"Additional release conditions, such as overlapping region, can be supported "
"after they are confirmed as valid cases."
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:1444
msgid ""
"When a busy memory resource gets split into two entries, its children are "
"reassigned to the correct parent based on their range. If a child memory "
"resource overlaps with more than one parent, enhance the logic as needed."
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:1552
msgid ""
"mark the System RAM resource mergeable and try to merge it with adjacent, "
"mergeable resources"
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:1554
msgid "resource descriptor"
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:1555
msgid ""
"This interface is intended for memory hotplug, whereby lots of contiguous "
"system ram resources are added (e.g., via add_memory*()) by a driver, and "
"the actual resource boundaries are not of interest (e.g., it might be "
"relevant for DIMMs). Only resources that are marked mergeable, that have the "
"same parent, and that don't have any children are considered. All mergeable "
"resources must be immutable during the request."
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:1563
msgid ""
"The caller has to make sure that no pointers to resources that are marked "
"mergeable are used anymore after this call - the resource might be freed and "
"the pointer might be stale!"
msgstr ""

#: ../../../core-api/kernel-api:268: kernel/resource.c:1566
msgid ""
"release_mem_region_adjustable() will split on demand on memory hotunplug"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:289
msgid "Returns 0 for success, negative error code on error."
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:303
msgid "release a previously reserved resource"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:406
msgid ""
"Walks through iomem resources and calls func() with matching resource "
"ranges. *"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:409
msgid "I/O resource descriptor. Use IORES_DESC_NONE to skip **desc** check."
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:410
msgid "I/O resource flags"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:412
msgid "``u64 start``"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:411
msgid "start addr"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:413
msgid "``u64 end``"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:412
msgid "end addr"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:414
msgid "``void *arg``"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:413
msgid "function argument for the callback **func**"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:415
msgid "``int (*func)(struct resource *, void *)``"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:414
msgid "callback function that is called for each qualifying resource area"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:415
msgid ""
"All the memory ranges which overlap start,end and also match flags and desc "
"are valid candidates."
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:419
msgid ""
"For a new descriptor search, define a new IORES_DESC in <linux/ioport.h> and "
"set it in 'desc' of a target resource entry."
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:619
msgid "determine intersection of region with known resources"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:620
msgid "region start address"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:621
msgid "size of region"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:622
msgid "flags of resource (in iomem_resource)"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:623
msgid "descriptor of resource (in iomem_resource) or IORES_DESC_NONE"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:624
msgid ""
"Check if the specified region partially overlaps or fully eclipses a "
"resource identified by **flags** and **desc** (optional with "
"IORES_DESC_NONE). Return REGION_DISJOINT if the region does not overlap "
"**flags**/**desc**, return REGION_MIXED if the region overlaps **flags**/"
"**desc** and another resource, and return REGION_INTERSECTS if the region "
"overlaps **flags**/**desc** and no other defined resource. Note that "
"REGION_INTERSECTS is also returned in the case when the specified region "
"overlaps RAM and undefined memory holes."
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:633
msgid ""
"region_intersect() is used by memory remapping functions to ensure the user "
"is not remapping RAM and is a vast speed up over walking through the "
"resource table page by page."
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:729
msgid "Find empty space in the resource tree"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:730
msgid "Root resource descriptor"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:731
msgid "Resource descriptor awaiting an empty resource space"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:732
msgid "The minimum size of the empty space"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:733
msgid "The range and alignment constraints to be met"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:734
msgid ""
"Finds an empty space under **root** in the resource tree satisfying range "
"and alignment **constraints**."
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:738
msgid ""
"``0``         - if successful, **new** members start, end, and flags are "
"altered."
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:739
msgid "``-EBUSY``    - if no empty space was found."
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:800
msgid ""
"allocate empty slot in the resource tree given range & alignment. The "
"resource will be reallocated with a new size if it was already allocated"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:804
msgid "requested resource region size"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:806
msgid "``resource_size_t min``"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:805
msgid "minimum boundary to allocate"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:807
msgid "``resource_size_t max``"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:806
msgid "maximum boundary to allocate"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:808
msgid "``resource_size_t align``"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:807
msgid "alignment requested, in bytes"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:809
msgid "``resource_alignf alignf``"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:808
msgid "alignment function, optional, called if not NULL"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:810
msgid "``void *alignf_data``"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:809
msgid "arbitrary data to pass to the **alignf** function"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:943
msgid "Inserts a resource in the resource tree"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:946
msgid "Returns 0 on success, -EBUSY if the resource can't be inserted."
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:962
msgid "Insert a resource into the resource tree"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:965
msgid ""
"Insert a resource into the resource tree, possibly expanding it in order to "
"make it encompass any conflicting resources."
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:1003
msgid "Remove a resource in the resource tree"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:1004
msgid "resource to remove"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:1005
msgid "Returns 0 on success, -EINVAL if the resource is not valid."
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:1007
msgid ""
"This function removes a resource previously inserted by insert_resource() or "
"insert_resource_conflict(), and moves the children (if any) up to where they "
"were before.  insert_resource() and insert_resource_conflict() insert a new "
"resource, and move any conflicting resources down to the children of the new "
"resource."
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:1013
msgid ""
"insert_resource(), insert_resource_conflict() and remove_resource() are "
"intended for producers of resources, such as FW modules and bus drivers."
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:1066
msgid "modify a resource's start and size"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:1067
msgid "resource to modify"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:1068
msgid "new start value"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:1069
msgid "new size"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:1070
msgid ""
"Given an existing resource, change its start and size to match the "
"arguments.  Returns 0 on success, -EBUSY if it can't fit. Existing children "
"of the resource are assumed to be immutable."
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:1310
msgid "create a new busy resource region"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:1311
#: kernel/resource.c:1345
msgid "parent resource descriptor"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:1314
#: kernel/resource.c:1348
msgid "``resource_size_t n``"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:1315
#: kernel/resource.c:2076 ../../../core-api/kernel-api:283:
#: security/security.c:2424 security/security.c:2562 security/security.c:2580
#: security/security.c:2614 security/security.c:2654 security/security.c:2732
#: security/security.c:2758 security/security.c:4305 security/security.c:4328
#: ../../../core-api/kernel-api:286: security/inode.c:184 security/inode.c:217
#: security/inode.c:243 ../../../core-api/kernel-api:341: block/genhd.c:214
#: ../../../core-api/kernel-api:350: fs/char_dev.c:197 fs/char_dev.c:231
#: fs/char_dev.c:253 fs/char_dev.c:330
msgid "``const char *name``"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:1314
msgid "reserving caller's ID string"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:1315
msgid "IO resource flags"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:1344
msgid "release a previously reserved resource region"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:1348
msgid "The described resource region must match a currently busy region."
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:1618
#: kernel/resource.c:1667 kernel/resource.c:2045
#: ../../../core-api/kernel-api:338: block/genhd.c:1269
#: ../../../core-api/kernel-api:350: fs/char_dev.c:527 fs/char_dev.c:567
#: ../../../core-api/kernel-api:389: include/linux/clk.h:119
#: include/linux/clk.h:211 include/linux/clk.h:379 include/linux/clk.h:396
#: include/linux/clk.h:418 include/linux/clk.h:439 include/linux/clk.h:451
#: include/linux/clk.h:465 include/linux/clk.h:488 include/linux/clk.h:505
#: include/linux/clk.h:523 include/linux/clk.h:544 include/linux/clk.h:565
#: include/linux/clk.h:585 include/linux/clk.h:608 include/linux/clk.h:630
#: include/linux/clk.h:652 include/linux/clk.h:678 include/linux/clk.h:798
#: include/linux/clk.h:1203
msgid "``struct device *dev``"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:1613
msgid "device for which to request the resource"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:1614
msgid "root of the resource tree from which to request the resource"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:1615
msgid "descriptor of the resource to request"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:1616
msgid ""
"This is a device-managed version of request_resource(). There is usually no "
"need to release resources requested by this function explicitly since that "
"will be taken care of when the device is unbound from its driver. If for "
"some reason the resource needs to be released explicitly, because of "
"ordering issues for example, drivers must call devm_release_resource() "
"rather than the regular release_resource()."
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:1623
msgid ""
"When a conflict is detected between any existing resources and the newly "
"requested resource, an error message will be printed."
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:1626
#: ../../../core-api/kernel-api:283: security/security.c:1400
#: security/security.c:5272
msgid "Returns 0 on success or a negative error code on failure."
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:1661
msgid "release a previously requested resource"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:1662
msgid "device for which to release the resource"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:1663
msgid "descriptor of the resource to release"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:1664
msgid "Releases a resource previously requested using devm_request_resource()."
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:2039
msgid "find free region for device private memory"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:2041
msgid "device struct to bind the resource to"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:2043
#: kernel/resource.c:2077
msgid "``struct resource *base``"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:2043
msgid "resource tree to look in"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:2042
msgid "size in bytes of the device memory to add"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:2044
msgid ""
"This function tries to find an empty range of physical address big enough to "
"contain the new resource, so that it can later be hotplugged as ZONE_DEVICE "
"memory, which in turn allocates struct pages."
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:2071
msgid "find a free region relative to **base**"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:2072
msgid "resource that will parent the new resource"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:2073
msgid "size in bytes of memory to allocate from **base**"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:2075
msgid "``unsigned long align``"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:2074
msgid "alignment requirements for the allocation"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:2075
msgid "resource name"
msgstr ""

#: ../../../core-api/kernel-api:271: kernel/resource.c:2076
msgid ""
"Buses like CXL, that can dynamically instantiate new memory regions, need a "
"method to allocate physical address space for those regions. Allocate and "
"insert a new resource to cover a free, unclaimed by a descendant of "
"**base**, range in the span of **base**."
msgstr ""

#: ../../../core-api/kernel-api.rst:275
msgid "MTRR Handling"
msgstr ""

#: ../../../core-api/kernel-api:277: arch/x86/kernel/cpu/mtrr/mtrr.c:469
msgid "add a WC MTRR and handle errors if PAT is unavailable"
msgstr ""

#: ../../../core-api/kernel-api:277: arch/x86/kernel/cpu/mtrr/mtrr.c:475
msgid "``unsigned long base``"
msgstr ""

#: ../../../core-api/kernel-api:277: arch/x86/kernel/cpu/mtrr/mtrr.c:470
msgid "Physical base address"
msgstr ""

#: ../../../core-api/kernel-api:277: arch/x86/kernel/cpu/mtrr/mtrr.c:471
msgid "Size of region"
msgstr ""

#: ../../../core-api/kernel-api:277: arch/x86/kernel/cpu/mtrr/mtrr.c:472
msgid ""
"If PAT is available, this does nothing.  If PAT is unavailable, it attempts "
"to add a WC MTRR covering size bytes starting at base and logs an error if "
"this fails."
msgstr ""

#: ../../../core-api/kernel-api:277: arch/x86/kernel/cpu/mtrr/mtrr.c:476
msgid ""
"The called should provide a power of two size on an equivalent power of two "
"boundary."
msgstr ""

#: ../../../core-api/kernel-api:277: arch/x86/kernel/cpu/mtrr/mtrr.c:479
msgid ""
"Drivers must store the return value to pass to mtrr_del_wc_if_needed, but "
"drivers should not try to interpret that return value."
msgstr ""

#: ../../../core-api/kernel-api.rst:281
msgid "Security Framework"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:523
msgid "initializes the security framework"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:524
msgid "This should be called early in the kernel initialization sequence."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:613
msgid "Add a modules hooks to the hook lists."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:619
msgid "``struct security_hook_list *hooks``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:614
msgid "the hooks to add"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:616
msgid "``int count``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:615
msgid "the number of hooks to add"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:617
msgid "``const struct lsm_id *lsmid``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:616
msgid "the identification information for the security module"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:617
msgid "Each LSM has to register its hooks with the infrastructure."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:674
msgid "allocate a composite blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:680
msgid "``void **dest``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:675
msgid "the destination for the blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:676
msgid "the size of the blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:677
#: security/security.c:699
msgid "allocation type"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:678
msgid "Allocate a blob for all the modules"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:680
#: security/security.c:702 security/security.c:729 security/security.c:751
#: security/security.c:772 security/security.c:785 security/security.c:799
#: security/security.c:813 security/security.c:827 security/security.c:842
#: security/security.c:855 security/security.c:868 security/security.c:896
#: security/security.c:4917
msgid "Returns 0, or -ENOMEM if memory can't be allocated."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:697
msgid "allocate a composite cred blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:703
#: security/security.c:717 security/security.c:3261 security/security.c:3284
msgid "``struct cred *cred``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:698
#: security/security.c:712
msgid "the cred that needs a blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:700
#: security/security.c:713
msgid "Allocate the cred blob for all the modules"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:711
msgid "during initialization allocate a composite cred blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:725
msgid "allocate a composite file blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:731
#: security/security.c:2899 security/security.c:2923 security/security.c:2944
#: security/security.c:2955 security/security.c:3044 security/security.c:3091
#: security/security.c:3106 security/security.c:3125 security/security.c:3161
#: security/security.c:3175 security/security.c:3210
msgid "``struct file *file``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:726
msgid "the file that needs a blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:727
msgid "Allocate the file blob for all the modules"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:746
msgid "allocate a composite inode blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:747
msgid "the inode that needs a blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:748
#: security/security.c:1726 security/security.c:5554
msgid "allocation flags"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:749
msgid "Allocate the inode blob for all the modules"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:768
msgid "allocate a composite task blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:774
#: security/security.c:884 security/security.c:3225 security/security.c:3246
msgid "``struct task_struct *task``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:769
#: security/security.c:879
msgid "the task that needs a blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:770
#: security/security.c:880
msgid "Allocate the task blob for all the modules"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:781
msgid "allocate a composite ipc blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:787
msgid "``struct kern_ipc_perm *kip``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:782
msgid "the ipc that needs a blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:783
#: security/security.c:811
msgid "Allocate the ipc blob for all the modules"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:795
msgid "allocate a composite key blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:801
#: security/security.c:4542 security/security.c:5557 security/security.c:5581
#: security/security.c:5609 security/security.c:5625
msgid "``struct key *key``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:796
msgid "the key that needs a blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:797
msgid "Allocate the key blob for all the modules"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:809
msgid "allocate a composite msg_msg blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:815
msgid "``struct msg_msg *mp``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:810
msgid "the msg_msg that needs a blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:823
msgid "allocate a composite block_device blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:829
#: ../../../core-api/kernel-api:323: block/blk-settings.c:913
#: ../../../core-api/kernel-api:326: block/blk-flush.c:468
#: ../../../core-api/kernel-api:329: block/blk-lib.c:82 block/blk-lib.c:262
#: block/blk-lib.c:303 ../../../core-api/kernel-api:335:
#: kernel/trace/blktrace.c:703 ../../../core-api/kernel-api:344:
#: block/bdev.c:162 block/bdev.c:278 block/bdev.c:320 block/bdev.c:576
#: block/bdev.c:663 block/bdev.c:1232
msgid "``struct block_device *bdev``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:824
msgid "the block_device that needs a blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:825
msgid "Allocate the block_device blob for all the modules"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:838
msgid "allocate a composite bpf_map blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:844
#: security/security.c:5733 security/security.c:5762 security/security.c:5875
msgid "``struct bpf_map *map``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:839
msgid "the bpf_map that needs a blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:840
msgid "Allocate the bpf_map blob for all the modules"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:851
msgid "allocate a composite bpf_prog blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:857
#: security/security.c:5748 security/security.c:5789 security/security.c:5888
msgid "``struct bpf_prog *prog``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:852
msgid "the bpf_prog that needs a blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:853
msgid "Allocate the bpf_prog blob for all the modules"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:864
msgid "allocate a composite bpf_token blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:870
#: security/security.c:5760 security/security.c:5787 security/security.c:5817
#: security/security.c:5901
msgid "``struct bpf_token *token``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:865
msgid "the bpf_token that needs a blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:866
msgid "Allocate the bpf_token blob for all the modules"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:878
msgid "during initialization allocate a composite task blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:892
msgid "allocate a composite superblock blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:898
#: security/security.c:1443 security/security.c:1465 security/security.c:1477
#: security/security.c:1565
msgid "``struct super_block *sb``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:893
msgid "the superblock that needs a blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:894
msgid "Allocate the superblock blob for all the modules"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:906
msgid "Fill a user space lsm_ctx structure"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:912
#: security/security.c:4160 security/security.c:4253
msgid "``struct lsm_ctx __user *uctx``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:907
msgid "a userspace LSM context to be filled"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:909
msgid "``u32 *uctx_len``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:908
msgid "available uctx size (input), used uctx size (output)"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:910
msgid "``void *val``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:909
msgid "the new LSM context value"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:911
msgid "``size_t val_len``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:910
msgid "the size of the new LSM context value"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:912
msgid "``u64 id``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:911
msgid "LSM id"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:913
msgid "``u64 flags``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:912
msgid "LSM defined flags"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:913
msgid ""
"Fill all of the fields in a userspace lsm_ctx structure.  If **uctx** is "
"NULL simply calculate the required size to output via **utc_len** and return "
"success."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:917
msgid ""
"Returns 0 on success, -E2BIG if userspace buffer is not large enough, -"
"EFAULT on a copyout error, -ENOMEM if memory can't be allocated."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1027
msgid "Check if becoming binder ctx mgr is ok"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1033
msgid "``const struct cred *mgr``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1028
msgid "task credentials of current binder process"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1029
msgid "Check whether **mgr** is allowed to be the binder context manager."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1032
#: security/security.c:1221 security/security.c:3910 security/security.c:4029
msgid "Return 0 if permission is granted."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1040
msgid "Check if a binder transaction is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1046
#: security/security.c:1061 security/security.c:1076
msgid "``const struct cred *from``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1041
#: security/security.c:1056 security/security.c:1071
msgid "sending process"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1043
#: security/security.c:1058 security/security.c:1073
msgid "``const struct cred *to``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1042
#: security/security.c:1057 security/security.c:1072
msgid "receiving process"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1043
msgid ""
"Check whether **from** is allowed to invoke a binder transaction call to "
"**to**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1046
#: security/security.c:1061 security/security.c:1077 security/security.c:1097
#: security/security.c:1112 security/security.c:1193 security/security.c:1206
#: security/security.c:1236 security/security.c:1554 security/security.c:1582
#: security/security.c:1604 security/security.c:1619 security/security.c:1633
#: security/security.c:1698 security/security.c:1715 security/security.c:1982
#: security/security.c:2016 security/security.c:2034 security/security.c:2078
#: security/security.c:2096 security/security.c:2113 security/security.c:2128
#: security/security.c:2178 security/security.c:2195 security/security.c:2212
#: security/security.c:2248 security/security.c:2269 security/security.c:2289
#: security/security.c:2317 security/security.c:2335 security/security.c:2357
#: security/security.c:2410 security/security.c:2443 security/security.c:2475
#: security/security.c:2512 security/security.c:2531 security/security.c:2584
#: security/security.c:2600 security/security.c:2630 security/security.c:2672
#: security/security.c:2687 security/security.c:2884 security/security.c:2909
#: security/security.c:3046 security/security.c:3061 security/security.c:3076
#: security/security.c:3092 security/security.c:3111 security/security.c:3146
#: security/security.c:3161 security/security.c:3179 security/security.c:3211
#: security/security.c:3547 security/security.c:3561 security/security.c:3574
#: security/security.c:3617 security/security.c:3631 security/security.c:3644
#: security/security.c:3660 security/security.c:3678 security/security.c:3693
#: security/security.c:3706 security/security.c:3719 security/security.c:3739
#: security/security.c:3812 security/security.c:3925 security/security.c:3941
#: security/security.c:3962 security/security.c:4014 security/security.c:4046
#: security/security.c:4097 security/security.c:4112 security/security.c:4129
#: security/security.c:4524 security/security.c:4542 security/security.c:4632
#: security/security.c:4655 security/security.c:4690 security/security.c:4707
#: security/security.c:4722 security/security.c:4738 security/security.c:4753
#: security/security.c:4769 security/security.c:4784 security/security.c:4797
#: security/security.c:4813 security/security.c:4828 security/security.c:4843
#: security/security.c:5407 security/security.c:5719 security/security.c:5734
#: security/security.c:5748 security/security.c:6009 security/security.c:6059
#: security/security.c:6072 security/security.c:6088 security/security.c:6101
#: security/security.c:6114 security/security.c:6126
msgid "Returns 0 if permission is granted."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1055
msgid "Check if a binder transfer is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1058
msgid ""
"Check whether **from** is allowed to transfer a binder reference to **to**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1070
msgid "Check if a binder file xfer is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1074
#: security/security.c:1307
msgid "``const struct file *file``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1073
msgid "file being transferred"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1074
msgid "Check whether **from** is allowed to transfer **file** to **to**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1086
#: security/security.c:1105
msgid "Check if tracing is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1092
msgid "``struct task_struct *child``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1087
#: security/security.c:1121 security/security.c:3728
msgid "target process"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1089
msgid "``unsigned int mode``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1088
msgid "PTRACE_MODE flags"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1089
msgid ""
"Check permission before allowing the current process to trace the **child** "
"process.  Security modules may also want to perform a process tracing check "
"during an execve in the set_security or apply_creds hooks of tracing check "
"during an execve in the bprm_set_creds hook of binprm_security_ops if the "
"process is being traced and its security attributes would be changed by the "
"execve."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1111
msgid "``struct task_struct *parent``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1106
msgid "tracing process"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1107
msgid ""
"Check that the **parent** process has sufficient permission to trace the "
"current process before allowing the current process to present itself to the "
"**parent** process for tracing."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1120
msgid "Get the capability sets for a process"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1126
msgid "``const struct task_struct *target``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1123
msgid "``kernel_cap_t *effective``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1122
#: security/security.c:1145
msgid "effective capability set"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1124
msgid "``kernel_cap_t *inheritable``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1123
#: security/security.c:1146
msgid "inheritable capability set"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1125
msgid "``kernel_cap_t *permitted``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1124
#: security/security.c:1147
msgid "permitted capability set"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1125
msgid ""
"Get the **effective**, **inheritable**, and **permitted** capability sets "
"for the **target** process.  The hook may also perform permission checking "
"to determine if the current process is allowed to see the capability sets of "
"the **target** process."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1131
msgid "Returns 0 if the capability sets were successfully obtained."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1142
msgid "Set the capability sets for a process"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1148
#: security/security.c:3305 security/security.c:3328 security/security.c:3370
#: security/security.c:3385 security/security.c:3489 security/security.c:3509
#: security/security.c:3529
msgid "``struct cred *new``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1143
msgid "new credentials for the target process"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1145
#: security/security.c:3302 security/security.c:3325 security/security.c:3486
#: security/security.c:3506 security/security.c:3526
#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2761
#: kernel/auditsc.c:2807
msgid "``const struct cred *old``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1144
msgid "current credentials of the target process"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1146
msgid "``const kernel_cap_t *effective``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1147
msgid "``const kernel_cap_t *inheritable``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1148
msgid "``const kernel_cap_t *permitted``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1148
msgid ""
"Set the **effective**, **inheritable**, and **permitted** capability sets "
"for the current process."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1152
msgid "Returns 0 and update **new** if permission is granted."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1164
msgid "Check if a process has the necessary capability"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1170
#: security/security.c:3658 security/security.c:3732 security/security.c:3799
#: security/security.c:4520 security/security.c:5554 security/security.c:5590
msgid "``const struct cred *cred``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1165
msgid "credentials to examine"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1167
msgid "``struct user_namespace *ns``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1166
msgid "user namespace"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1168
#: security/security.c:5857
msgid "``int cap``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1167
msgid "capability requested"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1169
msgid "``unsigned int opts``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1168
msgid "capability check options"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1169
msgid ""
"Check whether the **tsk** process has the **cap** capability in the "
"indicated credentials.  **cap** contains the capability <include/linux/"
"capability.h>. **opts** contains options for the capable check <include/"
"linux/security.h>."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1174
msgid "Returns 0 if the capability is granted."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1185
msgid "Check if a quotactl() syscall is allowed for this fs"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1191
msgid "``int cmds``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1186
msgid "commands"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1188
#: security/security.c:1220 security/security.c:4627 security/security.c:4644
#: security/security.c:6010 ../../../core-api/kernel-api:292:
#: kernel/audit.c:1893 kernel/audit.c:2655 ../../../core-api/kernel-api:298:
#: kernel/auditfilter.c:1134
msgid "``int type``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1187
msgid "type"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1188
msgid "id"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1190
#: security/security.c:1555
msgid "``const struct super_block *sb``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1189
msgid "filesystem"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1190
msgid "Check whether the quotactl syscall is allowed for this **sb**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1201
msgid "Check if QUOTAON is allowed for a dentry"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1207
#: security/security.c:1582 security/security.c:1946 security/security.c:1979
#: security/security.c:2012 security/security.c:2192 security/security.c:2208
#: security/security.c:2245 security/security.c:2261 security/security.c:2318
#: security/security.c:2333 security/security.c:2392 security/security.c:2423
#: security/security.c:2469 security/security.c:2493 security/security.c:2507
#: security/security.c:2526 security/security.c:2545 security/security.c:2565
#: security/security.c:2583 security/security.c:2600 security/security.c:2613
#: security/security.c:2657 security/security.c:2671 security/security.c:2686
#: security/security.c:2701 security/security.c:2714
#: ../../../core-api/kernel-api:286: security/inode.c:297
msgid "``struct dentry *dentry``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1202
msgid "dentry"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1203
msgid "Check whether QUOTAON is allowed for **dentry**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1214
msgid "Check if accessing the kernel message ring is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1215
msgid "SYSLOG_ACTION_* type"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1216
msgid ""
"Check permission before accessing the kernel message ring or changing "
"logging to the console.  See the syslog(2) manual page for an explanation of "
"the **type** values."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1229
msgid "Check if changing the system time is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1235
msgid "``const struct timespec64 *ts``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1230
msgid "new time"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1232
msgid "``const struct timezone *tz``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1231
msgid "timezone"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1232
msgid ""
"Check permission to change the system time, struct timespec64 is defined in "
"<include/linux/time64.h> and timezone is defined in <include/linux/time.h>."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1244
msgid "Check if allocating a new mem map is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1250
msgid "``struct mm_struct *mm``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1245
msgid "mm struct"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1247
msgid "``long pages``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1246
msgid "number of pages"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1247
msgid ""
"Check permissions for allocating a new virtual mapping.  If all LSMs return "
"a positive value, __vm_enough_memory() will be called with cap_sys_admin "
"set. If at least one LSM returns 0 or negative, __vm_enough_memory() will be "
"called with cap_sys_admin cleared."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1253
msgid ""
"Returns 0 if permission is granted by the LSM infrastructure to the caller."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1279
msgid "Prepare the credentials for exec()"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1285
#: security/security.c:1310 security/security.c:1334
#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2763
msgid "``struct linux_binprm *bprm``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1280
#: security/security.c:1305 security/security.c:1329 security/security.c:1346
#: security/security.c:1363
msgid "binary program information"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1281
msgid ""
"If the setup in prepare_exec_creds did not setup **bprm->cred->security** "
"properly for executing **bprm->file**, update the LSM's portion of **bprm-"
">cred->security** to be what commit_creds needs to install for the new "
"program.  This hook may also optionally check permissions (e.g. for "
"transitions between security domains).  The hook must set **bprm-"
">secureexec** to 1 if AT_SECURE should be set to request libc enable secure "
"mode.  **bprm** contains the linux_binprm structure."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1289
msgid ""
"If execveat(2) is called with the AT_EXECVE_CHECK flag, bprm->is_check is "
"set.  The result must be the same as without this flag even if the execution "
"will never really happen and **bprm** will always be dropped."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1293
msgid "This hook must not change current->cred, only **bprm->cred**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1296
#: security/security.c:1320 security/security.c:1337
msgid "Returns 0 if the hook is successful and permission is granted."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1304
msgid "Update linux_binprm creds based on file"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1306
msgid "associated file"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1307
msgid ""
"If **file** is setpcap, suid, sgid or otherwise marked to change privilege "
"upon exec, update **bprm->cred** to reflect that change. This is called "
"after finding the binary that will be executed without an interpreter.  This "
"ensures that the credentials will not be derived from a script that the "
"binary will need to reopen, which when reopend may end up being a completely "
"different file.  This hook may also optionally check permissions (e.g. for "
"transitions between security domains).  The hook must set **bprm-"
">secureexec** to 1 if AT_SECURE should be set to request libc enable secure "
"mode.  The hook must add to **bprm->per_clear** any personality flags that "
"should be cleared from current->personality.  **bprm** contains the "
"linux_binprm structure."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1328
msgid "Mediate binary handler search"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1330
msgid ""
"This hook mediates the point when a search for a binary handler will begin. "
"It allows a check against the **bprm->cred->security** value which was set "
"in the preceding creds_for_exec call.  The argv list and envp list are "
"reliably available in **bprm**.  This hook may be called multiple times "
"during a single execve.  **bprm** contains the linux_binprm structure."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1345
msgid "Install creds for a process during exec()"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1351
#: security/security.c:1368
msgid "``const struct linux_binprm *bprm``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1347
msgid ""
"Prepare to install the new security attributes of a process being "
"transformed by an execve operation, based on the old credentials pointed to "
"by **current->cred** and the information set in **bprm->cred** by the "
"bprm_creds_for_exec hook.  **bprm** points to the linux_binprm structure.  "
"This hook is a good place to perform state changes on the process such as "
"closing open file descriptors to which access will no longer be granted when "
"the attributes are changed.  This is called immediately before "
"commit_creds()."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1362
msgid "Tidy up after cred install during exec()"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1364
msgid ""
"Tidy up after the installation of the new security attributes of a process "
"being transformed by an execve operation.  The new credentials have, by this "
"point, been set to **current->cred**.  **bprm** points to the linux_binprm "
"structure.  This hook is a good place to perform state changes on the "
"process such as clearing out non-inheritable signal state.  This is called "
"immediately after commit_creds()."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1378
msgid "Initialise fc->security"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1384
#: security/security.c:1398 security/security.c:1414
msgid "``struct fs_context *fc``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1379
msgid "new filesystem context"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1381
msgid "``struct super_block *reference``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1380
msgid "dentry reference for submount/remount"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1381
msgid "Fill out the ->security field for a new fs_context."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1384
msgid "Returns 0 on success or negative error code on failure."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1392
msgid "Duplicate a fs_context LSM blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1393
msgid "destination filesystem context"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1395
msgid "``struct fs_context *src_fc``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1394
msgid "source filesystem context"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1395
msgid ""
"Allocate and attach a security structure to sc->security.  This pointer is "
"initialised to NULL by the caller.  **fc** indicates the new filesystem "
"context. **src_fc** indicates the original filesystem context."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1408
msgid "Configure a filesystem context"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1409
msgid "filesystem context"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1411
msgid "``struct fs_parameter *param``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1410
msgid "filesystem parameter"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1411
msgid ""
"Userspace provided a parameter to configure a superblock.  The LSM can "
"consume the parameter or return it to the caller for use elsewhere."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1415
msgid ""
"If the parameter is used by the LSM it should return 0, if it is returned to "
"the caller -ENOPARAM is returned, otherwise a negative error code is "
"returned."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1437
msgid "Allocate a super_block LSM blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1438
#: security/security.c:1460 security/security.c:1472 security/security.c:1550
#: security/security.c:1564
msgid "filesystem superblock"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1439
msgid ""
"Allocate and attach a security structure to the sb->s_security field.  The "
"s_security field is initialized to NULL when the structure is allocated. "
"**sb** contains the super_block structure to be modified."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1444
#: security/security.c:5442
msgid "Returns 0 if operation was successful."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1459
msgid "Release super_block LSM associated objects"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1461
msgid ""
"Release objects tied to a superblock (e.g. inodes).  **sb** contains the "
"super_block structure being released."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1471
msgid "Free a super_block LSM blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1473
msgid ""
"Deallocate and clear the sb->s_security field.  **sb** contains the "
"super_block structure to be modified."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1549
msgid "Check if a kernel mount is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1551
msgid "Mount this **sb** if allowed by permissions."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1562
msgid "Output the mount options for a superblock"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1568
msgid "``struct seq_file *m``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1563
msgid "output file"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1565
msgid "Show (print on **m**) mount options for this **sb**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1568
#: security/security.c:3262 security/security.c:3306
msgid "Returns 0 on success, negative values on failure."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1576
msgid "Check if accessing fs stats is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1577
msgid "superblock handle"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1578
msgid ""
"Check permission before obtaining filesystem statistics for the **mnt** "
"mountpoint.  **dentry** is a handle on the superblock for the filesystem."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1590
msgid "Check permission for mounting a filesystem"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1596
msgid "``const char *dev_name``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1591
msgid "filesystem backing device"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1593
#: security/security.c:1713 security/security.c:2077 security/security.c:2094
#: security/security.c:2112 security/security.c:2129 security/security.c:2411
#: security/security.c:5815
msgid "``const struct path *path``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1592
msgid "mount point"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1594
msgid "``const char *type``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1593
msgid "filesystem type"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1594
msgid "mount flags"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1596
#: ../../../core-api/kernel-api:286: security/inode.c:186
#: ../../../core-api/kernel-api:298: kernel/auditfilter.c:1132
msgid "``void *data``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1595
msgid "filesystem specific data"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1596
msgid ""
"Check permission before an object specified by **dev_name** is mounted on "
"the mount point named by **nd**.  For an ordinary mount, **dev_name** "
"identifies a device if the file system type requires a device.  For a "
"remount (**flags** & MS_REMOUNT), **dev_name** is irrelevant.  For a "
"loopback/bind mount (**flags** & MS_BIND), **dev_name** identifies the "
"pathname of the object being mounted."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1613
msgid "Check permission for unmounting a filesystem"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1619
msgid "``struct vfsmount *mnt``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1614
msgid "mounted filesystem"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1615
msgid "unmount flags"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1616
msgid "Check permission before the **mnt** file system is unmounted."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1627
msgid "Check permissions for pivoting the rootfs"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1633
msgid "``const struct path *old_path``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1628
msgid "new location for current rootfs"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1630
msgid "``const struct path *new_path``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1629
msgid "location of the new rootfs"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1630
msgid "Check permission before pivoting the root filesystem."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1692
msgid "Check permissions for moving a mount"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1698
msgid "``const struct path *from_path``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1693
msgid "source mount point"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1695
msgid "``const struct path *to_path``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1694
msgid "destination mount point"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1695
msgid "Check permission before a mount is moved."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1707
msgid "Check if setting a watch is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1708
msgid "file path"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1709
msgid "event mask"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1711
msgid "``unsigned int obj_type``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1710
msgid "file path type"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1711
msgid ""
"Check permissions before setting a watch on events as defined by **mask**, "
"on an object at **path**, whose type is defined by **obj_type**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1724
msgid "Allocate an inode LSM blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1727
msgid ""
"Allocate and attach a security structure to **inode->i_security**.  The "
"i_security field is initialized to NULL when the inode structure is "
"allocated."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1732
#: security/security.c:5381
msgid "Return 0 if operation was successful."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1754
msgid "Free an inode's LSM blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1756
msgid ""
"Release any LSM resources associated with **inode**, although due to the "
"inode's RCU protections it is possible that the resources will not be fully "
"released until after the current RCU grace period has elapsed."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1760
msgid ""
"It is important for LSMs to note that despite being present in a call to "
"security_inode_free(), **inode** may still be referenced in a VFS path walk "
"and calls to security_inode_permission() may be made during, or after, a "
"call to security_inode_free().  For this reason the inode->i_security field "
"is released via a call_rcu() callback and any LSMs which need to retain "
"inode state for use in security_inode_permission() should only release that "
"state in the inode_free_security_rcu() LSM hook callback."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1901
msgid "Initialize an anonymous inode"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1904
msgid "``const struct qstr *name``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1903
msgid "the anonymous inode class"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1905
msgid "``const struct inode *context_inode``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1904
msgid "an optional related inode"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1905
msgid ""
"Set up the incore security field for the new anonymous inode and return "
"whether the inode creation is permitted by the security module or not."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1909
msgid ""
"Returns 0 on success, -EACCES if the security module denies the creation of "
"this inode, or another -errno upon other errors."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1943
msgid "Update inode security after reg file creation"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1949
#: security/security.c:2162 security/security.c:2395 security/security.c:2426
#: security/security.c:2472 security/security.c:2510 security/security.c:2529
#: security/security.c:2548 security/security.c:2616 security/security.c:2717
#: security/security.c:2734
msgid "``struct mnt_idmap *idmap``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1944
#: security/security.c:2157 security/security.c:2390 security/security.c:2421
#: security/security.c:2467 security/security.c:2505 security/security.c:2524
#: security/security.c:2543 security/security.c:2611 security/security.c:2712
#: security/security.c:2729
msgid "idmap of the mount"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1945
#: security/security.c:2260
msgid "new file"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1946
msgid "Update inode security field after a regular file has been created."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1976
#: security/security.c:2242
msgid "Check if removing a directory is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1982
#: security/security.c:2015
msgid "``const struct path *dir``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1977
#: security/security.c:2010 security/security.c:2190 security/security.c:2206
#: security/security.c:2243 security/security.c:2259
msgid "parent directory"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1978
msgid "directory to remove"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:1979
#: security/security.c:2245
msgid "Check the permission to remove a directory."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2009
#: security/security.c:2205
msgid "Check if creating a symbolic link is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2011
#: security/security.c:2207
msgid "symbolic link"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2013
#: security/security.c:2209
msgid "``const char *old_name``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2012
msgid "file pathname"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2013
#: security/security.c:2209
msgid "Check the permission to create a symbolic link to a file."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2027
#: security/security.c:2171
msgid "Check if creating a hard link is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2033
#: security/security.c:2177 security/security.c:2283
msgid "``struct dentry *old_dentry``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2028
#: security/security.c:2172
msgid "existing file"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2030
msgid "``const struct path *new_dir``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2029
#: security/security.c:2173
msgid "new parent directory"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2031
#: security/security.c:2175 security/security.c:2285
msgid "``struct dentry *new_dentry``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2030
#: security/security.c:2174
msgid "new link"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2031
#: security/security.c:2175
msgid "Check permission before creating a new hard link to a file."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2071
#: security/security.c:3204
msgid "Check if truncating a file is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2072
#: security/security.c:2089 security/security.c:2107 security/security.c:2191
#: security/security.c:2391 security/security.c:2406 security/security.c:2422
#: security/security.c:2468 security/security.c:2488 security/security.c:2506
#: security/security.c:2525 security/security.c:2544 security/security.c:2560
#: security/security.c:2578 security/security.c:2595 security/security.c:2612
#: security/security.c:2652 security/security.c:2894 security/security.c:3039
#: security/security.c:3086 security/security.c:3101 security/security.c:3205
msgid "file"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2073
msgid ""
"Check permission before truncating the file indicated by path.  Note that "
"truncation permissions may also be checked based on already opened files, "
"using the security_file_truncate() hook."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2088
msgid "Check if changing the file's mode is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2091
#: security/security.c:2262 ../../../core-api/kernel-api:286:
#: security/inode.c:182 ../../../core-api/kernel-api:295: kernel/auditsc.c:2512
#: kernel/auditsc.c:2614
msgid "``umode_t mode``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2090
msgid "new mode"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2091
msgid ""
"Check for permission to change a mode of the file **path**. The new mode is "
"specified in **mode** which is a bitmask of constants from <include/uapi/"
"linux/stat.h>."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2106
msgid "Check if changing the file's owner/group is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2109
msgid "``kuid_t uid``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2108
msgid "file owner"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2110
msgid "``kgid_t gid``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2109
msgid "file group"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2110
msgid "Check for permission to change owner/group of a file or directory."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2123
msgid "Check if changing the root directory is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2124
msgid "directory"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2125
msgid "Check for permission to change root directory."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2156
msgid "Update inode security of new tmpfile"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2158
msgid "inode of the new tmpfile"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2159
msgid "Update inode security data after a tmpfile has been created."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2174
#: security/security.c:2195 security/security.c:2211 security/security.c:2248
#: security/security.c:2264
msgid "``struct inode *dir``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2189
msgid "Check if removing a hard link is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2192
msgid "Check the permission to remove a hard link to a file."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2208
msgid "existing filename"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2244
msgid "directory to be removed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2258
msgid "Check if creating a special file is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2261
msgid "new file mode"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2263
#: ../../../core-api/kernel-api:335: kernel/trace/blktrace.c:963
#: kernel/trace/blktrace.c:997 ../../../core-api/kernel-api:350:
#: fs/char_dev.c:473
msgid "``dev_t dev``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2262
msgid "device number"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2263
msgid ""
"Check permissions when creating a special file (or a socket or a fifo file "
"created via the mknod system call).  Note that if mknod operation is being "
"done for a regular file, then the create hook will be called and not this "
"hook."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2280
msgid "Check if renaming a file is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2286
msgid "``struct inode *old_dir``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2281
msgid "parent directory of the old file"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2282
msgid "the old file"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2284
msgid "``struct inode *new_dir``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2283
msgid "parent directory of the new file"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2284
msgid "the new file"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2285
#: security/security.c:2426 security/security.c:2564 security/security.c:2760
#: security/security.c:3041
msgid "flags"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2286
msgid "Check for permission to rename a file or directory."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2312
msgid "Check if reading a symbolic link is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2313
msgid "link"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2314
msgid "Check the permission to read the symbolic link."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2327
msgid "Check if following a symbolic link is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2328
msgid "link dentry"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2329
msgid "link inode"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2331
msgid "``bool rcu``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2330
msgid "true if in RCU-walk mode"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2331
msgid ""
"Check permission to follow a symbolic link when looking up a pathname.  If "
"**rcu** is true, **inode** is not stable."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2346
msgid "Check if accessing an inode is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2347
#: security/security.c:2730 security/security.c:2756 security/security.c:2803
#: security/security.c:3782
msgid "inode"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2349
#: security/security.c:2896
msgid "``int mask``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2348
msgid "access mask"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2349
msgid ""
"Check permission before accessing an inode.  This hook is called by the "
"existing Linux permission function, so a security module can use it to "
"provide additional checking for existing Linux permission checks.  Notice "
"that this hook is called when a file is opened (as well as many other "
"operations), whereas the file_security_ops permission hook is called when "
"the actual read/write operations are performed."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2389
msgid "Update the inode after a setattr operation"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2393
msgid "``int ia_valid``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2392
msgid "file attributes set"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2393
msgid "Update inode security field after successful setting file attributes."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2405
msgid "Check if getting file attributes is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2407
msgid "Check permission before obtaining file attributes."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2420
msgid "Check if setting file xattrs is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2423
#: security/security.c:2561 security/security.c:2579 security/security.c:2613
#: security/security.c:2653 security/security.c:2731 security/security.c:2757
msgid "xattr name"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2425
#: security/security.c:2563 security/security.c:2759
msgid "``const void *value``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2424
#: security/security.c:2562
msgid "xattr value"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2425
msgid "size of xattr value"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2427
#: security/security.c:2614
msgid ""
"This hook performs the desired permission checks before setting the extended "
"attributes (xattrs) on **dentry**.  It is important to note that we have "
"some additional logic before the main LSM implementation calls to detect if "
"we need to perform an additional capability check at the LSM layer."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2432
#: security/security.c:2619
msgid ""
"Normally we enforce a capability check prior to executing the various LSM "
"hook implementations, but if a LSM wants to avoid this capability check, it "
"can register a 'inode_xattr_skipcap' hook and return a value of 1 for xattrs "
"that it wants to avoid the capability check, leaving the LSM fully "
"responsible for enforcing the access control for the specific xattr.  If all "
"of the enabled LSMs refrain from registering a 'inode_xattr_skipcap' hook, "
"or return a 0 (the default return value), the capability check is still "
"performed.  If no 'inode_xattr_skipcap' hooks are registered the capability "
"check is performed."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2466
msgid "Check if setting posix acls is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2470
#: security/security.c:2490 security/security.c:2508 security/security.c:2527
#: security/security.c:2546
msgid "``const char *acl_name``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2469
#: security/security.c:2489 security/security.c:2507 security/security.c:2526
#: security/security.c:2545
msgid "acl name"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2471
#: security/security.c:2491
msgid "``struct posix_acl *kacl``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2470
#: security/security.c:2490
msgid "acl struct"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2471
msgid ""
"Check permission before setting posix acls, the posix acls in **kacl** are "
"identified by **acl_name**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2487
msgid "Update inode security from posix acls set"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2491
msgid ""
"Update inode security data after successfully setting posix acls on "
"**dentry**. The posix acls in **kacl** are identified by **acl_name**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2504
msgid "Check if reading posix acls is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2508
msgid ""
"Check permission before getting osix acls, the posix acls are identified by "
"**acl_name**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2523
msgid "Check if removing a posix acl is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2527
msgid ""
"Check permission before removing posix acls, the posix acls are identified "
"by **acl_name**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2542
msgid "Update inode security after rm posix acls"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2546
msgid ""
"Update inode security data after successfully removing posix acls on "
"**dentry** in **idmap**. The posix acls are identified by **acl_name**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2559
msgid "Update the inode after a setxattr operation"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2563
msgid "xattr value size"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2565
msgid "Update inode security field after successful setxattr operation."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2577
msgid "Check if xattr access is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2580
msgid ""
"Check permission before obtaining the extended attributes identified by "
"**name** for **dentry**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2594
msgid "Check if listing xattrs is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2596
msgid ""
"Check permission before obtaining the list of extended attribute names for "
"**dentry**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2610
msgid "Check if removing an xattr is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2651
msgid "Update the inode after a removexattr op"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2654
msgid "Update the inode after a successful removexattr operation."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2665
msgid "check if setting fsxattr is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2666
msgid "file to set filesystem extended attributes on"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2668
#: security/security.c:2683
msgid "``struct file_kattr *fa``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2667
msgid "extended attributes to set on the inode"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2668
msgid ""
"Called when file_setattr() syscall or FS_IOC_FSSETXATTR ioctl() is called on "
"inode"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2680
msgid "check if retrieving fsxattr is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2681
msgid "file to retrieve filesystem extended attributes from"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2682
msgid "extended attributes to get"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2683
msgid ""
"Called when file_getattr() syscall or FS_IOC_FSGETXATTR ioctl() is called on "
"inode"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2695
msgid "Check if security_inode_killpriv() required"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2696
#: security/security.c:2713
msgid "associated dentry"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2697
msgid ""
"Called when an inode has been changed to determine if "
"security_inode_killpriv() should be called."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2701
msgid ""
"Return <0 on error to abort the inode change operation, return 0 if "
"security_inode_killpriv() does not need to be called, return >0 if "
"security_inode_killpriv() does need to be called."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2711
msgid "The setuid bit is removed, update LSM state"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2714
msgid ""
"The **dentry**'s setuid bit is being removed.  Remove similar security "
"labels. Called with the dentry->d_inode->i_mutex held."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2718
msgid ""
"Return 0 on success.  If error is returned, then the operation causing "
"setuid bit removal is failed."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2728
msgid "Get the xattr security label of an inode"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2733
msgid "``void **buffer``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2732
#: security/security.c:5605
msgid "security label buffer"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2734
msgid "``bool alloc``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2733
msgid "allocation flag"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2734
msgid ""
"Retrieve a copy of the extended attribute representation of the security "
"label associated with **name** for **inode** via **buffer**.  Note that "
"**name** is the remainder of the attribute name after the security prefix "
"has been removed. **alloc** is used to specify if the call should return a "
"value via the buffer or just the value length."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2741
msgid "Returns size of buffer on success."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2755
msgid "Set the xattr security label of an inode"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2758
#: security/security.c:5689
msgid "security label"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2759
msgid "length of security label"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2761
msgid ""
"Set the security label associated with **name** for **inode** from the "
"extended attribute value **value**.  **size** indicates the size of the "
"**value** in bytes. **flags** may be XATTR_CREATE, XATTR_REPLACE, or 0. Note "
"that **name** is the remainder of the attribute name after the security. "
"prefix has been removed."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2767
#: security/security.c:3127 security/security.c:3494 security/security.c:3514
#: security/security.c:3532
msgid "Returns 0 on success."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2802
msgid "Get an inode's LSM data"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2805
#: security/security.c:3823 security/security.c:5694
#: ../../../core-api/kernel-api:292: kernel/audit.c:2279
msgid "``struct lsm_prop *prop``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2804
msgid "lsm specific information to return"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2805
msgid "Get the lsm specific information associated with the node."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2877
msgid "Init LSM context for a kernfs node"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2883
msgid "``struct kernfs_node *kn_dir``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2878
msgid "parent kernfs node"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2880
msgid "``struct kernfs_node *kn``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2879
msgid "the kernfs node to initialize"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2880
msgid ""
"Initialize the security context of a newly created kernfs node based on its "
"own and its parent's attributes."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2893
msgid "Check file permissions"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2895
#: security/security.c:3808 security/security.c:5590
msgid "requested permissions"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2896
msgid ""
"Check file permissions before accessing an open file.  This hook is called "
"by various operations that read or write files.  A security module can use "
"this hook to perform additional checking on these operations, e.g. to "
"revalidate permissions on use to support privilege bracketing or policy "
"changes.  Notice that this hook is used when the actual read/write "
"operations are performed, whereas the inode_security_ops hook is called when "
"a file is opened (as well as many other operations).  Although this hook can "
"be used to revalidate permissions for various system call operations that "
"read or write files, it does not address the revalidation of permissions for "
"memory-mapped files.  Security modules must handle this separately if they "
"need such revalidation."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2917
msgid "Allocate and init a file's LSM blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2919
msgid ""
"Allocate and attach a security structure to the file->f_security field.  The "
"security field is initialized to NULL when the structure is first created."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2923
msgid "Return 0 if the hook is successful and permission is granted."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2938
msgid "Perform actions before releasing the file ref"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2940
msgid "Perform actions before releasing the last reference to a file."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2949
msgid "Free a file's LSM blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:2951
msgid "Deallocate and free any security structures stored in file->f_security."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3038
msgid "Check if mmap'ing a file is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3041
#: security/security.c:3073
msgid "``unsigned long prot``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3040
#: security/security.c:3072
msgid "protection applied by the kernel"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3042
msgid ""
"Check permissions for a mmap operation.  The **file** may be NULL, e.g. if "
"mapping anonymous memory."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3056
msgid "Check if mmap'ing an address is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3062
msgid "``unsigned long addr``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3057
msgid "address"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3058
msgid "Check permissions for a mmap operation at **addr**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3069
msgid "Check if changing memory protections is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3070
msgid "memory region"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3072
msgid "``unsigned long reqprot``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3071
msgid "application requested protection"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3073
msgid "Check permissions before changing memory access permissions."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3085
msgid "Check if a file lock is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3088
#: security/security.c:3103
msgid "``unsigned int cmd``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3087
msgid "lock operation (e.g. F_RDLCK, F_WRLCK)"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3088
msgid ""
"Check permission before performing file locking operations.  Note the hook "
"mediates both flock and fcntl style locks."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3100
msgid "Check if fcntl() op is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3102
msgid "fcntl command"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3104
msgid "``unsigned long arg``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3103
msgid "command argument"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3104
msgid ""
"Check permission before allowing the file operation specified by **cmd** "
"from being performed on the file **file**.  Note that **arg** sometimes "
"represents a user space pointer; in other cases, it may be a simple integer "
"value.  When **arg** represents a user space pointer, it should never be "
"used by the security module."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3119
msgid "Set the file owner info in the LSM blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3121
msgid ""
"Save owner security information (typically from current->security) in file-"
">f_security for later use by the send_sigiotask hook."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3124
msgid "This hook is called with file->f_owner.lock held."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3135
msgid "Check if sending SIGIO/SIGURG is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3141
#: ../../../core-api/kernel-api:295: kernel/auditsc.c:820 kernel/auditsc.c:854
#: kernel/auditsc.c:1055 kernel/auditsc.c:1803
msgid "``struct task_struct *tsk``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3136
#: security/security.c:3612 security/security.c:3626 security/security.c:3688
#: security/security.c:3702 security/security.c:3953
msgid "target task"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3138
msgid "``struct fown_struct *fown``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3137
msgid "signal sender"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3139
#: security/security.c:3731
msgid "``int sig``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3138
msgid "signal to be sent, SIGIO is sent if 0"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3139
msgid ""
"Check permission for the file owner **fown** to send SIGIO or SIGURG to the "
"process **tsk**.  Note that this hook is sometimes called from interrupt.  "
"Note that the fown_struct, **fown**, is never outside the context of a "
"struct file, so the file structure (and associated security information) can "
"always be obtained: container_of(fown, struct file, f_owner)."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3155
msgid "Check if receiving a file via IPC is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3156
msgid "file being received"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3157
msgid ""
"This hook allows security modules to control the ability of a process to "
"receive an open file descriptor via socket IPC."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3169
msgid "Save open() time state for late use by the LSM"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3171
msgid ""
"Save open-time permission checking state for later use upon file_permission, "
"and recheck access if anything has changed since inode_permission."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3174
msgid ""
"We can check if a file is opened for execution (e.g. execve(2) call), either "
"directly or indirectly (e.g. ELF's ld.so) by checking file->f_flags & "
"__FMODE_EXEC ."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3206
msgid ""
"Check permission before truncating a file, i.e. using ftruncate.  Note that "
"truncation permission may also be checked based on the path, using the "
"**path_truncate** hook."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3219
msgid "Allocate a task's LSM blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3220
#: security/security.c:4302
msgid "the task"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3222
msgid "``u64 clone_flags``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3221
msgid "flags indicating what is being shared"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3222
msgid "Handle allocation of task-related resources."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3225
msgid "Returns a zero on success, negative values on failure."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3240
msgid "Free a task's LSM blob and related resources"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3241
#: security/security.c:3556 security/security.c:3570 security/security.c:3640
#: security/security.c:3715 security/security.c:3781
#: ../../../core-api/kernel-api:295: kernel/auditsc.c:1050
msgid "task"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3242
msgid ""
"Handle release of task-related resources.  Note that this can be called from "
"interrupt context."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3255
msgid "Allocate the min memory to allow cred_transfer"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3256
#: security/security.c:3279 security/security.c:3365 security/security.c:5553
msgid "credentials"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3257
#: security/security.c:3302 security/security.c:4929
msgid "gfp flags"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3258
msgid ""
"Only allocate sufficient memory and attach to **cred** such that "
"cred_transfer() will not get ENOMEM."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3278
msgid "Free the cred's LSM blob and associated resources"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3280
msgid "Deallocate and clear the cred->security field in a set of credentials."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3299
msgid "Prepare a new set of credentials"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3300
#: security/security.c:6083
msgid "new credentials"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3301
#: security/security.c:3324
msgid "original credentials"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3303
msgid "Prepare a new set of credentials by copying the data from the old set."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3322
msgid "Transfer creds"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3323
#: security/security.c:3380
msgid "target credentials"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3325
msgid "Transfer data from original creds to new creds."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3364
msgid "Set the kernel credentials to act as secid"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3367
#: security/security.c:5437
msgid "``u32 secid``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3366
#: security/security.c:5528
msgid "secid"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3367
msgid ""
"Set the credentials for a kernel service to act as (subjective context). The "
"current task must be the one that nominated **secid**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3371
#: security/security.c:3387 security/security.c:3401
msgid "Returns 0 if successful."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3379
msgid "Set file creation context using an inode"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3381
msgid "reference inode"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3382
msgid ""
"Set the file creation context in a set of credentials to be the same as the "
"objective context of the specified inode.  The current task must be the one "
"that nominated **inode**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3395
msgid "Check if loading a module is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3401
msgid "``char *kmod_name``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3396
msgid "module name"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3397
msgid ""
"Ability to trigger the kernel to automatically upcall to userspace for "
"userspace to load a kernel module with the given name."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3483
msgid "Update LSM with new user id attributes"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3484
#: security/security.c:3504 security/security.c:3524
msgid "updated credentials"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3485
#: security/security.c:3505 security/security.c:3525
msgid "credentials being replaced"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3486
msgid "LSM_SETID_* flag values"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3487
msgid ""
"Update the module's state after setting one or more of the user identity "
"attributes of the current process.  The **flags** parameter indicates which "
"of the set*uid system calls invoked this hook.  If **new** is the set of "
"credentials that will be installed.  Modifications should be made to this "
"rather than to **current->cred**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3503
msgid "Update LSM with new group id attributes"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3506
msgid "LSM_SETID_* flag value"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3507
msgid ""
"Update the module's state after setting one or more of the group identity "
"attributes of the current process.  The **flags** parameter indicates which "
"of the set*gid system calls invoked this hook.  **new** is the set of "
"credentials that will be installed.  Modifications should be made to this "
"rather than to **current->cred**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3523
msgid "Update LSM with new supplementary groups"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3526
msgid ""
"Update the module's state after setting the supplementary group identity "
"attributes of the current process.  **new** is the set of credentials that "
"will be installed.  Modifications should be made to this rather than to "
"**current->cred**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3540
msgid "Check if setting the pgid is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3546
#: security/security.c:3561 security/security.c:3575 security/security.c:3617
#: security/security.c:3631 security/security.c:3645 security/security.c:3675
#: security/security.c:3693 security/security.c:3707 security/security.c:3720
#: security/security.c:3733 security/security.c:3786 security/security.c:4307
msgid "``struct task_struct *p``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3541
msgid "task being modified"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3543
msgid "``pid_t pgid``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3542
msgid "new pgid"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3543
msgid ""
"Check permission before setting the process group identifier of the process "
"**p** to **pgid**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3555
msgid "Check if getting the pgid is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3557
msgid ""
"Check permission before getting the process group identifier of the process "
"**p**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3569
msgid "Check if getting the session id is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3571
msgid ""
"Check permission before getting the session identifier of the process **p**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3611
msgid "Check if setting a task's nice value is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3614
msgid "``int nice``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3613
msgid "nice value"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3614
msgid "Check permission before setting the nice value of **p** to **nice**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3625
msgid "Check if setting a task's ioprio is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3628
msgid "``int ioprio``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3627
msgid "ioprio value"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3628
msgid ""
"Check permission before setting the ioprio value of **p** to **ioprio**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3639
msgid "Check if getting a task's ioprio is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3641
msgid "Check permission before getting the ioprio value of **p**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3652
msgid "Check if get/setting resources limits is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3653
msgid "current task credentials"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3655
msgid "``const struct cred *tcred``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3654
msgid "target task credentials"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3655
msgid "LSM_PRLIMIT_* flag bits indicating a get/set/both"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3656
msgid ""
"Check permission before getting and/or setting the resource limits of "
"another task."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3669
msgid "Check if setting a new rlimit value is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3670
msgid "target task's group leader"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3672
msgid "``unsigned int resource``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3671
msgid "resource whose limit is being set"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3673
msgid "``struct rlimit *new_rlim``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3672
msgid "new resource limit"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3673
msgid ""
"Check permission before setting the resource limits of process **p** for "
"**resource** to **new_rlim**.  The old resource limit values can be examined "
"by dereferencing (p->signal->rlim + resource)."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3687
msgid "Check if setting sched policy/param is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3689
msgid ""
"Check permission before setting scheduling policy and/or parameters of "
"process **p**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3701
msgid "Check if getting scheduling info is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3703
msgid ""
"Check permission before obtaining scheduling information for process **p**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3714
msgid "Check if moving memory is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3716
msgid "Check permission before moving memory owned by process **p**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3727
msgid "Check if sending a signal is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3730
msgid "``struct kernel_siginfo *info``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3729
msgid "signal information"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3730
#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2937
#: kernel/auditsc.c:2963
msgid "signal value"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3731
msgid "credentials of the signal sender, NULL if **current**"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3732
msgid ""
"Check permission before sending signal **sig** to **p**.  **info** can be "
"NULL, the constant 1, or a pointer to a kernel_siginfo structure.  If "
"**info** is 1 or SI_FROMKERNEL(info) is true, then the signal should be "
"viewed as coming from the kernel and should typically be permitted.  SIGIO "
"signals are handled separately by the send_sigiotask hook in "
"file_security_ops."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3748
msgid "Check if a prctl op is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3754
msgid "``int option``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3749
#: security/security.c:3920 security/security.c:4024 security/security.c:4107
msgid "operation"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3751
msgid "``unsigned long arg2``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3750
#: security/security.c:3751 security/security.c:3752 security/security.c:3753
msgid "argument"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3752
msgid "``unsigned long arg3``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3753
msgid "``unsigned long arg4``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3754
msgid "``unsigned long arg5``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3754
msgid ""
"Check permission before performing a process control operation on the "
"current process."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3758
msgid ""
"Return -ENOSYS if no-one wanted to handle this op, any other value to cause "
"prctl() to return immediately with that value."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3780
msgid "Set the security attributes of a task's inode"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3783
msgid ""
"Set the security attributes for an inode based on an associated task's "
"security attributes, e.g. for /proc/pid inodes."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3793
msgid "Check if creating a new userns is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3794
msgid "prepared creds"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3795
msgid "Check permission prior to creating a new user namespace."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3798
msgid "Returns 0 if successful, otherwise < 0 error code."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3806
msgid "Check if sysv ipc access is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3807
#: security/security.c:3821
msgid "ipc permission structure"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3809
msgid "Check permissions for access to IPC."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3820
msgid "Get the sysv ipc object LSM data"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3822
msgid "pointer to lsm information"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3823
msgid "Get the lsm information associated with the ipc object."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3834
msgid "Allocate a sysv ipc message LSM blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3840
#: security/security.c:3861 security/security.c:3936 security/security.c:3953
msgid "``struct msg_msg *msg``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3835
#: security/security.c:3856
msgid "message structure"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3836
msgid ""
"Allocate and attach a security structure to the msg->security field.  The "
"security field is initialized to NULL when the structure is first created."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3840
msgid "Return 0 if operation was successful and permission is granted."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3855
msgid "Free a sysv ipc message LSM blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3857
msgid "Deallocate the security structure for this message."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3868
msgid "Allocate a sysv ipc msg queue LSM blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3874
#: security/security.c:3895 security/security.c:3908 security/security.c:3924
#: security/security.c:3939 security/security.c:3956
msgid "``struct kern_ipc_perm *msq``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3869
#: security/security.c:3890 security/security.c:3903 security/security.c:3919
#: security/security.c:3934 security/security.c:3951 security/security.c:3972
#: security/security.c:3993 security/security.c:4006 security/security.c:4023
#: security/security.c:4038 security/security.c:4056 security/security.c:4077
#: security/security.c:4090 security/security.c:4106 security/security.c:4121
msgid "sysv ipc permission structure"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3870
msgid ""
"Allocate and attach a security structure to **msg**. The security field is "
"initialized to NULL when the structure is first created."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3874
#: security/security.c:3977 security/security.c:4061
msgid "Returns 0 if operation was successful and permission is granted."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3889
msgid "Free a sysv ipc msg queue LSM blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3891
msgid "Deallocate security field **perm->security** for the message queue."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3902
#: security/security.c:3918
msgid "Check if a msg queue operation is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3905
#: security/security.c:3937
msgid "``int msqflg``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3904
#: security/security.c:3936 security/security.c:3955 security/security.c:4007
#: security/security.c:4040 security/security.c:4091
msgid "operation flags"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3905
msgid ""
"Check permission when a message queue is requested through the msgget system "
"call. This hook is only called when returning the message queue identifier "
"for an existing message queue, not when a new message queue is created."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3921
msgid ""
"Check permission when a message control operation specified by **cmd** is to "
"be performed on the message queue with permissions."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3933
msgid "Check if sending a sysv ipc message is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3935
#: security/security.c:3952
msgid "message"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3937
msgid ""
"Check permission before a message, **msg**, is enqueued on the message queue "
"with permissions specified in **msq**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3950
msgid "Check if receiving a sysv ipc msg is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3954
msgid "``struct task_struct *target``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3955
msgid "``long type``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3954
msgid "type of message requested"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3956
msgid "``int mode``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3956
msgid ""
"Check permission before a message, **msg**, is removed from the message "
"queue. The **target** task structure contains a pointer to the process that "
"will be receiving the message (not equal to the current process when inline "
"receives are being performed)."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3971
msgid "Allocate a sysv shm LSM blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3977
#: security/security.c:3998 security/security.c:4011 security/security.c:4028
#: security/security.c:4043
msgid "``struct kern_ipc_perm *shp``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3973
msgid ""
"Allocate and attach a security structure to the **shp** security field.  The "
"security field is initialized to NULL when the structure is first created."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3992
msgid "Free a sysv shm LSM blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:3994
msgid ""
"Deallocate the security structure **perm->security** for the memory segment."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4005
#: security/security.c:4022
msgid "Check if a sysv shm operation is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4008
#: security/security.c:4041
msgid "``int shmflg``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4008
msgid ""
"Check permission when a shared memory region is requested through the shmget "
"system call. This hook is only called when returning the shared memory "
"region identifier for an existing region, not when a new shared memory "
"region is created."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4025
msgid ""
"Check permission when a shared memory control operation specified by **cmd** "
"is to be performed on the shared memory region with permissions in **shp**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4037
msgid "Check if a sysv shm attach operation is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4040
msgid "``char __user *shmaddr``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4039
msgid "address of memory region to attach"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4041
msgid ""
"Check permissions prior to allowing the shmat system call to attach the "
"shared memory segment with permissions **shp** to the data segment of the "
"calling process. The attaching address is specified by **shmaddr**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4055
msgid "Allocate a sysv semaphore LSM blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4061
#: security/security.c:4082 security/security.c:4095 security/security.c:4111
#: security/security.c:4126
msgid "``struct kern_ipc_perm *sma``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4057
msgid ""
"Allocate and attach a security structure to the **sma** security field. The "
"security field is initialized to NULL when the structure is first created."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4076
msgid "Free a sysv semaphore LSM blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4078
msgid "Deallocate security structure **sma->security** for the semaphore."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4089
#: security/security.c:4105 security/security.c:4120
msgid "Check if a sysv semaphore operation is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4092
msgid "``int semflg``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4092
msgid ""
"Check permission when a semaphore is requested through the semget system "
"call. This hook is only called when returning the semaphore identifier for "
"an existing semaphore, not when a new one must be created."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4108
msgid ""
"Check permission when a semaphore operation specified by **cmd** is to be "
"performed on the semaphore."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4123
msgid "``struct sembuf *sops``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4122
msgid "operations to perform"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4124
msgid "``unsigned nsops``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4123
msgid "number of operations"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4125
msgid "``int alter``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4124
msgid "flag indicating changes will be made"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4125
msgid ""
"Check permissions before performing operations on members of the semaphore "
"set. If the **alter** flag is nonzero, the semaphore set may be modified."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4157
msgid "Read an LSM attribute of the current process."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4163
#: security/security.c:4256
msgid "``unsigned int attr``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4158
msgid "which attribute to return"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4159
msgid "the user-space destination for the information, or NULL"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4161
msgid "``u32 __user *size``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4160
msgid "pointer to the size of space available to receive the data"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4162
#: security/security.c:4255
msgid "``u32 flags``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4161
msgid ""
"special handling options. LSM_FLAG_SINGLE indicates that only attributes "
"associated with the LSM identified in the passed **ctx** be reported."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4164
msgid ""
"A NULL value for **uctx** can be used to get both the number of attributes "
"and the size of the data."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4167
msgid ""
"Returns the number of attributes found on success, negative value on error. "
"**size** is reset to the total size of the data. If **size** is insufficient "
"to contain the data -E2BIG is returned."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4250
msgid "Set an LSM attribute on the current process."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4251
msgid "which attribute to set"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4252
msgid "the user-space source for the information"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4254
msgid "``u32 size``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4253
msgid "the size of the data"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4254
msgid "reserved for future use, must be 0"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4255
msgid ""
"Set an LSM attribute for the current process. The LSM, attribute and new "
"value are included in **uctx**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4258
msgid ""
"Returns 0 on success, -EINVAL if the input is inconsistent, -EFAULT if the "
"user buffer is inaccessible, E2BIG if size is too big, or an LSM specific "
"failure."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4301
msgid "Read an attribute for a task"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4304
#: security/security.c:4331
msgid "``int lsmid``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4303
#: security/security.c:4326
msgid "LSM identification"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4304
#: security/security.c:4327
msgid "attribute name"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4306
msgid "``char **value``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4305
#: security/security.c:4328
msgid "attribute value"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4306
msgid ""
"Read attribute **name** for task **p** and store it into **value** if "
"allowed."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4309
msgid "Returns the length of **value** on success, a negative value otherwise."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4325
msgid "Set an attribute for a task"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4329
msgid "``void *value``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4329
msgid "attribute value size"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4330
msgid ""
"Write (set) the current task's attribute **name** to **value**, size "
"**size** if allowed."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4334
msgid "Returns bytes written on success, a negative value otherwise."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4517
msgid "Check if a watch notification can be posted"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4523
msgid "``const struct cred *w_cred``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4518
msgid "credentials of the task that set the watch"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4519
msgid "credentials of the task which triggered the watch"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4521
msgid "``struct watch_notification *n``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4520
msgid "the notification"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4521
msgid ""
"Check to see if a watch notification can be posted to a particular queue."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4536
msgid "Check if a task is allowed to watch for key events"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4537
msgid "the key to watch"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4538
msgid ""
"Check to see if a process is allowed to watch for event notifications from a "
"key or keyring."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4552
msgid "Save info and check if netlink sending is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4558
#: security/security.c:4932 security/security.c:4955 security/security.c:5269
msgid "``struct sock *sk``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4553
#: security/security.c:4747
msgid "sending socket"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4555
#: security/security.c:5532
msgid "``struct sk_buff *skb``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4554
msgid "netlink message"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4555
msgid ""
"Save security information for a netlink message so that permission checking "
"can be performed when the message is processed.  The security information "
"can be saved using the eff_cap field of the netlink_skb_parms structure. "
"Also may be used to provide fine grained control over message transmission."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4561
msgid ""
"Returns 0 if the information was successfully saved and message is allowed "
"to be transmitted."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4624
msgid "Check if creating a new socket is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4630
#: security/security.c:4643 security/security.c:4929
msgid "``int family``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4625
#: security/security.c:4642 security/security.c:4928
msgid "protocol family"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4626
#: security/security.c:4643
msgid "communications type"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4628
#: security/security.c:4645
msgid "``int protocol``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4627
#: security/security.c:4644
msgid "requested protocol"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4629
#: security/security.c:4646
msgid "``int kern``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4628
#: security/security.c:4645
msgid "set to 1 if a kernel socket is requested"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4629
msgid "Check permissions prior to creating a new socket."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4640
msgid "Initialize a newly created socket"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4646
#: security/security.c:4687 security/security.c:4705 security/security.c:4722
#: security/security.c:4736 security/security.c:4752 security/security.c:4767
#: security/security.c:4784 security/security.c:4798 security/security.c:4811
#: security/security.c:4827 security/security.c:4842 security/security.c:4875
msgid "``struct socket *sock``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4641
#: security/security.c:4682 security/security.c:4700 security/security.c:4717
#: security/security.c:4779 security/security.c:4793 security/security.c:4806
#: security/security.c:4822 security/security.c:4837 security/security.c:4870
msgid "socket"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4646
msgid ""
"This hook allows a module to update or allocate a per-socket security "
"structure. Note that the security field was not added directly to the socket "
"structure, but rather, the socket security information is stored in the "
"associated inode.  Typically, the inode alloc_security hook will allocate "
"and attach security information to SOCK_INODE(sock)->i_security.  This hook "
"may be used to update the SOCK_INODE(sock)->i_security field with additional "
"information that wasn't available when the inode was allocated."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4681
msgid "Check if a socket bind operation is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4684
#: security/security.c:4702
msgid "``struct sockaddr *address``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4683
msgid "requested bind address"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4685
#: security/security.c:4703
msgid "``int addrlen``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4684
#: security/security.c:4702
msgid "length of address"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4685
msgid ""
"Check permission before socket protocol layer bind operation is performed "
"and the socket **sock** is bound to the address specified in the **address** "
"parameter."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4699
msgid "Check if a socket connect operation is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4701
msgid "address of remote connection point"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4703
msgid ""
"Check permission before socket protocol layer connect operation attempts to "
"connect socket **sock** to a remote address, **address**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4716
msgid "Check if a socket is allowed to listen"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4719
msgid "``int backlog``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4718
msgid "connection queue size"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4719
msgid "Check permission before socket protocol layer listen operation."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4730
msgid "Check if a socket is allowed to accept connections"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4731
msgid "listening socket"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4733
msgid "``struct socket *newsock``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4732
msgid "newly creation connection socket"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4733
msgid ""
"Check permission before accepting a new connection.  Note that the new "
"socket, **newsock**, has been created and some information copied to it, but "
"the accept operation has not actually been performed."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4746
msgid "Check if sending a message is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4749
#: security/security.c:4764
msgid "``struct msghdr *msg``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4748
msgid "message to send"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4750
#: security/security.c:4765
msgid "``int size``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4749
#: security/security.c:4764
msgid "size of message"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4750
msgid "Check permission before transmitting a message to another socket."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4761
msgid "Check if receiving a message is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4762
msgid "receiving socket"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4763
msgid "message to receive"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4765
msgid "operational flags"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4766
msgid "Check permission before receiving a message from a socket."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4778
msgid "Check if reading the socket addr is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4780
msgid ""
"Check permission before reading the local address (name) of the socket "
"object."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4792
msgid "Check if reading the peer's addr is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4794
msgid "Check permission before the remote address (name) of a socket object."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4805
msgid "Check if reading a socket option is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4808
#: security/security.c:4824
msgid "``int level``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4807
#: security/security.c:4823
msgid "option's protocol level"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4809
#: security/security.c:4825
msgid "``int optname``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4808
#: security/security.c:4824
msgid "option name"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4809
msgid ""
"Check permissions before retrieving the options associated with socket "
"**sock**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4821
msgid "Check if setting a socket option is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4825
msgid ""
"Check permissions before setting the options associated with socket **sock**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4836
msgid "Checks if shutting down the socket is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4839
msgid "``int how``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4838
msgid "flag indicating how sends and receives are handled"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4839
msgid ""
"Checks permission before all or part of a connection on the socket **sock** "
"is shut down."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4869
msgid "Get the remote peer label"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4872
msgid "``sockptr_t optval``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4871
msgid "destination buffer"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4873
msgid "``sockptr_t optlen``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4872
msgid "size of peer label copied into the buffer"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4873
msgid "maximum size of the destination buffer"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4874
msgid ""
"This hook allows the security module to provide peer socket security state "
"for unix or connected tcp sockets to userspace via getsockopt SO_GETPEERSEC. "
"For tcp sockets this can be meaningful if the socket is associated with an "
"ipsec SA."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4880
msgid "Returns 0 if all is well, otherwise, typical getsockopt return values."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4912
msgid "allocate a composite sock blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4918
msgid "``struct sock *sock``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4913
msgid "the sock that needs a blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4914
msgid "allocation mode"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4915
msgid "Allocate the sock blob for all the modules"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4926
msgid "Allocate and initialize a sock's LSM blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4927
#: security/security.c:4950
msgid "sock"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4930
msgid "``gfp_t priority``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4930
msgid ""
"Allocate and attach a security structure to the sk->sk_security field, which "
"is used to copy security attributes between local stream sockets."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4934
#: security/security.c:5765 security/security.c:5793 security/security.c:5819
#: security/security.c:5845 security/security.c:5861 security/security.c:6022
msgid "Returns 0 on success, error on failure."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4949
msgid "Free the sock's LSM blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:4951
msgid "Deallocate security structure."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5033
msgid "Set new sock LSM state based on request_sock"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5039
msgid "``struct sock *newsk``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5034
msgid "new sock"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5036
msgid "``const struct request_sock *req``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5035
msgid "connection request_sock"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5036
msgid "Set that LSM state of **sock** using the LSM state from **req**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5263
msgid "Inherit the LSM label from the MPTCP socket"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5264
msgid "the owning MPTCP socket"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5266
msgid "``struct sock *ssk``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5265
msgid "the new subflow"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5266
msgid ""
"Update the labeling for the given MPTCP subflow, to match the one of the "
"owning MPTCP socket. This hook has to be called after the socket creation "
"and initialization via the security_socket_create() and "
"security_socket_post_create() LSM hooks."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5374
msgid "Clone xfrm policy LSM state"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5380
msgid "``struct xfrm_sec_ctx *old_ctx``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5375
#: security/security.c:5403
msgid "xfrm security context"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5377
msgid "``struct xfrm_sec_ctx **new_ctxp``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5376
#: security/security.c:5477
msgid "target xfrm security context"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5377
msgid ""
"Allocate a security structure in new_ctxp that contains the information from "
"the old_ctx structure."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5402
msgid "Check if deleting a xfrm policy is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5408
#: security/security.c:5482
msgid "``struct xfrm_sec_ctx *ctx``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5404
msgid "Authorize deletion of a SPD entry."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5433
msgid "Allocate a xfrm state LSM blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5439
#: security/security.c:5471 security/security.c:5499
msgid "``struct xfrm_state *x``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5434
msgid "xfrm state being added to the SAD"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5436
msgid "``struct xfrm_sec_ctx *polsec``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5435
msgid "associated policy's security context"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5436
msgid "secid from the flow"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5437
msgid ""
"Allocate a security structure to the x->security field; the security field "
"is initialized to NULL when the xfrm_state is allocated.  Set the context to "
"correspond to secid."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5465
msgid "Free a xfrm state"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5466
msgid "xfrm state"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5467
msgid "Deallocate x->security."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5476
msgid "Check if using a xfrm policy is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5479
msgid "``u32 fl_secid``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5478
msgid "flow secid used to authorize access"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5479
msgid ""
"Check permission when a flow selects a xfrm_policy for processing XFRMs on a "
"packet.  The hook is called when selecting either a per-socket policy or a "
"generic xfrm policy."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5484
msgid ""
"Return 0 if permission is granted, -ESRCH otherwise, or -errno on other "
"errors."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5493
msgid "Check for a xfrm match"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5494
msgid "xfrm state to match"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5496
msgid "``struct xfrm_policy *xp``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5495
msgid "xfrm policy to check for a match"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5497
msgid "``const struct flowi_common *flic``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5496
msgid "flow to check for a match."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5497
msgid "Check **xp** and **flic** for a match with **x**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5500
msgid "Returns 1 if there is a match."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5526
msgid "Determine the xfrm secid for a packet"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5527
msgid "xfrm packet"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5529
msgid "``u32 *secid``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5529
msgid ""
"Decode the packet in **skb** and return the security label in **secid**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5532
msgid "Return 0 if all xfrms used have the same secid."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5551
msgid "Allocate and initialize a kernel key LSM blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5552
#: security/security.c:5576 security/security.c:5604
msgid "key"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5555
msgid ""
"Permit allocation of a key and assign security data. Note that key does not "
"have a serial number assigned at this point."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5559
#: security/security.c:5594
msgid "Return 0 if permission is granted, -ve error otherwise."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5575
msgid "Free a kernel key LSM blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5577
msgid "Notification of destruction; free security data."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5587
msgid "Check if a kernel key operation is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5593
msgid "``key_ref_t key_ref``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5588
msgid "key reference"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5589
msgid "credentials of actor requesting access"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5591
msgid "``enum key_need_perm need_perm``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5591
msgid ""
"See whether a specific operational right is granted to a process on a key."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5603
msgid "Get the key's security label"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5606
msgid "``char **buffer``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5606
msgid ""
"Get a textual representation of the security context attached to a key for "
"the purposes of honouring KEYCTL_GETSECURITY.  This function allocates the "
"storage for the NUL-terminated string and the caller should free it."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5611
msgid ""
"Returns the length of **buffer** (including terminating NUL) or -ve if an "
"error occurs.  May also return 0 (and a NULL buffer pointer) if there is no "
"security label assigned to the key."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5622
msgid "Notification of key create or update"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5628
msgid "``struct key *keyring``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5623
msgid "keyring to which the key is linked to"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5624
msgid "created or updated key"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5626
msgid "``const void *payload``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5625
msgid "data used to instantiate or update the key"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5627
msgid "``size_t payload_len``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5626
msgid "length of payload"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5627
msgid "key flags"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5629
msgid "``bool create``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5628
msgid "flag indicating whether the key was created or updated"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5629
msgid "Notify the caller of a key creation or update."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5643
msgid "Allocate and init an LSM audit rule struct"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5649
#: security/security.c:5691
msgid "``u32 field``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5644
msgid "audit action"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5646
#: security/security.c:5692
msgid "``u32 op``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5645
msgid "rule operator"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5647
msgid "``char *rulestr``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5646
msgid "rule context"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5648
msgid "``void **lsmrule``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5647
msgid "receive buffer for audit rule struct"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5648
msgid "GFP flag used for kmalloc"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5649
msgid "Allocate and initialize an LSM audit rule structure."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5652
msgid ""
"Return 0 if **lsmrule** has been successfully set, -EINVAL in case of an "
"invalid rule."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5662
msgid "Check if an audit rule contains LSM fields"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5668
msgid "``struct audit_krule *krule``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5663
#: security/security.c:5692
msgid "audit rule"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5664
msgid ""
"Specifies whether given **krule** contains any fields related to the current "
"LSM."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5668
msgid "Returns 1 in case of relation found, 0 otherwise."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5676
msgid "Free an LSM audit rule struct"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5682
#: security/security.c:5693
msgid "``void *lsmrule``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5677
msgid "audit rule struct"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5678
msgid ""
"Deallocate the LSM audit rule structure previously allocated by "
"audit_rule_init()."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5688
msgid "Check if a label matches an audit rule"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5690
msgid "LSM audit field"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5691
msgid "matching operator"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5693
msgid ""
"Determine if given **secid** matches a rule previously approved by "
"security_audit_rule_known()."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5697
msgid ""
"Returns 1 if secid matches the rule, 0 if it does not, -ERRNO on failure."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5709
msgid "Check if the bpf syscall operation is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5710
#: security/security.c:6110
msgid "command"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5712
#: security/security.c:5759 security/security.c:5786 security/security.c:5814
msgid "``union bpf_attr *attr``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5711
msgid "bpf attribute"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5713
msgid "``unsigned int size``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5712
msgid "size"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5714
#: security/security.c:5761 security/security.c:5788
msgid "``bool kernel``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5713
#: security/security.c:5760 security/security.c:5787
msgid "whether or not call originated from kernel"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5714
msgid ""
"Do a initial check for all bpf syscalls after the attribute is copied into "
"the kernel. The actual security module can implement their own rules to "
"check the specific cmd they need."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5727
msgid "Check if access to a bpf map is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5728
#: security/security.c:5870
msgid "bpf map"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5730
msgid "``fmode_t fmode``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5729
msgid "mode"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5730
msgid ""
"Do a check when the kernel generates and returns a file descriptor for eBPF "
"maps."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5742
msgid "Check if access to a bpf program is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5743
msgid "bpf program"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5744
msgid ""
"Do a check when the kernel generates and returns a file descriptor for eBPF "
"programs."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5756
msgid "Check if BPF map creation is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5757
msgid "BPF map object"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5758
msgid "BPF syscall attributes used to create BPF map"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5759
msgid "BPF token used to grant user access"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5761
msgid ""
"Do a check when the kernel creates a new BPF map. This is also the point "
"where LSM blob is allocated for LSMs that need them."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5783
msgid "Check if loading of BPF program is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5784
msgid "BPF program object"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5785
msgid "BPF syscall attributes used to create BPF program"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5786
msgid "BPF token used to grant user access to BPF subsystem"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5788
msgid ""
"Perform an access control check when the kernel loads a BPF program and "
"allocates associated BPF program object. This hook is also responsible for "
"allocating any required LSM state for the BPF program."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5811
msgid "Check if creating of BPF token is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5812
#: security/security.c:5839 security/security.c:5855
msgid "BPF token object"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5813
msgid "BPF syscall attributes used to create BPF token"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5814
msgid "path pointing to BPF FS mount point from which BPF token is created"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5815
msgid ""
"Do a check when the kernel instantiates a new BPF token object from BPF FS "
"instance. This is also the point where LSM blob can be allocated for LSMs."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5837
msgid "Check if BPF token is allowed to delegate requested BPF syscall command"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5843
#: security/security.c:5859
msgid "``const struct bpf_token *token``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5841
msgid "``enum bpf_cmd cmd``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5840
msgid "BPF syscall command requested to be delegated by BPF token"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5841
msgid ""
"Do a check when the kernel decides whether provided BPF token should allow "
"delegation of requested BPF syscall command."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5853
msgid ""
"Check if BPF token is allowed to delegate requested BPF-related capability"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5856
msgid "capabilities requested to be delegated by BPF token"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5857
msgid ""
"Do a check when the kernel decides whether provided BPF token should allow "
"delegation of requested BPF-related capabilities."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5869
msgid "Free a bpf map's LSM blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5871
msgid "Clean up the security information stored inside bpf map."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5882
msgid "Free a BPF program's LSM blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5883
msgid "BPF program struct"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5884
msgid "Clean up the security information stored inside BPF program."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5895
msgid "Free a BPF token's LSM blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5896
msgid "BPF token struct"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:5897
msgid "Clean up the security information stored inside BPF token."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:6004
msgid "Check if a perf event open is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:6005
msgid "type of event"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:6006
msgid "Check whether the **type** of perf_event_open syscall is allowed."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:6017
msgid "Allocate a perf event LSM blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:6023
#: security/security.c:6048 security/security.c:6060 security/security.c:6073
msgid "``struct perf_event *event``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:6018
#: security/security.c:6043 security/security.c:6055 security/security.c:6068
msgid "perf event"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:6019
msgid "Allocate and save perf_event security info."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:6042
msgid "Free a perf event LSM blob"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:6044
msgid "Release (free) perf_event security info."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:6054
msgid "Check if reading a perf event label is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:6056
msgid "Read perf_event security info if allowed."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:6067
msgid "Check if writing a perf event label is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:6069
msgid "Write perf_event security info if allowed."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:6082
msgid "Check if overriding creds is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:6088
#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2760
#: kernel/auditsc.c:2810
msgid "``const struct cred *new``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:6084
msgid ""
"Check if the current task, executing an io_uring operation, is allowed to "
"override it's credentials with **new**."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:6096
msgid "Check if IORING_SETUP_SQPOLL is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:6097
msgid ""
"Check whether the current task is allowed to spawn a io_uring polling thread "
"(IORING_SETUP_SQPOLL)."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:6109
msgid "Check if a io_uring passthrough command is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:6115
msgid "``struct io_uring_cmd *ioucmd``"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:6111
msgid "Check whether the file_operations uring_cmd is allowed to run."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:6122
msgid "Check if io_uring_setup() is allowed"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:6123
msgid "Check whether the current task is allowed to call io_uring_setup()."
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:6135
msgid "Notify LSMs that initramfs has been loaded"
msgstr ""

#: ../../../core-api/kernel-api:283: security/security.c:6136
msgid "Tells the LSMs the initramfs has been unpacked into the rootfs."
msgstr ""

#: ../../../core-api/kernel-api:286: security/inode.c:178
msgid "create a file in the securityfs filesystem"
msgstr ""

#: ../../../core-api/kernel-api:286: security/inode.c:180
msgid "a pointer to a string containing the name of the file to create."
msgstr ""

#: ../../../core-api/kernel-api:286: security/inode.c:181
msgid "the permission that the file should have"
msgstr ""

#: ../../../core-api/kernel-api:286: security/inode.c:182
msgid ""
"a pointer to the parent dentry for this file.  This should be a directory "
"dentry if set.  If this parameter is ``NULL``, then the file will be created "
"in the root of the securityfs filesystem."
msgstr ""

#: ../../../core-api/kernel-api:286: security/inode.c:185
msgid ""
"a pointer to something that the caller will want to get to later on.  The "
"inode.i_private pointer will point to this value on the open() call."
msgstr ""

#: ../../../core-api/kernel-api:286: security/inode.c:189
#: ../../../core-api/kernel-api:350: fs/char_dev.c:254 fs/char_dev.c:654
msgid "``const struct file_operations *fops``"
msgstr ""

#: ../../../core-api/kernel-api:286: security/inode.c:188
msgid ""
"a pointer to a struct file_operations that should be used for this file."
msgstr ""

#: ../../../core-api/kernel-api:286: security/inode.c:190
msgid "This function creates a file in securityfs with the given **name**."
msgstr ""

#: ../../../core-api/kernel-api:286: security/inode.c:192 security/inode.c:220
#: security/inode.c:252
msgid ""
"This function returns a pointer to a dentry if it succeeds.  This pointer "
"must be passed to the securityfs_remove() function when the file is to be "
"removed (no automatic cleanup happens if your module is unloaded, you are "
"responsible here).  If an error occurs, the function will return the error "
"value (via ERR_PTR)."
msgstr ""

#: ../../../core-api/kernel-api:286: security/inode.c:198 security/inode.c:226
#: security/inode.c:258
msgid ""
"If securityfs is not enabled in the kernel, the value ``-ENODEV`` is "
"returned."
msgstr ""

#: ../../../core-api/kernel-api:286: security/inode.c:211
msgid "create a directory in the securityfs filesystem"
msgstr ""

#: ../../../core-api/kernel-api:286: security/inode.c:213
msgid "a pointer to a string containing the name of the directory to create."
msgstr ""

#: ../../../core-api/kernel-api:286: security/inode.c:215
msgid ""
"a pointer to the parent dentry for this file.  This should be a directory "
"dentry if set.  If this parameter is ``NULL``, then the directory will be "
"created in the root of the securityfs filesystem."
msgstr ""

#: ../../../core-api/kernel-api:286: security/inode.c:218
msgid ""
"This function creates a directory in securityfs with the given **name**."
msgstr ""

#: ../../../core-api/kernel-api:286: security/inode.c:237
msgid "create a symlink in the securityfs filesystem"
msgstr ""

#: ../../../core-api/kernel-api:286: security/inode.c:239
msgid "a pointer to a string containing the name of the symlink to create."
msgstr ""

#: ../../../core-api/kernel-api:286: security/inode.c:241
msgid ""
"a pointer to the parent dentry for the symlink.  This should be a directory "
"dentry if set.  If this parameter is ``NULL``, then the directory will be "
"created in the root of the securityfs filesystem."
msgstr ""

#: ../../../core-api/kernel-api:286: security/inode.c:245
msgid "``const char *target``"
msgstr ""

#: ../../../core-api/kernel-api:286: security/inode.c:244
msgid ""
"a pointer to a string containing the name of the symlink's target. If this "
"parameter is ``NULL``, then the **iops** parameter needs to be setup to "
"handle .readlink and .get_link inode_operations."
msgstr ""

#: ../../../core-api/kernel-api:286: security/inode.c:248
msgid "``const struct inode_operations *iops``"
msgstr ""

#: ../../../core-api/kernel-api:286: security/inode.c:247
msgid ""
"a pointer to the struct inode_operations to use for the symlink. If this "
"parameter is ``NULL``, then the default simple_symlink_inode operations will "
"be used."
msgstr ""

#: ../../../core-api/kernel-api:286: security/inode.c:250
msgid "This function creates a symlink in securityfs with the given **name**."
msgstr ""

#: ../../../core-api/kernel-api:286: security/inode.c:291
msgid "removes a file or directory from the securityfs filesystem"
msgstr ""

#: ../../../core-api/kernel-api:286: security/inode.c:293
msgid "a pointer to a the dentry of the file or directory to be removed."
msgstr ""

#: ../../../core-api/kernel-api:286: security/inode.c:294
msgid ""
"This function removes a file or directory in securityfs that was previously "
"created with a call to another securityfs function (like "
"securityfs_create_file() or variants thereof.)"
msgstr ""

#: ../../../core-api/kernel-api:286: security/inode.c:298
msgid ""
"This function is required to be called in order for the file to be removed. "
"No automatic cleanup of files will happen when a module is removed; you are "
"responsible here."
msgstr ""

#: ../../../core-api/kernel-api:286: security/inode.c:302
msgid ""
"AV: when applied to directory it will take all children out; no need to call "
"it for descendents if ancestor is getting killed."
msgstr ""

#: ../../../core-api/kernel-api.rst:290
msgid "Audit Interfaces"
msgstr ""

#: ../../../core-api/kernel-api:292: kernel/audit.c:1889
msgid "obtain an audit buffer"
msgstr ""

#: ../../../core-api/kernel-api:292: kernel/audit.c:1895 kernel/audit.c:2657
#: ../../../core-api/kernel-api:295: kernel/auditsc.c:817 kernel/auditsc.c:851
#: kernel/auditsc.c:970 kernel/auditsc.c:1621 kernel/auditsc.c:1846
#: kernel/auditsc.c:2494
msgid "``struct audit_context *ctx``"
msgstr ""

#: ../../../core-api/kernel-api:292: kernel/audit.c:1890
msgid "audit_context (may be NULL)"
msgstr ""

#: ../../../core-api/kernel-api:292: kernel/audit.c:1891 kernel/audit.c:2653
msgid "type of allocation"
msgstr ""

#: ../../../core-api/kernel-api:292: kernel/audit.c:1892 kernel/audit.c:2654
#: ../../../core-api/kernel-api:298: kernel/auditfilter.c:1129
msgid "audit message type"
msgstr ""

#: ../../../core-api/kernel-api:292: kernel/audit.c:1893
msgid "Returns audit_buffer pointer on success or NULL on error."
msgstr ""

#: ../../../core-api/kernel-api:292: kernel/audit.c:1895
msgid ""
"Obtain an audit buffer.  This routine does locking to obtain the audit "
"buffer, but then no locking is required for calls to audit_log_*format.  If "
"the task (ctx) is a task that is currently in a syscall, then the syscall is "
"marked as auditable and an audit record will be written at syscall exit.  If "
"there is no associated task, then task context (ctx) should be NULL."
msgstr ""

#: ../../../core-api/kernel-api:292: kernel/audit.c:2042
msgid "format a message into the audit buffer."
msgstr ""

#: ../../../core-api/kernel-api:292: kernel/audit.c:2048 kernel/audit.c:2282
#: kernel/audit.c:2632
msgid "``struct audit_buffer *ab``"
msgstr ""

#: ../../../core-api/kernel-api:292: kernel/audit.c:2043 kernel/audit.c:2277
msgid "audit_buffer"
msgstr ""

#: ../../../core-api/kernel-api:292: kernel/audit.c:2044
msgid "format string"
msgstr ""

#: ../../../core-api/kernel-api:292: kernel/audit.c:2045
msgid "optional parameters matching **fmt** string"
msgstr ""

#: ../../../core-api/kernel-api:292: kernel/audit.c:2046
msgid "All the work is done in audit_log_vformat."
msgstr ""

#: ../../../core-api/kernel-api:292: kernel/audit.c:2276
msgid "Add LSM subject information"
msgstr ""

#: ../../../core-api/kernel-api:292: kernel/audit.c:2278
msgid "LSM subject properties."
msgstr ""

#: ../../../core-api/kernel-api:292: kernel/audit.c:2279
msgid "Add a subj= field and, if necessary, a AUDIT_MAC_TASK_CONTEXTS record."
msgstr ""

#: ../../../core-api/kernel-api:292: kernel/audit.c:2626
msgid "end one audit record"
msgstr ""

#: ../../../core-api/kernel-api:292: kernel/audit.c:2627
msgid "the audit_buffer"
msgstr ""

#: ../../../core-api/kernel-api:292: kernel/audit.c:2628
msgid ""
"We can not do a netlink send inside an irq context because it blocks (last "
"arg, flags, is not set to MSG_DONTWAIT), so the audit buffer is placed on a "
"queue and a kthread is scheduled to remove them from the queue outside the "
"irq context.  May be called in any context."
msgstr ""

#: ../../../core-api/kernel-api:292: kernel/audit.c:2651
msgid "Log an audit record"
msgstr ""

#: ../../../core-api/kernel-api:292: kernel/audit.c:2652
#: ../../../core-api/kernel-api:295: kernel/auditsc.c:816 kernel/auditsc.c:850
msgid "audit context"
msgstr ""

#: ../../../core-api/kernel-api:292: kernel/audit.c:2655
msgid "format string to use"
msgstr ""

#: ../../../core-api/kernel-api:292: kernel/audit.c:2656
msgid "variable parameters matching the format string"
msgstr ""

#: ../../../core-api/kernel-api:292: kernel/audit.c:2657
msgid ""
"This is a convenience function that calls audit_log_start, "
"audit_log_vformat, and audit_log_end.  It may be called in any context."
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:814
msgid "common filter helper for operations (syscall/uring/etc)"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:815 kernel/auditsc.c:849
msgid "associated task"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:818
#: ../../../core-api/kernel-api:412: include/linux/rculist.h:271
#: include/linux/rculist.h:331 include/linux/rculist.h:346
msgid "``struct list_head *list``"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:817
msgid "audit filter list"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:819
msgid "``struct audit_names *name``"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:818
msgid "audit_name (can be NULL)"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:820
msgid "``unsigned long op``"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:819
msgid "current syscall/uring_op"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:820
msgid ""
"Run the udit filters specified in **list** against **tsk** using **ctx**, "
"**name**, and **op**, as necessary; the caller is responsible for ensuring "
"that the call is made while the RCU read lock is held. The **name** "
"parameter can be NULL, but all others must be specified. Returns 1/true if "
"the filter finds a match, 0/false if none are found."
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:848
msgid "apply filters to an io_uring operation"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:964
msgid "reset a audit_context structure"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:965
msgid "the audit_context to reset"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:966
msgid ""
"All fields in the audit_context will be reset to an initial state, all "
"references held by fields will be dropped, and private memory will be "
"released.  When this function returns the audit_context will be suitable for "
"reuse, so long as the passed context is not NULL or a dummy context."
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:1049
msgid "allocate an audit context block for a task"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:1051
msgid ""
"Filter on the task information and allocate a per-task audit context if "
"necessary.  Doing so turns on system call auditing for the specified task.  "
"This is called from copy_process, so no lock is needed."
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:1615
msgid "generate a AUDIT_URINGOP record"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:1616
msgid "the audit context"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:1797
msgid "free a per-task audit context"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:1798
msgid "task whose audit context block to free"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:1799
msgid "Called from copy_process, do_exit, and the io_uring code"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:1840
msgid "fixup the return codes in the audit_context"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:1841
msgid "the audit_context"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:1843
#: kernel/auditsc.c:1909 kernel/auditsc.c:2031
msgid "``int success``"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:1842
#: kernel/auditsc.c:1904
msgid "true/false value to indicate if the operation succeeded or not"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:1844
#: kernel/auditsc.c:1906
msgid "``long code``"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:1843
#: kernel/auditsc.c:1905
msgid "operation return code"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:1844
msgid ""
"We need to fixup the return code in the audit logs if the actual return "
"codes are later going to be fixed by the arch specific signal handlers."
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:1868
msgid "prepare the kernel task's audit context for io_uring"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:1874
msgid "``u8 op``"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:1869
msgid "the io_uring opcode"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:1870
msgid ""
"This is similar to audit_syscall_entry() but is intended for use by io_uring "
"operations.  This function should only ever be called from "
"audit_uring_entry() as we rely on the audit context checking present in that "
"function."
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:1903
msgid "wrap up the kernel task's audit context after io_uring"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:1906
msgid ""
"This is similar to audit_syscall_exit() but is intended for use by io_uring "
"operations.  This function should only ever be called from "
"audit_uring_exit() as we rely on the audit context checking present in that "
"function."
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:1971
msgid "fill in an audit record at syscall entry"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:1977
msgid "``int major``"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:1972
msgid "major syscall type (function)"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:1974
msgid "``unsigned long a1``"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:1973
msgid "additional syscall register 1"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:1975
msgid "``unsigned long a2``"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:1974
msgid "additional syscall register 2"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:1976
msgid "``unsigned long a3``"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:1975
msgid "additional syscall register 3"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:1977
msgid "``unsigned long a4``"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:1976
msgid "additional syscall register 4"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:1977
msgid ""
"Fill in audit context at syscall entry.  This only happens if the audit "
"context was created when the task was created and the state or filters "
"demand the audit context be built.  If the state from the per-task filter or "
"from the per-syscall filter is AUDIT_STATE_RECORD, then the record will be "
"written at syscall exit time (otherwise, it will only be written if another "
"part of the kernel requests that it be written)."
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2025
msgid "deallocate audit context after a system call"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2026
msgid "success value of the syscall"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2028
msgid "``long return_code``"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2027
msgid "return value of the syscall"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2028
msgid ""
"Tear down after system call.  If the audit context has been marked as "
"auditable (either because of the AUDIT_STATE_RECORD state from filtering, or "
"because some other part of the kernel wrote an audit message), then write "
"out the syscall information.  In call cases, free the names stored from "
"getname()."
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2173
msgid "fill out filename with info from existing entry"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2179
msgid "``const __user char *uptr``"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2174
msgid "userland ptr to pathname"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2175
msgid ""
"Search the audit_names list for the current audit context. If there is an "
"existing entry with a matching \"uptr\" then return the filename associated "
"with that audit_name. If not, return NULL."
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2196
msgid "add a name to the list"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2202
#: kernel/auditsc.c:2269
msgid "``struct filename *name``"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2197
msgid "name to add"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2198
msgid ""
"Add a name to the list of audit names for this context. Called from fs/namei."
"c:getname()."
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2263
msgid "store the inode and device from a lookup"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2264
msgid "name being audited"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2266
msgid "``const struct dentry *dentry``"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2265
msgid "dentry being audited"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2266
msgid "attributes for this particular entry"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2488
msgid "get local copies of audit_context values"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2489
msgid "audit_context for the task"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2491
msgid "``struct audit_stamp *stamp``"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2490
msgid "timestamp to record"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2491
msgid "Also sets the context as auditable."
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2509
msgid "record audit data for a POSIX MQ open"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2515
msgid "``int oflag``"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2510
msgid "open flag"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2511
msgid "mode bits"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2513
msgid "``struct mq_attr *attr``"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2512
msgid "queue attributes"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2531
msgid "record audit data for a POSIX MQ timed send/receive"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2537
#: kernel/auditsc.c:2563 kernel/auditsc.c:2583
msgid "``mqd_t mqdes``"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2532
#: kernel/auditsc.c:2558 kernel/auditsc.c:2578
msgid "MQ descriptor"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2534
msgid "``size_t msg_len``"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2533
msgid "Message length"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2535
msgid "``unsigned int msg_prio``"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2534
msgid "Message priority"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2536
msgid "``const struct timespec64 *abs_timeout``"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2535
msgid "Message timeout in absolute time"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2557
msgid "record audit data for a POSIX MQ notify"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2560
msgid "``const struct sigevent *notification``"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2559
msgid "Notification event"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2577
msgid "record audit data for a POSIX MQ get/set attribute"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2580
msgid "``struct mq_attr *mqstat``"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2579
msgid "MQ flags"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2592
msgid "record audit data for ipc object"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2593
msgid "ipc permissions"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2609
msgid "record audit data for new ipc permissions"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2615
msgid "``unsigned long qbytes``"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2610
msgid "msgq bytes"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2612
msgid "``uid_t uid``"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2611
msgid "msgq user id"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2613
msgid "``gid_t gid``"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2612
msgid "msgq group id"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2613
msgid "msgq mode (permissions)"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2614
msgid "Called only after audit_ipc_obj()."
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2638
msgid "record audit data for sys_socketcall"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2644
msgid "``int nargs``"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2639
msgid "number of args, which should not be more than AUDITSC_ARGS."
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2641
msgid "``unsigned long *args``"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2640
msgid "args array"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2656
msgid "record audit data for pipe and socketpair"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2662
msgid "``int fd1``"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2657
msgid "the first file descriptor"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2659
msgid "``int fd2``"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2658
msgid "the second file descriptor"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2670
msgid "record audit data for sys_bind, sys_connect, sys_sendto"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2671
msgid "data length in user space"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2673
msgid "``void *a``"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2672
msgid "data address in kernel space"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2673
msgid "Returns 0 for success or NULL context or < 0 on error."
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2706
msgid "record signal info for syscalls"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2712
msgid "``struct task_struct *t``"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2707
msgid "task being signaled"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2708
msgid ""
"If the audit subsystem is being terminated, record the task (pid) and uid "
"that is doing that."
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2757
msgid "store information about a loading bprm and relevant fcaps"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2758
msgid "pointer to the bprm being processed"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2759
msgid "the proposed new credentials"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2760
msgid "the old credentials"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2761
msgid ""
"Simply check if the proc already has the caps given by the file and if not "
"store the priv escalation info for later auditing at the end of the syscall"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2764
msgid "-Eric"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2804
msgid "store information about the arguments to the capset syscall"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2805
msgid "the new credentials"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2806
msgid "the old (current) credentials"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2807
msgid ""
"Record the arguments userspace sent to sys_capset for later printing by the "
"audit system if applicable"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2936
msgid "record information about processes that end abnormally"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2942
#: kernel/auditsc.c:2964
msgid "``long signr``"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2938
msgid ""
"If a process ends with a core dump, something fishy is going on and we "
"should record the event for investigation."
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2961
msgid "record information about a seccomp action"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2967
msgid "``unsigned long syscall``"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2962
msgid "syscall number"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2965
msgid "``int code``"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2964
msgid "the seccomp action"
msgstr ""

#: ../../../core-api/kernel-api:295: kernel/auditsc.c:2965
msgid ""
"Record the information associated with a seccomp action. Event filtering for "
"seccomp actions that are not to be logged is done in seccomp_log(). "
"Therefore, this function forces auditing independent of the audit_enabled "
"and dummy context state because seccomp actions should be logged even when "
"audit is not in use."
msgstr ""

#: ../../../core-api/kernel-api:298: kernel/auditfilter.c:1128
msgid "apply all rules to the specified message type"
msgstr ""

#: ../../../core-api/kernel-api:298: kernel/auditfilter.c:1131
#: kernel/auditfilter.c:1172
msgid "``int seq``"
msgstr ""

#: ../../../core-api/kernel-api:298: kernel/auditfilter.c:1130
#: kernel/auditfilter.c:1171
msgid "netlink audit message sequence (serial) number"
msgstr ""

#: ../../../core-api/kernel-api:298: kernel/auditfilter.c:1131
msgid "payload data"
msgstr ""

#: ../../../core-api/kernel-api:298: kernel/auditfilter.c:1133
msgid "``size_t datasz``"
msgstr ""

#: ../../../core-api/kernel-api:298: kernel/auditfilter.c:1132
msgid "size of payload data"
msgstr ""

#: ../../../core-api/kernel-api:298: kernel/auditfilter.c:1169
msgid "list the audit rules"
msgstr ""

#: ../../../core-api/kernel-api:298: kernel/auditfilter.c:1175
msgid "``struct sk_buff *request_skb``"
msgstr ""

#: ../../../core-api/kernel-api:298: kernel/auditfilter.c:1170
msgid "skb of request we are replying to (used to target the reply)"
msgstr ""

#: ../../../core-api/kernel-api:298: kernel/auditfilter.c:1275
msgid "find the length of the parent portion of a pathname"
msgstr ""

#: ../../../core-api/kernel-api:298: kernel/auditfilter.c:1276
msgid "pathname of which to determine length"
msgstr ""

#: ../../../core-api/kernel-api:298: kernel/auditfilter.c:1305
msgid ""
"compare given dentry name with last component in given path. Return of 0 "
"indicates a match."
msgstr ""

#: ../../../core-api/kernel-api:298: kernel/auditfilter.c:1311
msgid "``const struct qstr *dname``"
msgstr ""

#: ../../../core-api/kernel-api:298: kernel/auditfilter.c:1307
msgid "dentry name that we're comparing"
msgstr ""

#: ../../../core-api/kernel-api:298: kernel/auditfilter.c:1308
msgid "full pathname that we're comparing"
msgstr ""

#: ../../../core-api/kernel-api:298: kernel/auditfilter.c:1310
msgid "``int parentlen``"
msgstr ""

#: ../../../core-api/kernel-api:298: kernel/auditfilter.c:1309
msgid ""
"length of the parent if known. Passing in AUDIT_NAME_FULL here indicates "
"that we must compute this value."
msgstr ""

#: ../../../core-api/kernel-api.rst:302
msgid "Accounting Framework"
msgstr ""

#: ../../../core-api/kernel-api:304: kernel/acct.c:285
msgid "enable/disable process accounting"
msgstr ""

#: ../../../core-api/kernel-api:304: kernel/acct.c:291
msgid "``const char __user * name``"
msgstr ""

#: ../../../core-api/kernel-api:304: kernel/acct.c:286
msgid "file name for accounting records or NULL to shutdown accounting"
msgstr ""

#: ../../../core-api/kernel-api:304: kernel/acct.c:287
msgid ""
"sys_acct() is the only system call needed to implement process accounting. "
"It takes the name of the file where accounting records should be written. If "
"the filename is NULL, accounting will be shutdown."
msgstr ""

#: ../../../core-api/kernel-api:304: kernel/acct.c:293
msgid "0 for success or negative errno values for failure."
msgstr ""

#: ../../../core-api/kernel-api:304: kernel/acct.c:558
msgid "collect accounting information into pacct_struct"
msgstr ""

#: ../../../core-api/kernel-api:304: kernel/acct.c:564
msgid "``long exitcode``"
msgstr ""

#: ../../../core-api/kernel-api:304: kernel/acct.c:559
msgid "task exit code"
msgstr ""

#: ../../../core-api/kernel-api:304: kernel/acct.c:561
msgid "``int group_dead``"
msgstr ""

#: ../../../core-api/kernel-api:304: kernel/acct.c:560
msgid "not 0, if this thread is the last one in the process."
msgstr ""

#: ../../../core-api/kernel-api:304: kernel/acct.c:615
msgid "handles process accounting for an exiting task"
msgstr ""

#: ../../../core-api/kernel-api.rst:308
msgid "Block Devices"
msgstr ""

#: ../../../core-api/kernel-api:310: include/linux/bio.h:124
msgid "increment/complete a bio by some number of bytes"
msgstr ""

#: ../../../core-api/kernel-api:310: include/linux/bio.h:130
#: include/linux/bio.h:335 include/linux/bio.h:707
#: ../../../core-api/kernel-api:311: block/blk-core.c:780 block/blk-core.c:905
#: block/blk-core.c:932 block/blk-core.c:1054 ../../../core-api/kernel-api:317:
#: block/blk-map.c:626 ../../../core-api/kernel-api:335:
#: kernel/trace/blktrace.c:853 kernel/trace/blktrace.c:962
msgid "``struct bio *bio``"
msgstr ""

#: ../../../core-api/kernel-api:310: include/linux/bio.h:125
msgid "bio to advance"
msgstr ""

#: ../../../core-api/kernel-api:310: include/linux/bio.h:127
msgid "``unsigned int nbytes``"
msgstr ""

#: ../../../core-api/kernel-api:310: include/linux/bio.h:126
msgid "number of bytes to complete"
msgstr ""

#: ../../../core-api/kernel-api:310: include/linux/bio.h:127
msgid ""
"This updates bi_sector, bi_size and bi_idx; if the number of bytes to "
"complete doesn't align with a bvec boundary, then bv_len and bv_offset will "
"be updated on the last bvec as well."
msgstr ""

#: ../../../core-api/kernel-api:310: include/linux/bio.h:131
msgid ""
"**bio** will then represent the remaining, uncompleted portion of the io."
msgstr ""

#: ../../../core-api/kernel-api:310: include/linux/bio.h:266
msgid "State for iterating all folios in a bio."
msgstr ""

#: ../../../core-api/kernel-api:310: include/linux/bio.h:270
#: ../../../core-api/kernel-api:389: include/linux/clk.h:48
#: include/linux/clk.h:65 include/linux/clk.h:82
#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:28
#: kernel/rcu/tasks.h:62
msgid "**Definition**::"
msgstr ""

#: ../../../core-api/kernel-api:310: include/linux/bio.h:278
#: ../../../core-api/kernel-api:389: include/linux/clk.h:56
#: include/linux/clk.h:73 include/linux/clk.h:89
#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:47
#: kernel/rcu/tasks.h:101
msgid "**Members**"
msgstr ""

#: ../../../core-api/kernel-api:310: include/linux/bio.h:267
msgid "``folio``"
msgstr ""

#: ../../../core-api/kernel-api:310: include/linux/bio.h:268
msgid "The current folio we're iterating.  NULL after the last folio."
msgstr ""

#: ../../../core-api/kernel-api:310: include/linux/bio.h:269
msgid "The byte offset within the current folio."
msgstr ""

#: ../../../core-api/kernel-api:310: include/linux/bio.h:269
msgid "``length``"
msgstr ""

#: ../../../core-api/kernel-api:310: include/linux/bio.h:270
msgid "The number of bytes in this iteration (will not cross folio boundary)."
msgstr ""

#: ../../../core-api/kernel-api:310: include/linux/bio.h:317
msgid "``bio_for_each_folio_all (fi, bio)``"
msgstr ""

#: ../../../core-api/kernel-api:310: include/linux/bio.h:315
msgid "Iterate over each folio in a bio."
msgstr ""

#: ../../../core-api/kernel-api:310: include/linux/bio.h:321
msgid "``fi``"
msgstr ""

#: ../../../core-api/kernel-api:310: include/linux/bio.h:316
msgid "struct folio_iter which is updated for each folio."
msgstr ""

#: ../../../core-api/kernel-api:310: include/linux/bio.h:318
msgid "``bio``"
msgstr ""

#: ../../../core-api/kernel-api:310: include/linux/bio.h:317
msgid "struct bio to iterate over."
msgstr ""

#: ../../../core-api/kernel-api:310: include/linux/bio.h:329
msgid "get next **sectors** from a bio, splitting if necessary"
msgstr ""

#: ../../../core-api/kernel-api:310: include/linux/bio.h:330
msgid "bio to split"
msgstr ""

#: ../../../core-api/kernel-api:310: include/linux/bio.h:332
msgid "``int sectors``"
msgstr ""

#: ../../../core-api/kernel-api:310: include/linux/bio.h:331
msgid "number of sectors to split from the front of **bio**"
msgstr ""

#: ../../../core-api/kernel-api:310: include/linux/bio.h:332
msgid "gfp mask"
msgstr ""

#: ../../../core-api/kernel-api:310: include/linux/bio.h:334
msgid "``struct bio_set *bs``"
msgstr ""

#: ../../../core-api/kernel-api:310: include/linux/bio.h:333
msgid "bio set to allocate from"
msgstr ""

#: ../../../core-api/kernel-api:310: include/linux/bio.h:335
msgid ""
"a bio representing the next **sectors** of **bio** - if the bio is smaller "
"than **sectors**, returns the original bio unchanged."
msgstr ""

#: ../../../core-api/kernel-api:310: include/linux/bio.h:428
msgid "number of bio_vecs needed to add data to a bio"
msgstr ""

#: ../../../core-api/kernel-api:310: include/linux/bio.h:434
msgid "``void *kaddr``"
msgstr ""

#: ../../../core-api/kernel-api:310: include/linux/bio.h:429
msgid "kernel virtual address to add"
msgstr ""

#: ../../../core-api/kernel-api:310: include/linux/bio.h:430
msgid "length in bytes to add"
msgstr ""

#: ../../../core-api/kernel-api:310: include/linux/bio.h:431
msgid ""
"Calculate how many bio_vecs need to be allocated to add the kernel virtual "
"address range in [**kaddr**:**len**] in the worse case."
msgstr ""

#: ../../../core-api/kernel-api:310: include/linux/bio.h:701
msgid "is this a zone append bio?"
msgstr ""

#: ../../../core-api/kernel-api:310: include/linux/bio.h:702
msgid "bio to check"
msgstr ""

#: ../../../core-api/kernel-api:310: include/linux/bio.h:703
msgid ""
"Check if **bio** is a zone append operation.  Core block layer code and "
"end_io handlers must use this instead of an open coded REQ_OP_ZONE_APPEND "
"check because the block layer can rewrite REQ_OP_ZONE_APPEND to REQ_OP_WRITE "
"if it is not natively supported."
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:76
msgid "atomically set a queue flag"
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:82 block/blk-core.c:93
msgid "``unsigned int flag``"
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:77
msgid "flag to be set"
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:79 block/blk-core.c:90
#: block/blk-core.c:209 block/blk-core.c:234 block/blk-core.c:276
#: block/blk-core.c:485 block/blk-core.c:1090 ../../../core-api/kernel-api:314:
#: block/blk-core.c:306 ../../../core-api/kernel-api:317: block/blk-map.c:505
#: ../../../core-api/kernel-api:323: block/blk-settings.c:519
#: block/blk-settings.c:556 block/blk-settings.c:581 block/blk-settings.c:997
#: ../../../core-api/kernel-api:335: kernel/trace/blktrace.c:743
#: kernel/trace/blktrace.c:856
msgid "``struct request_queue *q``"
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:78 block/blk-core.c:89
msgid "request queue"
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:87
msgid "atomically clear a queue flag"
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:88
msgid "flag to be cleared"
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:117
msgid "Return string XXX in the REQ_OP_XXX."
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:123
msgid "``enum req_op op``"
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:118
msgid "REQ_OP_XXX."
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:120
msgid ""
"Centralize block layer function to convert REQ_OP_XXX into string format. "
"Useful in the debugging and tracing bio or request. For invalid REQ_OP_XXX "
"it returns string \"UNKNOWN\"."
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:203
msgid "cancel any pending callbacks on a queue"
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:204
msgid "the queue"
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:206
msgid ""
"The block layer may perform asynchronous callback activity on a queue, such "
"as calling the unplug function after a timeout. A block device may call "
"blk_sync_queue to ensure that any such activity is cancelled, thus allowing "
"it to release resources that the callbacks might use. The caller must "
"already have made sure that its ->submit_bio will not re-add plugging prior "
"to calling this function."
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:214
msgid ""
"This function does not cancel any asynchronous activity arising out of "
"elevator or throttling code. That would require elevator_exit() and "
"blkcg_exit_queue() to be called with queue lock initialized."
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:228
msgid "increment pm_only counter"
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:229
#: ../../../core-api/kernel-api:314: block/blk-core.c:301
msgid "request queue pointer"
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:270
msgid "decrement the request_queue refcount"
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:271
msgid "the request_queue structure to decrement the refcount for"
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:272
msgid ""
"Decrements the refcount of the request_queue and free it when the refcount "
"reaches 0."
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:479
msgid "increment the request_queue refcount"
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:480
msgid "the request_queue structure to increment the refcount for"
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:481
msgid "Increment the refcount of the request_queue kobject."
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:484
msgid "Any context."
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:774
msgid "re-submit a bio to the block device layer for I/O"
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:775
msgid "The bio describing the location in memory and on the device."
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:776
msgid ""
"This is a version of submit_bio() that shall only be used for I/O that is "
"resubmitted to lower level drivers by stacking block drivers.  All file "
"systems and other upper level users of the block layer should use "
"submit_bio() instead."
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:899
msgid "submit a bio to the block device layer for I/O"
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:900
msgid "The :c:type:`struct bio <bio>` which describes the I/O"
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:901
msgid ""
"submit_bio() is used to submit I/O requests to block devices.  It is passed "
"a fully set up :c:type:`struct bio <bio>` that describes the I/O that needs "
"to be done.  The bio will be send to the device described by the bi_bdev "
"field."
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:905
msgid ""
"The success/failure status of the request, along with notification of "
"completion, is delivered asynchronously through the ->bi_end_io() callback "
"in **bio**.  The bio must NOT be touched by the caller until ->bi_end_io() "
"has been called."
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:926
msgid "poll for BIO completions"
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:927
msgid "bio to poll for"
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:929
msgid "``struct io_comp_batch *iob``"
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:928
msgid "batches of IO"
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:929
msgid "BLK_POLL_* flags that control the behavior"
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:930
msgid ""
"Poll for completions on queue associated with the bio. Returns number of "
"completed entries found."
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:934
msgid ""
"the caller must either be the context that submitted **bio**, or be in a RCU "
"critical section to prevent freeing of **bio**."
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:1048
msgid "start I/O accounting for bio based drivers"
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:1049
msgid "bio to start account for"
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:1050
msgid "Returns the start time that should be passed back to bio_end_io_acct()."
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:1084
msgid "Check if underlying low-level drivers of a device are busy"
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:1085
msgid "the queue of the device being checked"
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:1087
msgid ""
"Check if underlying low-level drivers of a device are busy. If the drivers "
"want to export their busy state, they must set own exporting function using "
"blk_queue_lld_busy() first."
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:1091
msgid ""
"Basically, this function is used only by request stacking drivers to stop "
"dispatching requests to underlying devices when underlying devices are "
"busy.  This behavior helps more I/O merging on the queue of the request "
"stacking driver and prevents I/O throughput regression on burst I/O load."
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:1098
msgid ""
"0 - Not busy (The request stacking driver should dispatch request) 1 - Busy "
"(The request stacking driver should stop dispatching request)"
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:1151
msgid "initialize blk_plug and track it inside the task_struct"
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:1157
#: block/blk-core.c:1246
msgid "``struct blk_plug *plug``"
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:1152
msgid "The :c:type:`struct blk_plug <blk_plug>` that needs to be initialized"
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:1154
msgid ""
"blk_start_plug() indicates to the block layer an intent by the caller to "
"submit multiple I/O requests in a batch.  The block layer may use this hint "
"to defer submitting I/Os from the caller until blk_finish_plug() is called.  "
"However, the block layer may choose to submit requests before a call to "
"blk_finish_plug() if the number of queued I/Os exceeds "
"``BLK_MAX_REQUEST_COUNT``, or if the size of the I/O is larger than "
"``BLK_PLUG_FLUSH_SIZE``.  The queued I/Os may also be submitted early if the "
"task schedules (see below)."
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:1163
msgid ""
"Tracking blk_plug inside the task_struct will help with auto-flushing the "
"pending I/O should the task end up blocking between blk_start_plug() and "
"blk_finish_plug(). This is important from a performance perspective, but "
"also ensures that we don't deadlock. For instance, if the task is blocking "
"for a memory allocation, memory reclaim could end up wanting to free a page "
"belonging to that request that is currently residing in our private plug. By "
"flushing the pending I/O when the process goes to sleep, we avoid this kind "
"of deadlock."
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:1240
msgid "mark the end of a batch of submitted I/O"
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:1241
msgid "The :c:type:`struct blk_plug <blk_plug>` passed to blk_start_plug()"
msgstr ""

#: ../../../core-api/kernel-api:311: block/blk-core.c:1243
msgid ""
"Indicate that a batch of I/O submissions is complete.  This function must be "
"paired with an initial call to blk_start_plug().  The intent is to allow the "
"block layer to optimize I/O submission.  See the documentation for "
"blk_start_plug() for more information."
msgstr ""

#: ../../../core-api/kernel-api:314: block/blk-core.c:300
msgid "try to increase q->q_usage_counter"
msgstr ""

#: ../../../core-api/kernel-api:314: block/blk-core.c:303
msgid "``blk_mq_req_flags_t flags``"
msgstr ""

#: ../../../core-api/kernel-api:314: block/blk-core.c:302
msgid "BLK_MQ_REQ_NOWAIT and/or BLK_MQ_REQ_PM"
msgstr ""

#: ../../../core-api/kernel-api:317: block/blk-map.c:499
msgid "map user data to a request, for passthrough requests"
msgstr ""

#: ../../../core-api/kernel-api:317: block/blk-map.c:500
msgid "request queue where request should be inserted"
msgstr ""

#: ../../../core-api/kernel-api:317: block/blk-map.c:502 block/blk-map.c:661
#: ../../../core-api/kernel-api:335: kernel/trace/blktrace.c:791
#: kernel/trace/blktrace.c:996
msgid "``struct request *rq``"
msgstr ""

#: ../../../core-api/kernel-api:317: block/blk-map.c:501
msgid "request to map data to"
msgstr ""

#: ../../../core-api/kernel-api:317: block/blk-map.c:503
msgid "``struct rq_map_data *map_data``"
msgstr ""

#: ../../../core-api/kernel-api:317: block/blk-map.c:502
msgid "pointer to the rq_map_data holding pages (if necessary)"
msgstr ""

#: ../../../core-api/kernel-api:317: block/blk-map.c:504
msgid "``const struct iov_iter *iter``"
msgstr ""

#: ../../../core-api/kernel-api:317: block/blk-map.c:503
msgid "iovec iterator"
msgstr ""

#: ../../../core-api/kernel-api:317: block/blk-map.c:504 block/blk-map.c:659
msgid "memory allocation flags"
msgstr ""

#: ../../../core-api/kernel-api:317: block/blk-map.c:506
msgid ""
"Data will be mapped directly for zero copy I/O, if possible. Otherwise a "
"kernel bounce buffer is used."
msgstr ""

#: ../../../core-api/kernel-api:317: block/blk-map.c:509
msgid ""
"A matching blk_rq_unmap_user() must be issued at the end of I/O, while still "
"in process context."
msgstr ""

#: ../../../core-api/kernel-api:317: block/blk-map.c:620
msgid "unmap a request with user data"
msgstr ""

#: ../../../core-api/kernel-api:317: block/blk-map.c:621
msgid "start of bio list"
msgstr ""

#: ../../../core-api/kernel-api:317: block/blk-map.c:623
msgid ""
"Unmap a rq previously mapped by blk_rq_map_user(). The caller must supply "
"the original rq->bio from the blk_rq_map_user() return, since the I/O "
"completion may have changed rq->bio."
msgstr ""

#: ../../../core-api/kernel-api:317: block/blk-map.c:655
msgid "map kernel data to a request, for passthrough requests"
msgstr ""

#: ../../../core-api/kernel-api:317: block/blk-map.c:656
msgid "request to fill"
msgstr ""

#: ../../../core-api/kernel-api:317: block/blk-map.c:658
msgid "``void *kbuf``"
msgstr ""

#: ../../../core-api/kernel-api:317: block/blk-map.c:657
msgid "the kernel buffer"
msgstr ""

#: ../../../core-api/kernel-api:317: block/blk-map.c:658
msgid "length of user data"
msgstr ""

#: ../../../core-api/kernel-api:317: block/blk-map.c:661
msgid ""
"Data will be mapped directly if possible. Otherwise a bounce buffer is used. "
"Can be called multiple times to append multiple buffers."
msgstr ""

#: ../../../core-api/kernel-api:320: block/blk-sysfs.c:908
msgid "register a block layer queue with sysfs"
msgstr ""

#: ../../../core-api/kernel-api:320: block/blk-sysfs.c:914
#: block/blk-sysfs.c:986 ../../../core-api/kernel-api:341: block/genhd.c:579
#: block/genhd.c:619 block/genhd.c:686 block/genhd.c:797 block/genhd.c:837
#: block/genhd.c:1536 block/genhd.c:1566
msgid "``struct gendisk *disk``"
msgstr ""

#: ../../../core-api/kernel-api:320: block/blk-sysfs.c:909
msgid "Disk of which the request queue should be registered with sysfs."
msgstr ""

#: ../../../core-api/kernel-api:320: block/blk-sysfs.c:980
msgid "counterpart of blk_register_queue()"
msgstr ""

#: ../../../core-api/kernel-api:320: block/blk-sysfs.c:981
msgid "Disk of which the request queue should be unregistered from sysfs."
msgstr ""

#: ../../../core-api/kernel-api:320: block/blk-sysfs.c:983
msgid ""
"the caller is responsible for guaranteeing that this function is called "
"after blk_register_queue() has finished."
msgstr ""

#: ../../../core-api/kernel-api:323: block/blk-settings.c:31
msgid "set default limits for stacking devices"
msgstr ""

#: ../../../core-api/kernel-api:323: block/blk-settings.c:37
#: block/blk-settings.c:516 block/blk-settings.c:553 block/blk-settings.c:578
msgid "``struct queue_limits *lim``"
msgstr ""

#: ../../../core-api/kernel-api:323: block/blk-settings.c:32
msgid "the queue_limits structure to reset"
msgstr ""

#: ../../../core-api/kernel-api:323: block/blk-settings.c:33
msgid ""
"Prepare queue limits for applying limits from underlying devices using "
"blk_stack_limits()."
msgstr ""

#: ../../../core-api/kernel-api:323: block/blk-settings.c:513
#: block/blk-settings.c:550
msgid "commit an atomic update of queue limits"
msgstr ""

#: ../../../core-api/kernel-api:323: block/blk-settings.c:514
#: block/blk-settings.c:551 block/blk-settings.c:576
msgid "queue to update"
msgstr ""

#: ../../../core-api/kernel-api:323: block/blk-settings.c:515
#: block/blk-settings.c:552 block/blk-settings.c:577
msgid "limits to apply"
msgstr ""

#: ../../../core-api/kernel-api:323: block/blk-settings.c:516
msgid ""
"Apply the limits in **lim** that were obtained from "
"queue_limits_start_update() and updated by the caller to **q**.  The caller "
"must have frozen the queue or ensure that there are no outstanding I/Os by "
"other means."
msgstr ""

#: ../../../core-api/kernel-api:323: block/blk-settings.c:520
#: block/blk-settings.c:557 block/blk-settings.c:582
msgid "Returns 0 if successful, else a negative error code."
msgstr ""

#: ../../../core-api/kernel-api:323: block/blk-settings.c:553
msgid ""
"Apply the limits in **lim** that were obtained from "
"queue_limits_start_update() and updated with the new values by the caller to "
"**q**.  Freezes the queue before the update and unfreezes it after."
msgstr ""

#: ../../../core-api/kernel-api:323: block/blk-settings.c:575
msgid "apply queue limits to queue"
msgstr ""

#: ../../../core-api/kernel-api:323: block/blk-settings.c:578
msgid ""
"Apply the limits in **lim** that were freshly initialized to **q**. To "
"update existing limits use queue_limits_start_update() and "
"queue_limits_commit_update() instead."
msgstr ""

#: ../../../core-api/kernel-api:323: block/blk-settings.c:736
#: block/blk-settings.c:910
msgid "adjust queue_limits for stacked devices"
msgstr ""

#: ../../../core-api/kernel-api:323: block/blk-settings.c:742
#: block/blk-settings.c:916 block/blk-settings.c:941
msgid "``struct queue_limits *t``"
msgstr ""

#: ../../../core-api/kernel-api:323: block/blk-settings.c:737
#: block/blk-settings.c:911
msgid "the stacking driver limits (top device)"
msgstr ""

#: ../../../core-api/kernel-api:323: block/blk-settings.c:739
#: block/blk-settings.c:938
msgid "``struct queue_limits *b``"
msgstr ""

#: ../../../core-api/kernel-api:323: block/blk-settings.c:738
msgid "the underlying queue limits (bottom, component device)"
msgstr ""

#: ../../../core-api/kernel-api:323: block/blk-settings.c:740
msgid "``sector_t start``"
msgstr ""

#: ../../../core-api/kernel-api:323: block/blk-settings.c:739
msgid "first data sector within component device"
msgstr ""

#: ../../../core-api/kernel-api:323: block/blk-settings.c:741
#: block/blk-settings.c:916
msgid ""
"This function is used by stacking drivers like MD and DM to ensure that all "
"component devices have compatible block sizes and alignments.  The stacking "
"driver must provide a queue_limits struct (top) and then iteratively call "
"the stacking function for all component (bottom) devices.  The stacking "
"function will attempt to combine the values and ensure proper alignment."
msgstr ""

#: ../../../core-api/kernel-api:323: block/blk-settings.c:748
msgid ""
"Returns 0 if the top and bottom queue_limits are compatible.  The top "
"device's block sizes and alignment offsets may be adjusted to ensure "
"alignment with the bottom device. If no compatible sizes and alignments "
"exist, -1 is returned and the resulting top queue_limits will have the "
"misaligned flag set to indicate that the alignment_offset is undefined."
msgstr ""

#: ../../../core-api/kernel-api:323: block/blk-settings.c:912
msgid "the underlying block device (bottom)"
msgstr ""

#: ../../../core-api/kernel-api:323: block/blk-settings.c:914
msgid "``sector_t offset``"
msgstr ""

#: ../../../core-api/kernel-api:323: block/blk-settings.c:913
msgid "offset to beginning of data within component device"
msgstr ""

#: ../../../core-api/kernel-api:323: block/blk-settings.c:915
msgid "``const char *pfx``"
msgstr ""

#: ../../../core-api/kernel-api:323: block/blk-settings.c:914
msgid "prefix to use for warnings logged"
msgstr ""

#: ../../../core-api/kernel-api:323: block/blk-settings.c:935
msgid "stack integrity profile"
msgstr ""

#: ../../../core-api/kernel-api:323: block/blk-settings.c:936
msgid "target queue limits"
msgstr ""

#: ../../../core-api/kernel-api:323: block/blk-settings.c:937
msgid "base queue limits"
msgstr ""

#: ../../../core-api/kernel-api:323: block/blk-settings.c:938
msgid ""
"Check if the integrity profile in the **b** can be stacked into the target "
"**t**.  Stacking is possible if either:"
msgstr ""

#: ../../../core-api/kernel-api:323: block/blk-settings.c:941
msgid "does not have any integrity information stacked into it yet"
msgstr ""

#: ../../../core-api/kernel-api:323: block/blk-settings.c:942
msgid "the integrity profile in **b** is identical to the one in **t**"
msgstr ""

#: ../../../core-api/kernel-api:323: block/blk-settings.c:944
msgid ""
"If **b** can be stacked into **t**, return ``true``.  Else return ``false`` "
"and clear the integrity information in **t**."
msgstr ""

#: ../../../core-api/kernel-api:323: block/blk-settings.c:991
msgid "tell the block layer about the device queue depth"
msgstr ""

#: ../../../core-api/kernel-api:323: block/blk-settings.c:992
msgid "the request queue for the device"
msgstr ""

#: ../../../core-api/kernel-api:323: block/blk-settings.c:994
msgid "``unsigned int depth``"
msgstr ""

#: ../../../core-api/kernel-api:323: block/blk-settings.c:993
msgid "queue depth"
msgstr ""

#: ../../../core-api/kernel-api:326: block/blk-flush.c:462
msgid "queue a flush"
msgstr ""

#: ../../../core-api/kernel-api:326: block/blk-flush.c:463
msgid "blockdev to issue flush for"
msgstr ""

#: ../../../core-api/kernel-api:326: block/blk-flush.c:465
msgid "Issue a flush for the block device in question."
msgstr ""

#: ../../../core-api/kernel-api:329: block/blk-lib.c:76
msgid "queue a discard"
msgstr ""

#: ../../../core-api/kernel-api:329: block/blk-lib.c:77
msgid "blockdev to issue discard for"
msgstr ""

#: ../../../core-api/kernel-api:329: block/blk-lib.c:79 block/blk-lib.c:259
#: block/blk-lib.c:300
msgid "``sector_t sector``"
msgstr ""

#: ../../../core-api/kernel-api:329: block/blk-lib.c:78 block/blk-lib.c:258
#: block/blk-lib.c:299
msgid "start sector"
msgstr ""

#: ../../../core-api/kernel-api:329: block/blk-lib.c:80 block/blk-lib.c:260
#: block/blk-lib.c:301
msgid "``sector_t nr_sects``"
msgstr ""

#: ../../../core-api/kernel-api:329: block/blk-lib.c:79
msgid "number of sectors to discard"
msgstr ""

#: ../../../core-api/kernel-api:329: block/blk-lib.c:80 block/blk-lib.c:260
#: block/blk-lib.c:301
msgid "memory allocation flags (for bio_alloc)"
msgstr ""

#: ../../../core-api/kernel-api:329: block/blk-lib.c:82
msgid "Issue a discard request for the sectors in question."
msgstr ""

#: ../../../core-api/kernel-api:329: block/blk-lib.c:256
msgid "generate number of zero filed write bios"
msgstr ""

#: ../../../core-api/kernel-api:329: block/blk-lib.c:257
msgid "blockdev to issue"
msgstr ""

#: ../../../core-api/kernel-api:329: block/blk-lib.c:259 block/blk-lib.c:300
msgid "number of sectors to write"
msgstr ""

#: ../../../core-api/kernel-api:329: block/blk-lib.c:262
msgid "``struct bio **biop``"
msgstr ""

#: ../../../core-api/kernel-api:329: block/blk-lib.c:261
msgid "pointer to anchor bio"
msgstr ""

#: ../../../core-api/kernel-api:329: block/blk-lib.c:263 block/blk-lib.c:303
msgid "``unsigned flags``"
msgstr ""

#: ../../../core-api/kernel-api:329: block/blk-lib.c:262 block/blk-lib.c:302
msgid "controls detailed behavior"
msgstr ""

#: ../../../core-api/kernel-api:329: block/blk-lib.c:264
msgid ""
"Zero-fill a block range, either using hardware offload or by explicitly "
"writing zeroes to the device."
msgstr ""

#: ../../../core-api/kernel-api:329: block/blk-lib.c:267
msgid ""
"If a device is using logical block provisioning, the underlying space will "
"not be released if ``flags`` contains BLKDEV_ZERO_NOUNMAP."
msgstr ""

#: ../../../core-api/kernel-api:329: block/blk-lib.c:270
msgid ""
"If ``flags`` contains BLKDEV_ZERO_NOFALLBACK, the function will return -"
"EOPNOTSUPP if no explicit hardware offload for zeroing is provided."
msgstr ""

#: ../../../core-api/kernel-api:329: block/blk-lib.c:297
msgid "zero-fill a block range"
msgstr ""

#: ../../../core-api/kernel-api:329: block/blk-lib.c:298
msgid "blockdev to write"
msgstr ""

#: ../../../core-api/kernel-api:329: block/blk-lib.c:304
msgid ""
"Zero-fill a block range, either using hardware offload or by explicitly "
"writing zeroes to the device.  See __blkdev_issue_zeroout() for the valid "
"values for ``flags``."
msgstr ""

#: ../../../core-api/kernel-api:335: kernel/trace/blktrace.c:697
msgid "handle the ioctls associated with tracing"
msgstr ""

#: ../../../core-api/kernel-api:335: kernel/trace/blktrace.c:698
msgid "the block device"
msgstr ""

#: ../../../core-api/kernel-api:335: kernel/trace/blktrace.c:700
msgid "``unsigned cmd``"
msgstr ""

#: ../../../core-api/kernel-api:335: kernel/trace/blktrace.c:699
msgid "the ioctl cmd"
msgstr ""

#: ../../../core-api/kernel-api:335: kernel/trace/blktrace.c:701
msgid "``char __user *arg``"
msgstr ""

#: ../../../core-api/kernel-api:335: kernel/trace/blktrace.c:700
msgid "the argument data, if any"
msgstr ""

#: ../../../core-api/kernel-api:335: kernel/trace/blktrace.c:737
msgid "stop and cleanup trace structures"
msgstr ""

#: ../../../core-api/kernel-api:335: kernel/trace/blktrace.c:738
msgid "the request queue associated with the device"
msgstr ""

#: ../../../core-api/kernel-api:335: kernel/trace/blktrace.c:785
msgid "Add a trace for a request oriented action"
msgstr ""

#: ../../../core-api/kernel-api:335: kernel/trace/blktrace.c:786
#: kernel/trace/blktrace.c:995
msgid "the source request"
msgstr ""

#: ../../../core-api/kernel-api:335: kernel/trace/blktrace.c:788
msgid "``blk_status_t error``"
msgstr ""

#: ../../../core-api/kernel-api:335: kernel/trace/blktrace.c:787
msgid "return status to log"
msgstr ""

#: ../../../core-api/kernel-api:335: kernel/trace/blktrace.c:789
msgid "``unsigned int nr_bytes``"
msgstr ""

#: ../../../core-api/kernel-api:335: kernel/trace/blktrace.c:788
msgid "number of completed bytes"
msgstr ""

#: ../../../core-api/kernel-api:335: kernel/trace/blktrace.c:790
#: kernel/trace/blktrace.c:854
msgid "``u32 what``"
msgstr ""

#: ../../../core-api/kernel-api:335: kernel/trace/blktrace.c:789
#: kernel/trace/blktrace.c:853
msgid "the action"
msgstr ""

#: ../../../core-api/kernel-api:335: kernel/trace/blktrace.c:791
msgid "``u64 cgid``"
msgstr ""

#: ../../../core-api/kernel-api:335: kernel/trace/blktrace.c:790
msgid "the cgroup info"
msgstr ""

#: ../../../core-api/kernel-api:335: kernel/trace/blktrace.c:792
msgid "Records an action against a request. Will log the bio offset + size."
msgstr ""

#: ../../../core-api/kernel-api:335: kernel/trace/blktrace.c:850
msgid "Add a trace for a bio oriented action"
msgstr ""

#: ../../../core-api/kernel-api:335: kernel/trace/blktrace.c:851
msgid "queue the io is for"
msgstr ""

#: ../../../core-api/kernel-api:335: kernel/trace/blktrace.c:852
#: kernel/trace/blktrace.c:961
msgid "the source bio"
msgstr ""

#: ../../../core-api/kernel-api:335: kernel/trace/blktrace.c:855
msgid "``int error``"
msgstr ""

#: ../../../core-api/kernel-api:335: kernel/trace/blktrace.c:854
msgid "error, if any"
msgstr ""

#: ../../../core-api/kernel-api:335: kernel/trace/blktrace.c:856
msgid "Records an action against a bio. Will log the bio offset + size."
msgstr ""

#: ../../../core-api/kernel-api:335: kernel/trace/blktrace.c:959
msgid "Add a trace for a bio-remap operation"
msgstr ""

#: ../../../core-api/kernel-api:335: kernel/trace/blktrace.c:965
#: kernel/trace/blktrace.c:999
msgid "``void *ignore``"
msgstr ""

#: ../../../core-api/kernel-api:335: kernel/trace/blktrace.c:960
#: kernel/trace/blktrace.c:994
msgid "trace callback data parameter (not used)"
msgstr ""

#: ../../../core-api/kernel-api:335: kernel/trace/blktrace.c:962
msgid "source device"
msgstr ""

#: ../../../core-api/kernel-api:335: kernel/trace/blktrace.c:964
#: kernel/trace/blktrace.c:998
msgid "``sector_t from``"
msgstr ""

#: ../../../core-api/kernel-api:335: kernel/trace/blktrace.c:963
#: kernel/trace/blktrace.c:997
msgid "source sector"
msgstr ""

#: ../../../core-api/kernel-api:335: kernel/trace/blktrace.c:964
msgid "Called after a bio is remapped to a different device and/or sector."
msgstr ""

#: ../../../core-api/kernel-api:335: kernel/trace/blktrace.c:993
msgid "Add a trace for a request-remap operation"
msgstr ""

#: ../../../core-api/kernel-api:335: kernel/trace/blktrace.c:996
msgid "target device"
msgstr ""

#: ../../../core-api/kernel-api:335: kernel/trace/blktrace.c:999
msgid ""
"Device mapper remaps request to other devices. Add a trace for that action."
msgstr ""

#: ../../../core-api/kernel-api:338: block/genhd.c:1263
msgid "releases all allocated resources of the gendisk"
msgstr ""

#: ../../../core-api/kernel-api:338: block/genhd.c:1264
msgid "the device representing this disk"
msgstr ""

#: ../../../core-api/kernel-api:338: block/genhd.c:1265
msgid "This function releases all allocated resources of the gendisk."
msgstr ""

#: ../../../core-api/kernel-api:338: block/genhd.c:1267
msgid ""
"Drivers which used __device_add_disk() have a gendisk with a request_queue "
"assigned. Since the request_queue sits on top of the gendisk for these "
"drivers we also call blk_put_queue() for them, and we expect the "
"request_queue refcount to reach 0 at this point, and so the request_queue "
"will also be freed prior to the disk."
msgstr ""

#: ../../../core-api/kernel-api:338: block/genhd.c:1274
#: ../../../core-api/kernel-api:341: block/genhd.c:807 block/genhd.c:838
msgid "can sleep"
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:155
msgid "get the number of inflight IOs for a block device."
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:161
msgid "``struct block_device *part``"
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:157
msgid "the block device."
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:158
msgid ""
"Inflight here means started IO accounting, from bdev_start_io_acct() for bio-"
"based block device, and from blk_account_io_start() for rq-based block "
"device."
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:209
msgid "register a new block device"
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:215
#: ../../../core-api/kernel-api:350: fs/char_dev.c:254 fs/char_dev.c:331
msgid "``unsigned int major``"
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:211
msgid ""
"the requested major device number [1..BLKDEV_MAJOR_MAX-1]. If **major** = 0, "
"try to allocate any unused major number."
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:213
msgid "the name of the new block device as a zero terminated string"
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:215
msgid "``void (*probe)(dev_t devt)``"
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:214
msgid ""
"pre-devtmpfs / pre-udev callback used to create disks when their pre-created "
"device node is accessed. When a probe call uses add_disk() and it fails the "
"driver must cleanup resources. This interface may soon be removed."
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:218
msgid "The **name** must be unique within the system."
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:220
msgid "The return value depends on the **major** input parameter:"
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:222
msgid ""
"if a major device number was requested in range [1..BLKDEV_MAJOR_MAX-1] then "
"the function returns zero on success, or a negative error code"
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:224
msgid ""
"if any unused major number was requested with **major** = 0 parameter then "
"the return value is the allocated major number in range [1.."
"BLKDEV_MAJOR_MAX-1] or a negative error code otherwise"
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:228
msgid ""
"See Documentation/admin-guide/devices.txt for the list of allocated major "
"numbers."
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:231
msgid "Use register_blkdev instead for any new code."
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:576
msgid "add disk information to kernel list with fwnode"
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:582 block/genhd.c:622
msgid "``struct device *parent``"
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:577 block/genhd.c:617
msgid "parent device for the disk"
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:578 block/genhd.c:618
msgid "per-device partitioning information"
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:580 block/genhd.c:620
msgid "``const struct attribute_group **groups``"
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:579 block/genhd.c:619
msgid "Additional per-device sysfs groups"
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:581
msgid "``struct fwnode_handle *fwnode``"
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:580
msgid "attached disk fwnode"
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:581
msgid ""
"This function registers the partitioning information in **disk** with the "
"kernel. Also attach a fwnode to the disk device."
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:616
msgid "add disk information to kernel list"
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:620
msgid ""
"This function registers the partitioning information in **disk** with the "
"kernel."
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:680
msgid "mark a disk as dead"
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:681
msgid "disk to mark as dead"
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:682
msgid ""
"Mark as disk as dead (e.g. surprise removed) and don't accept any new I/O to "
"this disk."
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:791
msgid "remove the gendisk"
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:792
msgid "the struct gendisk to remove"
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:793
msgid ""
"Removes the gendisk and all its associated resources. This deletes the "
"partitions associated with the gendisk, and unregisters the associated "
"request_queue."
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:797
msgid "This is the counter to the respective __device_add_disk() call."
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:799
msgid ""
"The final removal of the struct gendisk happens when its refcount reaches 0 "
"with put_disk(), which should be called after del_gendisk(), if "
"__device_add_disk() was used."
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:803
msgid ""
"Drivers exist which depend on the release of the gendisk to be synchronous, "
"it should not be deferred."
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:831
msgid "invalidate the disk"
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:832
msgid "the struct gendisk to invalidate"
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:833
msgid ""
"A helper to invalidates the disk. It will clean the disk's associated buffer/"
"page caches and reset its internal states so that the disk can be reused by "
"the drivers."
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:1530
msgid "decrements the gendisk refcount"
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:1531
msgid "the struct gendisk to decrement the refcount for"
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:1532
msgid ""
"This decrements the refcount for the struct gendisk. When this reaches 0 "
"we'll have disk_release() called."
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:1536
msgid ""
"for blk-mq disk put_disk must be called before freeing the tag_set when "
"handling probe errors (that is before add_disk() is called)."
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:1539
msgid ""
"Any context, but the last reference must not be dropped from atomic context."
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:1560
msgid "set a gendisk read-only"
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:1561
msgid "gendisk to operate on"
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:1563
msgid "``bool read_only``"
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:1562
msgid "``true`` to set the disk read-only, ``false`` set the disk read/write"
msgstr ""

#: ../../../core-api/kernel-api:341: block/genhd.c:1563
msgid ""
"This function is used to indicate whether a given disk device should have "
"its read-only flag set. set_disk_ro() is typically used by device drivers to "
"indicate whether the underlying physical device is write-protected."
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:156
msgid "check that this block size is acceptable"
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:157
msgid "blockdevice to check"
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:159
msgid "``int block_size``"
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:158
msgid "block size to check"
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:159
msgid ""
"For block device users that do not use buffer heads or the block device page "
"cache, make sure that this block size can be used with the device."
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:163 block/bdev.c:283
#: block/bdev.c:319
msgid "On success zero is returned, negative error code on failure."
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:272
msgid "lock a filesystem and force it into a consistent state"
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:273
msgid "blockdevice to lock"
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:274
msgid ""
"If a superblock is found on this device, we take the s_umount semaphore on "
"it to make sure nobody unmounts until the snapshot creation is done. The "
"reference counter (bd_fsfreeze_count) guarantees that only the last unfreeze "
"process can unfreeze the frozen filesystem actually when multiple freeze "
"requests arrive simultaneously. It counts up in bdev_freeze() and count down "
"in bdev_thaw(). When it becomes 0, thaw_bdev() will unfreeze actually."
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:314
msgid "unlock filesystem"
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:315
msgid "blockdevice to unlock"
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:316
msgid ""
"Unlocks the filesystem and marks it writeable again after bdev_freeze()."
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:570
msgid "claim a block device"
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:571 block/bdev.c:658
msgid "block device of interest"
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:573 block/bdev.c:660
msgid "``void *holder``"
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:572
msgid "holder trying to claim **bdev**"
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:574
msgid "``const struct blk_holder_ops *hops``"
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:573
msgid "holder ops."
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:574
msgid ""
"Claim **bdev**.  This function fails if **bdev** is already claimed by "
"another holder and waits if another claiming is in progress. return, the "
"caller has ownership of bd_claiming and bd_holder[s]."
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:579
msgid "0 if **bdev** can be claimed, -EBUSY otherwise."
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:657
msgid "abort claiming of a block device"
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:659
msgid "holder that has claimed **bdev**"
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:660
msgid ""
"Abort claiming of a block device when the exclusive open failed. This can be "
"also used when exclusive open is not actually desired and we just needed to "
"block other exclusive openers for a while."
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:1153
msgid "yield claim to the block device and put the file"
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:1159
msgid "``struct file *bdev_file``"
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:1154
msgid "open block device"
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:1155
msgid ""
"Yield claim on the block device and put the file. Ensure that the block "
"device can be reclaimed before the file is closed which is a deferred "
"operation."
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:1186
msgid "Look up a struct block_device by name."
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:1192
msgid "``const char *pathname``"
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:1187
msgid "Name of the block device in the filesystem."
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:1189
#: ../../../core-api/kernel-api:350: fs/char_dev.c:232
msgid "``dev_t *dev``"
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:1188
msgid "Pointer to the block device's dev_t, if found."
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:1189
msgid ""
"Lookup the block device's dev_t at **pathname** in the current namespace if "
"possible and return it in **dev**."
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:1193
#: ../../../core-api/kernel-api:389: include/linux/clk.h:521
#: include/linux/clk.h:542 include/linux/clk.h:563 include/linux/clk.h:584
#: include/linux/clk.h:606 include/linux/clk.h:629 include/linux/clk.h:653
msgid "May sleep."
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:1194
msgid "0 if succeeded, negative errno otherwise."
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:1226
msgid "mark a block device as dead"
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:1227
msgid "block device to operate on"
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:1229
msgid "``bool surprise``"
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:1228
msgid "indicate a surprise removal"
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:1229
msgid ""
"Tell the file system that this devices or media is dead.  If **surprise** is "
"set to ``true`` the device or media is already gone, if not we are preparing "
"for an orderly removal."
msgstr ""

#: ../../../core-api/kernel-api:344: block/bdev.c:1233
msgid ""
"This calls into the file system, which then typicall syncs out all dirty "
"data and writes back inodes and then invalidates any cached data in the "
"inodes on the file system.  In addition we also invalidate the block device "
"mapping."
msgstr ""

#: ../../../core-api/kernel-api.rst:348
msgid "Char devices"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:192
msgid "register a range of device numbers"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:198 fs/char_dev.c:309
msgid "``dev_t from``"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:193
msgid ""
"the first in the desired range of device numbers; must include the major "
"number."
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:196 fs/char_dev.c:230
#: fs/char_dev.c:306 fs/char_dev.c:474
msgid "``unsigned count``"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:195
msgid "the number of consecutive device numbers required"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:196
msgid "the name of the device or driver."
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:197
msgid "Return value is zero on success, a negative error code on failure."
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:226
msgid "register a range of char device numbers"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:227
msgid "output parameter for first assigned number"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:229
msgid "``unsigned baseminor``"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:228 fs/char_dev.c:250
msgid "first of the requested range of minor numbers"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:229 fs/char_dev.c:251
msgid "the number of minor numbers required"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:230
msgid "the name of the associated device or driver"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:231
msgid ""
"Allocates a range of char device numbers.  The major number will be chosen "
"dynamically, and returned (along with the first minor number) in **dev**.  "
"Returns zero or a negative error code."
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:248
msgid "create and register a cdev occupying a range of minors"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:249
msgid "major device number or 0 for dynamic allocation"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:251 fs/char_dev.c:328
msgid "``unsigned int baseminor``"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:252 fs/char_dev.c:329
msgid "``unsigned int count``"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:252 fs/char_dev.c:329
msgid "name of this range of devices"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:253
msgid "file operations associated with this devices"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:254
msgid ""
"If **major** == 0 this functions will dynamically allocate a major and "
"return its number."
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:257
msgid ""
"If **major** > 0 this function will attempt to reserve a device with the "
"given major number and will return zero on success."
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:260
msgid "Returns a -ve errno on failure."
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:262
msgid ""
"The name of this device has nothing to do with the name of the device in /"
"dev. It only helps to keep track of the different owners of devices. If your "
"module name has only one type of devices it's ok to use e.g. the name of the "
"module here."
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:303
msgid "unregister a range of device numbers"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:304
msgid "the first in the range of numbers to unregister"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:305
msgid "the number of device numbers to unregister"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:306
msgid ""
"This function will unregister a range of **count** device numbers, starting "
"with **from**.  The caller should normally be the one who allocated those "
"numbers in the first place..."
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:325
msgid "unregister and destroy a cdev"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:326
msgid "major device number"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:327
msgid "first of the range of minor numbers"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:328
msgid "the number of minor numbers this cdev is occupying"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:330
msgid ""
"Unregister and destroy the cdev occupying the region described by **major**, "
"**baseminor** and **count**.  This function undoes what __register_chrdev() "
"did."
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:470
msgid "add a char device to the system"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:476 fs/char_dev.c:513
#: fs/char_dev.c:597
msgid "``struct cdev *p``"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:471
msgid "the cdev structure for the device"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:472
msgid "the first device number for which this device is responsible"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:473
msgid "the number of consecutive minor numbers corresponding to this device"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:475
msgid ""
"cdev_add() adds the device represented by **p** to the system, making it "
"live immediately.  A negative error code is returned on failure."
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:507
msgid "set the parent kobject for a char device"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:508 fs/char_dev.c:525
#: fs/char_dev.c:565
msgid "the cdev structure"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:510
msgid "``struct kobject *kobj``"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:509
msgid "the kobject to take a reference to"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:510
msgid ""
"cdev_set_parent() sets a parent kobject which will be referenced "
"appropriately so the parent is not freed before the cdev. This should be "
"called before cdev_add."
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:522
msgid "add a char device and it's corresponding struct device, linkink"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:528 fs/char_dev.c:570
#: fs/char_dev.c:657
msgid "``struct cdev *cdev``"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:524 fs/char_dev.c:566
msgid "the device structure"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:526
msgid ""
"cdev_device_add() adds the char device represented by **cdev** to the "
"system, just as cdev_add does. It then adds **dev** to the system using "
"device_add The dev_t for the char device will be taken from the struct "
"device which needs to be initialized first. This helper function correctly "
"takes a reference to the parent device so the parent will not get released "
"until all references to the cdev are released."
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:533
msgid ""
"This helper uses dev->devt for the device number. If it is not set it will "
"not add the cdev and it will be equivalent to device_add."
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:536
msgid ""
"This function should be used whenever the struct cdev and the struct device "
"are members of the same structure whose lifetime is managed by the struct "
"device."
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:541
msgid ""
"Callers must assume that userspace was able to open the cdev and can call "
"cdev fops callbacks at any time, even if this function fails."
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:564
msgid "inverse of cdev_device_add"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:567
msgid ""
"cdev_device_del() is a helper function to call cdev_del and device_del. It "
"should be used whenever cdev_device_add is used."
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:570
msgid ""
"If dev->devt is not set it will not remove the cdev and will be equivalent "
"to device_del."
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:574
msgid ""
"This guarantees that associated sysfs callbacks are not running or runnable, "
"however any cdevs already open will remain and their fops will still be "
"callable even after this function returns."
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:591
msgid "remove a cdev from the system"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:592
msgid "the cdev structure to be removed"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:593
msgid ""
"cdev_del() removes **p** from the system, possibly freeing the structure "
"itself."
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:597
msgid ""
"This guarantees that cdev device will no longer be able to be opened, "
"however any cdevs already open will remain and their fops will still be "
"callable even after cdev_del returns."
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:636
msgid "allocate a cdev structure"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:637
msgid "Allocates and returns a cdev structure, or NULL on failure."
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:651
msgid "initialize a cdev structure"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:652
msgid "the structure to initialize"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:653
msgid "the file_operations for this device"
msgstr ""

#: ../../../core-api/kernel-api:350: fs/char_dev.c:654
msgid ""
"Initializes **cdev**, remembering **fops**, making it ready to add to the "
"system with cdev_add()."
msgstr ""

#: ../../../core-api/kernel-api.rst:354
msgid "Clock Framework"
msgstr ""

#: ../../../core-api/kernel-api.rst:356
msgid ""
"The clock framework defines programming interfaces to support software "
"management of the system clock tree. This framework is widely used with "
"System-On-Chip (SOC) platforms to support power management and various "
"devices which may need custom clock rates. Note that these \"clocks\" don't "
"relate to timekeeping or real time clocks (RTCs), each of which have "
"separate frameworks. These :c:type:`struct clk <clk>` instances may be used "
"to manage for example a 96 MHz signal that is used to shift bits into and "
"out of peripherals or busses, or otherwise trigger synchronous state machine "
"transitions in system hardware."
msgstr ""

#: ../../../core-api/kernel-api.rst:366
msgid ""
"Power management is supported by explicit software clock gating: unused "
"clocks are disabled, so the system doesn't waste power changing the state of "
"transistors that aren't in active use. On some systems this may be backed by "
"hardware clock gating, where clocks are gated without being disabled in "
"software. Sections of chips that are powered but not clocked may be able to "
"retain their last state. This low power state is often called a *retention "
"mode*. This mode still incurs leakage currents, especially with finer "
"circuit geometries, but for CMOS circuits power is mostly used by clocked "
"state changes."
msgstr ""

#: ../../../core-api/kernel-api.rst:376
msgid ""
"Power-aware drivers only enable their clocks when the device they manage is "
"in active use. Also, system sleep states often differ according to which "
"clock domains are active: while a \"standby\" state may allow wakeup from "
"several active domains, a \"mem\" (suspend-to-RAM) state may require a more "
"wholesale shutdown of clocks derived from higher speed PLLs and oscillators, "
"limiting the number of possible wakeup event sources. A driver's suspend "
"method may need to be aware of system-specific clock constraints on the "
"target sleep state."
msgstr ""

#: ../../../core-api/kernel-api.rst:385
msgid ""
"Some platforms support programmable clock generators. These can be used by "
"external chips of various kinds, such as other CPUs, multimedia codecs, and "
"devices with strict requirements for interface clocking."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:44
msgid "associate a clk with a notifier"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:45
#: include/linux/clk.h:62 include/linux/clk.h:81
msgid "``clk``"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:46
msgid "struct clk * to associate the notifier with"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:46
msgid "``notifier_head``"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:47
msgid "a blocking_notifier_head for this clk"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:47
#: ../../../core-api/kernel-api:414: include/linux/rculist_nulls.h:55
msgid "``node``"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:48
msgid "linked list pointers"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:48
msgid ""
"A list of struct clk_notifier is maintained by the notifier code. An entry "
"is created whenever code registers the first notifier on a particular "
"**clk**.  Future notifiers on that **clk** are added to the "
"**notifier_head**."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:61
msgid "rate data to pass to the notifier callback"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:63
msgid "struct clk * being changed"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:63
msgid "``old_rate``"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:64
msgid "previous rate of this clk"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:64
msgid "``new_rate``"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:65
msgid "new rate of this clk"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:65
msgid ""
"For a pre-notifier, old_rate is the clk's rate before this rate change, and "
"new_rate is what the rate will be in the future.  For a post-notifier, "
"old_rate and new_rate are both set to the clk's current rate (this was done "
"to optimize the implementation)."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:78
msgid "Data used for bulk clk operations."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:80
msgid "``id``"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:81
#: include/linux/clk.h:375 include/linux/clk.h:519 include/linux/clk.h:540
#: include/linux/clk.h:561 include/linux/clk.h:582 include/linux/clk.h:604
#: include/linux/clk.h:627 include/linux/clk.h:650 include/linux/clk.h:676
#: include/linux/clk.h:1200
msgid "clock consumer ID"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:82
msgid "struct clk * to store the associated clock"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:82
msgid ""
"The CLK APIs provide a series of clk_bulk_() API calls as a convenience to "
"consumers which require multiple clks.  This structure is used to manage "
"data for these calls."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:95
msgid "register a clock rate-change notifier callback"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:101
#: include/linux/clk.h:112 include/linux/clk.h:116 include/linux/clk.h:130
#: include/linux/clk.h:140 include/linux/clk.h:150 include/linux/clk.h:159
#: include/linux/clk.h:170 include/linux/clk.h:193 include/linux/clk.h:208
#: include/linux/clk.h:223 include/linux/clk.h:306 include/linux/clk.h:318
#: include/linux/clk.h:354 include/linux/clk.h:695 include/linux/clk.h:719
#: include/linux/clk.h:753 include/linux/clk.h:760 include/linux/clk.h:795
#: include/linux/clk.h:816 include/linux/clk.h:839 include/linux/clk.h:851
#: include/linux/clk.h:880 include/linux/clk.h:890 include/linux/clk.h:899
#: include/linux/clk.h:908 include/linux/clk.h:917 include/linux/clk.h:1192
msgid "``struct clk *clk``"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:96
#: include/linux/clk.h:115
msgid "clock whose rate we are interested in"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:98
#: include/linux/clk.h:109 include/linux/clk.h:117
msgid "``struct notifier_block *nb``"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:97
#: include/linux/clk.h:116
msgid "notifier block with callback function pointer"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:98
msgid ""
"ProTip: debugging across notifier chains can be frustrating. Make sure that "
"your notifier callback function prints a nice big warning in case of failure."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:106
msgid "unregister a clock rate-change notifier callback"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:107
msgid "clock whose rate we are no longer interested in"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:108
msgid "notifier block which will be unregistered"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:113
msgid "register a managed rate-change notifier callback"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:114
#: include/linux/clk.h:374 include/linux/clk.h:391 include/linux/clk.h:414
#: include/linux/clk.h:434 include/linux/clk.h:446 include/linux/clk.h:460
#: include/linux/clk.h:483 include/linux/clk.h:500 include/linux/clk.h:518
#: include/linux/clk.h:539 include/linux/clk.h:560 include/linux/clk.h:581
#: include/linux/clk.h:603 include/linux/clk.h:626 include/linux/clk.h:649
#: include/linux/clk.h:674 include/linux/clk.h:1199
msgid "device for clock \"consumer\""
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:117
msgid "Returns 0 on success, -EERROR otherwise"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:124
msgid ""
"obtain the clock accuracy in ppb (parts per billion) for a clock source."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:126
#: include/linux/clk.h:189 include/linux/clk.h:207 include/linux/clk.h:219
#: include/linux/clk.h:301 include/linux/clk.h:313 include/linux/clk.h:349
#: include/linux/clk.h:690 include/linux/clk.h:714 include/linux/clk.h:749
#: include/linux/clk.h:755 include/linux/clk.h:811 include/linux/clk.h:834
#: include/linux/clk.h:847 include/linux/clk.h:863 include/linux/clk.h:875
#: include/linux/clk.h:885 include/linux/clk.h:894 include/linux/clk.h:903
#: include/linux/clk.h:912 include/linux/clk.h:1187
msgid "clock source"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:127
msgid ""
"This gets the clock source accuracy expressed in ppb. A perfect clock "
"returns 0."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:134
msgid "adjust the phase shift of a clock signal"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:135
#: include/linux/clk.h:145 include/linux/clk.h:154 include/linux/clk.h:165
msgid "clock signal source"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:137
msgid "``int degrees``"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:136
msgid "number of degrees the signal is shifted"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:137
msgid ""
"Shifts the phase of a clock signal by the specified degrees. Returns 0 on "
"success, -EERROR otherwise."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:144
msgid "return the phase shift of a clock signal"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:146
msgid ""
"Returns the phase shift of a clock node in degrees, otherwise returns -"
"EERROR."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:153
msgid "adjust the duty cycle ratio of a clock signal"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:156
msgid "``unsigned int num``"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:155
msgid "numerator of the duty cycle ratio to be applied"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:157
msgid "``unsigned int den``"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:156
msgid "denominator of the duty cycle ratio to be applied"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:157
msgid ""
"Adjust the duty cycle of a clock signal by the specified ratio. Returns 0 on "
"success, -EERROR otherwise."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:164
msgid "return the duty cycle ratio of a clock signal"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:167
msgid "``unsigned int scale``"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:166
msgid "scaling factor to be applied to represent the ratio as an integer"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:167
msgid ""
"Returns the duty cycle ratio multiplied by the scale provided, otherwise "
"returns -EERROR."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:174
msgid "check if two clk's point to the same hardware clock"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:180
msgid "``const struct clk *p``"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:175
msgid "clk compared against q"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:177
msgid "``const struct clk *q``"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:176
msgid "clk compared against p"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:177
msgid ""
"Returns true if the two struct clk pointers both point to the same hardware "
"clock node. Put differently, returns true if **p** and **q** share the same :"
"c:type:`struct clk_core <clk_core>` object."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:181
msgid ""
"Returns false otherwise. Note that two NULL clks are treated as matching."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:187
msgid "get exclusivity over the rate control of a producer"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:190
msgid ""
"This function allows drivers to get exclusive control over the rate of a "
"provider. It prevents any other consumer to execute, even indirectly, "
"opereation which could alter the rate of the provider or cause glitches"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:194
msgid ""
"If exlusivity is claimed more than once on clock, even by the same driver, "
"the rate effectively gets locked as exclusivity can't be preempted."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:197
#: include/linux/clk.h:211 include/linux/clk.h:226 include/linux/clk.h:304
#: include/linux/clk.h:353
msgid "Must not be called from within atomic context."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:199
#: include/linux/clk.h:695 include/linux/clk.h:706 include/linux/clk.h:839
#: include/linux/clk.h:856 include/linux/clk.h:878 include/linux/clk.h:887
#: include/linux/clk.h:896 include/linux/clk.h:905 include/linux/clk.h:1188
msgid "Returns success (0) or negative errno."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:205
msgid "devm variant of clk_rate_exclusive_get"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:206
msgid "device the exclusivity is bound to"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:208
msgid ""
"Calls clk_rate_exclusive_get() on **clk** and registers a devm cleanup "
"handler on **dev** to call clk_rate_exclusive_put()."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:217
msgid "release exclusivity over the rate control of a producer"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:220
msgid ""
"This function allows drivers to release the exclusivity it previously got "
"from clk_rate_exclusive_get()"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:223
msgid ""
"The caller must balance the number of clk_rate_exclusive_get() and "
"clk_rate_exclusive_put() calls."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:300
msgid "prepare a clock source"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:302
msgid "This prepares the clock source for use."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:312
msgid "indicate if preparing a clock also enables it."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:314
msgid ""
"Returns true if clk_prepare() implicitly enables the clock, effectively "
"making clk_enable()/clk_disable() no-ops, false otherwise."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:317
msgid ""
"This is of interest mainly to the power management code where actually "
"disabling the clock also requires unpreparing it to have any material effect."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:321
msgid ""
"Regardless of the value returned here, the caller must always invoke "
"clk_enable() or clk_prepare_enable()  and counterparts for usage counts to "
"be right."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:348
msgid "undo preparation of a clock source"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:350
msgid ""
"This undoes a previously prepared clock.  The caller must balance the number "
"of prepare and unprepare calls."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:373
msgid "lookup and obtain a reference to a clock producer."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:376
#: include/linux/clk.h:520 include/linux/clk.h:541 include/linux/clk.h:562
#: include/linux/clk.h:583 include/linux/clk.h:605 include/linux/clk.h:628
#: include/linux/clk.h:651 include/linux/clk.h:1201
msgid "``const char *id``"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:376
msgid ""
"Returns a struct clk corresponding to the clock producer, or valid IS_ERR() "
"condition containing errno.  The implementation uses **dev** and **id** to "
"determine the clock consumer, and thereby the clock producer.  (IOW, **id** "
"may be identical strings, but clk_get may return different clock producers "
"depending on **dev**.)"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:382
#: include/linux/clk.h:404 include/linux/clk.h:424 include/linux/clk.h:474
#: include/linux/clk.h:929
msgid "Drivers must assume that the clock source is not enabled."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:384
msgid "clk_get should not be called from within interrupt context."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:390
msgid "lookup and obtain a number of references to clock producer."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:393
#: include/linux/clk.h:436 include/linux/clk.h:448 include/linux/clk.h:462
#: include/linux/clk.h:707 include/linux/clk.h:735 include/linux/clk.h:772
#: include/linux/clk.h:785
msgid "``int num_clks``"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:392
#: include/linux/clk.h:435 include/linux/clk.h:447 include/linux/clk.h:461
#: include/linux/clk.h:702 include/linux/clk.h:731 include/linux/clk.h:767
#: include/linux/clk.h:780
msgid "the number of clk_bulk_data"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:394
#: include/linux/clk.h:437 include/linux/clk.h:449 include/linux/clk.h:463
#: include/linux/clk.h:769 include/linux/clk.h:782
msgid "``struct clk_bulk_data *clks``"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:393
#: include/linux/clk.h:436 include/linux/clk.h:448 include/linux/clk.h:703
#: include/linux/clk.h:732 include/linux/clk.h:768 include/linux/clk.h:781
msgid "the clk_bulk_data table of consumer"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:394
msgid ""
"This helper function allows drivers to get several clk consumers in one "
"operation. If any of the clk cannot be acquired then any clks that were "
"obtained will be freed before returning to the caller."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:398
msgid ""
"Returns 0 if all clocks specified in clk_bulk_data table are obtained "
"successfully, or valid IS_ERR() condition containing errno. The "
"implementation uses **dev** and **clk_bulk_data.id** to determine the clock "
"consumer, and thereby the clock producer. The clock returned is stored in "
"each **clk_bulk_data.clk** field."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:406
#: include/linux/clk.h:426 include/linux/clk.h:476
msgid "clk_bulk_get should not be called from within interrupt context."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:412
msgid "lookup and obtain all available references to clock producer."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:416
#: include/linux/clk.h:485 include/linux/clk.h:502
msgid "``struct clk_bulk_data **clks``"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:415
#: include/linux/clk.h:462 include/linux/clk.h:484 include/linux/clk.h:501
msgid "pointer to the clk_bulk_data table of consumer"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:416
msgid ""
"This helper function allows drivers to get all clk consumers in one "
"operation. If any of the clk cannot be acquired then any clks that were "
"obtained will be freed before returning to the caller."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:420
#: include/linux/clk.h:485 include/linux/clk.h:502
msgid ""
"Returns a positive value for the number of clocks obtained while the clock "
"references are stored in the clk_bulk_data table in **clks** field. Returns "
"0 if there're none and a negative value if something failed."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:433
msgid "lookup and obtain a number of references to clock producer"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:437
msgid ""
"Behaves the same as clk_bulk_get() except where there is no clock producer. "
"In this case, instead of returning -ENOENT, the function returns 0 and NULL "
"for a clk for which a clock producer could not be determined."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:445
#: include/linux/clk.h:482
msgid "managed get multiple clk consumers"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:449
msgid "Return 0 on success, an errno on failure."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:451
#: include/linux/clk.h:489
msgid ""
"This helper function allows drivers to get several clk consumers in one "
"operation with management, the clks will automatically be freed when the "
"device is unbound."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:459
msgid "managed get multiple optional consumer clocks"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:463
msgid ""
"Behaves the same as devm_clk_bulk_get() except where there is no clock "
"producer.  In this case, instead of returning -ENOENT, the function returns "
"NULL for given clk. It is assumed all clocks in clk_bulk_data are optional."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:467
msgid ""
"Returns 0 if all clocks specified in clk_bulk_data table are obtained "
"successfully or for any clk there was no clk provider available, otherwise "
"returns valid IS_ERR() condition containing errno. The implementation uses "
"**dev** and **clk_bulk_data.id** to determine the clock consumer, and "
"thereby the clock producer. The clock returned is stored in each "
"**clk_bulk_data.clk** field."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:499
msgid "Get and enable all clocks of the consumer (managed)"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:506
msgid ""
"This helper function allows drivers to get all clocks of the consumer and "
"enables them in one operation with management. The clks will automatically "
"be disabled and freed when the device is unbound."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:517
msgid "lookup and obtain a managed reference to a clock producer."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:523
#: include/linux/clk.h:544 include/linux/clk.h:565
msgid ""
"a struct clk corresponding to the clock producer, or valid IS_ERR() "
"condition containing errno.  The implementation uses **dev** and **id** to "
"determine the clock consumer, and thereby the clock producer.  (IOW, **id** "
"may be identical strings, but clk_get may return different clock producers "
"depending on **dev**.)"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:528
#: include/linux/clk.h:592
msgid ""
"Drivers must assume that the clock source is neither prepared nor enabled."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:531
#: include/linux/clk.h:595 include/linux/clk.h:681
msgid ""
"The clock will automatically be freed when the device is unbound from the "
"bus."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:538
msgid "devm_clk_get() + clk_prepare()"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:549
#: include/linux/clk.h:614
msgid ""
"The returned clk (if valid) is prepared. Drivers must however assume that "
"the clock is not enabled."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:552
#: include/linux/clk.h:617
msgid ""
"The clock will automatically be unprepared and freed when the device is "
"unbound from the bus."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:559
msgid "devm_clk_get() + clk_prepare_enable()"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:570
#: include/linux/clk.h:637
msgid "The returned clk (if valid) is prepared and enabled."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:572
#: include/linux/clk.h:639 include/linux/clk.h:663
msgid ""
"The clock will automatically be disabled, unprepared and freed when the "
"device is unbound from the bus."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:579
msgid "lookup and obtain a managed reference to an optional clock producer."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:586
msgid ""
"a struct clk corresponding to the clock producer, or valid IS_ERR() "
"condition containing errno.  The implementation uses **dev** and **id** to "
"determine the clock consumer, and thereby the clock producer.  If no such "
"clk is found, it returns NULL which serves as a dummy clk.  That's the only "
"difference compared to devm_clk_get()."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:602
msgid "devm_clk_get_optional() + clk_prepare()"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:608
msgid ""
"a struct clk corresponding to the clock producer, or valid IS_ERR() "
"condition containing errno.  The implementation uses **dev** and **id** to "
"determine the clock consumer, and thereby the clock producer.  If no such "
"clk is found, it returns NULL which serves as a dummy clk.  That's the only "
"difference compared to devm_clk_get_prepared()."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:624
msgid "devm_clk_get_optional() + clk_prepare_enable()"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:631
#: include/linux/clk.h:655
msgid ""
"a struct clk corresponding to the clock producer, or valid IS_ERR() "
"condition containing errno.  The implementation uses **dev** and **id** to "
"determine the clock consumer, and thereby the clock producer.  If no such "
"clk is found, it returns NULL which serves as a dummy clk.  That's the only "
"difference compared to devm_clk_get_enabled()."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:646
msgid "devm_clk_get_optional() + clk_set_rate() + clk_prepare_enable()"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:652
#: include/linux/clk.h:813 include/linux/clk.h:836 include/linux/clk.h:849
#: include/linux/clk.h:887 include/linux/clk.h:896
msgid "``unsigned long rate``"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:651
msgid "new clock rate"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:661
msgid "The returned clk (if valid) is prepared and enabled and rate was set."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:672
msgid ""
"lookup and obtain a managed reference to a clock producer from child node."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:676
msgid "``struct device_node *np``"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:675
msgid "pointer to clock consumer node"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:677
#: include/linux/clk.h:923
msgid "``const char *con_id``"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:677
msgid ""
"This function parses the clocks, and uses them to look up the struct clk "
"from the registered list of clock providers by using **np** and **con_id**"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:689
msgid "inform the system when the clock source should be running."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:691
msgid "If the clock can not be enabled/disabled, this should return success."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:693
#: include/linux/clk.h:704 include/linux/clk.h:718 include/linux/clk.h:736
msgid "May be called from atomic contexts."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:701
msgid "inform the system when the set of clks should be running."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:704
#: include/linux/clk.h:733
msgid "``const struct clk_bulk_data *clks``"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:713
msgid "inform the system when the clock source is no longer required."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:715
msgid ""
"Inform the system that a clock source is no longer required by a driver and "
"may be shut down."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:720
msgid ""
"Implementation detail: if the clock source is shared between multiple "
"drivers, clk_enable() calls must be balanced by the same number of "
"clk_disable() calls for the clock source to be disabled."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:729
msgid "inform the system when the set of clks is no longer required."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:733
msgid ""
"Inform the system that a set of clks is no longer required by a driver and "
"may be shut down."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:738
msgid ""
"Implementation detail: if the set of clks is shared between multiple "
"drivers, clk_bulk_enable() calls must be balanced by the same number of "
"clk_bulk_disable() calls for the clock source to be disabled."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:747
msgid ""
"obtain the current clock rate (in Hz) for a clock source. This is only valid "
"once the clock source has been enabled."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:754
#: include/linux/clk.h:766
msgid "\"free\" the clock source"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:757
#: include/linux/clk.h:796
msgid ""
"drivers must ensure that all clk_enable calls made on this clock source are "
"balanced by clk_disable calls prior to calling this function."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:761
#: include/linux/clk.h:800
msgid "clk_put should not be called from within interrupt context."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:770
#: include/linux/clk.h:783
msgid ""
"drivers must ensure that all clk_bulk_enable calls made on this clock source "
"are balanced by clk_bulk_disable calls prior to calling this function."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:774
msgid "clk_bulk_put should not be called from within interrupt context."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:779
msgid "\"free\" all the clock source"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:787
msgid "clk_bulk_put_all should not be called from within interrupt context."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:792
msgid "\"free\" a managed clock source"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:793
msgid "device used to acquire the clock"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:794
msgid "clock source acquired with devm_clk_get()"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:810
msgid "adjust a rate to the exact rate a clock can provide"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:812
#: include/linux/clk.h:835 include/linux/clk.h:848
msgid "desired clock rate in Hz"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:813
msgid ""
"This answers the question \"if I were to pass **rate** to clk_set_rate(), "
"what clock rate would I end up with?\" without changing the hardware in any "
"way.  In other words:"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:817
msgid "rate = clk_round_rate(clk, r);"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:819
msgid "and:"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:821
msgid "clk_set_rate(clk, r); rate = clk_get_rate(clk);"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:824
msgid ""
"are equivalent except the former does not modify the clock hardware in any "
"way."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:827
msgid "Returns rounded clock rate in Hz, or negative errno."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:833
msgid "set the clock rate for a clock source"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:836
msgid ""
"Updating the rate starts at the top-most affected clock and then walks the "
"tree down to the bottom-most clock that needs updating."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:845
msgid "set the clock rate and claim exclusivity over clock source"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:849
msgid ""
"This helper function allows drivers to atomically set the rate of a producer "
"and claim exclusivity over the rate control of the producer."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:852
msgid ""
"It is essentially a combination of clk_set_rate() and "
"clk_rate_exclusite_get(). Caller must balance this call with a call to "
"clk_rate_exclusive_put()"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:862
msgid "check if a clock is a possible parent for another"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:868
msgid "``const struct clk *clk``"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:865
msgid "``const struct clk *parent``"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:864
#: include/linux/clk.h:904
msgid "parent clock source"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:865
msgid ""
"This function can be used in drivers that need to check that a clock can be "
"the parent of another without actually changing the parent."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:868
msgid ""
"Returns true if **parent** is a possible parent for **clk**, false otherwise."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:874
msgid "set a rate range for a clock source"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:877
msgid "``unsigned long min``"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:876
#: include/linux/clk.h:886
msgid "desired minimum clock rate in Hz, inclusive"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:878
msgid "``unsigned long max``"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:877
#: include/linux/clk.h:895
msgid "desired maximum clock rate in Hz, inclusive"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:884
msgid "set a minimum clock rate for a clock source"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:893
msgid "set a maximum clock rate for a clock source"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:902
msgid "set the parent clock source for this clock"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:905
msgid "``struct clk *parent``"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:911
msgid "get the parent clock source for this clock"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:913
msgid ""
"Returns struct clk corresponding to parent clock source, or valid IS_ERR() "
"condition containing errno."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:920
msgid "get a clock based upon the device name"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:926
msgid "``const char *dev_id``"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:921
msgid "device name"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:922
msgid "connection ID"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:923
msgid ""
"Returns a struct clk corresponding to the clock producer, or valid IS_ERR() "
"condition containing errno.  The implementation uses **dev_id** and "
"**con_id** to determine the clock consumer, and thereby the clock producer. "
"In contrast to clk_get() this function takes the device name instead of the "
"device itself for identification."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:931
msgid "clk_get_sys should not be called from within interrupt context."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:937
msgid "save clock context for poweroff"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:938
msgid ""
"Saves the context of the clock register for powerstates in which the "
"contents of the registers will be lost. Occurs deep within the suspend code "
"so locking is not necessary."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:946
msgid "restore clock context after poweroff"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:947
msgid ""
"This occurs with all clocks enabled. Occurs deep within the resume code so "
"locking is not necessary."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:1186
msgid "Reset any range set on that clock"
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:1197
msgid "lookup and obtain a reference to an optional clock producer."
msgstr ""

#: ../../../core-api/kernel-api:389: include/linux/clk.h:1201
msgid ""
"Behaves the same as clk_get() except where there is no clock producer. In "
"this case, instead of returning -ENOENT, the function returns NULL."
msgstr ""

#: ../../../core-api/kernel-api.rst:393
msgid "Synchronization Primitives"
msgstr ""

#: ../../../core-api/kernel-api.rst:396
msgid "Read-Copy Update (RCU)"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:54
#: ../../../core-api/kernel-api:406: include/linux/srcu.h:93
#: ../../../core-api/kernel-api:430: include/linux/rcutree.h:51
msgid "Are two old-state values identical?"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:60
#: ../../../core-api/kernel-api:406: include/linux/srcu.h:99
msgid "``unsigned long oldstate1``"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:55
#: ../../../core-api/kernel-api:406: include/linux/srcu.h:94
#: ../../../core-api/kernel-api:430: include/linux/rcutree.h:52
msgid "First old-state value."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:57
#: ../../../core-api/kernel-api:406: include/linux/srcu.h:96
msgid "``unsigned long oldstate2``"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:56
#: ../../../core-api/kernel-api:406: include/linux/srcu.h:95
#: ../../../core-api/kernel-api:430: include/linux/rcutree.h:53
msgid "Second old-state value."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:57
msgid ""
"The two old-state values must have been obtained from either "
"get_state_synchronize_rcu(), start_poll_synchronize_rcu(), or "
"get_completed_synchronize_rcu().  Returns **true** if the two values are "
"identical and **false** otherwise.  This allows structures whose lifetimes "
"are tracked by old-state values to push these values to a list header, "
"allowing those structures to be slightly smaller."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:228
msgid "does an RCU Tasks Trace grace period imply an RCU grace period?"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:229
msgid ""
"As an accident of implementation, an RCU Tasks Trace grace period also acts "
"as an RCU grace period.  However, this could change at any time. Code "
"relying on this accident must call this function to verify that this "
"accident is still happening."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:234
msgid "You have been warned!"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:242
msgid "``cond_resched_tasks_rcu_qs ()``"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:240
msgid "Report potential quiescent states to RCU"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:241
msgid ""
"This macro resembles cond_resched(), except that it is defined to report "
"potential quiescent states to RCU-tasks even if the cond_resched() machinery "
"were to be shut off, as some advocate for PREEMPTION kernels."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:255
msgid "``rcu_softirq_qs_periodic (old_ts)``"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:253
msgid "Report RCU and RCU-Tasks quiescent states"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:259
msgid "``old_ts``"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:254
msgid "jiffies at start of processing."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:255
msgid ""
"This helper is for long-running softirq handlers, such as NAPI threads in "
"networking. The caller should initialize the variable passed in as "
"**old_ts** at the beginning of the softirq handler. When invoked frequently, "
"this macro will invoke rcu_softirq_qs() every 100 milliseconds thereafter, "
"which will provide both RCU and RCU-Tasks quiescent states. Note that this "
"macro modifies its old_ts argument."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:262
msgid ""
"Because regions of code that have disabled softirq act as RCU read-side "
"critical sections, this macro should be invoked with softirq (and "
"preemption) enabled."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:266
msgid ""
"The macro is not needed when CONFIG_PREEMPT_RT is defined. RT kernels would "
"have more chance to invoke schedule() calls and provide necessary quiescent "
"states. As a contrast, calling cond_resched() only won't achieve the same "
"effect because cond_resched() does not provide RCU-Tasks quiescent states."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:388
msgid "``RCU_LOCKDEP_WARN (c, s)``"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:386
msgid "emit lockdep splat if specified condition is met"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:387
msgid "condition to check"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:388
msgid "informative message"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:389
msgid ""
"This checks debug_lockdep_rcu_enabled() before checking (c) to prevent early "
"boot splats due to lockdep not yet being initialized, and rechecks it after "
"checking (c) to prevent false-positive splats due to races with lockdep "
"being disabled.  See commit 3066820034b5dd (\"rcu: Reject RCU_LOCKDEP_WARN() "
"false positives\") for more detail."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:438
msgid "``lockdep_assert_in_rcu_read_lock ()``"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:436
msgid "WARN if not protected by rcu_read_lock()"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:437
msgid "Splats if lockdep is enabled and there is no rcu_read_lock() in effect."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:446
msgid "``lockdep_assert_in_rcu_read_lock_bh ()``"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:444
msgid "WARN if not protected by rcu_read_lock_bh()"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:445
msgid ""
"Splats if lockdep is enabled and there is no rcu_read_lock_bh() in effect. "
"Note that local_bh_disable() and friends do not suffice here, instead an "
"actual rcu_read_lock_bh() is required."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:456
msgid "``lockdep_assert_in_rcu_read_lock_sched ()``"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:454
msgid "WARN if not protected by rcu_read_lock_sched()"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:455
msgid ""
"Splats if lockdep is enabled and there is no rcu_read_lock_sched() in "
"effect.  Note that preempt_disable() and friends do not suffice here, "
"instead an actual rcu_read_lock_sched() is required."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:466
msgid "``lockdep_assert_in_rcu_reader ()``"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:464
msgid "WARN if not within some type of RCU reader"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:465
msgid ""
"Splats if lockdep is enabled and there is no RCU reader of any type in "
"effect.  Note that regions of code protected by things like preempt_disable, "
"local_bh_disable(), and local_irq_disable() all qualify as RCU readers."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:470
msgid ""
"Note that this will never trigger in PREEMPT_NONE or PREEMPT_VOLUNTARY "
"kernels that are not also built with PREEMPT_COUNT.  But if you have lockdep "
"enabled, you might as well also enable PREEMPT_COUNT."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:517
msgid "``unrcu_pointer (p)``"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:515
msgid "mark a pointer as not being RCU protected"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:516
msgid "pointer needing to lose its __rcu property"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:517
msgid ""
"Converts **p** from an __rcu pointer to a __kernel pointer. This allows an "
"__rcu pointer to be used with xchg() and friends."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:554
msgid "``RCU_INITIALIZER (v)``"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:552
msgid "statically initialize an RCU-protected global variable"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:553
msgid "The value to statically initialize with."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:560
msgid "``rcu_assign_pointer (p, v)``"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:558
msgid "assign to RCU-protected pointer"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:559
msgid "pointer to assign to"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:560
msgid "value to assign (publish)"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:561
msgid ""
"Assigns the specified value to the specified RCU-protected pointer, ensuring "
"that any concurrent RCU readers will see any prior initialization."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:565
msgid ""
"Inserts memory barriers on architectures that require them (which is most of "
"them), and also prevents the compiler from reordering the code that "
"initializes the structure after the pointer assignment.  More importantly, "
"this call documents which pointers will be dereferenced by RCU read-side "
"code."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:571
msgid ""
"In some special cases, you may use RCU_INIT_POINTER() instead of "
"rcu_assign_pointer().  RCU_INIT_POINTER() is a bit faster due to the fact "
"that it does not constrain either the CPU or the compiler. That said, using "
"RCU_INIT_POINTER() when you should have used rcu_assign_pointer() is a very "
"bad thing that results in impossible-to-diagnose memory corruption.  So "
"please be careful. See the RCU_INIT_POINTER() comment header for details."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:579
msgid ""
"Note that rcu_assign_pointer() evaluates each of its arguments only once, "
"appearances notwithstanding.  One of the \"extra\" evaluations is in "
"typeof() and the other visible only to sparse (__CHECKER__), neither of "
"which actually execute the argument.  As with most cpp macros, this execute-"
"arguments-only-once property is important, so please be careful when making "
"changes to rcu_assign_pointer() and the other macros that it invokes."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:602
msgid "``rcu_replace_pointer (rcu_ptr, ptr, c)``"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:600
msgid "replace an RCU pointer, returning its old value"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:606
msgid "``rcu_ptr``"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:601
msgid "RCU pointer, whose old value is returned"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:602
msgid "regular pointer"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:603
msgid "the lockdep conditions under which the dereference will take place"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:604
msgid ""
"Perform a replacement, where **rcu_ptr** is an RCU-annotated pointer and "
"**c** is the lockdep argument that is passed to the "
"rcu_dereference_protected() call used to read that pointer.  The old value "
"of **rcu_ptr** is returned, and **rcu_ptr** is set to **ptr**."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:620
msgid "``rcu_access_pointer (p)``"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:618
msgid "fetch RCU pointer with no dereferencing"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:619
msgid "The pointer to read"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:620
msgid ""
"Return the value of the specified RCU-protected pointer, but omit the "
"lockdep checks for being in an RCU read-side critical section.  This is "
"useful when the value of this pointer is accessed, but the pointer is not "
"dereferenced, for example, when testing an RCU-protected pointer against "
"NULL.  Although rcu_access_pointer() may also be used in cases where update-"
"side locks prevent the value of the pointer from changing, you should "
"instead use rcu_dereference_protected() for this use case. Within an RCU "
"read-side critical section, there is little reason to use "
"rcu_access_pointer()."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:630
msgid ""
"It is usually best to test the rcu_access_pointer() return value directly in "
"order to avoid accidental dereferences being introduced by later inattentive "
"changes.  In other words, assigning the rcu_access_pointer() return value to "
"a local variable results in an accident waiting to happen."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:636
msgid ""
"It is also permissible to use rcu_access_pointer() when read-side access to "
"the pointer was removed at least one grace period ago, as is the case in the "
"context of the RCU callback that is freeing up the data, or after a "
"synchronize_rcu() returns.  This can be useful when tearing down multi-"
"linked structures after a grace period has elapsed.  However, "
"rcu_dereference_protected() is normally preferred for this use case."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:649
msgid "``rcu_dereference_check (p, c)``"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:647
msgid "rcu_dereference with debug checking"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:648
#: include/linux/rcupdate.h:685 include/linux/rcupdate.h:701
#: include/linux/rcupdate.h:718 include/linux/rcupdate.h:746
#: include/linux/rcupdate.h:766 include/linux/rcupdate.h:774
#: include/linux/rcupdate.h:782 include/linux/rcupdate.h:790
msgid "The pointer to read, prior to dereferencing"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:649
#: include/linux/rcupdate.h:686 include/linux/rcupdate.h:702
#: include/linux/rcupdate.h:719 include/linux/rcupdate.h:747
msgid "The conditions under which the dereference will take place"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:650
msgid ""
"Do an rcu_dereference(), but check that the conditions under which the "
"dereference will take place are correct.  Typically the conditions indicate "
"the various locking conditions that should be held at that point.  The check "
"should return true if the conditions are satisfied. An implicit check for "
"being in an RCU read-side critical section (rcu_read_lock()) is included."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:657
msgid "For example:"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:659
msgid ""
"bar = rcu_dereference_check(foo->bar, lockdep_is_held(:c:type:`foo->lock "
"<foo>`));"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:661
msgid ""
"could be used to indicate to lockdep that foo->bar may only be dereferenced "
"if either rcu_read_lock() is held, or that the lock required to replace the "
"bar struct at foo->bar is held."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:665
msgid ""
"Note that the list of conditions may also include indications of when a lock "
"need not be held, for example during initialisation or destruction of the "
"target struct:"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:669
msgid ""
"bar = rcu_dereference_check(foo->bar, lockdep_is_held(:c:type:`foo->lock "
"<foo>`) ||"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:670
msgid "atomic_read(:c:type:`foo->usage <foo>`) == 0);"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:672
msgid ""
"Inserts memory barriers on architectures that require them (currently only "
"the Alpha), prevents the compiler from refetching (and from merging "
"fetches), and, more importantly, documents exactly which pointers are "
"protected by RCU and checks that the pointer is annotated as __rcu."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:686
msgid "``rcu_dereference_bh_check (p, c)``"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:684
msgid "rcu_dereference_bh with debug checking"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:687
msgid ""
"This is the RCU-bh counterpart to rcu_dereference_check().  However, please "
"note that starting in v5.0 kernels, vanilla RCU grace periods wait for "
"local_bh_disable() regions of code in addition to regions of code demarked "
"by rcu_read_lock() and rcu_read_unlock().  This means that "
"synchronize_rcu(), call_rcu, and friends all take not only rcu_read_lock() "
"but also rcu_read_lock_bh() into account."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:702
msgid "``rcu_dereference_sched_check (p, c)``"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:700
msgid "rcu_dereference_sched with debug checking"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:703
msgid ""
"This is the RCU-sched counterpart to rcu_dereference_check(). However, "
"please note that starting in v5.0 kernels, vanilla RCU grace periods wait "
"for preempt_disable() regions of code in addition to regions of code "
"demarked by rcu_read_lock() and rcu_read_unlock(). This means that "
"synchronize_rcu(), call_rcu, and friends all take not only rcu_read_lock() "
"but also rcu_read_lock_sched() into account."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:719
msgid "``rcu_dereference_all_check (p, c)``"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:717
msgid "rcu_dereference_all with debug checking"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:720
msgid ""
"This is similar to rcu_dereference_check(), but allows protection by all "
"forms of vanilla RCU readers, including preemption disabled, bh-disabled, "
"and interrupt-disabled regions of code.  Note that \"vanilla RCU\" excludes "
"SRCU and the various Tasks RCU flavors.  Please note that this macro should "
"not be backported to any Linux-kernel version preceding v5.0 due to changes "
"in synchronize_rcu() semantics prior to that version."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:747
msgid "``rcu_dereference_protected (p, c)``"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:745
msgid "fetch RCU pointer when updates prevented"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:748
msgid ""
"Return the value of the specified RCU-protected pointer, but omit the "
"READ_ONCE().  This is useful in cases where update-side locks prevent the "
"value of the pointer from changing.  Please note that this primitive does "
"*not* prevent the compiler from repeating this reference or combining it "
"with other references, so it should not be used without protection of "
"appropriate locks."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:755
msgid ""
"This function is only for update-side use.  Using this function when "
"protected only by rcu_read_lock() will result in infrequent but very ugly "
"failures."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:767
msgid "``rcu_dereference (p)``"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:765
msgid "fetch RCU-protected pointer for dereferencing"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:767
msgid "This is a simple wrapper around rcu_dereference_check()."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:775
msgid "``rcu_dereference_bh (p)``"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:773
msgid "fetch an RCU-bh-protected pointer for dereferencing"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:775
#: include/linux/rcupdate.h:783 include/linux/rcupdate.h:791
msgid "Makes rcu_dereference_check() do the dirty work."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:783
msgid "``rcu_dereference_sched (p)``"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:781
msgid "fetch RCU-sched-protected pointer for dereferencing"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:791
msgid "``rcu_dereference_all (p)``"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:789
msgid "fetch RCU-all-protected pointer for dereferencing"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:799
msgid "``rcu_pointer_handoff (p)``"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:797
msgid "Hand off a pointer from RCU to other mechanism"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:798
msgid "The pointer to hand off"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:799
msgid ""
"This is simply an identity function, but it documents where a pointer is "
"handed off from RCU to some other synchronization mechanism, for example, "
"reference counting or locking.  In C11, it would map to kill_dependency().  "
"It could be used as follows::"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:819
msgid "mark the beginning of an RCU read-side critical section"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:820
msgid ""
"When synchronize_rcu() is invoked on one CPU while other CPUs are within RCU "
"read-side critical sections, then the synchronize_rcu() is guaranteed to "
"block until after all the other CPUs exit their critical sections.  "
"Similarly, if call_rcu() is invoked on one CPU while other CPUs are within "
"RCU read-side critical sections, invocation of the corresponding RCU "
"callback is deferred until after the all the other CPUs exit their critical "
"sections."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:828
msgid ""
"Both synchronize_rcu() and call_rcu() also wait for regions of code with "
"preemption disabled, including regions of code with interrupts or softirqs "
"disabled."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:832
msgid ""
"Note, however, that RCU callbacks are permitted to run concurrently with new "
"RCU read-side critical sections.  One way that this can happen is via the "
"following sequence of events: (1) CPU 0 enters an RCU read-side critical "
"section, (2) CPU 1 invokes call_rcu() to register an RCU callback, (3) CPU 0 "
"exits the RCU read-side critical section, (4) CPU 2 enters a RCU read-side "
"critical section, (5) the RCU callback is invoked.  This is legal, because "
"the RCU read-side critical section that was running concurrently with the "
"call_rcu() (and which therefore might be referencing something that the "
"corresponding RCU callback would free up) has completed before the "
"corresponding RCU callback is invoked."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:844
msgid ""
"RCU read-side critical sections may be nested.  Any deferred actions will be "
"deferred until the outermost RCU read-side critical section completes."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:848
msgid ""
"You can avoid reading and understanding the next paragraph by following this "
"rule: don't put anything in an rcu_read_lock() RCU read-side critical "
"section that would block in a !PREEMPTION kernel. But if you want the full "
"story, read on!"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:853
msgid ""
"In non-preemptible RCU implementations (pure TREE_RCU and TINY_RCU), it is "
"illegal to block while in an RCU read-side critical section. In preemptible "
"RCU implementations (PREEMPT_RCU) in CONFIG_PREEMPTION kernel builds, RCU "
"read-side critical sections may be preempted, but explicit blocking is "
"illegal.  Finally, in preemptible RCU implementations in real-time (with -rt "
"patchset) kernel builds, RCU read-side critical sections may be preempted "
"and they may also block, but only when acquiring spinlocks that are subject "
"to priority inheritance."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:883
msgid "marks the end of an RCU read-side critical section."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:884
msgid ""
"In almost all situations, rcu_read_unlock() is immune from deadlock. This "
"deadlock immunity also extends to the scheduler's runqueue and priority-"
"inheritance spinlocks, courtesy of the quiescent-state deferral that is "
"carried out when rcu_read_unlock() is invoked with interrupts disabled."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:890
msgid "See rcu_read_lock() for more information."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:903
msgid "mark the beginning of an RCU-bh critical section"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:904
msgid ""
"This is equivalent to rcu_read_lock(), but also disables softirqs. Note that "
"anything else that disables softirqs can also serve as an RCU read-side "
"critical section.  However, please note that this equivalence applies only "
"to v5.0 and later.  Before v5.0, rcu_read_lock() and rcu_read_lock_bh() were "
"unrelated."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:910
msgid ""
"Note that rcu_read_lock_bh() and the matching rcu_read_unlock_bh() must "
"occur in the same context, for example, it is illegal to invoke "
"rcu_read_unlock_bh() from one task if the matching rcu_read_lock_bh() was "
"invoked from some other task."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:926
msgid "marks the end of a softirq-only RCU critical section"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:927
msgid "See rcu_read_lock_bh() for more information."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:940
msgid "mark the beginning of a RCU-sched critical section"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:941
msgid ""
"This is equivalent to rcu_read_lock(), but also disables preemption. Read-"
"side critical sections can also be introduced by anything else that disables "
"preemption, including local_irq_disable() and friends.  However, please note "
"that the equivalence to rcu_read_lock() applies only to v5.0 and later.  "
"Before v5.0, rcu_read_lock() and rcu_read_lock_sched() were unrelated."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:948
msgid ""
"Note that rcu_read_lock_sched() and the matching rcu_read_unlock_sched() "
"must occur in the same context, for example, it is illegal to invoke "
"rcu_read_unlock_sched() from process context if the matching "
"rcu_read_lock_sched() was invoked from an NMI handler."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:971
msgid "marks the end of a RCU-classic critical section"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:972
msgid "See rcu_read_lock_sched() for more information."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1008
msgid "``RCU_INIT_POINTER (p, v)``"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1006
msgid "initialize an RCU protected pointer"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1007
#: include/linux/rcupdate.h:1051
msgid "The pointer to be initialized."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1008
#: include/linux/rcupdate.h:1052
msgid "The value to initialized the pointer to."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1009
msgid ""
"Initialize an RCU-protected pointer in special cases where readers do not "
"need ordering constraints on the CPU or the compiler.  These special cases "
"are:"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1013
msgid "This use of RCU_INIT_POINTER() is NULLing out the pointer *or*"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1014
msgid ""
"The caller has taken whatever steps are required to prevent RCU readers from "
"concurrently accessing this pointer *or*"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1016
msgid ""
"The referenced data structure has already been exposed to readers either at "
"compile time or via rcu_assign_pointer() *and*"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1019
msgid ""
"You have not made *any* reader-visible changes to this structure since then "
"*or*"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1021
msgid ""
"It is OK for readers accessing this structure from its new location to see "
"the old state of the structure.  (For example, the changes were to "
"statistical counters or to other state where exact synchronization is not "
"required.)"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1026
msgid ""
"Failure to follow these rules governing use of RCU_INIT_POINTER() will "
"result in impossible-to-diagnose memory corruption.  As in the structures "
"will look OK in crash dumps, but any concurrent RCU readers might see pre-"
"initialized values of the referenced data structure.  So please be very "
"careful how you use RCU_INIT_POINTER()!!!"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1032
msgid ""
"If you are creating an RCU-protected linked structure that is accessed by a "
"single external-to-structure RCU-protected pointer, then you may use "
"RCU_INIT_POINTER() to initialize the internal RCU-protected pointers, but "
"you must use rcu_assign_pointer() to initialize the external-to-structure "
"pointer *after* you have completely initialized the reader-accessible "
"portions of the linked structure."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1039
msgid ""
"Note that unlike rcu_assign_pointer(), RCU_INIT_POINTER() provides no "
"ordering guarantees for either the CPU or the compiler."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1052
msgid "``RCU_POINTER_INITIALIZER (p, v)``"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1050
msgid "statically initialize an RCU protected pointer"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1053
msgid ""
"GCC-style initialization for an RCU-protected pointer in a structure field."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1062
msgid "``kfree_rcu (ptr, rhf)``"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1060
#: include/linux/rcupdate.h:1091
msgid "kfree an object after a grace period."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1061
msgid "pointer to kfree for double-argument invocations."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1063
msgid "``rhf``"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1062
msgid "the name of the struct rcu_head within the type of **ptr**."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1063
msgid ""
"Many rcu callbacks functions just call kfree() on the base structure. These "
"functions are trivial, but their size adds up, and furthermore when they are "
"used in a kernel module, that module must invoke the high-latency "
"rcu_barrier() function at module-unload time."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1068
msgid ""
"The kfree_rcu() function handles this issue. In order to have a universal "
"callback function handling different offsets of rcu_head, the callback needs "
"to determine the starting address of the freed object, which can be a large "
"kmalloc or vmalloc allocation. To allow simply aligning the pointer down to "
"page boundary for those, only offsets up to 4095 bytes can be accommodated. "
"If the offset is larger than 4095 bytes, a compile-time error will be "
"generated in kvfree_rcu_arg_2(). If this error is triggered, you can either "
"fall back to use of call_rcu() or rearrange the structure to position the "
"rcu_head structure into the first 4096 bytes."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1078
msgid ""
"The object to be freed can be allocated either by kmalloc() or "
"kmem_cache_alloc()."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1081
msgid "Note that the allowable offset might decrease in the future."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1083
msgid ""
"The BUILD_BUG_ON check must not involve any function calls, hence the checks "
"are done in macros here."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1093
msgid "``kfree_rcu_mightsleep (ptr)``"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1092
msgid "pointer to kfree for single-argument invocations."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1093
msgid ""
"When it comes to head-less variant, only one argument is passed and that is "
"just a pointer which has to be freed after a grace period. Therefore the "
"semantic is"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1097
msgid "kfree_rcu_mightsleep(ptr);"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1099
msgid "where **ptr** is the pointer to be freed by kvfree()."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1101
msgid ""
"Please note, head-less way of freeing is permitted to use from a context "
"that has to follow might_sleep() annotation. Otherwise, please switch and "
"embed the rcu_head structure within the type of **ptr**."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1153
msgid "Initialize rcu_head for rcu_head_after_call_rcu()"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1159
#: include/linux/rcupdate.h:1174 ../../../core-api/kernel-api:408:
#: kernel/rcu/srcutree.c:1408 ../../../core-api/kernel-api:418:
#: kernel/rcu/sync.c:41 ../../../core-api/kernel-api:420:
#: kernel/rcu/tasks.h:1184 kernel/rcu/tasks.h:2009
msgid "``struct rcu_head *rhp``"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1154
msgid "The rcu_head structure to initialize."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1155
msgid ""
"If you intend to invoke rcu_head_after_call_rcu() to test whether a given "
"rcu_head structure has already been passed to call_rcu(), then you must also "
"invoke this rcu_head_init() function on it just after allocating that "
"structure.  Calls to this function must not race with calls to call_rcu(), "
"rcu_head_after_call_rcu(), or callback invocation."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1168
msgid "Has this rcu_head been passed to call_rcu()?"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1169
msgid "The rcu_head structure to test."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1171
msgid "``rcu_callback_t f``"
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1170
msgid "The function passed to call_rcu() along with **rhp**."
msgstr ""

#: ../../../core-api/kernel-api:398: include/linux/rcupdate.h:1171
msgid ""
"Returns **true** if the **rhp** has been passed to call_rcu() with **func**, "
"and **false** otherwise.  Emits a warning in any other case, including the "
"case where **rhp** has already been invoked after a grace period. Calls to "
"this function must not race with callback invocation.  One way to avoid such "
"races is to enclose the call to rcu_head_after_call_rcu() in an RCU read-"
"side critical section that includes a read-side fetch of the pointer to the "
"structure containing **rhp**."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:238
msgid "Provide a set of RCU quiescent states in softirq processing"
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:239
msgid ""
"Mark a quiescent state for RCU, Tasks RCU, and Tasks Trace RCU. This is a "
"special-purpose function to be used in the softirq infrastructure and "
"perhaps the occasional long-running softirq handler."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:244
msgid ""
"Note that from RCU's viewpoint, a call to rcu_softirq_qs() is equivalent to "
"momentarily completely enabling preemption.  For example, given this code::"
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:254
msgid ""
"A call to synchronize_rcu() that began concurrently with the call to "
"do_something() would be guaranteed to wait only until execution reached "
"statement A.  Without that rcu_softirq_qs(), that same synchronize_rcu() "
"would instead be guaranteed to wait until execution reached statement B."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:299
msgid "Has RCU stopped watching a given CPU since the specified **snap**?"
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:305
msgid "``struct rcu_data *rdp``"
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:302
msgid "The rcu_data corresponding to the CPU for which to check EQS."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:304
msgid "``int snap``"
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:303
msgid "rcu_watching snapshot taken when the CPU wasn't in an EQS."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:304
msgid ""
"Returns true if the CPU corresponding to **rdp** has spent some time in an "
"extended quiescent state since **snap**. Note that this doesn't check if it /"
"still/ is in an EQS, just that it went through one since **snap**."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:308
msgid ""
"This is meant to be used in a loop waiting for a CPU to go through an EQS."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:370
msgid "see if 'interrupted' from idle"
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:371
msgid ""
"If the current CPU is idle and running at a first-level (not nested) "
"interrupt, or directly, from idle, return true."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:374
msgid "The caller must have at least disabled IRQs."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:618
msgid "Validate that scheduling is possible"
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:636
msgid "Enable scheduler tick on CPU if RCU needs it."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:637
msgid ""
"The scheduler tick is not normally enabled when CPUs enter the kernel from "
"nohz_full userspace execution.  After all, nohz_full userspace execution is "
"an RCU quiescent state and the time executing in the kernel is quite short.  "
"Except of course when it isn't.  And it is not hard to cause a large system "
"to spend tens of seconds or even minutes looping in the kernel, which can "
"cause a number of problems, include RCU CPU stall warnings."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:645
msgid ""
"Therefore, if a nohz_full CPU fails to report a quiescent state in a timely "
"manner, the RCU grace-period kthread sets that CPU's ->rcu_urgent_qs flag "
"with the expectation that the next interrupt or exception will invoke this "
"function, which will turn on the scheduler tick, which will enable RCU to "
"detect that CPU's quiescent states, for example, due to cond_resched() calls "
"in CONFIG_PREEMPT=n kernels. The tick will be disabled once a quiescent "
"state is reported for this CPU."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:654
msgid ""
"Of course, in carefully tuned systems, there might never be an interrupt or "
"exception.  In that case, the RCU grace-period kthread will eventually cause "
"one to happen.  However, in less carefully controlled environments, this "
"function allows RCU to get what it needs without creating otherwise useless "
"interruptions."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:732
msgid "RCU read-side critical sections permitted on current CPU?"
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:733
msgid ""
"Return **true** if RCU is watching the running CPU and **false** otherwise. "
"An **true** return means that this CPU can safely enter RCU read-side "
"critical sections."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:737
msgid ""
"Although calls to rcu_is_watching() from most parts of the kernel will "
"return **true**, there are important exceptions.  For example, if the "
"current CPU is deep within its idle loop, in kernel entry/exit code, or "
"offline, rcu_is_watching() will return **false**."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:742
msgid ""
"Make notrace because it can be called by the internal functions of ftrace, "
"and making this notrace removes unnecessary recursion calls."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:778
msgid "Set RCU GP sequence overflow lag value."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:784
msgid "``unsigned long lag_gps``"
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:779
msgid ""
"Set overflow lag to this many grace period worth of counters which is used "
"by rcutorture to quickly force a gpwrap situation. **lag_gps** = 0 means we "
"reset it back to the boot-time value."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3156
msgid ""
"Queue RCU callback for invocation after grace period, and flush all lazy "
"callbacks (including the new one) to the main ->cblist while doing so."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3162
#: kernel/rcu/tree.c:3191 ../../../core-api/kernel-api:404:
#: kernel/rcu/update.c:403 kernel/rcu/update.c:482 kernel/rcu/update.c:498
msgid "``struct rcu_head *head``"
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3160
#: kernel/rcu/tree.c:3190 ../../../core-api/kernel-api:420:
#: kernel/rcu/tasks.h:1179 kernel/rcu/tasks.h:2004
msgid "structure to be used for queueing the RCU updates."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3162
#: kernel/rcu/tree.c:3192 ../../../core-api/kernel-api:408:
#: kernel/rcu/srcutree.c:1409 ../../../core-api/kernel-api:420:
#: kernel/rcu/tasks.h:1181 kernel/rcu/tasks.h:2006
msgid "``rcu_callback_t func``"
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3161
#: kernel/rcu/tree.c:3191 ../../../core-api/kernel-api:420:
#: kernel/rcu/tasks.h:1180 kernel/rcu/tasks.h:2005
msgid "actual callback function to be invoked after the grace period"
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3162
msgid ""
"The callback function will be invoked some time after a full grace period "
"elapses, in other words after all pre-existing RCU read-side critical "
"sections have completed."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3166
msgid ""
"Use this API instead of call_rcu() if you don't want the callback to be "
"delayed for very long periods of time, which can happen on systems without "
"memory pressure and on systems which are lightly loaded or mostly idle. This "
"function will cause callbacks to be invoked sooner than later at the expense "
"of extra power. Other than that, this function is identical to, and reuses "
"call_rcu()'s logic. Refer to call_rcu() for more details about memory "
"ordering and other functionality."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3185
msgid ""
"Queue an RCU callback for invocation after a grace period. By default the "
"callbacks are 'lazy' and are kept hidden from the main ->cblist to prevent "
"starting of grace periods too soon. If you desire grace periods to start "
"very soon, use call_rcu_hurry()."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3192
msgid ""
"The callback function will be invoked some time after a full grace period "
"elapses, in other words after all pre-existing RCU read-side critical "
"sections have completed.  However, the callback function might well execute "
"concurrently with RCU read-side critical sections that started after "
"call_rcu() was invoked."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3198
msgid ""
"It is perfectly legal to repost an RCU callback, potentially with a "
"different callback function, from within its callback function. The "
"specified function will be invoked after another full grace period has "
"elapsed.  This use case is similar in form to the common practice of "
"reposting a timer from within its own handler."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3204
#: kernel/rcu/tree.c:3312
msgid ""
"RCU read-side critical sections are delimited by rcu_read_lock() and "
"rcu_read_unlock(), and may be nested.  In addition, but only in v5.0 and "
"later, regions of code across which interrupts, preemption, or softirqs have "
"been disabled also serve as RCU read-side critical sections.  This includes "
"hardware interrupt handlers, softirq handlers, and NMI handlers."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3211
msgid ""
"Note that all CPUs must agree that the grace period extended beyond all pre-"
"existing RCU read-side critical section.  On systems with more than one CPU, "
"this means that when \"func()\" is invoked, each CPU is guaranteed to have "
"executed a full memory barrier since the end of its last RCU read-side "
"critical section whose beginning preceded the call to call_rcu().  It also "
"means that each CPU executing an RCU read-side critical section that "
"continues beyond the start of \"func()\" must have executed a memory barrier "
"after the call_rcu() but before the beginning of that RCU read-side critical "
"section.  Note that these guarantees include CPUs that are offline, idle, or "
"executing in user mode, as well as CPUs that are executing in the kernel."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3223
msgid ""
"Furthermore, if CPU A invoked call_rcu() and CPU B invoked the resulting RCU "
"callback function \"func()\", then both CPU A and CPU B are guaranteed to "
"execute a full memory barrier during the time interval between the call to "
"call_rcu() and the invocation of \"func()\" -- even if CPU A and CPU B are "
"the same CPU (but again only if the system has more than one CPU)."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3230
#: kernel/rcu/tree.c:3337
msgid ""
"Implementation of these memory-ordering guarantees is described here: "
"Documentation/RCU/Design/Memory-Ordering/Tree-RCU-Memory-Ordering.rst."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3233
msgid ""
"Specific to call_rcu() (as opposed to the other call_rcu*() functions), in "
"kernels built with CONFIG_RCU_LAZY=y, call_rcu() might delay for many "
"seconds before starting the grace period needed by the corresponding "
"callback.  This delay can significantly improve energy-efficiency on low-"
"utilization battery-powered devices.  To avoid this delay, in latency-"
"sensitive kernel code, use call_rcu_hurry()."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3304
msgid "wait until a grace period has elapsed."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3305
msgid ""
"Control will return to the caller some time after a full grace period has "
"elapsed, in other words after all currently executing RCU read-side critical "
"sections have completed.  Note, however, that upon return from "
"synchronize_rcu(), the caller might well be executing concurrently with new "
"RCU read-side critical sections that began while synchronize_rcu() was "
"waiting."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3319
msgid ""
"Note that this guarantee implies further memory-ordering guarantees. On "
"systems with more than one CPU, when synchronize_rcu() returns, each CPU is "
"guaranteed to have executed a full memory barrier since the end of its last "
"RCU read-side critical section whose beginning preceded the call to "
"synchronize_rcu().  In addition, each CPU having an RCU read-side critical "
"section that extends beyond the return from synchronize_rcu() is guaranteed "
"to have executed a full memory barrier after the beginning of "
"synchronize_rcu() and before the beginning of that RCU read-side critical "
"section.  Note that these guarantees include CPUs that are offline, idle, or "
"executing in user mode, as well as CPUs that are executing in the kernel."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3331
msgid ""
"Furthermore, if CPU A invoked synchronize_rcu(), which returned to its "
"caller on CPU B, then both CPU A and CPU B are guaranteed to have executed a "
"full memory barrier during the execution of synchronize_rcu() -- even if CPU "
"A and CPU B are the same CPU (but again only if the system has more than one "
"CPU)."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3381
msgid "Return a full pre-completed polled state cookie"
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3387
#: kernel/rcu/tree.c:3420 kernel/rcu/tree.c:3498 kernel/rcu/tree.c:3561
#: kernel/rcu/tree.c:3635 ../../../core-api/kernel-api:402:
#: kernel/rcu/tree_exp.h:1051 kernel/rcu/tree_exp.h:1096
msgid "``struct rcu_gp_oldstate *rgosp``"
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3382
msgid "Place to put state cookie"
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3383
msgid ""
"Stores into **rgosp** a value that will always be treated by functions like "
"poll_state_synchronize_rcu_full() as a cookie whose grace period has already "
"completed."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3396
msgid "Snapshot current RCU state"
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3397
msgid ""
"Returns a cookie that is used by a later call to cond_synchronize_rcu() or "
"poll_state_synchronize_rcu() to determine whether or not a full grace period "
"has elapsed in the meantime."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3414
msgid "Snapshot RCU state, both normal and expedited"
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3415
msgid "location to place combined normal/expedited grace-period state"
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3416
msgid ""
"Places the normal and expedited grace-period states in **rgosp**.  This "
"state value can be passed to a later call to cond_synchronize_rcu_full() or "
"poll_state_synchronize_rcu_full() to determine whether or not a grace period "
"(whether normal or expedited) has elapsed in the meantime. The "
"rcu_gp_oldstate structure takes up twice the memory of an unsigned long, but "
"is guaranteed to see all grace periods.  In contrast, the combined state "
"occupies less memory, but can sometimes fail to take grace periods into "
"account."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3425
msgid ""
"This does not guarantee that the needed grace period will actually start."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3474
msgid "Snapshot and start RCU grace period"
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3475
msgid ""
"Returns a cookie that is used by a later call to cond_synchronize_rcu() or "
"poll_state_synchronize_rcu() to determine whether or not a full grace period "
"has elapsed in the meantime.  If the needed grace period is not already "
"slated to start, notifies RCU core of the need for that grace period."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3492
msgid "Take a full snapshot and start RCU grace period"
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3493
#: kernel/rcu/tree.c:3556
msgid ""
"value from get_state_synchronize_rcu_full() or "
"start_poll_synchronize_rcu_full()"
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3494
msgid ""
"Places the normal and expedited grace-period states in ***rgos**.  This "
"state value can be passed to a later call to cond_synchronize_rcu_full() or "
"poll_state_synchronize_rcu_full() to determine whether or not a grace period "
"(whether normal or expedited) has elapsed in the meantime. If the needed "
"grace period is not already slated to start, notifies RCU core of the need "
"for that grace period."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3511
#: kernel/rcu/tree.c:3555
msgid "Has the specified RCU grace period completed?"
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3517
#: kernel/rcu/tree.c:3610 ../../../core-api/kernel-api:402:
#: kernel/rcu/tree_exp.h:1069
msgid "``unsigned long oldstate``"
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3512
msgid "value from get_state_synchronize_rcu() or start_poll_synchronize_rcu()"
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3513
msgid ""
"If a full RCU grace period has elapsed since the earlier call from which "
"**oldstate** was obtained, return **true**, otherwise return **false**. If "
"**false** is returned, it is the caller's responsibility to invoke this "
"function later on until it does return **true**.  Alternatively, the caller "
"can explicitly wait for a grace period, for example, by passing **oldstate** "
"to either cond_synchronize_rcu() or cond_synchronize_rcu_expedited() on the "
"one hand or by directly invoking either synchronize_rcu() or "
"synchronize_rcu_expedited() on the other."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3522
msgid ""
"Yes, this function does not take counter wrap into account. But counter wrap "
"is harmless.  If the counter wraps, we have waited for more than a billion "
"grace periods (and way more on a 64-bit system!). Those needing to keep old "
"state values for very long time periods (many hours even on 32-bit systems) "
"should check them occasionally and either refresh them or set a flag "
"indicating that the grace period has completed.  Alternatively, they can use "
"get_completed_synchronize_rcu() to get a guaranteed-completed grace-period "
"state."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3531
msgid ""
"In addition, because oldstate compresses the grace-period state for both "
"normal and expedited grace periods into a single unsigned long, it can miss "
"a grace period when synchronize_rcu() runs concurrently with "
"synchronize_rcu_expedited().  If this is unacceptable, please instead use "
"the _full() variant of these polling APIs."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3537
msgid ""
"This function provides the same memory-ordering guarantees that would be "
"provided by a synchronize_rcu() that was invoked at the call to the function "
"that provided **oldstate**, and that returned at the end of this function."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3557
msgid ""
"If a full RCU grace period has elapsed since the earlier call from which "
"*rgosp was obtained, return **true**, otherwise return **false**. If "
"**false** is returned, it is the caller's responsibility to invoke this "
"function later on until it does return **true**.  Alternatively, the caller "
"can explicitly wait for a grace period, for example, by passing **rgosp** to "
"cond_synchronize_rcu() or by directly invoking synchronize_rcu()."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3564
msgid ""
"Yes, this function does not take counter wrap into account. But counter wrap "
"is harmless.  If the counter wraps, we have waited for more than a billion "
"grace periods (and way more on a 64-bit system!).  Those needing to keep "
"rcu_gp_oldstate values for very long time periods (many hours even on 32-bit "
"systems) should check them occasionally and either refresh them or set a "
"flag indicating that the grace period has completed.  Alternatively, they "
"can use get_completed_synchronize_rcu_full() to get a guaranteed-completed "
"grace-period state."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3574
msgid ""
"This function provides the same memory-ordering guarantees that would be "
"provided by a synchronize_rcu() that was invoked at the call to the function "
"that provided **rgosp**, and that returned at the end of this function.  And "
"this guarantee requires that the root rcu_node structure's ->gp_seq field be "
"checked instead of that of the rcu_state structure. The problem is that the "
"just-ending grace-period's callbacks can be invoked between the time that "
"the root rcu_node structure's ->gp_seq field is updated and the time that "
"the rcu_state structure's ->gp_seq field is updated.  Therefore, if a single "
"synchronize_rcu() is to cause a subsequent poll_state_synchronize_rcu_full() "
"to return **true**, then the root rcu_node structure is the one that needs "
"to be polled."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3604
#: kernel/rcu/tree.c:3629
msgid "Conditionally wait for an RCU grace period"
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3605
#: ../../../core-api/kernel-api:402: kernel/rcu/tree_exp.h:1065
msgid ""
"value from get_state_synchronize_rcu(), start_poll_synchronize_rcu(), or "
"start_poll_synchronize_rcu_expedited()"
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3606
msgid ""
"If a full RCU grace period has elapsed since the earlier call to "
"get_state_synchronize_rcu() or start_poll_synchronize_rcu(), just return. "
"Otherwise, invoke synchronize_rcu() to wait for a full grace period."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3610
#: kernel/rcu/tree.c:3637 ../../../core-api/kernel-api:402:
#: kernel/rcu/tree_exp.h:1071 kernel/rcu/tree_exp.h:1098
msgid ""
"Yes, this function does not take counter wrap into account. But counter wrap "
"is harmless.  If the counter wraps, we have waited for more than 2 billion "
"grace periods (and way more on a 64-bit system!), so waiting for a couple of "
"additional grace periods should be just fine."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3615
#: ../../../core-api/kernel-api:402: kernel/rcu/tree_exp.h:1076
msgid ""
"This function provides the same memory-ordering guarantees that would be "
"provided by a synchronize_rcu() that was invoked at the call to the function "
"that provided **oldstate** and that returned at the end of this function."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3630
#: ../../../core-api/kernel-api:402: kernel/rcu/tree_exp.h:1091
msgid ""
"value from get_state_synchronize_rcu_full(), "
"start_poll_synchronize_rcu_full(), or "
"start_poll_synchronize_rcu_expedited_full()"
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3631
msgid ""
"If a full RCU grace period has elapsed since the call to "
"get_state_synchronize_rcu_full(), start_poll_synchronize_rcu_full(), or "
"start_poll_synchronize_rcu_expedited_full() from which **rgosp** was "
"obtained, just return.  Otherwise, invoke synchronize_rcu() to wait for a "
"full grace period."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3642
#: ../../../core-api/kernel-api:402: kernel/rcu/tree_exp.h:1103
msgid ""
"This function provides the same memory-ordering guarantees that would be "
"provided by a synchronize_rcu() that was invoked at the call to the function "
"that provided **rgosp** and that returned at the end of this function."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3797
msgid "Wait until all in-flight call_rcu() callbacks complete."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3798
msgid ""
"Note that this primitive does not necessarily wait for an RCU grace period "
"to complete.  For example, if there are no RCU callbacks queued anywhere in "
"the system, then rcu_barrier() is within its rights to return immediately, "
"without waiting for anything, much less an RCU grace period. In fact, "
"rcu_barrier() will normally not result in any RCU grace periods beyond those "
"that were already destined to be executed."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3805
msgid ""
"In kernels built with CONFIG_RCU_LAZY=y, this function also hurries all "
"pending lazy RCU callbacks."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3908
msgid "Do rcu_barrier(), but limit to one per second"
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3909
msgid ""
"This can be thought of as guard rails around rcu_barrier() that permits "
"unrestricted userspace use, at least assuming the hardware's try_cmpxchg() "
"is robust.  There will be at most one call per second to rcu_barrier() "
"system-wide from use of this function, which means that callers might "
"needlessly wait a second or three."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3915
msgid ""
"This is intended for use by test suites to avoid OOM by flushing RCU "
"callbacks from the previous test before starting the next.  See the rcutree."
"do_rcu_barrier module parameter for more information."
msgstr ""

#: ../../../core-api/kernel-api:400: kernel/rcu/tree.c:3919
msgid ""
"Why not simply make rcu_barrier() more scalable?  That might be the eventual "
"endpoint, but let's keep it simple for the time being. Note that the module "
"parameter infrastructure serializes calls to a given .set() function, but "
"should concurrent .set() invocation ever be possible, we are ready!"
msgstr ""

#: ../../../core-api/kernel-api:402: kernel/rcu/tree_exp.h:901
msgid "Brute-force RCU grace period"
msgstr ""

#: ../../../core-api/kernel-api:402: kernel/rcu/tree_exp.h:902
msgid ""
"Wait for an RCU grace period, but expedite it.  The basic idea is to IPI all "
"non-idle non-nohz online CPUs.  The IPI handler checks whether the CPU is in "
"an RCU critical section, and if so, it sets a flag that causes the outermost "
"rcu_read_unlock() to report the quiescent state for RCU-preempt or asks the "
"scheduler for help for RCU-sched.  On the other hand, if the CPU is not in "
"an RCU read-side critical section, the IPI handler reports the quiescent "
"state immediately."
msgstr ""

#: ../../../core-api/kernel-api:402: kernel/rcu/tree_exp.h:910
msgid ""
"Although this is a great improvement over previous expedited "
"implementations, it is still unfriendly to real-time workloads, so is thus "
"not recommended for any sort of common-case code.  In fact, if you are using "
"synchronize_rcu_expedited() in a loop, please restructure your code to batch "
"your updates, and then use a single synchronize_rcu() instead."
msgstr ""

#: ../../../core-api/kernel-api:402: kernel/rcu/tree_exp.h:917
msgid ""
"This has the same semantics as (but is more brutal than) synchronize_rcu()."
msgstr ""

#: ../../../core-api/kernel-api:402: kernel/rcu/tree_exp.h:1011
msgid "Snapshot current RCU state and start expedited grace period"
msgstr ""

#: ../../../core-api/kernel-api:402: kernel/rcu/tree_exp.h:1012
msgid ""
"Returns a cookie to pass to a call to cond_synchronize_rcu(), "
"cond_synchronize_rcu_expedited(), or poll_state_synchronize_rcu(), allowing "
"them to determine whether or not any sort of grace period has elapsed in the "
"meantime.  If the needed expedited grace period is not already slated to "
"start, initiates that grace period."
msgstr ""

#: ../../../core-api/kernel-api:402: kernel/rcu/tree_exp.h:1045
msgid "Take a full snapshot and start expedited grace period"
msgstr ""

#: ../../../core-api/kernel-api:402: kernel/rcu/tree_exp.h:1046
msgid "Place to put snapshot of grace-period state"
msgstr ""

#: ../../../core-api/kernel-api:402: kernel/rcu/tree_exp.h:1047
msgid ""
"Places the normal and expedited grace-period states in rgosp.  This state "
"value can be passed to a later call to cond_synchronize_rcu_full() or "
"poll_state_synchronize_rcu_full() to determine whether or not a grace period "
"(whether normal or expedited) has elapsed in the meantime. If the needed "
"expedited grace period is not already slated to start, initiates that grace "
"period."
msgstr ""

#: ../../../core-api/kernel-api:402: kernel/rcu/tree_exp.h:1063
#: kernel/rcu/tree_exp.h:1090
msgid "Conditionally wait for an expedited RCU grace period"
msgstr ""

#: ../../../core-api/kernel-api:402: kernel/rcu/tree_exp.h:1066
msgid ""
"If any type of full RCU grace period has elapsed since the earlier call to "
"get_state_synchronize_rcu(), start_poll_synchronize_rcu(), or "
"start_poll_synchronize_rcu_expedited(), just return.  Otherwise, invoke "
"synchronize_rcu_expedited() to wait for a full grace period."
msgstr ""

#: ../../../core-api/kernel-api:402: kernel/rcu/tree_exp.h:1092
msgid ""
"If a full RCU grace period has elapsed since the call to "
"get_state_synchronize_rcu_full(), start_poll_synchronize_rcu_full(), or "
"start_poll_synchronize_rcu_expedited_full() from which **rgosp** was "
"obtained, just return.  Otherwise, invoke synchronize_rcu_expedited() to "
"wait for a full grace period."
msgstr ""

#: ../../../core-api/kernel-api:404: kernel/rcu/update.c:68
msgid "might we be in RCU-sched read-side critical section?"
msgstr ""

#: ../../../core-api/kernel-api:404: kernel/rcu/update.c:74
msgid "``bool *ret``"
msgstr ""

#: ../../../core-api/kernel-api:404: kernel/rcu/update.c:69
msgid "Best guess answer if lockdep cannot be relied on"
msgstr ""

#: ../../../core-api/kernel-api:404: kernel/rcu/update.c:70
msgid ""
"Returns true if lockdep must be ignored, in which case ``*ret`` contains the "
"best guess described below.  Otherwise returns false, in which case ``*ret`` "
"tells the caller nothing and the caller should instead consult lockdep."
msgstr ""

#: ../../../core-api/kernel-api:404: kernel/rcu/update.c:75
msgid ""
"If CONFIG_DEBUG_LOCK_ALLOC is selected, set ``*ret`` to nonzero iff in an "
"RCU-sched read-side critical section.  In absence of "
"CONFIG_DEBUG_LOCK_ALLOC, this assumes we are in an RCU-sched read-side "
"critical section unless it can prove otherwise.  Note that disabling of "
"preemption (including disabling irqs) counts as an RCU-sched read-side "
"critical section.  This is useful for debug checks in functions that "
"required that they be called within an RCU-sched read-side critical section."
msgstr ""

#: ../../../core-api/kernel-api:404: kernel/rcu/update.c:84
msgid ""
"Check debug_lockdep_rcu_enabled() to prevent false positives during boot and "
"while lockdep is disabled."
msgstr ""

#: ../../../core-api/kernel-api:404: kernel/rcu/update.c:87
msgid ""
"Note that if the CPU is in the idle loop from an RCU point of view (ie: that "
"we are in the section between ct_idle_enter() and ct_idle_exit()) then "
"rcu_read_lock_held() sets ``*ret`` to false even if the CPU did an "
"rcu_read_lock().  The reason for this is that RCU ignores CPUs that are in "
"such a section, considering these as in extended quiescent state, so such a "
"CPU is effectively never in an RCU read-side critical section regardless of "
"what RCU primitives it invokes.  This state of affairs is required --- we "
"need to keep an RCU-free window in idle where the CPU may possibly enter "
"into low power mode. This way we can notice an extended quiescent state to "
"other CPUs that started a grace period. Otherwise we would delay any grace "
"period as long as we run in the idle task."
msgstr ""

#: ../../../core-api/kernel-api:404: kernel/rcu/update.c:99
msgid ""
"Similarly, we avoid claiming an RCU read lock held if the current CPU is "
"offline."
msgstr ""

#: ../../../core-api/kernel-api:404: kernel/rcu/update.c:161
msgid "Make future async RCU callbacks not lazy."
msgstr ""

#: ../../../core-api/kernel-api:404: kernel/rcu/update.c:162
msgid ""
"After a call to this function, future calls to call_rcu() will be processed "
"in a timely fashion."
msgstr ""

#: ../../../core-api/kernel-api:404: kernel/rcu/update.c:174
msgid "Make future async RCU callbacks lazy."
msgstr ""

#: ../../../core-api/kernel-api:404: kernel/rcu/update.c:175
msgid ""
"After a call to this function, future calls to call_rcu() will be processed "
"in a lazy fashion."
msgstr ""

#: ../../../core-api/kernel-api:404: kernel/rcu/update.c:201
msgid "Expedite future RCU grace periods"
msgstr ""

#: ../../../core-api/kernel-api:404: kernel/rcu/update.c:202
msgid ""
"After a call to this function, future calls to synchronize_rcu() and friends "
"act as the corresponding synchronize_rcu_expedited() function had instead "
"been called."
msgstr ""

#: ../../../core-api/kernel-api:404: kernel/rcu/update.c:214
msgid "Cancel prior rcu_expedite_gp() invocation"
msgstr ""

#: ../../../core-api/kernel-api:404: kernel/rcu/update.c:215
msgid ""
"Undo a prior call to rcu_expedite_gp().  If all prior calls to "
"rcu_expedite_gp() are undone by a subsequent call to rcu_unexpedite_gp(), "
"and if the rcu_expedited sysfs/boot parameter is not set, then all "
"subsequent calls to synchronize_rcu() and friends will return to their "
"normal non-expedited behavior."
msgstr ""

#: ../../../core-api/kernel-api:404: kernel/rcu/update.c:326
msgid "might we be in RCU read-side critical section?"
msgstr ""

#: ../../../core-api/kernel-api:404: kernel/rcu/update.c:327
msgid ""
"If CONFIG_DEBUG_LOCK_ALLOC is selected, returns nonzero iff in an RCU read-"
"side critical section.  In absence of CONFIG_DEBUG_LOCK_ALLOC, this assumes "
"we are in an RCU read-side critical section unless it can prove otherwise.  "
"This is useful for debug checks in functions that require that they be "
"called within an RCU read-side critical section."
msgstr ""

#: ../../../core-api/kernel-api:404: kernel/rcu/update.c:333
#: ../../../core-api/kernel-api:406: include/linux/srcu.h:135
msgid ""
"Checks debug_lockdep_rcu_enabled() to prevent false positives during boot "
"and while lockdep is disabled."
msgstr ""

#: ../../../core-api/kernel-api:404: kernel/rcu/update.c:336
msgid ""
"Note that rcu_read_lock() and the matching rcu_read_unlock() must occur in "
"the same context, for example, it is illegal to invoke rcu_read_unlock() in "
"process context if the matching rcu_read_lock() was invoked from within an "
"irq handler."
msgstr ""

#: ../../../core-api/kernel-api:404: kernel/rcu/update.c:341
msgid ""
"Note that rcu_read_lock() is disallowed if the CPU is either idle or offline "
"from an RCU perspective, so check for those as well."
msgstr ""

#: ../../../core-api/kernel-api:404: kernel/rcu/update.c:356
msgid "might we be in RCU-bh read-side critical section?"
msgstr ""

#: ../../../core-api/kernel-api:404: kernel/rcu/update.c:357
msgid ""
"Check for bottom half being disabled, which covers both the CONFIG_PROVE_RCU "
"and not cases.  Note that if someone uses rcu_read_lock_bh(), but then later "
"enables BH, lockdep (if enabled) will show the situation.  This is useful "
"for debug checks in functions that require that they be called within an RCU "
"read-side critical section."
msgstr ""

#: ../../../core-api/kernel-api:404: kernel/rcu/update.c:364
msgid ""
"Check debug_lockdep_rcu_enabled() to prevent false positives during boot."
msgstr ""

#: ../../../core-api/kernel-api:404: kernel/rcu/update.c:366
msgid ""
"Note that rcu_read_lock_bh() is disallowed if the CPU is either idle or "
"offline from an RCU perspective, so check for those as well."
msgstr ""

#: ../../../core-api/kernel-api:404: kernel/rcu/update.c:397
msgid "Callback function to awaken a task after grace period"
msgstr ""

#: ../../../core-api/kernel-api:404: kernel/rcu/update.c:398
msgid "Pointer to rcu_head member within rcu_synchronize structure"
msgstr ""

#: ../../../core-api/kernel-api:404: kernel/rcu/update.c:399
msgid "Awaken the corresponding task now that a grace period has elapsed."
msgstr ""

#: ../../../core-api/kernel-api:404: kernel/rcu/update.c:476
msgid "initialize on-stack rcu_head for debugobjects"
msgstr ""

#: ../../../core-api/kernel-api:404: kernel/rcu/update.c:477
#: kernel/rcu/update.c:493
msgid "pointer to rcu_head structure to be initialized"
msgstr ""

#: ../../../core-api/kernel-api:404: kernel/rcu/update.c:478
msgid ""
"This function informs debugobjects of a new rcu_head structure that has been "
"allocated as an auto variable on the stack.  This function is not required "
"for rcu_head structures that are statically defined or that are dynamically "
"allocated on the heap.  This function has no effect for !"
"CONFIG_DEBUG_OBJECTS_RCU_HEAD kernel builds."
msgstr ""

#: ../../../core-api/kernel-api:404: kernel/rcu/update.c:492
msgid "destroy on-stack rcu_head for debugobjects"
msgstr ""

#: ../../../core-api/kernel-api:404: kernel/rcu/update.c:494
msgid ""
"This function informs debugobjects that an on-stack rcu_head structure is "
"about to go out of scope.  As with init_rcu_head_on_stack(), this function "
"is not required for rcu_head structures that are statically defined or that "
"are dynamically allocated on the heap.  Also as with "
"init_rcu_head_on_stack(), this function has no effect for !"
"CONFIG_DEBUG_OBJECTS_RCU_HEAD kernel builds."
msgstr ""

#: ../../../core-api/kernel-api:404: kernel/rcu/update.c:570
#: ../../../core-api/kernel-api:406: include/linux/srcu.h:74
msgid "Return a pre-completed polled state cookie"
msgstr ""

#: ../../../core-api/kernel-api:404: kernel/rcu/update.c:571
msgid ""
"Returns a value that will always be treated by functions like "
"poll_state_synchronize_rcu() as a cookie whose grace period has already "
"completed."
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:75
msgid ""
"Returns a value that poll_state_synchronize_srcu() will always treat as a "
"cookie whose grace period has already completed."
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:96
msgid ""
"The two old-state values must have been obtained from either "
"get_state_synchronize_srcu(), start_poll_synchronize_srcu(), or "
"get_completed_synchronize_srcu().  Returns **true** if the two values are "
"identical and **false** otherwise.  This allows structures whose lifetimes "
"are tracked by old-state values to push these values to a list header, "
"allowing those structures to be slightly smaller."
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:128
msgid "might we be in SRCU read-side critical section?"
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:134
msgid "``const struct srcu_struct *ssp``"
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:129
msgid "The srcu_struct structure to check"
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:130
msgid ""
"If CONFIG_DEBUG_LOCK_ALLOC is selected, returns nonzero iff in an SRCU read-"
"side critical section.  In absence of CONFIG_DEBUG_LOCK_ALLOC, this assumes "
"we are in an SRCU read-side critical section unless it can prove otherwise."
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:138
msgid ""
"Note that SRCU is based on its own statemachine and it doesn't relies on "
"normal RCU, it can be called from the CPU which is in the idle loop from an "
"RCU point of view or offline."
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:193
msgid "``srcu_dereference_check (p, ssp, c)``"
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:191
#: include/linux/srcu.h:207
msgid "fetch SRCU-protected pointer for later dereferencing"
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:192
#: include/linux/srcu.h:208 include/linux/srcu.h:220
msgid "the pointer to fetch and protect for later dereferencing"
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:194
#: include/linux/srcu.h:210 include/linux/srcu.h:222
msgid "``ssp``"
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:193
#: include/linux/srcu.h:209 include/linux/srcu.h:221
msgid ""
"pointer to the srcu_struct, which is used to check that we really are in an "
"SRCU read-side critical section."
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:195
msgid "condition to check for update-side use"
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:196
msgid ""
"If PROVE_RCU is enabled, invoking this outside of an RCU read-side critical "
"section will result in an RCU-lockdep splat, unless **c** evaluates to 1.  "
"The **c** argument will normally be a logical expression containing "
"lockdep_is_held() calls."
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:209
msgid "``srcu_dereference (p, ssp)``"
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:211
msgid ""
"Makes rcu_dereference_check() do the dirty work.  If PROVE_RCU is enabled, "
"invoking this outside of an RCU read-side critical section will result in an "
"RCU-lockdep splat."
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:221
msgid "``srcu_dereference_notrace (p, ssp)``"
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:219
msgid "no tracing and no lockdep calls from here"
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:227
#: include/linux/srcu.h:258 include/linux/srcu.h:300 include/linux/srcu.h:319
#: include/linux/srcu.h:351
msgid "register a new reader for an SRCU-protected structure."
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:233
#: include/linux/srcu.h:264 include/linux/srcu.h:306 include/linux/srcu.h:325
#: include/linux/srcu.h:357 include/linux/srcu.h:386 include/linux/srcu.h:402
#: include/linux/srcu.h:429 include/linux/srcu.h:446 include/linux/srcu.h:470
#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:308
#: kernel/rcu/srcutree.c:577 kernel/rcu/srcutree.c:678
#: kernel/rcu/srcutree.c:1411 kernel/rcu/srcutree.c:1474
#: kernel/rcu/srcutree.c:1490 kernel/rcu/srcutree.c:1548
#: kernel/rcu/srcutree.c:1567 kernel/rcu/srcutree.c:1583
#: kernel/rcu/srcutree.c:1657 kernel/rcu/srcutree.c:1698
msgid "``struct srcu_struct *ssp``"
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:228
#: include/linux/srcu.h:259 include/linux/srcu.h:301 include/linux/srcu.h:320
#: include/linux/srcu.h:352
msgid "srcu_struct in which to register the new reader."
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:229
msgid ""
"Enter an SRCU read-side critical section.  Note that SRCU read-side critical "
"sections may be nested.  However, it is illegal to call anything that waits "
"on an SRCU grace period for the same srcu_struct, whether directly or "
"indirectly.  Please note that one way to indirectly wait on an SRCU grace "
"period is to acquire a mutex that is held elsewhere while calling "
"synchronize_srcu() or synchronize_srcu_expedited()."
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:237
msgid ""
"The return value from srcu_read_lock() is guaranteed to be non-negative.  "
"This value must be passed unaltered to the matching srcu_read_unlock().  "
"Note that srcu_read_lock() and the matching srcu_read_unlock() must occur in "
"the same context, for example, it is illegal to invoke srcu_read_unlock() in "
"an irq handler if the matching srcu_read_lock() was invoked in process "
"context.  Or, for that matter to invoke srcu_read_unlock() from one task and "
"the matching srcu_read_lock() from another."
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:260
msgid ""
"Enter an SRCU read-side critical section, but for a light-weight smp_mb()-"
"free reader.  See srcu_read_lock() for more information."
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:263
msgid ""
"If srcu_read_lock_fast() is ever used on an srcu_struct structure, then none "
"of the other flavors may be used, whether before, during, or after.  Note "
"that grace-period auto-expediting is disabled for _fast srcu_struct "
"structures because auto-expedited grace periods invoke "
"synchronize_rcu_expedited(), IPIs and all."
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:269
msgid ""
"Note that srcu_read_lock_fast() can be invoked only from those contexts "
"where RCU is watching, that is, from contexts where it would be legal to "
"invoke rcu_read_lock().  Otherwise, lockdep will complain."
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:302
msgid ""
"Enter a semaphore-like SRCU read-side critical section, but for a light-"
"weight smp_mb()-free reader.  See srcu_read_lock_fast() and srcu_down_read() "
"for more information."
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:306
msgid ""
"The same srcu_struct may be used concurrently by srcu_down_read_fast() and "
"srcu_read_lock_fast()."
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:321
msgid ""
"Enter an SRCU read-side critical section, but in an NMI-safe manner. See "
"srcu_read_lock() for more information."
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:324
msgid ""
"If srcu_read_lock_nmisafe() is ever used on an srcu_struct structure, then "
"none of the other flavors may be used, whether before, during, or after."
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:353
msgid ""
"Enter a semaphore-like SRCU read-side critical section.  Note that SRCU read-"
"side critical sections may be nested.  However, it is illegal to call "
"anything that waits on an SRCU grace period for the same srcu_struct, "
"whether directly or indirectly.  Please note that one way to indirectly wait "
"on an SRCU grace period is to acquire a mutex that is held elsewhere while "
"calling synchronize_srcu() or synchronize_srcu_expedited().  But if you want "
"lockdep to help you keep this stuff straight, you should instead use "
"srcu_read_lock()."
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:362
msgid ""
"The semaphore-like nature of srcu_down_read() means that the matching "
"srcu_up_read() can be invoked from some other context, for example, from "
"some other task or from an irq handler.  However, neither srcu_down_read() "
"nor srcu_up_read() may be invoked from an NMI handler."
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:367
msgid ""
"Calls to srcu_down_read() may be nested, similar to the manner in which "
"calls to down_read() may be nested.  The same srcu_struct may be used "
"concurrently by srcu_down_read() and srcu_read_lock()."
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:380
#: include/linux/srcu.h:396 include/linux/srcu.h:423 include/linux/srcu.h:440
#: include/linux/srcu.h:464
msgid "unregister a old reader from an SRCU-protected structure."
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:381
#: include/linux/srcu.h:397 include/linux/srcu.h:424 include/linux/srcu.h:441
#: include/linux/srcu.h:465
msgid "srcu_struct in which to unregister the old reader."
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:383
#: include/linux/srcu.h:443 include/linux/srcu.h:467
msgid "``int idx``"
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:382
#: include/linux/srcu.h:466
msgid "return value from corresponding srcu_read_lock()."
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:383
msgid "Exit an SRCU read-side critical section."
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:399
#: include/linux/srcu.h:426
msgid "``struct srcu_ctr __percpu *scp``"
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:398
#: include/linux/srcu.h:425
msgid "return value from corresponding srcu_read_lock_fast()."
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:399
msgid "Exit a light-weight SRCU read-side critical section."
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:426
msgid ""
"Exit an SRCU read-side critical section, but not necessarily from the same "
"context as the maching srcu_down_read_fast()."
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:442
msgid "return value from corresponding srcu_read_lock_nmisafe()."
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:443
msgid "Exit an SRCU read-side critical section, but in an NMI-safe manner."
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:467
msgid ""
"Exit an SRCU read-side critical section, but not necessarily from the same "
"context as the maching srcu_down_read()."
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:481
msgid "ensure full ordering after srcu_read_unlock"
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:482
msgid "Converts the preceding srcu_read_unlock into a two-way memory barrier."
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:484
msgid ""
"Call this after srcu_read_unlock, to guarantee that all memory operations "
"that occur after smp_mb__after_srcu_read_unlock will appear to happen after "
"the preceding srcu_read_unlock."
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:495
msgid "ensure full ordering after srcu_read_lock"
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:496
msgid "Converts the preceding srcu_read_lock into a two-way memory barrier."
msgstr ""

#: ../../../core-api/kernel-api:406: include/linux/srcu.h:498
msgid ""
"Call this after srcu_read_lock, to guarantee that all memory operations that "
"occur after smp_mb__after_srcu_read_lock will appear to happen after the "
"preceding srcu_read_lock."
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:302
msgid "initialize a sleep-RCU structure"
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:303
msgid "structure to initialize."
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:304
msgid ""
"Must invoke this on a given srcu_struct before passing that srcu_struct to "
"any other function.  Each srcu_struct represents a separate domain of SRCU "
"protection."
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:571
msgid "returns true if there are readers. and false otherwise"
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:573
msgid "which srcu_struct to count active readers (holding srcu_read_lock)."
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:574
msgid ""
"Note that this is not an atomic primitive, and can therefore suffer severe "
"errors when invoked on an active srcu_struct.  That said, it can be useful "
"as an error check at cleanup time."
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:672
msgid "deconstruct a sleep-RCU structure"
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:673
msgid "structure to clean up."
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:674
msgid ""
"Must invoke this after you are finished using a given srcu_struct that was "
"initialized via init_srcu_struct(), else you leak memory."
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:1405
msgid "Queue a callback for invocation after an SRCU grace period"
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:1406
msgid "srcu_struct in queue the callback"
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:1407
msgid "structure to be used for queueing the SRCU callback."
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:1408
msgid "function to be invoked after the SRCU grace period"
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:1409
msgid ""
"The callback function will be invoked some time after a full SRCU grace "
"period elapses, in other words after all pre-existing SRCU read-side "
"critical sections have completed.  However, the callback function might well "
"execute concurrently with other SRCU read-side critical sections that "
"started after call_srcu() was invoked.  SRCU read-side critical sections are "
"delimited by srcu_read_lock() and srcu_read_unlock(), and may be nested."
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:1417
msgid ""
"The callback will be invoked from process context, but with bh disabled.  "
"The callback function must therefore be fast and must not block."
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:1421
#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:1191
#: kernel/rcu/tasks.h:2012
msgid ""
"See the description of call_rcu() for more detailed information on memory "
"ordering guarantees."
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:1468
msgid "Brute-force SRCU grace period"
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:1469
#: kernel/rcu/srcutree.c:1485
msgid "srcu_struct with which to synchronize."
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:1470
msgid ""
"Wait for an SRCU grace period to elapse, but be more aggressive about "
"spinning rather than blocking when waiting."
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:1473
msgid ""
"Note that synchronize_srcu_expedited() has the same deadlock and memory-"
"ordering properties as does synchronize_srcu()."
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:1484
msgid "wait for prior SRCU read-side critical-section completion"
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:1486
msgid ""
"Wait for the count to drain to zero of both indexes. To avoid the possible "
"starvation of synchronize_srcu(), it waits for the count of the index=!(ssp-"
">srcu_ctrp - :c:type:`ssp->sda <ssp>`->srcu_ctrs[0]) to drain to zero at "
"first, and then flip the ->srcu_ctrp and wait for the count of the other "
"index."
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:1492
msgid "Can block; must be called from process context."
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:1494
msgid ""
"Note that it is illegal to call synchronize_srcu() from the corresponding "
"SRCU read-side critical section; doing so will result in deadlock. However, "
"it is perfectly legal to call synchronize_srcu() on one srcu_struct from "
"some other srcu_struct's read-side critical section, as long as the "
"resulting graph of srcu_structs is acyclic."
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:1500
msgid ""
"There are memory-ordering constraints implied by synchronize_srcu(). On "
"systems with more than one CPU, when synchronize_srcu() returns, each CPU is "
"guaranteed to have executed a full memory barrier since the end of its last "
"corresponding SRCU read-side critical section whose beginning preceded the "
"call to synchronize_srcu().  In addition, each CPU having an SRCU read-side "
"critical section that extends beyond the return from synchronize_srcu() is "
"guaranteed to have executed a full memory barrier after the beginning of "
"synchronize_srcu() and before the beginning of that SRCU read-side critical "
"section.  Note that these guarantees include CPUs that are offline, idle, or "
"executing in user mode, as well as CPUs that are executing in the kernel."
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:1512
msgid ""
"Furthermore, if CPU A invoked synchronize_srcu(), which returned to its "
"caller on CPU B, then both CPU A and CPU B are guaranteed to have executed a "
"full memory barrier during the execution of synchronize_srcu().  This "
"guarantee applies even if CPU A and CPU B are the same CPU, but again only "
"if the system has more than one CPU."
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:1518
msgid ""
"Of course, these memory-ordering guarantees apply only when "
"synchronize_srcu(), srcu_read_lock(), and srcu_read_unlock() are passed the "
"same srcu_struct structure."
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:1522
msgid ""
"Implementation of these memory-ordering guarantees is similar to that of "
"synchronize_rcu()."
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:1525
msgid ""
"If SRCU is likely idle as determined by srcu_should_expedite(), expedite the "
"first request.  This semantic was provided by Classic SRCU, and is relied "
"upon by its users, so TREE SRCU must also provide it. Note that detecting "
"idleness is heuristic and subject to both false positives and negatives."
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:1542
msgid "Provide an end-of-grace-period cookie"
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:1543
#: kernel/rcu/srcutree.c:1562 kernel/rcu/srcutree.c:1578
msgid "srcu_struct to provide cookie for."
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:1544
msgid ""
"This function returns a cookie that can be passed to "
"poll_state_synchronize_srcu(), which will return true if a full grace period "
"has elapsed in the meantime.  It is the caller's responsibility to make sure "
"that grace period happens, for example, by invoking call_srcu() after return "
"from get_state_synchronize_srcu()."
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:1561
msgid "Provide cookie and start grace period"
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:1563
msgid ""
"This function returns a cookie that can be passed to "
"poll_state_synchronize_srcu(), which will return true if a full grace period "
"has elapsed in the meantime.  Unlike get_state_synchronize_srcu(), this "
"function also ensures that any needed SRCU grace period will be started.  "
"This convenience does come at a cost in terms of CPU overhead."
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:1577
msgid "Has cookie's grace period ended?"
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:1580
msgid "``unsigned long cookie``"
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:1579
msgid ""
"Return value from get_state_synchronize_srcu() or "
"start_poll_synchronize_srcu()."
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:1580
msgid ""
"This function takes the cookie that was returned from either "
"get_state_synchronize_srcu() or start_poll_synchronize_srcu(), and returns "
"**true** if an SRCU grace period elapsed since the time that the cookie was "
"created."
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:1585
msgid ""
"Because cookies are finite in size, wrapping/overflow is possible. This is "
"more pronounced on 32-bit systems where cookies are 32 bits, where in theory "
"wrapping could happen in about 14 hours assuming 25-microsecond expedited "
"SRCU grace periods.  However, a more likely overflow lower bound is on the "
"order of 24 days in the case of one-millisecond SRCU grace periods.  Of "
"course, wrapping in a 64-bit system requires geologic timespans, as in more "
"than seven million years even for expedited SRCU grace periods."
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:1594
msgid ""
"Wrapping/overflow is much more of an issue for CONFIG_SMP=n systems that "
"also have CONFIG_PREEMPTION=n, which selects Tiny SRCU.  This uses a 16-bit "
"cookie, which rcutorture routinely wraps in a matter of a few minutes.  If "
"this proves to be a problem, this counter will be expanded to the same size "
"as for Tree SRCU."
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:1651
msgid "Wait until all in-flight call_srcu() callbacks complete."
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:1652
msgid "srcu_struct on which to wait for in-flight callbacks."
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:1692
msgid "return batches completed."
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:1693
msgid "srcu_struct on which to report batch completion."
msgstr ""

#: ../../../core-api/kernel-api:408: kernel/rcu/srcutree.c:1694
msgid ""
"Report the number of batches, correlated with, but not necessarily precisely "
"the same as, the number of grace periods that have elapsed."
msgstr ""

#: ../../../core-api/kernel-api:410: include/linux/rculist_bl.h:28
#: ../../../core-api/kernel-api:412: include/linux/rculist.h:550
#: ../../../core-api/kernel-api:414: include/linux/rculist_nulls.h:56
msgid "deletes entry from hash list without re-initialization"
msgstr ""

#: ../../../core-api/kernel-api:410: include/linux/rculist_bl.h:34
#: include/linux/rculist_bl.h:59
msgid "``struct hlist_bl_node *n``"
msgstr ""

#: ../../../core-api/kernel-api:410: include/linux/rculist_bl.h:29
#: ../../../core-api/kernel-api:412: include/linux/rculist.h:217
#: include/linux/rculist.h:551 ../../../core-api/kernel-api:414:
#: include/linux/rculist_nulls.h:15 include/linux/rculist_nulls.h:57
msgid "the element to delete from the hash list."
msgstr ""

#: ../../../core-api/kernel-api:410: include/linux/rculist_bl.h:31
msgid ""
"hlist_bl_unhashed() on entry does not return true after this, the entry is "
"in an undefined state. It is useful for RCU based lockfree traversal."
msgstr ""

#: ../../../core-api/kernel-api:410: include/linux/rculist_bl.h:35
#: ../../../core-api/kernel-api:412: include/linux/rculist.h:557
#: ../../../core-api/kernel-api:414: include/linux/rculist_nulls.h:63
msgid ""
"In particular, it means that we can not poison the forward pointers that may "
"still be used for walking the hash list."
msgstr ""

#: ../../../core-api/kernel-api:410: include/linux/rculist_bl.h:38
msgid ""
"The caller must take whatever precautions are necessary (such as holding "
"appropriate locks) to avoid racing with another list-mutation primitive, "
"such as hlist_bl_add_head_rcu() or hlist_bl_del_rcu(), running on this same "
"list. However, it is perfectly legal to run concurrently with the _rcu list-"
"traversal primitives, such as hlist_bl_for_each_entry()."
msgstr ""

#: ../../../core-api/kernel-api:410: include/linux/rculist_bl.h:54
#: ../../../core-api/kernel-api:412: include/linux/rculist.h:626
#: include/linux/rculist.h:657 ../../../core-api/kernel-api:414:
#: include/linux/rculist_nulls.h:82 include/linux/rculist_nulls.h:113
msgid "the element to add to the hash list."
msgstr ""

#: ../../../core-api/kernel-api:410: include/linux/rculist_bl.h:56
msgid "``struct hlist_bl_head *h``"
msgstr ""

#: ../../../core-api/kernel-api:410: include/linux/rculist_bl.h:55
#: ../../../core-api/kernel-api:412: include/linux/rculist.h:627
#: include/linux/rculist.h:658 ../../../core-api/kernel-api:414:
#: include/linux/rculist_nulls.h:83 include/linux/rculist_nulls.h:114
msgid "the list to add to."
msgstr ""

#: ../../../core-api/kernel-api:410: include/linux/rculist_bl.h:57
msgid ""
"Adds the specified element to the specified hlist_bl, while permitting "
"racing traversals."
msgstr ""

#: ../../../core-api/kernel-api:410: include/linux/rculist_bl.h:60
msgid ""
"The caller must take whatever precautions are necessary (such as holding "
"appropriate locks) to avoid racing with another list-mutation primitive, "
"such as hlist_bl_add_head_rcu() or hlist_bl_del_rcu(), running on this same "
"list. However, it is perfectly legal to run concurrently with the _rcu list-"
"traversal primitives, such as hlist_bl_for_each_entry_rcu(), used to prevent "
"memory-consistency problems on Alpha CPUs.  Regardless of the type of CPU, "
"the list-traversal primitive must be guarded by rcu_read_lock()."
msgstr ""

#: ../../../core-api/kernel-api:410: include/linux/rculist_bl.h:90
msgid "``hlist_bl_for_each_entry_rcu (tpos, pos, head, member)``"
msgstr ""

#: ../../../core-api/kernel-api:410: include/linux/rculist_bl.h:88
#: ../../../core-api/kernel-api:412: include/linux/rculist.h:436
#: include/linux/rculist.h:453 include/linux/rculist.h:488
#: include/linux/rculist.h:753 include/linux/rculist.h:772
#: include/linux/rculist.h:813 ../../../core-api/kernel-api:414:
#: include/linux/rculist_nulls.h:156
msgid "iterate over rcu list of given type"
msgstr ""

#: ../../../core-api/kernel-api:410: include/linux/rculist_bl.h:94
#: ../../../core-api/kernel-api:414: include/linux/rculist_nulls.h:162
#: include/linux/rculist_nulls.h:181
msgid "``tpos``"
msgstr ""

#: ../../../core-api/kernel-api:410: include/linux/rculist_bl.h:89
#: ../../../core-api/kernel-api:412: include/linux/rculist.h:437
#: include/linux/rculist.h:454 include/linux/rculist.h:489
#: include/linux/rculist.h:507 include/linux/rculist.h:530
#: include/linux/rculist.h:754 include/linux/rculist.h:773
#: include/linux/rculist.h:794 include/linux/rculist.h:814
#: include/linux/rculist.h:831 include/linux/rculist.h:843
#: include/linux/rculist.h:855 ../../../core-api/kernel-api:414:
#: include/linux/rculist_nulls.h:157 include/linux/rculist_nulls.h:177
msgid "the type * to use as a loop cursor."
msgstr ""

#: ../../../core-api/kernel-api:410: include/linux/rculist_bl.h:91
#: ../../../core-api/kernel-api:412: include/linux/rculist.h:52
#: include/linux/rculist.h:442 include/linux/rculist.h:459
#: include/linux/rculist.h:494 include/linux/rculist.h:512
#: include/linux/rculist.h:535 include/linux/rculist.h:759
#: include/linux/rculist.h:778 include/linux/rculist.h:799
#: include/linux/rculist.h:819 include/linux/rculist.h:836
#: include/linux/rculist.h:848 include/linux/rculist.h:860
#: ../../../core-api/kernel-api:414: include/linux/rculist_nulls.h:159
#: include/linux/rculist_nulls.h:179
msgid "``pos``"
msgstr ""

#: ../../../core-api/kernel-api:410: include/linux/rculist_bl.h:90
msgid ""
"the :c:type:`struct hlist_bl_node <hlist_bl_node>` to use as a loop cursor."
msgstr ""

#: ../../../core-api/kernel-api:410: include/linux/rculist_bl.h:92
#: ../../../core-api/kernel-api:412: include/linux/rculist.h:49
#: include/linux/rculist.h:62 include/linux/rculist.h:421
#: include/linux/rculist.h:439 include/linux/rculist.h:456
#: include/linux/rculist.h:491 include/linux/rculist.h:509
#: include/linux/rculist.h:532 include/linux/rculist.h:756
#: include/linux/rculist.h:775 include/linux/rculist.h:796
#: include/linux/rculist.h:816 ../../../core-api/kernel-api:414:
#: include/linux/rculist_nulls.h:48 include/linux/rculist_nulls.h:160
#: include/linux/rculist_nulls.h:180
msgid "``head``"
msgstr ""

#: ../../../core-api/kernel-api:410: include/linux/rculist_bl.h:91
#: ../../../core-api/kernel-api:412: include/linux/rculist.h:48
#: include/linux/rculist.h:438 include/linux/rculist.h:455
#: include/linux/rculist.h:490 include/linux/rculist.h:508
#: include/linux/rculist.h:531 include/linux/rculist.h:755
#: include/linux/rculist.h:774 include/linux/rculist.h:795
#: include/linux/rculist.h:815
msgid "the head for your list."
msgstr ""

#: ../../../core-api/kernel-api:410: include/linux/rculist_bl.h:92
msgid "the name of the hlist_bl_node within the struct."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:48
msgid "``list_for_each_rcu (pos, head)``"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:46
msgid "Iterate over a list in an RCU-safe fashion"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:47
msgid "the :c:type:`struct list_head <list_head>` to use as a loop cursor."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:58
msgid "``list_tail_rcu (head)``"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:56
msgid "returns the prev pointer of the head of the list"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:57
msgid "the head of the list"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:59
msgid ""
"This should only be used with the list header, and even then only if "
"list_del() and similar primitives are not also used on the list header."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:110
#: include/linux/rculist.h:131
msgid "add a new entry to rcu-protected list"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:116
#: include/linux/rculist.h:137 include/linux/rculist.h:247
msgid "``struct list_head *new``"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:111
#: include/linux/rculist.h:132
msgid "new entry to be added"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:112
msgid "list head to add it after"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:113
msgid ""
"Insert a new entry after the specified head. This is good for implementing "
"stacks."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:116
msgid ""
"The caller must take whatever precautions are necessary (such as holding "
"appropriate locks) to avoid racing with another list-mutation primitive, "
"such as list_add_rcu() or list_del_rcu(), running on this same list. "
"However, it is perfectly legal to run concurrently with the _rcu list-"
"traversal primitives, such as list_for_each_entry_rcu()."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:133
msgid "list head to add it before"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:134
msgid ""
"Insert a new entry before the specified head. This is useful for "
"implementing queues."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:137
msgid ""
"The caller must take whatever precautions are necessary (such as holding "
"appropriate locks) to avoid racing with another list-mutation primitive, "
"such as list_add_tail_rcu() or list_del_rcu(), running on this same list. "
"However, it is perfectly legal to run concurrently with the _rcu list-"
"traversal primitives, such as list_for_each_entry_rcu()."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:153
#: include/linux/rculist.h:183
msgid "deletes entry from list without re-initialization"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:159
#: include/linux/rculist.h:189
msgid "``struct list_head *entry``"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:154
#: include/linux/rculist.h:184
msgid "the element to delete from the list."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:156
msgid ""
"list_empty() on entry does not return true after this, the entry is in an "
"undefined state. It is useful for RCU based lockfree traversal."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:160
msgid ""
"In particular, it means that we can not poison the forward pointers that may "
"still be used for walking the list."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:163
msgid ""
"The caller must take whatever precautions are necessary (such as holding "
"appropriate locks) to avoid racing with another list-mutation primitive, "
"such as list_del_rcu() or list_add_rcu(), running on this same list. "
"However, it is perfectly legal to run concurrently with the _rcu list-"
"traversal primitives, such as list_for_each_entry_rcu()."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:171
#: include/linux/rculist.h:205
msgid ""
"Note that the caller is not permitted to immediately free the newly deleted "
"entry.  Instead, either synchronize_rcu() or call_rcu() must be used to "
"defer freeing until an RCU grace period has elapsed."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:185
msgid ""
"In contrast to list_del_rcu() doesn't poison the prev pointer thus allowing "
"backwards traversal via list_bidir_prev_rcu()."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:189
msgid ""
"list_empty() on entry does not return true after this because the entry is "
"in a special undefined state that permits RCU-based lockfree reverse "
"traversal. In particular this means that we can not poison the forward and "
"backwards pointers that may still be used for walking the list."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:195
msgid ""
"The caller must take whatever precautions are necessary (such as holding "
"appropriate locks) to avoid racing with another list-mutation primitive, "
"such as list_bidir_del_rcu() or list_add_rcu(), running on this same list. "
"However, it is perfectly legal to run concurrently with the _rcu list-"
"traversal primitives, such as list_for_each_entry_rcu()."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:202
msgid ""
"Note that list_del_rcu() and list_bidir_del_rcu() must not be used on the "
"same list."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:216
#: ../../../core-api/kernel-api:414: include/linux/rculist_nulls.h:14
msgid "deletes entry from hash list with re-initialization"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:222
#: include/linux/rculist.h:556 include/linux/rculist.h:631
#: include/linux/rculist.h:662 include/linux/rculist.h:699
#: include/linux/rculist.h:726
msgid "``struct hlist_node *n``"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:219
msgid ""
"list_unhashed() on the node return true after this. It is useful for RCU "
"based read lockfree traversal if the writer side must know if the list entry "
"is still hashed or already unhashed."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:223
#: ../../../core-api/kernel-api:414: include/linux/rculist_nulls.h:21
msgid ""
"In particular, it means that we can not poison the forward pointers that may "
"still be used for walking the hash list and we can only zero the pprev "
"pointer so list_unhashed() will return true after this."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:228
msgid ""
"The caller must take whatever precautions are necessary (such as holding "
"appropriate locks) to avoid racing with another list-mutation primitive, "
"such as hlist_add_head_rcu() or hlist_del_rcu(), running on this same list.  "
"However, it is perfectly legal to run concurrently with the _rcu list-"
"traversal primitives, such as hlist_for_each_entry_rcu()."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:244
#: include/linux/rculist.h:575
msgid "replace old entry by new one"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:250
msgid "``struct list_head *old``"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:245
#: include/linux/rculist.h:576
msgid "the element to be replaced"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:246
#: include/linux/rculist.h:577
msgid "the new element to insert"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:247
#: include/linux/rculist.h:578
msgid ""
"The **old** entry will be replaced with the **new** entry atomically from "
"the perspective of concurrent readers.  It is the caller's responsibility to "
"synchronize with concurrent updaters, if any."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:252
msgid "**old** should not be empty."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:265
msgid "join an RCU-protected list into an existing list."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:266
#: include/linux/rculist.h:327 include/linux/rculist.h:342
msgid "the RCU-protected list to splice"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:268
msgid "``struct list_head *prev``"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:267
msgid "points to the last element of the existing list"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:269
msgid "``struct list_head *next``"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:268
msgid "points to the first element of the existing list"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:270
#: include/linux/rculist.h:330 include/linux/rculist.h:345
msgid "``void (*sync)(void)``"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:269
#: include/linux/rculist.h:329 include/linux/rculist.h:344
msgid "synchronize_rcu, synchronize_rcu_expedited, ..."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:270
msgid ""
"The list pointed to by **prev** and **next** can be RCU-read traversed "
"concurrently with this function."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:273
msgid "Note that this function blocks."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:275
msgid ""
"Important note: the caller must take whatever action is necessary to prevent "
"any other updates to the existing list.  In principle, it is possible to "
"modify the list as soon as sync() begins execution. If this sort of thing "
"becomes necessary, an alternative version based on call_rcu() could be "
"created.  But only if -really- needed -- there is no shortage of RCU API "
"members."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:325
msgid ""
"splice an RCU-protected list into an existing list, designed for stacks."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:328
#: include/linux/rculist.h:343
msgid "the place in the existing list to splice the first list into"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:340
msgid ""
"splice an RCU-protected list into an existing list, designed for queues."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:357
msgid "``list_entry_rcu (ptr, type, member)``"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:355
#: include/linux/rculist.h:472
msgid "get the struct for this entry"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:356
#: include/linux/rculist.h:473
msgid "the :c:type:`struct list_head <list_head>` pointer."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:357
#: include/linux/rculist.h:399 include/linux/rculist.h:418
#: include/linux/rculist.h:474
msgid "the type of the struct this is embedded in."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:358
#: include/linux/rculist.h:400 include/linux/rculist.h:419
#: include/linux/rculist.h:439 include/linux/rculist.h:456
#: include/linux/rculist.h:475 include/linux/rculist.h:509
msgid "the name of the list_head within the struct."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:359
#: include/linux/rculist.h:403 include/linux/rculist.h:422
msgid ""
"This primitive may safely run concurrently with the _rcu list-mutation "
"primitives such as list_add_rcu() as long as it's guarded by rcu_read_lock()."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:399
msgid "``list_first_or_null_rcu (ptr, type, member)``"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:397
msgid "get the first element from a list"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:398
msgid "the list head to take the element from."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:401
msgid "Note that if the list is empty, it returns NULL."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:417
msgid "``list_next_or_null_rcu (head, ptr, type, member)``"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:415
msgid "get the next element from a list"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:416
msgid "the head for the list."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:417
msgid "the list head to take the next element from."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:420
msgid "Note that if the ptr is at the end of the list, NULL is returned."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:438
msgid "``list_for_each_entry_rcu (pos, head, member, cond...)``"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:441
#: include/linux/rculist.h:758
msgid "``cond...``"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:440
#: include/linux/rculist.h:757
msgid "optional lockdep expression if called from non-RCU protection."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:441
msgid ""
"This list-traversal primitive may safely run concurrently with the _rcu list-"
"mutation primitives such as list_add_rcu() as long as the traversal is "
"guarded by rcu_read_lock()."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:455
msgid "``list_for_each_entry_srcu (pos, head, member, cond)``"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:458
#: include/linux/rculist.h:777
msgid "``cond``"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:457
#: include/linux/rculist.h:776
msgid "lockdep expression for the lock required to traverse the list."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:458
msgid ""
"This list-traversal primitive may safely run concurrently with the _rcu list-"
"mutation primitives such as list_add_rcu() as long as the traversal is "
"guarded by srcu_read_lock(). The lockdep expression srcu_read_lock_held() "
"can be passed as the cond argument from read side."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:474
msgid "``list_entry_lockless (ptr, type, member)``"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:476
#: include/linux/rculist.h:492
msgid ""
"This primitive may safely run concurrently with the _rcu list-mutation "
"primitives such as list_add_rcu(), but requires some implicit RCU read-side "
"guarding.  One example is running within a special exception-time "
"environment where preemption is disabled and where lockdep cannot be "
"invoked.  Another example is when items are added to the list, but never "
"deleted."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:490
msgid "``list_for_each_entry_lockless (pos, head, member)``"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:491
msgid "the name of the list_struct within the struct."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:508
msgid "``list_for_each_entry_continue_rcu (pos, head, member)``"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:506
msgid "continue iteration over list of given type"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:510
msgid ""
"Continue to iterate over list of given type, continuing after the current "
"position which must have been in the list when the RCU read lock was taken. "
"This would typically require either that you obtained the node from a "
"previous walk of the list in the same RCU read-side critical section, or "
"that you held some sort of non-RCU reference (such as a reference count) to "
"keep the node alive *and* in the list."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:518
msgid ""
"This iterator is similar to list_for_each_entry_from_rcu() except this "
"starts after the given position and that one starts at the given position."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:531
msgid "``list_for_each_entry_from_rcu (pos, head, member)``"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:529
msgid "iterate over a list from current point"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:532
msgid "the name of the list_node within the struct."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:533
msgid ""
"Iterate over the tail of a list starting from a given position, which must "
"have been in the list when the RCU read lock was taken. This would typically "
"require either that you obtained the node from a previous walk of the list "
"in the same RCU read-side critical section, or that you held some sort of "
"non-RCU reference (such as a reference count) to keep the node alive *and* "
"in the list."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:540
msgid ""
"This iterator is similar to list_for_each_entry_continue_rcu() except this "
"starts from the given position and that one starts from the position after "
"the given position."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:553
msgid ""
"list_unhashed() on entry does not return true after this, the entry is in an "
"undefined state. It is useful for RCU based lockfree traversal."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:560
msgid ""
"The caller must take whatever precautions are necessary (such as holding "
"appropriate locks) to avoid racing with another list-mutation primitive, "
"such as hlist_add_head_rcu() or hlist_del_rcu(), running on this same list. "
"However, it is perfectly legal to run concurrently with the _rcu list-"
"traversal primitives, such as hlist_for_each_entry()."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:581
msgid "``struct hlist_node *old``"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:578
msgid "``struct hlist_node *new``"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:597
msgid "swap the lists the hlist heads point to"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:603
msgid "``struct hlist_head *left``"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:598
msgid "The hlist head on the left"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:600
msgid "``struct hlist_head *right``"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:599
msgid "The hlist head on the right"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:600
msgid "The lists start out as [**left**  ][node1 ... ] and"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:601
msgid "[**right** ][node2 ... ]"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:602
msgid "The lists end up as    [**left**  ][node2 ... ]"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:603
msgid "[**right** ][node1 ... ]"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:628
#: include/linux/rculist.h:659
msgid "``struct hlist_head *h``"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:629
#: include/linux/rculist.h:660
msgid ""
"Adds the specified element to the specified hlist, while permitting racing "
"traversals."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:632
#: include/linux/rculist.h:663
msgid ""
"The caller must take whatever precautions are necessary (such as holding "
"appropriate locks) to avoid racing with another list-mutation primitive, "
"such as hlist_add_head_rcu() or hlist_del_rcu(), running on this same list. "
"However, it is perfectly legal to run concurrently with the _rcu list-"
"traversal primitives, such as hlist_for_each_entry_rcu(), used to prevent "
"memory-consistency problems on Alpha CPUs.  Regardless of the type of CPU, "
"the list-traversal primitive must be guarded by rcu_read_lock()."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:694
#: include/linux/rculist.h:721
msgid "the new element to add to the hash list."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:696
msgid "``struct hlist_node *next``"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:695
msgid "the existing element to add the new element before."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:697
msgid ""
"Adds the specified element to the specified hlist before the specified node "
"while permitting racing traversals."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:700
#: include/linux/rculist.h:727
msgid ""
"The caller must take whatever precautions are necessary (such as holding "
"appropriate locks) to avoid racing with another list-mutation primitive, "
"such as hlist_add_head_rcu() or hlist_del_rcu(), running on this same list. "
"However, it is perfectly legal to run concurrently with the _rcu list-"
"traversal primitives, such as hlist_for_each_entry_rcu(), used to prevent "
"memory-consistency problems on Alpha CPUs."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:723
msgid "``struct hlist_node *prev``"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:722
msgid "the existing element to add the new element after."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:724
msgid ""
"Adds the specified element to the specified hlist after the specified node "
"while permitting racing traversals."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:755
msgid "``hlist_for_each_entry_rcu (pos, head, member, cond...)``"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:756
#: include/linux/rculist.h:775 include/linux/rculist.h:796
#: include/linux/rculist.h:816 include/linux/rculist.h:832
#: include/linux/rculist.h:844 include/linux/rculist.h:856
msgid "the name of the hlist_node within the struct."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:758
#: include/linux/rculist.h:797 include/linux/rculist.h:817
msgid ""
"This list-traversal primitive may safely run concurrently with the _rcu list-"
"mutation primitives such as hlist_add_head_rcu() as long as the traversal is "
"guarded by rcu_read_lock()."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:774
msgid "``hlist_for_each_entry_srcu (pos, head, member, cond)``"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:777
msgid ""
"This list-traversal primitive may safely run concurrently with the _rcu list-"
"mutation primitives such as hlist_add_head_rcu() as long as the traversal is "
"guarded by srcu_read_lock(). The lockdep expression srcu_read_lock_held() "
"can be passed as the cond argument from read side."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:795
msgid "``hlist_for_each_entry_rcu_notrace (pos, head, member)``"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:793
msgid "iterate over rcu list of given type (for tracing)"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:801
msgid ""
"This is the same as hlist_for_each_entry_rcu() except that it does not do "
"any RCU debugging or tracing."
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:815
msgid "``hlist_for_each_entry_rcu_bh (pos, head, member)``"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:832
msgid "``hlist_for_each_entry_continue_rcu (pos, member)``"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:830
#: include/linux/rculist.h:842
msgid "iterate over a hlist continuing after current point"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:844
msgid "``hlist_for_each_entry_continue_rcu_bh (pos, member)``"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:856
msgid "``hlist_for_each_entry_from_rcu (pos, member)``"
msgstr ""

#: ../../../core-api/kernel-api:412: include/linux/rculist.h:854
msgid "iterate over a hlist continuing from current point"
msgstr ""

#: ../../../core-api/kernel-api:414: include/linux/rculist_nulls.h:20
#: include/linux/rculist_nulls.h:62 include/linux/rculist_nulls.h:87
#: include/linux/rculist_nulls.h:118
msgid "``struct hlist_nulls_node *n``"
msgstr ""

#: ../../../core-api/kernel-api:414: include/linux/rculist_nulls.h:17
msgid ""
"hlist_nulls_unhashed() on the node return true after this. It is useful for "
"RCU based read lockfree traversal if the writer side must know if the list "
"entry is still hashed or already unhashed."
msgstr ""

#: ../../../core-api/kernel-api:414: include/linux/rculist_nulls.h:26
msgid ""
"The caller must take whatever precautions are necessary (such as holding "
"appropriate locks) to avoid racing with another list-mutation primitive, "
"such as hlist_nulls_add_head_rcu() or hlist_nulls_del_rcu(), running on this "
"same list.  However, it is perfectly legal to run concurrently with the _rcu "
"list-traversal primitives, such as hlist_nulls_for_each_entry_rcu()."
msgstr ""

#: ../../../core-api/kernel-api:414: include/linux/rculist_nulls.h:44
msgid "``hlist_nulls_first_rcu (head)``"
msgstr ""

#: ../../../core-api/kernel-api:414: include/linux/rculist_nulls.h:42
msgid "returns the first element of the hash list."
msgstr ""

#: ../../../core-api/kernel-api:414: include/linux/rculist_nulls.h:43
#: include/linux/rculist_nulls.h:159 include/linux/rculist_nulls.h:179
msgid "the head of the list."
msgstr ""

#: ../../../core-api/kernel-api:414: include/linux/rculist_nulls.h:51
msgid "``hlist_nulls_next_rcu (node)``"
msgstr ""

#: ../../../core-api/kernel-api:414: include/linux/rculist_nulls.h:49
msgid "returns the element of the list after **node**."
msgstr ""

#: ../../../core-api/kernel-api:414: include/linux/rculist_nulls.h:50
msgid "element of the list."
msgstr ""

#: ../../../core-api/kernel-api:414: include/linux/rculist_nulls.h:59
msgid ""
"hlist_nulls_unhashed() on entry does not return true after this, the entry "
"is in an undefined state. It is useful for RCU based lockfree traversal."
msgstr ""

#: ../../../core-api/kernel-api:414: include/linux/rculist_nulls.h:66
msgid ""
"The caller must take whatever precautions are necessary (such as holding "
"appropriate locks) to avoid racing with another list-mutation primitive, "
"such as hlist_nulls_add_head_rcu() or hlist_nulls_del_rcu(), running on this "
"same list. However, it is perfectly legal to run concurrently with the _rcu "
"list-traversal primitives, such as hlist_nulls_for_each_entry()."
msgstr ""

#: ../../../core-api/kernel-api:414: include/linux/rculist_nulls.h:84
#: include/linux/rculist_nulls.h:115
msgid "``struct hlist_nulls_head *h``"
msgstr ""

#: ../../../core-api/kernel-api:414: include/linux/rculist_nulls.h:85
#: include/linux/rculist_nulls.h:116
msgid ""
"Adds the specified element to the specified hlist_nulls, while permitting "
"racing traversals."
msgstr ""

#: ../../../core-api/kernel-api:414: include/linux/rculist_nulls.h:88
#: include/linux/rculist_nulls.h:119
msgid ""
"The caller must take whatever precautions are necessary (such as holding "
"appropriate locks) to avoid racing with another list-mutation primitive, "
"such as hlist_nulls_add_head_rcu() or hlist_nulls_del_rcu(), running on this "
"same list. However, it is perfectly legal to run concurrently with the _rcu "
"list-traversal primitives, such as hlist_nulls_for_each_entry_rcu(), used to "
"prevent memory-consistency problems on Alpha CPUs.  Regardless of the type "
"of CPU, the list-traversal primitive must be guarded by rcu_read_lock()."
msgstr ""

#: ../../../core-api/kernel-api:414: include/linux/rculist_nulls.h:158
msgid "``hlist_nulls_for_each_entry_rcu (tpos, pos, head, member)``"
msgstr ""

#: ../../../core-api/kernel-api:414: include/linux/rculist_nulls.h:158
#: include/linux/rculist_nulls.h:178
msgid ""
"the :c:type:`struct hlist_nulls_node <hlist_nulls_node>` to use as a loop "
"cursor."
msgstr ""

#: ../../../core-api/kernel-api:414: include/linux/rculist_nulls.h:160
#: include/linux/rculist_nulls.h:180
msgid "the name of the hlist_nulls_node within the struct."
msgstr ""

#: ../../../core-api/kernel-api:414: include/linux/rculist_nulls.h:161
msgid ""
"The barrier() is needed to make sure compiler doesn't cache first element "
"[1], as this loop can be restarted [2] [1] Documentation/memory-barriers.txt "
"around line 1533 [2] Documentation/RCU/rculist_nulls.rst around line 146"
msgstr ""

#: ../../../core-api/kernel-api:414: include/linux/rculist_nulls.h:177
msgid "``hlist_nulls_for_each_entry_safe (tpos, pos, head, member)``"
msgstr ""

#: ../../../core-api/kernel-api:414: include/linux/rculist_nulls.h:175
msgid "iterate over list of given type safe against removal of list entry"
msgstr ""

#: ../../../core-api/kernel-api:416: include/linux/rcu_sync.h:26
msgid "Are readers permitted to use their fastpaths?"
msgstr ""

#: ../../../core-api/kernel-api:416: include/linux/rcu_sync.h:32
#: ../../../core-api/kernel-api:418: kernel/rcu/sync.c:24 kernel/rcu/sync.c:97
#: kernel/rcu/sync.c:149 kernel/rcu/sync.c:176
msgid "``struct rcu_sync *rsp``"
msgstr ""

#: ../../../core-api/kernel-api:416: include/linux/rcu_sync.h:27
#: ../../../core-api/kernel-api:418: kernel/rcu/sync.c:92 kernel/rcu/sync.c:144
msgid "Pointer to rcu_sync structure to use for synchronization"
msgstr ""

#: ../../../core-api/kernel-api:416: include/linux/rcu_sync.h:28
msgid ""
"Returns true if readers are permitted to use their fastpaths.  Must be "
"invoked within some flavor of RCU read-side critical section."
msgstr ""

#: ../../../core-api/kernel-api:418: kernel/rcu/sync.c:18
msgid "Initialize an rcu_sync structure"
msgstr ""

#: ../../../core-api/kernel-api:418: kernel/rcu/sync.c:19
msgid "Pointer to rcu_sync structure to be initialized"
msgstr ""

#: ../../../core-api/kernel-api:418: kernel/rcu/sync.c:35
msgid "Callback function managing reader access to fastpath"
msgstr ""

#: ../../../core-api/kernel-api:418: kernel/rcu/sync.c:36
msgid "Pointer to rcu_head in rcu_sync structure to use for synchronization"
msgstr ""

#: ../../../core-api/kernel-api:418: kernel/rcu/sync.c:37
msgid ""
"This function is passed to call_rcu() function by rcu_sync_enter() and "
"rcu_sync_exit(), so that it is invoked after a grace period following the "
"that invocation of enter/exit."
msgstr ""

#: ../../../core-api/kernel-api:418: kernel/rcu/sync.c:41
msgid ""
"If it is called by rcu_sync_enter() it signals that all the readers were "
"switched onto slow path."
msgstr ""

#: ../../../core-api/kernel-api:418: kernel/rcu/sync.c:44
msgid ""
"If it is called by rcu_sync_exit() it takes action based on events that have "
"taken place in the meantime, so that closely spaced rcu_sync_enter() and "
"rcu_sync_exit() pairs need not wait for a grace period."
msgstr ""

#: ../../../core-api/kernel-api:418: kernel/rcu/sync.c:48
msgid ""
"If another rcu_sync_enter() is invoked before the grace period ended, reset "
"state to allow the next rcu_sync_exit() to let the readers back onto their "
"fastpaths (after a grace period).  If both another rcu_sync_enter() and its "
"matching rcu_sync_exit() are invoked before the grace period ended, re-"
"invoke call_rcu() on behalf of that rcu_sync_exit().  Otherwise, set all "
"state back to idle so that readers can again use their fastpaths."
msgstr ""

#: ../../../core-api/kernel-api:418: kernel/rcu/sync.c:91
msgid "Force readers onto slowpath"
msgstr ""

#: ../../../core-api/kernel-api:418: kernel/rcu/sync.c:93
msgid ""
"This function is used by updaters who need readers to make use of a slowpath "
"during the update.  After this function returns, all subsequent calls to "
"rcu_sync_is_idle() will return false, which tells readers to stay off their "
"fastpaths.  A later call to rcu_sync_exit() re-enables reader fastpaths."
msgstr ""

#: ../../../core-api/kernel-api:418: kernel/rcu/sync.c:99
msgid ""
"When called in isolation, rcu_sync_enter() must wait for a grace period, "
"however, closely spaced calls to rcu_sync_enter() can optimize away the "
"grace-period wait via a state machine implemented by rcu_sync_enter(), "
"rcu_sync_exit(), and rcu_sync_func()."
msgstr ""

#: ../../../core-api/kernel-api:418: kernel/rcu/sync.c:143
msgid "Allow readers back onto fast path after grace period"
msgstr ""

#: ../../../core-api/kernel-api:418: kernel/rcu/sync.c:145
msgid ""
"This function is used by updaters who have completed, and can therefore now "
"allow readers to make use of their fastpaths after a grace period has "
"elapsed.  After this grace period has completed, all subsequent calls to "
"rcu_sync_is_idle() will return true, which tells readers that they can once "
"again use their fastpaths."
msgstr ""

#: ../../../core-api/kernel-api:418: kernel/rcu/sync.c:170
msgid "Clean up an rcu_sync structure"
msgstr ""

#: ../../../core-api/kernel-api:418: kernel/rcu/sync.c:171
msgid "Pointer to rcu_sync structure to be cleaned up"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:24
msgid "Per-CPU component of definition for a Tasks-RCU-like mechanism."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:25
msgid "``cblist``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:26
msgid "Callback list."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:27
msgid "Lock protecting per-CPU callback list."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:27
msgid "``rtp_jiffies``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:28
msgid "Jiffies counter value for statistics."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:30
msgid "``rtp_n_lock_retries``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:31
msgid "Rough lock-contention statistic."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:28
msgid "``lazy_timer``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:29
msgid "Timer to unlazify callbacks."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:29
msgid "``urgent_gp``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:30
msgid "Number of additional non-lazy grace periods."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:31
msgid "``rtp_work``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:32
msgid "Work queue for invoking callbacks."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:32
msgid "``rtp_irq_work``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:33
msgid "IRQ work queue for deferred wakeups."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:33
msgid "``barrier_q_head``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:34
msgid "RCU callback for barrier operation."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:34
msgid "``rtp_blkd_tasks``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:35
msgid "List of tasks blocked as readers."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:35
msgid "``rtp_exit_list``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:36
msgid "List of tasks in the latter portion of do_exit()."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:36
msgid "``cpu``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:37
msgid "CPU number corresponding to this entry."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:37
msgid "``index``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:38
msgid "Index of this CPU in rtpcp_array of the rcu_tasks structure."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:38
msgid "``rtpp``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:39
msgid "Pointer to the rcu_tasks structure."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:58
msgid "Definition for a Tasks-RCU-like mechanism."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:59
msgid "``cbs_wait``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:60
msgid "RCU wait allowing a new callback to get kthread's attention."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:60
msgid "``cbs_gbl_lock``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:61
msgid "Lock protecting callback list."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:61
msgid "``tasks_gp_mutex``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:62
msgid "Mutex protecting grace period, needed during mid-boot dead zone."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:63
msgid "``gp_state``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:64
msgid "Grace period's most recent state transition (debugging)."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:64
msgid "``gp_sleep``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:65
msgid "Per-grace-period sleep to prevent CPU-bound looping."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:65
msgid "``init_fract``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:66
msgid "Initial backoff sleep interval."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:66
msgid "``gp_jiffies``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:67
msgid "Time of last **gp_state** transition."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:67
msgid "``gp_start``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:68
msgid "Most recent grace-period start in jiffies."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:68
msgid "``tasks_gp_seq``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:69
msgid "Number of grace periods completed since boot in upper bits."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:69
msgid "``n_ipis``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:70
msgid "Number of IPIs sent to encourage grace periods to end."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:70
msgid "``n_ipis_fails``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:71
msgid "Number of IPI-send failures."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:71
msgid "``kthread_ptr``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:72
msgid "This flavor's grace-period/callback-invocation kthread."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:72
msgid "``lazy_jiffies``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:73
msgid "Number of jiffies to allow callbacks to be lazy."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:62
msgid "``gp_func``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:63
msgid "This flavor's grace-period-wait function."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:73
msgid "``pregp_func``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:74
msgid "This flavor's pre-grace-period function (optional)."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:74
msgid "``pertask_func``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:75
msgid "This flavor's per-task scan function (optional)."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:75
msgid "``postscan_func``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:76
msgid "This flavor's post-task scan function (optional)."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:76
msgid "``holdouts_func``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:77
msgid "This flavor's holdout-list scan function (optional)."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:77
msgid "``postgp_func``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:78
msgid "This flavor's post-grace-period function (optional)."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:78
msgid "``call_func``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:79
msgid "This flavor's call_rcu()-equivalent function."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:79
msgid "``wait_state``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:80
msgid ""
"Task state for synchronous grace-period waits (default TASK_UNINTERRUPTIBLE)."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:80
msgid "``rtpcpu``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:81
msgid "This flavor's rcu_tasks_percpu structure."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:81
msgid "``rtpcp_array``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:82
msgid ""
"Array of pointers to rcu_tasks_percpu structure of CPUs in cpu_possible_mask."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:82
msgid "``percpu_enqueue_shift``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:83
msgid "Shift down CPU ID this much when enqueuing callbacks."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:83
msgid "``percpu_enqueue_lim``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:84
msgid "Number of per-CPU callback queues in use for enqueuing."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:84
msgid "``percpu_dequeue_lim``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:85
msgid "Number of per-CPU callback queues in use for dequeuing."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:85
msgid "``percpu_dequeue_gpseq``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:86
msgid "RCU grace-period number to propagate enqueue limit to dequeuers."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:86
msgid "``barrier_q_mutex``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:87
msgid "Serialize barrier operations."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:87
msgid "``barrier_q_count``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:88
msgid "Number of queues being waited on."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:88
msgid "``barrier_q_completion``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:89
msgid "Barrier wait/wakeup mechanism."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:89
msgid "``barrier_q_seq``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:90
msgid "Sequence number for barrier operations."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:90
msgid "``barrier_q_start``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:91
msgid "Most recent barrier start in jiffies."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:92
msgid "This flavor's textual name."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:92
msgid "``kname``"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:93
msgid "This flavor's kthread name."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:1178
msgid "Queue an RCU for invocation task-based grace period"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:1181
msgid ""
"The callback function will be invoked some time after a full grace period "
"elapses, in other words after all currently executing RCU read-side critical "
"sections have completed. call_rcu_tasks() assumes that the read-side "
"critical sections end at a voluntary context switch (not a preemption!), "
"cond_resched_tasks_rcu_qs(), entry into idle, or transition to usermode "
"execution.  As such, there are no read-side primitives analogous to "
"rcu_read_lock() and rcu_read_unlock() because this primitive is intended to "
"determine that all tasks have passed through a safe state, not so much for "
"data-structure synchronization."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:1202
msgid "wait until an rcu-tasks grace period has elapsed."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:1203
msgid ""
"Control will return to the caller some time after a full rcu-tasks grace "
"period has elapsed, in other words after all currently executing rcu-tasks "
"read-side critical sections have elapsed.  These read-side critical sections "
"are delimited by calls to schedule(), cond_resched_tasks_rcu_qs(), idle "
"execution, userspace execution, calls to synchronize_rcu_tasks(), and (in "
"theory, anyway) cond_resched()."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:1210
msgid ""
"This is a very specialized primitive, intended only for a few uses in "
"tracing and other situations requiring manipulation of function preambles "
"and profiling hooks.  The synchronize_rcu_tasks() function is not (yet) "
"intended for heavy use from multiple CPUs."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:1215
#: kernel/rcu/tasks.h:1405 kernel/rcu/tasks.h:2035
msgid ""
"See the description of synchronize_rcu() for more detailed information on "
"memory ordering guarantees."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:1226
msgid "Wait for in-flight call_rcu_tasks() callbacks."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:1227
#: kernel/rcu/tasks.h:2048
msgid ""
"Although the current implementation is guaranteed to wait, it is not "
"obligated to, for example, if there are no pending callbacks."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:1392
msgid "wait for a rude rcu-tasks grace period"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:1393
msgid ""
"Control will return to the caller some time after a rude rcu-tasks grace "
"period has elapsed, in other words after all currently executing rcu-tasks "
"read-side critical sections have elapsed.  These read-side critical sections "
"are delimited by calls to schedule(), cond_resched_tasks_rcu_qs(), userspace "
"execution (which is a schedulable context), and (in theory, anyway) "
"cond_resched()."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:1400
msgid ""
"This is a very specialized primitive, intended only for a few uses in "
"tracing and other situations requiring manipulation of function preambles "
"and profiling hooks.  The synchronize_rcu_tasks_rude() function is not (yet) "
"intended for heavy use from multiple CPUs."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:2003
msgid "Queue a callback trace task-based grace period"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:2006
msgid ""
"The callback function will be invoked some time after a trace rcu-tasks "
"grace period elapses, in other words after all currently executing trace rcu-"
"tasks read-side critical sections have completed. These read-side critical "
"sections are delimited by calls to rcu_read_lock_trace() and "
"rcu_read_unlock_trace()."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:2023
msgid "wait for a trace rcu-tasks grace period"
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:2024
msgid ""
"Control will return to the caller some time after a trace rcu-tasks grace "
"period has elapsed, in other words after all currently executing trace rcu-"
"tasks read-side critical sections have elapsed. These read-side critical "
"sections are delimited by calls to rcu_read_lock_trace() and "
"rcu_read_unlock_trace()."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:2030
msgid ""
"This is a very specialized primitive, intended only for a few uses in "
"tracing and other situations requiring manipulation of function preambles "
"and profiling hooks.  The synchronize_rcu_tasks_trace() function is not "
"(yet) intended for heavy use from multiple CPUs."
msgstr ""

#: ../../../core-api/kernel-api:420: kernel/rcu/tasks.h:2047
msgid "Wait for in-flight call_rcu_tasks_trace() callbacks."
msgstr ""

#: ../../../core-api/kernel-api:422: kernel/rcu/tree_stall.h:181
msgid "restart stall-warning timeout for current grace period"
msgstr ""

#: ../../../core-api/kernel-api:422: kernel/rcu/tree_stall.h:182
msgid ""
"To perform the reset request from the caller, disable stall detection until "
"3 fqs loops have passed. This is required to ensure a fresh jiffies is "
"loaded.  It should be safe to do from the fqs loop as enough timer "
"interrupts and context switches should have passed."
msgstr ""

#: ../../../core-api/kernel-api:422: kernel/rcu/tree_stall.h:187
msgid "The caller must disable hard irqs."
msgstr ""

#: ../../../core-api/kernel-api:422: kernel/rcu/tree_stall.h:1133
msgid "Add an RCU CPU stall notifier"
msgstr ""

#: ../../../core-api/kernel-api:422: kernel/rcu/tree_stall.h:1139
#: kernel/rcu/tree_stall.h:1162
msgid "``struct notifier_block *n``"
msgstr ""

#: ../../../core-api/kernel-api:422: kernel/rcu/tree_stall.h:1134
#: kernel/rcu/tree_stall.h:1157
msgid "Entry to add."
msgstr ""

#: ../../../core-api/kernel-api:422: kernel/rcu/tree_stall.h:1135
msgid ""
"Adds an RCU CPU stall notifier to an atomic notifier chain. The **action** "
"passed to a notifier will be **RCU_STALL_NOTIFY_NORM** or friends.  The "
"**data** will be the duration of the stalled grace period, in jiffies, "
"coerced to a void* pointer."
msgstr ""

#: ../../../core-api/kernel-api:422: kernel/rcu/tree_stall.h:1140
msgid "Returns 0 on success, ``-EEXIST`` on error."
msgstr ""

#: ../../../core-api/kernel-api:422: kernel/rcu/tree_stall.h:1156
msgid "Remove an RCU CPU stall notifier"
msgstr ""

#: ../../../core-api/kernel-api:422: kernel/rcu/tree_stall.h:1158
msgid "Removes an RCU CPU stall notifier from an atomic notifier chain."
msgstr ""

#: ../../../core-api/kernel-api:422: kernel/rcu/tree_stall.h:1160
msgid "Returns zero on success, ``-ENOENT`` on failure."
msgstr ""

#: ../../../core-api/kernel-api:424: include/linux/rcupdate_trace.h:38
msgid "mark beginning of RCU-trace read-side critical section"
msgstr ""

#: ../../../core-api/kernel-api:424: include/linux/rcupdate_trace.h:39
msgid ""
"When synchronize_rcu_tasks_trace() is invoked by one task, then that task is "
"guaranteed to block until all other tasks exit their read-side critical "
"sections.  Similarly, if call_rcu_trace() is invoked on one task while other "
"tasks are within RCU read-side critical sections, invocation of the "
"corresponding RCU callback is deferred until after the all the other tasks "
"exit their critical sections."
msgstr ""

#: ../../../core-api/kernel-api:424: include/linux/rcupdate_trace.h:46
msgid "For more details, please see the documentation for rcu_read_lock()."
msgstr ""

#: ../../../core-api/kernel-api:424: include/linux/rcupdate_trace.h:62
msgid "mark end of RCU-trace read-side critical section"
msgstr ""

#: ../../../core-api/kernel-api:424: include/linux/rcupdate_trace.h:63
msgid ""
"Pairs with a preceding call to rcu_read_lock_trace(), and nesting is "
"allowed.  Invoking a rcu_read_unlock_trace() when there is no matching "
"rcu_read_lock_trace() is verboten, and will result in lockdep complaints."
msgstr ""

#: ../../../core-api/kernel-api:424: include/linux/rcupdate_trace.h:67
msgid "For more details, please see the documentation for rcu_read_unlock()."
msgstr ""

#: ../../../core-api/kernel-api:426: include/linux/rcupdate_wait.h:41
msgid "``synchronize_rcu_mult (...)``"
msgstr ""

#: ../../../core-api/kernel-api:426: include/linux/rcupdate_wait.h:39
msgid "Wait concurrently for multiple grace periods"
msgstr ""

#: ../../../core-api/kernel-api:426: include/linux/rcupdate_wait.h:40
msgid "List of call_rcu() functions for different grace periods to wait on"
msgstr ""

#: ../../../core-api/kernel-api:426: include/linux/rcupdate_wait.h:41
msgid ""
"This macro waits concurrently for multiple types of RCU grace periods. For "
"example, synchronize_rcu_mult(call_rcu, call_rcu_tasks) would wait on "
"concurrent RCU and RCU-tasks grace periods.  Waiting on a given SRCU domain "
"requires you to write a wrapper function for that SRCU domain's call_srcu() "
"function, with this wrapper supplying the pointer to the corresponding "
"srcu_struct."
msgstr ""

#: ../../../core-api/kernel-api:426: include/linux/rcupdate_wait.h:48
msgid ""
"Note that call_rcu_hurry() should be used instead of call_rcu() because in "
"kernels built with CONFIG_RCU_LAZY=y the delay between the invocation of "
"call_rcu() and that of the corresponding RCU callback can be multiple "
"seconds."
msgstr ""

#: ../../../core-api/kernel-api:426: include/linux/rcupdate_wait.h:53
msgid ""
"The first argument tells Tiny RCU's _wait_rcu_gp() not to bother waiting for "
"RCU.  The reason for this is because anywhere synchronize_rcu_mult() can be "
"called is automatically already a full grace period."
msgstr ""

#: ../../../core-api/kernel-api:428: include/linux/rcuref.h:20
msgid "Initialize a rcuref reference count with the given reference count"
msgstr ""

#: ../../../core-api/kernel-api:428: include/linux/rcuref.h:26
#: include/linux/rcuref.h:36 include/linux/rcuref.h:54
#: include/linux/rcuref.h:72 include/linux/rcuref.h:127
#: include/linux/rcuref.h:154
msgid "``rcuref_t *ref``"
msgstr ""

#: ../../../core-api/kernel-api:428: include/linux/rcuref.h:21
#: include/linux/rcuref.h:31 include/linux/rcuref.h:49
#: include/linux/rcuref.h:67 include/linux/rcuref.h:122
#: include/linux/rcuref.h:149
msgid "Pointer to the reference count"
msgstr ""

#: ../../../core-api/kernel-api:428: include/linux/rcuref.h:23
msgid "``unsigned int cnt``"
msgstr ""

#: ../../../core-api/kernel-api:428: include/linux/rcuref.h:22
msgid "The initial reference count typically '1'"
msgstr ""

#: ../../../core-api/kernel-api:428: include/linux/rcuref.h:30
msgid "Read the number of held reference counts of a rcuref"
msgstr ""

#: ../../../core-api/kernel-api:428: include/linux/rcuref.h:33
msgid ""
"The number of held references (0 ... N). The value 0 does not indicate that "
"it is safe to schedule the object, protected by this reference counter, for "
"deconstruction. If you want to know if the reference counter has been marked "
"DEAD (as signaled by rcuref_put()) please use rcuread_is_dead()."
msgstr ""

#: ../../../core-api/kernel-api:428: include/linux/rcuref.h:48
msgid "Check if the rcuref has been already marked dead"
msgstr ""

#: ../../../core-api/kernel-api:428: include/linux/rcuref.h:51
msgid ""
"True if the object has been marked DEAD. This signals that a previous "
"invocation of rcuref_put() returned true on this reference counter meaning "
"the protected object can safely be scheduled for deconstruction. Otherwise, "
"returns false."
msgstr ""

#: ../../../core-api/kernel-api:428: include/linux/rcuref.h:66
msgid "Acquire one reference on a rcuref reference count"
msgstr ""

#: ../../../core-api/kernel-api:428: include/linux/rcuref.h:68
msgid "Similar to atomic_inc_not_zero() but saturates at RCUREF_MAXREF."
msgstr ""

#: ../../../core-api/kernel-api:428: include/linux/rcuref.h:70
msgid ""
"Provides no memory ordering, it is assumed the caller has guaranteed the "
"object memory to be stable (RCU, etc.). It does provide a control dependency "
"and thereby orders future stores. See documentation in lib/rcuref.c"
msgstr ""

#: ../../../core-api/kernel-api:428: include/linux/rcuref.h:75
msgid "True if a reference was successfully acquired"
msgstr ""

#: ../../../core-api/kernel-api:428: include/linux/rcuref.h:75
msgid ""
"False if the attempt to acquire a reference failed. This happens when the "
"last reference has been put already"
msgstr ""

#: ../../../core-api/kernel-api:428: include/linux/rcuref.h:121
msgid "Release one reference for a rcuref reference count RCU safe"
msgstr ""

#: ../../../core-api/kernel-api:428: include/linux/rcuref.h:123
#: include/linux/rcuref.h:152
msgid ""
"Provides release memory ordering, such that prior loads and stores are done "
"before, and provides an acquire ordering on success such that free() must "
"come after."
msgstr ""

#: ../../../core-api/kernel-api:428: include/linux/rcuref.h:127
msgid ""
"Can be invoked from contexts, which guarantee that no grace period can "
"happen which would free the object concurrently if the decrement drops the "
"last reference and the slowpath races against a concurrent get() and put() "
"pair. rcu_read_lock()'ed and atomic contexts qualify."
msgstr ""

#: ../../../core-api/kernel-api:428: include/linux/rcuref.h:133
msgid ""
"False if there are still active references or the put() raced with a "
"concurrent get()/put() pair. Caller is not allowed to release the protected "
"object."
msgstr ""

#: ../../../core-api/kernel-api:428: include/linux/rcuref.h:133
msgid ""
"True if this was the last reference with no future references possible. This "
"signals the caller that it can safely release the object which is protected "
"by the reference counter."
msgstr ""

#: ../../../core-api/kernel-api:428: include/linux/rcuref.h:148
msgid "Release one reference for a rcuref reference count"
msgstr ""

#: ../../../core-api/kernel-api:428: include/linux/rcuref.h:150
msgid "Can be invoked from any context."
msgstr ""

#: ../../../core-api/kernel-api:428: include/linux/rcuref.h:157
msgid ""
"True if this was the last reference with no future references possible. This "
"signals the caller that it can safely schedule the object, which is "
"protected by the reference counter, for deconstruction."
msgstr ""

#: ../../../core-api/kernel-api:428: include/linux/rcuref.h:162
msgid ""
"False if there are still active references or the put() raced with a "
"concurrent get()/put() pair. Caller is not allowed to deconstruct the "
"protected object."
msgstr ""

#: ../../../core-api/kernel-api:430: include/linux/rcutree.h:57
msgid "``struct rcu_gp_oldstate *rgosp1``"
msgstr ""

#: ../../../core-api/kernel-api:430: include/linux/rcutree.h:54
msgid "``struct rcu_gp_oldstate *rgosp2``"
msgstr ""

#: ../../../core-api/kernel-api:430: include/linux/rcutree.h:54
msgid ""
"The two old-state values must have been obtained from either "
"get_state_synchronize_rcu_full(), start_poll_synchronize_rcu_full(), or "
"get_completed_synchronize_rcu_full().  Returns **true** if the two values "
"are identical and **false** otherwise.  This allows structures whose "
"lifetimes are tracked by old-state values to push these values to a list "
"header, allowing those structures to be slightly smaller."
msgstr ""

#: ../../../core-api/kernel-api:430: include/linux/rcutree.h:61
msgid ""
"Note that equality is judged on a bitwise basis, so that an "
"**rcu_gp_oldstate** structure with an already-completed state in one field "
"will compare not-equal to a structure with an already-completed state in the "
"other field.  After all, the **rcu_gp_oldstate** structure is opaque so how "
"did such a situation come to pass in the first place?"
msgstr ""
