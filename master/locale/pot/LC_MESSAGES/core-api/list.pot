# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 08:27+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../core-api/list.rst:5
msgid "Linked Lists in Linux"
msgstr ""

#: ../../../core-api/list.rst:0
msgid "Author"
msgstr ""

#: ../../../core-api/list.rst:7
msgid "Nicolas Frattaroli <nicolas.frattaroli@collabora.com>"
msgstr ""

#: ../../../core-api/list.rst:9
msgid "Contents"
msgstr ""

#: ../../../core-api/list.rst:12
msgid "Introduction"
msgstr ""

#: ../../../core-api/list.rst:14
msgid ""
"Linked lists are one of the most basic data structures used in many "
"programs. The Linux kernel implements several different flavours of linked "
"lists. The purpose of this document is not to explain linked lists in "
"general, but to show new kernel developers how to use the Linux kernel "
"implementations of linked lists."
msgstr ""

#: ../../../core-api/list.rst:20
msgid ""
"Please note that while linked lists certainly are ubiquitous, they are "
"rarely the best data structure to use in cases where a simple array doesn't "
"already suffice. In particular, due to their poor data locality, linked "
"lists are a bad choice in situations where performance may be of "
"consideration. Familiarizing oneself with other in-kernel generic data "
"structures, especially for concurrent accesses, is highly encouraged."
msgstr ""

#: ../../../core-api/list.rst:28
msgid "Linux implementation of doubly linked lists"
msgstr ""

#: ../../../core-api/list.rst:30
msgid ""
"Linux's linked list implementations can be used by including the header file "
"``<linux/list.h>``."
msgstr ""

#: ../../../core-api/list.rst:33
msgid ""
"The doubly-linked list will likely be the most familiar to many readers. "
"It's a list that can efficiently be traversed forwards and backwards."
msgstr ""

#: ../../../core-api/list.rst:36
msgid ""
"The Linux kernel's doubly-linked list is circular in nature. This means that "
"to get from the head node to the tail, we can just travel one edge "
"backwards. Similarly, to get from the tail node to the head, we can simply "
"travel forwards \"beyond\" the tail and arrive back at the head."
msgstr ""

#: ../../../core-api/list.rst:42
msgid "Declaring a node"
msgstr ""

#: ../../../core-api/list.rst:44
msgid ""
"A node in a doubly-linked list is declared by adding a struct list_head "
"member to the data structure you wish to be contained in the list:"
msgstr ""

#: ../../../core-api/list.rst:55
msgid ""
"This may be an unfamiliar approach to some, as the classical explanation of "
"a linked list is a list node data structure with pointers to the previous "
"and next list node, as well the payload data. Linux chooses this approach "
"because it allows for generic list modification code regardless of what data "
"structure is contained within the list. Since the struct list_head member is "
"not a pointer but part of the data structure proper, the container_of() "
"pattern can be used by the list implementation to access the payload data "
"regardless of its type, while staying oblivious to what said type actually "
"is."
msgstr ""

#: ../../../core-api/list.rst:65
msgid "Declaring and initializing a list"
msgstr ""

#: ../../../core-api/list.rst:67
msgid ""
"A doubly-linked list can then be declared as just another struct list_head, "
"and initialized with the LIST_HEAD_INIT() macro during initial assignment, "
"or with the INIT_LIST_HEAD() function later:"
msgstr ""

#: ../../../core-api/list.rst:92
msgid ""
"A further point of confusion to some may be that the list itself doesn't "
"really have its own type. The concept of the entire linked list and a struct "
"list_head member that points to other entries in the list are one and the "
"same."
msgstr ""

#: ../../../core-api/list.rst:98
msgid "Adding nodes to the list"
msgstr ""

#: ../../../core-api/list.rst:100
msgid "Adding a node to the linked list is done through the list_add() macro."
msgstr ""

#: ../../../core-api/list.rst:102
msgid ""
"We'll return to our clown car example to illustrate how nodes get added to "
"the list:"
msgstr ""

#: ../../../core-api/list.rst:139
msgid "In State 1, our list of clowns is still empty::"
msgstr ""

#: ../../../core-api/list.rst:147
msgid ""
"This diagram shows the singular \"clowns\" node pointing at itself. In this "
"diagram, and all following diagrams, only the forward edges are shown, to "
"aid in clarity."
msgstr ""

#: ../../../core-api/list.rst:151
msgid "In State 2, we've added Grock after the list head::"
msgstr ""

#: ../../../core-api/list.rst:159
msgid ""
"This diagram shows the \"clowns\" node pointing at a new node labeled "
"\"Grock\". The Grock node is pointing back at the \"clowns\" node."
msgstr ""

#: ../../../core-api/list.rst:162
msgid ""
"In State 3, we've added Dimitri after the list head, resulting in the "
"following::"
msgstr ""

#: ../../../core-api/list.rst:170
msgid ""
"This diagram shows the \"clowns\" node pointing at a new node labeled "
"\"Dimitri\", which then points at the node labeled \"Grock\". The \"Grock\" "
"node still points back at the \"clowns\" node."
msgstr ""

#: ../../../core-api/list.rst:174
msgid ""
"If we wanted to have Dimitri inserted at the end of the list instead, we'd "
"use list_add_tail(). Our code would then look like this:"
msgstr ""

#: ../../../core-api/list.rst:190
msgid "This results in the following list::"
msgstr ""

#: ../../../core-api/list.rst:198
msgid ""
"This diagram shows the \"clowns\" node pointing at the node labeled "
"\"Grock\", which points at the new node labeled \"Dimitri\". The node "
"labeled \"Dimitri\" points back at the \"clowns\" node."
msgstr ""

#: ../../../core-api/list.rst:203
msgid "Traversing the list"
msgstr ""

#: ../../../core-api/list.rst:205
msgid ""
"To iterate the list, we can loop through all nodes within the list with "
"list_for_each()."
msgstr ""

#: ../../../core-api/list.rst:208
msgid ""
"In our clown example, this results in the following somewhat awkward code:"
msgstr ""

#: ../../../core-api/list.rst:227
msgid ""
"The list_entry() macro internally uses the aforementioned container_of() to "
"retrieve the data structure instance that ``node`` is a member of."
msgstr ""

#: ../../../core-api/list.rst:230
msgid ""
"Note how the additional list_entry() call is a little awkward here. It's "
"only there because we're iterating through the ``node`` members, but we "
"really want to iterate through the payload, i.e. the ``struct clown`` that "
"contains each node's struct list_head. For this reason, there is a second "
"macro: list_for_each_entry()"
msgstr ""

#: ../../../core-api/list.rst:236
msgid "Using it would change our code to something like this:"
msgstr ""

#: ../../../core-api/list.rst:253
msgid ""
"This eliminates the need for the list_entry() step, and our loop cursor is "
"now of the type of our payload. The macro is given the member name that "
"corresponds to the list's struct list_head within the clown data structure "
"so that it can still walk the list."
msgstr ""

#: ../../../core-api/list.rst:259
msgid "Removing nodes from the list"
msgstr ""

#: ../../../core-api/list.rst:261
msgid ""
"The list_del() function can be used to remove entries from the list. It not "
"only removes the given entry from the list, but poisons the entry's ``prev`` "
"and ``next`` pointers, so that unintended use of the entry after removal "
"does not go unnoticed."
msgstr ""

#: ../../../core-api/list.rst:266
msgid "We can extend our previous example to remove one of the entries:"
msgstr ""

#: ../../../core-api/list.rst:285
msgid "The result of this would be this::"
msgstr ""

#: ../../../core-api/list.rst:293
msgid ""
"This diagram shows the \"clowns\" node pointing at the node labeled "
"\"Grock\", which points back at the \"clowns\" node. Off to the side is a "
"lone node labeled \"Dimitri\", which has no arrows pointing anywhere."
msgstr ""

#: ../../../core-api/list.rst:297
msgid ""
"Note how the Dimitri node does not point to itself; its pointers are "
"intentionally set to a \"poison\" value that the list code refuses to "
"traverse."
msgstr ""

#: ../../../core-api/list.rst:300
msgid ""
"If we wanted to reinitialize the removed node instead to make it point at "
"itself again like an empty list head, we can use list_del_init() instead:"
msgstr ""

#: ../../../core-api/list.rst:320
msgid "This results in the deleted node pointing to itself again::"
msgstr ""

#: ../../../core-api/list.rst:328
msgid ""
"This diagram shows the \"clowns\" node pointing at the node labeled "
"\"Grock\", which points back at the \"clowns\" node. Off to the side is a "
"lone node labeled \"Dimitri\", which points to itself."
msgstr ""

#: ../../../core-api/list.rst:333
msgid "Traversing whilst removing nodes"
msgstr ""

#: ../../../core-api/list.rst:335
msgid ""
"Deleting entries while we're traversing the list will cause problems if we "
"use list_for_each() and list_for_each_entry(), as deleting the current entry "
"would modify the ``next`` pointer of it, which means the traversal can't "
"properly advance to the next list entry."
msgstr ""

#: ../../../core-api/list.rst:340
msgid ""
"There is a solution to this however: list_for_each_safe() and "
"list_for_each_entry_safe(). These take an additional parameter of a pointer "
"to a struct list_head to use as temporary storage for the next entry during "
"iteration, solving the issue."
msgstr ""

#: ../../../core-api/list.rst:345
msgid "An example of how to use it:"
msgstr ""

#: ../../../core-api/list.rst:360
msgid ""
"Proper memory management (i.e. freeing the deleted node while making sure "
"nothing still references it) in this case is left as an exercise to the "
"reader."
msgstr ""

#: ../../../core-api/list.rst:364
msgid "Cutting a list"
msgstr ""

#: ../../../core-api/list.rst:366
msgid ""
"There are two helper functions to cut lists with. Both take elements from "
"the list ``head``, and replace the contents of the list ``list``."
msgstr ""

#: ../../../core-api/list.rst:369
msgid ""
"The first such function is list_cut_position(). It removes all list entries "
"from ``head`` up to and including ``entry``, placing them in ``list`` "
"instead."
msgstr ""

#: ../../../core-api/list.rst:372
msgid "In this example, it's assumed we start with the following list::"
msgstr ""

#: ../../../core-api/list.rst:380
msgid ""
"With the following code, every clown up to and including \"Pic\" is moved "
"from the \"clowns\" list head to a separate struct list_head initialized at "
"local stack variable ``retirement``:"
msgstr ""

#: ../../../core-api/list.rst:399 ../../../core-api/list.rst:435
msgid "The resulting ``car->clowns`` list would be this::"
msgstr ""

#: ../../../core-api/list.rst:407 ../../../core-api/list.rst:443
msgid "Meanwhile, the ``retirement`` list is transformed to the following::"
msgstr ""

#: ../../../core-api/list.rst:415
msgid ""
"The second function, list_cut_before(), is much the same, except it cuts "
"before the ``entry`` node, i.e. it removes all list entries from ``head`` up "
"to but excluding ``entry``, placing them in ``list`` instead. This example "
"assumes the same initial starting list as the previous example:"
msgstr ""

#: ../../../core-api/list.rst:451
msgid ""
"It should be noted that both functions will destroy links to any existing "
"nodes in the destination ``struct list_head *list``."
msgstr ""

#: ../../../core-api/list.rst:455
msgid "Moving entries and partial lists"
msgstr ""

#: ../../../core-api/list.rst:457
msgid ""
"The list_move() and list_move_tail() functions can be used to move an entry "
"from one list to another, to either the start or end respectively."
msgstr ""

#: ../../../core-api/list.rst:460
msgid ""
"In the following example, we'll assume we start with two lists (\"clowns\" "
"and \"sidewalk\" in the following initial state \"State 0\"::"
msgstr ""

#: ../../../core-api/list.rst:475
msgid "We apply the following example code to the two lists:"
msgstr ""

#: ../../../core-api/list.rst:498 ../../../core-api/list.rst:620
msgid "In State 1, we arrive at the following situation::"
msgstr ""

#: ../../../core-api/list.rst:513
msgid ""
"In State 2, after we've moved Dimitri to the tail of sidewalk, the situation "
"changes as follows::"
msgstr ""

#: ../../../core-api/list.rst:529
msgid ""
"As long as the source and destination list head are part of the same list, "
"we can also efficiently bulk move a segment of the list to the tail end of "
"the list. We continue the previous example by adding a list_bulk_move_tail() "
"after State 2, moving Pic and Pio to the tail end of the sidewalk list."
msgstr ""

#: ../../../core-api/list.rst:559
msgid ""
"For the sake of brevity, only the altered \"sidewalk\" list at State 3 is "
"depicted in the following diagram::"
msgstr ""

#: ../../../core-api/list.rst:568
msgid ""
"Do note that list_bulk_move_tail() does not do any checking as to whether "
"all three supplied ``struct list_head *`` parameters really do belong to the "
"same list. If you use it outside the constraints the documentation gives, "
"then the result is a matter between you and the implementation."
msgstr ""

#: ../../../core-api/list.rst:574
msgid "Rotating entries"
msgstr ""

#: ../../../core-api/list.rst:576
msgid ""
"A common write operation on lists, especially when using them as queues, is "
"to rotate it. A list rotation means entries at the front are sent to the "
"back."
msgstr ""

#: ../../../core-api/list.rst:579
msgid ""
"For rotation, Linux provides us with two functions: list_rotate_left() and "
"list_rotate_to_front(). The former can be pictured like a bicycle chain, "
"taking the entry after the supplied ``struct list_head *`` and moving it to "
"the tail, which in essence means the entire list, due to its circular "
"nature, rotates by one position."
msgstr ""

#: ../../../core-api/list.rst:585
msgid ""
"The latter, list_rotate_to_front(), takes the same concept one step further: "
"instead of advancing the list by one entry, it advances it *until* the "
"specified entry is the new front."
msgstr ""

#: ../../../core-api/list.rst:589
msgid ""
"In the following example, our starting state, State 0, is the following::"
msgstr ""

#: ../../../core-api/list.rst:597
msgid ""
"The example code being used to demonstrate list rotations is the following:"
msgstr ""

#: ../../../core-api/list.rst:628
msgid ""
"Next, after the list_rotate_to_front() call, we arrive in the following "
"State 2::"
msgstr ""

#: ../../../core-api/list.rst:637
msgid ""
"As is hopefully evident from the diagrams, the entries in front of "
"\"Alfredo\" were cycled to the tail end of the list."
msgstr ""

#: ../../../core-api/list.rst:641
msgid "Swapping entries"
msgstr ""

#: ../../../core-api/list.rst:643
msgid ""
"Another common operation is that two entries need to be swapped with each "
"other."
msgstr ""

#: ../../../core-api/list.rst:645
msgid "For this, Linux provides us with list_swap()."
msgstr ""

#: ../../../core-api/list.rst:647
msgid ""
"In the following example, we have a list with three entries, and swap two of "
"them. This is our starting state in \"State 0\"::"
msgstr ""

#: ../../../core-api/list.rst:672
msgid "The resulting list at State 1 is the following::"
msgstr ""

#: ../../../core-api/list.rst:680
msgid ""
"As is evident by comparing the diagrams, the \"Pic\" and \"Dimitri\" nodes "
"have traded places."
msgstr ""

#: ../../../core-api/list.rst:684
msgid "Splicing two lists together"
msgstr ""

#: ../../../core-api/list.rst:686
msgid ""
"Say we have two lists, in the following example one represented by a list "
"head we call \"knie\" and one we call \"stey\". In a hypothetical circus "
"acquisition, the two list of clowns should be spliced together. The "
"following is our situation in \"State 0\"::"
msgstr ""

#: ../../../core-api/list.rst:704
msgid ""
"The function to splice these two lists together is list_splice(). Our "
"example code is as follows:"
msgstr ""

#: ../../../core-api/list.rst:730
msgid ""
"The list_splice() call here adds all the entries in ``stey`` to the list "
"``dimitri``'s ``node`` list_head is in, after the ``node`` of ``dimitri``. A "
"somewhat surprising diagram of the resulting \"State 1\" follows::"
msgstr ""

#: ../../../core-api/list.rst:747
msgid ""
"Traversing the ``stey`` list no longer results in correct behavior. A call "
"of list_for_each() on ``stey`` results in an infinite loop, as it never "
"returns back to the ``stey`` list head."
msgstr ""

#: ../../../core-api/list.rst:751
msgid ""
"This is because list_splice() did not reinitialize the list_head it took "
"entries from, leaving its pointer pointing into what is now a different list."
msgstr ""

#: ../../../core-api/list.rst:754
msgid ""
"If we want to avoid this situation, list_splice_init() can be used. It does "
"the same thing as list_splice(), except reinitalizes the donor list_head "
"after the transplant."
msgstr ""

#: ../../../core-api/list.rst:759
msgid "Concurrency considerations"
msgstr ""

#: ../../../core-api/list.rst:761
msgid ""
"Concurrent access and modification of a list needs to be protected with a "
"lock in most cases. Alternatively and preferably, one may use the RCU "
"primitives for lists in read-mostly use-cases, where read accesses to the "
"list are common but modifications to the list less so. See Documentation/RCU/"
"listRCU.rst for more details."
msgstr ""

#: ../../../core-api/list.rst:768
msgid "Further reading"
msgstr ""

#: ../../../core-api/list.rst:770
msgid ""
"`How does the kernel implements Linked Lists? - KernelNewbies <https://"
"kernelnewbies.org/FAQ/LinkedLists>`_"
msgstr ""

#: ../../../core-api/list.rst:773
msgid "Full List API"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:26
msgid "``LIST_HEAD_INIT (name)``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:24
msgid ""
"initialize a :c:type:`struct list_head <list_head>`'s links to point to "
"itself"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:28 include/linux/list.h:34
#: include/linux/list.h:41 include/linux/list.h:172 include/linux/list.h:186
#: include/linux/list.h:234 include/linux/list.h:247 include/linux/list.h:263
#: include/linux/list.h:277 include/linux/list.h:294 include/linux/list.h:304
#: include/linux/list.h:315 include/linux/list.h:327 include/linux/list.h:350
#: include/linux/list.h:360 include/linux/list.h:370 include/linux/list.h:380
#: include/linux/list.h:389 include/linux/list.h:407 include/linux/list.h:426
#: include/linux/list.h:440 include/linux/list.h:458 include/linux/list.h:479
#: include/linux/list.h:506 include/linux/list.h:550 include/linux/list.h:562
#: include/linux/list.h:574 include/linux/list.h:590 include/linux/list.h:607
#: include/linux/list.h:616 include/linux/list.h:627 include/linux/list.h:638
#: include/linux/list.h:652 include/linux/list.h:666 include/linux/list.h:674
#: include/linux/list.h:687 include/linux/list.h:695 include/linux/list.h:708
#: include/linux/list.h:716 include/linux/list.h:726 include/linux/list.h:734
#: include/linux/list.h:745 include/linux/list.h:756 include/linux/list.h:771
#: include/linux/list.h:780 include/linux/list.h:791 include/linux/list.h:802
#: include/linux/list.h:813 include/linux/list.h:827 include/linux/list.h:841
#: include/linux/list.h:853 include/linux/list.h:866 include/linux/list.h:879
#: include/linux/list.h:895 include/linux/list.h:910 include/linux/list.h:926
#: include/linux/list.h:957 include/linux/list.h:970 include/linux/list.h:983
#: include/linux/list.h:1002 include/linux/list.h:1016
#: include/linux/list.h:1030 include/linux/list.h:1048
#: include/linux/list.h:1062 include/linux/list.h:1078
#: include/linux/list.h:1091 include/linux/list.h:1100
#: include/linux/list.h:1114 include/linux/list.h:1131
#: include/linux/list.h:1165 include/linux/list.h:1176
#: include/linux/list.h:1186 include/linux/list.h:1195
#: include/linux/list.h:1207
msgid "**Parameters**"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:30 include/linux/list.h:36
msgid "``name``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:25 include/linux/list.h:31
msgid "name of the list_head"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:32
msgid "``LIST_HEAD (name)``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:30
msgid ""
"definition of a :c:type:`struct list_head <list_head>` with initialization "
"values"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:37
msgid "Initialize a list_head structure"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:43 include/linux/list.h:306
#: include/linux/list.h:317 include/linux/list.h:442 include/linux/list.h:481
#: include/linux/list.h:508 include/linux/list.h:564 include/linux/list.h:576
#: include/linux/list.h:592
msgid "``struct list_head *list``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:38
msgid "list_head structure to be initialized."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:40 include/linux/list.h:172
#: include/linux/list.h:186 include/linux/list.h:247 include/linux/list.h:263
#: include/linux/list.h:328 include/linux/list.h:388 include/linux/list.h:406
#: include/linux/list.h:440 include/linux/list.h:481 include/linux/list.h:507
#: include/linux/list.h:574 include/linux/list.h:590 include/linux/list.h:617
#: include/linux/list.h:628 include/linux/list.h:639 include/linux/list.h:653
#: include/linux/list.h:675 include/linux/list.h:696 include/linux/list.h:716
#: include/linux/list.h:803 include/linux/list.h:814 include/linux/list.h:828
#: include/linux/list.h:842 include/linux/list.h:855 include/linux/list.h:881
#: include/linux/list.h:897 include/linux/list.h:912 include/linux/list.h:927
#: include/linux/list.h:956 include/linux/list.h:969 include/linux/list.h:1001
#: include/linux/list.h:1015 include/linux/list.h:1030
#: include/linux/list.h:1077 include/linux/list.h:1100
#: include/linux/list.h:1114 include/linux/list.h:1132
msgid "**Description**"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:39
msgid ""
"Initializes the list_head to point to itself.  If it is a list header, the "
"result is an empty list."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:168
#: include/linux/list.h:182
msgid "add a new entry"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:174
#: include/linux/list.h:188 include/linux/list.h:246 include/linux/list.h:262
msgid "``struct list_head *new``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:169
#: include/linux/list.h:183 include/linux/list.h:1027 include/linux/list.h:1045
#: include/linux/list.h:1059
msgid "new entry to be added"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:171
#: include/linux/list.h:185 include/linux/list.h:303 include/linux/list.h:314
#: include/linux/list.h:329 include/linux/list.h:428 include/linux/list.h:439
#: include/linux/list.h:478 include/linux/list.h:505 include/linux/list.h:549
#: include/linux/list.h:561 include/linux/list.h:573 include/linux/list.h:589
#: include/linux/list.h:758
msgid "``struct list_head *head``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:170
msgid "list head to add it after"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:171
#: include/linux/list.h:1029
msgid ""
"Insert a new entry after the specified head. This is good for implementing "
"stacks."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:184
msgid "list head to add it before"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:185
msgid ""
"Insert a new entry before the specified head. This is useful for "
"implementing queues."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:230
msgid "deletes entry from list."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:236
#: include/linux/list.h:296 include/linux/list.h:391 include/linux/list.h:479
#: include/linux/list.h:506
msgid "``struct list_head *entry``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:231
#: include/linux/list.h:291 include/linux/list.h:386
msgid "the element to delete from the list."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:233
msgid "**Note**"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:232
msgid ""
"list_empty() on entry does not return true after this, the entry is in an "
"undefined state."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:243
msgid "replace old entry by new one"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:249
#: include/linux/list.h:265
msgid "``struct list_head *old``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:244
#: include/linux/list.h:260
msgid "the element to be replaced"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:245
#: include/linux/list.h:261
msgid "the new element to insert"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:246
#: include/linux/list.h:262
msgid "If **old** was empty, it will be overwritten."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:259
msgid "replace old entry by new one and initialize the old one"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:273
msgid "replace entry1 with entry2 and re-add entry1 at entry2's position"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:279
msgid "``struct list_head *entry1``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:274
msgid "the location to place entry2"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:276
msgid "``struct list_head *entry2``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:275
msgid "the location to place entry1"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:290
#: include/linux/list.h:385
msgid "deletes entry from list and reinitialize it."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:300
msgid "delete from one list and add as another's head"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:301
#: include/linux/list.h:312
msgid "the entry to move"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:302
msgid "the head that will precede our entry"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:311
msgid "delete from one list and add as another's tail"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:313
#: include/linux/list.h:324
msgid "the head that will follow our entry"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:323
msgid "move a subsection of a list to its tail"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:326
msgid "``struct list_head *first``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:325
msgid "first entry to move"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:327
msgid "``struct list_head *last``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:326
msgid "last entry to move, can be the same as first"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:327
msgid ""
"Move all entries between **first** and including **last** before **head**. "
"All three entries must belong to the same linked list."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:346
msgid "tests whether **list** is the first entry in list **head**"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:352
#: include/linux/list.h:362 include/linux/list.h:372 include/linux/list.h:552
msgid "``const struct list_head *list``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:347
#: include/linux/list.h:357 include/linux/list.h:367
msgid "the entry to test"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:349
#: include/linux/list.h:359 include/linux/list.h:369 include/linux/list.h:382
#: include/linux/list.h:409 include/linux/list.h:460
msgid "``const struct list_head *head``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:348
#: include/linux/list.h:358 include/linux/list.h:368 include/linux/list.h:423
#: include/linux/list.h:800
msgid "the head of the list"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:356
msgid "tests whether **list** is the last entry in list **head**"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:366
msgid "tests whether **list** is the list **head**"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:376
msgid "tests whether a list is empty"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:377
#: include/linux/list.h:455
msgid "the list to test."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:387
msgid ""
"This is the same as list_del_init(), except designed to be used together "
"with list_empty_careful() in a way to guarantee ordering of other memory "
"operations."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:391
msgid ""
"Any memory operations done before a list_del_init_careful() are guaranteed "
"to be visible after a list_empty_careful() test."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:403
msgid "tests whether a list is empty and not being modified"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:404
msgid "the list to test"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:406
msgid ""
"tests whether a list is empty _and_ checks that no other CPU might be in the "
"process of modifying either member (next or prev)"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:409
msgid "**NOTE**"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:410
msgid ""
"using list_empty_careful() without synchronization can only be safe if the "
"only activity that can happen to the list entry is list_del_init(). Eg. it "
"cannot be used if another CPU could re-list_add() it."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:422
msgid "rotate the list to the left"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:436
msgid "Rotate list to specific item."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:437
msgid "The desired new front of the list."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:438
msgid "The head of the list."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:439
msgid "Rotates list so that **list** becomes the new front of the list."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:454
msgid "tests whether a list has just one entry."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:475
msgid "cut a list into two"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:476
#: include/linux/list.h:503
msgid "a new list to add all removed entries"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:477
#: include/linux/list.h:504
msgid "a list with entries"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:478
msgid ""
"an entry within head, could be the head itself and if so we won't cut the "
"list"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:480
msgid ""
"This helper moves the initial part of **head**, up to and including "
"**entry**, from **head** to **list**. You should pass on **entry** an "
"element you know is on **head**. **list** should be an empty list or a list "
"you do not care about losing its data."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:502
msgid "cut a list into two, before given entry"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:505
msgid "an entry within head, could be the head itself"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:506
msgid ""
"This helper moves the initial part of **head**, up to but excluding "
"**entry**, from **head** to **list**.  You should pass in **entry** an "
"element you know is on **head**.  **list** should be an empty list or a list "
"you do not care about losing its data. If **entry** == **head**, all entries "
"on **head** are moved to **list**."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:546
msgid "join two lists, this is designed for stacks"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:547
#: include/linux/list.h:559 include/linux/list.h:571 include/linux/list.h:587
msgid "the new list to add."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:548
#: include/linux/list.h:560 include/linux/list.h:572 include/linux/list.h:588
msgid "the place to add it in the first list."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:558
msgid "join two lists, each list being a queue"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:570
msgid "join two lists and reinitialise the emptied list."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:573
msgid "The list at **list** is reinitialised"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:586
msgid "join two lists and reinitialise the emptied list"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:589
msgid "Each of the lists is a queue. The list at **list** is reinitialised"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:605
msgid "``list_entry (ptr, type, member)``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:603
msgid "get the struct for this entry"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:609
#: include/linux/list.h:618 include/linux/list.h:629 include/linux/list.h:640
#: include/linux/list.h:654
msgid "``ptr``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:604
msgid "the :c:type:`struct list_head <list_head>` pointer."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:606
#: include/linux/list.h:615 include/linux/list.h:626 include/linux/list.h:637
#: include/linux/list.h:651
msgid "``type``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:605
#: include/linux/list.h:614 include/linux/list.h:625 include/linux/list.h:636
#: include/linux/list.h:650
msgid "the type of the struct this is embedded in."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:607
#: include/linux/list.h:616 include/linux/list.h:627 include/linux/list.h:638
#: include/linux/list.h:652 include/linux/list.h:665 include/linux/list.h:674
#: include/linux/list.h:686 include/linux/list.h:695 include/linux/list.h:771
#: include/linux/list.h:780 include/linux/list.h:791 include/linux/list.h:802
#: include/linux/list.h:813 include/linux/list.h:827 include/linux/list.h:841
#: include/linux/list.h:854 include/linux/list.h:867 include/linux/list.h:880
#: include/linux/list.h:896 include/linux/list.h:911 include/linux/list.h:926
#: include/linux/list.h:1165 include/linux/list.h:1175
#: include/linux/list.h:1185 include/linux/list.h:1196
msgid "``member``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:606
#: include/linux/list.h:615 include/linux/list.h:626 include/linux/list.h:637
#: include/linux/list.h:651 include/linux/list.h:664 include/linux/list.h:673
#: include/linux/list.h:685 include/linux/list.h:694 include/linux/list.h:770
#: include/linux/list.h:779 include/linux/list.h:790 include/linux/list.h:801
#: include/linux/list.h:812 include/linux/list.h:826 include/linux/list.h:840
#: include/linux/list.h:853 include/linux/list.h:866 include/linux/list.h:879
#: include/linux/list.h:895 include/linux/list.h:910 include/linux/list.h:925
msgid "the name of the list_head within the struct."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:614
msgid "``list_first_entry (ptr, type, member)``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:612
#: include/linux/list.h:634
msgid "get the first element from a list"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:613
#: include/linux/list.h:624 include/linux/list.h:635 include/linux/list.h:649
#: include/linux/list.h:672 include/linux/list.h:693
msgid "the list head to take the element from."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:616
#: include/linux/list.h:627
msgid "Note, that list is expected to be not empty."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:625
msgid "``list_last_entry (ptr, type, member)``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:623
#: include/linux/list.h:648
msgid "get the last element from a list"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:636
msgid "``list_first_entry_or_null (ptr, type, member)``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:638
#: include/linux/list.h:652
msgid "Note that if the list is empty, it returns NULL."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:650
msgid "``list_last_entry_or_null (ptr, type, member)``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:664
msgid "``list_next_entry (pos, member)``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:662
#: include/linux/list.h:670
msgid "get the next element in list"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:668
#: include/linux/list.h:676 include/linux/list.h:689 include/linux/list.h:697
#: include/linux/list.h:710 include/linux/list.h:718 include/linux/list.h:728
#: include/linux/list.h:736 include/linux/list.h:747 include/linux/list.h:773
#: include/linux/list.h:782 include/linux/list.h:793 include/linux/list.h:804
#: include/linux/list.h:815 include/linux/list.h:829 include/linux/list.h:843
#: include/linux/list.h:855 include/linux/list.h:868 include/linux/list.h:881
#: include/linux/list.h:897 include/linux/list.h:912 include/linux/list.h:928
#: include/linux/list.h:1167 include/linux/list.h:1178
#: include/linux/list.h:1188 include/linux/list.h:1197
msgid "``pos``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:663
#: include/linux/list.h:684 include/linux/list.h:768
msgid "the type * to cursor"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:672
msgid "``list_next_entry_circular (pos, head, member)``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:671
#: include/linux/list.h:692
msgid "the type * to cursor."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:673
#: include/linux/list.h:694 include/linux/list.h:707 include/linux/list.h:715
#: include/linux/list.h:725 include/linux/list.h:734 include/linux/list.h:745
#: include/linux/list.h:770 include/linux/list.h:779 include/linux/list.h:790
#: include/linux/list.h:801 include/linux/list.h:812 include/linux/list.h:826
#: include/linux/list.h:840 include/linux/list.h:853 include/linux/list.h:866
#: include/linux/list.h:879 include/linux/list.h:895 include/linux/list.h:910
#: include/linux/list.h:1164 include/linux/list.h:1195
msgid "``head``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:674
msgid ""
"Wraparound if pos is the last element (return the first element). Note, that "
"list is expected to be not empty."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:685
msgid "``list_prev_entry (pos, member)``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:683
#: include/linux/list.h:691
msgid "get the prev element in list"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:693
msgid "``list_prev_entry_circular (pos, head, member)``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:695
msgid ""
"Wraparound if pos is the first element (return the last element). Note, that "
"list is expected to be not empty."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:706
msgid "``list_for_each (pos, head)``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:704
msgid "iterate over a list"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:705
#: include/linux/list.h:713 include/linux/list.h:723 include/linux/list.h:731
#: include/linux/list.h:742
msgid "the :c:type:`struct list_head <list_head>` to use as a loop cursor."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:706
#: include/linux/list.h:714 include/linux/list.h:724 include/linux/list.h:733
#: include/linux/list.h:744 include/linux/list.h:753 include/linux/list.h:769
#: include/linux/list.h:778 include/linux/list.h:789 include/linux/list.h:811
#: include/linux/list.h:825 include/linux/list.h:839 include/linux/list.h:852
#: include/linux/list.h:865 include/linux/list.h:878 include/linux/list.h:894
#: include/linux/list.h:909 include/linux/list.h:1163 include/linux/list.h:1194
msgid "the head for your list."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:714
msgid "``list_for_each_continue (pos, head)``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:712
msgid "continue iteration over a list"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:715
msgid "Continue to iterate over a list, continuing after the current position."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:724
msgid "``list_for_each_prev (pos, head)``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:722
msgid "iterate over a list backwards"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:732
msgid "``list_for_each_safe (pos, n, head)``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:730
msgid "iterate over a list safe against removal of list entry"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:733
#: include/linux/list.h:744 include/linux/list.h:865 include/linux/list.h:878
#: include/linux/list.h:894 include/linux/list.h:909 include/linux/list.h:925
#: include/linux/list.h:1194
msgid "``n``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:732
#: include/linux/list.h:743
msgid ""
"another :c:type:`struct list_head <list_head>` to use as temporary storage"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:743
msgid "``list_for_each_prev_safe (pos, n, head)``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:741
msgid "iterate over a list backwards safe against removal of list entry"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:752
msgid "count nodes in the list"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:769
msgid "``list_entry_is_head (pos, head, member)``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:767
msgid "test if the entry points to the head of the list"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:778
msgid "``list_for_each_entry (pos, head, member)``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:776
#: include/linux/list.h:1161
msgid "iterate over list of given type"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:777
#: include/linux/list.h:788 include/linux/list.h:810 include/linux/list.h:824
#: include/linux/list.h:838 include/linux/list.h:851 include/linux/list.h:863
#: include/linux/list.h:876 include/linux/list.h:892 include/linux/list.h:907
#: include/linux/list.h:1162 include/linux/list.h:1173
#: include/linux/list.h:1183 include/linux/list.h:1192
msgid "the type * to use as a loop cursor."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:789
msgid "``list_for_each_entry_reverse (pos, head, member)``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:787
msgid "iterate backwards over list of given type."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:800
msgid "``list_prepare_entry (pos, head, member)``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:798
msgid "prepare a pos entry for use in list_for_each_entry_continue()"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:799
msgid "the type * to use as a start point"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:802
msgid ""
"Prepares a pos entry for use as a start point in "
"list_for_each_entry_continue()."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:811
msgid "``list_for_each_entry_continue (pos, head, member)``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:809
msgid "continue iteration over list of given type"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:813
msgid ""
"Continue to iterate over list of given type, continuing after the current "
"position."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:825
msgid "``list_for_each_entry_continue_reverse (pos, head, member)``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:823
msgid "iterate backwards from the given point"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:827
msgid ""
"Start to iterate over list of given type backwards, continuing after the "
"current position."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:839
msgid "``list_for_each_entry_from (pos, head, member)``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:837
msgid "iterate over list of given type from the current point"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:841
msgid "Iterate over list of given type, continuing from current position."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:851
msgid "``list_for_each_entry_from_reverse (pos, head, member)``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:849
msgid "iterate backwards over list of given type from the current point"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:854
msgid ""
"Iterate backwards over list of given type, continuing from current position."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:864
msgid "``list_for_each_entry_safe (pos, n, head, member)``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:862
#: include/linux/list.h:1191
msgid "iterate over list of given type safe against removal of list entry"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:864
#: include/linux/list.h:877 include/linux/list.h:893 include/linux/list.h:908
msgid "another type * to use as temporary storage"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:877
msgid "``list_for_each_entry_safe_continue (pos, n, head, member)``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:875
msgid "continue list iteration safe against removal"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:880
msgid ""
"Iterate over list of given type, continuing after current point, safe "
"against removal of list entry."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:893
msgid "``list_for_each_entry_safe_from (pos, n, head, member)``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:891
msgid "iterate over list from current point safe against removal"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:896
msgid ""
"Iterate over list of given type from current point, safe against removal of "
"list entry."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:908
msgid "``list_for_each_entry_safe_reverse (pos, n, head, member)``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:906
msgid "iterate backwards over list safe against removal"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:911
msgid ""
"Iterate backwards over list of given type, safe against removal of list "
"entry."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:924
msgid "``list_safe_reset_next (pos, n, member)``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:922
msgid "reset a stale list_for_each_entry_safe loop"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:923
msgid "the loop cursor used in the list_for_each_entry_safe loop"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:924
msgid "temporary storage used in list_for_each_entry_safe"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:926
msgid ""
"list_safe_reset_next is not safe to use in general if the list may be "
"modified concurrently (eg. the lock is dropped in the loop body). An "
"exception to this is if the cursor element (pos) is pinned in the list, and "
"list_safe_reset_next is called after re-taking the lock and before "
"completing the current iteration of the loop body."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:953
msgid "Has node been removed from list and reinitialized?"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:959
#: include/linux/list.h:972
msgid "``const struct hlist_node *h``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:954
#: include/linux/list.h:967
msgid "Node to be checked"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:955
msgid ""
"Not that not all removal functions will leave a node in unhashed state.  For "
"example, hlist_nulls_del_init_rcu() does leave the node in unhashed state, "
"but hlist_nulls_del() does not."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:966
msgid "Version of hlist_unhashed for lockless use"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:968
msgid ""
"This variant of hlist_unhashed() must be used in lockless contexts to avoid "
"potential load-tearing.  The READ_ONCE() is paired with the various "
"WRITE_ONCE() in hlist helpers that are defined below."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:979
msgid "Is the specified hlist_head structure an empty hlist?"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:985
msgid "``const struct hlist_head *h``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:980
msgid "Structure to check."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:998
msgid "Delete the specified hlist_node from its list"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1004
#: include/linux/list.h:1018 include/linux/list.h:1032
#: include/linux/list.h:1050 include/linux/list.h:1064
#: include/linux/list.h:1080 include/linux/list.h:1102
msgid "``struct hlist_node *n``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:999
#: include/linux/list.h:1013
msgid "Node to delete."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1000
msgid ""
"Note that this function leaves the node in hashed state.  Use "
"hlist_del_init() or similar instead to unhash **n**."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1012
msgid "Delete the specified hlist_node from its list and initialize"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1014
msgid "Note that this function leaves the node in unhashed state."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1026
msgid "add a new entry at the beginning of the hlist"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1029
#: include/linux/list.h:1099
msgid "``struct hlist_head *h``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1028
msgid "hlist head to add it after"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1044
msgid "add a new entry before the one specified"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1047
msgid "``struct hlist_node *next``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1046
msgid "hlist node to add it before, which must be non-NULL"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1058
msgid "add a new entry after the one specified"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1061
msgid "``struct hlist_node *prev``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1060
msgid "hlist node to add it after, which must be non-NULL"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1074
msgid "create a fake hlist consisting of a single headless node"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1075
msgid "Node to make a fake list out of"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1076
msgid ""
"This makes **n** appear to be its own predecessor on a headless hlist. The "
"point of this is to allow things like hlist_del() to work correctly in cases "
"where there is no list."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1087
msgid "Is this node a fake hlist?"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1093
msgid "``struct hlist_node *h``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1088
msgid "Node to check for being a self-referential fake hlist."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1096
msgid "is node the only element of the specified hlist?"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1097
msgid "Node to check for singularity."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1098
msgid "Header for potentially singular list."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1099
msgid ""
"Check whether the node is the only node of the head without accessing head, "
"thus avoiding unnecessary cache misses."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1110
msgid "Move an hlist"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1116
msgid "``struct hlist_head *old``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1111
msgid "hlist_head for old list."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1113
msgid "``struct hlist_head *new``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1112
msgid "hlist_head for new list."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1113
msgid ""
"Move a list from one list head to another. Fixup the pprev reference of the "
"first entry if it exists."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1127
msgid "move all entries from one list to another"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1133
msgid "``struct hlist_head *from``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1128
msgid "hlist_head from which entries will be moved"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1130
msgid "``struct hlist_node *last``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1129
msgid "last entry on the **from** list"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1131
msgid "``struct hlist_head *to``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1130
msgid "hlist_head to which entries will be moved"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1131
msgid "**to** can be empty, **from** must contain at least **last**."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1163
msgid "``hlist_for_each_entry (pos, head, member)``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1164
#: include/linux/list.h:1174 include/linux/list.h:1184
#: include/linux/list.h:1195
msgid "the name of the hlist_node within the struct."
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1174
msgid "``hlist_for_each_entry_continue (pos, member)``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1172
msgid "iterate over a hlist continuing after current point"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1184
msgid "``hlist_for_each_entry_from (pos, member)``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1182
msgid "iterate over a hlist continuing from current point"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1193
msgid "``hlist_for_each_entry_safe (pos, n, head, member)``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1193
msgid "a :c:type:`struct hlist_node <hlist_node>` to use as temporary storage"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1203
msgid "count nodes in the hlist"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1209
msgid "``struct hlist_head *head``"
msgstr ""

#: ../../../core-api/list:775: include/linux/list.h:1204
msgid "the head for your hlist."
msgstr ""
