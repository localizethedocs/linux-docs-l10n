# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../kbuild/gendwarfksyms.rst:3
msgid "DWARF module versioning"
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:6
msgid "Introduction"
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:8
msgid ""
"When CONFIG_MODVERSIONS is enabled, symbol versions for modules are "
"typically calculated from preprocessed source code using the **genksyms** "
"tool.  However, this is incompatible with languages such as Rust, where the "
"source code has insufficient information about the resulting ABI. With "
"CONFIG_GENDWARFKSYMS (and CONFIG_DEBUG_INFO) selected, **gendwarfksyms** is "
"used instead to calculate symbol versions from the DWARF debugging "
"information, which contains the necessary details about the final module ABI."
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:18
msgid "Usage"
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:20
msgid ""
"gendwarfksyms accepts a list of object files on the command line, and a list "
"of symbol names (one per line) in standard input::"
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:37
msgid "Type information availability"
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:39
msgid ""
"While symbols are typically exported in the same translation unit (TU) where "
"they're defined, it's also perfectly fine for a TU to export external "
"symbols. For example, this is done when calculating symbol versions for "
"exports in stand-alone assembly code."
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:44
msgid ""
"To ensure the compiler emits the necessary DWARF type information in the TU "
"where symbols are actually exported, gendwarfksyms adds a pointer to "
"exported symbols in the `EXPORT_SYMBOL()` macro using the following macro::"
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:54
msgid ""
"When a symbol pointer is found in DWARF, gendwarfksyms can use its type for "
"calculating symbol versions even if the symbol is defined elsewhere. The "
"name of the symbol pointer is expected to start with `__gendwarfksyms_ptr_`, "
"followed by the name of the exported symbol."
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:60
msgid "Symtypes output format"
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:62
msgid ""
"Similarly to genksyms, gendwarfksyms supports writing a symtypes file for "
"each processed object that contain types for exported symbols and each "
"referenced type that was used in calculating symbol versions. These files "
"can be useful when trying to determine what exactly caused symbol versions "
"to change between builds. To generate symtypes files during a kernel build, "
"set `KBUILD_SYMTYPES=1`."
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:69
msgid ""
"Matching the existing format, the first column of each line contains either "
"a type reference or a symbol name. Type references have a one-letter prefix "
"followed by \"#\" and the name of the type. Four reference types are "
"supported::"
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:79
msgid "Type names with spaces in them are wrapped in single quotes, e.g.::"
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:83
msgid ""
"The rest of the line contains a type string. Unlike with genksyms that "
"produces C-style type strings, gendwarfksyms uses the same simple parsed "
"DWARF format produced by **--dump-dies**, but with type references instead "
"of fully expanded strings."
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:89
msgid "Maintaining a stable kABI"
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:91
msgid ""
"Distribution maintainers often need the ability to make ABI compatible "
"changes to kernel data structures due to LTS updates or backports. Using the "
"traditional `#ifndef __GENKSYMS__` to hide these changes from symbol "
"versioning won't work when processing object files. To support this use "
"case, gendwarfksyms provides kABI stability features designed to hide "
"changes that won't affect the ABI when calculating versions. These features "
"are all gated behind the **--stable** command line flag and are not used in "
"the mainline kernel. To use stable features during a kernel build, set "
"`KBUILD_GENDWARFKSYMS_STABLE=1`."
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:101
msgid ""
"Examples for using these features are provided in the **scripts/"
"gendwarfksyms/examples** directory, including helper macros for source code "
"annotation. Note that as these features are only used to transform the "
"inputs for symbol versioning, the user is responsible for ensuring that "
"their changes actually won't break the ABI."
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:108
msgid "kABI rules"
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:110
msgid ""
"kABI rules allow distributions to fine-tune certain parts of gendwarfksyms "
"output and thus control how symbol versions are calculated. These rules are "
"defined in the `.discard.gendwarfksyms.kabi_rules` section of the object "
"file and consist of simple null-terminated strings with the following "
"structure::"
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:118
msgid ""
"This string sequence is repeated as many times as needed to express all the "
"rules. The fields are as follows:"
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:121
msgid ""
"`version`: Ensures backward compatibility for future changes to the "
"structure. Currently expected to be \"1\"."
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:123
msgid "`type`: Indicates the type of rule being applied."
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:124
msgid ""
"`target`: Specifies the target of the rule, typically the fully qualified "
"name of the DWARF Debugging Information Entry (DIE)."
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:126
msgid "`value`: Provides rule-specific data."
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:128
msgid ""
"The following helper macros, for example, can be used to specify rules in "
"the source code::"
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:141
msgid ""
"Currently, only the rules discussed in this section are supported, but the "
"format is extensible enough to allow further rules to be added as need "
"arises."
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:146
msgid "Managing definition visibility"
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:148
msgid ""
"A declaration can change into a full definition when additional includes are "
"pulled into the translation unit. This changes the versions of any symbol "
"that references the type even if the ABI remains unchanged. As it may not be "
"possible to drop includes without breaking the build, the `declonly` rule "
"can be used to specify a type as declaration-only, even if the debugging "
"information contains the full definition."
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:155 ../../../kbuild/gendwarfksyms.rst:182
#: ../../../kbuild/gendwarfksyms.rst:243 ../../../kbuild/gendwarfksyms.rst:279
msgid "The rule fields are expected to be as follows:"
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:157
msgid "`type`: \"declonly\""
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:158 ../../../kbuild/gendwarfksyms.rst:246
msgid ""
"`target`: The fully qualified name of the target data structure (as shown in "
"**--dump-dies** output)."
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:160 ../../../kbuild/gendwarfksyms.rst:188
msgid "`value`: This field is ignored."
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:162 ../../../kbuild/gendwarfksyms.rst:190
#: ../../../kbuild/gendwarfksyms.rst:215 ../../../kbuild/gendwarfksyms.rst:251
#: ../../../kbuild/gendwarfksyms.rst:287
msgid "Using the `__KABI_RULE` macro, this rule can be defined as::"
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:166 ../../../kbuild/gendwarfksyms.rst:195
#: ../../../kbuild/gendwarfksyms.rst:220 ../../../kbuild/gendwarfksyms.rst:256
#: ../../../kbuild/gendwarfksyms.rst:292
msgid "Example usage::"
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:175
msgid "Adding enumerators"
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:177
msgid ""
"For enums, all enumerators and their values are included in calculating "
"symbol versions, which becomes a problem if we later need to add more "
"enumerators without changing symbol versions. The `enumerator_ignore` rule "
"allows us to hide named enumerators from the input."
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:184
msgid "`type`: \"enumerator_ignore\""
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:185 ../../../kbuild/gendwarfksyms.rst:210
msgid ""
"`target`: The fully qualified name of the target enum (as shown in **--dump-"
"dies** output) and the name of the enumerator field separated by a space."
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:204
msgid ""
"If the enum additionally includes an end marker and new values must be added "
"in the middle, we may need to use the old value for the last enumerator when "
"calculating versions. The `enumerator_value` rule allows us to override the "
"value of an enumerator for version calculation:"
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:209
msgid "`type`: \"enumerator_value\""
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:213
msgid "`value`: Integer value used for the field."
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:230
msgid "Managing structure size changes"
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:232
msgid ""
"A data structure can be partially opaque to modules if its allocation is "
"handled by the core kernel, and modules only need to access some of its "
"members. In this situation, it's possible to append new members to the "
"structure without breaking the ABI, as long as the layout for the original "
"members remains unchanged."
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:238
msgid ""
"To append new members, we can hide them from symbol versioning as described "
"in section :ref:`Hiding members <hiding_members>`, but we can't hide the "
"increase in structure size. The `byte_size` rule allows us to override the "
"structure size used for symbol versioning."
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:245
msgid "`type`: \"byte_size\""
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:248
msgid ""
"`value`: A positive decimal number indicating the structure size in bytes."
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:270
msgid "Overriding type strings"
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:272
msgid ""
"In rare situations where distributions must make significant changes to "
"otherwise opaque data structures that have inadvertently been included in "
"the published ABI, keeping symbol versions stable using the more targeted "
"kABI rules can become tedious. The `type_string` rule allows us to override "
"the full type string for a type or a symbol, and even add types for "
"versioning that no longer exist in the kernel."
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:281
msgid "`type`: \"type_string\""
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:282
msgid ""
"`target`: The fully qualified name of the target data structure (as shown in "
"**--dump-dies** output) or symbol."
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:284
msgid ""
"`value`: A valid type string (as shown in **--symtypes**) output) to use "
"instead of the real type."
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:305
msgid ""
"The `type_string` rule should be used only as a last resort if maintaining a "
"stable symbol versions cannot be reasonably achieved using other means. "
"Overriding a type string increases the risk of actual ABI breakages going "
"unnoticed as it hides all changes to the type."
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:311
msgid "Adding structure members"
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:313
msgid ""
"Perhaps the most common ABI compatible change is adding a member to a kernel "
"data structure. When changes to a structure are anticipated, distribution "
"maintainers can pre-emptively reserve space in the structure and take it "
"into use later without breaking the ABI. If changes are needed to data "
"structures without reserved space, existing alignment holes can potentially "
"be used instead. While kABI rules could be added for these type of changes, "
"using unions is typically a more natural method. This section describes "
"gendwarfksyms support for using reserved space in data structures and hiding "
"members that don't change the ABI when calculating symbol versions."
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:325
msgid "Reserving space and replacing members"
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:327
msgid ""
"Space is typically reserved for later use by appending integer types, or "
"arrays, to the end of the data structure, but any type can be used. Each "
"reserved member needs a unique name, but as the actual purpose is usually "
"not known at the time the space is reserved, for convenience, names that "
"start with `__kabi_` are left out when calculating symbol versions::"
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:338
msgid ""
"The reserved space can be taken into use by wrapping the member in a union, "
"which includes the original type and the replacement member::"
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:349
msgid ""
"If the `__kabi_` naming scheme was used when reserving space, the name of "
"the first member of the union must start with `__kabi_reserved`. This "
"ensures the original type is used when calculating versions, but the name is "
"again left out. The rest of the union is ignored."
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:354
msgid ""
"If we're replacing a member that doesn't follow this naming convention, we "
"also need to preserve the original name to avoid changing versions, which we "
"can do by changing the first union member's name to start with "
"`__kabi_renamed` followed by the original name."
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:359
msgid ""
"The examples include `KABI_(RESERVE|USE|REPLACE)*` macros that help simplify "
"the process and also ensure the replacement member is correctly aligned and "
"its size won't exceed the reserved space."
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:366
msgid "Hiding members"
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:368
msgid ""
"Predicting which structures will require changes during the support "
"timeframe isn't always possible, in which case one might have to resort to "
"placing new members into existing alignment holes::"
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:379
msgid ""
"While this won't change the size of the data structure, one needs to be able "
"to hide the added members from symbol versioning. Similarly to reserved "
"fields, this can be accomplished by wrapping the added member to a union "
"where one of the fields has a name starting with `__kabi_ignored`::"
msgstr ""

#: ../../../kbuild/gendwarfksyms.rst:394
msgid ""
"With **--stable**, both versions produce the same symbol version. The "
"examples include a `KABI_IGNORE` macro to simplify the code."
msgstr ""
