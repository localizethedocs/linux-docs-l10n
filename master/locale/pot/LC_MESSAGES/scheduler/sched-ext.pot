# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../scheduler/sched-ext.rst:5
msgid "Extensible Scheduler Class"
msgstr ""

#: ../../../scheduler/sched-ext.rst:7
msgid ""
"sched_ext is a scheduler class whose behavior can be defined by a set of BPF "
"programs - the BPF scheduler."
msgstr ""

#: ../../../scheduler/sched-ext.rst:10
msgid ""
"sched_ext exports a full scheduling interface so that any scheduling "
"algorithm can be implemented on top."
msgstr ""

#: ../../../scheduler/sched-ext.rst:13
msgid ""
"The BPF scheduler can group CPUs however it sees fit and schedule them "
"together, as tasks aren't tied to specific CPUs at the time of wakeup."
msgstr ""

#: ../../../scheduler/sched-ext.rst:16
msgid "The BPF scheduler can be turned on and off dynamically anytime."
msgstr ""

#: ../../../scheduler/sched-ext.rst:18
msgid ""
"The system integrity is maintained no matter what the BPF scheduler does. "
"The default scheduling behavior is restored anytime an error is detected, a "
"runnable task stalls, or on invoking the SysRq key sequence `SysRq-S`."
msgstr ""

#: ../../../scheduler/sched-ext.rst:23
msgid ""
"When the BPF scheduler triggers an error, debug information is dumped to aid "
"debugging. The debug dump is passed to and printed out by the scheduler "
"binary. The debug dump can also be accessed through the `sched_ext_dump` "
"tracepoint. The SysRq key sequence `SysRq-D` triggers a debug dump. This "
"doesn't terminate the BPF scheduler and can only be read through the "
"tracepoint."
msgstr ""

#: ../../../scheduler/sched-ext.rst:31
msgid "Switching to and from sched_ext"
msgstr ""

#: ../../../scheduler/sched-ext.rst:33
msgid ""
"``CONFIG_SCHED_CLASS_EXT`` is the config option to enable sched_ext and "
"``tools/sched_ext`` contains the example schedulers. The following config "
"options should be enabled to use sched_ext:"
msgstr ""

#: ../../../scheduler/sched-ext.rst:49
msgid "sched_ext is used only when the BPF scheduler is loaded and running."
msgstr ""

#: ../../../scheduler/sched-ext.rst:51
msgid ""
"If a task explicitly sets its scheduling policy to ``SCHED_EXT``, it will be "
"treated as ``SCHED_NORMAL`` and scheduled by the fair-class scheduler until "
"the BPF scheduler is loaded."
msgstr ""

#: ../../../scheduler/sched-ext.rst:55
msgid ""
"When the BPF scheduler is loaded and ``SCX_OPS_SWITCH_PARTIAL`` is not set "
"in ``ops->flags``, all ``SCHED_NORMAL``, ``SCHED_BATCH``, ``SCHED_IDLE``, "
"and ``SCHED_EXT`` tasks are scheduled by sched_ext."
msgstr ""

#: ../../../scheduler/sched-ext.rst:59
msgid ""
"However, when the BPF scheduler is loaded and ``SCX_OPS_SWITCH_PARTIAL`` is "
"set in ``ops->flags``, only tasks with the ``SCHED_EXT`` policy are "
"scheduled by sched_ext, while tasks with ``SCHED_NORMAL``, ``SCHED_BATCH`` "
"and ``SCHED_IDLE`` policies are scheduled by the fair-class scheduler."
msgstr ""

#: ../../../scheduler/sched-ext.rst:64
msgid ""
"Terminating the sched_ext scheduler program, triggering `SysRq-S`, or "
"detection of any internal error including stalled runnable tasks aborts the "
"BPF scheduler and reverts all tasks back to the fair-class scheduler."
msgstr ""

#: ../../../scheduler/sched-ext.rst:79
msgid "The current status of the BPF scheduler can be determined as follows:"
msgstr ""

#: ../../../scheduler/sched-ext.rst:88
msgid ""
"You can check if any BPF scheduler has ever been loaded since boot by "
"examining this monotonically incrementing counter (a value of zero indicates "
"that no BPF scheduler has been loaded):"
msgstr ""

#: ../../../scheduler/sched-ext.rst:97
msgid ""
"``tools/sched_ext/scx_show_state.py`` is a drgn script which shows more "
"detailed information:"
msgstr ""

#: ../../../scheduler/sched-ext.rst:112
msgid "Whether a given task is on sched_ext can be determined as follows:"
msgstr ""

#: ../../../scheduler/sched-ext.rst:120
msgid "The Basics"
msgstr ""

#: ../../../scheduler/sched-ext.rst:122
msgid ""
"Userspace can implement an arbitrary BPF scheduler by loading a set of BPF "
"programs that implement ``struct sched_ext_ops``. The only mandatory field "
"is ``ops.name`` which must be a valid BPF object name. All operations are "
"optional. The following modified excerpt is from ``tools/sched_ext/"
"scx_simple.bpf.c`` showing a minimal global FIFO scheduler."
msgstr ""

#: ../../../scheduler/sched-ext.rst:197
msgid "Dispatch Queues"
msgstr ""

#: ../../../scheduler/sched-ext.rst:199
msgid ""
"To match the impedance between the scheduler core and the BPF scheduler, "
"sched_ext uses DSQs (dispatch queues) which can operate as both a FIFO and a "
"priority queue. By default, there is one global FIFO (``SCX_DSQ_GLOBAL``), "
"and one local DSQ per CPU (``SCX_DSQ_LOCAL``). The BPF scheduler can manage "
"an arbitrary number of DSQs using ``scx_bpf_create_dsq()`` and "
"``scx_bpf_destroy_dsq()``."
msgstr ""

#: ../../../scheduler/sched-ext.rst:206
msgid ""
"A CPU always executes a task from its local DSQ. A task is \"inserted\" into "
"a DSQ. A task in a non-local DSQ is \"move\"d into the target CPU's local "
"DSQ."
msgstr ""

#: ../../../scheduler/sched-ext.rst:209
msgid ""
"When a CPU is looking for the next task to run, if the local DSQ is not "
"empty, the first task is picked. Otherwise, the CPU tries to move a task "
"from the global DSQ. If that doesn't yield a runnable task either, ``ops."
"dispatch()`` is invoked."
msgstr ""

#: ../../../scheduler/sched-ext.rst:215
msgid "Scheduling Cycle"
msgstr ""

#: ../../../scheduler/sched-ext.rst:217
msgid ""
"The following briefly shows how a waking task is scheduled and executed."
msgstr ""

#: ../../../scheduler/sched-ext.rst:219
msgid ""
"When a task is waking up, ``ops.select_cpu()`` is the first operation "
"invoked. This serves two purposes. First, CPU selection optimization hint. "
"Second, waking up the selected CPU if idle."
msgstr ""

#: ../../../scheduler/sched-ext.rst:223
msgid ""
"The CPU selected by ``ops.select_cpu()`` is an optimization hint and not "
"binding. The actual decision is made at the last step of scheduling. "
"However, there is a small performance gain if the CPU ``ops.select_cpu()`` "
"returns matches the CPU the task eventually runs on."
msgstr ""

#: ../../../scheduler/sched-ext.rst:228
msgid ""
"A side-effect of selecting a CPU is waking it up from idle. While a BPF "
"scheduler can wake up any cpu using the ``scx_bpf_kick_cpu()`` helper, using "
"``ops.select_cpu()`` judiciously can be simpler and more efficient."
msgstr ""

#: ../../../scheduler/sched-ext.rst:232
msgid ""
"A task can be immediately inserted into a DSQ from ``ops.select_cpu()`` by "
"calling ``scx_bpf_dsq_insert()``. If the task is inserted into "
"``SCX_DSQ_LOCAL`` from ``ops.select_cpu()``, it will be inserted into the "
"local DSQ of whichever CPU is returned from ``ops.select_cpu()``. "
"Additionally, inserting directly from ``ops.select_cpu()`` will cause the "
"``ops.enqueue()`` callback to be skipped."
msgstr ""

#: ../../../scheduler/sched-ext.rst:239
msgid ""
"Note that the scheduler core will ignore an invalid CPU selection, for "
"example, if it's outside the allowed cpumask of the task."
msgstr ""

#: ../../../scheduler/sched-ext.rst:242
msgid ""
"Once the target CPU is selected, ``ops.enqueue()`` is invoked (unless the "
"task was inserted directly from ``ops.select_cpu()``). ``ops.enqueue()`` can "
"make one of the following decisions:"
msgstr ""

#: ../../../scheduler/sched-ext.rst:246
msgid ""
"Immediately insert the task into either the global or a local DSQ by calling "
"``scx_bpf_dsq_insert()`` with one of the following options: "
"``SCX_DSQ_GLOBAL``, ``SCX_DSQ_LOCAL``, or ``SCX_DSQ_LOCAL_ON | cpu``."
msgstr ""

#: ../../../scheduler/sched-ext.rst:250
msgid ""
"Immediately insert the task into a custom DSQ by calling "
"``scx_bpf_dsq_insert()`` with a DSQ ID which is smaller than 2^63."
msgstr ""

#: ../../../scheduler/sched-ext.rst:253
msgid "Queue the task on the BPF side."
msgstr ""

#: ../../../scheduler/sched-ext.rst:255
msgid ""
"When a CPU is ready to schedule, it first looks at its local DSQ. If empty, "
"it then looks at the global DSQ. If there still isn't a task to run, ``ops."
"dispatch()`` is invoked which can use the following two functions to "
"populate the local DSQ."
msgstr ""

#: ../../../scheduler/sched-ext.rst:260
msgid ""
"``scx_bpf_dsq_insert()`` inserts a task to a DSQ. Any target DSQ can be used "
"- ``SCX_DSQ_LOCAL``, ``SCX_DSQ_LOCAL_ON | cpu``, ``SCX_DSQ_GLOBAL`` or a "
"custom DSQ. While ``scx_bpf_dsq_insert()`` currently can't be called with "
"BPF locks held, this is being worked on and will be supported. "
"``scx_bpf_dsq_insert()`` schedules insertion rather than performing them "
"immediately. There can be up to ``ops.dispatch_max_batch`` pending tasks."
msgstr ""

#: ../../../scheduler/sched-ext.rst:268
msgid ""
"``scx_bpf_move_to_local()`` moves a task from the specified non-local DSQ to "
"the dispatching DSQ. This function cannot be called with any BPF locks held. "
"``scx_bpf_move_to_local()`` flushes the pending insertions tasks before "
"trying to move from the specified DSQ."
msgstr ""

#: ../../../scheduler/sched-ext.rst:273
msgid ""
"After ``ops.dispatch()`` returns, if there are tasks in the local DSQ, the "
"CPU runs the first one. If empty, the following steps are taken:"
msgstr ""

#: ../../../scheduler/sched-ext.rst:276
msgid "Try to move from the global DSQ. If successful, run the task."
msgstr ""

#: ../../../scheduler/sched-ext.rst:278
msgid "If ``ops.dispatch()`` has dispatched any tasks, retry #3."
msgstr ""

#: ../../../scheduler/sched-ext.rst:280
msgid ""
"If the previous task is an SCX task and still runnable, keep executing it "
"(see ``SCX_OPS_ENQ_LAST``)."
msgstr ""

#: ../../../scheduler/sched-ext.rst:283
msgid "Go idle."
msgstr ""

#: ../../../scheduler/sched-ext.rst:285
msgid ""
"Note that the BPF scheduler can always choose to dispatch tasks immediately "
"in ``ops.enqueue()`` as illustrated in the above simple example. If only the "
"built-in DSQs are used, there is no need to implement ``ops.dispatch()`` as "
"a task is never queued on the BPF scheduler and both the local and global "
"DSQs are executed automatically."
msgstr ""

#: ../../../scheduler/sched-ext.rst:291
msgid ""
"``scx_bpf_dsq_insert()`` inserts the task on the FIFO of the target DSQ. Use "
"``scx_bpf_dsq_insert_vtime()`` for the priority queue. Internal DSQs such as "
"``SCX_DSQ_LOCAL`` and ``SCX_DSQ_GLOBAL`` do not support priority-queue "
"dispatching, and must be dispatched to with ``scx_bpf_dsq_insert()``. See "
"the function documentation and usage in ``tools/sched_ext/scx_simple.bpf.c`` "
"for more information."
msgstr ""

#: ../../../scheduler/sched-ext.rst:299
msgid "Task Lifecycle"
msgstr ""

#: ../../../scheduler/sched-ext.rst:301
msgid ""
"The following pseudo-code summarizes the entire lifecycle of a task managed "
"by a sched_ext scheduler:"
msgstr ""

#: ../../../scheduler/sched-ext.rst:340
msgid "Where to Look"
msgstr ""

#: ../../../scheduler/sched-ext.rst:342
msgid ""
"``include/linux/sched/ext.h`` defines the core data structures, ops table "
"and constants."
msgstr ""

#: ../../../scheduler/sched-ext.rst:345
msgid ""
"``kernel/sched/ext.c`` contains sched_ext core implementation and helpers. "
"The functions prefixed with ``scx_bpf_`` can be called from the BPF "
"scheduler."
msgstr ""

#: ../../../scheduler/sched-ext.rst:349
msgid "``tools/sched_ext/`` hosts example BPF scheduler implementations."
msgstr ""

#: ../../../scheduler/sched-ext.rst:351
msgid ""
"``scx_simple[.bpf].c``: Minimal global FIFO scheduler example using a custom "
"DSQ."
msgstr ""

#: ../../../scheduler/sched-ext.rst:354
msgid ""
"``scx_qmap[.bpf].c``: A multi-level FIFO scheduler supporting five levels of "
"priority implemented with ``BPF_MAP_TYPE_QUEUE``."
msgstr ""

#: ../../../scheduler/sched-ext.rst:358
msgid "ABI Instability"
msgstr ""

#: ../../../scheduler/sched-ext.rst:360
msgid ""
"The APIs provided by sched_ext to BPF schedulers programs have no stability "
"guarantees. This includes the ops table callbacks and constants defined in "
"``include/linux/sched/ext.h``, as well as the ``scx_bpf_`` kfuncs defined in "
"``kernel/sched/ext.c``."
msgstr ""

#: ../../../scheduler/sched-ext.rst:365
msgid ""
"While we will attempt to provide a relatively stable API surface when "
"possible, they are subject to change without warning between kernel versions."
msgstr ""
