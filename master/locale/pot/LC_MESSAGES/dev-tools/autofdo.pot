# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../dev-tools/autofdo.rst:5
msgid "Using AutoFDO with the Linux kernel"
msgstr ""

#: ../../../dev-tools/autofdo.rst:7
msgid ""
"This enables AutoFDO build support for the kernel when using the Clang "
"compiler. AutoFDO (Auto-Feedback-Directed Optimization) is a type of profile-"
"guided optimization (PGO) used to enhance the performance of binary "
"executables. It gathers information about the frequency of execution of "
"various code paths within a binary using hardware sampling. This data is "
"then used to guide the compiler's optimization decisions, resulting in a "
"more efficient binary. AutoFDO is a powerful optimization technique, and "
"data indicates that it can significantly improve kernel performance. It's "
"especially beneficial for workloads affected by front-end stalls."
msgstr ""

#: ../../../dev-tools/autofdo.rst:18
msgid ""
"For AutoFDO builds, unlike non-FDO builds, the user must supply a profile. "
"Acquiring an AutoFDO profile can be done in several ways. AutoFDO profiles "
"are created by converting hardware sampling using the \"perf\" tool. It is "
"crucial that the workload used to create these perf files is representative; "
"they must exhibit runtime characteristics similar to the workloads that are "
"intended to be optimized. Failure to do so will result in the compiler "
"optimizing for the wrong objective."
msgstr ""

#: ../../../dev-tools/autofdo.rst:27
msgid ""
"The AutoFDO profile often encapsulates the program's behavior. If the "
"performance-critical codes are architecture-independent, the profile can be "
"applied across platforms to achieve performance gains. For instance, using "
"the profile generated on Intel architecture to build a kernel for AMD "
"architecture can also yield performance improvements."
msgstr ""

#: ../../../dev-tools/autofdo.rst:33
msgid ""
"There are two methods for acquiring a representative profile: (1) Sample "
"real workloads using a production environment. (2) Generate the profile "
"using a representative load test. When enabling the AutoFDO build "
"configuration without providing an AutoFDO profile, the compiler only "
"modifies the dwarf information in the kernel without impacting runtime "
"performance. It's advisable to use a kernel binary built with the same "
"AutoFDO configuration to collect the perf profile. While it's possible to "
"use a kernel built with different options, it may result in inferior "
"performance."
msgstr ""

#: ../../../dev-tools/autofdo.rst:43
msgid ""
"One can collect profiles using AutoFDO build for the previous kernel. "
"AutoFDO employs relative line numbers to match the profiles, offering some "
"tolerance for source changes. This mode is commonly used in a production "
"environment for profile collection."
msgstr ""

#: ../../../dev-tools/autofdo.rst:48
msgid ""
"In a profile collection based on a load test, the AutoFDO collection process "
"consists of the following steps:"
msgstr ""

#: ../../../dev-tools/autofdo.rst:51
msgid ""
"Initial build: The kernel is built with AutoFDO options without a profile."
msgstr ""

#: ../../../dev-tools/autofdo.rst:54
msgid ""
"Profiling: The above kernel is then run with a representative workload to "
"gather execution frequency data. This data is collected using hardware "
"sampling, via perf. AutoFDO is most effective on platforms supporting "
"advanced PMU features like LBR on Intel machines."
msgstr ""

#: ../../../dev-tools/autofdo.rst:60
msgid ""
"AutoFDO profile generation: Perf output file is converted to the AutoFDO "
"profile via offline tools."
msgstr ""

#: ../../../dev-tools/autofdo.rst:63
msgid "The support requires a Clang compiler LLVM 17 or later."
msgstr ""

#: ../../../dev-tools/autofdo.rst:66
msgid "Preparation"
msgstr ""

#: ../../../dev-tools/autofdo.rst:68
msgid "Configure the kernel with::"
msgstr ""

#: ../../../dev-tools/autofdo.rst:73
msgid "Customization"
msgstr ""

#: ../../../dev-tools/autofdo.rst:75
msgid ""
"The default CONFIG_AUTOFDO_CLANG setting covers kernel space objects for "
"AutoFDO builds. One can, however, enable or disable AutoFDO build for "
"individual files and directories by adding a line similar to the following "
"to the respective kernel Makefile:"
msgstr ""

#: ../../../dev-tools/autofdo.rst:80
msgid "For enabling a single file (e.g. foo.o) ::"
msgstr ""

#: ../../../dev-tools/autofdo.rst:84
msgid "For enabling all files in one directory ::"
msgstr ""

#: ../../../dev-tools/autofdo.rst:88
msgid "For disabling one file ::"
msgstr ""

#: ../../../dev-tools/autofdo.rst:92
msgid "For disabling all files in one directory ::"
msgstr ""

#: ../../../dev-tools/autofdo.rst:97
msgid "Workflow"
msgstr ""

#: ../../../dev-tools/autofdo.rst:99
msgid "Here is an example workflow for AutoFDO kernel:"
msgstr ""

#: ../../../dev-tools/autofdo.rst:101
msgid "Build the kernel on the host machine with LLVM enabled, for example, ::"
msgstr ""

#: ../../../dev-tools/autofdo.rst:106
msgid "Turn on AutoFDO build config::"
msgstr ""

#: ../../../dev-tools/autofdo.rst:110
msgid ""
"With a configuration that with LLVM enabled, use the following command::"
msgstr ""

#: ../../../dev-tools/autofdo.rst:114
msgid "After getting the config, build with ::"
msgstr ""

#: ../../../dev-tools/autofdo.rst:118
msgid "Install the kernel on the test machine."
msgstr ""

#: ../../../dev-tools/autofdo.rst:120
msgid ""
"Run the load tests. The '-c' option in perf specifies the sample event "
"period. We suggest using a suitable prime number, like 500009, for this "
"purpose."
msgstr ""

#: ../../../dev-tools/autofdo.rst:124
msgid "For Intel platforms::"
msgstr ""

#: ../../../dev-tools/autofdo.rst:128
msgid "For AMD platforms:"
msgstr ""

#: ../../../dev-tools/autofdo.rst:130
msgid ""
"The supported systems are: Zen3 with BRS, or Zen4 with amd_lbr_v2. To check,"
msgstr ""

#: ../../../dev-tools/autofdo.rst:132
msgid "For Zen3::"
msgstr ""

#: ../../../dev-tools/autofdo.rst:136
msgid "For Zen4::"
msgstr ""

#: ../../../dev-tools/autofdo.rst:140
msgid "The following command generated the perf data file::"
msgstr ""

#: ../../../dev-tools/autofdo.rst:144
msgid "(Optional) Download the raw perf file to the host machine."
msgstr ""

#: ../../../dev-tools/autofdo.rst:146
msgid ""
"To generate an AutoFDO profile, two offline tools are available: "
"create_llvm_prof and llvm_profgen. The create_llvm_prof tool is part of the "
"AutoFDO project and can be found on GitHub (https://github.com/google/"
"autofdo), version v0.30.1 or later. The llvm_profgen tool is included in the "
"LLVM compiler itself. It's important to note that the version of "
"llvm_profgen doesn't need to match the version of Clang. It needs to be the "
"LLVM 19 release of Clang or later, or just from the LLVM trunk. ::"
msgstr ""

#: ../../../dev-tools/autofdo.rst:157
msgid "or ::"
msgstr ""

#: ../../../dev-tools/autofdo.rst:161
msgid "Note that multiple AutoFDO profile files can be merged into one via::"
msgstr ""

#: ../../../dev-tools/autofdo.rst:165
msgid ""
"Rebuild the kernel using the AutoFDO profile file with the same config as "
"step 1, (Note CONFIG_AUTOFDO_CLANG needs to be enabled)::"
msgstr ""
