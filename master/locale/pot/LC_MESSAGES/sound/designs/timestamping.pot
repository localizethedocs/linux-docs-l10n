# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../sound/designs/timestamping.rst:3
msgid "ALSA PCM Timestamping"
msgstr ""

#: ../../../sound/designs/timestamping.rst:5
msgid "The ALSA API can provide two different system timestamps:"
msgstr ""

#: ../../../sound/designs/timestamping.rst:7
msgid ""
"Trigger_tstamp is the system time snapshot taken when the .trigger callback "
"is invoked. This snapshot is taken by the ALSA core in the general case, but "
"specific hardware may have synchronization capabilities or conversely may "
"only be able to provide a correct estimate with a delay. In the latter two "
"cases, the low-level driver is responsible for updating the trigger_tstamp "
"at the most appropriate and precise moment. Applications should not rely "
"solely on the first trigger_tstamp but update their internal calculations if "
"the driver provides a refined estimate with a delay."
msgstr ""

#: ../../../sound/designs/timestamping.rst:17
msgid ""
"tstamp is the current system timestamp updated during the last event or "
"application query. The difference (tstamp - trigger_tstamp) defines the "
"elapsed time."
msgstr ""

#: ../../../sound/designs/timestamping.rst:21
msgid ""
"The ALSA API provides two basic pieces of information, avail and delay, "
"which combined with the trigger and current system timestamps allow for "
"applications to keep track of the 'fullness' of the ring buffer and the "
"amount of queued samples."
msgstr ""

#: ../../../sound/designs/timestamping.rst:26
msgid ""
"The use of these different pointers and time information depends on the "
"application needs:"
msgstr ""

#: ../../../sound/designs/timestamping.rst:29
msgid "``avail`` reports how much can be written in the ring buffer"
msgstr ""

#: ../../../sound/designs/timestamping.rst:30
msgid ""
"``delay`` reports the time it will take to hear a new sample after all "
"queued samples have been played out."
msgstr ""

#: ../../../sound/designs/timestamping.rst:33
msgid ""
"When timestamps are enabled, the avail/delay information is reported along "
"with a snapshot of system time. Applications can select from "
"``CLOCK_REALTIME`` (NTP corrections including going backwards), "
"``CLOCK_MONOTONIC`` (NTP corrections but never going backwards), "
"``CLOCK_MONOTIC_RAW`` (without NTP corrections) and change the mode "
"dynamically with sw_params"
msgstr ""

#: ../../../sound/designs/timestamping.rst:41
msgid ""
"The ALSA API also provide an audio_tstamp which reflects the passage of time "
"as measured by different components of audio hardware.  In ascii-art, this "
"could be represented as follows (for the playback case): ::"
msgstr ""

#: ../../../sound/designs/timestamping.rst:58
msgid ""
"The analog time is taken at the last stage of the playback, as close as "
"possible to the actual transducer"
msgstr ""

#: ../../../sound/designs/timestamping.rst:61
msgid ""
"The link time is taken at the output of the SoC/chipset as the samples are "
"pushed on a link. The link time can be directly measured if supported in "
"hardware by sample counters or wallclocks (e.g. with HDAudio 24MHz or PTP "
"clock for networked solutions) or indirectly estimated (e.g. with the frame "
"counter in USB)."
msgstr ""

#: ../../../sound/designs/timestamping.rst:67
msgid ""
"The DMA time is measured using counters - typically the least reliable of "
"all measurements due to the bursty nature of DMA transfers."
msgstr ""

#: ../../../sound/designs/timestamping.rst:70
msgid ""
"The app time corresponds to the time tracked by an application after writing "
"in the ring buffer."
msgstr ""

#: ../../../sound/designs/timestamping.rst:73
msgid ""
"The application can query the hardware capabilities, define which audio time "
"it wants reported by selecting the relevant settings in audio_tstamp_config "
"fields, thus get an estimate of the timestamp accuracy. It can also request "
"the delay-to-analog be included in the measurement. Direct access to the "
"link time is very interesting on platforms that provide an embedded DSP; "
"measuring directly the link time with dedicated hardware, possibly "
"synchronized with system time, removes the need to keep track of internal "
"DSP processing times and latency."
msgstr ""

#: ../../../sound/designs/timestamping.rst:83
msgid ""
"In case the application requests an audio tstamp that is not supported in "
"hardware/low-level driver, the type is overridden as DEFAULT and the "
"timestamp will report the DMA time based on the hw_pointer value."
msgstr ""

#: ../../../sound/designs/timestamping.rst:87
msgid ""
"For backwards compatibility with previous implementations that did not "
"provide timestamp selection, with a zero-valued COMPAT timestamp type the "
"results will default to the HDAudio wall clock for playback streams and to "
"the DMA time (hw_ptr) in all other cases."
msgstr ""

#: ../../../sound/designs/timestamping.rst:92
msgid ""
"The audio timestamp accuracy can be returned to user-space, so that "
"appropriate decisions are made:"
msgstr ""

#: ../../../sound/designs/timestamping.rst:95
msgid ""
"for dma time (default), the granularity of the transfers can be inferred "
"from the steps between updates and in turn provide information on how much "
"the application pointer can be rewound safely."
msgstr ""

#: ../../../sound/designs/timestamping.rst:100
msgid ""
"the link time can be used to track long-term drifts between audio and system "
"time using the (tstamp-trigger_tstamp)/audio_tstamp ratio, the precision "
"helps define how much smoothing/low-pass filtering is required. The link "
"time can be either reset on startup or reported as is (the latter being "
"useful to compare progress of different streams - but may require the "
"wallclock to be always running and not wrap-around during idle periods). If "
"supported in hardware, the absolute link time could also be used to define a "
"precise start time (patches WIP)"
msgstr ""

#: ../../../sound/designs/timestamping.rst:110
msgid ""
"including the delay in the audio timestamp may counter-intuitively not "
"increase the precision of timestamps, e.g. if a codec includes variable-"
"latency DSP processing or a chain of hardware components the delay is "
"typically not known with precision."
msgstr ""

#: ../../../sound/designs/timestamping.rst:115
msgid ""
"The accuracy is reported in nanosecond units (using an unsigned 32-bit "
"word), which gives a max precision of 4.29s, more than enough for audio "
"applications..."
msgstr ""

#: ../../../sound/designs/timestamping.rst:119
msgid ""
"Due to the varied nature of timestamping needs, even for a single "
"application, the audio_tstamp_config can be changed dynamically. In the "
"``STATUS`` ioctl, the parameters are read-only and do not allow for any "
"application selection. To work around this limitation without impacting "
"legacy applications, a new ``STATUS_EXT`` ioctl is introduced with read/"
"write parameters. ALSA-lib will be modified to make use of ``STATUS_EXT`` "
"and effectively deprecate ``STATUS``."
msgstr ""

#: ../../../sound/designs/timestamping.rst:127
msgid ""
"The ALSA API only allows for a single audio timestamp to be reported at a "
"time. This is a conscious design decision, reading the audio timestamps from "
"hardware registers or from IPC takes time, the more timestamps are read the "
"more imprecise the combined measurements are. To avoid any interpretation "
"issues, a single (system, audio) timestamp is reported. Applications that "
"need different timestamps will be required to issue multiple queries and "
"perform an interpolation of the results"
msgstr ""

#: ../../../sound/designs/timestamping.rst:136
msgid ""
"In some hardware-specific configuration, the system timestamp is latched by "
"a low-level audio subsystem, and the information provided back to the "
"driver. Due to potential delays in the communication with the hardware, "
"there is a risk of misalignment with the avail and delay information. To "
"make sure applications are not confused, a driver_timestamp field is added "
"in the snd_pcm_status structure; this timestamp shows when the information "
"is put together by the driver before returning from the ``STATUS`` and "
"``STATUS_EXT`` ioctl. in most cases this driver_timestamp will be identical "
"to the regular system tstamp."
msgstr ""

#: ../../../sound/designs/timestamping.rst:146
msgid "Examples of timestamping with HDAudio:"
msgstr ""

#: ../../../sound/designs/timestamping.rst:148
msgid "1. DMA timestamp, no compensation for DMA+analog delay ::"
msgstr ""

#: ../../../sound/designs/timestamping.rst:159
msgid "2. DMA timestamp, compensation for DMA+analog delay ::"
msgstr ""

#: ../../../sound/designs/timestamping.rst:169
msgid "3. link timestamp, compensation for DMA+analog delay ::"
msgstr ""

#: ../../../sound/designs/timestamping.rst:180
msgid ""
"Example 1 shows that the timestamp at the DMA level is close to 1ms ahead of "
"the actual playback time (as a side time this sort of measurement can help "
"define rewind safeguards). Compensating for the DMA-link delay in example 2 "
"helps remove the hardware buffering but the information is still very "
"jittery, with up to one sample of error. In example 3 where the timestamps "
"are measured with the link wallclock, the timestamps show a monotonic "
"behavior and a lower dispersion."
msgstr ""

#: ../../../sound/designs/timestamping.rst:189
msgid ""
"Example 3 and 4 are with USB audio class. Example 3 shows a high offset "
"between audio time and system time due to buffering. Example 4 shows how "
"compensating for the delay exposes a 1ms accuracy (due to the use of the "
"frame counter by the driver)"
msgstr ""

#: ../../../sound/designs/timestamping.rst:194
msgid "Example 3: DMA timestamp, no compensation for delay, delta of ~5ms ::"
msgstr ""

#: ../../../sound/designs/timestamping.rst:206
msgid "Example 4: DMA timestamp, compensation for delay, delay of ~1ms ::"
msgstr ""
