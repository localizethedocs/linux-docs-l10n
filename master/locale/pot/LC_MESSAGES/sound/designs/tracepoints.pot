# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../sound/designs/tracepoints.rst:3
msgid "Tracepoints in ALSA"
msgstr ""

#: ../../../sound/designs/tracepoints.rst:5
msgid "2017/07/02 Takasahi Sakamoto"
msgstr ""

#: ../../../sound/designs/tracepoints.rst:9
msgid "Tracepoints in ALSA PCM core"
msgstr ""

#: ../../../sound/designs/tracepoints.rst:11
msgid ""
"ALSA PCM core registers ``snd_pcm`` subsystem to kernel tracepoint system. "
"This subsystem includes two categories of tracepoints; for state of PCM "
"buffer and for processing of PCM hardware parameters. These tracepoints are "
"available when corresponding kernel configurations are enabled. When "
"``CONFIG_SND_DEBUG`` is enabled, the latter tracepoints are available. When "
"additional ``SND_PCM_XRUN_DEBUG`` is enabled too, the former trace points "
"are enabled."
msgstr ""

#: ../../../sound/designs/tracepoints.rst:19
msgid "Tracepoints for state of PCM buffer"
msgstr ""

#: ../../../sound/designs/tracepoints.rst:21
msgid ""
"This category includes four tracepoints; ``hwptr``, ``applptr``, ``xrun`` "
"and ``hw_ptr_error``."
msgstr ""

#: ../../../sound/designs/tracepoints.rst:25
msgid "Tracepoints for processing of PCM hardware parameters"
msgstr ""

#: ../../../sound/designs/tracepoints.rst:27
msgid ""
"This category includes two tracepoints; ``hw_mask_param`` and "
"``hw_interval_param``."
msgstr ""

#: ../../../sound/designs/tracepoints.rst:30
msgid ""
"In a design of ALSA PCM core, data transmission is abstracted as PCM "
"substream. Applications manage PCM substream to maintain data transmission "
"for PCM frames. Before starting the data transmission, applications need to "
"configure PCM substream. In this procedure, PCM hardware parameters are "
"decided by interaction between applications and ALSA PCM core. Once decided, "
"runtime of the PCM substream keeps the parameters."
msgstr ""

#: ../../../sound/designs/tracepoints.rst:37
msgid ""
"The parameters are described in struct snd_pcm_hw_params. This structure "
"includes several types of parameters. Applications set preferable value to "
"these parameters, then execute ioctl(2) with SNDRV_PCM_IOCTL_HW_REFINE or "
"SNDRV_PCM_IOCTL_HW_PARAMS. The former is used just for refining available "
"set of parameters. The latter is used for an actual decision of the "
"parameters."
msgstr ""

#: ../../../sound/designs/tracepoints.rst:43
msgid "The struct snd_pcm_hw_params structure has below members:"
msgstr ""

#: ../../../sound/designs/tracepoints.rst:45
msgid "``flags``"
msgstr ""

#: ../../../sound/designs/tracepoints.rst:46
msgid ""
"Configurable. ALSA PCM core and some drivers handle this flag to select "
"convenient parameters or change their behaviour."
msgstr ""

#: ../../../sound/designs/tracepoints.rst:48
msgid "``masks``"
msgstr ""

#: ../../../sound/designs/tracepoints.rst:49
msgid ""
"Configurable. This type of parameter is described in struct snd_mask and "
"represent mask values. As of PCM protocol v2.0.13, three types are defined."
msgstr ""

#: ../../../sound/designs/tracepoints.rst:53
msgid "SNDRV_PCM_HW_PARAM_ACCESS"
msgstr ""

#: ../../../sound/designs/tracepoints.rst:54
msgid "SNDRV_PCM_HW_PARAM_FORMAT"
msgstr ""

#: ../../../sound/designs/tracepoints.rst:55
msgid "SNDRV_PCM_HW_PARAM_SUBFORMAT"
msgstr ""

#: ../../../sound/designs/tracepoints.rst:56
msgid "``intervals``"
msgstr ""

#: ../../../sound/designs/tracepoints.rst:57
msgid ""
"Configurable. This type of parameter is described in struct snd_interval and "
"represent values with a range. As of PCM protocol v2.0.13, twelve types are "
"defined."
msgstr ""

#: ../../../sound/designs/tracepoints.rst:61
msgid "SNDRV_PCM_HW_PARAM_SAMPLE_BITS"
msgstr ""

#: ../../../sound/designs/tracepoints.rst:62
msgid "SNDRV_PCM_HW_PARAM_FRAME_BITS"
msgstr ""

#: ../../../sound/designs/tracepoints.rst:63
msgid "SNDRV_PCM_HW_PARAM_CHANNELS"
msgstr ""

#: ../../../sound/designs/tracepoints.rst:64
msgid "SNDRV_PCM_HW_PARAM_RATE"
msgstr ""

#: ../../../sound/designs/tracepoints.rst:65
msgid "SNDRV_PCM_HW_PARAM_PERIOD_TIME"
msgstr ""

#: ../../../sound/designs/tracepoints.rst:66
msgid "SNDRV_PCM_HW_PARAM_PERIOD_SIZE"
msgstr ""

#: ../../../sound/designs/tracepoints.rst:67
msgid "SNDRV_PCM_HW_PARAM_PERIOD_BYTES"
msgstr ""

#: ../../../sound/designs/tracepoints.rst:68
msgid "SNDRV_PCM_HW_PARAM_PERIODS"
msgstr ""

#: ../../../sound/designs/tracepoints.rst:69
msgid "SNDRV_PCM_HW_PARAM_BUFFER_TIME"
msgstr ""

#: ../../../sound/designs/tracepoints.rst:70
msgid "SNDRV_PCM_HW_PARAM_BUFFER_SIZE"
msgstr ""

#: ../../../sound/designs/tracepoints.rst:71
msgid "SNDRV_PCM_HW_PARAM_BUFFER_BYTES"
msgstr ""

#: ../../../sound/designs/tracepoints.rst:72
msgid "SNDRV_PCM_HW_PARAM_TICK_TIME"
msgstr ""

#: ../../../sound/designs/tracepoints.rst:73
msgid "``rmask``"
msgstr ""

#: ../../../sound/designs/tracepoints.rst:74
msgid ""
"Configurable. This is evaluated at ioctl(2) with SNDRV_PCM_IOCTL_HW_REFINE "
"only. Applications can select which mask/interval parameter can be changed "
"by ALSA PCM core. For SNDRV_PCM_IOCTL_HW_PARAMS, this mask is ignored and "
"all of parameters are going to be changed."
msgstr ""

#: ../../../sound/designs/tracepoints.rst:79
msgid "``cmask``"
msgstr ""

#: ../../../sound/designs/tracepoints.rst:80
msgid ""
"Read-only. After returning from ioctl(2), buffer in user space for struct "
"snd_pcm_hw_params includes result of each operation. This mask represents "
"which mask/interval parameter is actually changed."
msgstr ""

#: ../../../sound/designs/tracepoints.rst:83
msgid "``info``"
msgstr ""

#: ../../../sound/designs/tracepoints.rst:84
msgid ""
"Read-only. This represents hardware/driver capabilities as bit flags with "
"SNDRV_PCM_INFO_XXX. Typically, applications execute ioctl(2) with "
"SNDRV_PCM_IOCTL_HW_REFINE to retrieve this flag, then decide candidates of "
"parameters and execute ioctl(2) with SNDRV_PCM_IOCTL_HW_PARAMS to configure "
"PCM substream."
msgstr ""

#: ../../../sound/designs/tracepoints.rst:89
msgid "``msbits``"
msgstr ""

#: ../../../sound/designs/tracepoints.rst:90
msgid ""
"Read-only. This value represents available bit width in MSB side of a PCM "
"sample. When a parameter of SNDRV_PCM_HW_PARAM_SAMPLE_BITS was decided as a "
"fixed number, this value is also calculated according to it. Else, zero. But "
"this behaviour depends on implementations in driver side."
msgstr ""

#: ../../../sound/designs/tracepoints.rst:95
msgid "``rate_num``"
msgstr ""

#: ../../../sound/designs/tracepoints.rst:96
msgid ""
"Read-only. This value represents numerator of sampling rate in fraction "
"notation. Basically, when a parameter of SNDRV_PCM_HW_PARAM_RATE was decided "
"as a single value, this value is also calculated according to it. Else, "
"zero. But this behaviour depends on implementations in driver side."
msgstr ""

#: ../../../sound/designs/tracepoints.rst:101
msgid "``rate_den``"
msgstr ""

#: ../../../sound/designs/tracepoints.rst:102
msgid ""
"Read-only. This value represents denominator of sampling rate in fraction "
"notation. Basically, when a parameter of SNDRV_PCM_HW_PARAM_RATE was decided "
"as a single value, this value is also calculated according to it. Else, "
"zero. But this behaviour depends on implementations in driver side."
msgstr ""

#: ../../../sound/designs/tracepoints.rst:107
msgid "``fifo_size``"
msgstr ""

#: ../../../sound/designs/tracepoints.rst:108
msgid ""
"Read-only. This value represents the size of FIFO in serial sound interface "
"of hardware. Basically, each driver can assigns a proper value to this "
"parameter but some drivers intentionally set zero with a care of hardware "
"design or data transmission protocol."
msgstr ""

#: ../../../sound/designs/tracepoints.rst:113
msgid ""
"ALSA PCM core handles buffer of struct snd_pcm_hw_params when applications "
"execute ioctl(2) with SNDRV_PCM_HW_REFINE or SNDRV_PCM_HW_PARAMS. Parameters "
"in the buffer are changed according to struct snd_pcm_hardware and rules of "
"constraints in the runtime. The structure describes capabilities of handled "
"hardware. The rules describes dependencies on which a parameter is decided "
"according to several parameters. A rule has a callback function, and drivers "
"can register arbitrary functions to compute the target parameter. ALSA PCM "
"core registers some rules to the runtime as a default."
msgstr ""

#: ../../../sound/designs/tracepoints.rst:123
msgid ""
"Each driver can join in the interaction as long as it prepared for two "
"stuffs in a callback of struct snd_pcm_ops.open."
msgstr ""

#: ../../../sound/designs/tracepoints.rst:126
msgid ""
"In the callback, drivers are expected to change a member of struct "
"snd_pcm_hardware type in the runtime, according to capacities of "
"corresponding hardware."
msgstr ""

#: ../../../sound/designs/tracepoints.rst:129
msgid ""
"In the same callback, drivers are also expected to register additional rules "
"of constraints into the runtime when several parameters have dependencies "
"due to hardware design."
msgstr ""

#: ../../../sound/designs/tracepoints.rst:133
msgid ""
"The driver can refers to result of the interaction in a callback of struct "
"snd_pcm_ops.hw_params, however it should not change the content."
msgstr ""

#: ../../../sound/designs/tracepoints.rst:137
msgid ""
"Tracepoints in this category are designed to trace changes of the mask/"
"interval parameters. When ALSA PCM core changes them, ``hw_mask_param`` or "
"``hw_interval_param`` event is probed according to type of the changed "
"parameter."
msgstr ""

#: ../../../sound/designs/tracepoints.rst:141
msgid ""
"ALSA PCM core also has a pretty print format for each of the tracepoints. "
"Below is an example for ``hw_mask_param``."
msgstr ""

#: ../../../sound/designs/tracepoints.rst:149
msgid "Below is an example for ``hw_interval_param``."
msgstr ""

#: ../../../sound/designs/tracepoints.rst:155
msgid ""
"The first three fields are common. They represent name of ALSA PCM character "
"device, rules of constraint and name of the changed parameter, in order. The "
"field for rules of constraint consists of two sub-fields; index of applied "
"rule and total number of rules added to the runtime. As an exception, the "
"index 000 means that the parameter is changed by ALSA PCM core, regardless "
"of the rules."
msgstr ""

#: ../../../sound/designs/tracepoints.rst:161
msgid ""
"The rest of field represent state of the parameter before/after changing. "
"These fields are different according to type of the parameter. For "
"parameters of mask type, the fields represent hexadecimal dump of content of "
"the parameter. For parameters of interval type, the fields represent values "
"of each member of ``empty``, ``integer``, ``openmin``, ``min``, ``max``, "
"``openmax`` in struct snd_interval in this order."
msgstr ""

#: ../../../sound/designs/tracepoints.rst:169
msgid "Tracepoints in drivers"
msgstr ""

#: ../../../sound/designs/tracepoints.rst:171
msgid ""
"Some drivers have tracepoints for developers' convenience. For them, please "
"refer to each documentation or implementation."
msgstr ""
