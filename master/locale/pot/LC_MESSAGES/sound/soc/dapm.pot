# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../sound/soc/dapm.rst:3
msgid "Dynamic Audio Power Management for Portable Devices"
msgstr ""

#: ../../../sound/soc/dapm.rst:6
msgid "Description"
msgstr ""

#: ../../../sound/soc/dapm.rst:8
msgid ""
"Dynamic Audio Power Management (DAPM) is designed to allow portable Linux "
"devices to use the minimum amount of power within the audio subsystem at all "
"times. It is independent of other kernel power management frameworks and, as "
"such, can easily co-exist with them."
msgstr ""

#: ../../../sound/soc/dapm.rst:13
msgid ""
"DAPM is also completely transparent to all user space applications as all "
"power switching is done within the ASoC core. No code changes or recompiling "
"are required for user space applications. DAPM makes power switching "
"decisions based upon any audio stream (capture/playback) activity and audio "
"mixer settings within the device."
msgstr ""

#: ../../../sound/soc/dapm.rst:19
msgid "DAPM is based on two basic elements, called widgets and routes:"
msgstr ""

#: ../../../sound/soc/dapm.rst:21
msgid ""
"a **widget** is every part of the audio hardware that can be enabled by "
"software when in use and disabled to save power when not in use"
msgstr ""

#: ../../../sound/soc/dapm.rst:23
msgid ""
"a **route** is an interconnection between widgets that exists when sound can "
"flow from one widget to the other"
msgstr ""

#: ../../../sound/soc/dapm.rst:26
msgid ""
"All DAPM power switching decisions are made automatically by consulting an "
"audio routing graph. This graph is specific to each sound card and spans the "
"whole sound card, so some DAPM routes connect two widgets belonging to "
"different components (e.g. the LINE OUT pin of a CODEC and the input pin of "
"an amplifier)."
msgstr ""

#: ../../../sound/soc/dapm.rst:32
msgid "The graph for the STM32MP1-DK1 sound card is shown in picture:"
msgstr ""

#: ../../../sound/soc/dapm.rst:34
msgid "Example DAPM graph"
msgstr ""

#: ../../../sound/soc/dapm.rst:38
msgid ""
"You can also generate compatible graph for your sound card using `tools/"
"sound/dapm-graph` utility."
msgstr ""

#: ../../../sound/soc/dapm.rst:42
msgid "DAPM power domains"
msgstr ""

#: ../../../sound/soc/dapm.rst:44
msgid "There are 4 power domains within DAPM:"
msgstr ""

#: ../../../sound/soc/dapm.rst:46
msgid "Codec bias domain"
msgstr ""

#: ../../../sound/soc/dapm.rst:47
msgid "VREF, VMID (core codec and audio power)"
msgstr ""

#: ../../../sound/soc/dapm.rst:49
msgid ""
"Usually controlled at codec probe/remove and suspend/resume, although can be "
"set at stream time if power is not needed for sidetone, etc."
msgstr ""

#: ../../../sound/soc/dapm.rst:52
msgid "Platform/Machine domain"
msgstr ""

#: ../../../sound/soc/dapm.rst:53
msgid "physically connected inputs and outputs"
msgstr ""

#: ../../../sound/soc/dapm.rst:55
msgid ""
"Is platform/machine and user action specific, is configured by the machine "
"driver and responds to asynchronous events e.g when HP are inserted"
msgstr ""

#: ../../../sound/soc/dapm.rst:59
msgid "Path domain"
msgstr ""

#: ../../../sound/soc/dapm.rst:60
msgid "audio subsystem signal paths"
msgstr ""

#: ../../../sound/soc/dapm.rst:62
msgid ""
"Automatically set when mixer and mux settings are changed by the user. e.g. "
"alsamixer, amixer."
msgstr ""

#: ../../../sound/soc/dapm.rst:65
msgid "Stream domain"
msgstr ""

#: ../../../sound/soc/dapm.rst:66
msgid "DACs and ADCs."
msgstr ""

#: ../../../sound/soc/dapm.rst:68
msgid ""
"Enabled and disabled when stream playback/capture is started and stopped "
"respectively. e.g. aplay, arecord."
msgstr ""

#: ../../../sound/soc/dapm.rst:73
msgid "DAPM Widgets"
msgstr ""

#: ../../../sound/soc/dapm.rst:75
msgid "Audio DAPM widgets fall into a number of types:"
msgstr ""

#: ../../../sound/soc/dapm.rst:77
msgid "Mixer"
msgstr ""

#: ../../../sound/soc/dapm.rst:78
msgid "Mixes several analog signals into a single analog signal."
msgstr ""

#: ../../../sound/soc/dapm.rst:79
msgid "Mux"
msgstr ""

#: ../../../sound/soc/dapm.rst:80
msgid "An analog switch that outputs only one of many inputs."
msgstr ""

#: ../../../sound/soc/dapm.rst:81
msgid "PGA"
msgstr ""

#: ../../../sound/soc/dapm.rst:82
msgid "A programmable gain amplifier or attenuation widget."
msgstr ""

#: ../../../sound/soc/dapm.rst:83
msgid "ADC"
msgstr ""

#: ../../../sound/soc/dapm.rst:84
msgid "Analog to Digital Converter"
msgstr ""

#: ../../../sound/soc/dapm.rst:85
msgid "DAC"
msgstr ""

#: ../../../sound/soc/dapm.rst:86
msgid "Digital to Analog Converter"
msgstr ""

#: ../../../sound/soc/dapm.rst:87
msgid "Switch"
msgstr ""

#: ../../../sound/soc/dapm.rst:88
msgid "An analog switch"
msgstr ""

#: ../../../sound/soc/dapm.rst:89
msgid "Input"
msgstr ""

#: ../../../sound/soc/dapm.rst:90
msgid "A codec input pin"
msgstr ""

#: ../../../sound/soc/dapm.rst:91
msgid "Output"
msgstr ""

#: ../../../sound/soc/dapm.rst:92
msgid "A codec output pin"
msgstr ""

#: ../../../sound/soc/dapm.rst:93
msgid "Headphone"
msgstr ""

#: ../../../sound/soc/dapm.rst:94
msgid "Headphone (and optional Jack)"
msgstr ""

#: ../../../sound/soc/dapm.rst:95
msgid "Mic"
msgstr ""

#: ../../../sound/soc/dapm.rst:96
msgid "Mic (and optional Jack)"
msgstr ""

#: ../../../sound/soc/dapm.rst:97
msgid "Line"
msgstr ""

#: ../../../sound/soc/dapm.rst:98
msgid "Line Input/Output (and optional Jack)"
msgstr ""

#: ../../../sound/soc/dapm.rst:99 ../../../sound/soc/dapm.rst:100
msgid "Speaker"
msgstr ""

#: ../../../sound/soc/dapm.rst:101
msgid "Supply"
msgstr ""

#: ../../../sound/soc/dapm.rst:102
msgid "Power or clock supply widget used by other widgets."
msgstr ""

#: ../../../sound/soc/dapm.rst:103
msgid "Regulator"
msgstr ""

#: ../../../sound/soc/dapm.rst:104
msgid "External regulator that supplies power to audio components."
msgstr ""

#: ../../../sound/soc/dapm.rst:105
msgid "Clock"
msgstr ""

#: ../../../sound/soc/dapm.rst:106
msgid "External clock that supplies clock to audio components."
msgstr ""

#: ../../../sound/soc/dapm.rst:107
msgid "AIF IN"
msgstr ""

#: ../../../sound/soc/dapm.rst:108
msgid "Audio Interface Input (with TDM slot mask)."
msgstr ""

#: ../../../sound/soc/dapm.rst:109
msgid "AIF OUT"
msgstr ""

#: ../../../sound/soc/dapm.rst:110
msgid "Audio Interface Output (with TDM slot mask)."
msgstr ""

#: ../../../sound/soc/dapm.rst:111
msgid "Siggen"
msgstr ""

#: ../../../sound/soc/dapm.rst:112
msgid "Signal Generator."
msgstr ""

#: ../../../sound/soc/dapm.rst:113
msgid "DAI IN"
msgstr ""

#: ../../../sound/soc/dapm.rst:114
msgid "Digital Audio Interface Input."
msgstr ""

#: ../../../sound/soc/dapm.rst:115
msgid "DAI OUT"
msgstr ""

#: ../../../sound/soc/dapm.rst:116
msgid "Digital Audio Interface Output."
msgstr ""

#: ../../../sound/soc/dapm.rst:117
msgid "DAI Link"
msgstr ""

#: ../../../sound/soc/dapm.rst:118
msgid "DAI Link between two DAI structures"
msgstr ""

#: ../../../sound/soc/dapm.rst:119
msgid "Pre"
msgstr ""

#: ../../../sound/soc/dapm.rst:120
msgid "Special PRE widget (exec before all others)"
msgstr ""

#: ../../../sound/soc/dapm.rst:121
msgid "Post"
msgstr ""

#: ../../../sound/soc/dapm.rst:122
msgid "Special POST widget (exec after all others)"
msgstr ""

#: ../../../sound/soc/dapm.rst:123
msgid "Buffer"
msgstr ""

#: ../../../sound/soc/dapm.rst:124
msgid "Inter widget audio data buffer within a DSP."
msgstr ""

#: ../../../sound/soc/dapm.rst:125
msgid "Scheduler"
msgstr ""

#: ../../../sound/soc/dapm.rst:126
msgid ""
"DSP internal scheduler that schedules component/pipeline processing work."
msgstr ""

#: ../../../sound/soc/dapm.rst:128
msgid "Effect"
msgstr ""

#: ../../../sound/soc/dapm.rst:129
msgid "Widget that performs an audio processing effect."
msgstr ""

#: ../../../sound/soc/dapm.rst:130
msgid "SRC"
msgstr ""

#: ../../../sound/soc/dapm.rst:131
msgid "Sample Rate Converter within DSP or CODEC"
msgstr ""

#: ../../../sound/soc/dapm.rst:132
msgid "ASRC"
msgstr ""

#: ../../../sound/soc/dapm.rst:133
msgid "Asynchronous Sample Rate Converter within DSP or CODEC"
msgstr ""

#: ../../../sound/soc/dapm.rst:134
msgid "Encoder"
msgstr ""

#: ../../../sound/soc/dapm.rst:135
msgid ""
"Widget that encodes audio data from one format (usually PCM) to another "
"usually more compressed format."
msgstr ""

#: ../../../sound/soc/dapm.rst:137
msgid "Decoder"
msgstr ""

#: ../../../sound/soc/dapm.rst:138
msgid ""
"Widget that decodes audio data from a compressed format to an uncompressed "
"format like PCM."
msgstr ""

#: ../../../sound/soc/dapm.rst:142
msgid "(Widgets are defined in include/sound/soc-dapm.h)"
msgstr ""

#: ../../../sound/soc/dapm.rst:144
msgid ""
"Widgets can be added to the sound card by any of the component driver types. "
"There are convenience macros defined in soc-dapm.h that can be used to "
"quickly build a list of widgets of the codecs and machines DAPM widgets."
msgstr ""

#: ../../../sound/soc/dapm.rst:148
msgid ""
"Most widgets have a name, register, shift and invert. Some widgets have "
"extra parameters for stream name and kcontrols."
msgstr ""

#: ../../../sound/soc/dapm.rst:153
msgid "Stream Domain Widgets"
msgstr ""

#: ../../../sound/soc/dapm.rst:155
msgid ""
"Stream Widgets relate to the stream power domain and only consist of ADCs "
"(analog to digital converters), DACs (digital to analog converters), AIF IN "
"and AIF OUT."
msgstr ""

#: ../../../sound/soc/dapm.rst:159
msgid "Stream widgets have the following format: ::"
msgstr ""

#: ../../../sound/soc/dapm.rst:165
msgid ""
"NOTE: the stream name must match the corresponding stream name in your codec "
"snd_soc_dai_driver."
msgstr ""

#: ../../../sound/soc/dapm.rst:168
msgid "e.g. stream widgets for HiFi playback and capture ::"
msgstr ""

#: ../../../sound/soc/dapm.rst:174
msgid "e.g. stream widgets for AIF ::"
msgstr ""

#: ../../../sound/soc/dapm.rst:182
msgid "Path Domain Widgets"
msgstr ""

#: ../../../sound/soc/dapm.rst:184
msgid ""
"Path domain widgets have a ability to control or affect the audio signal or "
"audio paths within the audio subsystem. They have the following form: ::"
msgstr ""

#: ../../../sound/soc/dapm.rst:190
msgid ""
"Any widget kcontrols can be set using the controls and num_controls members."
msgstr ""

#: ../../../sound/soc/dapm.rst:192
msgid "e.g. Mixer widget (the kcontrols are declared first) ::"
msgstr ""

#: ../../../sound/soc/dapm.rst:205
msgid ""
"If you don't want the mixer elements prefixed with the name of the mixer "
"widget, you can use SND_SOC_DAPM_MIXER_NAMED_CTL instead. the parameters are "
"the same as for SND_SOC_DAPM_MIXER."
msgstr ""

#: ../../../sound/soc/dapm.rst:211
msgid "Machine domain Widgets"
msgstr ""

#: ../../../sound/soc/dapm.rst:213
msgid ""
"Machine widgets are different from codec widgets in that they don't have a "
"codec register bit associated with them. A machine widget is assigned to "
"each machine audio component (non codec or DSP) that can be independently "
"powered. e.g."
msgstr ""

#: ../../../sound/soc/dapm.rst:218
msgid "Speaker Amp"
msgstr ""

#: ../../../sound/soc/dapm.rst:219
msgid "Microphone Bias"
msgstr ""

#: ../../../sound/soc/dapm.rst:220
msgid "Jack connectors"
msgstr ""

#: ../../../sound/soc/dapm.rst:222
msgid "A machine widget can have an optional call back."
msgstr ""

#: ../../../sound/soc/dapm.rst:224
msgid ""
"e.g. Jack connector widget for an external Mic that enables Mic Bias when "
"the Mic is inserted::"
msgstr ""

#: ../../../sound/soc/dapm.rst:237
msgid "Codec (BIAS) Domain"
msgstr ""

#: ../../../sound/soc/dapm.rst:239
msgid ""
"The codec bias power domain has no widgets and is handled by the codec DAPM "
"event handler. This handler is called when the codec powerstate is changed "
"wrt to any stream event or by kernel PM events."
msgstr ""

#: ../../../sound/soc/dapm.rst:245
msgid "Virtual Widgets"
msgstr ""

#: ../../../sound/soc/dapm.rst:247
msgid ""
"Sometimes widgets exist in the codec or machine audio graph that don't have "
"any corresponding soft power control. In this case it is necessary to create "
"a virtual widget - a widget with no control bits e.g. ::"
msgstr ""

#: ../../../sound/soc/dapm.rst:254
msgid "This can be used to merge two signal paths together in software."
msgstr ""

#: ../../../sound/soc/dapm.rst:257
msgid "Registering DAPM controls"
msgstr ""

#: ../../../sound/soc/dapm.rst:259
msgid ""
"In many cases the DAPM widgets are implemented statically in a ``static "
"const struct snd_soc_dapm_widget`` array in a codec driver, and simply "
"declared via the ``dapm_widgets`` and ``num_dapm_widgets`` fields of the "
"``struct snd_soc_component_driver``."
msgstr ""

#: ../../../sound/soc/dapm.rst:264
msgid ""
"Similarly, routes connecting them are implemented statically in a ``static "
"const struct snd_soc_dapm_route`` array and declared via the ``dapm_routes`` "
"and ``num_dapm_routes`` fields of the same struct."
msgstr ""

#: ../../../sound/soc/dapm.rst:268
msgid ""
"With the above declared, the driver registration will take care of "
"populating them::"
msgstr ""

#: ../../../sound/soc/dapm.rst:293
msgid ""
"In more complex cases the list of DAPM widgets and/or routes can be only "
"known at probe time. This happens for example when a driver supports "
"different models having a different set of features. In those cases separate "
"widgets and routes arrays implementing the case-specific features can be "
"registered programmatically by calling snd_soc_dapm_new_controls() and "
"snd_soc_dapm_add_routes()."
msgstr ""

#: ../../../sound/soc/dapm.rst:302
msgid "Codec/DSP Widget Interconnections"
msgstr ""

#: ../../../sound/soc/dapm.rst:304
msgid ""
"Widgets are connected to each other within the codec, platform and machine "
"by audio paths (called interconnections). Each interconnection must be "
"defined in order to create a graph of all audio paths between widgets."
msgstr ""

#: ../../../sound/soc/dapm.rst:308
msgid ""
"This is easiest with a diagram of the codec or DSP (and schematic of the "
"machine audio system), as it requires joining widgets together via their "
"audio signal paths."
msgstr ""

#: ../../../sound/soc/dapm.rst:312
msgid "For example the WM8731 output mixer (wm8731.c) has 3 inputs (sources):"
msgstr ""

#: ../../../sound/soc/dapm.rst:314
msgid "Line Bypass Input"
msgstr ""

#: ../../../sound/soc/dapm.rst:315
msgid "DAC (HiFi playback)"
msgstr ""

#: ../../../sound/soc/dapm.rst:316
msgid "Mic Sidetone Input"
msgstr ""

#: ../../../sound/soc/dapm.rst:318
msgid ""
"Each input in this example has a kcontrol associated with it (defined in the "
"example above) and is connected to the output mixer via its kcontrol name. "
"We can now connect the destination widget (wrt audio signal) with its source "
"widgets.  ::"
msgstr ""

#: ../../../sound/soc/dapm.rst:328
msgid "So we have:"
msgstr ""

#: ../../../sound/soc/dapm.rst:330
msgid "Destination Widget  <=== Path Name <=== Source Widget, or"
msgstr ""

#: ../../../sound/soc/dapm.rst:331
msgid "Sink, Path, Source, or"
msgstr ""

#: ../../../sound/soc/dapm.rst:332
msgid ""
"``Output Mixer`` is connected to the ``DAC`` via the ``HiFi Playback "
"Switch``."
msgstr ""

#: ../../../sound/soc/dapm.rst:334
msgid ""
"When there is no path name connecting widgets (e.g. a direct connection) we "
"pass NULL for the path name."
msgstr ""

#: ../../../sound/soc/dapm.rst:337
msgid "Interconnections are created with a call to::"
msgstr ""

#: ../../../sound/soc/dapm.rst:341
msgid ""
"Finally, snd_soc_dapm_new_widgets() must be called after all widgets and "
"interconnections have been registered with the core. This causes the core to "
"scan the codec and machine so that the internal DAPM state matches the "
"physical state of the machine."
msgstr ""

#: ../../../sound/soc/dapm.rst:348
msgid "Machine Widget Interconnections"
msgstr ""

#: ../../../sound/soc/dapm.rst:349
msgid ""
"Machine widget interconnections are created in the same way as codec ones "
"and directly connect the codec pins to machine level widgets."
msgstr ""

#: ../../../sound/soc/dapm.rst:352
msgid "e.g. connects the speaker out codec pins to the internal speaker. ::"
msgstr ""

#: ../../../sound/soc/dapm.rst:359
msgid ""
"This allows the DAPM to power on and off pins that are connected (and in "
"use) and pins that are NC respectively."
msgstr ""

#: ../../../sound/soc/dapm.rst:364
msgid "Endpoint Widgets"
msgstr ""

#: ../../../sound/soc/dapm.rst:365
msgid ""
"An endpoint is a start or end point (widget) of an audio signal within the "
"machine and includes the codec. e.g."
msgstr ""

#: ../../../sound/soc/dapm.rst:368
msgid "Headphone Jack"
msgstr ""

#: ../../../sound/soc/dapm.rst:369
msgid "Internal Speaker"
msgstr ""

#: ../../../sound/soc/dapm.rst:370
msgid "Internal Mic"
msgstr ""

#: ../../../sound/soc/dapm.rst:371
msgid "Mic Jack"
msgstr ""

#: ../../../sound/soc/dapm.rst:372
msgid "Codec Pins"
msgstr ""

#: ../../../sound/soc/dapm.rst:374
msgid ""
"Endpoints are added to the DAPM graph so that their usage can be determined "
"in order to save power. e.g. NC codecs pins will be switched OFF, "
"unconnected jacks can also be switched OFF."
msgstr ""

#: ../../../sound/soc/dapm.rst:380
msgid "DAPM Widget Events"
msgstr ""

#: ../../../sound/soc/dapm.rst:382
msgid ""
"Widgets needing to implement a more complex behaviour than what DAPM can do "
"can set a custom \"event handler\" by setting a function pointer. An example "
"is a power supply needing to enable a GPIO::"
msgstr ""

#: ../../../sound/soc/dapm.rst:404
msgid "See soc-dapm.h for all other widgets that support events."
msgstr ""

#: ../../../sound/soc/dapm.rst:408
msgid "Event types"
msgstr ""

#: ../../../sound/soc/dapm.rst:410
msgid "The following event types are supported by event widgets::"
msgstr ""
