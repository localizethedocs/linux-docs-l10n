# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../fb/deferred_io.rst:3
msgid "Deferred IO"
msgstr ""

#: ../../../fb/deferred_io.rst:5
msgid ""
"Deferred IO is a way to delay and repurpose IO. It uses host memory as a "
"buffer and the MMU pagefault as a pretrigger for when to perform the device "
"IO. The following example may be a useful explanation of how one such setup "
"works:"
msgstr ""

#: ../../../fb/deferred_io.rst:10
msgid "userspace app like Xfbdev mmaps framebuffer"
msgstr ""

#: ../../../fb/deferred_io.rst:11
msgid "deferred IO and driver sets up fault and page_mkwrite handlers"
msgstr ""

#: ../../../fb/deferred_io.rst:12
msgid "userspace app tries to write to mmapped vaddress"
msgstr ""

#: ../../../fb/deferred_io.rst:13
msgid "we get pagefault and reach fault handler"
msgstr ""

#: ../../../fb/deferred_io.rst:14
msgid "fault handler finds and returns physical page"
msgstr ""

#: ../../../fb/deferred_io.rst:15
msgid "we get page_mkwrite where we add this page to a list"
msgstr ""

#: ../../../fb/deferred_io.rst:16
msgid "schedule a workqueue task to be run after a delay"
msgstr ""

#: ../../../fb/deferred_io.rst:17
msgid ""
"app continues writing to that page with no additional cost. this is the key "
"benefit."
msgstr ""

#: ../../../fb/deferred_io.rst:19
msgid ""
"the workqueue task comes in and mkcleans the pages on the list, then "
"completes the work associated with updating the framebuffer. this is the "
"real work talking to the device."
msgstr ""

#: ../../../fb/deferred_io.rst:22
msgid "app tries to write to the address (that has now been mkcleaned)"
msgstr ""

#: ../../../fb/deferred_io.rst:23
msgid "get pagefault and the above sequence occurs again"
msgstr ""

#: ../../../fb/deferred_io.rst:25
msgid ""
"As can be seen from above, one benefit is roughly to allow bursty "
"framebuffer writes to occur at minimum cost. Then after some time when "
"hopefully things have gone quiet, we go and really update the framebuffer "
"which would be a relatively more expensive operation."
msgstr ""

#: ../../../fb/deferred_io.rst:30
msgid ""
"For some types of nonvolatile high latency displays, the desired image is "
"the final image rather than the intermediate stages which is why it's okay "
"to not update for each write that is occurring."
msgstr ""

#: ../../../fb/deferred_io.rst:34
msgid ""
"It may be the case that this is useful in other scenarios as well. Paul "
"Mundt has mentioned a case where it is beneficial to use the page count to "
"decide whether to coalesce and issue SG DMA or to do memory bursts."
msgstr ""

#: ../../../fb/deferred_io.rst:38
msgid ""
"Another one may be if one has a device framebuffer that is in an usual "
"format, say diagonally shifting RGB, this may then be a mechanism for you to "
"allow apps to pretend to have a normal framebuffer but reswizzle for the "
"device framebuffer at vsync time based on the touched pagelist."
msgstr ""

#: ../../../fb/deferred_io.rst:44
msgid "How to use it: (for applications)"
msgstr ""

#: ../../../fb/deferred_io.rst:45
msgid "No changes needed. mmap the framebuffer like normal and just use it."
msgstr ""

#: ../../../fb/deferred_io.rst:48
msgid "How to use it: (for fbdev drivers)"
msgstr ""

#: ../../../fb/deferred_io.rst:49
msgid "The following example may be helpful."
msgstr ""

#: ../../../fb/deferred_io.rst:51
msgid "Setup your structure. Eg::"
msgstr ""

#: ../../../fb/deferred_io.rst:58
msgid ""
"The delay is the minimum delay between when the page_mkwrite trigger occurs "
"and when the deferred_io callback is called. The deferred_io callback is "
"explained below."
msgstr ""

#: ../../../fb/deferred_io.rst:62
msgid "Setup your deferred IO callback. Eg::"
msgstr ""

#: ../../../fb/deferred_io.rst:67
msgid ""
"The deferred_io callback is where you would perform all your IO to the "
"display device. You receive the pagelist which is the list of pages that "
"were written to during the delay. You must not modify this list. This "
"callback is called from a workqueue."
msgstr ""

#: ../../../fb/deferred_io.rst:72
msgid "Call init::"
msgstr ""

#: ../../../fb/deferred_io.rst:77
msgid "Call cleanup::"
msgstr ""
