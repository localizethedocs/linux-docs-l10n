# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../devicetree/kernel-api.rst:6
msgid "DeviceTree Kernel API"
msgstr ""

#: ../../../devicetree/kernel-api.rst:9
msgid "Core functions"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:262
msgid "Get next node in global list"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:266
#: drivers/of/base.c:420 drivers/of/base.c:506 drivers/of/base.c:542
#: drivers/of/base.c:565 drivers/of/base.c:587 drivers/of/base.c:631
#: drivers/of/base.c:653 drivers/of/base.c:712 drivers/of/base.c:727
#: drivers/of/base.c:742 drivers/of/base.c:784 drivers/of/base.c:809
#: drivers/of/base.c:832 drivers/of/base.c:895 drivers/of/base.c:960
#: drivers/of/base.c:987 drivers/of/base.c:1015 drivers/of/base.c:1046
#: drivers/of/base.c:1099 drivers/of/base.c:1119 drivers/of/base.c:1158
#: drivers/of/base.c:1189 drivers/of/base.c:1431 drivers/of/base.c:1602
#: drivers/of/base.c:1704 drivers/of/base.c:1746 drivers/of/base.c:1916
#: drivers/of/base.c:1947 drivers/of/base.c:1973 drivers/of/base.c:2053
#: ../../../devicetree/kernel-api:14: include/linux/of.h:108
#: include/linux/of.h:416 include/linux/of.h:974 include/linux/of.h:997
#: include/linux/of.h:1045 include/linux/of.h:1085 include/linux/of.h:1110
#: include/linux/of.h:1126 include/linux/of.h:1145 include/linux/of.h:1164
#: include/linux/of.h:1183 include/linux/of.h:1202 include/linux/of.h:1222
#: include/linux/of.h:1241 include/linux/of.h:1268 include/linux/of.h:1284
#: include/linux/of.h:1316 include/linux/of.h:1348 include/linux/of.h:1378
#: include/linux/of.h:1698 include/linux/of.h:1709
#: ../../../devicetree/kernel-api:17: drivers/of/property.c:39
#: drivers/of/property.c:65 drivers/of/property.c:85 drivers/of/property.c:155
#: drivers/of/property.c:188 drivers/of/property.c:222
#: drivers/of/property.c:255 drivers/of/property.c:305
#: drivers/of/property.c:355 drivers/of/property.c:402
#: drivers/of/property.c:433 drivers/of/property.c:482
#: drivers/of/property.c:517 drivers/of/property.c:559
#: drivers/of/property.c:638 drivers/of/property.c:668
#: drivers/of/property.c:697 drivers/of/property.c:734
#: drivers/of/property.c:761 drivers/of/property.c:818
#: drivers/of/property.c:845 drivers/of/property.c:859
#: drivers/of/property.c:891 drivers/of/property.c:909
#: drivers/of/property.c:928 drivers/of/property.c:946
#: drivers/of/property.c:963 ../../../devicetree/kernel-api:20:
#: include/linux/of_graph.h:35 include/linux/of_graph.h:46
#: include/linux/of_graph.h:58 ../../../devicetree/kernel-api:23:
#: drivers/of/address.c:657 drivers/of/address.c:739 drivers/of/address.c:1007
#: drivers/of/address.c:1087 drivers/of/address.c:1118
#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:36 drivers/of/irq.c:59
#: drivers/of/irq.c:165 drivers/of/irq.c:351 drivers/of/irq.c:420
#: drivers/of/irq.c:454 drivers/of/irq.c:487 drivers/of/irq.c:528
#: drivers/of/irq.c:743 drivers/of/irq.c:771 ../../../devicetree/kernel-api:29:
#: drivers/of/fdt.c:431 ../../../devicetree/kernel-api:35:
#: include/linux/of_device.h:20 ../../../devicetree/kernel-api:38:
#: drivers/of/device.c:23 drivers/of/device.c:74 drivers/of/device.c:190
#: drivers/of/device.c:215 drivers/of/device.c:281
#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:32
#: drivers/of/platform.c:96 drivers/of/platform.c:193 drivers/of/platform.c:389
#: drivers/of/platform.c:430 drivers/of/platform.c:637
#: drivers/of/platform.c:660 drivers/of/platform.c:706
#: ../../../devicetree/kernel-api:50: drivers/of/resolver.c:220
#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:32
#: drivers/of/dynamic.c:47 drivers/of/dynamic.c:294 drivers/of/dynamic.c:495
#: drivers/of/dynamic.c:652 drivers/of/dynamic.c:666 drivers/of/dynamic.c:772
#: drivers/of/dynamic.c:867 drivers/of/dynamic.c:891 drivers/of/dynamic.c:954
#: drivers/of/dynamic.c:980 drivers/of/dynamic.c:1025 drivers/of/dynamic.c:1061
#: drivers/of/dynamic.c:1104 ../../../devicetree/kernel-api:56:
#: drivers/of/overlay.c:138 drivers/of/overlay.c:156 drivers/of/overlay.c:970
#: drivers/of/overlay.c:1159 drivers/of/overlay.c:1264
msgid "**Parameters**"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:268
#: drivers/of/base.c:630 drivers/of/base.c:652 drivers/of/base.c:711
#: drivers/of/base.c:726 drivers/of/base.c:744
#: ../../../devicetree/kernel-api:17: drivers/of/property.c:696
#: drivers/of/property.c:734 drivers/of/property.c:760
msgid "``struct device_node *prev``"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:263
msgid ""
"Previous node or NULL to start iteration of_node_put() will be called on it"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:266
#: drivers/of/base.c:506 drivers/of/base.c:542 drivers/of/base.c:564
#: drivers/of/base.c:589 drivers/of/base.c:631 drivers/of/base.c:656
#: drivers/of/base.c:743 drivers/of/base.c:786 drivers/of/base.c:810
#: drivers/of/base.c:834 drivers/of/base.c:904 drivers/of/base.c:963
#: drivers/of/base.c:991 drivers/of/base.c:1021 drivers/of/base.c:1050
#: drivers/of/base.c:1124 drivers/of/base.c:1168 drivers/of/base.c:1188
#: drivers/of/base.c:1603 drivers/of/base.c:1918 drivers/of/base.c:1976
#: drivers/of/base.c:2064 ../../../devicetree/kernel-api:14:
#: include/linux/of.h:3 include/linux/of.h:415 include/linux/of.h:976
#: include/linux/of.h:1110 include/linux/of.h:1129 include/linux/of.h:1148
#: include/linux/of.h:1167 include/linux/of.h:1186 include/linux/of.h:1207
#: include/linux/of.h:1225 include/linux/of.h:1251 include/linux/of.h:1269
#: include/linux/of.h:1295 include/linux/of.h:1327 include/linux/of.h:1357
#: include/linux/of.h:1387 include/linux/of.h:1697
#: ../../../devicetree/kernel-api:17: drivers/of/property.c:41
#: drivers/of/property.c:64 drivers/of/property.c:89 drivers/of/property.c:163
#: drivers/of/property.c:196 drivers/of/property.c:230
#: drivers/of/property.c:270 drivers/of/property.c:320
#: drivers/of/property.c:367 drivers/of/property.c:408
#: drivers/of/property.c:445 drivers/of/property.c:492
#: drivers/of/property.c:520 drivers/of/property.c:668
#: drivers/of/property.c:699 drivers/of/property.c:735
#: drivers/of/property.c:761 drivers/of/property.c:819
#: drivers/of/property.c:844 drivers/of/property.c:858
#: drivers/of/property.c:890 drivers/of/property.c:908
#: drivers/of/property.c:927 drivers/of/property.c:945
#: drivers/of/property.c:964 ../../../devicetree/kernel-api:26:
#: drivers/of/irq.c:58 drivers/of/irq.c:171 drivers/of/irq.c:454
#: drivers/of/irq.c:487 drivers/of/irq.c:529 drivers/of/irq.c:745
#: ../../../devicetree/kernel-api:29: drivers/of/fdt.c:436
#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:33
#: drivers/of/platform.c:194 drivers/of/platform.c:441
#: drivers/of/platform.c:661 ../../../devicetree/kernel-api:50:
#: drivers/of/resolver.c:245 ../../../devicetree/kernel-api:53:
#: drivers/of/dynamic.c:32 drivers/of/dynamic.c:498 drivers/of/dynamic.c:776
#: drivers/of/dynamic.c:871 drivers/of/dynamic.c:900 drivers/of/dynamic.c:958
#: drivers/of/dynamic.c:986 drivers/of/dynamic.c:1031 drivers/of/dynamic.c:1065
#: drivers/of/dynamic.c:1108 ../../../devicetree/kernel-api:56:
#: drivers/of/overlay.c:980 drivers/of/overlay.c:1184 drivers/of/overlay.c:1263
msgid "**Return**"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:266
#: drivers/of/base.c:564 drivers/of/base.c:590 drivers/of/base.c:657
#: drivers/of/base.c:905 drivers/of/base.c:963 drivers/of/base.c:991
#: drivers/of/base.c:1021 drivers/of/base.c:1050 drivers/of/base.c:1124
#: drivers/of/base.c:1188
msgid ""
"A node pointer with refcount incremented, use of_node_put() on it when done."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:416
msgid "Test root of device tree against a compatible array"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:422
msgid "``const char *const *compats``"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:417
msgid ""
"NULL terminated array of compatible strings to look for in root node's "
"compatible property."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:419
#: drivers/of/base.c:546 drivers/of/base.c:586 drivers/of/base.c:654
#: drivers/of/base.c:712 drivers/of/base.c:727 drivers/of/base.c:741
#: drivers/of/base.c:784 drivers/of/base.c:809 drivers/of/base.c:832
#: drivers/of/base.c:900 drivers/of/base.c:1099 drivers/of/base.c:1160
#: drivers/of/base.c:1434 drivers/of/base.c:1746 drivers/of/base.c:1916
#: drivers/of/base.c:1946 drivers/of/base.c:1974 drivers/of/base.c:2057
#: ../../../devicetree/kernel-api:14: include/linux/of.h:107
#: include/linux/of.h:1000 include/linux/of.h:1048 include/linux/of.h:1088
#: include/linux/of.h:1127 include/linux/of.h:1146 include/linux/of.h:1165
#: include/linux/of.h:1184 include/linux/of.h:1205 include/linux/of.h:1223
#: include/linux/of.h:1245 include/linux/of.h:1268 include/linux/of.h:1287
#: include/linux/of.h:1319 include/linux/of.h:1352 include/linux/of.h:1382
#: include/linux/of.h:1565 include/linux/of.h:1583
#: ../../../devicetree/kernel-api:17: drivers/of/property.c:39
#: drivers/of/property.c:87 drivers/of/property.c:158 drivers/of/property.c:191
#: drivers/of/property.c:225 drivers/of/property.c:262
#: drivers/of/property.c:312 drivers/of/property.c:362
#: drivers/of/property.c:403 drivers/of/property.c:440
#: drivers/of/property.c:484 drivers/of/property.c:518
#: drivers/of/property.c:562 drivers/of/property.c:638
#: drivers/of/property.c:697 ../../../devicetree/kernel-api:20:
#: include/linux/of_graph.h:35 include/linux/of_graph.h:46
#: include/linux/of_graph.h:58 ../../../devicetree/kernel-api:23:
#: drivers/of/address.c:659 drivers/of/address.c:741 drivers/of/address.c:1006
#: drivers/of/address.c:1088 drivers/of/address.c:1118
#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:36 drivers/of/irq.c:165
#: drivers/of/irq.c:352 drivers/of/irq.c:744 ../../../devicetree/kernel-api:29:
#: drivers/of/fdt.c:432 ../../../devicetree/kernel-api:38:
#: drivers/of/device.c:23 drivers/of/device.c:77 drivers/of/device.c:280
#: ../../../devicetree/kernel-api:41: include/linux/of_platform.h:25
#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:31
#: drivers/of/platform.c:390 drivers/of/platform.c:432
#: drivers/of/platform.c:636 drivers/of/platform.c:659
#: drivers/of/platform.c:705 ../../../devicetree/kernel-api:50:
#: drivers/of/resolver.c:220 ../../../devicetree/kernel-api:53:
#: drivers/of/dynamic.c:652 drivers/of/dynamic.c:666 drivers/of/dynamic.c:772
#: drivers/of/dynamic.c:867 drivers/of/dynamic.c:894 drivers/of/dynamic.c:957
#: drivers/of/dynamic.c:985 drivers/of/dynamic.c:1030 drivers/of/dynamic.c:1064
#: drivers/of/dynamic.c:1107 ../../../devicetree/kernel-api:56:
#: drivers/of/overlay.c:3 drivers/of/overlay.c:137 drivers/of/overlay.c:972
#: drivers/of/overlay.c:1158
msgid "**Description**"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:418
msgid ""
"Returns true if the root node has any of the given compatible values in its "
"compatible property."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:502
msgid "check if a device is available for use"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:508
#: drivers/of/base.c:544
msgid "``const struct device_node *device``"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:504
msgid "Node to check for availability"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:506
msgid ""
"True if the status property is absent or set to \"okay\" or \"ok\", false "
"otherwise"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:538
msgid "check if a device has BE registers"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:540
msgid "Node to check for endianness"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:542
msgid ""
"True if the device has a \"big-endian\" property, or if the kernel was "
"compiled for BE *and* the device has a \"native-endian\" property. Returns "
"false otherwise."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:545
msgid ""
"Callers would nominally use ioread32be/iowrite32be if "
"of_device_is_big_endian() == true, or readl/writel otherwise."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:561
msgid "Get a node's parent if any"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:567
#: drivers/of/base.c:633 drivers/of/base.c:655 drivers/of/base.c:714
#: drivers/of/base.c:729 drivers/of/base.c:811 drivers/of/base.c:834
#: drivers/of/base.c:1098 drivers/of/base.c:1160
#: ../../../devicetree/kernel-api:17: drivers/of/property.c:67
#: drivers/of/property.c:640 drivers/of/property.c:847
#: drivers/of/property.c:893 drivers/of/property.c:911
#: drivers/of/property.c:965
msgid "``const struct device_node *node``"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:562
msgid "Node to get parent"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:583
msgid "Iterate to a node's parent"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:589
#: ../../../devicetree/kernel-api:14: include/linux/of.h:110
#: ../../../devicetree/kernel-api:17: drivers/of/property.c:861
#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:34
#: drivers/of/dynamic.c:49
msgid "``struct device_node *node``"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:584
msgid "Node to get parent of"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:585
msgid ""
"This is like of_get_parent() except that it drops the refcount on the passed "
"node, making it suitable for iterating through a node's parents."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:627
msgid "Iterate a node childs"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:628
#: drivers/of/base.c:650 drivers/of/base.c:709 drivers/of/base.c:724
#: drivers/of/base.c:781 drivers/of/base.c:806 drivers/of/base.c:829
msgid "parent node"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:629
#: drivers/of/base.c:651 drivers/of/base.c:710 drivers/of/base.c:725
msgid "previous child of the parent node, or NULL to get first"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:631
msgid ""
"A node pointer with refcount incremented, use of_node_put() on it when done. "
"Returns NULL when prev is the last child. Decrements the refcount of prev."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:649
msgid "Find the next child node with prefix"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:653
msgid "``const char *prefix``"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:652
msgid "prefix that the node name should have"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:653
msgid ""
"This function is like of_get_next_child(), except that it automatically "
"skips any nodes whose name doesn't have the given prefix."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:708
msgid "Find the next available child node"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:711
#: drivers/of/base.c:726
msgid ""
"This function is like of_get_next_child(), except that it automatically "
"skips any disabled nodes (i.e. status = \"disabled\")."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:723
msgid "Find the next reserved child node"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:738
msgid "Iterate on cpu nodes"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:739
msgid "previous child of the /cpus node, or NULL to get first"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:740
msgid ""
"Unusable CPUs (those with the status property set to \"fail\" or \"fail-..."
"\") will be skipped."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:744
msgid ""
"A cpu node pointer with refcount incremented, use of_node_put() on it when "
"done. Returns NULL when prev is the last child. Decrements the refcount of "
"prev."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:780
msgid "Find compatible child node"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:786
#: ../../../devicetree/kernel-api:17: drivers/of/property.c:699
#: drivers/of/property.c:763 drivers/of/property.c:820
msgid "``const struct device_node *parent``"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:783
#: drivers/of/base.c:1019
msgid "``const char *compatible``"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:782
msgid "compatible string"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:783
msgid ""
"Lookup child node whose compatible property contains the given compatible "
"string."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:787
msgid ""
"a node pointer with refcount incremented, use of_node_put() on it when done; "
"or NULL if not found."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:805
msgid "Find the child node by name for a given parent"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:808
#: drivers/of/base.c:831 drivers/of/base.c:962
#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:486
msgid "``const char *name``"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:807
#: drivers/of/base.c:830
msgid "child name to look for."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:808
msgid "This function looks for child node for given matching name"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:811
#: drivers/of/base.c:835
msgid ""
"A node pointer if found, with refcount incremented, use of_node_put() on it "
"when done. Returns NULL if node is not found."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:828
msgid "Find the available child node by name for a given parent"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:831
msgid ""
"This function looks for child node for given matching name and checks the "
"device's availability for use."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:891
msgid "Find a node matching a full OF path"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:897
msgid "``const char *path``"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:892
msgid ""
"Either the full path to match, or if the path does not start with '/', the "
"name of a property of the /aliases node (an alias).  In the case of an "
"alias, the node matching the alias' value will be returned."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:897
msgid "``const char **opts``"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:896
msgid ""
"Address of a pointer into which to store the start of an options string "
"appended to the end of the path with a ':' separator."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:899
msgid "Valid paths:"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:900
msgid "/foo/bar  Full path"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:901
msgid "foo       Valid alias"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:902
msgid "foo/bar   Valid alias + relative path"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:956
msgid "Find a node by its \"name\" property"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:962
#: drivers/of/base.c:989 drivers/of/base.c:1017 drivers/of/base.c:1048
#: drivers/of/base.c:1121
msgid "``struct device_node *from``"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:957
msgid ""
"The node to start searching from or NULL; the node you pass will not be "
"searched, only the next one will. Typically, you pass what the previous call "
"returned. of_node_put() will be called on **from**."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:961
msgid "The name string to match against"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:983
msgid "Find a node by its \"device_type\" property"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:984
msgid ""
"The node to start searching from, or NULL to start searching the entire "
"device tree. The node you pass will not be searched, only the next one will; "
"typically, you pass what the previous call returned. of_node_put() will be "
"called on from for you."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:990
#: drivers/of/base.c:1018
msgid "``const char *type``"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:989
msgid "The type string to match against"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1011
msgid ""
"Find a node based on type and one of the tokens in its \"compatible\" "
"property"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1013
#: drivers/of/base.c:1044 drivers/of/base.c:1117
msgid ""
"The node to start searching from or NULL, the node you pass will not be "
"searched, only the next one will; typically, you pass what the previous call "
"returned. of_node_put() will be called on it"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1017
msgid "The type string to match \"device_type\" or NULL to ignore"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1018
msgid ""
"The string to match to one of the tokens in the device \"compatible\" list."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1042
msgid "Find a node which has a property with the given name."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1049
#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:955
#: drivers/of/dynamic.c:982 drivers/of/dynamic.c:1027 drivers/of/dynamic.c:1063
#: drivers/of/dynamic.c:1105
msgid "``const char *prop_name``"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1048
msgid "The name of the property to look for."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1095
msgid "Tell if a device_node has a matching of_match structure"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1101
#: drivers/of/base.c:1122 ../../../devicetree/kernel-api:38:
#: drivers/of/device.c:25 ../../../devicetree/kernel-api:44:
#: drivers/of/platform.c:388 drivers/of/platform.c:429
msgid "``const struct of_device_id *matches``"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1096
#: drivers/of/base.c:1121
msgid "array of of device match structures to search in"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1097
msgid "the of device structure to match against"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1098
msgid "Low level utility function used by device matching."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1115
msgid "Find a node based on an of_device_id match table."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1123
msgid "``const struct of_device_id **match``"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1122
msgid "Updated to point at the matches entry which matched"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1154
msgid "Lookup appropriate alias for a device node depending on compatible"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1156
msgid "pointer to a device tree node"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1158
msgid "``char *alias``"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1157
msgid "Pointer to buffer that alias value will be copied into"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1159
msgid "``int len``"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1158
msgid "Length of alias value"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1159
msgid ""
"Based on the value of the compatible property, this routine will attempt to "
"choose an appropriate alias value for a particular device tree node. It does "
"this by stripping the manufacturer prefix (as delimited by a ',') from the "
"first entry in the compatible list property."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1164
#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:174 drivers/of/irq.c:355
#: ../../../devicetree/kernel-api:41: include/linux/of_platform.h:32
msgid "**Note**"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1165
msgid ""
"The matching on just the \"product\" side of the compatible is a relic from "
"I2C and SPI. Please do not add any new user."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1168
msgid "This routine returns 0 on success, <0 on failure."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1185
msgid "Find a node given a phandle"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1191
msgid "``phandle handle``"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1186
msgid "phandle of the node to find"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1427
msgid "Find a node pointed by phandle in a list and remap it"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1433
#: drivers/of/base.c:1604 drivers/of/base.c:1918 drivers/of/base.c:2055
#: ../../../devicetree/kernel-api:14: include/linux/of.h:976
#: include/linux/of.h:999 include/linux/of.h:1047 include/linux/of.h:1087
#: include/linux/of.h:1128 include/linux/of.h:1147 include/linux/of.h:1166
#: include/linux/of.h:1185 include/linux/of.h:1204 include/linux/of.h:1224
#: include/linux/of.h:1243 include/linux/of.h:1270 include/linux/of.h:1286
#: include/linux/of.h:1318 include/linux/of.h:1350 include/linux/of.h:1380
#: include/linux/of.h:1700 ../../../devicetree/kernel-api:17:
#: drivers/of/property.c:41 drivers/of/property.c:87 drivers/of/property.c:157
#: drivers/of/property.c:190 drivers/of/property.c:224
#: drivers/of/property.c:257 drivers/of/property.c:307
#: drivers/of/property.c:357 drivers/of/property.c:404
#: drivers/of/property.c:435 drivers/of/property.c:484
#: drivers/of/property.c:519 drivers/of/property.c:561
#: drivers/of/property.c:930 ../../../devicetree/kernel-api:26:
#: drivers/of/irq.c:742 drivers/of/irq.c:770
msgid "``const struct device_node *np``"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1428
#: drivers/of/base.c:1599 ../../../devicetree/kernel-api:14:
#: include/linux/of.h:994 include/linux/of.h:1042 include/linux/of.h:1082
msgid "pointer to a device tree node containing a list"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1430
#: drivers/of/base.c:1601 ../../../devicetree/kernel-api:14:
#: include/linux/of.h:996 include/linux/of.h:1044 include/linux/of.h:1084
msgid "``const char *list_name``"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1429
#: drivers/of/base.c:1600 ../../../devicetree/kernel-api:14:
#: include/linux/of.h:995 include/linux/of.h:1043 include/linux/of.h:1083
msgid "property name that contains a list"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1431
msgid "``const char *stem_name``"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1430
msgid "stem of property names that specify phandles' arguments count"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1432
#: drivers/of/base.c:1973 ../../../devicetree/kernel-api:14:
#: include/linux/of.h:974 include/linux/of.h:998 include/linux/of.h:1046
#: include/linux/of.h:1086 include/linux/of.h:1242
#: ../../../devicetree/kernel-api:23: drivers/of/address.c:1086
#: drivers/of/address.c:1117 ../../../devicetree/kernel-api:26:
#: drivers/of/irq.c:35 drivers/of/irq.c:350 drivers/of/irq.c:419
#: drivers/of/irq.c:453
msgid "``int index``"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1431
#: ../../../devicetree/kernel-api:14: include/linux/of.h:997
#: include/linux/of.h:1045 include/linux/of.h:1085
msgid "index of a phandle to parse out"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1433
#: ../../../devicetree/kernel-api:14: include/linux/of.h:999
#: include/linux/of.h:1047 include/linux/of.h:1087
msgid "``struct of_phandle_args *out_args``"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1432
#: ../../../devicetree/kernel-api:14: include/linux/of.h:998
#: include/linux/of.h:1046 include/linux/of.h:1086
msgid "optional pointer to output arguments structure (will be filled)"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1433
msgid ""
"This function is useful to parse lists of phandles and their arguments. "
"Returns 0 on success and fills out_args, on error returns appropriate errno "
"value. The difference between this function and of_parse_phandle_with_args() "
"is that this API remaps a phandle if the node the phandle points to has a "
"<**stem_name**>-map property."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1439
#: ../../../devicetree/kernel-api:14: include/linux/of.h:1003
#: include/linux/of.h:1051
msgid ""
"Caller is responsible to call of_node_put() on the returned out_args->np "
"pointer."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1442
#: ../../../devicetree/kernel-api:14: include/linux/of.h:1006
#: include/linux/of.h:1054
msgid "Example::"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1464
msgid ""
"To get a device_node of the ``node2`` node you may call this: "
"of_parse_phandle_with_args(node4, \"list\", \"list\", 1, :c:type:`args`);"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1598
msgid "Find the number of phandles references in a property"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1602
#: ../../../devicetree/kernel-api:14: include/linux/of.h:997
#: include/linux/of.h:1085
msgid "``const char *cells_name``"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1601
#: ../../../devicetree/kernel-api:14: include/linux/of.h:996
#: include/linux/of.h:1084
msgid "property name that specifies phandles' arguments count"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1603
msgid ""
"The number of phandle + argument tuples within a property. It is a typical "
"pattern to encode a list of phandle and variable arguments into a single "
"property. The number of arguments is encoded by a property in the phandle-"
"target node. For example, a gpios property would contain a list of GPIO "
"specifies consisting of a phandle and 1 or more arguments. The number of "
"arguments are determined by the #gpio-cells property in the node pointed to "
"by the phandle."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1700
msgid "Add a property to a node"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1706
#: drivers/of/base.c:1748 ../../../devicetree/kernel-api:17:
#: drivers/of/property.c:948 ../../../devicetree/kernel-api:23:
#: drivers/of/address.c:741 drivers/of/address.c:1009 drivers/of/address.c:1120
#: ../../../devicetree/kernel-api:38: drivers/of/device.c:73
#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:34
#: drivers/of/platform.c:98 drivers/of/platform.c:195
#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:296
#: drivers/of/dynamic.c:892 drivers/of/dynamic.c:954 drivers/of/dynamic.c:981
#: drivers/of/dynamic.c:1026 drivers/of/dynamic.c:1062
#: drivers/of/dynamic.c:1104
msgid "``struct device_node *np``"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1701
#: drivers/of/base.c:1743 ../../../devicetree/kernel-api:23:
#: drivers/of/address.c:1084
msgid "Caller's Device Node"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1703
#: drivers/of/base.c:1745 ../../../devicetree/kernel-api:53:
#: drivers/of/dynamic.c:893
msgid "``struct property *prop``"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1702
msgid "Property to add"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1742
msgid "Remove a property from a node."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1744
msgid "Property to remove"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1745
msgid ""
"Note that we don't actually remove it, since we have given out who-knows-how-"
"many pointers to the data using get-property. Instead we just move the "
"property to the \"dead properties\" list, so it won't be found any more."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1912
msgid "Get alias id for the given device_node"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1913
#: ../../../devicetree/kernel-api:14: include/linux/of.h:1695
msgid "Pointer to the given device_node"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1915
#: drivers/of/base.c:1949
msgid "``const char *stem``"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1914
msgid "Alias stem of the given device_node"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1915
msgid ""
"The function travels the lookup table to get the alias id for the given "
"device_node and alias stem."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1919
msgid "The alias id if found."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1943
msgid "Get highest alias id for the given stem"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1944
msgid "Alias stem to be examined"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1945
msgid ""
"The function travels the lookup table to get the highest alias id for the "
"given alias stem.  It returns the alias id if found."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1969
msgid "Test and setup console for DT setup"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1975
msgid "``const struct device_node *dn``"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1970
#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:891
msgid "Pointer to device node"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1972
msgid "``char *name``"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1971
msgid "Name to use for preferred console without index. ex. \"ttyS\""
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1972
msgid "Index to use for preferred console."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1973
msgid ""
"Check if the given device node matches the stdout-path property in the /"
"chosen node. If it does then register it as the preferred console."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:1977
msgid "TRUE if console successfully setup. Otherwise return FALSE."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:2049
msgid "Translate an ID through a downstream mapping."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:2050
msgid "root complex device node."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:2052
#: ../../../devicetree/kernel-api:17: drivers/of/property.c:667
msgid "``u32 id``"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:2051
msgid "device ID to map."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:2053
msgid "``const char *map_name``"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:2052
msgid "property name of the map to use."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:2054
msgid "``const char *map_mask_name``"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:2053
msgid "optional property name of the mask to use."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:2055
msgid "``struct device_node **target``"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:2054
msgid "optional pointer to a target device node."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:2056
msgid "``u32 *id_out``"
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:2055
msgid "optional pointer to receive the translated ID."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:2056
msgid ""
"Given a device ID, look up the appropriate implementation-defined platform "
"ID and/or the target device which receives transactions on that ID, as per "
"the \"iommu-map\" and \"msi-map\" bindings. Either of **target** or "
"**id_out** may be NULL if only the other is required. If **target** points "
"to a non-NULL device node pointer, only entries targeting that node will be "
"matched; if it points to a NULL value, it will receive the device node of "
"the first matching target phandle, with a reference held."
msgstr ""

#: ../../../devicetree/kernel-api:11: drivers/of/base.c:2065
msgid "0 on success or a standard error code on failure."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:104
msgid "initialize a devicetree node"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:105
msgid "Pointer to device node that has been created by kzalloc()"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:106
msgid ""
"On return the device_node refcount is set to one.  Use of_node_put() on "
"**node** when done to free the memory allocated for it.  If the node is NOT "
"a dynamic node the memory will not be freed. The decision of whether to free "
"the memory will be done by node->release(), which is of_node_release()."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:412
msgid "Test root of device tree for a given compatible value"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:418
msgid "``const char *compat``"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:413
msgid "compatible string to look for in root node's compatible property."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:415
msgid "true if the root node has the given value in its compatible property."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:970
msgid "Resolve a phandle property to a device_node pointer"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:971
msgid "Pointer to device node holding phandle property"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:973
msgid "``const char *phandle_name``"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:972
msgid "Name of property holding a phandle value"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:973
msgid ""
"For properties holding a table of phandles, this is the index into the table"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:976
msgid ""
"The device_node pointer with refcount incremented.  Use of_node_put() on it "
"when done."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:993
#: include/linux/of.h:1041 include/linux/of.h:1081
msgid "Find a node pointed by phandle in a list"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:999
#: include/linux/of.h:1047
msgid ""
"This function is useful to parse lists of phandles and their arguments. "
"Returns 0 on success and fills out_args, on error returns appropriate errno "
"value."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1020
msgid ""
"To get a device_node of the ``node2`` node you may call this: "
"of_parse_phandle_with_args(node3, \"list\", \"#list-cells\", 1, :c:type:"
"`args`);"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1045
msgid "``int cell_count``"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1044
msgid "number of argument cells following the phandle"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1066
msgid ""
"To get a device_node of the ``node2`` node you may call this: "
"of_parse_phandle_with_fixed_args(node3, \"list\", 2, 1, :c:type:`args`);"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1087
msgid ""
"Same as of_parse_phandle_with_args() except that if the cells_name property "
"is not found, cell_count of 0 is assumed."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1090
msgid ""
"This is used to useful, if you have a phandle which didn't have arguments "
"before and thus doesn't have a '#*-cells' property but is now migrated to "
"having arguments while retaining backwards compatibility."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1106
msgid "Compare two of_phandle_args"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1112
msgid "``const struct of_phandle_args *a1``"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1107
msgid "First of_phandle_args to compare"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1109
msgid "``const struct of_phandle_args *a2``"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1108
msgid "Second of_phandle_args to compare"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1110
msgid ""
"True if a1 and a2 are the same (same node pointer, same phandle args), false "
"otherwise."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1122
msgid "Count the number of u8 elements in a property"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1124
#: include/linux/of.h:1143 include/linux/of.h:1162 include/linux/of.h:1181
#: include/linux/of.h:1200 include/linux/of.h:1220 include/linux/of.h:1239
#: include/linux/of.h:1282 include/linux/of.h:1314 include/linux/of.h:1347
#: include/linux/of.h:1377 ../../../devicetree/kernel-api:17:
#: drivers/of/property.c:36 drivers/of/property.c:83 drivers/of/property.c:153
#: drivers/of/property.c:186 drivers/of/property.c:220
#: drivers/of/property.c:254 drivers/of/property.c:304
#: drivers/of/property.c:354 drivers/of/property.c:399
#: drivers/of/property.c:432 drivers/of/property.c:479
#: drivers/of/property.c:556
msgid "device node from which the property value is to be read."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1126
#: include/linux/of.h:1145 include/linux/of.h:1164 include/linux/of.h:1183
#: include/linux/of.h:1202 include/linux/of.h:1222 include/linux/of.h:1241
#: include/linux/of.h:1267 include/linux/of.h:1284 include/linux/of.h:1316
#: include/linux/of.h:1349 include/linux/of.h:1379
#: ../../../devicetree/kernel-api:17: drivers/of/property.c:38
#: drivers/of/property.c:85 drivers/of/property.c:155 drivers/of/property.c:188
#: drivers/of/property.c:222 drivers/of/property.c:256
#: drivers/of/property.c:306 drivers/of/property.c:356
#: drivers/of/property.c:401 drivers/of/property.c:434
#: drivers/of/property.c:481 drivers/of/property.c:516
#: drivers/of/property.c:558
msgid "``const char *propname``"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1125
#: include/linux/of.h:1144 include/linux/of.h:1163 include/linux/of.h:1182
#: include/linux/of.h:1201 include/linux/of.h:1221 include/linux/of.h:1240
#: include/linux/of.h:1266 include/linux/of.h:1283 include/linux/of.h:1315
#: include/linux/of.h:1348 include/linux/of.h:1378
#: ../../../devicetree/kernel-api:17: drivers/of/property.c:37
#: drivers/of/property.c:84 drivers/of/property.c:154 drivers/of/property.c:187
#: drivers/of/property.c:221 drivers/of/property.c:255
#: drivers/of/property.c:305 drivers/of/property.c:355
#: drivers/of/property.c:400 drivers/of/property.c:433
#: drivers/of/property.c:480 drivers/of/property.c:557
msgid "name of the property to be searched."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1126
msgid ""
"Search for a property in a device node and count the number of u8 elements "
"in it."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1130
msgid ""
"The number of elements on sucess, -EINVAL if the property does not exist or "
"its length does not match a multiple of u8 and -ENODATA if the property does "
"not have a value."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1141
msgid "Count the number of u16 elements in a property"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1145
msgid ""
"Search for a property in a device node and count the number of u16 elements "
"in it."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1149
msgid ""
"The number of elements on sucess, -EINVAL if the property does not exist or "
"its length does not match a multiple of u16 and -ENODATA if the property "
"does not have a value."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1160
msgid "Count the number of u32 elements in a property"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1164
msgid ""
"Search for a property in a device node and count the number of u32 elements "
"in it."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1168
msgid ""
"The number of elements on sucess, -EINVAL if the property does not exist or "
"its length does not match a multiple of u32 and -ENODATA if the property "
"does not have a value."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1179
msgid "Count the number of u64 elements in a property"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1183
msgid ""
"Search for a property in a device node and count the number of u64 elements "
"in it."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1187
msgid ""
"The number of elements on sucess, -EINVAL if the property does not exist or "
"its length does not match a multiple of u64 and -ENODATA if the property "
"does not have a value."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1198
msgid "Read an array of strings from a multiple strings property."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1203
#: ../../../devicetree/kernel-api:17: drivers/of/property.c:559
msgid "``const char **out_strs``"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1202
#: ../../../devicetree/kernel-api:17: drivers/of/property.c:558
msgid "output array of string pointers."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1204
#: include/linux/of.h:1286 include/linux/of.h:1318 include/linux/of.h:1351
#: include/linux/of.h:1381 ../../../devicetree/kernel-api:17:
#: drivers/of/property.c:560 ../../../devicetree/kernel-api:53:
#: drivers/of/dynamic.c:984 drivers/of/dynamic.c:1029
msgid "``size_t sz``"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1203
#: ../../../devicetree/kernel-api:17: drivers/of/property.c:559
msgid "number of array elements to read."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1204
msgid ""
"Search for a property in a device tree node and retrieve a list of "
"terminated string values (pointer to data, not a copy) in that property."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1208
msgid ""
"If **out_strs** is NULL, the number of strings in the property is returned."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1218
msgid "Find and return the number of strings from a multiple strings property."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1222
msgid ""
"Search for a property in a device tree node and retrieve the number of null "
"terminated string contain in it."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1226
msgid ""
"The number of strings on success, -EINVAL if the property does not exist, -"
"ENODATA if property does not have a value, and -EILSEQ if the string is not "
"null-terminated within the length of the property data."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1237
msgid "Find and read a string from a multiple strings property."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1241
msgid "index of the string in the list of strings"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1243
msgid "``const char **output``"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1242
#: ../../../devicetree/kernel-api:17: drivers/of/property.c:481
msgid ""
"pointer to null terminated return string, modified only if return value is 0."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1244
msgid ""
"Search for a property in a device tree node and retrieve a null terminated "
"string value (pointer to data, not a copy) in the list of strings contained "
"in that property."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1249
#: ../../../devicetree/kernel-api:17: drivers/of/property.c:490
msgid ""
"The out_string pointer is modified only if a valid string can be decoded."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1249
#: ../../../devicetree/kernel-api:17: drivers/of/property.c:487
msgid ""
"0 on success, -EINVAL if the property does not exist, -ENODATA if property "
"does not have a value, and -EILSEQ if the string is not null-terminated "
"within the length of the property data."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1264
msgid "Test if a property is present in a node"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1265
msgid "device node to search for the property."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1267
msgid "Test for a property present in a device node."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1270
#: ../../../devicetree/kernel-api:17: drivers/of/property.c:42
msgid "true if the property exists false otherwise."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1280
msgid "Find and read an array of u8 from a property."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1285
#: ../../../devicetree/kernel-api:17: drivers/of/property.c:257
msgid "``u8 *out_values``"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1284
#: include/linux/of.h:1316 include/linux/of.h:1349 include/linux/of.h:1379
#: ../../../devicetree/kernel-api:17: drivers/of/property.c:401
msgid "pointer to return value, modified only if return value is 0."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1285
#: include/linux/of.h:1317 include/linux/of.h:1350 include/linux/of.h:1380
msgid "number of array elements to read"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1286
#: ../../../devicetree/kernel-api:17: drivers/of/property.c:261
msgid "Search for a property in a device node and read 8-bit value(s) from it."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1289
#: include/linux/of.h:1321 ../../../devicetree/kernel-api:17:
#: drivers/of/property.c:264 drivers/of/property.c:314
msgid "dts entry of array should be like:"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1290
#: ../../../devicetree/kernel-api:17: drivers/of/property.c:265
msgid "``property = /bits/ 8 <0x50 0x60 0x70>;``"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1293
#: ../../../devicetree/kernel-api:17: drivers/of/property.c:268
msgid "The out_values is modified only if a valid u8 value can be decoded."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1293
#: include/linux/of.h:1325 include/linux/of.h:1355 include/linux/of.h:1385
#: ../../../devicetree/kernel-api:17: drivers/of/property.c:161
#: drivers/of/property.c:194 drivers/of/property.c:228
#: drivers/of/property.c:406
msgid ""
"0 on success, -EINVAL if the property does not exist, -ENODATA if property "
"does not have a value, and -EOVERFLOW if the property data isn't large "
"enough."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1312
msgid "Find and read an array of u16 from a property."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1317
#: ../../../devicetree/kernel-api:17: drivers/of/property.c:307
msgid "``u16 *out_values``"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1318
#: ../../../devicetree/kernel-api:17: drivers/of/property.c:311
msgid ""
"Search for a property in a device node and read 16-bit value(s) from it."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1322
#: ../../../devicetree/kernel-api:17: drivers/of/property.c:315
msgid "``property = /bits/ 16 <0x5000 0x6000 0x7000>;``"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1325
#: ../../../devicetree/kernel-api:17: drivers/of/property.c:318
msgid "The out_values is modified only if a valid u16 value can be decoded."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1344
msgid "Find and read an array of 32 bit integers from a property."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1350
#: ../../../devicetree/kernel-api:17: drivers/of/property.c:357
msgid "``u32 *out_values``"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1351
#: ../../../devicetree/kernel-api:17: drivers/of/property.c:361
msgid ""
"Search for a property in a device node and read 32-bit value(s) from it."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1355
#: ../../../devicetree/kernel-api:17: drivers/of/property.c:365
msgid "The out_values is modified only if a valid u32 value can be decoded."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1374
msgid "Find and read an array of 64 bit integers from a property."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1380
#: ../../../devicetree/kernel-api:17: drivers/of/property.c:435
msgid "``u64 *out_values``"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1381
#: ../../../devicetree/kernel-api:17: drivers/of/property.c:439
msgid ""
"Search for a property in a device node and read 64-bit value(s) from it."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1385
#: ../../../devicetree/kernel-api:17: drivers/of/property.c:443
msgid "The out_values is modified only if a valid u64 value can be decoded."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1555
msgid "Holds a changeset entry"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1559
#: include/linux/of.h:1581 ../../../devicetree/kernel-api:20:
#: include/linux/of_graph.h:23 ../../../devicetree/kernel-api:41:
#: include/linux/of_platform.h:21
msgid "**Definition**::"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1569
#: include/linux/of.h:1587 ../../../devicetree/kernel-api:20:
#: include/linux/of_graph.h:31 ../../../devicetree/kernel-api:41:
#: include/linux/of_platform.h:30
msgid "**Members**"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1557
msgid "``node``"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1558
msgid "list_head for the log list"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1558
msgid "``action``"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1559
msgid "notifier action"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1559
msgid "``np``"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1560
msgid "pointer to the device node affected"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1560
msgid "``prop``"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1561
msgid "pointer to the property affected"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1561
msgid "``old_prop``"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1562
msgid "hold a pointer to the original property"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1562
msgid ""
"Every modification of the device tree during a changeset is held in a list "
"of of_changeset_entry structures. That way we can recover from a partial "
"application, or we can revert the changeset"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1577
msgid "changeset tracker structure"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1579
msgid "``entries``"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1580
msgid "list_head for the changeset entries"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1580
msgid ""
"changesets are a convenient way to apply bulk changes to the live tree. In "
"case of an error, changes are rolled-back. changesets live on after initial "
"application, and if not destroyed after use, they can be reverted in one "
"single call."
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1694
msgid "Tells if system-power-controller is found for device_node"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1697
msgid "true if present false otherwise"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1705
msgid "Has DT been populated by bootloader"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1711
#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:1266
msgid "``void``"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1
#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:1
msgid "no arguments"
msgstr ""

#: ../../../devicetree/kernel-api:14: include/linux/of.h:1707
msgid ""
"True if a DTB has been populated by the bootloader and it isn't the empty "
"builtin one. False otherwise."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:35
msgid "Find a property"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:38
msgid ""
"Search for a boolean property in a device node. Usage on non-boolean "
"property types is deprecated."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:61
msgid "check graph's presence"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:62
msgid "pointer to device_node containing graph port"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:64
msgid ""
"True if **node** has a port or ports (with a port) sub-node, false otherwise."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:81
msgid "Count the number of elements in a property"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:86
msgid "``int elem_size``"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:85
msgid "size of the individual element"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:86
msgid ""
"Search for a property in a device node and count the number of elements of "
"size elem_size in it."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:90
msgid ""
"The number of elements on sucess, -EINVAL if the property does not exist or "
"its length does not match a multiple of elem_size and -ENODATA if the "
"property does not have a value."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:151
msgid "Find and read a u16 from a multi-value property."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:156
#: drivers/of/property.c:189 drivers/of/property.c:223
msgid "``u32 index``"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:155
msgid "index of the u16 in the list of values"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:157
msgid "``u16 *out_value``"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:156
#: drivers/of/property.c:189 drivers/of/property.c:223
msgid "pointer to return value, modified only if no error."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:157
msgid ""
"Search for a property in a device node and read nth 16-bit value from it."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:161
msgid "The out_value is modified only if a valid u16 value can be decoded."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:184
msgid "Find and read a u32 from a multi-value property."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:188
msgid "index of the u32 in the list of values"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:190
msgid "``u32 *out_value``"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:190
msgid ""
"Search for a property in a device node and read nth 32-bit value from it."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:194
msgid "The out_value is modified only if a valid u32 value can be decoded."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:218
msgid "Find and read a u64 from a multi-value property."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:222
msgid "index of the u64 in the list of values"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:224
#: drivers/of/property.c:402
msgid "``u64 *out_value``"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:224
msgid ""
"Search for a property in a device node and read nth 64-bit value from it."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:228
#: drivers/of/property.c:406
msgid "The out_value is modified only if a valid u64 value can be decoded."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:251
msgid ""
"Find and read an array of u8 from a property, with bounds on the minimum and "
"maximum array size."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:256
#: drivers/of/property.c:306 drivers/of/property.c:434
msgid "pointer to found values."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:258
#: drivers/of/property.c:308 drivers/of/property.c:358
#: drivers/of/property.c:436
msgid "``size_t sz_min``"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:257
#: drivers/of/property.c:307 drivers/of/property.c:357
#: drivers/of/property.c:435
msgid "minimum number of array elements to read"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:259
#: drivers/of/property.c:309 drivers/of/property.c:359
#: drivers/of/property.c:437
msgid "``size_t sz_max``"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:258
#: drivers/of/property.c:308 drivers/of/property.c:358
#: drivers/of/property.c:436
msgid ""
"maximum number of array elements to read, if zero there is no upper limit on "
"the number of elements in the dts entry but only sz_min will be read."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:268
#: drivers/of/property.c:318 drivers/of/property.c:365
#: drivers/of/property.c:443
msgid ""
"The number of elements read on success, -EINVAL if the property does not "
"exist, -ENODATA if property does not have a value, and -EOVERFLOW if the "
"property data is smaller than sz_min or longer than sz_max."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:301
msgid ""
"Find and read an array of u16 from a property, with bounds on the minimum "
"and maximum array size."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:351
msgid ""
"Find and read an array of 32 bit integers from a property, with bounds on "
"the minimum and maximum array size."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:356
msgid "pointer to return found values."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:398
msgid "Find and read a 64 bit integer from a property"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:402
msgid "Search for a property in a device node and read a 64-bit value from it."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:429
msgid ""
"Find and read an array of 64 bit integers from a property, with bounds on "
"the minimum and maximum array size."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:478
msgid "Find and read a string from a property"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:482
msgid "``const char **out_string``"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:483
msgid ""
"Search for a property in a device tree node and retrieve a null terminated "
"string value (pointer to data, not a copy)."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:487
msgid ""
"Note that the empty string \"\" has length of 1, thus -ENODATA cannot be "
"interpreted as an empty string."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:513
msgid "Find string in a list and return index"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:514
msgid "pointer to the node containing the string list property"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:515
msgid "string list property name"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:517
msgid "``const char *string``"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:516
msgid "pointer to the string to search for in the string list"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:517
msgid ""
"Search for an exact match of string in a device node property which is a "
"string of lists."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:521
msgid ""
"the index of the first occurrence of the string on success, -EINVAL if the "
"property does not exist, -ENODATA if the property does not have a value, and "
"-EILSEQ if the string is not null-terminated within the length of the "
"property data."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:555
msgid "Utility helper for parsing string properties"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:561
msgid "``int skip``"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:560
msgid "Number of strings to skip over at beginning of list."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:561
msgid ""
"Don't call this function directly. It is a utility helper for the "
"of_property_read_string*() family of functions."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:634
msgid "parse common endpoint node properties"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:635
msgid "pointer to endpoint device_node"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:637
msgid "``struct of_endpoint *endpoint``"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:636
msgid "pointer to the OF endpoint data structure"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:637
msgid "The caller should hold a reference to **node**."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:664
msgid "get the port matching a given id"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:670
#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:496
msgid "``struct device_node *parent``"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:665
#: drivers/of/property.c:758 drivers/of/property.c:815
msgid "pointer to the parent device node"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:666
msgid "id of the port"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:668
msgid ""
"A 'port' node pointer with refcount incremented. The caller has to use "
"of_node_put() on it when done."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:693
msgid "get next port node."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:694
msgid "pointer to the parent device node, or parent ports node"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:695
msgid "previous port node, or NULL to get first"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:696
msgid ""
"Parent device node can be used as **parent** whether device node has ports "
"node or not. It will work same as ports**0** node."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:700
msgid ""
"A 'port' node pointer with refcount incremented. Refcount of the passed "
"**prev** node is decremented."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:730
msgid ""
"get next endpoint node in port. If it reached to end of the port, it will "
"return NULL."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:736
msgid "``const struct device_node *port``"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:732
msgid "pointer to the target port node"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:733
#: drivers/of/property.c:759
msgid "previous endpoint node, or NULL to get first"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:735
#: drivers/of/property.c:761
msgid ""
"An 'endpoint' node pointer with refcount incremented. Refcount of the passed "
"**prev** node is decremented."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:757
msgid "get next endpoint node"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:814
msgid "get endpoint node of specific identifiers"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:817
msgid "``int port_reg``"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:816
#: drivers/of/property.c:961
msgid "identifier (value of reg property) of the parent port node"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:818
msgid "``int reg``"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:817
#: drivers/of/property.c:962
msgid "identifier (value of reg property) of the endpoint node"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:819
msgid ""
"An 'endpoint' node pointer which is identified by reg and at the same is the "
"child of a port node identified by port_reg. reg and port_reg are ignored "
"when they are -1. Use of_node_put() on the pointer when done."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:841
msgid "get remote endpoint node"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:842
#: drivers/of/property.c:856 drivers/of/property.c:888
#: drivers/of/property.c:906
msgid "pointer to a local endpoint device_node"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:844
msgid ""
"Remote endpoint node associated with remote endpoint node linked to "
"**node**. Use of_node_put() on it when done."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:855
msgid "get port's parent node"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:858
msgid ""
"device node associated with endpoint node linked to **node**. Use "
"of_node_put() on it when done."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:887
msgid "get remote port's parent node"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:890
#: drivers/of/property.c:964
msgid ""
"Remote device node associated with remote endpoint node linked to **node**. "
"Use of_node_put() on it when done."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:905
msgid "get remote port node"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:908
msgid ""
"Remote port node associated with remote endpoint node linked to **node**. "
"Use of_node_put() on it when done."
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:924
msgid "get the number of endpoints in a device node"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:925
#: ../../../devicetree/kernel-api:20: include/linux/of_graph.h:32
msgid "parent device node containing ports and endpoints"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:927
msgid "count of endpoint of this device node"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:942
msgid "get the number of port in a device or ports node"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:943
msgid "pointer to the device or ports node"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:945
msgid "count of port of this device or ports node"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:959
msgid "get remote parent device_node for given port/endpoint"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:960
msgid "pointer to parent device_node containing graph port/endpoint"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:962
msgid "``u32 port``"
msgstr ""

#: ../../../devicetree/kernel-api:17: drivers/of/property.c:963
msgid "``u32 endpoint``"
msgstr ""

#: ../../../devicetree/kernel-api:20: include/linux/of_graph.h:19
msgid "the OF graph endpoint data structure"
msgstr ""

#: ../../../devicetree/kernel-api:20: include/linux/of_graph.h:20
msgid "``port``"
msgstr ""

#: ../../../devicetree/kernel-api:20: include/linux/of_graph.h:21
msgid "identifier (value of reg property) of a port this endpoint belongs to"
msgstr ""

#: ../../../devicetree/kernel-api:20: include/linux/of_graph.h:21
msgid "``id``"
msgstr ""

#: ../../../devicetree/kernel-api:20: include/linux/of_graph.h:22
msgid "identifier (value of reg property) of this endpoint"
msgstr ""

#: ../../../devicetree/kernel-api:20: include/linux/of_graph.h:22
msgid "``local_node``"
msgstr ""

#: ../../../devicetree/kernel-api:20: include/linux/of_graph.h:23
msgid "pointer to device_node of this endpoint"
msgstr ""

#: ../../../devicetree/kernel-api:20: include/linux/of_graph.h:33
msgid "``for_each_endpoint_of_node (parent, child)``"
msgstr ""

#: ../../../devicetree/kernel-api:20: include/linux/of_graph.h:31
msgid "iterate over every endpoint in a device node"
msgstr ""

#: ../../../devicetree/kernel-api:20: include/linux/of_graph.h:37
#: include/linux/of_graph.h:48 include/linux/of_graph.h:60
msgid "``parent``"
msgstr ""

#: ../../../devicetree/kernel-api:20: include/linux/of_graph.h:34
#: include/linux/of_graph.h:45 include/linux/of_graph.h:57
msgid "``child``"
msgstr ""

#: ../../../devicetree/kernel-api:20: include/linux/of_graph.h:33
#: include/linux/of_graph.h:56
msgid "loop variable pointing to the current endpoint node"
msgstr ""

#: ../../../devicetree/kernel-api:20: include/linux/of_graph.h:34
msgid ""
"When breaking out of the loop, of_node_put(child) has to be called manually."
msgstr ""

#: ../../../devicetree/kernel-api:20: include/linux/of_graph.h:44
msgid "``for_each_of_graph_port (parent, child)``"
msgstr ""

#: ../../../devicetree/kernel-api:20: include/linux/of_graph.h:42
msgid "iterate over every port in a device or ports node"
msgstr ""

#: ../../../devicetree/kernel-api:20: include/linux/of_graph.h:43
msgid "parent device or ports node containing port"
msgstr ""

#: ../../../devicetree/kernel-api:20: include/linux/of_graph.h:44
msgid "loop variable pointing to the current port node"
msgstr ""

#: ../../../devicetree/kernel-api:20: include/linux/of_graph.h:45
#: include/linux/of_graph.h:57
msgid ""
"When breaking out of the loop, and continue to use the **child**, you need "
"to use return_ptr(**child**) or no_free_ptr(**child**) not to call __free() "
"for it."
msgstr ""

#: ../../../devicetree/kernel-api:20: include/linux/of_graph.h:56
msgid "``for_each_of_graph_port_endpoint (parent, child)``"
msgstr ""

#: ../../../devicetree/kernel-api:20: include/linux/of_graph.h:54
msgid "iterate over every endpoint in a port node"
msgstr ""

#: ../../../devicetree/kernel-api:20: include/linux/of_graph.h:55
msgid "parent port node"
msgstr ""

#: ../../../devicetree/kernel-api:23: drivers/of/address.c:653
msgid "Translate device tree address and size tuple"
msgstr ""

#: ../../../devicetree/kernel-api:23: drivers/of/address.c:659
#: drivers/of/address.c:1089 ../../../devicetree/kernel-api:26:
#: drivers/of/irq.c:38 drivers/of/irq.c:422 drivers/of/irq.c:456
#: drivers/of/irq.c:489 drivers/of/irq.c:530
msgid "``struct device_node *dev``"
msgstr ""

#: ../../../devicetree/kernel-api:23: drivers/of/address.c:654
msgid "device tree node for which to translate"
msgstr ""

#: ../../../devicetree/kernel-api:23: drivers/of/address.c:656
msgid "``const __be32 *prop``"
msgstr ""

#: ../../../devicetree/kernel-api:23: drivers/of/address.c:655
msgid "pointer into array of cells"
msgstr ""

#: ../../../devicetree/kernel-api:23: drivers/of/address.c:657
msgid "``phys_addr_t *start``"
msgstr ""

#: ../../../devicetree/kernel-api:23: drivers/of/address.c:656
msgid "return value for the start of the DMA range"
msgstr ""

#: ../../../devicetree/kernel-api:23: drivers/of/address.c:658
msgid "``size_t *length``"
msgstr ""

#: ../../../devicetree/kernel-api:23: drivers/of/address.c:657
msgid "return value for the length of the DMA range"
msgstr ""

#: ../../../devicetree/kernel-api:23: drivers/of/address.c:658
msgid ""
"Returns a pointer to the cell immediately following the translated DMA "
"region."
msgstr ""

#: ../../../devicetree/kernel-api:23: drivers/of/address.c:735
msgid "Retrieve the specified \"reg\" entry index without translating"
msgstr ""

#: ../../../devicetree/kernel-api:23: drivers/of/address.c:736
msgid "device tree node for which to retrieve \"reg\" from"
msgstr ""

#: ../../../devicetree/kernel-api:23: drivers/of/address.c:738
msgid "``int idx``"
msgstr ""

#: ../../../devicetree/kernel-api:23: drivers/of/address.c:737
msgid "\"reg\" entry index to read"
msgstr ""

#: ../../../devicetree/kernel-api:23: drivers/of/address.c:739
msgid "``u64 *addr``"
msgstr ""

#: ../../../devicetree/kernel-api:23: drivers/of/address.c:738
msgid "return value for the untranslated address"
msgstr ""

#: ../../../devicetree/kernel-api:23: drivers/of/address.c:740
msgid "``u64 *size``"
msgstr ""

#: ../../../devicetree/kernel-api:23: drivers/of/address.c:739
msgid "return value for the entry size"
msgstr ""

#: ../../../devicetree/kernel-api:23: drivers/of/address.c:740
msgid ""
"Returns -EINVAL if \"reg\" is not found. Returns 0 on success with addr and "
"size values filled in."
msgstr ""

#: ../../../devicetree/kernel-api:23: drivers/of/address.c:1003
msgid "Check if device is coherent"
msgstr ""

#: ../../../devicetree/kernel-api:23: drivers/of/address.c:1004
msgid "device node"
msgstr ""

#: ../../../devicetree/kernel-api:23: drivers/of/address.c:1005
msgid ""
"It returns true if \"dma-coherent\" property was found for this device in "
"the DT, or if DMA is coherent by default for OF devices on the current "
"platform and no \"dma-noncoherent\" property was found for this device."
msgstr ""

#: ../../../devicetree/kernel-api:23: drivers/of/address.c:1083
msgid "Translate device tree address and return as resource"
msgstr ""

#: ../../../devicetree/kernel-api:23: drivers/of/address.c:1085
msgid "Index into the array"
msgstr ""

#: ../../../devicetree/kernel-api:23: drivers/of/address.c:1087
#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:420
msgid "``struct resource *r``"
msgstr ""

#: ../../../devicetree/kernel-api:23: drivers/of/address.c:1086
msgid "Pointer to resource array"
msgstr ""

#: ../../../devicetree/kernel-api:23: drivers/of/address.c:1087
msgid "Returns -EINVAL if the range cannot be converted to resource."
msgstr ""

#: ../../../devicetree/kernel-api:23: drivers/of/address.c:1089
msgid ""
"Note that if your address is a PIO address, the conversion will fail if the "
"physical address can't be internally converted to an IO token with "
"pci_address_to_pio(), that is because it's either called too early or it "
"can't be matched to any host bridge IO space"
msgstr ""

#: ../../../devicetree/kernel-api:23: drivers/of/address.c:1114
msgid "Maps the memory mapped IO for a given device_node"
msgstr ""

#: ../../../devicetree/kernel-api:23: drivers/of/address.c:1115
msgid "the device whose io range will be mapped"
msgstr ""

#: ../../../devicetree/kernel-api:23: drivers/of/address.c:1116
msgid "index of the io range"
msgstr ""

#: ../../../devicetree/kernel-api:23: drivers/of/address.c:1117
msgid "Returns a pointer to the mapped memory"
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:32
msgid "Parse and map an interrupt into linux virq space"
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:33
msgid "Device node of the device whose interrupt is to be mapped"
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:34
msgid "Index of the interrupt to map"
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:35
msgid ""
"This function is a wrapper that chains of_irq_parse_one() and "
"irq_create_of_mapping() to make things easier to callers"
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:55
msgid "Given a device node, find its interrupt parent node"
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:61
msgid "``struct device_node *child``"
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:56
msgid "pointer to device node"
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:58
msgid ""
"A pointer to the interrupt parent node with refcount increased or NULL if "
"the interrupt parent could not be determined."
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:161
msgid "Low level interrupt tree parsing"
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:167
msgid "``const __be32 *addr``"
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:162
msgid ""
"address specifier (start of \"reg\" property of the device) in be32 format"
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:164 drivers/of/irq.c:351
msgid "``struct of_phandle_args *out_irq``"
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:163
msgid "structure of_phandle_args updated by this function"
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:164
msgid ""
"This function is a low-level interrupt tree walking function. It can be used "
"to do a partial walk with synthetized reg and interrupts properties, for "
"example when resolving PCI interrupts when no device node exist for the "
"parent. It takes an interrupt specifier structure as input, walks the tree "
"looking for any interrupt-map properties, translates the specifier for each "
"map, and then returns the translated map."
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:172
msgid "0 on success and a negative number on error"
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:174 drivers/of/irq.c:356
msgid "refcount of node **out_irq->np** is increased by 1 on success."
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:347
msgid "Resolve an interrupt for a device"
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:353
msgid "``struct device_node *device``"
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:348
msgid "the device whose interrupt is to be resolved"
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:349
msgid "index of the interrupt to resolve"
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:350
msgid "structure of_phandle_args filled by this function"
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:351
msgid ""
"This function resolves an interrupt for a node by walking the interrupt "
"tree, finding which interrupt controller node it is attached to, and "
"returning the interrupt specifier that can be used to retrieve a Linux IRQ "
"number."
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:416
msgid "Decode a node's IRQ and return it as a resource"
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:417 drivers/of/irq.c:451
#: drivers/of/irq.c:484 drivers/of/irq.c:525
msgid "pointer to device tree node"
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:418
msgid "zero-based index of the irq"
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:419
msgid "pointer to resource structure to return result into."
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:450 drivers/of/irq.c:483
msgid "Decode a node's IRQ and return it as a Linux IRQ number"
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:452
msgid "zero-based index of the IRQ"
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:454 drivers/of/irq.c:487
msgid ""
"Linux IRQ number on success, or 0 on the IRQ mapping failure, or -"
"EPROBE_DEFER if the IRQ domain is not yet created, or error code in case of "
"any other failure."
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:485
msgid "IRQ name"
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:524
msgid "Fill in resource table with node's IRQ info"
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:527
msgid "``struct resource *res``"
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:526
msgid "array of resources to fill in"
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:528
msgid "``int nr_irqs``"
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:527
msgid "the number of IRQs (and upper bound for num of **res** elements)"
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:529
msgid "The size of the filled in table (up to **nr_irqs**)."
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:739
msgid "Use msi-parent to find the relevant MSI domain"
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:745 drivers/of/irq.c:773
#: ../../../devicetree/kernel-api:35: include/linux/of_device.h:22
#: ../../../devicetree/kernel-api:38: drivers/of/device.c:76
#: drivers/of/device.c:192 drivers/of/device.c:283
#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:662
#: drivers/of/platform.c:708
msgid "``struct device *dev``"
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:740
msgid "device for which the domain is requested"
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:741
msgid "device node for **dev**"
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:743
msgid "``enum irq_domain_bus_token token``"
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:742
msgid "bus type for this domain"
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:743
msgid "Parse the msi-parent property and returns the corresponding MSI domain."
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:746
msgid "the MSI domain for this device (or NULL on failure)."
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:767
msgid "Set the msi_domain field of a device"
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:768
msgid "device structure to associate with an MSI irq domain"
msgstr ""

#: ../../../devicetree/kernel-api:26: drivers/of/irq.c:769
msgid "device node for that device"
msgstr ""

#: ../../../devicetree/kernel-api:29: drivers/of/fdt.c:427
msgid "create tree of device_nodes from flat blob"
msgstr ""

#: ../../../devicetree/kernel-api:29: drivers/of/fdt.c:433
msgid "``const unsigned long *blob``"
msgstr ""

#: ../../../devicetree/kernel-api:29: drivers/of/fdt.c:428
msgid "Flat device tree blob"
msgstr ""

#: ../../../devicetree/kernel-api:29: drivers/of/fdt.c:430
msgid "``struct device_node *dad``"
msgstr ""

#: ../../../devicetree/kernel-api:29: drivers/of/fdt.c:429
msgid "Parent device node"
msgstr ""

#: ../../../devicetree/kernel-api:29: drivers/of/fdt.c:431
msgid "``struct device_node **mynodes``"
msgstr ""

#: ../../../devicetree/kernel-api:29: drivers/of/fdt.c:430
msgid "The device tree created by the call"
msgstr ""

#: ../../../devicetree/kernel-api:29: drivers/of/fdt.c:431
msgid ""
"unflattens the device-tree passed by the firmware, creating the tree of "
"struct device_node. It also fills the \"name\" and \"type\" pointers of the "
"nodes so the normal device-tree walking functions can be used."
msgstr ""

#: ../../../devicetree/kernel-api:29: drivers/of/fdt.c:437
msgid ""
"NULL on failure or the memory chunk containing the unflattened device tree "
"on success."
msgstr ""

#: ../../../devicetree/kernel-api.rst:33
msgid "Driver model functions"
msgstr ""

#: ../../../devicetree/kernel-api:35: include/linux/of_device.h:16
msgid "Tell if a driver's of_match_table matches a device."
msgstr ""

#: ../../../devicetree/kernel-api:35: include/linux/of_device.h:18
msgid "the device structure to match against"
msgstr ""

#: ../../../devicetree/kernel-api:35: include/linux/of_device.h:20
msgid "``const struct device_driver *drv``"
msgstr ""

#: ../../../devicetree/kernel-api:35: include/linux/of_device.h:17
msgid "the device_driver structure to test"
msgstr ""

#: ../../../devicetree/kernel-api:38: drivers/of/device.c:19
msgid "Tell if a struct device matches an of_device_id list"
msgstr ""

#: ../../../devicetree/kernel-api:38: drivers/of/device.c:20
msgid "array of of_device_id match structures to search in"
msgstr ""

#: ../../../devicetree/kernel-api:38: drivers/of/device.c:22
#: drivers/of/device.c:217
msgid "``const struct device *dev``"
msgstr ""

#: ../../../devicetree/kernel-api:38: drivers/of/device.c:21
msgid "the OF device structure to match against"
msgstr ""

#: ../../../devicetree/kernel-api:38: drivers/of/device.c:22
msgid ""
"Used by a driver to check whether an platform_device present in the system "
"is in its list of supported devices."
msgstr ""

#: ../../../devicetree/kernel-api:38: drivers/of/device.c:70
msgid "Setup DMA configuration"
msgstr ""

#: ../../../devicetree/kernel-api:38: drivers/of/device.c:71
msgid "Device to apply DMA configuration"
msgstr ""

#: ../../../devicetree/kernel-api:38: drivers/of/device.c:72
msgid "Pointer to OF node having DMA configuration"
msgstr ""

#: ../../../devicetree/kernel-api:38: drivers/of/device.c:74
msgid "``bool force_dma``"
msgstr ""

#: ../../../devicetree/kernel-api:38: drivers/of/device.c:73
msgid ""
"Whether device is to be set up by of_dma_configure() even if DMA capability "
"is not explicitly described by firmware."
msgstr ""

#: ../../../devicetree/kernel-api:38: drivers/of/device.c:76
msgid "``const u32 *id``"
msgstr ""

#: ../../../devicetree/kernel-api:38: drivers/of/device.c:75
msgid "Optional const pointer value input id"
msgstr ""

#: ../../../devicetree/kernel-api:38: drivers/of/device.c:76
msgid ""
"Try to get devices's DMA configuration from DT and update it accordingly."
msgstr ""

#: ../../../devicetree/kernel-api:38: drivers/of/device.c:79
msgid ""
"If platform code needs to use its own special DMA configuration, it can use "
"a platform bus notifier and handle BUS_NOTIFY_ADD_DEVICE events to fix up "
"DMA configuration."
msgstr ""

#: ../../../devicetree/kernel-api:38: drivers/of/device.c:186
msgid "Fill buffer with newline terminated modalias string"
msgstr ""

#: ../../../devicetree/kernel-api:38: drivers/of/device.c:187
msgid "Calling device"
msgstr ""

#: ../../../devicetree/kernel-api:38: drivers/of/device.c:189
msgid "``char *str``"
msgstr ""

#: ../../../devicetree/kernel-api:38: drivers/of/device.c:188
msgid "Modalias string"
msgstr ""

#: ../../../devicetree/kernel-api:38: drivers/of/device.c:190
msgid "``ssize_t len``"
msgstr ""

#: ../../../devicetree/kernel-api:38: drivers/of/device.c:189
msgid "Size of **str**"
msgstr ""

#: ../../../devicetree/kernel-api:38: drivers/of/device.c:211
msgid "Display OF related uevent information"
msgstr ""

#: ../../../devicetree/kernel-api:38: drivers/of/device.c:212
msgid "Device to display the uevent information for"
msgstr ""

#: ../../../devicetree/kernel-api:38: drivers/of/device.c:214
msgid "``struct kobj_uevent_env *env``"
msgstr ""

#: ../../../devicetree/kernel-api:38: drivers/of/device.c:213
msgid "Kernel object's userspace event reference to fill up"
msgstr ""

#: ../../../devicetree/kernel-api:38: drivers/of/device.c:277
msgid "Use the device node data to assign a unique name"
msgstr ""

#: ../../../devicetree/kernel-api:38: drivers/of/device.c:278
msgid "pointer to device structure that is linked to a device tree node"
msgstr ""

#: ../../../devicetree/kernel-api:38: drivers/of/device.c:279
msgid ""
"This routine will first try using the translated bus address to derive a "
"unique name. If it cannot, then it will prepend names from parent nodes "
"until a unique name can be derived."
msgstr ""

#: ../../../devicetree/kernel-api:41: include/linux/of_platform.h:17
msgid "lookup table entry for device names & platform_data"
msgstr ""

#: ../../../devicetree/kernel-api:41: include/linux/of_platform.h:18
msgid "``compatible``"
msgstr ""

#: ../../../devicetree/kernel-api:41: include/linux/of_platform.h:19
msgid "compatible value of node to match against node"
msgstr ""

#: ../../../devicetree/kernel-api:41: include/linux/of_platform.h:19
msgid "``phys_addr``"
msgstr ""

#: ../../../devicetree/kernel-api:41: include/linux/of_platform.h:20
msgid "Start address of registers to match against node"
msgstr ""

#: ../../../devicetree/kernel-api:41: include/linux/of_platform.h:20
msgid "``name``"
msgstr ""

#: ../../../devicetree/kernel-api:41: include/linux/of_platform.h:21
msgid "Name to assign for matching nodes"
msgstr ""

#: ../../../devicetree/kernel-api:41: include/linux/of_platform.h:21
msgid "``platform_data``"
msgstr ""

#: ../../../devicetree/kernel-api:41: include/linux/of_platform.h:22
msgid "platform_data to assign for matching nodes"
msgstr ""

#: ../../../devicetree/kernel-api:41: include/linux/of_platform.h:22
msgid ""
"This lookup table allows the caller of of_platform_populate() to override "
"the names of devices when creating devices from the device tree.  The table "
"should be terminated with an empty entry.  It also allows the platform_data "
"pointer to be set."
msgstr ""

#: ../../../devicetree/kernel-api:41: include/linux/of_platform.h:27
msgid ""
"The reason for this functionality is that some Linux infrastructure uses the "
"device name to look up a specific device, but the Linux-specific names are "
"not encoded into the device tree, so the kernel needs to provide specific "
"values."
msgstr ""

#: ../../../devicetree/kernel-api:41: include/linux/of_platform.h:33
msgid ""
"Using an auxdata lookup table should be considered a last resort when "
"converting a platform to use the DT.  Normally the automatically generated "
"device name will not matter, and drivers should obtain data from the device "
"node instead of from an anonymous platform_data pointer."
msgstr ""

#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:28
msgid "Find the platform_device associated with a node"
msgstr ""

#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:29
msgid "Pointer to device tree node"
msgstr ""

#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:30
msgid ""
"Takes a reference to the embedded struct device which needs to be dropped "
"after use."
msgstr ""

#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:34
msgid "platform_device pointer, or NULL if not found"
msgstr ""

#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:92
msgid "Allocate and initialize an of_device"
msgstr ""

#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:93
msgid "device node to assign to device"
msgstr ""

#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:95
#: drivers/of/platform.c:192
msgid "``const char *bus_id``"
msgstr ""

#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:94
msgid "Name to assign to the device.  May be null to use default name."
msgstr ""

#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:96
#: drivers/of/platform.c:193 drivers/of/platform.c:389
#: drivers/of/platform.c:431 drivers/of/platform.c:639
msgid "``struct device *parent``"
msgstr ""

#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:95
msgid "Parent device."
msgstr ""

#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:189
msgid "Alloc, initialize and register an of_device"
msgstr ""

#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:190
msgid "pointer to node to create device for"
msgstr ""

#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:191
msgid "name to assign device"
msgstr ""

#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:192
msgid "Linux device model parent device."
msgstr ""

#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:194
msgid ""
"Pointer to created platform device, or NULL if a device was not registered.  "
"Unavailable devices will not get registered."
msgstr ""

#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:385
msgid "Probe the device-tree for platform buses"
msgstr ""

#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:391
#: drivers/of/platform.c:432
msgid "``struct device_node *root``"
msgstr ""

#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:386
#: drivers/of/platform.c:427
msgid "parent of the first level to probe or NULL for the root of the tree"
msgstr ""

#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:387
msgid "match table for bus nodes"
msgstr ""

#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:388
#: drivers/of/platform.c:430
msgid "parent to hook devices from, NULL for toplevel"
msgstr ""

#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:389
msgid ""
"Note that children of the provided root are not instantiated as devices "
"unless the specified root itself matches the bus list and is not NULL."
msgstr ""

#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:426
#: drivers/of/platform.c:656
msgid "Populate platform_devices from device tree data"
msgstr ""

#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:428
msgid "match table, NULL to use the default"
msgstr ""

#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:430
msgid "``const struct of_dev_auxdata *lookup``"
msgstr ""

#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:429
msgid "auxdata table for matching id and platform_data with device nodes"
msgstr ""

#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:431
msgid ""
"Similar to of_platform_bus_probe(), this function walks the device tree and "
"creates devices from nodes.  It differs in that it follows the modern "
"convention of requiring all device nodes to have a 'compatible' property, "
"and it is suitable for creating devices which are children of the root node "
"(of_platform_bus_probe will only create children of the root which are "
"selected by the **matches** argument)."
msgstr ""

#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:438
msgid ""
"New board support should be using this function instead of "
"of_platform_bus_probe()."
msgstr ""

#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:442
#: drivers/of/platform.c:662
msgid "0 on success, < 0 on failure."
msgstr ""

#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:633
#: drivers/of/platform.c:702
msgid "Remove devices populated from device tree"
msgstr ""

#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:634
msgid "device which children will be removed"
msgstr ""

#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:635
msgid ""
"Complementary to of_platform_populate(), this function removes children of "
"the given device (and, recursively, their children) that have been created "
"from their respective device tree nodes (and only those, leaving others - "
"eg. manually created - unharmed)."
msgstr ""

#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:657
msgid "device that requested to populate from device tree data"
msgstr ""

#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:658
msgid ""
"Similar to of_platform_populate(), but will automatically call "
"of_platform_depopulate() when the device is unbound from the bus."
msgstr ""

#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:703
msgid "device that requested to depopulate from device tree data"
msgstr ""

#: ../../../devicetree/kernel-api:44: drivers/of/platform.c:704
msgid ""
"Complementary to devm_of_platform_populate(), this function removes children "
"of the given device (and, recursively, their children) that have been "
"created from their respective device tree nodes (and only those, leaving "
"others - eg. manually created - unharmed)."
msgstr ""

#: ../../../devicetree/kernel-api.rst:48
msgid "Overlay and Dynamic DT functions"
msgstr ""

#: ../../../devicetree/kernel-api:50: drivers/of/resolver.c:216
msgid "Relocate and resolve overlay against live tree"
msgstr ""

#: ../../../devicetree/kernel-api:50: drivers/of/resolver.c:222
msgid "``struct device_node *overlay``"
msgstr ""

#: ../../../devicetree/kernel-api:50: drivers/of/resolver.c:218
msgid "Pointer to devicetree overlay to relocate and resolve"
msgstr ""

#: ../../../devicetree/kernel-api:50: drivers/of/resolver.c:219
msgid ""
"Modify (relocate) values of local phandles in **overlay** to a range that "
"does not conflict with the live expanded devicetree.  Update references to "
"the local phandles in **overlay**.  Update (resolve) phandle references in "
"**overlay** that refer to the live expanded devicetree."
msgstr ""

#: ../../../devicetree/kernel-api:50: drivers/of/resolver.c:224
msgid ""
"Phandle values in the live tree are in the range of 1 .. "
"live_tree_max_phandle().  The range of phandle values in the overlay also "
"begin with at 1.  Adjust the phandle values in the overlay to begin at "
"live_tree_max_phandle() + 1.  Update references to the phandles to the "
"adjusted phandle values."
msgstr ""

#: ../../../devicetree/kernel-api:50: drivers/of/resolver.c:230
msgid ""
"The name of each property in the \"__fixups__\" node in the overlay matches "
"the name of a symbol (a label) in the live tree.  The values of each "
"property in the \"__fixups__\" node is a list of the property values in the "
"overlay that need to be updated to contain the phandle reference "
"corresponding to that symbol in the live tree.  Update the references in the "
"overlay with the phandle values in the live tree."
msgstr ""

#: ../../../devicetree/kernel-api:50: drivers/of/resolver.c:237
msgid "**overlay** must be detached."
msgstr ""

#: ../../../devicetree/kernel-api:50: drivers/of/resolver.c:239
msgid ""
"Resolving and applying **overlay** to the live expanded devicetree must be "
"protected by a mechanism to ensure that multiple overlays are processed in a "
"single threaded manner so that multiple overlays will not relocate phandles "
"to overlapping ranges.  The mechanism to enforce this is not yet implemented."
msgstr ""

#: ../../../devicetree/kernel-api:50: drivers/of/resolver.c:246
msgid "``0`` on success or a negative error value on error."
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:28
msgid "Increment refcount of a node"
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:29
msgid "Node to inc refcount, NULL is supported to simplify writing of callers"
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:32
msgid "The node with refcount incremented."
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:43
msgid "Decrement refcount of a node"
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:44
msgid "Node to dec refcount, NULL is supported to simplify writing of callers"
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:290
msgid "\"Unplug\" a node from the device tree."
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:291
msgid "Pointer to the caller's Device Node"
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:491
msgid "Dynamically create a device node and attach to a given changeset."
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:497
#: drivers/of/dynamic.c:654 drivers/of/dynamic.c:668 drivers/of/dynamic.c:774
#: drivers/of/dynamic.c:869 drivers/of/dynamic.c:893 drivers/of/dynamic.c:956
#: drivers/of/dynamic.c:982 drivers/of/dynamic.c:1027 drivers/of/dynamic.c:1063
#: drivers/of/dynamic.c:1106
msgid "``struct of_changeset *ocs``"
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:494
msgid "Pointer to changeset"
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:495
msgid "Pointer to parent device node"
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:497
msgid "``const char *full_name``"
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:496
msgid "Node full name"
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:498
msgid "Pointer to the created device node or NULL in case of an error."
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:648
msgid "Initialize a changeset for use"
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:650
#: drivers/of/dynamic.c:664 drivers/of/dynamic.c:770 drivers/of/dynamic.c:865
#: drivers/of/dynamic.c:889 drivers/of/dynamic.c:952 drivers/of/dynamic.c:979
#: drivers/of/dynamic.c:1024 drivers/of/dynamic.c:1060
#: drivers/of/dynamic.c:1102
msgid "changeset pointer"
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:651
msgid "Initialize a changeset structure"
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:662
msgid "Destroy a changeset"
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:665
msgid ""
"Destroys a changeset. Note that if a changeset is applied, its changes to "
"the tree cannot be reverted."
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:768
msgid "Applies a changeset"
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:771
msgid ""
"Applies a changeset to the live tree. Any side-effects of live tree state "
"changes are applied here on success, like creation/destruction of devices "
"and side-effects like creation of sysfs properties and directories."
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:777
msgid ""
"0 on success, a negative error value in case of an error. On error the "
"partially applied effects are reverted."
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:863
msgid "Reverts an applied changeset"
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:866
msgid ""
"Reverts a changeset returning the state of the tree to what it was before "
"the application. Any side-effects like creation/destruction of devices and "
"removal of sysfs properties and directories are applied."
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:872
#: drivers/of/dynamic.c:901 drivers/of/dynamic.c:959 drivers/of/dynamic.c:987
#: drivers/of/dynamic.c:1032 drivers/of/dynamic.c:1066
#: drivers/of/dynamic.c:1109
msgid "0 on success, a negative error value in case of an error."
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:887
msgid "Add an action to the tail of the changeset list"
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:891
msgid "``unsigned long action``"
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:890
msgid "action to perform"
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:892
msgid "Pointer to property"
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:893
msgid ""
"On action being one of: + OF_RECONFIG_ATTACH_NODE + OF_RECONFIG_DETACH_NODE, "
"+ OF_RECONFIG_ADD_PROPERTY + OF_RECONFIG_REMOVE_PROPERTY, + "
"OF_RECONFIG_UPDATE_PROPERTY"
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:950
msgid "Add a string property to a changeset"
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:953
#: drivers/of/dynamic.c:980 drivers/of/dynamic.c:1025 drivers/of/dynamic.c:1061
#: drivers/of/dynamic.c:1103
msgid "device node pointer"
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:954
#: drivers/of/dynamic.c:981 drivers/of/dynamic.c:1026 drivers/of/dynamic.c:1062
msgid "name of the property to be added"
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:956
#: drivers/of/dynamic.c:1106
msgid "``const char *str``"
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:955
#: drivers/of/dynamic.c:1105
msgid "pointer to null terminated string"
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:956
msgid "Create a string property and add it to a changeset."
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:976
msgid "Add a string list property to a changeset"
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:983
msgid "``const char * const *str_array``"
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:982
msgid "pointer to an array of null terminated strings"
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:983
msgid "number of string array elements"
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:984
msgid "Create a string list property and add it to a changeset."
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:1021
msgid "Add a property of 32 bit integers property to a changeset"
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:1028
msgid "``const u32 *array``"
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:1027
msgid "pointer to an array of 32 bit integers"
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:1028
msgid "number of array elements"
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:1029
msgid "Create a property of 32 bit integers and add it to a changeset."
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:1057
msgid ""
"Add a boolean property (i.e. a property without any values) to a changeset."
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:1063
msgid "Create a boolean property and add it to a changeset."
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:1100
msgid "Add a string property update to a changeset"
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:1104
msgid "name of the property to be updated"
msgstr ""

#: ../../../devicetree/kernel-api:53: drivers/of/dynamic.c:1106
msgid "Create a string property to be updated and add it to a changeset."
msgstr ""

#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:134
msgid "Register notifier for overlay operations"
msgstr ""

#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:140
#: drivers/of/overlay.c:158
msgid "``struct notifier_block *nb``"
msgstr ""

#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:135
msgid "Notifier block to register"
msgstr ""

#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:136
msgid ""
"Register for notification on overlay operations on device tree nodes. The "
"reported actions definied by **of_reconfig_change**. The notifier callback "
"furthermore receives a pointer to the affected device tree node."
msgstr ""

#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:140
msgid ""
"Note that a notifier callback is not supposed to store pointers to a device "
"tree node or its content beyond **OF_OVERLAY_POST_REMOVE** corresponding to "
"the respective node it received."
msgstr ""

#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:152
msgid "Unregister notifier for overlay operations"
msgstr ""

#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:153
msgid "Notifier block to unregister"
msgstr ""

#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:966
msgid "Create and apply an overlay changeset"
msgstr ""

#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:972
msgid "``const void *overlay_fdt``"
msgstr ""

#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:967
msgid "pointer to overlay FDT"
msgstr ""

#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:969
msgid "``u32 overlay_fdt_size``"
msgstr ""

#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:968
msgid "number of bytes in **overlay_fdt**"
msgstr ""

#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:970
msgid "``int *ret_ovcs_id``"
msgstr ""

#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:969
msgid "pointer for returning created changeset id"
msgstr ""

#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:971
msgid "``const struct device_node *base``"
msgstr ""

#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:970
msgid "pointer for the target node to apply overlay"
msgstr ""

#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:971
msgid "Creates and applies an overlay changeset."
msgstr ""

#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:973
msgid "See of_overlay_apply() for important behavior information."
msgstr ""

#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:976
msgid ""
"On error return, the changeset may be partially applied.  This is especially "
"likely if an OF_OVERLAY_POST_APPLY notifier returns an error.  In this case "
"the caller should call of_overlay_remove() with the value in "
"***ret_ovcs_id**."
msgstr ""

#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:976
msgid ""
"0 on success, or a negative error number.  ***ret_ovcs_id** is set to the "
"value of overlay changeset id, which can be passed to of_overlay_remove() to "
"remove the overlay."
msgstr ""

#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:1155
msgid "Revert and free an overlay changeset"
msgstr ""

#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:1161
msgid "``int *ovcs_id``"
msgstr ""

#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:1156
msgid "Pointer to overlay changeset id"
msgstr ""

#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:1157
msgid ""
"Removes an overlay if it is permissible.  **ovcs_id** was previously "
"returned by of_overlay_fdt_apply()."
msgstr ""

#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:1160
msgid ""
"If an error occurred while attempting to revert the overlay changeset, then "
"an attempt is made to re-apply any changeset entry that was reverted.  If an "
"error occurs on re-apply then the state of the device tree can not be "
"determined, and any following attempt to apply or remove an overlay "
"changeset will be refused."
msgstr ""

#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:1166
msgid "A non-zero return value will not revert the changeset if error is from:"
msgstr ""

#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:1167
msgid "parameter checks"
msgstr ""

#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:1168
msgid "overlay changeset pre-remove notifier"
msgstr ""

#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:1169
msgid "overlay changeset entry revert"
msgstr ""

#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:1171
msgid ""
"If an error is returned by an overlay changeset pre-remove notifier then no "
"further overlay changeset pre-remove notifier will be called."
msgstr ""

#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:1174
msgid ""
"If more than one notifier returns an error, then the last notifier error to "
"occur is returned."
msgstr ""

#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:1177
msgid "A non-zero return value will revert the changeset if error is from:"
msgstr ""

#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:1178
msgid "overlay changeset entry notifier"
msgstr ""

#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:1179
msgid "overlay changeset post-remove notifier"
msgstr ""

#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:1181
msgid ""
"If an error is returned by an overlay changeset post-remove notifier then no "
"further overlay changeset post-remove notifier will be called."
msgstr ""

#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:1185
msgid ""
"0 on success, or a negative error number.  ***ovcs_id** is set to zero after "
"reverting the changeset, even if a subsequent error occurs."
msgstr ""

#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:1260
msgid "Reverts and frees all overlay changesets"
msgstr ""

#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:1261
msgid "Removes all overlays from the system in the correct order."
msgstr ""

#: ../../../devicetree/kernel-api:56: drivers/of/overlay.c:1264
msgid "0 on success, or a negative error number"
msgstr ""
