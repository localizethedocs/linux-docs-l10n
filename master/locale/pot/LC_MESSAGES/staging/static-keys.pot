# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../staging/static-keys.rst:3
msgid "Static Keys"
msgstr ""

#: ../../../staging/static-keys.rst:7
msgid "DEPRECATED API:"
msgstr ""

#: ../../../staging/static-keys.rst:9
msgid ""
"The use of 'struct static_key' directly, is now DEPRECATED. In addition "
"static_key_{true,false}() is also DEPRECATED. IE DO NOT use the following::"
msgstr ""

#: ../../../staging/static-keys.rst:17
msgid "The updated API replacements are::"
msgstr ""

#: ../../../staging/static-keys.rst:27
msgid "Abstract"
msgstr ""

#: ../../../staging/static-keys.rst:29
msgid ""
"Static keys allows the inclusion of seldom used features in performance-"
"sensitive fast-path kernel code, via a GCC feature and a code patching "
"technique. A quick example::"
msgstr ""

#: ../../../staging/static-keys.rst:48
msgid ""
"The static_branch_unlikely() branch will be generated into the code with as "
"little impact to the likely code path as possible."
msgstr ""

#: ../../../staging/static-keys.rst:53
msgid "Motivation"
msgstr ""

#: ../../../staging/static-keys.rst:56
msgid ""
"Currently, tracepoints are implemented using a conditional branch. The "
"conditional check requires checking a global variable for each tracepoint. "
"Although the overhead of this check is small, it increases when the memory "
"cache comes under pressure (memory cache lines for these global variables "
"may be shared with other memory accesses). As we increase the number of "
"tracepoints in the kernel this overhead may become more of an issue. In "
"addition, tracepoints are often dormant (disabled) and provide no direct "
"kernel functionality. Thus, it is highly desirable to reduce their impact as "
"much as possible. Although tracepoints are the original motivation for this "
"work, other kernel code paths should be able to make use of the static keys "
"facility."
msgstr ""

#: ../../../staging/static-keys.rst:69
msgid "Solution"
msgstr ""

#: ../../../staging/static-keys.rst:72
msgid ""
"gcc (v4.5) adds a new 'asm goto' statement that allows branching to a label:"
msgstr ""

#: ../../../staging/static-keys.rst:74
msgid "https://gcc.gnu.org/ml/gcc-patches/2009-07/msg01556.html"
msgstr ""

#: ../../../staging/static-keys.rst:76
msgid ""
"Using the 'asm goto', we can create branches that are either taken or not "
"taken by default, without the need to check memory. Then, at run-time, we "
"can patch the branch site to change the branch direction."
msgstr ""

#: ../../../staging/static-keys.rst:80
msgid "For example, if we have a simple branch that is disabled by default::"
msgstr ""

#: ../../../staging/static-keys.rst:85
msgid ""
"Thus, by default the 'printk' will not be emitted. And the code generated "
"will consist of a single atomic 'no-op' instruction (5 bytes on x86), in the "
"straight-line code path. When the branch is 'flipped', we will patch the 'no-"
"op' in the straight-line codepath with a 'jump' instruction to the out-of-"
"line true branch. Thus, changing branch direction is expensive but branch "
"selection is basically 'free'. That is the basic tradeoff of this "
"optimization."
msgstr ""

#: ../../../staging/static-keys.rst:93
msgid ""
"This lowlevel patching mechanism is called 'jump label patching', and it "
"gives the basis for the static keys facility."
msgstr ""

#: ../../../staging/static-keys.rst:97
msgid "Static key label API, usage and examples"
msgstr ""

#: ../../../staging/static-keys.rst:100
msgid "In order to make use of this optimization you must first define a key::"
msgstr ""

#: ../../../staging/static-keys.rst:104 ../../../staging/static-keys.rst:176
msgid "or::"
msgstr ""

#: ../../../staging/static-keys.rst:109
msgid ""
"The key must be global, that is, it can't be allocated on the stack or "
"dynamically allocated at run-time."
msgstr ""

#: ../../../staging/static-keys.rst:112
msgid "The key is then used in code as::"
msgstr ""

#: ../../../staging/static-keys.rst:119
msgid "Or::"
msgstr ""

#: ../../../staging/static-keys.rst:126
msgid ""
"Keys defined via DEFINE_STATIC_KEY_TRUE(), or DEFINE_STATIC_KEY_FALSE, may "
"be used in either static_branch_likely() or static_branch_unlikely() "
"statements."
msgstr ""

#: ../../../staging/static-keys.rst:130
msgid "Branch(es) can be set true via::"
msgstr ""

#: ../../../staging/static-keys.rst:134
msgid "or false via::"
msgstr ""

#: ../../../staging/static-keys.rst:138
msgid "The branch(es) can then be switched via reference counts::"
msgstr ""

#: ../../../staging/static-keys.rst:144
msgid ""
"Thus, 'static_branch_inc()' means 'make the branch true', and "
"'static_branch_dec()' means 'make the branch false' with appropriate "
"reference counting. For example, if the key is initialized true, a "
"static_branch_dec(), will switch the branch to false. And a subsequent "
"static_branch_inc(), will change the branch back to true. Likewise, if the "
"key is initialized false, a 'static_branch_inc()', will change the branch to "
"true. And then a 'static_branch_dec()', will again make the branch false."
msgstr ""

#: ../../../staging/static-keys.rst:152
msgid ""
"The state and the reference count can be retrieved with "
"'static_key_enabled()' and 'static_key_count()'.  In general, if you use "
"these functions, they should be protected with the same mutex used around "
"the enable/disable or increment/decrement function."
msgstr ""

#: ../../../staging/static-keys.rst:157
msgid ""
"Note that switching branches results in some locks being taken, particularly "
"the CPU hotplug lock (in order to avoid races against CPUs being brought in "
"the kernel while the kernel is getting patched). Calling the static key API "
"from within a hotplug notifier is thus a sure deadlock recipe. In order to "
"still allow use of the functionality, the following functions are provided:"
msgstr ""

#: ../../../staging/static-keys.rst:164
msgid ""
"static_key_enable_cpuslocked() static_key_disable_cpuslocked() "
"static_branch_enable_cpuslocked() static_branch_disable_cpuslocked()"
msgstr ""

#: ../../../staging/static-keys.rst:169
msgid ""
"These functions are *not* general purpose, and must only be used when you "
"really know that you're in the above context, and no other."
msgstr ""

#: ../../../staging/static-keys.rst:172
msgid "Where an array of keys is required, it can be defined as::"
msgstr ""

#: ../../../staging/static-keys.rst:180
msgid "Architecture level code patching interface, 'jump labels'"
msgstr ""

#: ../../../staging/static-keys.rst:183
msgid ""
"There are a few functions and macros that architectures must implement in "
"order to take advantage of this optimization. If there is no architecture "
"support, we simply fall back to a traditional, load, test, and jump "
"sequence. Also, the struct jump_entry table must be at least 4-byte aligned "
"because the static_key->entry field makes use of the two least significant "
"bits."
msgstr ""

#: ../../../staging/static-keys.rst:189
msgid "``select HAVE_ARCH_JUMP_LABEL``,"
msgstr ""

#: ../../../staging/static-keys.rst:190
msgid "see: arch/x86/Kconfig"
msgstr ""

#: ../../../staging/static-keys.rst:192
msgid "``#define JUMP_LABEL_NOP_SIZE``,"
msgstr ""

#: ../../../staging/static-keys.rst:193 ../../../staging/static-keys.rst:196
#: ../../../staging/static-keys.rst:199 ../../../staging/static-keys.rst:205
msgid "see: arch/x86/include/asm/jump_label.h"
msgstr ""

#: ../../../staging/static-keys.rst:195
msgid ""
"``__always_inline bool arch_static_branch(struct static_key *key, bool "
"branch)``,"
msgstr ""

#: ../../../staging/static-keys.rst:198
msgid ""
"``__always_inline bool arch_static_branch_jump(struct static_key *key, bool "
"branch)``,"
msgstr ""

#: ../../../staging/static-keys.rst:201
msgid ""
"``void arch_jump_label_transform(struct jump_entry *entry, enum "
"jump_label_type type)``,"
msgstr ""

#: ../../../staging/static-keys.rst:202
msgid "see: arch/x86/kernel/jump_label.c"
msgstr ""

#: ../../../staging/static-keys.rst:204
msgid "``struct jump_entry``,"
msgstr ""

#: ../../../staging/static-keys.rst:208
msgid "Static keys / jump label analysis, results (x86_64):"
msgstr ""

#: ../../../staging/static-keys.rst:211
msgid ""
"As an example, let's add the following branch to 'getppid()', such that the "
"system call now looks like::"
msgstr ""

#: ../../../staging/static-keys.rst:228
msgid "The resulting instructions with jump labels generated by GCC is::"
msgstr ""

#: ../../../staging/static-keys.rst:248
msgid "Without the jump label optimization it looks like::"
msgstr ""

#: ../../../staging/static-keys.rst:272
msgid ""
"Thus, the disable jump label case adds a 'mov', 'test' and 'jne' instruction "
"vs. the jump label case just has a 'no-op' or 'jmp 0'. (The jmp 0, is "
"patched to a 5 byte atomic no-op instruction at boot-time.) Thus, the "
"disabled jump label case adds::"
msgstr ""

#: ../../../staging/static-keys.rst:279
msgid ""
"If we then include the padding bytes, the jump label code saves, 16 total "
"bytes of instruction memory for this small function. In this case the non-"
"jump label function is 80 bytes long. Thus, we have saved 20% of the "
"instruction footprint. We can in fact improve this even further, since the 5-"
"byte no-op really can be a 2-byte no-op since we can reach the branch with a "
"2-byte jmp. However, we have not yet implemented optimal no-op sizes (they "
"are currently hard-coded)."
msgstr ""

#: ../../../staging/static-keys.rst:287
msgid ""
"Since there are a number of static key API uses in the scheduler paths, "
"'pipe-test' (also known as 'perf bench sched pipe') can be used to show the "
"performance improvement. Testing done on 3.3.0-rc2:"
msgstr ""

#: ../../../staging/static-keys.rst:291
msgid "jump label disabled::"
msgstr ""

#: ../../../staging/static-keys.rst:308
msgid "jump label enabled::"
msgstr ""

#: ../../../staging/static-keys.rst:325
msgid ""
"The percentage of saved branches is .7%, and we've saved 12% on 'branch-"
"misses'. This is where we would expect to get the most savings, since this "
"optimization is about reducing the number of branches. In addition, we've "
"saved .2% on instructions, and 2.8% on cycles and 1.4% on elapsed time."
msgstr ""
