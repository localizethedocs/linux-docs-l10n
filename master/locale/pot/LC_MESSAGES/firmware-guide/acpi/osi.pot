# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../firmware-guide/acpi/osi.rst:5
msgid "ACPI _OSI and _REV methods"
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:7
msgid ""
"An ACPI BIOS can use the \"Operating System Interfaces\" method (_OSI) to "
"find out what the operating system supports. Eg. If BIOS AML code includes "
"_OSI(\"XYZ\"), the kernel's AML interpreter can evaluate that method, look "
"to see if it supports 'XYZ' and answer YES or NO to the BIOS."
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:13
msgid ""
"The ACPI _REV method returns the \"Revision of the ACPI specification that "
"OSPM supports\""
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:16
msgid ""
"This document explains how and why the BIOS and Linux should use these "
"methods. It also explains how and why they are widely misused."
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:20
msgid "How to use _OSI"
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:22
msgid ""
"Linux runs on two groups of machines -- those that are tested by the OEM to "
"be compatible with Linux, and those that were never tested with Linux, but "
"where Linux was installed to replace the original OS (Windows or OSX)."
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:26
msgid ""
"The larger group is the systems tested to run only Windows.  Not only that, "
"but many were tested to run with just one specific version of Windows. So "
"even though the BIOS may use _OSI to query what version of Windows is "
"running, only a single path through the BIOS has actually been tested. "
"Experience shows that taking untested paths through the BIOS exposes Linux "
"to an entire category of BIOS bugs. For this reason, Linux _OSI defaults "
"must continue to claim compatibility with all versions of Windows."
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:35
msgid ""
"But Linux isn't actually compatible with Windows, and the Linux community "
"has also been hurt with regressions when Linux adds the latest version of "
"Windows to its list of _OSI strings.  So it is possible that additional "
"strings will be more thoroughly vetted before shipping upstream in the "
"future. But it is likely that they will all eventually be added."
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:41
msgid ""
"What should an OEM do if they want to support Linux and Windows using the "
"same BIOS image?  Often they need to do something different for Linux to "
"deal with how Linux is different from Windows."
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:45
msgid ""
"In this case, the OEM should create custom ASL to be executed by the Linux "
"kernel and changes to Linux kernel drivers to execute this custom ASL.  The "
"easiest way to accomplish this is to introduce a device specific method "
"(_DSM) that is called from the Linux kernel."
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:50
msgid ""
"In the past the kernel used to support something like: _OSI(\"Linux-OEM-"
"my_interface_name\") where 'OEM' is needed if this is an OEM-specific hook, "
"and 'my_interface_name' describes the hook, which could be a quirk, a bug, "
"or a bug-fix."
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:56
msgid ""
"However this was discovered to be abused by other BIOS vendors to change "
"completely unrelated code on completely unrelated systems.  This prompted an "
"evaluation of all of its uses. This uncovered that they aren't needed for "
"any of the original reasons. As such, the kernel will not respond to any "
"custom Linux-* strings by default."
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:62
msgid "That was easy.  Read on, to find out how to do it wrong."
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:65
msgid "Before _OSI, there was _OS"
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:67
msgid ""
"ACPI 1.0 specified \"_OS\" as an \"object that evaluates to a string that "
"identifies the operating system.\""
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:70
msgid ""
"The ACPI BIOS flow would include an evaluation of _OS, and the AML "
"interpreter in the kernel would return to it a string identifying the OS:"
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:73
msgid ""
"Windows 98, SE: \"Microsoft Windows\" Windows ME: \"Microsoft WindowsME:"
"Millennium Edition\" Windows NT: \"Microsoft Windows NT\""
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:77
msgid ""
"The idea was on a platform tasked with running multiple OS's, the BIOS could "
"use _OS to enable devices that an OS might support, or enable quirks or bug "
"workarounds necessary to make the platform compatible with that pre-existing "
"OS."
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:82
msgid ""
"But _OS had fundamental problems.  First, the BIOS needed to know the name "
"of every possible version of the OS that would run on it, and needed to know "
"all the quirks of those OS's.  Certainly it would make more sense for the "
"BIOS to ask *specific* things of the OS, such \"do you support a specific "
"interface\", and thus in ACPI 3.0, _OSI was born to replace _OS."
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:89
msgid ""
"_OS was abandoned, though even today, many BIOS look for _OS \"Microsoft "
"Windows NT\", though it seems somewhat far-fetched that anybody would "
"install those old operating systems over what came with the machine."
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:94
msgid ""
"Linux answers \"Microsoft Windows NT\" to please that BIOS idiom. That is "
"the *only* viable strategy, as that is what modern Windows does, and so "
"doing otherwise could steer the BIOS down an untested path."
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:99
msgid "_OSI is born, and immediately misused"
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:101
msgid ""
"With _OSI, the *BIOS* provides the string describing an interface, and asks "
"the OS: \"YES/NO, are you compatible with this interface?\""
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:104
msgid ""
"eg. _OSI(\"3.0 Thermal Model\") would return TRUE if the OS knows how to "
"deal with the thermal extensions made to the ACPI 3.0 specification. An old "
"OS that doesn't know about those extensions would answer FALSE, and a new OS "
"may be able to return TRUE."
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:109
msgid ""
"For an OS-specific interface, the ACPI spec said that the BIOS and the OS "
"were to agree on a string of the form such as \"Windows-interface_name\"."
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:112
msgid ""
"But two bad things happened.  First, the Windows ecosystem used _OSI not as "
"designed, but as a direct replacement for _OS -- identifying the OS version, "
"rather than an OS supported interface.  Indeed, right from the start, the "
"ACPI 3.0 spec itself codified this misuse in example code using "
"_OSI(\"Windows 2001\")."
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:118
msgid "This misuse was adopted and continues today."
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:120
msgid ""
"Linux had no choice but to also return TRUE to _OSI(\"Windows 2001\") and "
"its successors.  To do otherwise would virtually guarantee breaking a BIOS "
"that has been tested only with that _OSI returning TRUE."
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:124
msgid ""
"This strategy is problematic, as Linux is never completely compatible with "
"the latest version of Windows, and sometimes it takes more than a year to "
"iron out incompatibilities."
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:128
msgid ""
"Not to be out-done, the Linux community made things worse by returning TRUE "
"to _OSI(\"Linux\").  Doing so is even worse than the Windows misuse of _OSI, "
"as \"Linux\" does not even contain any version information. _OSI(\"Linux\") "
"led to some BIOS' malfunctioning due to BIOS writer's using it in untested "
"BIOS flows.  But some OEM's used _OSI(\"Linux\") in tested flows to support "
"real Linux features.  In 2009, Linux removed _OSI(\"Linux\"), and added a "
"cmdline parameter to restore it for legacy systems still needed it.  Further "
"a BIOS_BUG warning prints for all BIOS's that invoke it."
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:138
msgid "No BIOS should use _OSI(\"Linux\")."
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:140
msgid ""
"The result is a strategy for Linux to maximize compatibility with ACPI BIOS "
"that are tested on Windows machines.  There is a real risk of over-stating "
"that compatibility; but the alternative has often been catastrophic failure "
"resulting from the BIOS taking paths that were never validated under *any* "
"OS."
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:147
msgid "Do not use _REV"
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:149
msgid ""
"Since _OSI(\"Linux\") went away, some BIOS writers used _REV to support "
"Linux and Windows differences in the same BIOS."
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:152
msgid ""
"_REV was defined in ACPI 1.0 to return the version of ACPI supported by the "
"OS and the OS AML interpreter."
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:155
msgid ""
"Modern Windows returns _REV = 2.  Linux used ACPI_CA_SUPPORT_LEVEL, which "
"would increment, based on the version of the spec supported."
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:158
msgid ""
"Unfortunately, _REV was also misused.  eg. some BIOS would check for _REV = "
"3, and do something for Linux, but when Linux returned _REV = 4, that "
"support broke."
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:162
msgid ""
"In response to this problem, Linux returns _REV = 2 always, from mid-2015 "
"onward.  The ACPI specification will also be updated to reflect that _REV is "
"deprecated, and always returns 2."
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:167
msgid "Apple Mac and _OSI(\"Darwin\")"
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:169
msgid ""
"On Apple's Mac platforms, the ACPI BIOS invokes _OSI(\"Darwin\") to "
"determine if the machine is running Apple OSX."
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:172
msgid ""
"Like Linux's _OSI(\"*Windows*\") strategy, Linux defaults to answering YES "
"to _OSI(\"Darwin\") to enable full access to the hardware and validated BIOS "
"paths seen by OSX. Just like on Windows-tested platforms, this strategy has "
"risks."
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:177
msgid ""
"Starting in Linux-3.18, the kernel answered YES to _OSI(\"Darwin\") for the "
"purpose of enabling Mac Thunderbolt support.  Further, if the kernel noticed "
"_OSI(\"Darwin\") being invoked, it additionally disabled all "
"_OSI(\"*Windows*\") to keep poorly written Mac BIOS from going down untested "
"combinations of paths."
msgstr ""

#: ../../../firmware-guide/acpi/osi.rst:183
msgid ""
"The Linux-3.18 change in default caused power regressions on Mac laptops, "
"and the 3.18 implementation did not allow changing the default via cmdline "
"\"acpi_osi=!Darwin\".  Linux-4.7 fixed the ability to use acpi_osi=!Darwin "
"as a workaround, and we hope to see Mac Thunderbolt power management support "
"in Linux-4.11."
msgstr ""
