# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../arch/arm/memory.rst:3
msgid "Kernel Memory Layout on ARM Linux"
msgstr ""

#: ../../../arch/arm/memory.rst:5
msgid "Russell King <rmk@arm.linux.org.uk>"
msgstr ""

#: ../../../arch/arm/memory.rst:7
msgid "November 17, 2005 (2.6.15)"
msgstr ""

#: ../../../arch/arm/memory.rst:9
msgid ""
"This document describes the virtual memory layout which the Linux kernel "
"uses for ARM processors.  It indicates which regions are free for platforms "
"to use, and which are used by generic code."
msgstr ""

#: ../../../arch/arm/memory.rst:13
msgid ""
"The ARM CPU is capable of addressing a maximum of 4GB virtual memory space, "
"and this must be shared between user space processes, the kernel, and "
"hardware devices."
msgstr ""

#: ../../../arch/arm/memory.rst:17
msgid ""
"As the ARM architecture matures, it becomes necessary to reserve certain "
"regions of VM space for use for new facilities; therefore this document may "
"reserve more VM space over time."
msgstr ""

#: ../../../arch/arm/memory.rst:22
msgid "Start"
msgstr ""

#: ../../../arch/arm/memory.rst:22
msgid "End"
msgstr ""

#: ../../../arch/arm/memory.rst:22
msgid "Use"
msgstr ""

#: ../../../arch/arm/memory.rst:24
msgid "ffff8000"
msgstr ""

#: ../../../arch/arm/memory.rst:24 ../../../arch/arm/memory.rst:28
msgid "ffffffff"
msgstr ""

#: ../../../arch/arm/memory.rst:24
msgid ""
"copy_user_page / clear_user_page use. For SA11xx and Xscale, this is used to "
"setup a minicache mapping."
msgstr ""

#: ../../../arch/arm/memory.rst:28
msgid "ffff4000"
msgstr ""

#: ../../../arch/arm/memory.rst:28
msgid "cache aliasing on ARMv6 and later CPUs."
msgstr ""

#: ../../../arch/arm/memory.rst:30
msgid "ffff1000"
msgstr ""

#: ../../../arch/arm/memory.rst:30
msgid "ffff7fff"
msgstr ""

#: ../../../arch/arm/memory.rst:30
msgid "Reserved. Platforms must not use this address range."
msgstr ""

#: ../../../arch/arm/memory.rst:33
msgid "ffff0000"
msgstr ""

#: ../../../arch/arm/memory.rst:33
msgid "ffff0fff"
msgstr ""

#: ../../../arch/arm/memory.rst:33
msgid ""
"CPU vector page. The CPU vectors are mapped here if the CPU supports vector "
"relocation (control register V bit.)"
msgstr ""

#: ../../../arch/arm/memory.rst:38 ../../../arch/arm/memory.rst:45
msgid "fffe0000"
msgstr ""

#: ../../../arch/arm/memory.rst:38 ../../../arch/arm/memory.rst:42
msgid "fffeffff"
msgstr ""

#: ../../../arch/arm/memory.rst:38
msgid ""
"XScale cache flush area.  This is used in proc-xscale.S to flush the whole "
"data cache. (XScale does not have TCM.)"
msgstr ""

#: ../../../arch/arm/memory.rst:42
msgid "fffe8000"
msgstr ""

#: ../../../arch/arm/memory.rst:42
msgid "DTCM mapping area for platforms with DTCM mounted inside the CPU."
msgstr ""

#: ../../../arch/arm/memory.rst:45
msgid "fffe7fff"
msgstr ""

#: ../../../arch/arm/memory.rst:45
msgid "ITCM mapping area for platforms with ITCM mounted inside the CPU."
msgstr ""

#: ../../../arch/arm/memory.rst:48
msgid "ffc80000"
msgstr ""

#: ../../../arch/arm/memory.rst:48
msgid "ffefffff"
msgstr ""

#: ../../../arch/arm/memory.rst:48
msgid ""
"Fixmap mapping region.  Addresses provided by fix_to_virt() will be located "
"here."
msgstr ""

#: ../../../arch/arm/memory.rst:51
msgid "ffc00000"
msgstr ""

#: ../../../arch/arm/memory.rst:51
msgid "ffc7ffff"
msgstr ""

#: ../../../arch/arm/memory.rst:51
msgid "Guard region"
msgstr ""

#: ../../../arch/arm/memory.rst:53
msgid "ff800000"
msgstr ""

#: ../../../arch/arm/memory.rst:53
msgid "ffbfffff"
msgstr ""

#: ../../../arch/arm/memory.rst:53
msgid "Permanent, fixed read-only mapping of the firmware provided DT blob"
msgstr ""

#: ../../../arch/arm/memory.rst:56
msgid "fee00000"
msgstr ""

#: ../../../arch/arm/memory.rst:56
msgid "feffffff"
msgstr ""

#: ../../../arch/arm/memory.rst:56
msgid ""
"Mapping of PCI I/O space. This is a static mapping within the vmalloc space."
msgstr ""

#: ../../../arch/arm/memory.rst:59
msgid "VMALLOC_START"
msgstr ""

#: ../../../arch/arm/memory.rst:59
msgid "VMALLOC_END-1"
msgstr ""

#: ../../../arch/arm/memory.rst:59
msgid ""
"vmalloc() / ioremap() space. Memory returned by vmalloc/ioremap will be "
"dynamically placed in this region. Machine specific static mappings are also "
"located here through iotable_init(). VMALLOC_START is based upon the value "
"of the high_memory variable, and VMALLOC_END is equal to 0xff800000."
msgstr ""

#: ../../../arch/arm/memory.rst:68
msgid "PAGE_OFFSET"
msgstr ""

#: ../../../arch/arm/memory.rst:68
msgid "high_memory-1"
msgstr ""

#: ../../../arch/arm/memory.rst:68
msgid ""
"Kernel direct-mapped RAM region. This maps the platforms RAM, and typically "
"maps all platform RAM in a 1:1 relationship."
msgstr ""

#: ../../../arch/arm/memory.rst:72
msgid "PKMAP_BASE"
msgstr ""

#: ../../../arch/arm/memory.rst:72
msgid "PAGE_OFFSET-1"
msgstr ""

#: ../../../arch/arm/memory.rst:72
msgid ""
"Permanent kernel mappings One way of mapping HIGHMEM pages into kernel space."
msgstr ""

#: ../../../arch/arm/memory.rst:76
msgid "MODULES_VADDR"
msgstr ""

#: ../../../arch/arm/memory.rst:76
msgid "MODULES_END-1"
msgstr ""

#: ../../../arch/arm/memory.rst:76
msgid ""
"Kernel module space Kernel modules inserted via insmod are placed here using "
"dynamic mappings."
msgstr ""

#: ../../../arch/arm/memory.rst:80
msgid "TASK_SIZE"
msgstr ""

#: ../../../arch/arm/memory.rst:80
msgid "MODULES_VADDR-1"
msgstr ""

#: ../../../arch/arm/memory.rst:80
msgid ""
"KASAn shadow memory when KASan is in use. The range from MODULES_VADDR to "
"the top of the memory is shadowed here with 1 bit per byte of memory."
msgstr ""

#: ../../../arch/arm/memory.rst:85
msgid "00001000"
msgstr ""

#: ../../../arch/arm/memory.rst:85
msgid "TASK_SIZE-1"
msgstr ""

#: ../../../arch/arm/memory.rst:85
msgid ""
"User space mappings Per-thread mappings are placed here via the mmap() "
"system call."
msgstr ""

#: ../../../arch/arm/memory.rst:89
msgid "00000000"
msgstr ""

#: ../../../arch/arm/memory.rst:89
msgid "00000fff"
msgstr ""

#: ../../../arch/arm/memory.rst:89
msgid ""
"CPU vector page / null pointer trap CPUs which do not support vector "
"remapping place their vector page here.  NULL pointer dereferences by both "
"the kernel and user space are also caught via this mapping."
msgstr ""

#: ../../../arch/arm/memory.rst:96
msgid ""
"Please note that mappings which collide with the above areas may result in a "
"non-bootable kernel, or may cause the kernel to (eventually) panic at run "
"time."
msgstr ""

#: ../../../arch/arm/memory.rst:100
msgid ""
"Since future CPUs may impact the kernel mapping layout, user programs must "
"not access any memory which is not mapped inside their 0x0001000 to "
"TASK_SIZE address range.  If they wish to access these areas, they must set "
"up their own mappings using open() and mmap()."
msgstr ""
