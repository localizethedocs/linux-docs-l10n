# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../arch/x86/intel_txt.rst:3
msgid "Intel(R) TXT Overview"
msgstr ""

#: ../../../arch/x86/intel_txt.rst:5
msgid ""
"Intel's technology for safer computing, Intel(R) Trusted Execution "
"Technology (Intel(R) TXT), defines platform-level enhancements that provide "
"the building blocks for creating trusted platforms."
msgstr ""

#: ../../../arch/x86/intel_txt.rst:9
msgid "Intel TXT was formerly known by the code name LaGrande Technology (LT)."
msgstr ""

#: ../../../arch/x86/intel_txt.rst:11
msgid "Intel TXT in Brief:"
msgstr ""

#: ../../../arch/x86/intel_txt.rst:13
msgid "Provides dynamic root of trust for measurement (DRTM)"
msgstr ""

#: ../../../arch/x86/intel_txt.rst:14
msgid "Data protection in case of improper shutdown"
msgstr ""

#: ../../../arch/x86/intel_txt.rst:15
msgid "Measurement and verification of launched environment"
msgstr ""

#: ../../../arch/x86/intel_txt.rst:17
msgid ""
"Intel TXT is part of the vPro(TM) brand and is also available some non-vPro "
"systems.  It is currently available on desktop systems based on the Q35, "
"X38, Q45, and Q43 Express chipsets (e.g. Dell Optiplex 755, HP dc7800, etc.) "
"and mobile systems based on the GM45, PM45, and GS45 Express chipsets."
msgstr ""

#: ../../../arch/x86/intel_txt.rst:23
msgid ""
"For more information, see http://www.intel.com/technology/security/. This "
"site also has a link to the Intel TXT MLE Developers Manual, which has been "
"updated for the new released platforms."
msgstr ""

#: ../../../arch/x86/intel_txt.rst:27
msgid ""
"Intel TXT has been presented at various events over the past few years, some "
"of which are:"
msgstr ""

#: ../../../arch/x86/intel_txt.rst:30
msgid "LinuxTAG 2008:"
msgstr ""

#: ../../../arch/x86/intel_txt.rst:31
msgid "http://www.linuxtag.org/2008/en/conf/events/vp-donnerstag.html"
msgstr ""

#: ../../../arch/x86/intel_txt.rst:33
msgid "TRUST2008:"
msgstr ""

#: ../../../arch/x86/intel_txt.rst:34
msgid ""
"http://www.trust-conference.eu/downloads/Keynote-Speakers/ 3_David-"
"Grawrock_The-Front-Door-of-Trusted-Computing.pdf"
msgstr ""

#: ../../../arch/x86/intel_txt.rst:37
msgid "IDF, Shanghai:"
msgstr ""

#: ../../../arch/x86/intel_txt.rst:38
msgid "http://www.prcidf.com.cn/index_en.html"
msgstr ""

#: ../../../arch/x86/intel_txt.rst:40
msgid "IDFs 2006, 2007"
msgstr ""

#: ../../../arch/x86/intel_txt.rst:41
msgid "(I'm not sure if/where they are online)"
msgstr ""

#: ../../../arch/x86/intel_txt.rst:44
msgid "Trusted Boot Project Overview"
msgstr ""

#: ../../../arch/x86/intel_txt.rst:46
msgid ""
"Trusted Boot (tboot) is an open source, pre-kernel/VMM module that uses "
"Intel TXT to perform a measured and verified launch of an OS kernel/VMM."
msgstr ""

#: ../../../arch/x86/intel_txt.rst:50
msgid ""
"It is hosted on SourceForge at http://sourceforge.net/projects/tboot. The "
"mercurial source repo is available at http://www.bughost.org/ repos.hg/tboot."
"hg."
msgstr ""

#: ../../../arch/x86/intel_txt.rst:54
msgid ""
"Tboot currently supports launching Xen (open source VMM/hypervisor w/ TXT "
"support since v3.2), and now Linux kernels."
msgstr ""

#: ../../../arch/x86/intel_txt.rst:59
msgid "Value Proposition for Linux or \"Why should you care?\""
msgstr ""

#: ../../../arch/x86/intel_txt.rst:61
msgid ""
"While there are many products and technologies that attempt to measure or "
"protect the integrity of a running kernel, they all assume the kernel is "
"\"good\" to begin with.  The Integrity Measurement Architecture (IMA) and "
"Linux Integrity Module interface are examples of such solutions."
msgstr ""

#: ../../../arch/x86/intel_txt.rst:67
msgid ""
"To get trust in the initial kernel without using Intel TXT, a static root of "
"trust must be used.  This bases trust in BIOS starting at system reset and "
"requires measurement of all code executed between system reset through the "
"completion of the kernel boot as well as data objects used by that code.  In "
"the case of a Linux kernel, this means all of BIOS, any option ROMs, the "
"bootloader and the boot config.  In practice, this is a lot of code/data, "
"much of which is subject to change from boot to boot (e.g. changing NICs may "
"change option ROMs).  Without reference hashes, these measurement changes "
"are difficult to assess or confirm as benign.  This process also does not "
"provide DMA protection, memory configuration/alias checks and locks, crash "
"protection, or policy support."
msgstr ""

#: ../../../arch/x86/intel_txt.rst:81
msgid ""
"By using the hardware-based root of trust that Intel TXT provides, many of "
"these issues can be mitigated.  Specifically: many pre-launch components can "
"be removed from the trust chain, DMA protection is provided to all launched "
"components, a large number of platform configuration checks are performed "
"and values locked, protection is provided for any data in the event of an "
"improper shutdown, and there is support for policy-based execution/"
"verification. This provides a more stable measurement and a higher assurance "
"of system configuration and initial state than would be otherwise possible.  "
"Since the tboot project is open source, source code for almost all parts of "
"the trust chain is available (excepting SMM and Intel-provided firmware)."
msgstr ""

#: ../../../arch/x86/intel_txt.rst:95
msgid "How Does it Work?"
msgstr ""

#: ../../../arch/x86/intel_txt.rst:97
msgid ""
"Tboot is an executable that is launched by the bootloader as the "
"\"kernel\" (the binary the bootloader executes)."
msgstr ""

#: ../../../arch/x86/intel_txt.rst:99
msgid ""
"It performs all of the work necessary to determine if the platform supports "
"Intel TXT and, if so, executes the GETSEC[SENTER] processor instruction that "
"initiates the dynamic root of trust."
msgstr ""

#: ../../../arch/x86/intel_txt.rst:103
msgid ""
"If tboot determines that the system does not support Intel TXT or is not "
"configured correctly (e.g. the SINIT AC Module was incorrect), it will "
"directly launch the kernel with no changes to any state."
msgstr ""

#: ../../../arch/x86/intel_txt.rst:107
msgid ""
"Tboot will output various information about its progress to the terminal, "
"serial port, and/or an in-memory log; the output locations can be configured "
"with a command line switch."
msgstr ""

#: ../../../arch/x86/intel_txt.rst:111
msgid ""
"The GETSEC[SENTER] instruction will return control to tboot and tboot then "
"verifies certain aspects of the environment (e.g. TPM NV lock, e820 table "
"does not have invalid entries, etc.)."
msgstr ""

#: ../../../arch/x86/intel_txt.rst:114
msgid ""
"It will wake the APs from the special sleep state the GETSEC[SENTER] "
"instruction had put them in and place them into a wait-for-SIPI state."
msgstr ""

#: ../../../arch/x86/intel_txt.rst:118
msgid ""
"Because the processors will not respond to an INIT or SIPI when in the TXT "
"environment, it is necessary to create a small VT-x guest for the APs.  When "
"they run in this guest, they will simply wait for the INIT-SIPI-SIPI "
"sequence, which will cause VMEXITs, and then disable VT and jump to the SIPI "
"vector.  This approach seemed like a better choice than having to insert "
"special code into the kernel's MP wakeup sequence."
msgstr ""

#: ../../../arch/x86/intel_txt.rst:126
msgid ""
"Tboot then applies an (optional) user-defined launch policy to verify the "
"kernel and initrd."
msgstr ""

#: ../../../arch/x86/intel_txt.rst:129
msgid ""
"This policy is rooted in TPM NV and is described in the tboot project.  The "
"tboot project also contains code for tools to create and provision the "
"policy."
msgstr ""

#: ../../../arch/x86/intel_txt.rst:132
msgid ""
"Policies are completely under user control and if not present then any "
"kernel will be launched."
msgstr ""

#: ../../../arch/x86/intel_txt.rst:134
msgid ""
"Policy action is flexible and can include halting on failures or simply "
"logging them and continuing."
msgstr ""

#: ../../../arch/x86/intel_txt.rst:137
msgid ""
"Tboot adjusts the e820 table provided by the bootloader to reserve its own "
"location in memory as well as to reserve certain other TXT-related regions."
msgstr ""

#: ../../../arch/x86/intel_txt.rst:140
msgid ""
"As part of its launch, tboot DMA protects all of RAM (using the VT-d PMRs).  "
"Thus, the kernel must be booted with 'intel_iommu=on' in order to remove "
"this blanket protection and use VT-d's page-level protection."
msgstr ""

#: ../../../arch/x86/intel_txt.rst:144
msgid ""
"Tboot will populate a shared page with some data about itself and pass this "
"to the Linux kernel as it transfers control."
msgstr ""

#: ../../../arch/x86/intel_txt.rst:147
msgid ""
"The location of the shared page is passed via the boot_params struct as a "
"physical address."
msgstr ""

#: ../../../arch/x86/intel_txt.rst:150
msgid ""
"The kernel will look for the tboot shared page address and, if it exists, "
"map it."
msgstr ""

#: ../../../arch/x86/intel_txt.rst:152
msgid ""
"As one of the checks/protections provided by TXT, it makes a copy of the VT-"
"d DMARs in a DMA-protected region of memory and verifies them for "
"correctness.  The VT-d code will detect if the kernel was launched with "
"tboot and use this copy instead of the one in the ACPI table."
msgstr ""

#: ../../../arch/x86/intel_txt.rst:157
msgid ""
"At this point, tboot and TXT are out of the picture until a shutdown (S<n>)"
msgstr ""

#: ../../../arch/x86/intel_txt.rst:159
msgid ""
"In order to put a system into any of the sleep states after a TXT launch, "
"TXT must first be exited.  This is to prevent attacks that attempt to crash "
"the system to gain control on reboot and steal data left in memory."
msgstr ""

#: ../../../arch/x86/intel_txt.rst:164
msgid ""
"The kernel will perform all of its sleep preparation and populate the shared "
"page with the ACPI data needed to put the platform in the desired sleep "
"state."
msgstr ""

#: ../../../arch/x86/intel_txt.rst:167
msgid ""
"Then the kernel jumps into tboot via the vector specified in the shared page."
msgstr ""

#: ../../../arch/x86/intel_txt.rst:169
msgid ""
"Tboot will clean up the environment and disable TXT, then use the kernel-"
"provided ACPI information to actually place the platform into the desired "
"sleep state."
msgstr ""

#: ../../../arch/x86/intel_txt.rst:172
msgid ""
"In the case of S3, tboot will also register itself as the resume vector.  "
"This is necessary because it must re-establish the measured environment upon "
"resume.  Once the TXT environment has been restored, it will restore the TPM "
"PCRs and then transfer control back to the kernel's S3 resume vector. In "
"order to preserve system integrity across S3, the kernel provides tboot with "
"a set of memory ranges (RAM and RESERVED_KERN in the e820 table, but not any "
"memory that BIOS might alter over the S3 transition) that tboot will "
"calculate a MAC (message authentication code) over and then seal with the "
"TPM. On resume and once the measured environment has been re-established, "
"tboot will re-calculate the MAC and verify it against the sealed value. "
"Tboot's policy determines what happens if the verification fails. Note that "
"the c/s 194 of tboot which has the new MAC code supports this."
msgstr ""

#: ../../../arch/x86/intel_txt.rst:188
msgid "That's pretty much it for TXT support."
msgstr ""

#: ../../../arch/x86/intel_txt.rst:192
msgid "Configuring the System"
msgstr ""

#: ../../../arch/x86/intel_txt.rst:194
msgid "This code works with 32bit, 32bit PAE, and 64bit (x86_64) kernels."
msgstr ""

#: ../../../arch/x86/intel_txt.rst:196
msgid ""
"In BIOS, the user must enable:  TPM, TXT, VT-x, VT-d.  Not all BIOSes allow "
"these to be individually enabled/disabled and the screens in which to find "
"them are BIOS-specific."
msgstr ""

#: ../../../arch/x86/intel_txt.rst:200
msgid "grub.conf needs to be modified as follows::"
msgstr ""

#: ../../../arch/x86/intel_txt.rst:210
msgid ""
"The kernel option for enabling Intel TXT support is found under the Security "
"top-level menu and is called \"Enable Intel(R) Trusted Execution Technology "
"(TXT)\".  It is considered EXPERIMENTAL and depends on the generic x86 "
"support (to allow maximum flexibility in kernel build options), since the "
"tboot code will detect whether the platform actually supports Intel TXT and "
"thus whether any of the kernel code is executed."
msgstr ""

#: ../../../arch/x86/intel_txt.rst:218
msgid ""
"The Q35_SINIT_17.BIN file is what Intel TXT refers to as an Authenticated "
"Code Module.  It is specific to the chipset in the system and can also be "
"found on the Trusted Boot site.  It is an (unencrypted) module signed by "
"Intel that is used as part of the DRTM process to verify and configure the "
"system.  It is signed because it operates at a higher privilege level in the "
"system than any other macrocode and its correct operation is critical to the "
"establishment of the DRTM.  The process for determining the correct SINIT "
"ACM for a system is documented in the SINIT-guide.txt file that is on the "
"tboot SourceForge site under the SINIT ACM downloads."
msgstr ""
