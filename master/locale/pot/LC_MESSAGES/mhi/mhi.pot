# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../mhi/mhi.rst:5
msgid "MHI (Modem Host Interface)"
msgstr ""

#: ../../../mhi/mhi.rst:7
msgid "This document provides information about the MHI protocol."
msgstr ""

#: ../../../mhi/mhi.rst:10
msgid "Overview"
msgstr ""

#: ../../../mhi/mhi.rst:12
msgid ""
"MHI is a protocol developed by Qualcomm Innovation Center, Inc. It is used "
"by the host processors to control and communicate with modem devices over "
"high speed peripheral buses or shared memory. Even though MHI can be easily "
"adapted to any peripheral buses, it is primarily used with PCIe based "
"devices. MHI provides logical channels over the physical buses and allows "
"transporting the modem protocols, such as IP data packets, modem control "
"messages, and diagnostics over at least one of those logical channels. Also, "
"the MHI protocol provides data acknowledgment feature and manages the power "
"state of the modems via one or more logical channels."
msgstr ""

#: ../../../mhi/mhi.rst:23
msgid "MHI Internals"
msgstr ""

#: ../../../mhi/mhi.rst:26
msgid "MMIO"
msgstr ""

#: ../../../mhi/mhi.rst:28
msgid ""
"MMIO (Memory mapped IO) consists of a set of registers in the device "
"hardware, which are mapped to the host memory space by the peripheral buses "
"like PCIe. Following are the major components of MMIO register space:"
msgstr ""

#: ../../../mhi/mhi.rst:32
msgid "MHI control registers: Access to MHI configurations registers"
msgstr ""

#: ../../../mhi/mhi.rst:34
msgid ""
"MHI BHI registers: BHI (Boot Host Interface) registers are used by the host "
"for downloading the firmware to the device before MHI initialization."
msgstr ""

#: ../../../mhi/mhi.rst:37
msgid ""
"Channel Doorbell array: Channel Doorbell (DB) registers used by the host to "
"notify the device when there is new work to do."
msgstr ""

#: ../../../mhi/mhi.rst:40
msgid ""
"Event Doorbell array: Associated with event context array, the Event "
"Doorbell (DB) registers are used by the host to notify the device when new "
"events are available."
msgstr ""

#: ../../../mhi/mhi.rst:44
msgid ""
"Debug registers: A set of registers and counters used by the device to "
"expose debugging information like performance, functional, and stability to "
"the host."
msgstr ""

#: ../../../mhi/mhi.rst:48
msgid "Data structures"
msgstr ""

#: ../../../mhi/mhi.rst:50
msgid ""
"All data structures used by MHI are in the host system memory. Using the "
"physical interface, the device accesses those data structures. MHI data "
"structures and data buffers in the host system memory regions are mapped for "
"the device."
msgstr ""

#: ../../../mhi/mhi.rst:55
msgid ""
"Channel context array: All channel configurations are organized in channel "
"context data array."
msgstr ""

#: ../../../mhi/mhi.rst:58
msgid ""
"Transfer rings: Used by the host to schedule work items for a channel. The "
"transfer rings are organized as a circular queue of Transfer Descriptors "
"(TD)."
msgstr ""

#: ../../../mhi/mhi.rst:61
msgid ""
"Event context array: All event configurations are organized in the event "
"context data array."
msgstr ""

#: ../../../mhi/mhi.rst:64
msgid ""
"Event rings: Used by the device to send completion and state transition "
"messages to the host"
msgstr ""

#: ../../../mhi/mhi.rst:67
msgid ""
"Command context array: All command configurations are organized in command "
"context data array."
msgstr ""

#: ../../../mhi/mhi.rst:70
msgid ""
"Command rings: Used by the host to send MHI commands to the device. The "
"command rings are organized as a circular queue of Command Descriptors (CD)."
msgstr ""

#: ../../../mhi/mhi.rst:74
msgid "Channels"
msgstr ""

#: ../../../mhi/mhi.rst:76
msgid ""
"MHI channels are logical, unidirectional data pipes between a host and a "
"device. The concept of channels in MHI is similar to endpoints in USB. MHI "
"supports up to 256 channels. However, specific device implementations may "
"support less than the maximum number of channels allowed."
msgstr ""

#: ../../../mhi/mhi.rst:81
msgid ""
"Two unidirectional channels with their associated transfer rings form a "
"bidirectional data pipe, which can be used by the upper-layer protocols to "
"transport application data packets (such as IP packets, modem control "
"messages, diagnostics messages, and so on). Each channel is associated with "
"a single transfer ring."
msgstr ""

#: ../../../mhi/mhi.rst:88
msgid "Transfer rings"
msgstr ""

#: ../../../mhi/mhi.rst:90
msgid ""
"Transfers between the host and device are organized by channels and defined "
"by Transfer Descriptors (TD). TDs are managed through transfer rings, which "
"are defined for each channel between the device and host and reside in the "
"host memory. TDs consist of one or more ring elements (or transfer blocks)::"
msgstr ""

#: ../../../mhi/mhi.rst:101
msgid "Below is the basic usage of transfer rings:"
msgstr ""

#: ../../../mhi/mhi.rst:103
msgid "Host allocates memory for transfer ring."
msgstr ""

#: ../../../mhi/mhi.rst:104 ../../../mhi/mhi.rst:131
msgid ""
"Host sets the base pointer, read pointer, and write pointer in corresponding "
"channel context."
msgstr ""

#: ../../../mhi/mhi.rst:106
msgid "Ring is considered empty when RP == WP."
msgstr ""

#: ../../../mhi/mhi.rst:107
msgid "Ring is considered full when WP + 1 == RP."
msgstr ""

#: ../../../mhi/mhi.rst:108
msgid "RP indicates the next element to be serviced by the device."
msgstr ""

#: ../../../mhi/mhi.rst:109
msgid ""
"When the host has a new buffer to send, it updates the ring element with "
"buffer information, increments the WP to the next element and rings the "
"associated channel DB."
msgstr ""

#: ../../../mhi/mhi.rst:114
msgid "Event rings"
msgstr ""

#: ../../../mhi/mhi.rst:116
msgid ""
"Events from the device to host are organized in event rings and defined by "
"Event Descriptors (ED). Event rings are used by the device to report events "
"such as data transfer completion status, command completion status, and "
"state changes to the host. Event rings are the array of EDs that resides in "
"the host memory. EDs consist of one or more ring elements (or transfer "
"blocks)::"
msgstr ""

#: ../../../mhi/mhi.rst:128
msgid "Below is the basic usage of event rings:"
msgstr ""

#: ../../../mhi/mhi.rst:130
msgid "Host allocates memory for event ring."
msgstr ""

#: ../../../mhi/mhi.rst:133
msgid "Both host and device has a local copy of RP, WP."
msgstr ""

#: ../../../mhi/mhi.rst:134
msgid "Ring is considered empty (no events to service) when WP + 1 == RP."
msgstr ""

#: ../../../mhi/mhi.rst:135
msgid "Ring is considered full of events when RP == WP."
msgstr ""

#: ../../../mhi/mhi.rst:136
msgid ""
"When there is a new event the device needs to send, the device updates ED "
"pointed by RP, increments the RP to the next element and triggers the "
"interrupt."
msgstr ""

#: ../../../mhi/mhi.rst:141
msgid "Ring Element"
msgstr ""

#: ../../../mhi/mhi.rst:143
msgid ""
"A Ring Element is a data structure used to transfer a single block of data "
"between the host and the device. Transfer ring element types contain a "
"single buffer pointer, the size of the buffer, and additional control "
"information. Other ring element types may only contain control and status "
"information. For single buffer operations, a ring descriptor is composed of "
"a single element. For large multi-buffer operations (such as scatter and "
"gather), elements can be chained to form a longer descriptor."
msgstr ""

#: ../../../mhi/mhi.rst:152
msgid "MHI Operations"
msgstr ""

#: ../../../mhi/mhi.rst:155
msgid "MHI States"
msgstr ""

#: ../../../mhi/mhi.rst:158
msgid "MHI_STATE_RESET"
msgstr ""

#: ../../../mhi/mhi.rst:159
msgid ""
"MHI is in reset state after power-up or hardware reset. The host is not "
"allowed to access device MMIO register space."
msgstr ""

#: ../../../mhi/mhi.rst:163
msgid "MHI_STATE_READY"
msgstr ""

#: ../../../mhi/mhi.rst:164
msgid ""
"MHI is ready for initialization. The host can start MHI initialization by "
"programming MMIO registers."
msgstr ""

#: ../../../mhi/mhi.rst:168
msgid "MHI_STATE_M0"
msgstr ""

#: ../../../mhi/mhi.rst:169
msgid ""
"MHI is running and operational in the device. The host can start channels by "
"issuing channel start command."
msgstr ""

#: ../../../mhi/mhi.rst:173
msgid "MHI_STATE_M1"
msgstr ""

#: ../../../mhi/mhi.rst:174
msgid ""
"MHI operation is suspended by the device. This state is entered when the "
"device detects inactivity at the physical interface within a preset time."
msgstr ""

#: ../../../mhi/mhi.rst:178
msgid "MHI_STATE_M2"
msgstr ""

#: ../../../mhi/mhi.rst:179
msgid ""
"MHI is in low power state. MHI operation is suspended and the device may "
"enter lower power mode."
msgstr ""

#: ../../../mhi/mhi.rst:183
msgid "MHI_STATE_M3"
msgstr ""

#: ../../../mhi/mhi.rst:184
msgid ""
"MHI operation stopped by the host. This state is entered when the host "
"suspends MHI operation."
msgstr ""

#: ../../../mhi/mhi.rst:188
msgid "MHI Initialization"
msgstr ""

#: ../../../mhi/mhi.rst:190
msgid ""
"After system boots, the device is enumerated over the physical interface. In "
"the case of PCIe, the device is enumerated and assigned BAR-0 for the "
"device's MMIO register space. To initialize the MHI in a device, the host "
"performs the following operations:"
msgstr ""

#: ../../../mhi/mhi.rst:195
msgid "Allocates the MHI context for event, channel and command arrays."
msgstr ""

#: ../../../mhi/mhi.rst:196
msgid "Initializes the context array, and prepares interrupts."
msgstr ""

#: ../../../mhi/mhi.rst:197
msgid "Waits until the device enters READY state."
msgstr ""

#: ../../../mhi/mhi.rst:198
msgid "Programs MHI MMIO registers and sets device into MHI_M0 state."
msgstr ""

#: ../../../mhi/mhi.rst:199
msgid "Waits for the device to enter M0 state."
msgstr ""

#: ../../../mhi/mhi.rst:202
msgid "MHI Data Transfer"
msgstr ""

#: ../../../mhi/mhi.rst:204
msgid ""
"MHI data transfer is initiated by the host to transfer data to the device. "
"Following are the sequence of operations performed by the host to transfer "
"data to device:"
msgstr ""

#: ../../../mhi/mhi.rst:208
msgid "Host prepares TD with buffer information."
msgstr ""

#: ../../../mhi/mhi.rst:209
msgid "Host increments the WP of the corresponding channel transfer ring."
msgstr ""

#: ../../../mhi/mhi.rst:210
msgid "Host rings the channel DB register."
msgstr ""

#: ../../../mhi/mhi.rst:211
msgid "Device wakes up to process the TD."
msgstr ""

#: ../../../mhi/mhi.rst:212
msgid ""
"Device generates a completion event for the processed TD by updating ED."
msgstr ""

#: ../../../mhi/mhi.rst:213
msgid "Device increments the RP of the corresponding event ring."
msgstr ""

#: ../../../mhi/mhi.rst:214
msgid "Device triggers IRQ to wake up the host."
msgstr ""

#: ../../../mhi/mhi.rst:215
msgid "Host wakes up and checks the event ring for completion event."
msgstr ""

#: ../../../mhi/mhi.rst:216
msgid ""
"Host updates the WP of the corresponding event ring to indicate that the "
"data transfer has been completed successfully."
msgstr ""
