# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-20 11:24+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../crypto/api-akcipher.rst:2
msgid "Asymmetric Cipher"
msgstr ""

#: ../../../crypto/api-akcipher.rst:5
msgid "Asymmetric Cipher Algorithm Definitions"
msgstr ""

#: ../../../crypto/api-akcipher:7: include/crypto/akcipher.h:15
msgid "public key cipher request"
msgstr ""

#: ../../../crypto/api-akcipher:7: include/crypto/akcipher.h:19
#: include/crypto/akcipher.h:57
msgid "**Definition**::"
msgstr ""

#: ../../../crypto/api-akcipher:7: include/crypto/akcipher.h:30
#: include/crypto/akcipher.h:70
msgid "**Members**"
msgstr ""

#: ../../../crypto/api-akcipher:7: include/crypto/akcipher.h:17
#: include/crypto/akcipher.h:82
msgid "``base``"
msgstr ""

#: ../../../crypto/api-akcipher:7: include/crypto/akcipher.h:18
msgid "Common attributes for async crypto requests"
msgstr ""

#: ../../../crypto/api-akcipher:7: include/crypto/akcipher.h:18
msgid "``src``"
msgstr ""

#: ../../../crypto/api-akcipher:7: include/crypto/akcipher.h:19
msgid "Source data"
msgstr ""

#: ../../../crypto/api-akcipher:7: include/crypto/akcipher.h:19
msgid "``dst``"
msgstr ""

#: ../../../crypto/api-akcipher:7: include/crypto/akcipher.h:20
msgid "Destination data"
msgstr ""

#: ../../../crypto/api-akcipher:7: include/crypto/akcipher.h:20
msgid "``src_len``"
msgstr ""

#: ../../../crypto/api-akcipher:7: include/crypto/akcipher.h:21
msgid "Size of the input buffer"
msgstr ""

#: ../../../crypto/api-akcipher:7: include/crypto/akcipher.h:21
msgid "``dst_len``"
msgstr ""

#: ../../../crypto/api-akcipher:7: include/crypto/akcipher.h:22
msgid ""
"Size of **dst** buffer It needs to be at least as big as the expected result "
"depending on the operation. After operation it will be updated with the "
"actual size of the result. In case of error where the dst sgl size was "
"insufficient, it will be updated to the size required for the operation."
msgstr ""

#: ../../../crypto/api-akcipher:7: include/crypto/akcipher.h:28
msgid "``__ctx``"
msgstr ""

#: ../../../crypto/api-akcipher:7: include/crypto/akcipher.h:29
msgid "Start of private context data"
msgstr ""

#: ../../../crypto/api-akcipher:7: include/crypto/akcipher.h:53
msgid "generic public key cipher algorithm"
msgstr ""

#: ../../../crypto/api-akcipher:7: include/crypto/akcipher.h:55
msgid "``encrypt``"
msgstr ""

#: ../../../crypto/api-akcipher:7: include/crypto/akcipher.h:56
msgid ""
"Function performs an encrypt operation as defined by public key algorithm. "
"In case of error, where the dst_len was insufficient, the req->dst_len will "
"be updated to the size required for the operation"
msgstr ""

#: ../../../crypto/api-akcipher:7: include/crypto/akcipher.h:59
msgid "``decrypt``"
msgstr ""

#: ../../../crypto/api-akcipher:7: include/crypto/akcipher.h:60
msgid ""
"Function performs a decrypt operation as defined by public key algorithm. In "
"case of error, where the dst_len was insufficient, the req->dst_len will be "
"updated to the size required for the operation"
msgstr ""

#: ../../../crypto/api-akcipher:7: include/crypto/akcipher.h:63
msgid "``set_pub_key``"
msgstr ""

#: ../../../crypto/api-akcipher:7: include/crypto/akcipher.h:64
msgid ""
"Function invokes the algorithm specific set public key function, which knows "
"how to decode and interpret the BER encoded public key and parameters"
msgstr ""

#: ../../../crypto/api-akcipher:7: include/crypto/akcipher.h:66
msgid "``set_priv_key``"
msgstr ""

#: ../../../crypto/api-akcipher:7: include/crypto/akcipher.h:67
msgid ""
"Function invokes the algorithm specific set private key function, which "
"knows how to decode and interpret the BER encoded private key and parameters"
msgstr ""

#: ../../../crypto/api-akcipher:7: include/crypto/akcipher.h:69
msgid "``max_size``"
msgstr ""

#: ../../../crypto/api-akcipher:7: include/crypto/akcipher.h:70
msgid "Function returns dest buffer size required for a given key."
msgstr ""

#: ../../../crypto/api-akcipher:7: include/crypto/akcipher.h:70
msgid "``init``"
msgstr ""

#: ../../../crypto/api-akcipher:7: include/crypto/akcipher.h:71
msgid ""
"Initialize the cryptographic transformation object. This function is used to "
"initialize the cryptographic transformation object. This function is called "
"only once at the instantiation time, right after the transformation context "
"was allocated. In case the cryptographic hardware has some special "
"requirements which need to be handled by software, this function shall check "
"for the precise requirement of the transformation and put any software "
"fallbacks in place."
msgstr ""

#: ../../../crypto/api-akcipher:7: include/crypto/akcipher.h:78
msgid "``exit``"
msgstr ""

#: ../../../crypto/api-akcipher:7: include/crypto/akcipher.h:79
msgid ""
"Deinitialize the cryptographic transformation object. This is a counterpart "
"to **init**, used to remove various changes set in **init**."
msgstr ""

#: ../../../crypto/api-akcipher:7: include/crypto/akcipher.h:83
msgid "Common crypto API algorithm data structure"
msgstr ""

#: ../../../crypto/api-akcipher.rst:11
msgid "Asymmetric Cipher API"
msgstr ""

#: ../../../crypto/api-akcipher:13: include/crypto/akcipher.h:99
msgid ""
"The Public Key Cipher API is used with the algorithms of type "
"CRYPTO_ALG_TYPE_AKCIPHER (listed as type \"akcipher\" in /proc/crypto)"
msgstr ""

#: ../../../crypto/api-akcipher:16: include/crypto/akcipher.h:106
msgid "allocate AKCIPHER tfm handle"
msgstr ""

#: ../../../crypto/api-akcipher:16: include/crypto/akcipher.h:110
#: include/crypto/akcipher.h:167 include/crypto/akcipher.h:253
#: include/crypto/akcipher.h:270 include/crypto/akcipher.h:287
#: include/crypto/akcipher.h:340 include/crypto/akcipher.h:362
#: ../../../crypto/api-akcipher:22: include/crypto/akcipher.h:179
#: include/crypto/akcipher.h:199 include/crypto/akcipher.h:209
#: include/crypto/akcipher.h:230
msgid "**Parameters**"
msgstr ""

#: ../../../crypto/api-akcipher:16: include/crypto/akcipher.h:112
msgid "``const char *alg_name``"
msgstr ""

#: ../../../crypto/api-akcipher:16: include/crypto/akcipher.h:107
msgid ""
"is the cra_name / name or cra_driver_name / driver name of the public key "
"algorithm e.g. \"rsa\""
msgstr ""

#: ../../../crypto/api-akcipher:16: include/crypto/akcipher.h:110
msgid "``u32 type``"
msgstr ""

#: ../../../crypto/api-akcipher:16: include/crypto/akcipher.h:109
msgid "specifies the type of the algorithm"
msgstr ""

#: ../../../crypto/api-akcipher:16: include/crypto/akcipher.h:111
msgid "``u32 mask``"
msgstr ""

#: ../../../crypto/api-akcipher:16: include/crypto/akcipher.h:110
msgid "specifies the mask for the algorithm"
msgstr ""

#: ../../../crypto/api-akcipher:16: include/crypto/akcipher.h:112
#: include/crypto/akcipher.h:167 include/crypto/akcipher.h:258
#: include/crypto/akcipher.h:273 include/crypto/akcipher.h:290
#: include/crypto/akcipher.h:346 include/crypto/akcipher.h:368
#: ../../../crypto/api-akcipher:22: include/crypto/akcipher.h:215
#: include/crypto/akcipher.h:236
msgid "**Description**"
msgstr ""

#: ../../../crypto/api-akcipher:16: include/crypto/akcipher.h:111
msgid ""
"Allocate a handle for public key algorithm. The returned struct "
"crypto_akcipher is the handle that is required for any subsequent API "
"invocation for the public key operations."
msgstr ""

#: ../../../crypto/api-akcipher:16: include/crypto/akcipher.h:115
#: include/crypto/akcipher.h:270 include/crypto/akcipher.h:287
#: include/crypto/akcipher.h:340 include/crypto/akcipher.h:362
#: ../../../crypto/api-akcipher:22: include/crypto/akcipher.h:180
msgid "**Return**"
msgstr ""

#: ../../../crypto/api-akcipher:16: include/crypto/akcipher.h:116
msgid ""
"allocated handle in case of success; IS_ERR() is true in case of an error, "
"PTR_ERR() returns the error code."
msgstr ""

#: ../../../crypto/api-akcipher:16: include/crypto/akcipher.h:163
msgid "free AKCIPHER tfm handle"
msgstr ""

#: ../../../crypto/api-akcipher:16: include/crypto/akcipher.h:169
#: include/crypto/akcipher.h:255 include/crypto/akcipher.h:342
#: include/crypto/akcipher.h:364 ../../../crypto/api-akcipher:22:
#: include/crypto/akcipher.h:181
msgid "``struct crypto_akcipher *tfm``"
msgstr ""

#: ../../../crypto/api-akcipher:16: include/crypto/akcipher.h:165
#: include/crypto/akcipher.h:256 ../../../crypto/api-akcipher:22:
#: include/crypto/akcipher.h:177
msgid "AKCIPHER tfm handle allocated with crypto_alloc_akcipher()"
msgstr ""

#: ../../../crypto/api-akcipher:16: include/crypto/akcipher.h:166
msgid "If **tfm** is a NULL or error pointer, this function does nothing."
msgstr ""

#: ../../../crypto/api-akcipher:16: include/crypto/akcipher.h:249
msgid "Get len for output buffer"
msgstr ""

#: ../../../crypto/api-akcipher:16: include/crypto/akcipher.h:250
msgid ""
"Function returns the dest buffer size required for a given key. Function "
"assumes that the key is already set in the transformation. If this function "
"is called without a setkey or with a failed setkey, you will end up in a "
"NULL dereference."
msgstr ""

#: ../../../crypto/api-akcipher:16: include/crypto/akcipher.h:266
msgid "Invoke public key encrypt operation"
msgstr ""

#: ../../../crypto/api-akcipher:16: include/crypto/akcipher.h:272
#: include/crypto/akcipher.h:289 ../../../crypto/api-akcipher:22:
#: include/crypto/akcipher.h:201 include/crypto/akcipher.h:211
#: include/crypto/akcipher.h:232
msgid "``struct akcipher_request *req``"
msgstr ""

#: ../../../crypto/api-akcipher:16: include/crypto/akcipher.h:271
#: include/crypto/akcipher.h:288
msgid "asymmetric key request"
msgstr ""

#: ../../../crypto/api-akcipher:16: include/crypto/akcipher.h:267
msgid ""
"Function invokes the specific public key encrypt operation for a given "
"public key algorithm"
msgstr ""

#: ../../../crypto/api-akcipher:16: include/crypto/akcipher.h:273
#: include/crypto/akcipher.h:290 include/crypto/akcipher.h:346
#: include/crypto/akcipher.h:368
msgid "zero on success; error code in case of error"
msgstr ""

#: ../../../crypto/api-akcipher:16: include/crypto/akcipher.h:283
msgid "Invoke public key decrypt operation"
msgstr ""

#: ../../../crypto/api-akcipher:16: include/crypto/akcipher.h:284
msgid ""
"Function invokes the specific public key decrypt operation for a given "
"public key algorithm"
msgstr ""

#: ../../../crypto/api-akcipher:16: include/crypto/akcipher.h:336
msgid "Invoke set public key operation"
msgstr ""

#: ../../../crypto/api-akcipher:16: include/crypto/akcipher.h:341
#: include/crypto/akcipher.h:363
msgid "tfm handle"
msgstr ""

#: ../../../crypto/api-akcipher:16: include/crypto/akcipher.h:343
#: include/crypto/akcipher.h:365
msgid "``const void *key``"
msgstr ""

#: ../../../crypto/api-akcipher:16: include/crypto/akcipher.h:342
msgid "BER encoded public key, algo OID, paramlen, BER encoded parameters"
msgstr ""

#: ../../../crypto/api-akcipher:16: include/crypto/akcipher.h:345
#: include/crypto/akcipher.h:367
msgid "``unsigned int keylen``"
msgstr ""

#: ../../../crypto/api-akcipher:16: include/crypto/akcipher.h:344
#: include/crypto/akcipher.h:366
msgid "length of the key (not including other data)"
msgstr ""

#: ../../../crypto/api-akcipher:16: include/crypto/akcipher.h:337
#: include/crypto/akcipher.h:359
msgid ""
"Function invokes the algorithm specific set key function, which knows how to "
"decode and interpret the encoded key and parameters"
msgstr ""

#: ../../../crypto/api-akcipher:16: include/crypto/akcipher.h:358
msgid "Invoke set private key operation"
msgstr ""

#: ../../../crypto/api-akcipher:16: include/crypto/akcipher.h:364
msgid "BER encoded private key, algo OID, paramlen, BER encoded parameters"
msgstr ""

#: ../../../crypto/api-akcipher.rst:20
msgid "Asymmetric Cipher Request Handle"
msgstr ""

#: ../../../crypto/api-akcipher:22: include/crypto/akcipher.h:175
msgid "allocates public key request"
msgstr ""

#: ../../../crypto/api-akcipher:22: include/crypto/akcipher.h:179
msgid "``gfp_t gfp``"
msgstr ""

#: ../../../crypto/api-akcipher:22: include/crypto/akcipher.h:178
msgid "allocation flags"
msgstr ""

#: ../../../crypto/api-akcipher:22: include/crypto/akcipher.h:180
msgid "allocated handle in case of success or NULL in case of an error."
msgstr ""

#: ../../../crypto/api-akcipher:22: include/crypto/akcipher.h:195
msgid "zeroize and free public key request"
msgstr ""

#: ../../../crypto/api-akcipher:22: include/crypto/akcipher.h:197
msgid "request to free"
msgstr ""

#: ../../../crypto/api-akcipher:22: include/crypto/akcipher.h:205
msgid "Sets an asynchronous callback."
msgstr ""

#: ../../../crypto/api-akcipher:22: include/crypto/akcipher.h:210
msgid "request that the callback will be set for"
msgstr ""

#: ../../../crypto/api-akcipher:22: include/crypto/akcipher.h:212
msgid "``u32 flgs``"
msgstr ""

#: ../../../crypto/api-akcipher:22: include/crypto/akcipher.h:211
msgid "specify for instance if the operation may backlog"
msgstr ""

#: ../../../crypto/api-akcipher:22: include/crypto/akcipher.h:213
msgid "``crypto_completion_t cmpl``"
msgstr ""

#: ../../../crypto/api-akcipher:22: include/crypto/akcipher.h:212
msgid "callback which will be called"
msgstr ""

#: ../../../crypto/api-akcipher:22: include/crypto/akcipher.h:214
msgid "``void *data``"
msgstr ""

#: ../../../crypto/api-akcipher:22: include/crypto/akcipher.h:213
msgid "private data used by the caller"
msgstr ""

#: ../../../crypto/api-akcipher:22: include/crypto/akcipher.h:206
msgid ""
"Callback will be called when an asynchronous operation on a given request is "
"finished."
msgstr ""

#: ../../../crypto/api-akcipher:22: include/crypto/akcipher.h:226
msgid "Sets request parameters"
msgstr ""

#: ../../../crypto/api-akcipher:22: include/crypto/akcipher.h:230
msgid "public key request"
msgstr ""

#: ../../../crypto/api-akcipher:22: include/crypto/akcipher.h:232
msgid "``struct scatterlist *src``"
msgstr ""

#: ../../../crypto/api-akcipher:22: include/crypto/akcipher.h:231
msgid "ptr to input scatter list"
msgstr ""

#: ../../../crypto/api-akcipher:22: include/crypto/akcipher.h:233
msgid "``struct scatterlist *dst``"
msgstr ""

#: ../../../crypto/api-akcipher:22: include/crypto/akcipher.h:232
msgid "ptr to output scatter list"
msgstr ""

#: ../../../crypto/api-akcipher:22: include/crypto/akcipher.h:234
msgid "``unsigned int src_len``"
msgstr ""

#: ../../../crypto/api-akcipher:22: include/crypto/akcipher.h:233
msgid "size of the src input scatter list to be processed"
msgstr ""

#: ../../../crypto/api-akcipher:22: include/crypto/akcipher.h:235
msgid "``unsigned int dst_len``"
msgstr ""

#: ../../../crypto/api-akcipher:22: include/crypto/akcipher.h:234
msgid "size of the dst output scatter list"
msgstr ""

#: ../../../crypto/api-akcipher:22: include/crypto/akcipher.h:227
msgid "Sets parameters required by crypto operation"
msgstr ""
