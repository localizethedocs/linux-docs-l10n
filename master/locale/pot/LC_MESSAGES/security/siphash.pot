# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../security/siphash.rst:3
msgid "SipHash - a short input PRF"
msgstr ""

#: ../../../security/siphash.rst:0
msgid "Author"
msgstr ""

#: ../../../security/siphash.rst:5 ../../../security/siphash.rst:115
msgid "Written by Jason A. Donenfeld <jason@zx2c4.com>"
msgstr ""

#: ../../../security/siphash.rst:7
msgid ""
"SipHash is a cryptographically secure PRF -- a keyed hash function -- that "
"performs very well for short inputs, hence the name. It was designed by "
"cryptographers Daniel J. Bernstein and Jean-Philippe Aumasson. It is "
"intended as a replacement for some uses of: `jhash`, `md5_transform`, "
"`sha1_transform`, and so forth."
msgstr ""

#: ../../../security/siphash.rst:13
msgid ""
"SipHash takes a secret key filled with randomly generated numbers and either "
"an input buffer or several input integers. It spits out an integer that is "
"indistinguishable from random. You may then use that integer as part of "
"secure sequence numbers, secure cookies, or mask it off for use in a hash "
"table."
msgstr ""

#: ../../../security/siphash.rst:19
msgid "Generating a key"
msgstr ""

#: ../../../security/siphash.rst:21 ../../../security/siphash.rst:144
msgid ""
"Keys should always be generated from a cryptographically secure source of "
"random numbers, either using get_random_bytes or get_random_once::"
msgstr ""

#: ../../../security/siphash.rst:27 ../../../security/siphash.rst:150
msgid "If you're not deriving your key from here, you're doing it wrong."
msgstr ""

#: ../../../security/siphash.rst:30
msgid "Using the functions"
msgstr ""

#: ../../../security/siphash.rst:32 ../../../security/siphash.rst:155
msgid ""
"There are two variants of the function, one that takes a list of integers, "
"and one that takes a buffer::"
msgstr ""

#: ../../../security/siphash.rst:37 ../../../security/siphash.rst:160
msgid "And::"
msgstr ""

#: ../../../security/siphash.rst:48
msgid ""
"If you pass the generic siphash function something of a constant length, it "
"will constant fold at compile-time and automatically choose one of the "
"optimized functions."
msgstr ""

#: ../../../security/siphash.rst:52
msgid "Hashtable key function usage::"
msgstr ""

#: ../../../security/siphash.rst:69 ../../../security/siphash.rst:191
msgid "You may then iterate like usual over the returned hash bucket."
msgstr ""

#: ../../../security/siphash.rst:72
msgid "Security"
msgstr ""

#: ../../../security/siphash.rst:74
msgid ""
"SipHash has a very high security margin, with its 128-bit key. So long as "
"the key is kept secret, it is impossible for an attacker to guess the "
"outputs of the function, even if being able to observe many outputs, since "
"2^128 outputs is significant."
msgstr ""

#: ../../../security/siphash.rst:79
msgid "Linux implements the \"2-4\" variant of SipHash."
msgstr ""

#: ../../../security/siphash.rst:82
msgid "Struct-passing Pitfalls"
msgstr ""

#: ../../../security/siphash.rst:84
msgid ""
"Often times the XuY functions will not be large enough, and instead you'll "
"want to pass a pre-filled struct to siphash. When doing this, it's important "
"to always ensure the struct has no padding holes. The easiest way to do this "
"is to simply arrange the members of the struct in descending order of size, "
"and to use offsetofend() instead of sizeof() for getting the size. For "
"performance reasons, if possible, it's probably a good thing to align the "
"struct to the right boundary. Here's an example::"
msgstr ""

#: ../../../security/siphash.rst:104
msgid "Resources"
msgstr ""

#: ../../../security/siphash.rst:106
msgid ""
"Read the SipHash paper if you're interested in learning more: https://131002."
"net/siphash/siphash.pdf"
msgstr ""

#: ../../../security/siphash.rst:113
msgid "HalfSipHash - SipHash's insecure younger cousin"
msgstr ""

#: ../../../security/siphash.rst:117
msgid ""
"On the off-chance that SipHash is not fast enough for your needs, you might "
"be able to justify using HalfSipHash, a terrifying but potentially useful "
"possibility. HalfSipHash cuts SipHash's rounds down from \"2-4\" to \"1-3\" "
"and, even scarier, uses an easily brute-forcable 64-bit key (with a 32-bit "
"output) instead of SipHash's 128-bit key. However, this may appeal to some "
"high-performance `jhash` users."
msgstr ""

#: ../../../security/siphash.rst:124
msgid ""
"HalfSipHash support is provided through the \"hsiphash\" family of functions."
msgstr ""

#: ../../../security/siphash.rst:127
msgid ""
"Do not ever use the hsiphash functions except for as a hashtable key "
"function, and only then when you can be absolutely certain that the outputs "
"will never be transmitted out of the kernel. This is only remotely useful "
"over `jhash` as a means of mitigating hashtable flooding denial of service "
"attacks."
msgstr ""

#: ../../../security/siphash.rst:133
msgid ""
"On 64-bit kernels, the hsiphash functions actually implement SipHash-1-3, a "
"reduced-round variant of SipHash, instead of HalfSipHash-1-3. This is "
"because in 64-bit code, SipHash-1-3 is no slower than HalfSipHash-1-3, and "
"can be faster. Note, this does *not* mean that in 64-bit kernels the "
"hsiphash functions are the same as the siphash ones, or that they are "
"secure; the hsiphash functions still use a less secure reduced-round "
"algorithm and truncate their outputs to 32 bits."
msgstr ""

#: ../../../security/siphash.rst:142
msgid "Generating a hsiphash key"
msgstr ""

#: ../../../security/siphash.rst:153
msgid "Using the hsiphash functions"
msgstr ""

#: ../../../security/siphash.rst:167
msgid ""
"If you pass the generic hsiphash function something of a constant length, it "
"will constant fold at compile-time and automatically choose one of the "
"optimized functions."
msgstr ""

#: ../../../security/siphash.rst:172
msgid "Hashtable key function usage"
msgstr ""

#: ../../../security/siphash.rst:194
msgid "Performance"
msgstr ""

#: ../../../security/siphash.rst:196
msgid ""
"hsiphash() is roughly 3 times slower than jhash(). For many replacements, "
"this will not be a problem, as the hashtable lookup isn't the bottleneck. "
"And in general, this is probably a good sacrifice to make for the security "
"and DoS resistance of hsiphash()."
msgstr ""
