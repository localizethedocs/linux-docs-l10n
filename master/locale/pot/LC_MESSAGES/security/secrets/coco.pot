# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../security/secrets/coco.rst:5
msgid "Confidential Computing secrets"
msgstr ""

#: ../../../security/secrets/coco.rst:7
msgid ""
"This document describes how Confidential Computing secret injection is "
"handled from the firmware to the operating system, in the EFI driver and the "
"efi_secret kernel module."
msgstr ""

#: ../../../security/secrets/coco.rst:13
msgid "Introduction"
msgstr ""

#: ../../../security/secrets/coco.rst:15
msgid ""
"Confidential Computing (coco) hardware such as AMD SEV (Secure Encrypted "
"Virtualization) allows guest owners to inject secrets into the VMs memory "
"without the host/hypervisor being able to read them.  In SEV, secret "
"injection is performed early in the VM launch process, before the guest "
"starts running."
msgstr ""

#: ../../../security/secrets/coco.rst:21
msgid ""
"The efi_secret kernel module allows userspace applications to access these "
"secrets via securityfs."
msgstr ""

#: ../../../security/secrets/coco.rst:26
msgid "Secret data flow"
msgstr ""

#: ../../../security/secrets/coco.rst:28
msgid ""
"The guest firmware may reserve a designated memory area for secret "
"injection, and publish its location (base GPA and length) in the EFI "
"configuration table under a ``LINUX_EFI_COCO_SECRET_AREA_GUID`` entry "
"(``adf956ad-e98c-484c-ae11-b51c7d336447``).  This memory area should be "
"marked by the firmware as ``EFI_RESERVED_TYPE``, and therefore the kernel "
"should not be use it for its own purposes."
msgstr ""

#: ../../../security/secrets/coco.rst:35
msgid ""
"During the VM's launch, the virtual machine manager may inject a secret to "
"that area.  In AMD SEV and SEV-ES this is performed using the "
"``KVM_SEV_LAUNCH_SECRET`` command (see [sev]_).  The structure of the "
"injected Guest Owner secret data should be a GUIDed table of secret values; "
"the binary format is described in ``drivers/virt/coco/efi_secret/efi_secret."
"c`` under \"Structure of the EFI secret area\"."
msgstr ""

#: ../../../security/secrets/coco.rst:42
msgid ""
"On kernel start, the kernel's EFI driver saves the location of the secret "
"area (taken from the EFI configuration table) in the ``efi.coco_secret`` "
"field. Later it checks if the secret area is populated: it maps the area and "
"checks whether its content begins with ``EFI_SECRET_TABLE_HEADER_GUID`` "
"(``1e74f542-71dd-4d66-963e-ef4287ff173b``).  If the secret area is "
"populated, the EFI driver will autoload the efi_secret kernel module, which "
"exposes the secrets to userspace applications via securityfs.  The details "
"of the efi_secret filesystem interface are in [secrets-coco-abi]_."
msgstr ""

#: ../../../security/secrets/coco.rst:53
msgid "Application usage example"
msgstr ""

#: ../../../security/secrets/coco.rst:55
msgid ""
"Consider a guest performing computations on encrypted files.  The Guest "
"Owner provides the decryption key (= secret) using the secret injection "
"mechanism. The guest application reads the secret from the efi_secret "
"filesystem and proceeds to decrypt the files into memory and then performs "
"the needed computations on the content."
msgstr ""

#: ../../../security/secrets/coco.rst:61
msgid ""
"In this example, the host can't read the files from the disk image because "
"they are encrypted.  Host can't read the decryption key because it is passed "
"using the secret injection mechanism (= secure channel). Host can't read the "
"decrypted content from memory because it's a confidential (memory-encrypted) "
"guest."
msgstr ""

#: ../../../security/secrets/coco.rst:67
msgid ""
"Here is a simple example for usage of the efi_secret module in a guest to "
"which an EFI secret area with 4 secrets was injected during launch::"
msgstr ""

#: ../../../security/secrets/coco.rst:97
msgid "References"
msgstr ""

#: ../../../security/secrets/coco.rst:99
msgid ""
"See [sev-api-spec]_ for more info regarding SEV ``LAUNCH_SECRET`` operation."
msgstr ""

#: ../../../security/secrets/coco.rst:101
msgid "Documentation/virt/kvm/x86/amd-memory-encryption.rst"
msgstr ""

#: ../../../security/secrets/coco.rst:102
msgid "Documentation/ABI/testing/securityfs-secrets-coco"
msgstr ""

#: ../../../security/secrets/coco.rst:103
msgid ""
"https://www.amd.com/system/files/TechDocs/55766_SEV-KM_API_Specification.pdf"
msgstr ""
