# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-06 15:47+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../userspace-api/landlock.rst:8
msgid "Landlock: unprivileged access control"
msgstr ""

#: ../../../userspace-api/landlock.rst:0
msgid "Author"
msgstr ""

#: ../../../userspace-api/landlock.rst:10
msgid "Mickaël Salaün"
msgstr ""

#: ../../../userspace-api/landlock.rst:0
msgid "Date"
msgstr ""

#: ../../../userspace-api/landlock.rst:11
msgid "March 2025"
msgstr ""

#: ../../../userspace-api/landlock.rst:13
msgid ""
"The goal of Landlock is to enable restriction of ambient rights (e.g. global "
"filesystem or network access) for a set of processes.  Because Landlock is a "
"stackable LSM, it makes it possible to create safe security sandboxes as new "
"security layers in addition to the existing system-wide access-controls. "
"This kind of sandbox is expected to help mitigate the security impact of "
"bugs or unexpected/malicious behaviors in user space applications.  Landlock "
"empowers any process, including unprivileged ones, to securely restrict "
"themselves."
msgstr ""

#: ../../../userspace-api/landlock.rst:21
msgid ""
"We can quickly make sure that Landlock is enabled in the running system by "
"looking for \"landlock: Up and running\" in kernel logs (as root): ``dmesg | "
"grep landlock || journalctl -kb -g landlock`` . Developers can also easily "
"check for Landlock support with a :ref:`related system call "
"<landlock_abi_versions>`. If Landlock is not currently supported, we need "
"to :ref:`configure the kernel appropriately <kernel_support>`."
msgstr ""

#: ../../../userspace-api/landlock.rst:30
msgid "Landlock rules"
msgstr ""

#: ../../../userspace-api/landlock.rst:32
msgid ""
"A Landlock rule describes an action on an object which the process intends "
"to perform.  A set of rules is aggregated in a ruleset, which can then "
"restrict the thread enforcing it, and its future children."
msgstr ""

#: ../../../userspace-api/landlock.rst:36
msgid "The two existing types of rules are:"
msgstr ""

#: ../../../userspace-api/landlock.rst:38
msgid "Filesystem rules"
msgstr ""

#: ../../../userspace-api/landlock.rst:39
msgid ""
"For these rules, the object is a file hierarchy, and the related filesystem "
"actions are defined with `filesystem access rights`."
msgstr ""

#: ../../../userspace-api/landlock.rst:43
msgid "Network rules (since ABI v4)"
msgstr ""

#: ../../../userspace-api/landlock.rst:44
msgid ""
"For these rules, the object is a TCP port, and the related actions are "
"defined with `network access rights`."
msgstr ""

#: ../../../userspace-api/landlock.rst:48
msgid "Defining and enforcing a security policy"
msgstr ""

#: ../../../userspace-api/landlock.rst:50
msgid "We first need to define the ruleset that will contain our rules."
msgstr ""

#: ../../../userspace-api/landlock.rst:52
msgid ""
"For this example, the ruleset will contain rules that only allow filesystem "
"read actions and establish a specific TCP connection. Filesystem write "
"actions and other TCP actions will be denied."
msgstr ""

#: ../../../userspace-api/landlock.rst:56
msgid ""
"The ruleset then needs to handle both these kinds of actions.  This is "
"required for backward and forward compatibility (i.e. the kernel and user "
"space may not know each other's supported restrictions), hence the need to "
"be explicit about the denied-by-default access rights."
msgstr ""

#: ../../../userspace-api/landlock.rst:89
msgid ""
"Because we may not know which kernel version an application will be executed "
"on, it is safer to follow a best-effort security approach.  Indeed, we "
"should try to protect users as much as possible whatever the kernel they are "
"using."
msgstr ""

#: ../../../userspace-api/landlock.rst:94
msgid ""
"To be compatible with older Linux versions, we detect the available Landlock "
"ABI version, and only use the available subset of access rights:"
msgstr ""

#: ../../../userspace-api/landlock.rst:132
msgid ""
"This enables the creation of an inclusive ruleset that will contain our "
"rules."
msgstr ""

#: ../../../userspace-api/landlock.rst:144
msgid ""
"We can now add a new rule to this ruleset thanks to the returned file "
"descriptor referring to this ruleset.  The rule will only allow reading the "
"file hierarchy ``/usr``.  Without another rule, write actions would then be "
"denied by the ruleset.  To add ``/usr`` to the ruleset, we open it with the "
"``O_PATH`` flag and fill the &struct landlock_path_beneath_attr with this "
"file descriptor."
msgstr ""

#: ../../../userspace-api/landlock.rst:176
msgid ""
"It may also be required to create rules following the same logic as "
"explained for the ruleset creation, by filtering access rights according to "
"the Landlock ABI version.  In this example, this is not required because all "
"of the requested ``allowed_access`` rights are already available in ABI 1."
msgstr ""

#: ../../../userspace-api/landlock.rst:181
msgid ""
"For network access-control, we can add a set of rules that allow to use a "
"port number for a specific action: HTTPS connections."
msgstr ""

#: ../../../userspace-api/landlock.rst:194
msgid ""
"The next step is to restrict the current thread from gaining more privileges "
"(e.g. through a SUID binary).  We now have a ruleset with the first rule "
"allowing read access to ``/usr`` while denying all other handled accesses "
"for the filesystem, and a second rule allowing HTTPS connections."
msgstr ""

#: ../../../userspace-api/landlock.rst:207
msgid "The current thread is now ready to sandbox itself with the ruleset."
msgstr ""

#: ../../../userspace-api/landlock.rst:218
msgid ""
"If the ``landlock_restrict_self`` system call succeeds, the current thread "
"is now restricted and this policy will be enforced on all its subsequently "
"created children as well.  Once a thread is landlocked, there is no way to "
"remove its security policy; only adding more restrictions is allowed.  These "
"threads are now in a new Landlock domain, which is a merger of their parent "
"one (if any) with the new ruleset."
msgstr ""

#: ../../../userspace-api/landlock.rst:225
msgid "Full working code can be found in `samples/landlock/sandboxer.c`_."
msgstr ""

#: ../../../userspace-api/landlock.rst:228
msgid "Good practices"
msgstr ""

#: ../../../userspace-api/landlock.rst:230
msgid ""
"It is recommended to set access rights to file hierarchy leaves as much as "
"possible.  For instance, it is better to be able to have ``~/doc/`` as a "
"read-only hierarchy and ``~/tmp/`` as a read-write hierarchy, compared to "
"``~/`` as a read-only hierarchy and ``~/tmp/`` as a read-write hierarchy. "
"Following this good practice leads to self-sufficient hierarchies that do "
"not depend on their location (i.e. parent directories).  This is "
"particularly relevant when we want to allow linking or renaming.  Indeed, "
"having consistent access rights per directory enables changing the location "
"of such directories without relying on the destination directory access "
"rights (except those that are required for this operation, see "
"``LANDLOCK_ACCESS_FS_REFER`` documentation)."
msgstr ""

#: ../../../userspace-api/landlock.rst:242
msgid ""
"Having self-sufficient hierarchies also helps to tighten the required access "
"rights to the minimal set of data.  This also helps avoid sinkhole "
"directories, i.e. directories where data can be linked to but not linked "
"from.  However, this depends on data organization, which might not be "
"controlled by developers. In this case, granting read-write access to ``~/"
"tmp/``, instead of write-only access, would potentially allow moving ``~/tmp/"
"`` to a non-readable directory and still keep the ability to list the "
"content of ``~/tmp/``."
msgstr ""

#: ../../../userspace-api/landlock.rst:251
msgid "Layers of file path access rights"
msgstr ""

#: ../../../userspace-api/landlock.rst:253
msgid ""
"Each time a thread enforces a ruleset on itself, it updates its Landlock "
"domain with a new layer of policy.  This complementary policy is stacked "
"with any other rulesets potentially already restricting this thread.  A "
"sandboxed thread can then safely add more constraints to itself with a new "
"enforced ruleset."
msgstr ""

#: ../../../userspace-api/landlock.rst:258
msgid ""
"One policy layer grants access to a file path if at least one of its rules "
"encountered on the path grants the access.  A sandboxed thread can only "
"access a file path if all its enforced policy layers grant the access as "
"well as all the other system access controls (e.g. filesystem DAC, other LSM "
"policies, etc.)."
msgstr ""

#: ../../../userspace-api/landlock.rst:265
msgid "Bind mounts and OverlayFS"
msgstr ""

#: ../../../userspace-api/landlock.rst:267
msgid ""
"Landlock enables restricting access to file hierarchies, which means that "
"these access rights can be propagated with bind mounts (cf. Documentation/"
"filesystems/sharedsubtree.rst) but not with Documentation/filesystems/"
"overlayfs.rst."
msgstr ""

#: ../../../userspace-api/landlock.rst:272
msgid ""
"A bind mount mirrors a source file hierarchy to a destination.  The "
"destination hierarchy is then composed of the exact same files, on which "
"Landlock rules can be tied, either via the source or the destination path.  "
"These rules restrict access when they are encountered on a path, which means "
"that they can restrict access to multiple file hierarchies at the same time, "
"whether these hierarchies are the result of bind mounts or not."
msgstr ""

#: ../../../userspace-api/landlock.rst:279
msgid ""
"An OverlayFS mount point consists of upper and lower layers.  These layers "
"are combined in a merge directory, and that merged directory becomes "
"available at the mount point.  This merge hierarchy may include files from "
"the upper and lower layers, but modifications performed on the merge "
"hierarchy only reflect on the upper layer.  From a Landlock policy point of "
"view, all OverlayFS layers and merge hierarchies are standalone and each "
"contains their own set of files and directories, which is different from "
"bind mounts.  A policy restricting an OverlayFS layer will not restrict the "
"resulted merged hierarchy, and vice versa. Landlock users should then only "
"think about file hierarchies they want to allow access to, regardless of the "
"underlying filesystem."
msgstr ""

#: ../../../userspace-api/landlock.rst:291
msgid "Inheritance"
msgstr ""

#: ../../../userspace-api/landlock.rst:293
msgid ""
"Every new thread resulting from a :manpage:`clone(2)` inherits Landlock "
"domain restrictions from its parent.  This is similar to seccomp inheritance "
"(cf. Documentation/userspace-api/seccomp_filter.rst) or any other LSM "
"dealing with task's :manpage:`credentials(7)`.  For instance, one process's "
"thread may apply Landlock rules to itself, but they will not be "
"automatically applied to other sibling threads (unlike POSIX thread "
"credential changes, cf. :manpage:`nptl(7)`)."
msgstr ""

#: ../../../userspace-api/landlock.rst:301
msgid ""
"When a thread sandboxes itself, we have the guarantee that the related "
"security policy will stay enforced on all this thread's descendants.  This "
"allows creating standalone and modular security policies per application, "
"which will automatically be composed between themselves according to their "
"runtime parent policies."
msgstr ""

#: ../../../userspace-api/landlock.rst:308
msgid "Ptrace restrictions"
msgstr ""

#: ../../../userspace-api/landlock.rst:310
msgid ""
"A sandboxed process has less privileges than a non-sandboxed process and "
"must then be subject to additional restrictions when manipulating another "
"process. To be allowed to use :manpage:`ptrace(2)` and related syscalls on a "
"target process, a sandboxed process should have a superset of the target "
"process's access rights, which means the tracee must be in a sub-domain of "
"the tracer."
msgstr ""

#: ../../../userspace-api/landlock.rst:317
msgid "IPC scoping"
msgstr ""

#: ../../../userspace-api/landlock.rst:319
msgid ""
"Similar to the implicit `Ptrace restrictions`_, we may want to further "
"restrict interactions between sandboxes.  Therefore, at ruleset creation "
"time, each Landlock domain can restrict the scope for certain operations, so "
"that these operations can only reach out to processes within the same "
"Landlock domain or in a nested Landlock domain (the \"scope\")."
msgstr ""

#: ../../../userspace-api/landlock.rst:325
msgid "The operations which can be scoped are:"
msgstr ""

#: ../../../userspace-api/landlock.rst:327
msgid "``LANDLOCK_SCOPE_SIGNAL``"
msgstr ""

#: ../../../userspace-api/landlock.rst:328
msgid ""
"This limits the sending of signals to target processes which run within the "
"same or a nested Landlock domain."
msgstr ""

#: ../../../userspace-api/landlock.rst:331
msgid "``LANDLOCK_SCOPE_ABSTRACT_UNIX_SOCKET``"
msgstr ""

#: ../../../userspace-api/landlock.rst:332
msgid ""
"This limits the set of abstract :manpage:`unix(7)` sockets to which we can :"
"manpage:`connect(2)` to socket addresses which were created by a process in "
"the same or a nested Landlock domain."
msgstr ""

#: ../../../userspace-api/landlock.rst:336
msgid ""
"A :manpage:`sendto(2)` on a non-connected datagram socket is treated as if "
"it were doing an implicit :manpage:`connect(2)` and will be blocked if the "
"remote end does not stem from the same or a nested Landlock domain."
msgstr ""

#: ../../../userspace-api/landlock.rst:340
msgid ""
"A :manpage:`sendto(2)` on a socket which was previously connected will not "
"be restricted.  This works for both datagram and stream sockets."
msgstr ""

#: ../../../userspace-api/landlock.rst:343
msgid ""
"IPC scoping does not support exceptions via :manpage:`landlock_add_rule(2)`. "
"If an operation is scoped within a domain, no rules can be added to allow "
"access to resources or processes outside of the scope."
msgstr ""

#: ../../../userspace-api/landlock.rst:348
msgid "Truncating files"
msgstr ""

#: ../../../userspace-api/landlock.rst:350
msgid ""
"The operations covered by ``LANDLOCK_ACCESS_FS_WRITE_FILE`` and "
"``LANDLOCK_ACCESS_FS_TRUNCATE`` both change the contents of a file and "
"sometimes overlap in non-intuitive ways.  It is recommended to always "
"specify both of these together."
msgstr ""

#: ../../../userspace-api/landlock.rst:355
msgid ""
"A particularly surprising example is :manpage:`creat(2)`.  The name suggests "
"that this system call requires the rights to create and write files.  "
"However, it also requires the truncate right if an existing file under the "
"same name is already present."
msgstr ""

#: ../../../userspace-api/landlock.rst:360
msgid ""
"It should also be noted that truncating files does not require the "
"``LANDLOCK_ACCESS_FS_WRITE_FILE`` right.  Apart from the :manpage:"
"`truncate(2)` system call, this can also be done through :manpage:`open(2)` "
"with the flags ``O_RDONLY | O_TRUNC``."
msgstr ""

#: ../../../userspace-api/landlock.rst:365
msgid "The truncate right is associated with the opened file (see below)."
msgstr ""

#: ../../../userspace-api/landlock.rst:368
msgid "Rights associated with file descriptors"
msgstr ""

#: ../../../userspace-api/landlock.rst:370
msgid ""
"When opening a file, the availability of the ``LANDLOCK_ACCESS_FS_TRUNCATE`` "
"and ``LANDLOCK_ACCESS_FS_IOCTL_DEV`` rights is associated with the newly "
"created file descriptor and will be used for subsequent truncation and ioctl "
"attempts using :manpage:`ftruncate(2)` and :manpage:`ioctl(2)`.  The "
"behavior is similar to opening a file for reading or writing, where "
"permissions are checked during :manpage:`open(2)`, but not during the "
"subsequent :manpage:`read(2)` and :manpage:`write(2)` calls."
msgstr ""

#: ../../../userspace-api/landlock.rst:378
msgid ""
"As a consequence, it is possible that a process has multiple open file "
"descriptors referring to the same file, but Landlock enforces different "
"things when operating with these file descriptors.  This can happen when a "
"Landlock ruleset gets enforced and the process keeps file descriptors which "
"were opened both before and after the enforcement.  It is also possible to "
"pass such file descriptors between processes, keeping their Landlock "
"properties, even when some of the involved processes do not have an enforced "
"Landlock ruleset."
msgstr ""

#: ../../../userspace-api/landlock.rst:387
msgid "Compatibility"
msgstr ""

#: ../../../userspace-api/landlock.rst:390
msgid "Backward and forward compatibility"
msgstr ""

#: ../../../userspace-api/landlock.rst:392
msgid ""
"Landlock is designed to be compatible with past and future versions of the "
"kernel.  This is achieved thanks to the system call attributes and the "
"associated bitflags, particularly the ruleset's ``handled_access_fs``.  "
"Making handled access rights explicit enables the kernel and user space to "
"have a clear contract with each other.  This is required to make sure "
"sandboxing will not get stricter with a system update, which could break "
"applications."
msgstr ""

#: ../../../userspace-api/landlock.rst:399
msgid ""
"Developers can subscribe to the `Landlock mailing list <https://subspace."
"kernel.org/lists.linux.dev.html>`_ to knowingly update and test their "
"applications with the latest available features.  In the interest of users, "
"and because they may use different kernel versions, it is strongly "
"encouraged to follow a best-effort security approach by checking the "
"Landlock ABI version at runtime and only enforcing the supported features."
msgstr ""

#: ../../../userspace-api/landlock.rst:409
msgid "Landlock ABI versions"
msgstr ""

#: ../../../userspace-api/landlock.rst:411
msgid ""
"The Landlock ABI version can be read with the sys_landlock_create_ruleset() "
"system call:"
msgstr ""

#: ../../../userspace-api/landlock.rst:434
msgid ""
"The following kernel interfaces are implicitly supported by the first ABI "
"version.  Features only supported from a specific version are explicitly "
"marked as such."
msgstr ""

#: ../../../userspace-api/landlock.rst:439
msgid "Kernel interface"
msgstr ""

#: ../../../userspace-api/landlock.rst:442
msgid "Access rights"
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:195
msgid ""
"A set of actions on kernel objects may be defined by an attribute (e.g. :c:"
"type:`struct landlock_path_beneath_attr <landlock_path_beneath_attr>`) "
"including a bitmask of access."
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:201
msgid ""
"These flags enable to restrict a sandboxed process to a set of actions on "
"files and directories.  Files or directories opened before the sandboxing "
"are not subject to these restrictions."
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:205
msgid "The following access rights apply only to files:"
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:207
msgid "``LANDLOCK_ACCESS_FS_EXECUTE``: Execute a file."
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:208
msgid ""
"``LANDLOCK_ACCESS_FS_WRITE_FILE``: Open a file with write access.  When "
"opening files for writing, you will often additionally need the "
"``LANDLOCK_ACCESS_FS_TRUNCATE`` right.  In many cases, these system calls "
"truncate existing files when overwriting them (e.g., :manpage:`creat(2)`)."
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:212
msgid "``LANDLOCK_ACCESS_FS_READ_FILE``: Open a file with read access."
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:213
msgid ""
"``LANDLOCK_ACCESS_FS_TRUNCATE``: Truncate a file with :manpage:"
"`truncate(2)`, :manpage:`ftruncate(2)`, :manpage:`creat(2)`, or :manpage:"
"`open(2)` with ``O_TRUNC``.  This access right is available since the third "
"version of the Landlock ABI."
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:218
msgid ""
"Whether an opened file can be truncated with :manpage:`ftruncate(2)` or used "
"with `ioctl(2)` is determined during :manpage:`open(2)`, in the same way as "
"read and write permissions are checked during :manpage:`open(2)` using "
"``LANDLOCK_ACCESS_FS_READ_FILE`` and ``LANDLOCK_ACCESS_FS_WRITE_FILE``."
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:223
msgid ""
"A directory can receive access rights related to files or directories.  The "
"following access right is applied to the directory itself, and the "
"directories beneath it:"
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:227
msgid "``LANDLOCK_ACCESS_FS_READ_DIR``: Open a directory or list its content."
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:229
msgid ""
"However, the following access rights only apply to the content of a "
"directory, not the directory itself:"
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:232
msgid ""
"``LANDLOCK_ACCESS_FS_REMOVE_DIR``: Remove an empty directory or rename one."
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:233
msgid "``LANDLOCK_ACCESS_FS_REMOVE_FILE``: Unlink (or rename) a file."
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:234
msgid ""
"``LANDLOCK_ACCESS_FS_MAKE_CHAR``: Create (or rename or link) a character "
"device."
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:236
msgid "``LANDLOCK_ACCESS_FS_MAKE_DIR``: Create (or rename) a directory."
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:237
msgid ""
"``LANDLOCK_ACCESS_FS_MAKE_REG``: Create (or rename or link) a regular file."
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:238
msgid ""
"``LANDLOCK_ACCESS_FS_MAKE_SOCK``: Create (or rename or link) a UNIX domain "
"socket."
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:240
msgid ""
"``LANDLOCK_ACCESS_FS_MAKE_FIFO``: Create (or rename or link) a named pipe."
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:241
msgid ""
"``LANDLOCK_ACCESS_FS_MAKE_BLOCK``: Create (or rename or link) a block device."
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:242
msgid ""
"``LANDLOCK_ACCESS_FS_MAKE_SYM``: Create (or rename or link) a symbolic link."
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:243
msgid ""
"``LANDLOCK_ACCESS_FS_REFER``: Link or rename a file from or to a different "
"directory (i.e. reparent a file hierarchy)."
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:246
msgid ""
"This access right is available since the second version of the Landlock ABI."
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:249
msgid ""
"This is the only access right which is denied by default by any ruleset, "
"even if the right is not specified as handled at ruleset creation time. The "
"only way to make a ruleset grant this right is to explicitly allow it for a "
"specific directory by adding a matching rule to the ruleset."
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:254
msgid ""
"In particular, when using the first Landlock ABI version, Landlock will "
"always deny attempts to reparent files between different directories."
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:257
msgid ""
"In addition to the source and destination directories having the "
"``LANDLOCK_ACCESS_FS_REFER`` access right, the attempted link or rename "
"operation must meet the following constraints:"
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:261
msgid ""
"The reparented file may not gain more access rights in the destination "
"directory than it previously had in the source directory.  If this is "
"attempted, the operation results in an ``EXDEV`` error."
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:265
msgid ""
"When linking or renaming, the ``LANDLOCK_ACCESS_FS_MAKE_*`` right for the "
"respective file type must be granted for the destination directory. "
"Otherwise, the operation results in an ``EACCES`` error."
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:269
msgid ""
"When renaming, the ``LANDLOCK_ACCESS_FS_REMOVE_*`` right for the respective "
"file type must be granted for the source directory.  Otherwise, the "
"operation results in an ``EACCES`` error."
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:273
msgid ""
"If multiple requirements are not met, the ``EACCES`` error code takes "
"precedence over ``EXDEV``."
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:276
msgid "The following access right applies both to files and directories:"
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:278
msgid ""
"``LANDLOCK_ACCESS_FS_IOCTL_DEV``: Invoke :manpage:`ioctl(2)` commands on an "
"opened character or block device."
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:281
msgid ""
"This access right applies to all `ioctl(2)` commands implemented by device "
"drivers.  However, the following common IOCTL commands continue to be "
"invokable independent of the ``LANDLOCK_ACCESS_FS_IOCTL_DEV`` right:"
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:285
msgid "IOCTL commands targeting file descriptors (``FIOCLEX``, ``FIONCLEX``),"
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:286
msgid "IOCTL commands targeting file descriptions (``FIONBIO``, ``FIOASYNC``),"
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:287
msgid ""
"IOCTL commands targeting file systems (``FIFREEZE``, ``FITHAW``, "
"``FIGETBSZ``, ``FS_IOC_GETFSUUID``, ``FS_IOC_GETFSSYSFSPATH``)"
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:289
msgid ""
"Some IOCTL commands which do not make sense when used with devices, but "
"whose implementations are safe and return the right error codes "
"(``FS_IOC_FIEMAP``, ``FICLONE``, ``FICLONERANGE``, ``FIDEDUPERANGE``)"
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:293
msgid ""
"This access right is available since the fifth version of the Landlock ABI."
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:298
msgid ""
"It is currently not possible to restrict some file-related actions "
"accessible through these syscall families: :manpage:`chdir(2)`, :manpage:"
"`stat(2)`, :manpage:`flock(2)`, :manpage:`chmod(2)`, :manpage:`chown(2)`, :"
"manpage:`setxattr(2)`, :manpage:`utime(2)`, :manpage:`fcntl(2)`, :manpage:"
"`access(2)`. Future Landlock evolutions will enable to restrict them."
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:330
msgid ""
"These flags enable to restrict a sandboxed process to a set of network "
"actions."
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:333
msgid "This is supported since Landlock ABI version 4."
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:335
msgid "The following access rights apply to TCP port numbers:"
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:337
msgid "``LANDLOCK_ACCESS_NET_BIND_TCP``: Bind a TCP socket to a local port."
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:338
msgid ""
"``LANDLOCK_ACCESS_NET_CONNECT_TCP``: Connect an active TCP socket to a "
"remote port."
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:352
msgid ""
"These flags enable to isolate a sandboxed process from a set of IPC actions. "
"Setting a flag for a ruleset will isolate the Landlock domain to forbid "
"connections to resources outside the domain."
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:356
msgid "This is supported since Landlock ABI version 6."
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:358
msgid "Scopes:"
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:360
msgid ""
"``LANDLOCK_SCOPE_ABSTRACT_UNIX_SOCKET``: Restrict a sandboxed process from "
"connecting to an abstract UNIX socket created by a process outside the "
"related Landlock domain (e.g., a parent domain or a non-sandboxed process)."
msgstr ""

#: ../../../userspace-api/landlock:444: include/uapi/linux/landlock.h:363
msgid ""
"``LANDLOCK_SCOPE_SIGNAL``: Restrict a sandboxed process from sending a "
"signal to another process outside the domain."
msgstr ""

#: ../../../userspace-api/landlock.rst:448
msgid "Creating a new ruleset"
msgstr ""

#: ../../../userspace-api/landlock:450: security/landlock/syscalls.c:167
msgid "Create a new ruleset"
msgstr ""

#: ../../../userspace-api/landlock:450: security/landlock/syscalls.c:171
#: ../../../userspace-api/landlock:459: security/landlock/syscalls.c:390
#: ../../../userspace-api/landlock:469: security/landlock/syscalls.c:453
msgid "**Parameters**"
msgstr ""

#: ../../../userspace-api/landlock:450: security/landlock/syscalls.c:173
msgid "``const struct landlock_ruleset_attr __user *const attr``"
msgstr ""

#: ../../../userspace-api/landlock:450: security/landlock/syscalls.c:169
msgid ""
"Pointer to a :c:type:`struct landlock_ruleset_attr <landlock_ruleset_attr>` "
"identifying the scope of the new ruleset."
msgstr ""

#: ../../../userspace-api/landlock:450: security/landlock/syscalls.c:172
msgid "``const size_t size``"
msgstr ""

#: ../../../userspace-api/landlock:450: security/landlock/syscalls.c:171
msgid ""
"Size of the pointed :c:type:`struct landlock_ruleset_attr "
"<landlock_ruleset_attr>` (needed for backward and forward compatibility)."
msgstr ""

#: ../../../userspace-api/landlock:450: security/landlock/syscalls.c:174
#: ../../../userspace-api/landlock:459: security/landlock/syscalls.c:394
#: ../../../userspace-api/landlock:469: security/landlock/syscalls.c:453
msgid "``const __u32 flags``"
msgstr ""

#: ../../../userspace-api/landlock:450: security/landlock/syscalls.c:173
#: ../../../userspace-api/landlock:469: security/landlock/syscalls.c:452
msgid "Supported values:"
msgstr ""

#: ../../../userspace-api/landlock:450: security/landlock/syscalls.c:175
#: ../../../userspace-api/landlock:453: include/uapi/linux/landlock.h:55
#: ../../../userspace-api/landlock:459: security/landlock/syscalls.c:395
#: ../../../userspace-api/landlock:462: include/uapi/linux/landlock.h:142
#: include/uapi/linux/landlock.h:163 include/uapi/linux/landlock.h:193
#: ../../../userspace-api/landlock:469: security/landlock/syscalls.c:454
msgid "**Description**"
msgstr ""

#: ../../../userspace-api/landlock:39: include/uapi/linux/landlock.h:59
#: ../../../userspace-api/landlock:450: security/landlock/syscalls.c:174
msgid "``LANDLOCK_CREATE_RULESET_VERSION``"
msgstr ""

#: ../../../userspace-api/landlock:39: include/uapi/linux/landlock.h:62
#: ../../../userspace-api/landlock:450: security/landlock/syscalls.c:175
msgid "``LANDLOCK_CREATE_RULESET_ERRATA``"
msgstr ""

#: ../../../userspace-api/landlock:450: security/landlock/syscalls.c:177
msgid ""
"This system call enables to create a new Landlock ruleset, and returns the "
"related file descriptor on success."
msgstr ""

#: ../../../userspace-api/landlock:450: security/landlock/syscalls.c:180
msgid ""
"If ``LANDLOCK_CREATE_RULESET_VERSION`` or ``LANDLOCK_CREATE_RULESET_ERRATA`` "
"is set, then **attr** must be NULL and **size** must be 0."
msgstr ""

#: ../../../userspace-api/landlock:450: security/landlock/syscalls.c:183
#: ../../../userspace-api/landlock:459: security/landlock/syscalls.c:397
#: ../../../userspace-api/landlock:469: security/landlock/syscalls.c:462
msgid "Possible returned errors are:"
msgstr ""

#: ../../../userspace-api/landlock:450: security/landlock/syscalls.c:185
#: ../../../userspace-api/landlock:459: security/landlock/syscalls.c:399
#: ../../../userspace-api/landlock:469: security/landlock/syscalls.c:464
msgid ""
"``EOPNOTSUPP``: Landlock is supported by the kernel but disabled at boot "
"time;"
msgstr ""

#: ../../../userspace-api/landlock:450: security/landlock/syscalls.c:186
msgid ""
"``EINVAL``: unknown **flags**, or unknown access, or unknown scope, or too "
"small **size**;"
msgstr ""

#: ../../../userspace-api/landlock:450: security/landlock/syscalls.c:187
msgid "``E2BIG``: **attr** or **size** inconsistencies;"
msgstr ""

#: ../../../userspace-api/landlock:450: security/landlock/syscalls.c:188
msgid "``EFAULT``: **attr** or **size** inconsistencies;"
msgstr ""

#: ../../../userspace-api/landlock:450: security/landlock/syscalls.c:189
msgid ""
"``ENOMSG``: empty :c:type:`landlock_ruleset_attr.handled_access_fs "
"<landlock_ruleset_attr>`."
msgstr ""

#: ../../../userspace-api/landlock:38: include/uapi/linux/landlock.h:73
#: ../../../userspace-api/landlock:39: include/uapi/linux/landlock.h:57
msgid "**Flags**"
msgstr ""

#: ../../../userspace-api/landlock:39: include/uapi/linux/landlock.h:60
msgid "Get the highest supported Landlock ABI version (starting at 1)."
msgstr ""

#: ../../../userspace-api/landlock:39: include/uapi/linux/landlock.h:63
msgid "Get a bitmask of fixed issues for the current Landlock ABI version."
msgstr ""

#: ../../../userspace-api/landlock:453: include/uapi/linux/landlock.h:16
msgid "Ruleset definition."
msgstr ""

#: ../../../userspace-api/landlock:453: include/uapi/linux/landlock.h:20
#: ../../../userspace-api/landlock:462: include/uapi/linux/landlock.h:150
#: include/uapi/linux/landlock.h:173
msgid "**Definition**::"
msgstr ""

#: ../../../userspace-api/landlock:453: include/uapi/linux/landlock.h:28
#: ../../../userspace-api/landlock:462: include/uapi/linux/landlock.h:157
#: include/uapi/linux/landlock.h:180
msgid "**Members**"
msgstr ""

#: ../../../userspace-api/landlock:453: include/uapi/linux/landlock.h:39
msgid "``handled_access_fs``"
msgstr ""

#: ../../../userspace-api/landlock:453: include/uapi/linux/landlock.h:40
msgid "Bitmask of handled filesystem actions (cf. `Filesystem flags`_)."
msgstr ""

#: ../../../userspace-api/landlock:453: include/uapi/linux/landlock.h:44
msgid "``handled_access_net``"
msgstr ""

#: ../../../userspace-api/landlock:453: include/uapi/linux/landlock.h:45
msgid "Bitmask of handled network actions (cf. `Network flags`_)."
msgstr ""

#: ../../../userspace-api/landlock:453: include/uapi/linux/landlock.h:49
msgid "``scoped``"
msgstr ""

#: ../../../userspace-api/landlock:453: include/uapi/linux/landlock.h:50
msgid ""
"Bitmask of scopes (cf. `Scope flags`_) restricting a Landlock domain from "
"accessing outside resources (e.g. IPCs)."
msgstr ""

#: ../../../userspace-api/landlock:453: include/uapi/linux/landlock.h:17
msgid "Argument of sys_landlock_create_ruleset()."
msgstr ""

#: ../../../userspace-api/landlock:453: include/uapi/linux/landlock.h:19
msgid ""
"This structure defines a set of *handled access rights*, a set of actions on "
"different object types, which should be denied by default when the ruleset "
"is enacted.  Vice versa, access rights that are not specifically listed here "
"are not going to be denied by this ruleset when it is enacted."
msgstr ""

#: ../../../userspace-api/landlock:453: include/uapi/linux/landlock.h:24
msgid ""
"For historical reasons, the ``LANDLOCK_ACCESS_FS_REFER`` right is always "
"denied by default, even when its bit is not set in **handled_access_fs**.  "
"In order to add new rules with this access right, the bit must still be set "
"explicitly (cf. `Filesystem flags`_)."
msgstr ""

#: ../../../userspace-api/landlock:453: include/uapi/linux/landlock.h:29
msgid ""
"The explicit listing of *handled access rights* is required for backwards "
"compatibility reasons.  In most use cases, processes that use Landlock will "
"*handle* a wide range or all access rights that they know about at build "
"time (and that they have tested with a kernel that supported them all)."
msgstr ""

#: ../../../userspace-api/landlock:453: include/uapi/linux/landlock.h:34
msgid "This structure can grow in future Landlock versions."
msgstr ""

#: ../../../userspace-api/landlock.rst:457
msgid "Extending a ruleset"
msgstr ""

#: ../../../userspace-api/landlock:459: security/landlock/syscalls.c:386
msgid "Add a new rule to a ruleset"
msgstr ""

#: ../../../userspace-api/landlock:459: security/landlock/syscalls.c:392
#: ../../../userspace-api/landlock:469: security/landlock/syscalls.c:455
msgid "``const int ruleset_fd``"
msgstr ""

#: ../../../userspace-api/landlock:459: security/landlock/syscalls.c:388
msgid ""
"File descriptor tied to the ruleset that should be extended with the new "
"rule."
msgstr ""

#: ../../../userspace-api/landlock:459: security/landlock/syscalls.c:391
msgid "``const enum landlock_rule_type rule_type``"
msgstr ""

#: ../../../userspace-api/landlock:459: security/landlock/syscalls.c:390
msgid ""
"Identify the structure type pointed to by **rule_attr**: "
"``LANDLOCK_RULE_PATH_BENEATH`` or ``LANDLOCK_RULE_NET_PORT``."
msgstr ""

#: ../../../userspace-api/landlock:459: security/landlock/syscalls.c:393
msgid "``const void __user *const rule_attr``"
msgstr ""

#: ../../../userspace-api/landlock:459: security/landlock/syscalls.c:392
msgid "Pointer to a rule (matching the **rule_type**)."
msgstr ""

#: ../../../userspace-api/landlock:459: security/landlock/syscalls.c:393
msgid "Must be 0."
msgstr ""

#: ../../../userspace-api/landlock:459: security/landlock/syscalls.c:394
msgid ""
"This system call enables to define a new rule and add it to an existing "
"ruleset."
msgstr ""

#: ../../../userspace-api/landlock:459: security/landlock/syscalls.c:400
msgid ""
"``EAFNOSUPPORT``: **rule_type** is ``LANDLOCK_RULE_NET_PORT`` but TCP/IP is "
"not supported by the running kernel;"
msgstr ""

#: ../../../userspace-api/landlock:459: security/landlock/syscalls.c:402
msgid "``EINVAL``: **flags** is not 0;"
msgstr ""

#: ../../../userspace-api/landlock:459: security/landlock/syscalls.c:403
msgid ""
"``EINVAL``: The rule accesses are inconsistent (i.e. :c:type:"
"`landlock_path_beneath_attr.allowed_access <landlock_path_beneath_attr>` or :"
"c:type:`landlock_net_port_attr.allowed_access <landlock_net_port_attr>` is "
"not a subset of the ruleset handled accesses)"
msgstr ""

#: ../../../userspace-api/landlock:459: security/landlock/syscalls.c:407
msgid ""
"``EINVAL``: :c:type:`landlock_net_port_attr.port <landlock_net_port_attr>` "
"is greater than 65535;"
msgstr ""

#: ../../../userspace-api/landlock:459: security/landlock/syscalls.c:408
msgid ""
"``ENOMSG``: Empty accesses (e.g. :c:type:`landlock_path_beneath_attr."
"allowed_access <landlock_path_beneath_attr>` is 0);"
msgstr ""

#: ../../../userspace-api/landlock:459: security/landlock/syscalls.c:410
msgid ""
"``EBADF``: **ruleset_fd** is not a file descriptor for the current thread, "
"or a member of **rule_attr** is not a file descriptor as expected;"
msgstr ""

#: ../../../userspace-api/landlock:459: security/landlock/syscalls.c:412
msgid ""
"``EBADFD``: **ruleset_fd** is not a ruleset file descriptor, or a member of "
"**rule_attr** is not the expected file descriptor type;"
msgstr ""

#: ../../../userspace-api/landlock:459: security/landlock/syscalls.c:414
msgid ""
"``EPERM``: **ruleset_fd** has no write access to the underlying ruleset;"
msgstr ""

#: ../../../userspace-api/landlock:459: security/landlock/syscalls.c:415
msgid "``EFAULT``: **rule_attr** was not a valid address."
msgstr ""

#: ../../../userspace-api/landlock:462: include/uapi/linux/landlock.h:128
msgid "Landlock rule type"
msgstr ""

#: ../../../userspace-api/landlock:462: include/uapi/linux/landlock.h:132
msgid "**Constants**"
msgstr ""

#: ../../../userspace-api/landlock:462: include/uapi/linux/landlock.h:134
msgid "``LANDLOCK_RULE_PATH_BENEATH``"
msgstr ""

#: ../../../userspace-api/landlock:462: include/uapi/linux/landlock.h:135
msgid ""
"Type of a :c:type:`struct landlock_path_beneath_attr "
"<landlock_path_beneath_attr>` ."
msgstr ""

#: ../../../userspace-api/landlock:462: include/uapi/linux/landlock.h:138
msgid "``LANDLOCK_RULE_NET_PORT``"
msgstr ""

#: ../../../userspace-api/landlock:462: include/uapi/linux/landlock.h:139
msgid ""
"Type of a :c:type:`struct landlock_net_port_attr <landlock_net_port_attr>` ."
msgstr ""

#: ../../../userspace-api/landlock:462: include/uapi/linux/landlock.h:129
#: include/uapi/linux/landlock.h:147 include/uapi/linux/landlock.h:170
msgid "Argument of sys_landlock_add_rule()."
msgstr ""

#: ../../../userspace-api/landlock:462: include/uapi/linux/landlock.h:146
msgid "Path hierarchy definition"
msgstr ""

#: ../../../userspace-api/landlock:462: include/uapi/linux/landlock.h:152
#: include/uapi/linux/landlock.h:175
msgid "``allowed_access``"
msgstr ""

#: ../../../userspace-api/landlock:462: include/uapi/linux/landlock.h:153
msgid ""
"Bitmask of allowed actions for this file hierarchy (cf. `Filesystem flags`_)."
msgstr ""

#: ../../../userspace-api/landlock:462: include/uapi/linux/landlock.h:157
msgid "``parent_fd``"
msgstr ""

#: ../../../userspace-api/landlock:462: include/uapi/linux/landlock.h:158
msgid ""
"File descriptor, preferably opened with ``O_PATH``, which identifies the "
"parent directory of a file hierarchy, or just a file."
msgstr ""

#: ../../../userspace-api/landlock:462: include/uapi/linux/landlock.h:169
msgid "Network port definition"
msgstr ""

#: ../../../userspace-api/landlock:462: include/uapi/linux/landlock.h:176
msgid "Bitmask of allowed network actions for a port (cf. `Network flags`_)."
msgstr ""

#: ../../../userspace-api/landlock:462: include/uapi/linux/landlock.h:180
msgid "``port``"
msgstr ""

#: ../../../userspace-api/landlock:462: include/uapi/linux/landlock.h:181
msgid "Network port in host endianness."
msgstr ""

#: ../../../userspace-api/landlock:462: include/uapi/linux/landlock.h:183
msgid ""
"It should be noted that port 0 passed to :manpage:`bind(2)` will bind to an "
"available port from the ephemeral port range.  This can be configured with "
"the ``/proc/sys/net/ipv4/ip_local_port_range`` sysctl (also used for IPv6)."
msgstr ""

#: ../../../userspace-api/landlock:462: include/uapi/linux/landlock.h:188
msgid ""
"A Landlock rule with port 0 and the ``LANDLOCK_ACCESS_NET_BIND_TCP`` right "
"means that requesting to bind on port 0 is allowed and it will automatically "
"translate to binding on the related port range."
msgstr ""

#: ../../../userspace-api/landlock.rst:467
msgid "Enforcing a ruleset"
msgstr ""

#: ../../../userspace-api/landlock:469: security/landlock/syscalls.c:449
msgid "Enforce a ruleset on the calling thread"
msgstr ""

#: ../../../userspace-api/landlock:469: security/landlock/syscalls.c:451
msgid "File descriptor tied to the ruleset to merge with the target."
msgstr ""

#: ../../../userspace-api/landlock:38: include/uapi/linux/landlock.h:89
#: ../../../userspace-api/landlock:469: security/landlock/syscalls.c:453
msgid "``LANDLOCK_RESTRICT_SELF_LOG_SAME_EXEC_OFF``"
msgstr ""

#: ../../../userspace-api/landlock:38: include/uapi/linux/landlock.h:99
#: ../../../userspace-api/landlock:469: security/landlock/syscalls.c:454
msgid "``LANDLOCK_RESTRICT_SELF_LOG_NEW_EXEC_ON``"
msgstr ""

#: ../../../userspace-api/landlock:38: include/uapi/linux/landlock.h:107
#: ../../../userspace-api/landlock:469: security/landlock/syscalls.c:455
msgid "``LANDLOCK_RESTRICT_SELF_LOG_SUBDOMAINS_OFF``"
msgstr ""

#: ../../../userspace-api/landlock:469: security/landlock/syscalls.c:457
msgid ""
"This system call enables to enforce a Landlock ruleset on the current "
"thread.  Enforcing a ruleset requires that the task has ``CAP_SYS_ADMIN`` in "
"its namespace or is running with no_new_privs.  This avoids scenarios where "
"unprivileged tasks can affect the behavior of privileged children."
msgstr ""

#: ../../../userspace-api/landlock:469: security/landlock/syscalls.c:465
msgid "``EINVAL``: **flags** contains an unknown bit."
msgstr ""

#: ../../../userspace-api/landlock:469: security/landlock/syscalls.c:466
msgid ""
"``EBADF``: **ruleset_fd** is not a file descriptor for the current thread;"
msgstr ""

#: ../../../userspace-api/landlock:469: security/landlock/syscalls.c:467
msgid "``EBADFD``: **ruleset_fd** is not a ruleset file descriptor;"
msgstr ""

#: ../../../userspace-api/landlock:469: security/landlock/syscalls.c:468
msgid ""
"``EPERM``: **ruleset_fd** has no read access to the underlying ruleset, or "
"the current thread is not running with no_new_privs, or it doesn't have "
"``CAP_SYS_ADMIN`` in its namespace."
msgstr ""

#: ../../../userspace-api/landlock:469: security/landlock/syscalls.c:471
msgid ""
"``E2BIG``: The maximum number of stacked rulesets is reached for the current "
"thread."
msgstr ""

#: ../../../userspace-api/landlock:38: include/uapi/linux/landlock.h:75
msgid ""
"By default, denied accesses originating from programs that sandbox "
"themselves are logged via the audit subsystem. Such events typically "
"indicate unexpected behavior, such as bugs or exploitation attempts. "
"However, to avoid excessive logging, access requests denied by a domain not "
"created by the originating program are not logged by default. The rationale "
"is that programs should know their own behavior, but not necessarily the "
"behavior of other programs.  This default configuration is suitable for most "
"programs that sandbox themselves. For specific use cases, the following "
"flags allow programs to modify this default logging behavior."
msgstr ""

#: ../../../userspace-api/landlock:38: include/uapi/linux/landlock.h:85
msgid ""
"The ``LANDLOCK_RESTRICT_SELF_LOG_SAME_EXEC_OFF`` and "
"``LANDLOCK_RESTRICT_SELF_LOG_NEW_EXEC_ON`` flags apply to the newly created "
"Landlock domain."
msgstr ""

#: ../../../userspace-api/landlock:38: include/uapi/linux/landlock.h:90
msgid ""
"Disables logging of denied accesses originating from the thread creating the "
"Landlock domain, as well as its children, as long as they continue running "
"the same executable code (i.e., without an intervening :manpage:`execve(2)` "
"call). This is intended for programs that execute unknown code without "
"invoking :manpage:`execve(2)`, such as script interpreters. Programs that "
"only sandbox themselves should not set this flag, so users can be notified "
"of unauthorized access attempts via system logs."
msgstr ""

#: ../../../userspace-api/landlock:38: include/uapi/linux/landlock.h:100
msgid ""
"Enables logging of denied accesses after an :manpage:`execve(2)` call, "
"providing visibility into unauthorized access attempts by newly executed "
"programs within the created Landlock domain. This flag is recommended only "
"when all potential executables in the domain are expected to comply with the "
"access restrictions, as excessive audit log entries could make it more "
"difficult to identify critical events."
msgstr ""

#: ../../../userspace-api/landlock:38: include/uapi/linux/landlock.h:108
msgid ""
"Disables logging of denied accesses originating from nested Landlock domains "
"created by the caller or its descendants. This flag should be set according "
"to runtime configuration, not hardcoded, to avoid suppressing important "
"security events. It is useful for container runtimes or sandboxing tools "
"that may launch programs which themselves create Landlock domains and could "
"otherwise generate excessive logs. Unlike "
"``LANDLOCK_RESTRICT_SELF_LOG_SAME_EXEC_OFF``, this flag only affects future "
"nested domains, not the one being created. It can also be used with a "
"**ruleset_fd** value of -1 to mute subdomain logs without creating a domain."
msgstr ""

#: ../../../userspace-api/landlock.rst:473
msgid "Current limitations"
msgstr ""

#: ../../../userspace-api/landlock.rst:476
msgid "Filesystem topology modification"
msgstr ""

#: ../../../userspace-api/landlock.rst:478
msgid ""
"Threads sandboxed with filesystem restrictions cannot modify filesystem "
"topology, whether via :manpage:`mount(2)` or :manpage:`pivot_root(2)`. "
"However, :manpage:`chroot(2)` calls are not denied."
msgstr ""

#: ../../../userspace-api/landlock.rst:483
msgid "Special filesystems"
msgstr ""

#: ../../../userspace-api/landlock.rst:485
msgid ""
"Access to regular files and directories can be restricted by Landlock, "
"according to the handled accesses of a ruleset.  However, files that do not "
"come from a user-visible filesystem (e.g. pipe, socket), but can still be "
"accessed through ``/proc/<pid>/fd/*``, cannot currently be explicitly "
"restricted.  Likewise, some special kernel filesystems such as nsfs, which "
"can be accessed through ``/proc/<pid>/ns/*``, cannot currently be explicitly "
"restricted.  However, thanks to the `ptrace restrictions`_, access to such "
"sensitive ``/proc`` files are automatically restricted according to domain "
"hierarchies.  Future Landlock evolutions could still enable to explicitly "
"restrict such paths with dedicated ruleset flags."
msgstr ""

#: ../../../userspace-api/landlock.rst:497
msgid "Ruleset layers"
msgstr ""

#: ../../../userspace-api/landlock.rst:499
msgid ""
"There is a limit of 16 layers of stacked rulesets.  This can be an issue for "
"a task willing to enforce a new ruleset in complement to its 16 inherited "
"rulesets.  Once this limit is reached, sys_landlock_restrict_self() returns "
"E2BIG.  It is then strongly suggested to carefully build rulesets once in "
"the life of a thread, especially for applications able to launch other "
"applications that may also want to sandbox themselves (e.g. shells, "
"container managers, etc.)."
msgstr ""

#: ../../../userspace-api/landlock.rst:508
msgid "Memory usage"
msgstr ""

#: ../../../userspace-api/landlock.rst:510
msgid ""
"Kernel memory allocated to create rulesets is accounted and can be "
"restricted by the Documentation/admin-guide/cgroup-v1/memory.rst."
msgstr ""

#: ../../../userspace-api/landlock.rst:514
msgid "IOCTL support"
msgstr ""

#: ../../../userspace-api/landlock.rst:516
msgid ""
"The ``LANDLOCK_ACCESS_FS_IOCTL_DEV`` right restricts the use of :manpage:"
"`ioctl(2)`, but it only applies to *newly opened* device files.  This means "
"specifically that pre-existing file descriptors like stdin, stdout and "
"stderr are unaffected."
msgstr ""

#: ../../../userspace-api/landlock.rst:521
msgid ""
"Users should be aware that TTY devices have traditionally permitted to "
"control other processes on the same TTY through the ``TIOCSTI`` and "
"``TIOCLINUX`` IOCTL commands.  Both of these require ``CAP_SYS_ADMIN`` on "
"modern Linux systems, but the behavior is configurable for ``TIOCSTI``."
msgstr ""

#: ../../../userspace-api/landlock.rst:526
msgid ""
"On older systems, it is therefore recommended to close inherited TTY file "
"descriptors, or to reopen them from ``/proc/self/fd/*`` without the "
"``LANDLOCK_ACCESS_FS_IOCTL_DEV`` right, if possible."
msgstr ""

#: ../../../userspace-api/landlock.rst:530
msgid ""
"Landlock's IOCTL support is coarse-grained at the moment, but may become "
"more fine-grained in the future.  Until then, users are advised to establish "
"the guarantees that they need through the file hierarchy, by only allowing "
"the ``LANDLOCK_ACCESS_FS_IOCTL_DEV`` right on files where it is really "
"required."
msgstr ""

#: ../../../userspace-api/landlock.rst:536
msgid "Previous limitations"
msgstr ""

#: ../../../userspace-api/landlock.rst:539
msgid "File renaming and linking (ABI < 2)"
msgstr ""

#: ../../../userspace-api/landlock.rst:541
msgid ""
"Because Landlock targets unprivileged access controls, it needs to properly "
"handle composition of rules.  Such property also implies rules nesting. "
"Properly handling multiple layers of rulesets, each one of them able to "
"restrict access to files, also implies inheritance of the ruleset "
"restrictions from a parent to its hierarchy.  Because files are identified "
"and restricted by their hierarchy, moving or linking a file from one "
"directory to another implies propagation of the hierarchy constraints, or "
"restriction of these actions according to the potentially lost constraints.  "
"To protect against privilege escalations through renaming or linking, and "
"for the sake of simplicity, Landlock previously limited linking and renaming "
"to the same directory. Starting with the Landlock ABI version 2, it is now "
"possible to securely control renaming and linking thanks to the new "
"``LANDLOCK_ACCESS_FS_REFER`` access right."
msgstr ""

#: ../../../userspace-api/landlock.rst:556
msgid "File truncation (ABI < 3)"
msgstr ""

#: ../../../userspace-api/landlock.rst:558
msgid ""
"File truncation could not be denied before the third Landlock ABI, so it is "
"always allowed when using a kernel that only supports the first or second "
"ABI."
msgstr ""

#: ../../../userspace-api/landlock.rst:561
msgid ""
"Starting with the Landlock ABI version 3, it is now possible to securely "
"control truncation thanks to the new ``LANDLOCK_ACCESS_FS_TRUNCATE`` access "
"right."
msgstr ""

#: ../../../userspace-api/landlock.rst:565
msgid "TCP bind and connect (ABI < 4)"
msgstr ""

#: ../../../userspace-api/landlock.rst:567
msgid ""
"Starting with the Landlock ABI version 4, it is now possible to restrict TCP "
"bind and connect actions to only a set of allowed ports thanks to the new "
"``LANDLOCK_ACCESS_NET_BIND_TCP`` and ``LANDLOCK_ACCESS_NET_CONNECT_TCP`` "
"access rights."
msgstr ""

#: ../../../userspace-api/landlock.rst:573
msgid "Device IOCTL (ABI < 5)"
msgstr ""

#: ../../../userspace-api/landlock.rst:575
msgid ""
"IOCTL operations could not be denied before the fifth Landlock ABI, so :"
"manpage:`ioctl(2)` is always allowed when using a kernel that only supports "
"an earlier ABI."
msgstr ""

#: ../../../userspace-api/landlock.rst:579
msgid ""
"Starting with the Landlock ABI version 5, it is possible to restrict the use "
"of :manpage:`ioctl(2)` on character and block devices using the new "
"``LANDLOCK_ACCESS_FS_IOCTL_DEV`` right."
msgstr ""

#: ../../../userspace-api/landlock.rst:584
msgid "Abstract UNIX socket (ABI < 6)"
msgstr ""

#: ../../../userspace-api/landlock.rst:586
msgid ""
"Starting with the Landlock ABI version 6, it is possible to restrict "
"connections to an abstract :manpage:`unix(7)` socket by setting "
"``LANDLOCK_SCOPE_ABSTRACT_UNIX_SOCKET`` to the ``scoped`` ruleset attribute."
msgstr ""

#: ../../../userspace-api/landlock.rst:591
msgid "Signal (ABI < 6)"
msgstr ""

#: ../../../userspace-api/landlock.rst:593
msgid ""
"Starting with the Landlock ABI version 6, it is possible to restrict :"
"manpage:`signal(7)` sending by setting ``LANDLOCK_SCOPE_SIGNAL`` to the "
"``scoped`` ruleset attribute."
msgstr ""

#: ../../../userspace-api/landlock.rst:598
msgid "Logging (ABI < 7)"
msgstr ""

#: ../../../userspace-api/landlock.rst:600
msgid ""
"Starting with the Landlock ABI version 7, it is possible to control logging "
"of Landlock audit events with the "
"``LANDLOCK_RESTRICT_SELF_LOG_SAME_EXEC_OFF``, "
"``LANDLOCK_RESTRICT_SELF_LOG_NEW_EXEC_ON``, and "
"``LANDLOCK_RESTRICT_SELF_LOG_SUBDOMAINS_OFF`` flags passed to "
"sys_landlock_restrict_self().  See Documentation/admin-guide/LSM/landlock."
"rst for more details on audit."
msgstr ""

#: ../../../userspace-api/landlock.rst:610
msgid "Kernel support"
msgstr ""

#: ../../../userspace-api/landlock.rst:613
msgid "Build time configuration"
msgstr ""

#: ../../../userspace-api/landlock.rst:615
msgid ""
"Landlock was first introduced in Linux 5.13 but it must be configured at "
"build time with ``CONFIG_SECURITY_LANDLOCK=y``.  Landlock must also be "
"enabled at boot time like other security modules.  The list of security "
"modules enabled by default is set with ``CONFIG_LSM``.  The kernel "
"configuration should then contain ``CONFIG_LSM=landlock,[...]`` with "
"``[...]``  as the list of other potentially useful security modules for the "
"running system (see the ``CONFIG_LSM`` help)."
msgstr ""

#: ../../../userspace-api/landlock.rst:624
msgid "Boot time configuration"
msgstr ""

#: ../../../userspace-api/landlock.rst:626
msgid ""
"If the running kernel does not have ``landlock`` in ``CONFIG_LSM``, then we "
"can enable Landlock by adding ``lsm=landlock,[...]`` to Documentation/admin-"
"guide/kernel-parameters.rst in the boot loader configuration."
msgstr ""

#: ../../../userspace-api/landlock.rst:631
msgid "For example, if the current built-in configuration is:"
msgstr ""

#: ../../../userspace-api/landlock.rst:638
msgid "...and if the cmdline doesn't contain ``landlock`` either:"
msgstr ""

#: ../../../userspace-api/landlock.rst:645
msgid ""
"...we should configure the boot loader to set a cmdline extending the "
"``lsm`` list with the ``landlock,`` prefix::"
msgstr ""

#: ../../../userspace-api/landlock.rst:650
msgid ""
"After a reboot, we can check that Landlock is up and running by looking at "
"kernel logs:"
msgstr ""

#: ../../../userspace-api/landlock.rst:661
msgid ""
"The kernel may be configured at build time to always load the ``lockdown`` "
"and ``capability`` LSMs.  In that case, these LSMs will appear at the "
"beginning of the ``LSM: initializing`` log line as well, even if they are "
"not configured in the boot loader."
msgstr ""

#: ../../../userspace-api/landlock.rst:667
msgid "Network support"
msgstr ""

#: ../../../userspace-api/landlock.rst:669
msgid ""
"To be able to explicitly allow TCP operations (e.g., adding a network rule "
"with ``LANDLOCK_ACCESS_NET_BIND_TCP``), the kernel must support TCP "
"(``CONFIG_INET=y``).  Otherwise, sys_landlock_add_rule() returns an "
"``EAFNOSUPPORT`` error, which can safely be ignored because this kind of TCP "
"operation is already not possible."
msgstr ""

#: ../../../userspace-api/landlock.rst:676
msgid "Questions and answers"
msgstr ""

#: ../../../userspace-api/landlock.rst:679
msgid "What about user space sandbox managers?"
msgstr ""

#: ../../../userspace-api/landlock.rst:681
msgid ""
"Using user space processes to enforce restrictions on kernel resources can "
"lead to race conditions or inconsistent evaluations (i.e. `Incorrect "
"mirroring of the OS code and state <https://www.ndss-symposium.org/ndss2003/"
"traps-and-pitfalls-practical-problems-system-call-interposition-based-"
"security-tools/>`_)."
msgstr ""

#: ../../../userspace-api/landlock.rst:687
msgid "What about namespaces and containers?"
msgstr ""

#: ../../../userspace-api/landlock.rst:689
msgid ""
"Namespaces can help create sandboxes but they are not designed for access-"
"control and then miss useful features for such use case (e.g. no fine-"
"grained restrictions).  Moreover, their complexity can lead to security "
"issues, especially when untrusted processes can manipulate them (cf. "
"`Controlling access to user namespaces <https://lwn.net/Articles/673597/>`_)."
msgstr ""

#: ../../../userspace-api/landlock.rst:696
msgid "How to disable Landlock audit records?"
msgstr ""

#: ../../../userspace-api/landlock.rst:698
msgid ""
"You might want to put in place filters as explained here: Documentation/"
"admin-guide/LSM/landlock.rst"
msgstr ""

#: ../../../userspace-api/landlock.rst:702
msgid "Additional documentation"
msgstr ""

#: ../../../userspace-api/landlock.rst:704
msgid "Documentation/admin-guide/LSM/landlock.rst"
msgstr ""

#: ../../../userspace-api/landlock.rst:705
msgid "Documentation/security/landlock.rst"
msgstr ""

#: ../../../userspace-api/landlock.rst:706
msgid "https://landlock.io"
msgstr ""
