# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:6
msgid "CEC Pin Framework Error Injection"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:8
msgid ""
"The CEC Pin Framework is a core CEC framework for CEC hardware that only has "
"low-level support for the CEC bus. Most hardware today will have high-level "
"CEC support where the hardware deals with driving the CEC bus, but some "
"older devices aren't that fancy. However, this framework also allows you to "
"connect the CEC pin to a GPIO on e.g. a Raspberry Pi and you have now made a "
"CEC adapter."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:15
msgid ""
"What makes doing this so interesting is that since we have full control over "
"the bus it is easy to support error injection. This is ideal to test how "
"well CEC adapters can handle error conditions."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:19
msgid ""
"Currently only the cec-gpio driver (when the CEC line is directly connected "
"to a pull-up GPIO line) and the AllWinner A10/A20 drm driver support this "
"framework."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:23
msgid ""
"If ``CONFIG_CEC_PIN_ERROR_INJ`` is enabled, then error injection is "
"available through debugfs. Specifically, in ``/sys/kernel/debug/cec/cecX/`` "
"there is now an ``error-inj`` file."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:29
msgid ""
"The error injection commands are not a stable ABI and may change in the "
"future."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:32
msgid ""
"With ``cat error-inj`` you can see both the possible commands and the "
"current error injection status::"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:87
msgid ""
"You can write error injection commands to ``error-inj`` using ``echo 'cmd' "
">error-inj`` or ``cat cmd.txt >error-inj``. The ``cat error-inj`` output "
"contains the current error commands. You can save the output to a file and "
"use it as an input to ``error-inj`` later."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:93
msgid "Basic Syntax"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:95
msgid ""
"Leading spaces/tabs are ignored. If the next character is a ``#`` or the end "
"of the line was reached, then the whole line is ignored. Otherwise a command "
"is expected."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:99
msgid ""
"The error injection commands fall in two main groups: those relating to "
"receiving CEC messages and those relating to transmitting CEC messages. In "
"addition, there are commands to clear existing error injection commands and "
"to create custom pulses on the CEC bus."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:104
msgid ""
"Most error injection commands can be executed for specific CEC opcodes or "
"for all opcodes (``any``). Each command also has a 'mode' which can be "
"``off`` (can be used to turn off an existing error injection command), "
"``once`` (the default) which will trigger the error injection only once for "
"the next received or transmitted message, ``always`` to always trigger the "
"error injection and ``toggle`` to toggle the error injection on or off for "
"every transmit or receive."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:112
msgid ""
"So '``any rx-nack``' will NACK the next received CEC message, '``any,always "
"rx-nack``' will NACK all received CEC messages and '``0x82,toggle rx-nack``' "
"will only NACK if an Active Source message was received and do that only for "
"every other received message."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:117
msgid ""
"After an error was injected with mode ``once`` the error injection command "
"is cleared automatically, so ``once`` is a one-time deal."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:120
msgid ""
"All combinations of ``<op>`` and error injection commands can co-exist. So "
"this is fine::"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:128
msgid "All four error injection commands will be active simultaneously."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:130
msgid ""
"However, if the same ``<op>`` and command combination is specified, but with "
"different arguments::"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:136
msgid "Then the second will overwrite the first."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:139
msgid "Clear Error Injections"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:141
msgid "``clear``"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:142
msgid "Clear all error injections."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:144
msgid "``rx-clear``"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:145
msgid "Clear all receive error injections"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:147
msgid "``tx-clear``"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:148
msgid "Clear all transmit error injections"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:150
msgid "``<op> clear``"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:151
msgid "Clear all error injections for the given opcode."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:153
msgid "``<op> rx-clear``"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:154
msgid "Clear all receive error injections for the given opcode."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:156
msgid "``<op> tx-clear``"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:157
msgid "Clear all transmit error injections for the given opcode."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:160
msgid "Receive Messages"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:162
msgid "``<op>[,<mode>] rx-nack``"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:163
msgid ""
"NACK broadcast messages and messages directed to this CEC adapter. Every "
"byte of the message will be NACKed in case the transmitter keeps "
"transmitting after the first byte was NACKed."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:167
msgid "``<op>[,<mode>] rx-low-drive <bit>``"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:168
msgid ""
"Force a Low Drive condition at this bit position. If <op> specifies a "
"specific CEC opcode then the bit position must be at least 18, otherwise the "
"opcode hasn't been received yet. This tests if the transmitter can handle "
"the Low Drive condition correctly and reports the error correctly. Note that "
"a Low Drive in the first 4 bits can also be interpreted as an Arbitration "
"Lost condition by the transmitter. This is implementation dependent."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:176
msgid "``<op>[,<mode>] rx-add-byte``"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:177
msgid ""
"Add a spurious 0x55 byte to the received CEC message, provided the message "
"was 15 bytes long or less. This is useful to test the high-level protocol "
"since spurious bytes should be ignored."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:181
msgid "``<op>[,<mode>] rx-remove-byte``"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:182
msgid ""
"Remove the last byte from the received CEC message, provided it was at least "
"2 bytes long. This is useful to test the high-level protocol since messages "
"that are too short should be ignored."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:186
msgid "``<op>[,<mode>] rx-arb-lost <poll>``"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:187
msgid ""
"Generate a POLL message to trigger an Arbitration Lost condition. This "
"command is only allowed for ``<op>`` values of ``next`` or ``all``. As soon "
"as a start bit has been received the CEC adapter will switch to transmit "
"mode and it will transmit a POLL message. By default this is 0x0f, but it "
"can also be specified explicitly via the ``<poll>`` argument."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:193
msgid ""
"This command can be used to test the Arbitration Lost condition in the "
"remote CEC transmitter. Arbitration happens when two CEC adapters start "
"sending a message at the same time. In that case the initiator with the most "
"leading zeroes wins and the other transmitter has to stop transmitting "
"('Arbitration Lost'). This is very hard to test, except by using this error "
"injection command."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:200
msgid ""
"This does not work if the remote CEC transmitter has logical address 0 "
"('TV') since that will always win."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:203
msgid "``rx-no-low-drive``"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:204
msgid ""
"The receiver will ignore situations that would normally generate a Low Drive "
"pulse (3.6 ms). This is typically done if a spurious pulse is detected when "
"receiving a message, and it indicates to the transmitter that the message "
"has to be retransmitted since the receiver got confused. Disabling this is "
"useful to test how other CEC devices handle glitches by ensuring we will not "
"be the one that generates a Low Drive."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:212
msgid "Transmit Messages"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:214
msgid "``tx-ignore-nack-until-eom``"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:215
msgid ""
"This setting changes the behavior of transmitting CEC messages. Normally as "
"soon as the receiver NACKs a byte the transmit will stop, but the "
"specification also allows that the full message is transmitted and only at "
"the end will the transmitter look at the ACK bit. This is not recommended "
"behavior since there is no point in keeping the CEC bus busy for longer than "
"is strictly needed. Especially given how slow the bus is."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:222
msgid ""
"This setting can be used to test how well a receiver deals with transmitters "
"that ignore NACKs until the very end of the message."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:225
msgid "``<op>[,<mode>] tx-no-eom``"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:226
msgid ""
"Don't set the EOM bit. Normally the last byte of the message has the EOM "
"(End-Of-Message) bit set. With this command the transmit will just stop "
"without ever sending an EOM. This can be used to test how a receiver handles "
"this case. Normally receivers have a time-out after which they will go back "
"to the Idle state."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:232
msgid "``<op>[,<mode>] tx-early-eom``"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:233
msgid ""
"Set the EOM bit one byte too soon. This obviously only works for messages of "
"two bytes or more. The EOM bit will be set for the second-to-last byte and "
"not for the final byte. The receiver should ignore the last byte in this "
"case. Since the resulting message is likely to be too short for this same "
"reason the whole message is typically ignored. The receiver should be in "
"Idle state after the last byte was transmitted."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:240
msgid "``<op>[,<mode>] tx-add-bytes <num>``"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:241
msgid ""
"Append ``<num>`` (1-255) spurious bytes to the message. The extra bytes have "
"the value of the byte position in the message. So if you transmit a two byte "
"message (e.g. a Get CEC Version message) and add 2 bytes, then the full "
"message received by the remote CEC adapter is ``0x40 0x9f 0x02 0x03``."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:247
msgid ""
"This command can be used to test buffer overflows in the receiver. E.g. what "
"does it do when it receives more than the maximum message size of 16 bytes."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:251
msgid "``<op>[,<mode>] tx-remove-byte``"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:252
msgid ""
"Drop the last byte from the message, provided the message is at least two "
"bytes long. The receiver should ignore messages that are too short."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:255
msgid "``<op>[,<mode>] tx-short-bit <bit>``"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:256
msgid ""
"Make this bit period shorter than allowed. The bit position cannot be an Ack "
"bit.  If <op> specifies a specific CEC opcode then the bit position must be "
"at least 18, otherwise the opcode hasn't been received yet. Normally the "
"period of a data bit is between 2.05 and 2.75 milliseconds. With this "
"command the period of this bit is 1.8 milliseconds, this is done by reducing "
"the time the CEC bus is high. This bit period is less than is allowed and "
"the receiver should respond with a Low Drive condition."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:265
msgid ""
"This command is ignored for 0 bits in bit positions 0 to 3. This is because "
"the receiver also looks for an Arbitration Lost condition in those first "
"four bits and it is undefined what will happen if it sees a too-short 0 bit."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:270
msgid "``<op>[,<mode>] tx-long-bit <bit>``"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:271
msgid ""
"Make this bit period longer than is valid. The bit position cannot be an Ack "
"bit.  If <op> specifies a specific CEC opcode then the bit position must be "
"at least 18, otherwise the opcode hasn't been received yet. Normally the "
"period of a data bit is between 2.05 and 2.75 milliseconds. With this "
"command the period of this bit is 2.9 milliseconds, this is done by "
"increasing the time the CEC bus is high."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:278
msgid ""
"Even though this bit period is longer than is valid it is undefined what a "
"receiver will do. It might just accept it, or it might time out and return "
"to Idle state. Unfortunately the CEC specification is silent about this."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:283
msgid ""
"This command is ignored for 0 bits in bit positions 0 to 3. This is because "
"the receiver also looks for an Arbitration Lost condition in those first "
"four bits and it is undefined what will happen if it sees a too-long 0 bit."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:288
msgid "``<op>[,<mode>] tx-short-start``"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:289
msgid ""
"Make this start bit period shorter than allowed. Normally the period of a "
"start bit is between 4.3 and 4.7 milliseconds. With this command the period "
"of the start bit is 4.1 milliseconds, this is done by reducing the time the "
"CEC bus is high. This start bit period is less than is allowed and the "
"receiver should return to Idle state when this is detected."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:295
msgid "``<op>[,<mode>] tx-long-start``"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:296
msgid ""
"Make this start bit period longer than is valid. Normally the period of a "
"start bit is between 4.3 and 4.7 milliseconds. With this command the period "
"of the start bit is 5 milliseconds, this is done by increasing the time the "
"CEC bus is high. This start bit period is more than is valid and the "
"receiver should return to Idle state when this is detected."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:302
msgid ""
"Even though this start bit period is longer than is valid it is undefined "
"what a receiver will do. It might just accept it, or it might time out and "
"return to Idle state. Unfortunately the CEC specification is silent about "
"this."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:307
msgid "``<op>[,<mode>] tx-last-bit <bit>``"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:308
msgid ""
"Just stop transmitting after this bit.  If <op> specifies a specific CEC "
"opcode then the bit position must be at least 18, otherwise the opcode "
"hasn't been received yet. This command can be used to test how the receiver "
"reacts when a message just suddenly stops. It should time out and go back to "
"Idle state."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:314
msgid "``<op>[,<mode>] tx-low-drive <bit>``"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:315
msgid ""
"Force a Low Drive condition at this bit position. If <op> specifies a "
"specific CEC opcode then the bit position must be at least 18, otherwise the "
"opcode hasn't been received yet. This can be used to test how the receiver "
"handles Low Drive conditions. Note that if this happens at bit positions 0-3 "
"the receiver can interpret this as an Arbitration Lost condition. This is "
"implementation dependent."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:323
msgid "Custom Pulses"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:325
msgid "``tx-custom-low-usecs <usecs>``"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:326
msgid ""
"This defines the duration in microseconds that the custom pulse pulls the "
"CEC line low. The default is 1000 microseconds."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:329
msgid "``tx-custom-high-usecs <usecs>``"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:330
msgid ""
"This defines the duration in microseconds that the custom pulse keeps the "
"CEC line high (unless another CEC adapter pulls it low in that time). The "
"default is 1000 microseconds. The total period of the custom pulse is ``tx-"
"custom-low-usecs + tx-custom-high-usecs``."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:335
msgid "``<op>[,<mode>] tx-custom-bit <bit>``"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:336
msgid ""
"Send the custom bit instead of a regular data bit. The bit position cannot "
"be an Ack bit.  If <op> specifies a specific CEC opcode then the bit "
"position must be at least 18, otherwise the opcode hasn't been received yet."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:340
msgid "``<op>[,<mode>] tx-custom-start``"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:341
msgid "Send the custom bit instead of a regular start bit."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:343
msgid "``tx-custom-pulse``"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:344
msgid "Transmit a single custom pulse as soon as the CEC bus is idle."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:347
msgid "Glitch Pulses"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:349
msgid ""
"This emulates what happens if the signal on the CEC line is seeing spurious "
"pulses. Typically this happens after the falling or rising edge where there "
"is a short voltage fluctuation that, if the CEC hardware doesn't do "
"deglitching, can be seen as a spurious pulse and can cause a Low Drive "
"condition or corrupt data."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:355
msgid "``tx-glitch-low-usecs <usecs>``"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:356
msgid ""
"This defines the duration in microseconds that the glitch pulse pulls the "
"CEC line low. The default is 1 microsecond. The range is 0-100 microseconds. "
"If 0, then no glitch pulse will be generated."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:360
msgid "``tx-glitch-high-usecs <usecs>``"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:361
msgid ""
"This defines the duration in microseconds that the glitch pulse keeps the "
"CEC line high (unless another CEC adapter pulls it low in that time). The "
"default is 1 microseconds. The range is 0-100 microseconds. If 0, then no "
"glitch pulse will be generated.The total period of the glitch pulse is ``tx-"
"custom-low-usecs + tx-custom-high-usecs``."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:367
msgid "``tx-glitch-falling-edge``"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:368
msgid "Send the glitch pulse right after the falling edge."
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:370
msgid "``tx-glitch-rising-edge``"
msgstr ""

#: ../../../userspace-api/media/cec/cec-pin-error-inj.rst:371
msgid "Send the glitch pulse right after the rising edge."
msgstr ""
