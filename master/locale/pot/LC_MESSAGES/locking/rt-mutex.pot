# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../locking/rt-mutex.rst:3
msgid "RT-mutex subsystem with PI support"
msgstr ""

#: ../../../locking/rt-mutex.rst:5
msgid ""
"RT-mutexes with priority inheritance are used to support PI-futexes, which "
"enable pthread_mutex_t priority inheritance attributes "
"(PTHREAD_PRIO_INHERIT). [See Documentation/locking/pi-futex.rst for more "
"details about PI-futexes.]"
msgstr ""

#: ../../../locking/rt-mutex.rst:10
msgid ""
"This technology was developed in the -rt tree and streamlined for "
"pthread_mutex support."
msgstr ""

#: ../../../locking/rt-mutex.rst:14
msgid "Basic principles:"
msgstr ""

#: ../../../locking/rt-mutex.rst:16
msgid ""
"RT-mutexes extend the semantics of simple mutexes by the priority "
"inheritance protocol."
msgstr ""

#: ../../../locking/rt-mutex.rst:19
msgid ""
"A low priority owner of a rt-mutex inherits the priority of a higher "
"priority waiter until the rt-mutex is released. If the temporarily boosted "
"owner blocks on a rt-mutex itself it propagates the priority boosting to the "
"owner of the other rt_mutex it gets blocked on. The priority boosting is "
"immediately removed once the rt_mutex has been unlocked."
msgstr ""

#: ../../../locking/rt-mutex.rst:26
msgid ""
"This approach allows us to shorten the block of high-prio tasks on mutexes "
"which protect shared resources. Priority inheritance is not a magic bullet "
"for poorly designed applications, but it allows well-designed applications "
"to use userspace locks in critical parts of an high priority thread, without "
"losing determinism."
msgstr ""

#: ../../../locking/rt-mutex.rst:32
msgid ""
"The enqueueing of the waiters into the rtmutex waiter tree is done in "
"priority order. For same priorities FIFO order is chosen. For each rtmutex, "
"only the top priority waiter is enqueued into the owner's priority waiters "
"tree. This tree too queues in priority order. Whenever the top priority "
"waiter of a task changes (for example it timed out or got a signal), the "
"priority of the owner task is readjusted. The priority enqueueing is handled "
"by \"pi_waiters\"."
msgstr ""

#: ../../../locking/rt-mutex.rst:40
msgid ""
"RT-mutexes are optimized for fastpath operations and have no internal "
"locking overhead when locking an uncontended mutex or unlocking a mutex "
"without waiters. The optimized fastpath operations require cmpxchg support. "
"[If that is not available then the rt-mutex internal spinlock is used]"
msgstr ""

#: ../../../locking/rt-mutex.rst:46
msgid ""
"The state of the rt-mutex is tracked via the owner field of the rt-mutex "
"structure:"
msgstr ""

#: ../../../locking/rt-mutex.rst:49
msgid ""
"lock->owner holds the task_struct pointer of the owner. Bit 0 is used to "
"keep track of the \"lock has waiters\" state:"
msgstr ""

#: ../../../locking/rt-mutex.rst:53
msgid "owner"
msgstr ""

#: ../../../locking/rt-mutex.rst:53
msgid "bit0"
msgstr ""

#: ../../../locking/rt-mutex.rst:53
msgid "Notes"
msgstr ""

#: ../../../locking/rt-mutex.rst:55 ../../../locking/rt-mutex.rst:56
msgid "NULL"
msgstr ""

#: ../../../locking/rt-mutex.rst:55 ../../../locking/rt-mutex.rst:58
msgid "0"
msgstr ""

#: ../../../locking/rt-mutex.rst:55
msgid "lock is free (fast acquire possible)"
msgstr ""

#: ../../../locking/rt-mutex.rst:56 ../../../locking/rt-mutex.rst:59
msgid "1"
msgstr ""

#: ../../../locking/rt-mutex.rst:56
msgid ""
"lock is free and has waiters and the top waiter is going to take the lock "
"[1]_"
msgstr ""

#: ../../../locking/rt-mutex.rst:58 ../../../locking/rt-mutex.rst:59
msgid "taskpointer"
msgstr ""

#: ../../../locking/rt-mutex.rst:58
msgid "lock is held (fast release possible)"
msgstr ""

#: ../../../locking/rt-mutex.rst:59
msgid "lock is held and has waiters [2]_"
msgstr ""

#: ../../../locking/rt-mutex.rst:62
msgid ""
"The fast atomic compare exchange based acquire and release is only possible "
"when bit 0 of lock->owner is 0."
msgstr ""

#: ../../../locking/rt-mutex.rst:65
msgid ""
"It also can be a transitional state when grabbing the lock with ->wait_lock "
"is held. To prevent any fast path cmpxchg to the lock, we need to set the "
"bit0 before looking at the lock, and the owner may be NULL in this small "
"time, hence this can be a transitional state."
msgstr ""

#: ../../../locking/rt-mutex.rst:70
msgid ""
"There is a small time when bit 0 is set but there are no waiters. This can "
"happen when grabbing the lock in the slow path. To prevent a cmpxchg of the "
"owner releasing the lock, we need to set this bit before looking at the lock."
msgstr ""

#: ../../../locking/rt-mutex.rst:75
msgid ""
"BTW, there is still technically a \"Pending Owner\", it's just not called "
"that anymore. The pending owner happens to be the top_waiter of a lock that "
"has no owner and has been woken up to grab the lock."
msgstr ""
