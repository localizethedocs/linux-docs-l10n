# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../locking/locktorture.rst:3
msgid "Kernel Lock Torture Test Operation"
msgstr ""

#: ../../../locking/locktorture.rst:6
msgid "CONFIG_LOCK_TORTURE_TEST"
msgstr ""

#: ../../../locking/locktorture.rst:8
msgid ""
"The CONFIG_LOCK_TORTURE_TEST config option provides a kernel module that "
"runs torture tests on core kernel locking primitives. The kernel module, "
"'locktorture', may be built after the fact on the running kernel to be "
"tested, if desired. The tests periodically output status messages via "
"printk(), which can be examined via the dmesg (perhaps grepping for "
"\"torture\").  The test is started when the module is loaded, and stops when "
"the module is unloaded. This program is based on how RCU is tortured, via "
"rcutorture."
msgstr ""

#: ../../../locking/locktorture.rst:17
msgid ""
"This torture test consists of creating a number of kernel threads which "
"acquire the lock and hold it for specific amount of time, thus simulating "
"different critical region behaviors. The amount of contention on the lock "
"can be simulated by either enlarging this critical region hold time and/or "
"creating more kthreads."
msgstr ""

#: ../../../locking/locktorture.rst:25
msgid "Module Parameters"
msgstr ""

#: ../../../locking/locktorture.rst:27
msgid "This module has the following parameters:"
msgstr ""

#: ../../../locking/locktorture.rst:31
msgid "Locktorture-specific"
msgstr ""

#: ../../../locking/locktorture.rst:33
msgid "nwriters_stress"
msgstr ""

#: ../../../locking/locktorture.rst:34
msgid ""
"Number of kernel threads that will stress exclusive lock ownership "
"(writers). The default value is twice the number of online CPUs."
msgstr ""

#: ../../../locking/locktorture.rst:38
msgid "nreaders_stress"
msgstr ""

#: ../../../locking/locktorture.rst:39
msgid ""
"Number of kernel threads that will stress shared lock ownership (readers). "
"The default is the same amount of writer locks. If the user did not specify "
"nwriters_stress, then both readers and writers be the amount of online CPUs."
msgstr ""

#: ../../../locking/locktorture.rst:44
msgid "torture_type"
msgstr ""

#: ../../../locking/locktorture.rst:45
msgid ""
"Type of lock to torture. By default, only spinlocks will be tortured. This "
"module can torture the following locks, with string values as follows:"
msgstr ""

#: ../../../locking/locktorture.rst:49
msgid "\"lock_busted\":"
msgstr ""

#: ../../../locking/locktorture.rst:50
msgid "Simulates a buggy lock implementation."
msgstr ""

#: ../../../locking/locktorture.rst:52
msgid "\"spin_lock\":"
msgstr ""

#: ../../../locking/locktorture.rst:53
msgid "spin_lock() and spin_unlock() pairs."
msgstr ""

#: ../../../locking/locktorture.rst:55
msgid "\"spin_lock_irq\":"
msgstr ""

#: ../../../locking/locktorture.rst:56
msgid "spin_lock_irq() and spin_unlock_irq() pairs."
msgstr ""

#: ../../../locking/locktorture.rst:58
msgid "\"rw_lock\":"
msgstr ""

#: ../../../locking/locktorture.rst:59
msgid "read/write lock() and unlock() rwlock pairs."
msgstr ""

#: ../../../locking/locktorture.rst:61
msgid "\"rw_lock_irq\":"
msgstr ""

#: ../../../locking/locktorture.rst:62
msgid "read/write lock_irq() and unlock_irq() rwlock pairs."
msgstr ""

#: ../../../locking/locktorture.rst:65
msgid "\"mutex_lock\":"
msgstr ""

#: ../../../locking/locktorture.rst:66
msgid "mutex_lock() and mutex_unlock() pairs."
msgstr ""

#: ../../../locking/locktorture.rst:68
msgid "\"rtmutex_lock\":"
msgstr ""

#: ../../../locking/locktorture.rst:69
msgid ""
"rtmutex_lock() and rtmutex_unlock() pairs. Kernel must have "
"CONFIG_RT_MUTEXES=y."
msgstr ""

#: ../../../locking/locktorture.rst:72
msgid "\"rwsem_lock\":"
msgstr ""

#: ../../../locking/locktorture.rst:73
msgid "read/write down() and up() semaphore pairs."
msgstr ""

#: ../../../locking/locktorture.rst:77
msgid "Torture-framework (RCU + locking)"
msgstr ""

#: ../../../locking/locktorture.rst:79
msgid "shutdown_secs"
msgstr ""

#: ../../../locking/locktorture.rst:80
msgid ""
"The number of seconds to run the test before terminating the test and "
"powering off the system.  The default is zero, which disables test "
"termination and system shutdown. This capability is useful for automated "
"testing."
msgstr ""

#: ../../../locking/locktorture.rst:85
msgid "onoff_interval"
msgstr ""

#: ../../../locking/locktorture.rst:86
msgid ""
"The number of seconds between each attempt to execute a randomly selected "
"CPU-hotplug operation.  Defaults to zero, which disables CPU hotplugging.  "
"In CONFIG_HOTPLUG_CPU=n kernels, locktorture will silently refuse to do any "
"CPU-hotplug operations regardless of what value is specified for "
"onoff_interval."
msgstr ""

#: ../../../locking/locktorture.rst:93
msgid "onoff_holdoff"
msgstr ""

#: ../../../locking/locktorture.rst:94
msgid ""
"The number of seconds to wait until starting CPU-hotplug operations.  This "
"would normally only be used when locktorture was built into the kernel and "
"started automatically at boot time, in which case it is useful in order to "
"avoid confusing boot-time code with CPUs coming and going. This parameter is "
"only useful if CONFIG_HOTPLUG_CPU is enabled."
msgstr ""

#: ../../../locking/locktorture.rst:102
msgid "stat_interval"
msgstr ""

#: ../../../locking/locktorture.rst:103
msgid ""
"Number of seconds between statistics-related printk()s. By default, "
"locktorture will report stats every 60 seconds. Setting the interval to zero "
"causes the statistics to be printed -only- when the module is unloaded."
msgstr ""

#: ../../../locking/locktorture.rst:108
msgid "stutter"
msgstr ""

#: ../../../locking/locktorture.rst:109
msgid ""
"The length of time to run the test before pausing for this same period of "
"time.  Defaults to \"stutter=5\", so as to run and pause for (roughly) five-"
"second intervals. Specifying \"stutter=0\" causes the test to run "
"continuously without pausing."
msgstr ""

#: ../../../locking/locktorture.rst:115
msgid "shuffle_interval"
msgstr ""

#: ../../../locking/locktorture.rst:116
msgid ""
"The number of seconds to keep the test threads affinitized to a particular "
"subset of the CPUs, defaults to 3 seconds. Used in conjunction with "
"test_no_idle_hz."
msgstr ""

#: ../../../locking/locktorture.rst:120
msgid "verbose"
msgstr ""

#: ../../../locking/locktorture.rst:121
msgid ""
"Enable verbose debugging printing, via printk(). Enabled by default. This "
"extra information is mostly related to high-level errors and reports from "
"the main 'torture' framework."
msgstr ""

#: ../../../locking/locktorture.rst:128
msgid "Statistics"
msgstr ""

#: ../../../locking/locktorture.rst:130
msgid "Statistics are printed in the following format::"
msgstr ""

#: ../../../locking/locktorture.rst:151
msgid "Usage"
msgstr ""

#: ../../../locking/locktorture.rst:153
msgid "The following script may be used to torture locks::"
msgstr ""

#: ../../../locking/locktorture.rst:162
msgid ""
"The output can be manually inspected for the error flag of \"!!!\". One "
"could of course create a more elaborate script that automatically checked "
"for such errors.  The \"rmmod\" command forces a \"SUCCESS\", \"FAILURE\", "
"or \"RCU_HOTPLUG\" indication to be printk()ed.  The first two are self-"
"explanatory, while the last indicates that while there were no locking "
"failures, CPU-hotplug problems were detected."
msgstr ""

#: ../../../locking/locktorture.rst:169
msgid "Also see: Documentation/RCU/torture.rst"
msgstr ""
