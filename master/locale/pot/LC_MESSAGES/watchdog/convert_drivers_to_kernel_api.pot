# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:3
msgid "Converting old watchdog drivers to the watchdog framework"
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:5
msgid "by Wolfram Sang <wsa@kernel.org>"
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:7
msgid ""
"Before the watchdog framework came into the kernel, every driver had to "
"implement the API on its own. Now, as the framework factored out the common "
"components, those drivers can be lightened making it a user of the "
"framework. This document shall guide you for this task. The necessary steps "
"are described as well as things to look out for."
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:15
msgid "Remove the file_operations struct"
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:17
msgid ""
"Old drivers define their own file_operations for actions like open(), "
"write(), etc... These are now handled by the framework and just call the "
"driver when needed. So, in general, the 'file_operations' struct and "
"assorted functions can go. Only very few driver-specific details have to be "
"moved to other functions. Here is a overview of the functions and probably "
"needed actions:"
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:23
msgid ""
"open: Everything dealing with resource management (file-open checks, magic "
"close preparations) can simply go. Device specific stuff needs to go to the "
"driver specific start-function. Note that for some drivers, the start-"
"function also serves as the ping-function. If that is the case and you need "
"start/stop to be balanced (clocks!), you are better off refactoring a "
"separate start-function."
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:29
msgid "close: Same hints as for open apply."
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:31
msgid ""
"write: Can simply go, all defined behaviour is taken care of by the "
"framework, i.e. ping on write and magic char ('V') handling."
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:34
msgid ""
"ioctl: While the driver is allowed to have extensions to the IOCTL "
"interface, the most common ones are handled by the framework, supported by "
"some assistance from the driver:"
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:38
msgid "WDIOC_GETSUPPORT:"
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:39
msgid "Returns the mandatory watchdog_info struct from the driver"
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:41
msgid "WDIOC_GETSTATUS:"
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:42
msgid "Needs the status-callback defined, otherwise returns 0"
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:44
msgid "WDIOC_GETBOOTSTATUS:"
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:45
msgid ""
"Needs the bootstatus member properly set. Make sure it is 0 if you don't "
"have further support!"
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:48
msgid "WDIOC_SETOPTIONS:"
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:49
#: ../../../watchdog/convert_drivers_to_kernel_api.rst:62
msgid "No preparations needed"
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:51
msgid "WDIOC_KEEPALIVE:"
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:52
msgid ""
"If wanted, options in watchdog_info need to have WDIOF_KEEPALIVEPING set"
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:55
msgid "WDIOC_SETTIMEOUT:"
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:56
msgid ""
"Options in watchdog_info need to have WDIOF_SETTIMEOUT set and a set_timeout-"
"callback has to be defined. The core will also do limit-checking, if "
"min_timeout and max_timeout in the watchdog device are set. All is optional."
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:61
msgid "WDIOC_GETTIMEOUT:"
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:64
msgid "WDIOC_GETTIMELEFT:"
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:65
msgid ""
"It needs get_timeleft() callback to be defined. Otherwise it will return "
"EOPNOTSUPP"
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:68
msgid ""
"Other IOCTLs can be served using the ioctl-callback. Note that this is "
"mainly intended for porting old drivers; new drivers should not invent "
"private IOCTLs. Private IOCTLs are processed first. When the callback "
"returns with -ENOIOCTLCMD, the IOCTLs of the framework will be tried, too. "
"Any other error is directly given to the user."
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:74
msgid "Example conversion::"
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:84
msgid ""
"Check the functions for device-specific stuff and keep it for later "
"refactoring. The rest can go."
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:89
msgid "Remove the miscdevice"
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:91
msgid ""
"Since the file_operations are gone now, you can also remove the 'struct "
"miscdevice'. The framework will create it on watchdog_dev_register() called "
"by watchdog_register_device()::"
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:103
msgid "Remove obsolete includes and defines"
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:105
msgid ""
"Because of the simplifications, a few defines are probably unused now. "
"Remove them. Includes can be removed, too. For example::"
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:114
msgid "Add the watchdog operations"
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:116
msgid ""
"All possible callbacks are defined in 'struct watchdog_ops'. You can find it "
"explained in 'watchdog-kernel-api.txt' in this directory. start() and owner "
"must be set, the rest are optional. You will easily find corresponding "
"functions in the old driver. Note that you will now get a pointer to the "
"watchdog_device as a parameter to these functions, so you probably have to "
"change the function header. Other changes are most likely not needed, "
"because here simply happens the direct hardware access. If you have device-"
"specific code left from the above steps, it should be refactored into these "
"callbacks."
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:125
msgid "Here is a simple example::"
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:135
msgid "A typical function-header change looks like::"
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:152
msgid "Add the watchdog device"
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:154
msgid ""
"Now we need to create a 'struct watchdog_device' and populate it with the "
"necessary information for the framework. The struct is also explained in "
"detail in 'watchdog-kernel-api.txt' in this directory. We pass it the "
"mandatory watchdog_info struct and the newly created watchdog_ops. Often, "
"old drivers have their own record-keeping for things like bootstatus and "
"timeout using static variables. Those have to be converted to use the "
"members in watchdog_device. Note that the timeout values are unsigned int. "
"Some drivers use signed int, so this has to be converted, too."
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:163
msgid "Here is a simple example for a watchdog device::"
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:172
msgid "Handle the 'nowayout' feature"
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:174
msgid ""
"A few drivers use nowayout statically, i.e. there is no module parameter for "
"it and only CONFIG_WATCHDOG_NOWAYOUT determines if the feature is going to "
"be used. This needs to be converted by initializing the status variable of "
"the watchdog_device like this::"
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:181
msgid ""
"Most drivers, however, also allow runtime configuration of nowayout, usually "
"by adding a module parameter. The conversion for this would be something "
"like::"
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:186
msgid ""
"The module parameter itself needs to stay, everything else related to "
"nowayout can go, though. This will likely be some code in open(), close() or "
"write()."
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:191
msgid "Register the watchdog device"
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:193
msgid ""
"Replace misc_register(&miscdev) with "
"watchdog_register_device(&watchdog_dev). Make sure the return value gets "
"checked and the error message, if present, still fits. Also convert the "
"unregister case::"
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:207
msgid "Update the Kconfig-entry"
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:209
msgid "The entry for the driver now needs to select WATCHDOG_CORE:"
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:211
msgid "select WATCHDOG_CORE"
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:215
msgid "Create a patch and send it to upstream"
msgstr ""

#: ../../../watchdog/convert_drivers_to_kernel_api.rst:217
msgid ""
"Make sure you understood Documentation/process/submitting-patches.rst and "
"send your patch to linux-watchdog@vger.kernel.org. We are looking forward to "
"it :)"
msgstr ""
