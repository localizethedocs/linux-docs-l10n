# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-06 15:47+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../filesystems/mount_api.rst:5
msgid "Filesystem Mount API"
msgstr ""

#: ../../../filesystems/mount_api.rst:27
msgid "Overview"
msgstr ""

#: ../../../filesystems/mount_api.rst:29
msgid "The creation of new mounts is now to be done in a multistep process:"
msgstr ""

#: ../../../filesystems/mount_api.rst:31
msgid "Create a filesystem context."
msgstr ""

#: ../../../filesystems/mount_api.rst:33
msgid ""
"Parse the parameters and attach them to the context.  Parameters are "
"expected to be passed individually from userspace, though legacy binary "
"parameters can also be handled."
msgstr ""

#: ../../../filesystems/mount_api.rst:37
msgid "Validate and pre-process the context."
msgstr ""

#: ../../../filesystems/mount_api.rst:39
msgid "Get or create a superblock and mountable root."
msgstr ""

#: ../../../filesystems/mount_api.rst:41
msgid "Perform the mount."
msgstr ""

#: ../../../filesystems/mount_api.rst:43
msgid "Return an error message attached to the context."
msgstr ""

#: ../../../filesystems/mount_api.rst:45
msgid "Destroy the context."
msgstr ""

#: ../../../filesystems/mount_api.rst:47
msgid "To support this, the file_system_type struct gains two new fields::"
msgstr ""

#: ../../../filesystems/mount_api.rst:52
msgid ""
"The first is invoked to set up the filesystem-specific parts of a filesystem "
"context, including the additional space, and the second points to the "
"parameter description for validation at registration time and querying by a "
"future system call."
msgstr ""

#: ../../../filesystems/mount_api.rst:57
msgid ""
"Note that security initialisation is done *after* the filesystem is called "
"so that the namespaces may be adjusted first."
msgstr ""

#: ../../../filesystems/mount_api.rst:62
msgid "The Filesystem context"
msgstr ""

#: ../../../filesystems/mount_api.rst:64
msgid ""
"The creation and reconfiguration of a superblock is governed by a filesystem "
"context.  This is represented by the fs_context structure::"
msgstr ""

#: ../../../filesystems/mount_api.rst:86
msgid "The fs_context fields are as follows:"
msgstr ""

#: ../../../filesystems/mount_api.rst:92
msgid ""
"These are operations that can be done on a filesystem context (see below).  "
"This must be set by the ->init_fs_context() file_system_type operation."
msgstr ""

#: ../../../filesystems/mount_api.rst:100
msgid ""
"A pointer to the file_system_type of the filesystem that is being "
"constructed or reconfigured.  This retains a reference on the type owner."
msgstr ""

#: ../../../filesystems/mount_api.rst:107
msgid ""
"A pointer to the file system's private data.  This is where the filesystem "
"will need to store any options it parses."
msgstr ""

#: ../../../filesystems/mount_api.rst:114
msgid ""
"A pointer to the root of the mountable tree (and indirectly, the superblock "
"thereof).  This is filled in by the ->get_tree() op.  If this is set, an "
"active reference on root->d_sb must also be held."
msgstr ""

#: ../../../filesystems/mount_api.rst:123
msgid ""
"There are a subset of the namespaces in use by the invoking process.  They "
"retain references on each namespace.  The subscribed namespaces may be "
"replaced by the filesystem to reflect other sources, such as the parent "
"mount superblock on an automount."
msgstr ""

#: ../../../filesystems/mount_api.rst:132
msgid ""
"The mounter's credentials.  This retains a reference on the credentials."
msgstr ""

#: ../../../filesystems/mount_api.rst:138
msgid ""
"This specifies the source.  It may be a block device (e.g. /dev/sda1) or "
"something more exotic, such as the \"host:/path\" that NFS desires."
msgstr ""

#: ../../../filesystems/mount_api.rst:145
msgid ""
"This is a string to be added to the type displayed in /proc/mounts to "
"qualify it (used by FUSE).  This is available for the filesystem to set if "
"desired."
msgstr ""

#: ../../../filesystems/mount_api.rst:153
msgid ""
"A place for the LSMs to hang their security data for the superblock.  The "
"relevant security operations are described below."
msgstr ""

#: ../../../filesystems/mount_api.rst:160
msgid ""
"The proposed s_fs_info for a new superblock, set in the superblock by "
"sget_fc().  This can be used to distinguish superblocks."
msgstr ""

#: ../../../filesystems/mount_api.rst:168
msgid "Which bits SB_* flags are to be set/cleared in super_block::s_flags."
msgstr ""

#: ../../../filesystems/mount_api.rst:174
msgid ""
"These will be bitwise-OR'd with s->s_iflags when a superblock is created."
msgstr ""

#: ../../../filesystems/mount_api.rst:180
msgid ""
"This indicates the purpose for which the context is intended.  The available "
"values are:"
msgstr ""

#: ../../../filesystems/mount_api.rst:184
msgid "FS_CONTEXT_FOR_MOUNT,"
msgstr ""

#: ../../../filesystems/mount_api.rst:184
msgid "New superblock for explicit mount"
msgstr ""

#: ../../../filesystems/mount_api.rst:185
msgid "FS_CONTEXT_FOR_SUBMOUNT"
msgstr ""

#: ../../../filesystems/mount_api.rst:185
msgid "New automatic submount of extant mount"
msgstr ""

#: ../../../filesystems/mount_api.rst:186
msgid "FS_CONTEXT_FOR_RECONFIGURE"
msgstr ""

#: ../../../filesystems/mount_api.rst:186
msgid "Change an existing mount"
msgstr ""

#: ../../../filesystems/mount_api.rst:189
msgid ""
"The mount context is created by calling vfs_new_fs_context() or "
"vfs_dup_fs_context() and is destroyed with put_fs_context().  Note that the "
"structure is not refcounted."
msgstr ""

#: ../../../filesystems/mount_api.rst:193
msgid ""
"VFS, security and filesystem mount options are set individually with "
"vfs_parse_mount_option().  Options provided by the old mount(2) system call "
"as a page of data can be parsed with generic_parse_monolithic()."
msgstr ""

#: ../../../filesystems/mount_api.rst:197
msgid ""
"When mounting, the filesystem is allowed to take data from any of the "
"pointers and attach it to the superblock (or whatever), provided it clears "
"the pointer in the mount context."
msgstr ""

#: ../../../filesystems/mount_api.rst:201
msgid ""
"The filesystem is also allowed to allocate resources and pin them with the "
"mount context.  For instance, NFS might pin the appropriate protocol version "
"module."
msgstr ""

#: ../../../filesystems/mount_api.rst:207
msgid "The Filesystem Context Operations"
msgstr ""

#: ../../../filesystems/mount_api.rst:209
msgid "The filesystem context points to a table of operations::"
msgstr ""

#: ../../../filesystems/mount_api.rst:221
msgid ""
"These operations are invoked by the various stages of the mount procedure to "
"manage the filesystem context.  They are as follows:"
msgstr ""

#: ../../../filesystems/mount_api.rst:228
msgid ""
"Called to clean up the filesystem-specific part of the filesystem context "
"when the context is destroyed.  It should be aware that parts of the context "
"may have been removed and NULL'd out by ->get_tree()."
msgstr ""

#: ../../../filesystems/mount_api.rst:236
msgid ""
"Called when a filesystem context has been duplicated to duplicate the "
"filesystem-private data.  An error may be returned to indicate failure to do "
"this."
msgstr ""

#: ../../../filesystems/mount_api.rst:242
msgid ""
"Note that even if this fails, put_fs_context() will be called immediately "
"thereafter, so ->dup() *must* make the filesystem-private data safe for -"
">free()."
msgstr ""

#: ../../../filesystems/mount_api.rst:251
msgid ""
"Called when a parameter is being added to the filesystem context.  param "
"points to the key name and maybe a value object.  VFS-specific options will "
"have been weeded out and fc->sb_flags updated in the context. Security "
"options will also have been weeded out and fc->security updated."
msgstr ""

#: ../../../filesystems/mount_api.rst:256
msgid ""
"The parameter can be parsed with fs_parse() and fs_lookup_param().  Note "
"that the source(s) are presented as parameters named \"source\"."
msgstr ""

#: ../../../filesystems/mount_api.rst:259
msgid "If successful, 0 should be returned or a negative error code otherwise."
msgstr ""

#: ../../../filesystems/mount_api.rst:265
msgid ""
"Called when the mount(2) system call is invoked to pass the entire data page "
"in one go.  If this is expected to be just a list of \"key[=val]\" items "
"separated by commas, then this may be set to NULL."
msgstr ""

#: ../../../filesystems/mount_api.rst:269
msgid "The return value is as for ->parse_param()."
msgstr ""

#: ../../../filesystems/mount_api.rst:271
msgid ""
"If the filesystem (e.g. NFS) needs to examine the data first and then finds "
"it's the standard key-val list then it may pass it off to "
"generic_parse_monolithic()."
msgstr ""

#: ../../../filesystems/mount_api.rst:279
msgid ""
"Called to get or create the mountable root and superblock, using the "
"information stored in the filesystem context (reconfiguration goes via a "
"different vector).  It may detach any resources it desires from the "
"filesystem context and transfer them to the superblock it creates."
msgstr ""

#: ../../../filesystems/mount_api.rst:284
msgid ""
"On success it should set fc->root to the mountable root and return 0.  In "
"the case of an error, it should return a negative error code."
msgstr ""

#: ../../../filesystems/mount_api.rst:287
msgid ""
"The phase on a userspace-driven context will be set to only allow this to be "
"called once on any particular context."
msgstr ""

#: ../../../filesystems/mount_api.rst:294
msgid ""
"Called to effect reconfiguration of a superblock using information stored in "
"the filesystem context.  It may detach any resources it desires from the "
"filesystem context and transfer them to the superblock.  The superblock can "
"be found from fc->root->d_sb."
msgstr ""

#: ../../../filesystems/mount_api.rst:299
msgid ""
"On success it should return 0.  In the case of an error, it should return a "
"negative error code."
msgstr ""

#: ../../../filesystems/mount_api.rst:302
msgid "reconfigure is intended as a replacement for remount_fs."
msgstr ""

#: ../../../filesystems/mount_api.rst:306
msgid "Filesystem context Security"
msgstr ""

#: ../../../filesystems/mount_api.rst:308
msgid ""
"The filesystem context contains a security pointer that the LSMs can use for "
"building up a security context for the superblock to be mounted.  There are "
"a number of operations used by the new mount code for this purpose:"
msgstr ""

#: ../../../filesystems/mount_api.rst:317
msgid ""
"Called to initialise fc->security (which is preset to NULL) and allocate any "
"resources needed.  It should return 0 on success or a negative error code on "
"failure."
msgstr ""

#: ../../../filesystems/mount_api.rst:321
msgid ""
"reference will be non-NULL if the context is being created for superblock "
"reconfiguration (FS_CONTEXT_FOR_RECONFIGURE) in which case it indicates the "
"root dentry of the superblock to be reconfigured.  It will also be non-NULL "
"in the case of a submount (FS_CONTEXT_FOR_SUBMOUNT) in which case it "
"indicates the automount point."
msgstr ""

#: ../../../filesystems/mount_api.rst:332
msgid ""
"Called to initialise fc->security (which is preset to NULL) and allocate any "
"resources needed.  The original filesystem context is pointed to by src_fc "
"and may be used for reference.  It should return 0 on success or a negative "
"error code on failure."
msgstr ""

#: ../../../filesystems/mount_api.rst:341
msgid ""
"Called to clean up anything attached to fc->security.  Note that the "
"contents may have been transferred to a superblock and the pointer cleared "
"during get_tree."
msgstr ""

#: ../../../filesystems/mount_api.rst:350
msgid ""
"Called for each mount parameter, including the source.  The arguments are as "
"for the ->parse_param() method.  It should return 0 to indicate that the "
"parameter should be passed on to the filesystem, 1 to indicate that the "
"parameter should be discarded or an error to indicate that the parameter "
"should be rejected."
msgstr ""

#: ../../../filesystems/mount_api.rst:356
msgid ""
"The value pointed to by param may be modified (if a string) or stolen "
"(provided the value pointer is NULL'd out).  If it is stolen, 1 must be "
"returned to prevent it being passed to the filesystem."
msgstr ""

#: ../../../filesystems/mount_api.rst:364
msgid ""
"Called after all the options have been parsed to validate the collection as "
"a whole and to do any necessary allocation so that security_sb_get_tree() "
"and security_sb_reconfigure() are less likely to fail.  It should return 0 "
"or a negative error code."
msgstr ""

#: ../../../filesystems/mount_api.rst:369
msgid ""
"In the case of reconfiguration, the target superblock will be accessible via "
"fc->root."
msgstr ""

#: ../../../filesystems/mount_api.rst:376
msgid ""
"Called during the mount procedure to verify that the specified superblock is "
"allowed to be mounted and to transfer the security data there.  It should "
"return 0 or a negative error code."
msgstr ""

#: ../../../filesystems/mount_api.rst:384
msgid ""
"Called to apply any reconfiguration to an LSM's context.  It must not fail.  "
"Error checking and resource allocation must be done in advance by the "
"parameter parsing and validation hooks."
msgstr ""

#: ../../../filesystems/mount_api.rst:394
msgid ""
"Called during the mount procedure to verify that the root dentry attached to "
"the context is permitted to be attached to the specified mountpoint. It "
"should return 0 on success or a negative error code on failure."
msgstr ""

#: ../../../filesystems/mount_api.rst:400
msgid "VFS Filesystem context API"
msgstr ""

#: ../../../filesystems/mount_api.rst:402
msgid ""
"There are four operations for creating a filesystem context and one for "
"destroying a context:"
msgstr ""

#: ../../../filesystems/mount_api.rst:410
msgid ""
"Allocate a filesystem context for the purpose of setting up a new mount, "
"whether that be with a new superblock or sharing an existing one.  This sets "
"the superblock flags, initialises the security and calls fs_type-"
">init_fs_context() to initialise the filesystem private data."
msgstr ""

#: ../../../filesystems/mount_api.rst:415
msgid ""
"fs_type specifies the filesystem type that will manage the context and "
"sb_flags presets the superblock flags stored therein."
msgstr ""

#: ../../../filesystems/mount_api.rst:425
msgid ""
"Allocate a filesystem context for the purpose of reconfiguring an existing "
"superblock.  dentry provides a reference to the superblock to be "
"configured.  sb_flags and sb_flags_mask indicate which superblock flags need "
"changing and to what."
msgstr ""

#: ../../../filesystems/mount_api.rst:436
msgid ""
"Allocate a filesystem context for the purpose of creating a new mount for an "
"automount point or other derived superblock.  fs_type specifies the "
"filesystem type that will manage the context and the reference dentry "
"supplies the parameters.  Namespaces are propagated from the reference "
"dentry's superblock also."
msgstr ""

#: ../../../filesystems/mount_api.rst:442
msgid ""
"Note that it's not a requirement that the reference dentry be of the same "
"filesystem type as fs_type."
msgstr ""

#: ../../../filesystems/mount_api.rst:449
msgid ""
"Duplicate a filesystem context, copying any options noted and duplicating or "
"additionally referencing any resources held therein.  This is available for "
"use where a filesystem has to get a mount within a mount, such as NFS4 does "
"by internally mounting the root of the target server and then doing a "
"private pathwalk to the target directory."
msgstr ""

#: ../../../filesystems/mount_api.rst:455
msgid "The purpose in the new context is inherited from the old one."
msgstr ""

#: ../../../filesystems/mount_api.rst:461
msgid ""
"Destroy a filesystem context, releasing any resources it holds.  This calls "
"the ->free() operation.  This is intended to be called by anyone who created "
"a filesystem context."
msgstr ""

#: ../../../filesystems/mount_api.rst:467
msgid ""
"filesystem contexts are not refcounted, so this causes unconditional "
"destruction."
msgstr ""

#: ../../../filesystems/mount_api.rst:470
msgid ""
"In all the above operations, apart from the put op, the return is a mount "
"context pointer or a negative error code."
msgstr ""

#: ../../../filesystems/mount_api.rst:473
msgid ""
"For the remaining operations, if an error occurs, a negative error code will "
"be returned."
msgstr ""

#: ../../../filesystems/mount_api.rst:481
msgid ""
"Supply a single mount parameter to the filesystem context.  This includes "
"the specification of the source/device which is specified as the \"source\" "
"parameter (which may be specified multiple times if the filesystem supports "
"that)."
msgstr ""

#: ../../../filesystems/mount_api.rst:486
msgid ""
"param specifies the parameter key name and the value.  The parameter is "
"first checked to see if it corresponds to a standard mount flag (in which "
"case it is used to set an SB_xxx flag and consumed) or a security option (in "
"which case the LSM consumes it) before it is passed on to the filesystem."
msgstr ""

#: ../../../filesystems/mount_api.rst:492
msgid "The parameter value is typed and can be one of:"
msgstr ""

#: ../../../filesystems/mount_api.rst:495
msgid "fs_value_is_flag"
msgstr ""

#: ../../../filesystems/mount_api.rst:495
msgid "Parameter not given a value"
msgstr ""

#: ../../../filesystems/mount_api.rst:496
msgid "fs_value_is_string"
msgstr ""

#: ../../../filesystems/mount_api.rst:496
msgid "Value is a string"
msgstr ""

#: ../../../filesystems/mount_api.rst:497
msgid "fs_value_is_blob"
msgstr ""

#: ../../../filesystems/mount_api.rst:497
msgid "Value is a binary blob"
msgstr ""

#: ../../../filesystems/mount_api.rst:498
msgid "fs_value_is_filename"
msgstr ""

#: ../../../filesystems/mount_api.rst:498
msgid "Value is a filename* + dirfd"
msgstr ""

#: ../../../filesystems/mount_api.rst:499
msgid "fs_value_is_file"
msgstr ""

#: ../../../filesystems/mount_api.rst:499
msgid "Value is an open file (file*)"
msgstr ""

#: ../../../filesystems/mount_api.rst:502
msgid ""
"If there is a value, that value is stored in a union in the struct in one of "
"param->{string,blob,name,file}.  Note that the function may steal and clear "
"the pointer, but then becomes responsible for disposing of the object."
msgstr ""

#: ../../../filesystems/mount_api.rst:512
#: ../../../filesystems/mount_api.rst:520
msgid ""
"A wrapper around vfs_parse_fs_param() that copies the value string it is "
"passed."
msgstr ""

#: ../../../filesystems/mount_api.rst:527
msgid ""
"Parse a sys_mount() data page, assuming the form to be a text list "
"consisting of key[=val] options separated by commas.  Each item in the list "
"is passed to vfs_mount_option().  This is the default when the -"
">parse_monolithic() method is NULL."
msgstr ""

#: ../../../filesystems/mount_api.rst:536
msgid ""
"Get or create the mountable root and superblock, using the parameters in the "
"filesystem context to select/configure the superblock.  This invokes the -"
">get_tree() method."
msgstr ""

#: ../../../filesystems/mount_api.rst:544
msgid ""
"Create a mount given the parameters in the specified filesystem context. "
"Note that this does not attach the mount to anything."
msgstr ""

#: ../../../filesystems/mount_api.rst:549
msgid "Superblock Creation Helpers"
msgstr ""

#: ../../../filesystems/mount_api.rst:551
msgid ""
"A number of VFS helpers are available for use by filesystems for the "
"creation or looking up of superblocks."
msgstr ""

#: ../../../filesystems/mount_api.rst:561
msgid ""
"This is the core routine.  If test is non-NULL, it searches for an existing "
"superblock matching the criteria held in the fs_context, using the test "
"function to match them.  If no match is found, a new superblock is created "
"and the set function is called to set it up."
msgstr ""

#: ../../../filesystems/mount_api.rst:566
msgid ""
"Prior to the set function being called, fc->s_fs_info will be transferred to "
"sb->s_fs_info - and fc->s_fs_info will be cleared if set returns success "
"(ie. 0)."
msgstr ""

#: ../../../filesystems/mount_api.rst:570
msgid "The following helpers all wrap sget_fc():"
msgstr ""

#: ../../../filesystems/mount_api.rst:572
msgid "vfs_get_single_super"
msgstr ""

#: ../../../filesystems/mount_api.rst:574
msgid ""
"Only one such superblock may exist in the system.  Any further attempt to "
"get a new superblock gets this one (and any parameter differences are "
"ignored)."
msgstr ""

#: ../../../filesystems/mount_api.rst:578
msgid "vfs_get_keyed_super"
msgstr ""

#: ../../../filesystems/mount_api.rst:580
msgid ""
"Multiple superblocks of this type may exist and they're keyed on their "
"s_fs_info pointer (for example this may refer to a namespace)."
msgstr ""

#: ../../../filesystems/mount_api.rst:584
msgid "vfs_get_independent_super"
msgstr ""

#: ../../../filesystems/mount_api.rst:586
msgid ""
"Multiple independent superblocks of this type may exist.  This function "
"never matches an existing one and always creates a new one."
msgstr ""

#: ../../../filesystems/mount_api.rst:592
msgid "Parameter Description"
msgstr ""

#: ../../../filesystems/mount_api.rst:594
msgid ""
"Parameters are described using structures defined in linux/fs_parser.h. "
"There's a core description struct that links everything together::"
msgstr ""

#: ../../../filesystems/mount_api.rst:602
msgid "For example::"
msgstr ""

#: ../../../filesystems/mount_api.rst:617
msgid "The members are as follows:"
msgstr ""

#: ../../../filesystems/mount_api.rst:623
msgid ""
"Table of parameter specifications, terminated with a null entry, where the "
"entries are of type::"
msgstr ""

#: ../../../filesystems/mount_api.rst:633
msgid ""
"The 'name' field is a string to match exactly to the parameter key (no "
"wildcards, patterns and no case-independence) and 'opt' is the value that "
"will be returned by the fs_parser() function in the case of a successful "
"match."
msgstr ""

#: ../../../filesystems/mount_api.rst:638
msgid "The 'type' field indicates the desired value type and must be one of:"
msgstr ""

#: ../../../filesystems/mount_api.rst:641
msgid "TYPE NAME"
msgstr ""

#: ../../../filesystems/mount_api.rst:641
msgid "EXPECTED VALUE"
msgstr ""

#: ../../../filesystems/mount_api.rst:641
msgid "RESULT IN"
msgstr ""

#: ../../../filesystems/mount_api.rst:643
#: ../../../filesystems/mount_api.rst:677
msgid "fs_param_is_flag"
msgstr ""

#: ../../../filesystems/mount_api.rst:643
msgid "No value"
msgstr ""

#: ../../../filesystems/mount_api.rst:643
msgid "n/a"
msgstr ""

#: ../../../filesystems/mount_api.rst:644
#: ../../../filesystems/mount_api.rst:679
msgid "fs_param_is_bool"
msgstr ""

#: ../../../filesystems/mount_api.rst:644
msgid "Boolean value"
msgstr ""

#: ../../../filesystems/mount_api.rst:644
msgid "result->boolean"
msgstr ""

#: ../../../filesystems/mount_api.rst:645
#: ../../../filesystems/mount_api.rst:680
msgid "fs_param_is_u32"
msgstr ""

#: ../../../filesystems/mount_api.rst:645
msgid "32-bit unsigned int"
msgstr ""

#: ../../../filesystems/mount_api.rst:645
#: ../../../filesystems/mount_api.rst:646
#: ../../../filesystems/mount_api.rst:647
#: ../../../filesystems/mount_api.rst:650
msgid "result->uint_32"
msgstr ""

#: ../../../filesystems/mount_api.rst:646
#: ../../../filesystems/mount_api.rst:681
msgid "fs_param_is_u32_octal"
msgstr ""

#: ../../../filesystems/mount_api.rst:646
msgid "32-bit octal int"
msgstr ""

#: ../../../filesystems/mount_api.rst:647
msgid "fs_param_is_u32_hex"
msgstr ""

#: ../../../filesystems/mount_api.rst:647
msgid "32-bit hex int"
msgstr ""

#: ../../../filesystems/mount_api.rst:648
#: ../../../filesystems/mount_api.rst:682
msgid "fs_param_is_s32"
msgstr ""

#: ../../../filesystems/mount_api.rst:648
msgid "32-bit signed int"
msgstr ""

#: ../../../filesystems/mount_api.rst:648
#: ../../../filesystems/mount_api.rst:655
msgid "result->int_32"
msgstr ""

#: ../../../filesystems/mount_api.rst:649
#: ../../../filesystems/mount_api.rst:683
msgid "fs_param_is_u64"
msgstr ""

#: ../../../filesystems/mount_api.rst:649
msgid "64-bit unsigned int"
msgstr ""

#: ../../../filesystems/mount_api.rst:649
msgid "result->uint_64"
msgstr ""

#: ../../../filesystems/mount_api.rst:650
#: ../../../filesystems/mount_api.rst:684
msgid "fs_param_is_enum"
msgstr ""

#: ../../../filesystems/mount_api.rst:650
msgid "Enum value name"
msgstr ""

#: ../../../filesystems/mount_api.rst:651
#: ../../../filesystems/mount_api.rst:685
msgid "fs_param_is_string"
msgstr ""

#: ../../../filesystems/mount_api.rst:651
msgid "Arbitrary string"
msgstr ""

#: ../../../filesystems/mount_api.rst:651
msgid "param->string"
msgstr ""

#: ../../../filesystems/mount_api.rst:652
#: ../../../filesystems/mount_api.rst:686
msgid "fs_param_is_blob"
msgstr ""

#: ../../../filesystems/mount_api.rst:652
msgid "Binary blob"
msgstr ""

#: ../../../filesystems/mount_api.rst:652
msgid "param->blob"
msgstr ""

#: ../../../filesystems/mount_api.rst:653
#: ../../../filesystems/mount_api.rst:687
msgid "fs_param_is_blockdev"
msgstr ""

#: ../../../filesystems/mount_api.rst:653
msgid "Blockdev path"
msgstr ""

#: ../../../filesystems/mount_api.rst:653
#: ../../../filesystems/mount_api.rst:654
msgid "Needs lookup"
msgstr ""

#: ../../../filesystems/mount_api.rst:654
#: ../../../filesystems/mount_api.rst:688
msgid "fs_param_is_path"
msgstr ""

#: ../../../filesystems/mount_api.rst:654
msgid "Path"
msgstr ""

#: ../../../filesystems/mount_api.rst:655
#: ../../../filesystems/mount_api.rst:689
msgid "fs_param_is_fd"
msgstr ""

#: ../../../filesystems/mount_api.rst:655
msgid "File descriptor"
msgstr ""

#: ../../../filesystems/mount_api.rst:656
#: ../../../filesystems/mount_api.rst:690
msgid "fs_param_is_uid"
msgstr ""

#: ../../../filesystems/mount_api.rst:656
msgid "User ID (u32)"
msgstr ""

#: ../../../filesystems/mount_api.rst:656
msgid "result->uid"
msgstr ""

#: ../../../filesystems/mount_api.rst:657
#: ../../../filesystems/mount_api.rst:691
msgid "fs_param_is_gid"
msgstr ""

#: ../../../filesystems/mount_api.rst:657
msgid "Group ID (u32)"
msgstr ""

#: ../../../filesystems/mount_api.rst:657
msgid "result->gid"
msgstr ""

#: ../../../filesystems/mount_api.rst:660
msgid ""
"Note that if the value is of fs_param_is_bool type, fs_parse() will try to "
"match any string value against \"0\", \"1\", \"no\", \"yes\", \"false\", "
"\"true\"."
msgstr ""

#: ../../../filesystems/mount_api.rst:663
msgid "Each parameter can also be qualified with 'flags':"
msgstr ""

#: ../../../filesystems/mount_api.rst:666
msgid "fs_param_v_optional"
msgstr ""

#: ../../../filesystems/mount_api.rst:666
msgid "The value is optional"
msgstr ""

#: ../../../filesystems/mount_api.rst:667
msgid "fs_param_neg_with_no"
msgstr ""

#: ../../../filesystems/mount_api.rst:667
msgid "result->negated set if key is prefixed with \"no\""
msgstr ""

#: ../../../filesystems/mount_api.rst:668
msgid "fs_param_neg_with_empty"
msgstr ""

#: ../../../filesystems/mount_api.rst:668
msgid "result->negated set if value is \"\""
msgstr ""

#: ../../../filesystems/mount_api.rst:669
msgid "fs_param_deprecated"
msgstr ""

#: ../../../filesystems/mount_api.rst:669
msgid "The parameter is deprecated."
msgstr ""

#: ../../../filesystems/mount_api.rst:672
msgid "These are wrapped with a number of convenience wrappers:"
msgstr ""

#: ../../../filesystems/mount_api.rst:675
msgid "MACRO"
msgstr ""

#: ../../../filesystems/mount_api.rst:675
msgid "SPECIFIES"
msgstr ""

#: ../../../filesystems/mount_api.rst:677
msgid "fsparam_flag()"
msgstr ""

#: ../../../filesystems/mount_api.rst:678
msgid "fsparam_flag_no()"
msgstr ""

#: ../../../filesystems/mount_api.rst:678
msgid "fs_param_is_flag, fs_param_neg_with_no"
msgstr ""

#: ../../../filesystems/mount_api.rst:679
msgid "fsparam_bool()"
msgstr ""

#: ../../../filesystems/mount_api.rst:680
msgid "fsparam_u32()"
msgstr ""

#: ../../../filesystems/mount_api.rst:681
msgid "fsparam_u32oct()"
msgstr ""

#: ../../../filesystems/mount_api.rst:682
msgid "fsparam_s32()"
msgstr ""

#: ../../../filesystems/mount_api.rst:683
msgid "fsparam_u64()"
msgstr ""

#: ../../../filesystems/mount_api.rst:684
msgid "fsparam_enum()"
msgstr ""

#: ../../../filesystems/mount_api.rst:685
msgid "fsparam_string()"
msgstr ""

#: ../../../filesystems/mount_api.rst:686
msgid "fsparam_blob()"
msgstr ""

#: ../../../filesystems/mount_api.rst:687
msgid "fsparam_bdev()"
msgstr ""

#: ../../../filesystems/mount_api.rst:688
msgid "fsparam_path()"
msgstr ""

#: ../../../filesystems/mount_api.rst:689
msgid "fsparam_fd()"
msgstr ""

#: ../../../filesystems/mount_api.rst:690
msgid "fsparam_uid()"
msgstr ""

#: ../../../filesystems/mount_api.rst:691
msgid "fsparam_gid()"
msgstr ""

#: ../../../filesystems/mount_api.rst:694
msgid ""
"all of which take two arguments, name string and option number - for "
"example::"
msgstr ""

#: ../../../filesystems/mount_api.rst:705
msgid ""
"An addition macro, __fsparam() is provided that takes an additional pair of "
"arguments to specify the type and the flags for anything that doesn't match "
"one of the above macros."
msgstr ""

#: ../../../filesystems/mount_api.rst:713
msgid ""
"Table of enum value names to integer mappings, terminated with a null "
"entry.  This is of type::"
msgstr ""

#: ../../../filesystems/mount_api.rst:722
msgid ""
"Where the array is an unsorted list of { parameter ID, name }-keyed elements "
"that indicate the value to map to, e.g.::"
msgstr ""

#: ../../../filesystems/mount_api.rst:731
msgid ""
"If a parameter of type fs_param_is_enum is encountered, fs_parse() will try "
"to look the value up in the enum table and the result will be stored in the "
"parse result."
msgstr ""

#: ../../../filesystems/mount_api.rst:735
msgid ""
"The parser should be pointed to by the parser pointer in the "
"file_system_type struct as this will provide validation on registration (if "
"CONFIG_VALIDATE_FS_PARSER=y) and will allow the description to be queried "
"from userspace using the fsinfo() syscall."
msgstr ""

#: ../../../filesystems/mount_api.rst:742
msgid "Parameter Helper Functions"
msgstr ""

#: ../../../filesystems/mount_api.rst:744
msgid ""
"A number of helper functions are provided to help a filesystem or an LSM "
"process the parameters it is given."
msgstr ""

#: ../../../filesystems/mount_api.rst:752
msgid ""
"Look up a constant by name in a table of name -> integer mappings.  The "
"table is an array of elements of the following type::"
msgstr ""

#: ../../../filesystems/mount_api.rst:760
msgid ""
"If a match is found, the corresponding value is returned.  If a match isn't "
"found, the not_found value is returned instead."
msgstr ""

#: ../../../filesystems/mount_api.rst:768
msgid ""
"This performs some validation checks on a parameter description.  It returns "
"true if the description is good and false if it is not.  It will log errors "
"to the kernel log buffer if validation fails."
msgstr ""

#: ../../../filesystems/mount_api.rst:779
msgid ""
"This is the main interpreter of parameters.  It uses the parameter "
"description to look up a parameter by key name and to convert that to an "
"option number (which it returns)."
msgstr ""

#: ../../../filesystems/mount_api.rst:783
msgid ""
"If successful, and if the parameter type indicates the result is a boolean, "
"integer, enum, uid, or gid type, the value is converted by this function and "
"the result stored in result->{boolean,int_32,uint_32,uint_64,uid,gid}."
msgstr ""

#: ../../../filesystems/mount_api.rst:788
msgid ""
"If a match isn't initially made, the key is prefixed with \"no\" and no "
"value is present then an attempt will be made to look up the key with the "
"prefix removed.  If this matches a parameter for which the type has flag "
"fs_param_neg_with_no set, then a match will be made and result->negated will "
"be set to true."
msgstr ""

#: ../../../filesystems/mount_api.rst:794
msgid ""
"If the parameter isn't matched, -ENOPARAM will be returned; if the parameter "
"is matched, but the value is erroneous, -EINVAL will be returned; otherwise "
"the parameter's option number will be returned."
msgstr ""

#: ../../../filesystems/mount_api.rst:806
msgid ""
"This takes a parameter that carries a string or filename type and attempts "
"to do a path lookup on it.  If the parameter expects a blockdev, a check is "
"made that the inode actually represents one."
msgstr ""

#: ../../../filesystems/mount_api.rst:810
msgid ""
"Returns 0 if successful and ``*_path`` will be set; returns a negative error "
"code if not."
msgstr ""
