# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../fault-injection/provoke-crashes.rst:5
msgid "Provoking crashes with Linux Kernel Dump Test Module (LKDTM)"
msgstr ""

#: ../../../fault-injection/provoke-crashes.rst:7
msgid ""
"The lkdtm module provides an interface to disrupt (and usually crash) the "
"kernel at predefined code locations to evaluate the reliability of the "
"kernel's exception handling and to test crash dumps obtained using different "
"dumping solutions. The module uses KPROBEs to instrument the trigger "
"location, but can also trigger the kernel directly without KPROBE support "
"via debugfs."
msgstr ""

#: ../../../fault-injection/provoke-crashes.rst:14
msgid ""
"You can select the location of the trigger (\"crash point name\") and the "
"type of action (\"crash point type\") either through module arguments when "
"inserting the module, or through the debugfs interface."
msgstr ""

#: ../../../fault-injection/provoke-crashes.rst:18
msgid "Usage::"
msgstr ""

#: ../../../fault-injection/provoke-crashes.rst:23
msgid "recur_count"
msgstr ""

#: ../../../fault-injection/provoke-crashes.rst:24
msgid ""
"Recursion level for the stack overflow test. By default this is dynamically "
"calculated based on kernel configuration, with the goal of being just large "
"enough to exhaust the kernel stack. The value can be seen at `/sys/module/"
"lkdtm/parameters/recur_count`."
msgstr ""

#: ../../../fault-injection/provoke-crashes.rst:29
msgid "cpoint_name"
msgstr ""

#: ../../../fault-injection/provoke-crashes.rst:30
msgid ""
"Where in the kernel to trigger the action. It can be one of "
"INT_HARDWARE_ENTRY, INT_HW_IRQ_EN, INT_TASKLET_ENTRY, FS_SUBMIT_BH, "
"MEM_SWAPOUT, TIMERADD, SCSI_QUEUE_RQ, or DIRECT."
msgstr ""

#: ../../../fault-injection/provoke-crashes.rst:34
msgid "cpoint_type"
msgstr ""

#: ../../../fault-injection/provoke-crashes.rst:35
msgid ""
"Indicates the action to be taken on hitting the crash point. These are "
"numerous, and best queried directly from debugfs. Some of the common ones "
"are PANIC, BUG, EXCEPTION, LOOP, and OVERFLOW. See the contents of `/sys/"
"kernel/debug/provoke-crash/DIRECT` for a complete list."
msgstr ""

#: ../../../fault-injection/provoke-crashes.rst:41
msgid "cpoint_count"
msgstr ""

#: ../../../fault-injection/provoke-crashes.rst:42
msgid ""
"Indicates the number of times the crash point is to be hit before triggering "
"the action. The default is 10 (except for DIRECT, which always fires "
"immediately)."
msgstr ""

#: ../../../fault-injection/provoke-crashes.rst:46
msgid ""
"You can also induce failures by mounting debugfs and writing the type to "
"<debugfs>/provoke-crash/<crashpoint>. E.g.::"
msgstr ""

#: ../../../fault-injection/provoke-crashes.rst:52
msgid ""
"The special file `DIRECT` will induce the action directly without KPROBE "
"instrumentation. This mode is the only one available when the module is "
"built for a kernel without KPROBEs support::"
msgstr ""
