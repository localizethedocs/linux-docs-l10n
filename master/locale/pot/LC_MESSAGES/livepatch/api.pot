# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-06 15:47+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../livepatch/api.rst:5
msgid "Livepatching APIs"
msgstr ""

#: ../../../livepatch/api.rst:8
msgid "Livepatch Enablement"
msgstr ""

#: ../../../livepatch/api:10: kernel/livepatch/core.c:1090
msgid "enable the livepatch"
msgstr ""

#: ../../../livepatch/api:10: kernel/livepatch/core.c:1094
#: ../../../livepatch/api:17: kernel/livepatch/shadow.c:81
#: kernel/livepatch/shadow.c:177 kernel/livepatch/shadow.c:210
#: kernel/livepatch/shadow.c:248 kernel/livepatch/shadow.c:279
#: ../../../livepatch/api:23: kernel/livepatch/state.c:23
#: kernel/livepatch/state.c:49
msgid "**Parameters**"
msgstr ""

#: ../../../livepatch/api:10: kernel/livepatch/core.c:1096
#: ../../../livepatch/api:23: kernel/livepatch/state.c:25
msgid "``struct klp_patch *patch``"
msgstr ""

#: ../../../livepatch/api:10: kernel/livepatch/core.c:1091
msgid "patch to be enabled"
msgstr ""

#: ../../../livepatch/api:10: kernel/livepatch/core.c:1093
#: ../../../livepatch/api:17: kernel/livepatch/shadow.c:181
#: kernel/livepatch/shadow.c:214 kernel/livepatch/shadow.c:250
#: kernel/livepatch/shadow.c:280 ../../../livepatch/api:23:
#: kernel/livepatch/state.c:24 kernel/livepatch/state.c:49
#: ../../../livepatch/api:29: include/linux/livepatch.h:43
#: include/linux/livepatch.h:93
msgid "**Description**"
msgstr ""

#: ../../../livepatch/api:10: kernel/livepatch/core.c:1092
msgid ""
"Initializes the data structure associated with the patch, creates the sysfs "
"interface, performs the needed symbol lookups and code relocations, "
"registers the patched functions with ftrace."
msgstr ""

#: ../../../livepatch/api:10: kernel/livepatch/core.c:1096
msgid ""
"This function is supposed to be called from the livepatch module_init() "
"callback."
msgstr ""

#: ../../../livepatch/api:10: kernel/livepatch/core.c:1099
#: ../../../livepatch/api:17: kernel/livepatch/shadow.c:81
#: kernel/livepatch/shadow.c:192 kernel/livepatch/shadow.c:222
#: ../../../livepatch/api:23: kernel/livepatch/state.c:28
#: kernel/livepatch/state.c:60
msgid "**Return**"
msgstr ""

#: ../../../livepatch/api:10: kernel/livepatch/core.c:1100
msgid "0 on success, otherwise error"
msgstr ""

#: ../../../livepatch/api.rst:15
msgid "Shadow Variables"
msgstr ""

#: ../../../livepatch/api:17: kernel/livepatch/shadow.c:77
msgid "retrieve a shadow variable data pointer"
msgstr ""

#: ../../../livepatch/api:17: kernel/livepatch/shadow.c:83
#: kernel/livepatch/shadow.c:179 kernel/livepatch/shadow.c:212
#: kernel/livepatch/shadow.c:250
msgid "``void *obj``"
msgstr ""

#: ../../../livepatch/api:17: kernel/livepatch/shadow.c:78
#: kernel/livepatch/shadow.c:174 kernel/livepatch/shadow.c:207
#: kernel/livepatch/shadow.c:245
msgid "pointer to parent object"
msgstr ""

#: ../../../livepatch/api:17: kernel/livepatch/shadow.c:80
#: kernel/livepatch/shadow.c:176 kernel/livepatch/shadow.c:209
#: kernel/livepatch/shadow.c:247 kernel/livepatch/shadow.c:281
#: ../../../livepatch/api:23: kernel/livepatch/state.c:23
#: kernel/livepatch/state.c:51
msgid "``unsigned long id``"
msgstr ""

#: ../../../livepatch/api:17: kernel/livepatch/shadow.c:79
#: kernel/livepatch/shadow.c:175 kernel/livepatch/shadow.c:208
#: kernel/livepatch/shadow.c:246 kernel/livepatch/shadow.c:276
msgid "data identifier"
msgstr ""

#: ../../../livepatch/api:17: kernel/livepatch/shadow.c:81
#: kernel/livepatch/shadow.c:223
msgid "the shadow variable data element, NULL on failure."
msgstr ""

#: ../../../livepatch/api:17: kernel/livepatch/shadow.c:173
msgid "allocate and add a new shadow variable"
msgstr ""

#: ../../../livepatch/api:17: kernel/livepatch/shadow.c:177
#: kernel/livepatch/shadow.c:210
msgid "``size_t size``"
msgstr ""

#: ../../../livepatch/api:17: kernel/livepatch/shadow.c:176
#: kernel/livepatch/shadow.c:209
msgid "size of attached data"
msgstr ""

#: ../../../livepatch/api:17: kernel/livepatch/shadow.c:178
#: kernel/livepatch/shadow.c:211
msgid "``gfp_t gfp_flags``"
msgstr ""

#: ../../../livepatch/api:17: kernel/livepatch/shadow.c:177
#: kernel/livepatch/shadow.c:210
msgid "GFP mask for allocation"
msgstr ""

#: ../../../livepatch/api:17: kernel/livepatch/shadow.c:179
#: kernel/livepatch/shadow.c:212
msgid "``klp_shadow_ctor_t ctor``"
msgstr ""

#: ../../../livepatch/api:17: kernel/livepatch/shadow.c:178
#: kernel/livepatch/shadow.c:211
msgid "custom constructor to initialize the shadow data (optional)"
msgstr ""

#: ../../../livepatch/api:17: kernel/livepatch/shadow.c:180
#: kernel/livepatch/shadow.c:213
msgid "``void *ctor_data``"
msgstr ""

#: ../../../livepatch/api:17: kernel/livepatch/shadow.c:179
#: kernel/livepatch/shadow.c:212
msgid "pointer to any data needed by **ctor** (optional)"
msgstr ""

#: ../../../livepatch/api:17: kernel/livepatch/shadow.c:180
msgid ""
"Allocates **size** bytes for new shadow variable data using **gfp_flags**. "
"The data are zeroed by default.  They are further initialized by **ctor** "
"function if it is not NULL.  The new shadow variable is then added to the "
"global hashtable."
msgstr ""

#: ../../../livepatch/api:17: kernel/livepatch/shadow.c:185
msgid ""
"If an existing <obj, id> shadow variable can be found, this routine will "
"issue a WARN, exit early and return NULL."
msgstr ""

#: ../../../livepatch/api:17: kernel/livepatch/shadow.c:188
msgid ""
"This function guarantees that the constructor function is called only when "
"the variable did not exist before.  The cost is that **ctor** is called in "
"atomic context under a spin lock."
msgstr ""

#: ../../../livepatch/api:17: kernel/livepatch/shadow.c:193
msgid "the shadow variable data element, NULL on duplicate or failure."
msgstr ""

#: ../../../livepatch/api:17: kernel/livepatch/shadow.c:206
msgid "get existing or allocate a new shadow variable"
msgstr ""

#: ../../../livepatch/api:17: kernel/livepatch/shadow.c:213
msgid ""
"Returns a pointer to existing shadow data if an <obj, id> shadow variable is "
"already present.  Otherwise, it creates a new shadow variable like "
"klp_shadow_alloc()."
msgstr ""

#: ../../../livepatch/api:17: kernel/livepatch/shadow.c:217
msgid ""
"This function guarantees that only one shadow variable exists with the given "
"**id** for the given **obj**.  It also guarantees that the constructor "
"function will be called only when the variable did not exist before.  The "
"cost is that **ctor** is called in atomic context under a spin lock."
msgstr ""

#: ../../../livepatch/api:17: kernel/livepatch/shadow.c:244
msgid "detach and free a <obj, id> shadow variable"
msgstr ""

#: ../../../livepatch/api:17: kernel/livepatch/shadow.c:248
#: kernel/livepatch/shadow.c:278
msgid "``klp_shadow_dtor_t dtor``"
msgstr ""

#: ../../../livepatch/api:17: kernel/livepatch/shadow.c:247
#: kernel/livepatch/shadow.c:277
msgid ""
"custom callback that can be used to unregister the variable and/or free data "
"that the shadow variable points to (optional)"
msgstr ""

#: ../../../livepatch/api:17: kernel/livepatch/shadow.c:249
msgid ""
"This function releases the memory for this <obj, id> shadow variable "
"instance, callers should stop referencing it accordingly."
msgstr ""

#: ../../../livepatch/api:17: kernel/livepatch/shadow.c:275
msgid "detach and free all <_, id> shadow variables"
msgstr ""

#: ../../../livepatch/api:17: kernel/livepatch/shadow.c:279
msgid ""
"This function releases the memory for all <_, id> shadow variable instances, "
"callers should stop referencing them accordingly."
msgstr ""

#: ../../../livepatch/api.rst:21
msgid "System State Changes"
msgstr ""

#: ../../../livepatch/api:23: kernel/livepatch/state.c:19
msgid "get information about system state modified by the given patch"
msgstr ""

#: ../../../livepatch/api:23: kernel/livepatch/state.c:21
msgid "livepatch that modifies the given system state"
msgstr ""

#: ../../../livepatch/api:23: kernel/livepatch/state.c:22
#: kernel/livepatch/state.c:47
msgid "custom identifier of the modified system state"
msgstr ""

#: ../../../livepatch/api:23: kernel/livepatch/state.c:23
msgid "Checks whether the given patch modifies the given system state."
msgstr ""

#: ../../../livepatch/api:23: kernel/livepatch/state.c:25
msgid ""
"The function can be called either from pre/post (un)patch callbacks or from "
"the kernel code added by the livepatch."
msgstr ""

#: ../../../livepatch/api:23: kernel/livepatch/state.c:29
msgid "pointer to struct klp_state when found, otherwise NULL."
msgstr ""

#: ../../../livepatch/api:23: kernel/livepatch/state.c:45
msgid ""
"get information about system state modified by the already installed "
"livepatches"
msgstr ""

#: ../../../livepatch/api:23: kernel/livepatch/state.c:48
msgid ""
"Checks whether already installed livepatches modify the given system state."
msgstr ""

#: ../../../livepatch/api:23: kernel/livepatch/state.c:51
msgid ""
"The same system state can be modified by more non-cumulative livepatches. It "
"is expected that the latest livepatch has the most up-to-date information."
msgstr ""

#: ../../../livepatch/api:23: kernel/livepatch/state.c:55
msgid ""
"The function can be called only during transition when a new livepatch is "
"being enabled or when such a transition is reverted. It is typically called "
"only from pre/post (un)patch callbacks."
msgstr ""

#: ../../../livepatch/api:23: kernel/livepatch/state.c:61
msgid ""
"pointer to the latest struct klp_state from already installed livepatches, "
"NULL when not found."
msgstr ""

#: ../../../livepatch/api.rst:27
msgid "Object Types"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:26
msgid "function structure for live patching"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:30
#: include/linux/livepatch.h:87 include/linux/livepatch.h:109
#: include/linux/livepatch.h:137 include/linux/livepatch.h:149
msgid "**Definition**::"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:46
#: include/linux/livepatch.h:97 include/linux/livepatch.h:123
#: include/linux/livepatch.h:145 include/linux/livepatch.h:165
msgid "**Members**"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:27
msgid "``old_name``"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:28
msgid "name of the function to be patched"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:28
msgid "``new_func``"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:29
msgid "pointer to the patched function code"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:29
msgid "``old_sympos``"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:30
msgid ""
"a hint indicating which symbol position the old function can be found "
"(optional)"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:31
msgid "``old_func``"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:32
msgid "pointer to the function being patched"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:32
#: include/linux/livepatch.h:109 include/linux/livepatch.h:151
msgid "``kobj``"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:33
#: include/linux/livepatch.h:110 include/linux/livepatch.h:152
msgid "kobject for sysfs resources"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:33
#: include/linux/livepatch.h:111
msgid "``node``"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:34
msgid "list node for klp_object func_list"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:34
msgid "``stack_node``"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:35
msgid "list node for klp_ops func_stack list"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:35
msgid "``old_size``"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:36
msgid "size of the old function"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:36
msgid "``new_size``"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:37
msgid "size of the new function"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:37
msgid "``nop``"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:38
msgid "temporary patch to use the original code again; dyn. allocated"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:38
#: include/linux/livepatch.h:115
msgid "``patched``"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:39
msgid "the func has been added to the klp_ops list"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:39
msgid "``transition``"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:40
msgid "the func is currently being applied or reverted"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:40
msgid ""
"The patched and transition variables define the func's patching state.  When "
"patching, a func is always in one of the following states:"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:43
msgid ""
"patched=0 transition=0: unpatched patched=0 transition=1: unpatched, "
"temporary starting state patched=1 transition=1: patched, may be visible to "
"some tasks patched=1 transition=0: patched, visible to all tasks"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:48
msgid "And when unpatching, it goes in the reverse order:"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:50
msgid ""
"patched=1 transition=0: patched, visible to all tasks patched=1 "
"transition=1: patched, may be visible to some tasks patched=0 transition=1: "
"unpatched, temporary ending state patched=0 transition=0: unpatched"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:83
msgid "pre/post live-(un)patch callback structure"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:84
msgid "``pre_patch``"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:85
msgid "executed before code patching"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:85
msgid "``post_patch``"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:86
msgid "executed after code patching"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:86
msgid "``pre_unpatch``"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:87
msgid "executed before code unpatching"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:87
msgid "``post_unpatch``"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:88
msgid "executed after code unpatching"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:88
msgid "``post_unpatch_enabled``"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:89
msgid "flag indicating if post-unpatch callback should run"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:90
msgid ""
"All callbacks are optional.  Only the pre-patch callback, if provided, will "
"be unconditionally executed.  If the parent klp_object fails to patch for "
"any reason, including a non-zero error status returned from the pre-patch "
"callback, no further callbacks will be executed."
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:105
msgid "kernel object structure for live patching"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:106
msgid "``name``"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:107
msgid "module name (or NULL for vmlinux)"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:107
msgid "``funcs``"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:108
msgid "function entries for functions to be patched in the object"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:108
msgid "``callbacks``"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:109
msgid "functions to be executed pre/post (un)patching"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:110
msgid "``func_list``"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:111
msgid "dynamic list of the function entries"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:112
msgid "list node for klp_patch obj_list"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:112
#: include/linux/livepatch.h:146
msgid "``mod``"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:113
msgid "kernel module associated with the patched object (NULL for vmlinux)"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:114
msgid "``dynamic``"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:115
msgid "temporary object for nop functions; dynamically allocated"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:116
msgid "the object's funcs have been added to the klp_ops list"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:133
msgid "state of the system modified by the livepatch"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:134
msgid "``id``"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:135
msgid "system state identifier (non-zero)"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:135
msgid "``version``"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:136
msgid "version of the change"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:136
msgid "``data``"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:137
msgid "custom data"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:145
msgid "patch structure for live patching"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:147
msgid "reference to the live patch module"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:147
msgid "``objs``"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:148
msgid "object entries for kernel objects to be patched"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:148
msgid "``states``"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:149
msgid "system states that can get modified"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:149
msgid "``replace``"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:150
msgid "replace all actively used patches"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:150
msgid "``list``"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:151
msgid "list node for global list of actively used patches"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:152
msgid "``obj_list``"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:153
msgid "dynamic list of the object entries"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:153
msgid "``enabled``"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:154
msgid "the patch is enabled (but operation may be incomplete)"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:154
msgid "``forced``"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:155
msgid "was involved in a forced transition"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:155
msgid "``free_work``"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:156
msgid "patch cleanup from workqueue-context"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:156
msgid "``finish``"
msgstr ""

#: ../../../livepatch/api:29: include/linux/livepatch.h:157
msgid "for waiting till it is safe to remove the patch module"
msgstr ""
