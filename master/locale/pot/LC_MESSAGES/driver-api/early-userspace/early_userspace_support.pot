# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../driver-api/early-userspace/early_userspace_support.rst:3
msgid "Early userspace support"
msgstr ""

#: ../../../driver-api/early-userspace/early_userspace_support.rst:5
msgid "Last update: 2004-12-20 tlh"
msgstr ""

#: ../../../driver-api/early-userspace/early_userspace_support.rst:8
msgid ""
"\"Early userspace\" is a set of libraries and programs that provide various "
"pieces of functionality that are important enough to be available while a "
"Linux kernel is coming up, but that don't need to be run inside the kernel "
"itself."
msgstr ""

#: ../../../driver-api/early-userspace/early_userspace_support.rst:13
msgid "It consists of several major infrastructure components:"
msgstr ""

#: ../../../driver-api/early-userspace/early_userspace_support.rst:15
msgid ""
"gen_init_cpio, a program that builds a cpio-format archive containing a root "
"filesystem image.  This archive is compressed, and the compressed image is "
"linked into the kernel image."
msgstr ""

#: ../../../driver-api/early-userspace/early_userspace_support.rst:18
msgid ""
"initramfs, a chunk of code that unpacks the compressed cpio image midway "
"through the kernel boot process."
msgstr ""

#: ../../../driver-api/early-userspace/early_userspace_support.rst:20
msgid ""
"klibc, a userspace C library, currently packaged separately, that is "
"optimized for correctness and small size."
msgstr ""

#: ../../../driver-api/early-userspace/early_userspace_support.rst:23
msgid ""
"The cpio file format used by initramfs is the \"newc\" (aka \"cpio -H "
"newc\") format, and is documented in the file \"buffer-format.txt\".  There "
"are two ways to add an early userspace image: specify an existing cpio "
"archive to be used as the image or have the kernel build process build the "
"image from specifications."
msgstr ""

#: ../../../driver-api/early-userspace/early_userspace_support.rst:30
msgid "CPIO ARCHIVE method"
msgstr ""

#: ../../../driver-api/early-userspace/early_userspace_support.rst:32
msgid ""
"You can create a cpio archive that contains the early userspace image. Your "
"cpio archive should be specified in CONFIG_INITRAMFS_SOURCE and it will be "
"used directly.  Only a single cpio file may be specified in "
"CONFIG_INITRAMFS_SOURCE and directory and file names are not allowed in "
"combination with a cpio archive."
msgstr ""

#: ../../../driver-api/early-userspace/early_userspace_support.rst:39
msgid "IMAGE BUILDING method"
msgstr ""

#: ../../../driver-api/early-userspace/early_userspace_support.rst:41
msgid ""
"The kernel build process can also build an early userspace image from source "
"parts rather than supplying a cpio archive.  This method provides a way to "
"create images with root-owned files even though the image was built by an "
"unprivileged user."
msgstr ""

#: ../../../driver-api/early-userspace/early_userspace_support.rst:46
msgid ""
"The image is specified as one or more sources in CONFIG_INITRAMFS_SOURCE.  "
"Sources can be either directories or files - cpio archives are *not* allowed "
"when building from sources."
msgstr ""

#: ../../../driver-api/early-userspace/early_userspace_support.rst:50
msgid ""
"A source directory will have it and all of its contents packaged.  The "
"specified directory name will be mapped to '/'.  When packaging a directory, "
"limited user and group ID translation can be performed. INITRAMFS_ROOT_UID "
"can be set to a user ID that needs to be mapped to user root (0).  "
"INITRAMFS_ROOT_GID can be set to a group ID that needs to be mapped to group "
"root (0)."
msgstr ""

#: ../../../driver-api/early-userspace/early_userspace_support.rst:57
msgid ""
"A source file must be directives in the format required by the usr/"
"gen_init_cpio utility (run 'usr/gen_init_cpio -h' to get the file format).  "
"The directives in the file will be passed directly to usr/gen_init_cpio."
msgstr ""

#: ../../../driver-api/early-userspace/early_userspace_support.rst:62
msgid ""
"When a combination of directories and files are specified then the initramfs "
"image will be an aggregate of all of them.  In this way a user can create a "
"'root-image' directory and install all files into it. Because device-special "
"files cannot be created by a unprivileged user, special files can be listed "
"in a 'root-files' file.  Both 'root-image' and 'root-files' can be listed in "
"CONFIG_INITRAMFS_SOURCE and a complete early userspace image can be built by "
"an unprivileged user."
msgstr ""

#: ../../../driver-api/early-userspace/early_userspace_support.rst:70
msgid ""
"As a technical note, when directories and files are specified, the entire "
"CONFIG_INITRAMFS_SOURCE is passed to usr/gen_initramfs.sh.  This means that "
"CONFIG_INITRAMFS_SOURCE can really be interpreted as any legal argument to "
"gen_initramfs.sh.  If a directory is specified as an argument then the "
"contents are scanned, uid/gid translation is performed, and usr/"
"gen_init_cpio file directives are output.  If a directory is specified as an "
"argument to usr/gen_initramfs.sh then the contents of the file are simply "
"copied to the output.  All of the output directives from directory scanning "
"and file contents copying are processed by usr/gen_init_cpio."
msgstr ""

#: ../../../driver-api/early-userspace/early_userspace_support.rst:82
msgid "See also 'usr/gen_initramfs.sh -h'."
msgstr ""

#: ../../../driver-api/early-userspace/early_userspace_support.rst:85
msgid "Where's this all leading?"
msgstr ""

#: ../../../driver-api/early-userspace/early_userspace_support.rst:87
msgid ""
"The klibc distribution contains some of the necessary software to make early "
"userspace useful.  The klibc distribution is currently maintained separately "
"from the kernel."
msgstr ""

#: ../../../driver-api/early-userspace/early_userspace_support.rst:91
msgid ""
"You can obtain somewhat infrequent snapshots of klibc from https://www."
"kernel.org/pub/linux/libs/klibc/"
msgstr ""

#: ../../../driver-api/early-userspace/early_userspace_support.rst:94
msgid ""
"For active users, you are better off using the klibc git repository, at "
"https://git.kernel.org/?p=libs/klibc/klibc.git"
msgstr ""

#: ../../../driver-api/early-userspace/early_userspace_support.rst:97
msgid ""
"The standalone klibc distribution currently provides three components, in "
"addition to the klibc library:"
msgstr ""

#: ../../../driver-api/early-userspace/early_userspace_support.rst:100
msgid ""
"ipconfig, a program that configures network interfaces.  It can configure "
"them statically, or use DHCP to obtain information dynamically (aka \"IP "
"autoconfiguration\")."
msgstr ""

#: ../../../driver-api/early-userspace/early_userspace_support.rst:103
msgid "nfsmount, a program that can mount an NFS filesystem."
msgstr ""

#: ../../../driver-api/early-userspace/early_userspace_support.rst:104
msgid ""
"kinit, the \"glue\" that uses ipconfig and nfsmount to replace the old "
"support for IP autoconfig, mount a filesystem over NFS, and continue system "
"boot using that filesystem as root."
msgstr ""

#: ../../../driver-api/early-userspace/early_userspace_support.rst:108
msgid "kinit is built as a single statically linked binary to save space."
msgstr ""

#: ../../../driver-api/early-userspace/early_userspace_support.rst:110
msgid ""
"Eventually, several more chunks of kernel functionality will hopefully move "
"to early userspace:"
msgstr ""

#: ../../../driver-api/early-userspace/early_userspace_support.rst:113
msgid ""
"Almost all of init/do_mounts* (the beginning of this is already in place)"
msgstr ""

#: ../../../driver-api/early-userspace/early_userspace_support.rst:115
msgid "ACPI table parsing"
msgstr ""

#: ../../../driver-api/early-userspace/early_userspace_support.rst:116
msgid ""
"Insert unwieldy subsystem that doesn't really need to be in kernel space here"
msgstr ""

#: ../../../driver-api/early-userspace/early_userspace_support.rst:119
msgid ""
"If kinit doesn't meet your current needs and you've got bytes to burn, the "
"klibc distribution includes a small Bourne-compatible shell (ash) and a "
"number of other utilities, so you can replace kinit and build custom "
"initramfs images that meet your needs exactly."
msgstr ""

#: ../../../driver-api/early-userspace/early_userspace_support.rst:124
msgid ""
"For questions and help, you can sign up for the early userspace mailing list "
"at https://www.zytor.com/mailman/listinfo/klibc"
msgstr ""

#: ../../../driver-api/early-userspace/early_userspace_support.rst:128
msgid "How does it work?"
msgstr ""

#: ../../../driver-api/early-userspace/early_userspace_support.rst:130
msgid "The kernel has currently 3 ways to mount the root filesystem:"
msgstr ""

#: ../../../driver-api/early-userspace/early_userspace_support.rst:132
msgid ""
"all required device and filesystem drivers compiled into the kernel, no "
"initrd.  init/main.c:init() will call prepare_namespace() to mount the final "
"root filesystem, based on the root= option and optional init= to run some "
"other init binary than listed at the end of init/main.c:init()."
msgstr ""

#: ../../../driver-api/early-userspace/early_userspace_support.rst:137
msgid ""
"some device and filesystem drivers built as modules and stored in an "
"initrd.  The initrd must contain a binary '/linuxrc' which is supposed to "
"load these driver modules.  It is also possible to mount the final root "
"filesystem via linuxrc and use the pivot_root syscall.  The initrd is "
"mounted and executed via prepare_namespace()."
msgstr ""

#: ../../../driver-api/early-userspace/early_userspace_support.rst:143
msgid ""
"using initramfs.  The call to prepare_namespace() must be skipped. This "
"means that a binary must do all the work.  Said binary can be stored into "
"initramfs either via modifying usr/gen_init_cpio.c or via the new initrd "
"format, an cpio archive.  It must be called \"/init\".  This binary is "
"responsible to do all the things prepare_namespace() would do."
msgstr ""

#: ../../../driver-api/early-userspace/early_userspace_support.rst:149
msgid ""
"To maintain backwards compatibility, the /init binary will only run if it "
"comes via an initramfs cpio archive.  If this is not the case, init/main.c:"
"init() will run prepare_namespace() to mount the final root and exec one of "
"the predefined init binaries."
msgstr ""

#: ../../../driver-api/early-userspace/early_userspace_support.rst:154
msgid "Bryan O'Sullivan <bos@serpentine.com>"
msgstr ""
