# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../driver-api/console.rst:5
msgid "Console Drivers"
msgstr ""

#: ../../../driver-api/console.rst:7
msgid ""
"The Linux kernel has 2 general types of console drivers.  The first type is "
"assigned by the kernel to all the virtual consoles during the boot process. "
"This type will be called 'system driver', and only one system driver is "
"allowed to exist. The system driver is persistent and it can never be "
"unloaded, though it may become inactive."
msgstr ""

#: ../../../driver-api/console.rst:13
msgid ""
"The second type has to be explicitly loaded and unloaded. This will be "
"called 'modular driver' by this document. Multiple modular drivers can "
"coexist at any time with each driver sharing the console with other drivers "
"including the system driver. However, modular drivers cannot take over the "
"console that is currently occupied by another modular driver. (Exception: "
"Drivers that call do_take_over_console() will succeed in the takeover "
"regardless of the type of driver occupying the consoles.) They can only take "
"over the console that is occupied by the system driver. In the same token, "
"if the modular driver is released by the console, the system driver will "
"take over."
msgstr ""

#: ../../../driver-api/console.rst:23
msgid "Modular drivers, from the programmer's point of view, have to call::"
msgstr ""

#: ../../../driver-api/console.rst:29
msgid "In newer kernels, the following are also available::"
msgstr ""

#: ../../../driver-api/console.rst:34
msgid ""
"If sysfs is enabled, the contents of /sys/class/vtconsole can be examined. "
"This shows the console backends currently registered by the system which are "
"named vtcon<n> where <n> is an integer from 0 to 15. Thus::"
msgstr ""

#: ../../../driver-api/console.rst:42
msgid "Each directory in /sys/class/vtconsole has 3 files::"
msgstr ""

#: ../../../driver-api/console.rst:47
msgid "What do these files signify?"
msgstr ""

#: ../../../driver-api/console.rst:49
msgid ""
"bind - this is a read/write file. It shows the status of the driver if read, "
"or acts to bind or unbind the driver to the virtual consoles when written "
"to. The possible values are:"
msgstr ""

#: ../../../driver-api/console.rst:53
msgid "0"
msgstr ""

#: ../../../driver-api/console.rst:54
msgid ""
"means the driver is not bound and if echo'ed, commands the driver to unbind"
msgstr ""

#: ../../../driver-api/console.rst:57
msgid "1"
msgstr ""

#: ../../../driver-api/console.rst:58
msgid "means the driver is bound and if echo'ed, commands the driver to bind"
msgstr ""

#: ../../../driver-api/console.rst:61
msgid "name - read-only file. Shows the name of the driver in this format::"
msgstr ""

#: ../../../driver-api/console.rst:77
msgid "uevent - ignore this file"
msgstr ""

#: ../../../driver-api/console.rst:79
msgid ""
"When unbinding, the modular driver is detached first, and then the system "
"driver takes over the consoles vacated by the driver. Binding, on the other "
"hand, will bind the driver to the consoles that are currently occupied by a "
"system driver."
msgstr ""

#: ../../../driver-api/console.rst:84
msgid "NOTE1:"
msgstr ""

#: ../../../driver-api/console.rst:85
msgid "Binding and unbinding must be selected in Kconfig. It's under::"
msgstr ""

#: ../../../driver-api/console.rst:91
msgid "NOTE2:"
msgstr ""

#: ../../../driver-api/console.rst:92
msgid ""
"If any of the virtual consoles are in KD_GRAPHICS mode, then binding or "
"unbinding will not succeed. An example of an application that sets the "
"console to KD_GRAPHICS is X."
msgstr ""

#: ../../../driver-api/console.rst:96
msgid ""
"How useful is this feature? This is very useful for console driver "
"developers. By unbinding the driver from the console layer, one can unload "
"the driver, make changes, recompile, reload and rebind the driver without "
"any need for rebooting the kernel. For regular users who may want to switch "
"from framebuffer console to VGA console and vice versa, this feature also "
"makes this possible. (NOTE NOTE NOTE: Please read fbcon.txt under "
"Documentation/fb for more details.)"
msgstr ""

#: ../../../driver-api/console.rst:105
msgid "Notes for developers"
msgstr ""

#: ../../../driver-api/console.rst:107
msgid "do_take_over_console() is now broken up into::"
msgstr ""

#: ../../../driver-api/console.rst:112
msgid ""
"give_up_console() is a wrapper to do_unregister_con_driver(), and a driver "
"must be fully unbound for this call to succeed. con_is_bound() will check if "
"the driver is bound or not."
msgstr ""

#: ../../../driver-api/console.rst:117
msgid "Guidelines for console driver writers"
msgstr ""

#: ../../../driver-api/console.rst:119
msgid ""
"In order for binding to and unbinding from the console to properly work, "
"console drivers must follow these guidelines:"
msgstr ""

#: ../../../driver-api/console.rst:122
msgid ""
"All drivers, except system drivers, must call either "
"do_register_con_driver() or do_take_over_console(). do_register_con_driver() "
"will just add the driver to the console's internal list. It won't take over "
"the console. do_take_over_console(), as it name implies, will also take over "
"(or bind to) the console."
msgstr ""

#: ../../../driver-api/console.rst:128
msgid ""
"All resources allocated during con->con_init() must be released in con-"
">con_deinit()."
msgstr ""

#: ../../../driver-api/console.rst:131
msgid ""
"All resources allocated in con->con_startup() must be released when the "
"driver, which was previously bound, becomes unbound.  The console layer does "
"not have a complementary call to con->con_startup() so it's up to the driver "
"to check when it's legal to release these resources. Calling con_is_bound() "
"in con->con_deinit() will help.  If the call returned false(), then it's "
"safe to release the resources.  This balance has to be ensured because con-"
">con_startup() can be called again when a request to rebind the driver to "
"the console arrives."
msgstr ""

#: ../../../driver-api/console.rst:140
msgid ""
"Upon exit of the driver, ensure that the driver is totally unbound. If the "
"condition is satisfied, then the driver must call do_unregister_con_driver() "
"or give_up_console()."
msgstr ""

#: ../../../driver-api/console.rst:144
msgid ""
"do_unregister_con_driver() can also be called on conditions which make it "
"impossible for the driver to service console requests.  This can happen with "
"the framebuffer console that suddenly lost all of its drivers."
msgstr ""

#: ../../../driver-api/console.rst:148
msgid ""
"The current crop of console drivers should still work correctly, but binding "
"and unbinding them may cause problems. With minimal fixes, these drivers can "
"be made to work correctly."
msgstr ""

#: ../../../driver-api/console.rst:152
msgid "Antonino Daplas <adaplas@pol.net>"
msgstr ""
