# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../driver-api/thermal/power_allocator.rst:3
msgid "Power allocator governor tunables"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:6
msgid "Trip points"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:8
msgid ""
"The governor works optimally with the following two passive trip points:"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:10
msgid ""
"\"switch on\" trip point: temperature above which the governor control loop "
"starts operating.  This is the first passive trip point of the thermal zone."
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:14
msgid ""
"\"desired temperature\" trip point: it should be higher than the \"switch "
"on\" trip point.  This the target temperature the governor is controlling "
"for.  This is the last passive trip point of the thermal zone."
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:20
msgid "PID Controller"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:22
msgid ""
"The power allocator governor implements a Proportional-Integral-Derivative "
"controller (PID controller) with temperature as the control input and power "
"as the controlled output:"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:26
msgid ""
"P_max = k_p * e + k_i * err_integral + k_d * diff_err + sustainable_power"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:28
msgid "where"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:29
msgid "e = desired_temperature - current_temperature"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:30
msgid "err_integral is the sum of previous errors"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:31
msgid "diff_err = e - previous_error"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:33
msgid "It is similar to the one depicted below::"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:61
msgid "Sustainable power"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:63
msgid ""
"An estimate of the sustainable dissipatable power (in mW) should be provided "
"while registering the thermal zone.  This estimates the sustained power that "
"can be dissipated at the desired control temperature.  This is the maximum "
"sustained power for allocation at the desired maximum temperature.  The "
"actual sustained power can vary for a number of reasons.  The closed loop "
"controller will take care of variations such as environmental conditions, "
"and some factors related to the speed-grade of the silicon.  "
"`sustainable_power` is therefore simply an estimate, and may be tuned to "
"affect the aggressiveness of the thermal ramp. For reference, the "
"sustainable power of a 4\" phone is typically 2000mW, while on a 10\" tablet "
"is around 4500mW (may vary depending on screen size). It is possible to have "
"the power value expressed in an abstract scale. The sustained power should "
"be aligned to the scale used by the related cooling devices."
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:78
msgid ""
"If you are using device tree, do add it as a property of the thermal-zone.  "
"For example::"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:88
msgid ""
"Instead, if the thermal zone is registered from the platform code, pass a "
"`thermal_zone_params` that has a `sustainable_power`.  If no "
"`thermal_zone_params` were being passed, then something like below will "
"suffice::"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:97
msgid ""
"and then pass `tz_params` as the 5th parameter to "
"`thermal_zone_device_register()`"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:101
msgid "k_po and k_pu"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:103
msgid ""
"The implementation of the PID controller in the power allocator thermal "
"governor allows the configuration of two proportional term constants: `k_po` "
"and `k_pu`.  `k_po` is the proportional term constant during temperature "
"overshoot periods (current temperature is above \"desired temperature\" trip "
"point).  Conversely, `k_pu` is the proportional term constant during "
"temperature undershoot periods (current temperature below \"desired "
"temperature\" trip point)."
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:111
msgid ""
"These controls are intended as the primary mechanism for configuring the "
"permitted thermal \"ramp\" of the system.  For instance, a lower `k_pu` "
"value will provide a slower ramp, at the cost of capping available capacity "
"at a low temperature.  On the other hand, a high value of `k_pu` will result "
"in the governor granting very high power while temperature is low, and may "
"lead to temperature overshooting."
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:118
msgid "The default value for `k_pu` is::"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:122
msgid ""
"This means that at `switch_on_temp` the output of the controller's "
"proportional term will be 2 * `sustainable_power`.  The default value for "
"`k_po` is::"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:128
msgid ""
"Focusing on the proportional and feed forward values of the PID controller "
"equation we have::"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:133
msgid ""
"The proportional term is proportional to the difference between the desired "
"temperature and the current one.  When the current temperature is the "
"desired one, then the proportional component is zero and `P_max` = "
"`sustainable_power`.  That is, the system should operate in thermal "
"equilibrium under constant load.  `sustainable_power` is only an estimate, "
"which is the reason for closed-loop control such as this."
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:140
msgid "Expanding `k_pu` we get::"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:145
msgid "where:"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:147
msgid "T_set is the desired temperature"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:148
msgid "T is the current temperature"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:149
msgid "T_on is the switch on temperature"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:151
msgid ""
"When the current temperature is the switch_on temperature, the above formula "
"becomes::"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:158
msgid ""
"Therefore, the proportional term alone linearly decreases power from 3 * "
"`sustainable_power` to `sustainable_power` as the temperature rises from the "
"switch on temperature to the desired temperature."
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:163
msgid "k_i and integral_cutoff"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:165
msgid ""
"`k_i` configures the PID loop's integral term constant.  This term allows "
"the PID controller to compensate for long term drift and for the quantized "
"nature of the output control: cooling devices can't set the exact power that "
"the governor requests.  When the temperature error is below "
"`integral_cutoff`, errors are accumulated in the integral term.  This term "
"is then multiplied by `k_i` and the result added to the output of the "
"controller.  Typically `k_i` is set low (1 or 2) and `integral_cutoff` is 0."
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:175
msgid "k_d"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:177
msgid ""
"`k_d` configures the PID loop's derivative term constant.  It's recommended "
"to leave it as the default: 0."
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:181
msgid "Cooling device power API"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:183
msgid ""
"Cooling devices controlled by this governor must supply the additional "
"\"power\" API in their `cooling_device_ops`.  It consists on three ops:"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:192
#: ../../../driver-api/thermal/power_allocator.rst:211
#: ../../../driver-api/thermal/power_allocator.rst:230
msgid "@cdev:"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:193
#: ../../../driver-api/thermal/power_allocator.rst:212
#: ../../../driver-api/thermal/power_allocator.rst:231
msgid "The `struct thermal_cooling_device` pointer"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:194
#: ../../../driver-api/thermal/power_allocator.rst:213
msgid "@tz:"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:195
#: ../../../driver-api/thermal/power_allocator.rst:214
msgid "thermal zone in which we are currently operating"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:196
#: ../../../driver-api/thermal/power_allocator.rst:217
#: ../../../driver-api/thermal/power_allocator.rst:232
msgid "@power:"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:197
msgid "pointer in which to store the calculated power"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:199
msgid ""
"`get_requested_power()` calculates the power requested by the device in "
"milliwatts and stores it in @power .  It should return 0 on success, -E* on "
"failure.  This is currently used by the power allocator governor to "
"calculate how much power to give to each cooling device."
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:215
#: ../../../driver-api/thermal/power_allocator.rst:234
msgid "@state:"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:216
msgid "A cooling device state"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:218
msgid "pointer in which to store the equivalent power"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:220
msgid ""
"Convert cooling device state @state into power consumption in milliwatts and "
"store it in @power.  It should return 0 on success, -E* on failure.  This is "
"currently used by thermal core to calculate the maximum power that an actor "
"can consume."
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:233
msgid "power in milliwatts"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:235
msgid "pointer in which to store the resulting state"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:237
msgid ""
"Calculate a cooling device state that would make the device consume at most "
"@power mW and store it in @state.  It should return 0 on success, -E* on "
"failure.  This is currently used by the thermal core to convert a given "
"power set by the power allocator governor to a state that the cooling device "
"can set.  It is a function because this conversion may depend on external "
"factors that may change so this function should the best conversion given "
"\"current circumstances\"."
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:246
msgid "Cooling device weights"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:248
msgid ""
"Weights are a mechanism to bias the allocation among cooling devices.  They "
"express the relative power efficiency of different cooling devices.  Higher "
"weight can be used to express higher power efficiency.  Weighting is "
"relative such that if each cooling device has a weight of one they are "
"considered equal.  This is particularly useful in heterogeneous systems "
"where two cooling devices may perform the same kind of compute, but with "
"different efficiency.  For example, a system with two different types of "
"processors."
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:257
msgid ""
"If the thermal zone is registered using `thermal_zone_device_register()` (i."
"e., platform code), then weights are passed as part of the thermal zone's "
"`thermal_bind_parameters`. If the platform is registered using device tree, "
"then they are passed as the `contribution` property of each map in the "
"`cooling-maps` node."
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:264
msgid "Limitations of the power allocator governor"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:266
msgid ""
"The power allocator governor's PID controller works best if there is a "
"periodic tick.  If you have a driver that calls "
"`thermal_zone_device_update()` (or anything that ends up calling the "
"governor's `throttle()` function) repetitively, the governor response won't "
"be very good.  Note that this is not particular to this governor, step-wise "
"will also misbehave if you call its throttle() faster than the normal "
"thermal framework tick (due to interrupts for example) as it will overreact."
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:276
msgid "Energy Model requirements"
msgstr ""

#: ../../../driver-api/thermal/power_allocator.rst:278
msgid ""
"Another important thing is the consistent scale of the power values provided "
"by the cooling devices. All of the cooling devices in a single thermal zone "
"should have power values reported either in milli-Watts or scaled to the "
"same 'abstract scale'."
msgstr ""
