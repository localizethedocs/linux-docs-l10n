# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-27 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../driver-api/mtdnand.rst:3
msgid "MTD NAND Driver Programming Interface"
msgstr ""

#: ../../../driver-api/mtdnand.rst:0
msgid "Author"
msgstr ""

#: ../../../driver-api/mtdnand.rst:5
msgid "Thomas Gleixner"
msgstr ""

#: ../../../driver-api/mtdnand.rst:8
msgid "Introduction"
msgstr ""

#: ../../../driver-api/mtdnand.rst:10
msgid ""
"The generic NAND driver supports almost all NAND and AG-AND based chips and "
"connects them to the Memory Technology Devices (MTD) subsystem of the Linux "
"Kernel."
msgstr ""

#: ../../../driver-api/mtdnand.rst:14
msgid ""
"This documentation is provided for developers who want to implement board "
"drivers or filesystem drivers suitable for NAND devices."
msgstr ""

#: ../../../driver-api/mtdnand.rst:18
msgid "Known Bugs And Assumptions"
msgstr ""

#: ../../../driver-api/mtdnand.rst:20
msgid "None."
msgstr ""

#: ../../../driver-api/mtdnand.rst:23
msgid "Documentation hints"
msgstr ""

#: ../../../driver-api/mtdnand.rst:25
msgid ""
"The function and structure docs are autogenerated. Each function and struct "
"member has a short description which is marked with an [XXX] identifier. The "
"following chapters explain the meaning of those identifiers."
msgstr ""

#: ../../../driver-api/mtdnand.rst:31
msgid "Function identifiers [XXX]"
msgstr ""

#: ../../../driver-api/mtdnand.rst:33
msgid ""
"The functions are marked with [XXX] identifiers in the short comment. The "
"identifiers explain the usage and scope of the functions. Following "
"identifiers are used:"
msgstr ""

#: ../../../driver-api/mtdnand.rst:37
msgid "[MTD Interface]"
msgstr ""

#: ../../../driver-api/mtdnand.rst:39
msgid ""
"These functions provide the interface to the MTD kernel API. They are not "
"replaceable and provide functionality which is complete hardware independent."
msgstr ""

#: ../../../driver-api/mtdnand.rst:43
msgid "[NAND Interface]"
msgstr ""

#: ../../../driver-api/mtdnand.rst:45
msgid ""
"These functions are exported and provide the interface to the NAND kernel "
"API."
msgstr ""

#: ../../../driver-api/mtdnand.rst:48
msgid "[GENERIC]"
msgstr ""

#: ../../../driver-api/mtdnand.rst:50
msgid ""
"Generic functions are not replaceable and provide functionality which is "
"complete hardware independent."
msgstr ""

#: ../../../driver-api/mtdnand.rst:53
msgid "[DEFAULT]"
msgstr ""

#: ../../../driver-api/mtdnand.rst:55
msgid ""
"Default functions provide hardware related functionality which is suitable "
"for most of the implementations. These functions can be replaced by the "
"board driver if necessary. Those functions are called via pointers in the "
"NAND chip description structure. The board driver can set the functions "
"which should be replaced by board dependent functions before calling "
"nand_scan(). If the function pointer is NULL on entry to nand_scan() then "
"the pointer is set to the default function which is suitable for the "
"detected chip type."
msgstr ""

#: ../../../driver-api/mtdnand.rst:65
msgid "Struct member identifiers [XXX]"
msgstr ""

#: ../../../driver-api/mtdnand.rst:67
msgid ""
"The struct members are marked with [XXX] identifiers in the comment. The "
"identifiers explain the usage and scope of the members. Following "
"identifiers are used:"
msgstr ""

#: ../../../driver-api/mtdnand.rst:71
msgid "[INTERN]"
msgstr ""

#: ../../../driver-api/mtdnand.rst:73
msgid ""
"These members are for NAND driver internal use only and must not be "
"modified. Most of these values are calculated from the chip geometry "
"information which is evaluated during nand_scan()."
msgstr ""

#: ../../../driver-api/mtdnand.rst:77
msgid "[REPLACEABLE]"
msgstr ""

#: ../../../driver-api/mtdnand.rst:79
msgid ""
"Replaceable members hold hardware related functions which can be provided by "
"the board driver. The board driver can set the functions which should be "
"replaced by board dependent functions before calling nand_scan(). If the "
"function pointer is NULL on entry to nand_scan() then the pointer is set to "
"the default function which is suitable for the detected chip type."
msgstr ""

#: ../../../driver-api/mtdnand.rst:86
msgid "[BOARDSPECIFIC]"
msgstr ""

#: ../../../driver-api/mtdnand.rst:88
msgid ""
"Board specific members hold hardware related information which must be "
"provided by the board driver. The board driver must set the function "
"pointers and datafields before calling nand_scan()."
msgstr ""

#: ../../../driver-api/mtdnand.rst:92
msgid "[OPTIONAL]"
msgstr ""

#: ../../../driver-api/mtdnand.rst:94
msgid ""
"Optional members can hold information relevant for the board driver. The "
"generic NAND driver code does not use this information."
msgstr ""

#: ../../../driver-api/mtdnand.rst:98
msgid "Basic board driver"
msgstr ""

#: ../../../driver-api/mtdnand.rst:100
msgid ""
"For most boards it will be sufficient to provide just the basic functions "
"and fill out some really board dependent members in the nand chip "
"description structure."
msgstr ""

#: ../../../driver-api/mtdnand.rst:105
msgid "Basic defines"
msgstr ""

#: ../../../driver-api/mtdnand.rst:107
msgid ""
"At least you have to provide a nand_chip structure and a storage for the "
"ioremap'ed chip address. You can allocate the nand_chip structure using "
"kmalloc or you can allocate it statically. The NAND chip structure embeds an "
"mtd structure which will be registered to the MTD subsystem. You can extract "
"a pointer to the mtd structure from a nand_chip pointer using the "
"nand_to_mtd() helper."
msgstr ""

#: ../../../driver-api/mtdnand.rst:114
msgid "Kmalloc based example"
msgstr ""

#: ../../../driver-api/mtdnand.rst:122
msgid "Static example"
msgstr ""

#: ../../../driver-api/mtdnand.rst:131
msgid "Partition defines"
msgstr ""

#: ../../../driver-api/mtdnand.rst:133
msgid ""
"If you want to divide your device into partitions, then define a "
"partitioning scheme suitable to your board."
msgstr ""

#: ../../../driver-api/mtdnand.rst:150
msgid "Hardware control function"
msgstr ""

#: ../../../driver-api/mtdnand.rst:152
msgid ""
"The hardware control function provides access to the control pins of the "
"NAND chip(s). The access can be done by GPIO pins or by address lines. If "
"you use address lines, make sure that the timing requirements are met."
msgstr ""

#: ../../../driver-api/mtdnand.rst:157 ../../../driver-api/mtdnand.rst:318
msgid "*GPIO based example*"
msgstr ""

#: ../../../driver-api/mtdnand.rst:174
msgid ""
"*Address lines based example.* It's assumed that the nCE pin is driven by a "
"chip select decoder."
msgstr ""

#: ../../../driver-api/mtdnand.rst:192
msgid "Device ready function"
msgstr ""

#: ../../../driver-api/mtdnand.rst:194
msgid ""
"If the hardware interface has the ready busy pin of the NAND chip connected "
"to a GPIO or other accessible I/O pin, this function is used to read back "
"the state of the pin. The function has no arguments and should return 0, if "
"the device is busy (R/B pin is low) and 1, if the device is ready (R/B pin "
"is high). If the hardware interface does not give access to the ready busy "
"pin, then the function must not be defined and the function pointer this-"
">legacy.dev_ready is set to NULL."
msgstr ""

#: ../../../driver-api/mtdnand.rst:203
msgid "Init function"
msgstr ""

#: ../../../driver-api/mtdnand.rst:205
msgid ""
"The init function allocates memory and sets up all the board specific "
"parameters and function pointers. When everything is set up nand_scan() is "
"called. This function tries to detect and identify then chip. If a chip is "
"found all the internal data fields are initialized accordingly. The "
"structure(s) have to be zeroed out first and then filled with the necessary "
"information about the device."
msgstr ""

#: ../../../driver-api/mtdnand.rst:268
msgid "Exit function"
msgstr ""

#: ../../../driver-api/mtdnand.rst:270
msgid ""
"The exit function is only necessary if the driver is compiled as a module. "
"It releases all resources which are held by the chip driver and unregisters "
"the partitions in the MTD layer."
msgstr ""

#: ../../../driver-api/mtdnand.rst:295
msgid "Advanced board driver functions"
msgstr ""

#: ../../../driver-api/mtdnand.rst:297
msgid ""
"This chapter describes the advanced functionality of the NAND driver. For a "
"list of functions which can be overridden by the board driver see the "
"documentation of the nand_chip structure."
msgstr ""

#: ../../../driver-api/mtdnand.rst:302
msgid "Multiple chip control"
msgstr ""

#: ../../../driver-api/mtdnand.rst:304
msgid ""
"The nand driver can control chip arrays. Therefore the board driver must "
"provide an own select_chip function. This function must (de)select the "
"requested chip. The function pointer in the nand_chip structure must be set "
"before calling nand_scan(). The maxchip parameter of nand_scan() defines the "
"maximum number of chips to scan for. Make sure that the select_chip function "
"can handle the requested number of chips."
msgstr ""

#: ../../../driver-api/mtdnand.rst:311
msgid ""
"The nand driver concatenates the chips to one virtual chip and provides this "
"virtual chip to the MTD layer."
msgstr ""

#: ../../../driver-api/mtdnand.rst:314
msgid ""
"*Note: The driver can only handle linear chip arrays of equally sized chips. "
"There is no support for parallel arrays which extend the buswidth.*"
msgstr ""

#: ../../../driver-api/mtdnand.rst:331
msgid ""
"*Address lines based example.* Its assumed that the nCE pins are connected "
"to an address decoder."
msgstr ""

#: ../../../driver-api/mtdnand.rst:358
msgid "Hardware ECC support"
msgstr ""

#: ../../../driver-api/mtdnand.rst:361
msgid "Functions and constants"
msgstr ""

#: ../../../driver-api/mtdnand.rst:363
msgid "The nand driver supports three different types of hardware ECC."
msgstr ""

#: ../../../driver-api/mtdnand.rst:365
msgid "NAND_ECC_HW3_256"
msgstr ""

#: ../../../driver-api/mtdnand.rst:367
msgid "Hardware ECC generator providing 3 bytes ECC per 256 byte."
msgstr ""

#: ../../../driver-api/mtdnand.rst:369
msgid "NAND_ECC_HW3_512"
msgstr ""

#: ../../../driver-api/mtdnand.rst:371
msgid "Hardware ECC generator providing 3 bytes ECC per 512 byte."
msgstr ""

#: ../../../driver-api/mtdnand.rst:373
msgid "NAND_ECC_HW6_512"
msgstr ""

#: ../../../driver-api/mtdnand.rst:375
msgid "Hardware ECC generator providing 6 bytes ECC per 512 byte."
msgstr ""

#: ../../../driver-api/mtdnand.rst:377
msgid "NAND_ECC_HW8_512"
msgstr ""

#: ../../../driver-api/mtdnand.rst:379
msgid "Hardware ECC generator providing 8 bytes ECC per 512 byte."
msgstr ""

#: ../../../driver-api/mtdnand.rst:381
msgid ""
"If your hardware generator has a different functionality add it at the "
"appropriate place in nand_base.c"
msgstr ""

#: ../../../driver-api/mtdnand.rst:384
msgid "The board driver must provide following functions:"
msgstr ""

#: ../../../driver-api/mtdnand.rst:386
msgid "enable_hwecc"
msgstr ""

#: ../../../driver-api/mtdnand.rst:388
msgid ""
"This function is called before reading / writing to the chip. Reset or "
"initialize the hardware generator in this function. The function is called "
"with an argument which let you distinguish between read and write operations."
msgstr ""

#: ../../../driver-api/mtdnand.rst:393
msgid "calculate_ecc"
msgstr ""

#: ../../../driver-api/mtdnand.rst:395
msgid ""
"This function is called after read / write from / to the chip. Transfer the "
"ECC from the hardware to the buffer. If the option NAND_HWECC_SYNDROME is "
"set then the function is only called on write. See below."
msgstr ""

#: ../../../driver-api/mtdnand.rst:400
msgid "correct_data"
msgstr ""

#: ../../../driver-api/mtdnand.rst:402
msgid ""
"In case of an ECC error this function is called for error detection and "
"correction. Return 1 respectively 2 in case the error can be corrected. If "
"the error is not correctable return -1. If your hardware generator matches "
"the default algorithm of the nand_ecc software generator then use the "
"correction function provided by nand_ecc instead of implementing duplicated "
"code."
msgstr ""

#: ../../../driver-api/mtdnand.rst:410
msgid "Hardware ECC with syndrome calculation"
msgstr ""

#: ../../../driver-api/mtdnand.rst:412
msgid ""
"Many hardware ECC implementations provide Reed-Solomon codes and calculate "
"an error syndrome on read. The syndrome must be converted to a standard Reed-"
"Solomon syndrome before calling the error correction code in the generic "
"Reed-Solomon library."
msgstr ""

#: ../../../driver-api/mtdnand.rst:417
msgid ""
"The ECC bytes must be placed immediately after the data bytes in order to "
"make the syndrome generator work. This is contrary to the usual layout used "
"by software ECC. The separation of data and out of band area is not longer "
"possible. The nand driver code handles this layout and the remaining free "
"bytes in the oob area are managed by the autoplacement code. Provide a "
"matching oob-layout in this case. See rts_from4.c and diskonchip.c for "
"implementation reference. In those cases we must also use bad block tables "
"on FLASH, because the ECC layout is interfering with the bad block marker "
"positions. See bad block table support for details."
msgstr ""

#: ../../../driver-api/mtdnand.rst:429
msgid "Bad block table support"
msgstr ""

#: ../../../driver-api/mtdnand.rst:431
msgid ""
"Most NAND chips mark the bad blocks at a defined position in the spare area. "
"Those blocks must not be erased under any circumstances as the bad block "
"information would be lost. It is possible to check the bad block mark each "
"time when the blocks are accessed by reading the spare area of the first "
"page in the block. This is time consuming so a bad block table is used."
msgstr ""

#: ../../../driver-api/mtdnand.rst:438
msgid "The nand driver supports various types of bad block tables."
msgstr ""

#: ../../../driver-api/mtdnand.rst:440
msgid "Per device"
msgstr ""

#: ../../../driver-api/mtdnand.rst:442
msgid ""
"The bad block table contains all bad block information of the device which "
"can consist of multiple chips."
msgstr ""

#: ../../../driver-api/mtdnand.rst:445
msgid "Per chip"
msgstr ""

#: ../../../driver-api/mtdnand.rst:447
msgid ""
"A bad block table is used per chip and contains the bad block information "
"for this particular chip."
msgstr ""

#: ../../../driver-api/mtdnand.rst:450
msgid "Fixed offset"
msgstr ""

#: ../../../driver-api/mtdnand.rst:452
msgid ""
"The bad block table is located at a fixed offset in the chip (device). This "
"applies to various DiskOnChip devices."
msgstr ""

#: ../../../driver-api/mtdnand.rst:455
msgid "Automatic placed"
msgstr ""

#: ../../../driver-api/mtdnand.rst:457
msgid ""
"The bad block table is automatically placed and detected either at the end "
"or at the beginning of a chip (device)"
msgstr ""

#: ../../../driver-api/mtdnand.rst:460
msgid "Mirrored tables"
msgstr ""

#: ../../../driver-api/mtdnand.rst:462
msgid ""
"The bad block table is mirrored on the chip (device) to allow updates of the "
"bad block table without data loss."
msgstr ""

#: ../../../driver-api/mtdnand.rst:465
msgid ""
"nand_scan() calls the function nand_default_bbt(). nand_default_bbt() "
"selects appropriate default bad block table descriptors depending on the "
"chip information which was retrieved by nand_scan()."
msgstr ""

#: ../../../driver-api/mtdnand.rst:470
msgid ""
"The standard policy is scanning the device for bad blocks and build a ram "
"based bad block table which allows faster access than always checking the "
"bad block information on the flash chip itself."
msgstr ""

#: ../../../driver-api/mtdnand.rst:475
msgid "Flash based tables"
msgstr ""

#: ../../../driver-api/mtdnand.rst:477
msgid ""
"It may be desired or necessary to keep a bad block table in FLASH. For AG-"
"AND chips this is mandatory, as they have no factory marked bad blocks. They "
"have factory marked good blocks. The marker pattern is erased when the block "
"is erased to be reused. So in case of powerloss before writing the pattern "
"back to the chip this block would be lost and added to the bad blocks. "
"Therefore we scan the chip(s) when we detect them the first time for good "
"blocks and store this information in a bad block table before erasing any of "
"the blocks."
msgstr ""

#: ../../../driver-api/mtdnand.rst:486
msgid ""
"The blocks in which the tables are stored are protected against accidental "
"access by marking them bad in the memory bad block table. The bad block "
"table management functions are allowed to circumvent this protection."
msgstr ""

#: ../../../driver-api/mtdnand.rst:491
msgid ""
"The simplest way to activate the FLASH based bad block table support is to "
"set the option NAND_BBT_USE_FLASH in the bbt_option field of the nand chip "
"structure before calling nand_scan(). For AG-AND chips is this done by "
"default. This activates the default FLASH based bad block table "
"functionality of the NAND driver. The default bad block table options are"
msgstr ""

#: ../../../driver-api/mtdnand.rst:498
msgid "Store bad block table per chip"
msgstr ""

#: ../../../driver-api/mtdnand.rst:500
msgid "Use 2 bits per block"
msgstr ""

#: ../../../driver-api/mtdnand.rst:502
msgid "Automatic placement at the end of the chip"
msgstr ""

#: ../../../driver-api/mtdnand.rst:504
msgid "Use mirrored tables with version numbers"
msgstr ""

#: ../../../driver-api/mtdnand.rst:506
msgid "Reserve 4 blocks at the end of the chip"
msgstr ""

#: ../../../driver-api/mtdnand.rst:509
msgid "User defined tables"
msgstr ""

#: ../../../driver-api/mtdnand.rst:511
msgid ""
"User defined tables are created by filling out a nand_bbt_descr structure "
"and storing the pointer in the nand_chip structure member bbt_td before "
"calling nand_scan(). If a mirror table is necessary a second structure must "
"be created and a pointer to this structure must be stored in bbt_md inside "
"the nand_chip structure. If the bbt_md member is set to NULL then only the "
"main table is used and no scan for the mirrored table is performed."
msgstr ""

#: ../../../driver-api/mtdnand.rst:519
msgid ""
"The most important field in the nand_bbt_descr structure is the options "
"field. The options define most of the table properties. Use the predefined "
"constants from rawnand.h to define the options."
msgstr ""

#: ../../../driver-api/mtdnand.rst:523
msgid "Number of bits per block"
msgstr ""

#: ../../../driver-api/mtdnand.rst:525
msgid "The supported number of bits is 1, 2, 4, 8."
msgstr ""

#: ../../../driver-api/mtdnand.rst:527
msgid "Table per chip"
msgstr ""

#: ../../../driver-api/mtdnand.rst:529
msgid ""
"Setting the constant NAND_BBT_PERCHIP selects that a bad block table is "
"managed for each chip in a chip array. If this option is not set then a per "
"device bad block table is used."
msgstr ""

#: ../../../driver-api/mtdnand.rst:533
msgid "Table location is absolute"
msgstr ""

#: ../../../driver-api/mtdnand.rst:535
msgid ""
"Use the option constant NAND_BBT_ABSPAGE and define the absolute page number "
"where the bad block table starts in the field pages. If you have selected "
"bad block tables per chip and you have a multi chip array then the start "
"page must be given for each chip in the chip array. Note: there is no scan "
"for a table ident pattern performed, so the fields pattern, veroffs, offs, "
"len can be left uninitialized"
msgstr ""

#: ../../../driver-api/mtdnand.rst:542
msgid "Table location is automatically detected"
msgstr ""

#: ../../../driver-api/mtdnand.rst:544
msgid ""
"The table can either be located in the first or the last good blocks of the "
"chip (device). Set NAND_BBT_LASTBLOCK to place the bad block table at the "
"end of the chip (device). The bad block tables are marked and identified by "
"a pattern which is stored in the spare area of the first page in the block "
"which holds the bad block table. Store a pointer to the pattern in the "
"pattern field. Further the length of the pattern has to be stored in len and "
"the offset in the spare area must be given in the offs member of the "
"nand_bbt_descr structure. For mirrored bad block tables different patterns "
"are mandatory."
msgstr ""

#: ../../../driver-api/mtdnand.rst:554
msgid "Table creation"
msgstr ""

#: ../../../driver-api/mtdnand.rst:556
msgid ""
"Set the option NAND_BBT_CREATE to enable the table creation if no table can "
"be found during the scan. Usually this is done only once if a new chip is "
"found."
msgstr ""

#: ../../../driver-api/mtdnand.rst:560
msgid "Table write support"
msgstr ""

#: ../../../driver-api/mtdnand.rst:562
msgid ""
"Set the option NAND_BBT_WRITE to enable the table write support. This allows "
"the update of the bad block table(s) in case a block has to be marked bad "
"due to wear. The MTD interface function block_markbad is calling the update "
"function of the bad block table. If the write support is enabled then the "
"table is updated on FLASH."
msgstr ""

#: ../../../driver-api/mtdnand.rst:568
msgid ""
"Note: Write support should only be enabled for mirrored tables with version "
"control."
msgstr ""

#: ../../../driver-api/mtdnand.rst:571
msgid "Table version control"
msgstr ""

#: ../../../driver-api/mtdnand.rst:573
msgid ""
"Set the option NAND_BBT_VERSION to enable the table version control. It's "
"highly recommended to enable this for mirrored tables with write support. It "
"makes sure that the risk of losing the bad block table information is "
"reduced to the loss of the information about the one worn out block which "
"should be marked bad. The version is stored in 4 consecutive bytes in the "
"spare area of the device. The position of the version number is defined by "
"the member veroffs in the bad block table descriptor."
msgstr ""

#: ../../../driver-api/mtdnand.rst:582
msgid "Save block contents on write"
msgstr ""

#: ../../../driver-api/mtdnand.rst:584
msgid ""
"In case that the block which holds the bad block table does contain other "
"useful information, set the option NAND_BBT_SAVECONTENT. When the bad block "
"table is written then the whole block is read the bad block table is updated "
"and the block is erased and everything is written back. If this option is "
"not set only the bad block table is written and everything else in the block "
"is ignored and erased."
msgstr ""

#: ../../../driver-api/mtdnand.rst:591
msgid "Number of reserved blocks"
msgstr ""

#: ../../../driver-api/mtdnand.rst:593
msgid ""
"For automatic placement some blocks must be reserved for bad block table "
"storage. The number of reserved blocks is defined in the maxblocks member of "
"the bad block table description structure. Reserving 4 blocks for mirrored "
"tables should be a reasonable number. This also limits the number of blocks "
"which are scanned for the bad block table ident pattern."
msgstr ""

#: ../../../driver-api/mtdnand.rst:601
msgid "Spare area (auto)placement"
msgstr ""

#: ../../../driver-api/mtdnand.rst:603
msgid ""
"The nand driver implements different possibilities for placement of "
"filesystem data in the spare area,"
msgstr ""

#: ../../../driver-api/mtdnand.rst:606 ../../../driver-api/mtdnand.rst:657
msgid "Placement defined by fs driver"
msgstr ""

#: ../../../driver-api/mtdnand.rst:608 ../../../driver-api/mtdnand.rst:679
msgid "Automatic placement"
msgstr ""

#: ../../../driver-api/mtdnand.rst:610
msgid ""
"The default placement function is automatic placement. The nand driver has "
"built in default placement schemes for the various chiptypes. If due to "
"hardware ECC functionality the default placement does not fit then the board "
"driver can provide a own placement scheme."
msgstr ""

#: ../../../driver-api/mtdnand.rst:615
msgid ""
"File system drivers can provide a own placement scheme which is used instead "
"of the default placement scheme."
msgstr ""

#: ../../../driver-api/mtdnand.rst:618
msgid "Placement schemes are defined by a nand_oobinfo structure"
msgstr ""

#: ../../../driver-api/mtdnand.rst:630
msgid "useecc"
msgstr ""

#: ../../../driver-api/mtdnand.rst:632
msgid ""
"The useecc member controls the ecc and placement function. The header file "
"include/mtd/mtd-abi.h contains constants to select ecc and placement. "
"MTD_NANDECC_OFF switches off the ecc complete. This is not recommended and "
"available for testing and diagnosis only. MTD_NANDECC_PLACE selects caller "
"defined placement, MTD_NANDECC_AUTOPLACE selects automatic placement."
msgstr ""

#: ../../../driver-api/mtdnand.rst:639
msgid "eccbytes"
msgstr ""

#: ../../../driver-api/mtdnand.rst:641
msgid "The eccbytes member defines the number of ecc bytes per page."
msgstr ""

#: ../../../driver-api/mtdnand.rst:643
msgid "eccpos"
msgstr ""

#: ../../../driver-api/mtdnand.rst:645
msgid ""
"The eccpos array holds the byte offsets in the spare area where the ecc "
"codes are placed."
msgstr ""

#: ../../../driver-api/mtdnand.rst:648
msgid "oobfree"
msgstr ""

#: ../../../driver-api/mtdnand.rst:650
msgid ""
"The oobfree array defines the areas in the spare area which can be used for "
"automatic placement. The information is given in the format {offset, size}. "
"offset defines the start of the usable area, size the length in bytes. More "
"than one area can be defined. The list is terminated by an {0, 0} entry."
msgstr ""

#: ../../../driver-api/mtdnand.rst:659
msgid ""
"The calling function provides a pointer to a nand_oobinfo structure which "
"defines the ecc placement. For writes the caller must provide a spare area "
"buffer along with the data buffer. The spare area buffer size is (number of "
"pages) \\* (size of spare area). For reads the buffer size is (number of "
"pages) \\* ((size of spare area) + (number of ecc steps per page) \\* sizeof "
"(int)). The driver stores the result of the ecc check for each tuple in the "
"spare buffer. The storage sequence is::"
msgstr ""

#: ../../../driver-api/mtdnand.rst:673
msgid "This is a legacy mode used by YAFFS1."
msgstr ""

#: ../../../driver-api/mtdnand.rst:675
msgid ""
"If the spare area buffer is NULL then only the ECC placement is done "
"according to the given scheme in the nand_oobinfo structure."
msgstr ""

#: ../../../driver-api/mtdnand.rst:681
msgid ""
"Automatic placement uses the built in defaults to place the ecc bytes in the "
"spare area. If filesystem data have to be stored / read into the spare area "
"then the calling function must provide a buffer. The buffer size per page is "
"determined by the oobfree array in the nand_oobinfo structure."
msgstr ""

#: ../../../driver-api/mtdnand.rst:687
msgid ""
"If the spare area buffer is NULL then only the ECC placement is done "
"according to the default builtin scheme."
msgstr ""

#: ../../../driver-api/mtdnand.rst:691
msgid "Spare area autoplacement default schemes"
msgstr ""

#: ../../../driver-api/mtdnand.rst:694
msgid "256 byte pagesize"
msgstr ""

#: ../../../driver-api/mtdnand.rst:697 ../../../driver-api/mtdnand.rst:717
#: ../../../driver-api/mtdnand.rst:743
msgid "Offset"
msgstr ""

#: ../../../driver-api/mtdnand.rst:697 ../../../driver-api/mtdnand.rst:717
#: ../../../driver-api/mtdnand.rst:743
msgid "Content"
msgstr ""

#: ../../../driver-api/mtdnand.rst:697 ../../../driver-api/mtdnand.rst:717
#: ../../../driver-api/mtdnand.rst:743
msgid "Comment"
msgstr ""

#: ../../../driver-api/mtdnand.rst:699 ../../../driver-api/mtdnand.rst:719
#: ../../../driver-api/mtdnand.rst:745
msgid "0x00"
msgstr ""

#: ../../../driver-api/mtdnand.rst:699 ../../../driver-api/mtdnand.rst:719
#: ../../../driver-api/mtdnand.rst:751
msgid "ECC byte 0"
msgstr ""

#: ../../../driver-api/mtdnand.rst:699
msgid "Error correction code byte 0"
msgstr ""

#: ../../../driver-api/mtdnand.rst:700 ../../../driver-api/mtdnand.rst:721
#: ../../../driver-api/mtdnand.rst:749
msgid "0x01"
msgstr ""

#: ../../../driver-api/mtdnand.rst:700 ../../../driver-api/mtdnand.rst:721
#: ../../../driver-api/mtdnand.rst:753
msgid "ECC byte 1"
msgstr ""

#: ../../../driver-api/mtdnand.rst:700
msgid "Error correction code byte 1"
msgstr ""

#: ../../../driver-api/mtdnand.rst:701 ../../../driver-api/mtdnand.rst:723
msgid "0x02"
msgstr ""

#: ../../../driver-api/mtdnand.rst:701 ../../../driver-api/mtdnand.rst:723
#: ../../../driver-api/mtdnand.rst:755
msgid "ECC byte 2"
msgstr ""

#: ../../../driver-api/mtdnand.rst:701
msgid "Error correction code byte 2"
msgstr ""

#: ../../../driver-api/mtdnand.rst:702 ../../../driver-api/mtdnand.rst:725
msgid "0x03"
msgstr ""

#: ../../../driver-api/mtdnand.rst:702
msgid "Autoplace 0"
msgstr ""

#: ../../../driver-api/mtdnand.rst:703 ../../../driver-api/mtdnand.rst:727
msgid "0x04"
msgstr ""

#: ../../../driver-api/mtdnand.rst:703
msgid "Autoplace 1"
msgstr ""

#: ../../../driver-api/mtdnand.rst:704 ../../../driver-api/mtdnand.rst:728
msgid "0x05"
msgstr ""

#: ../../../driver-api/mtdnand.rst:704 ../../../driver-api/mtdnand.rst:728
#: ../../../driver-api/mtdnand.rst:745
msgid "Bad block marker"
msgstr ""

#: ../../../driver-api/mtdnand.rst:704 ../../../driver-api/mtdnand.rst:728
#: ../../../driver-api/mtdnand.rst:745
msgid ""
"If any bit in this byte is zero, then this block is bad. This applies only "
"to the first page in a block. In the remaining pages this byte is reserved"
msgstr ""

#: ../../../driver-api/mtdnand.rst:708 ../../../driver-api/mtdnand.rst:732
msgid "0x06"
msgstr ""

#: ../../../driver-api/mtdnand.rst:708
msgid "Autoplace 2"
msgstr ""

#: ../../../driver-api/mtdnand.rst:709 ../../../driver-api/mtdnand.rst:734
msgid "0x07"
msgstr ""

#: ../../../driver-api/mtdnand.rst:709
msgid "Autoplace 3"
msgstr ""

#: ../../../driver-api/mtdnand.rst:713
msgid "512 byte pagesize"
msgstr ""

#: ../../../driver-api/mtdnand.rst:719
msgid "Error correction code byte 0 of the lower 256 Byte data in this page"
msgstr ""

#: ../../../driver-api/mtdnand.rst:721
msgid ""
"Error correction code byte 1 of the lower 256 Bytes of data in this page"
msgstr ""

#: ../../../driver-api/mtdnand.rst:723
msgid ""
"Error correction code byte 2 of the lower 256 Bytes of data in this page"
msgstr ""

#: ../../../driver-api/mtdnand.rst:725 ../../../driver-api/mtdnand.rst:757
msgid "ECC byte 3"
msgstr ""

#: ../../../driver-api/mtdnand.rst:725
msgid ""
"Error correction code byte 0 of the upper 256 Bytes of data in this page"
msgstr ""

#: ../../../driver-api/mtdnand.rst:727
msgid "reserved"
msgstr ""

#: ../../../driver-api/mtdnand.rst:732 ../../../driver-api/mtdnand.rst:759
msgid "ECC byte 4"
msgstr ""

#: ../../../driver-api/mtdnand.rst:732
msgid ""
"Error correction code byte 1 of the upper 256 Bytes of data in this page"
msgstr ""

#: ../../../driver-api/mtdnand.rst:734 ../../../driver-api/mtdnand.rst:761
msgid "ECC byte 5"
msgstr ""

#: ../../../driver-api/mtdnand.rst:734
msgid ""
"Error correction code byte 2 of the upper 256 Bytes of data in this page"
msgstr ""

#: ../../../driver-api/mtdnand.rst:736
msgid "0x08 - 0x0F"
msgstr ""

#: ../../../driver-api/mtdnand.rst:736
msgid "Autoplace 0 - 7"
msgstr ""

#: ../../../driver-api/mtdnand.rst:740
msgid "2048 byte pagesize"
msgstr ""

#: ../../../driver-api/mtdnand.rst:749
msgid "Reserved"
msgstr ""

#: ../../../driver-api/mtdnand.rst:750
msgid "0x02-0x27"
msgstr ""

#: ../../../driver-api/mtdnand.rst:750
msgid "Autoplace 0 - 37"
msgstr ""

#: ../../../driver-api/mtdnand.rst:751
msgid "0x28"
msgstr ""

#: ../../../driver-api/mtdnand.rst:751
msgid "Error correction code byte 0 of the first 256 Byte data in this page"
msgstr ""

#: ../../../driver-api/mtdnand.rst:753
msgid "0x29"
msgstr ""

#: ../../../driver-api/mtdnand.rst:753
msgid ""
"Error correction code byte 1 of the first 256 Bytes of data in this page"
msgstr ""

#: ../../../driver-api/mtdnand.rst:755
msgid "0x2A"
msgstr ""

#: ../../../driver-api/mtdnand.rst:755
msgid "Error correction code byte 2 of the first 256 Bytes data in this page"
msgstr ""

#: ../../../driver-api/mtdnand.rst:757
msgid "0x2B"
msgstr ""

#: ../../../driver-api/mtdnand.rst:757
msgid ""
"Error correction code byte 0 of the second 256 Bytes of data in this page"
msgstr ""

#: ../../../driver-api/mtdnand.rst:759
msgid "0x2C"
msgstr ""

#: ../../../driver-api/mtdnand.rst:759
msgid ""
"Error correction code byte 1 of the second 256 Bytes of data in this page"
msgstr ""

#: ../../../driver-api/mtdnand.rst:761
msgid "0x2D"
msgstr ""

#: ../../../driver-api/mtdnand.rst:761
msgid ""
"Error correction code byte 2 of the second 256 Bytes of data in this page"
msgstr ""

#: ../../../driver-api/mtdnand.rst:763
msgid "0x2E"
msgstr ""

#: ../../../driver-api/mtdnand.rst:763
msgid "ECC byte 6"
msgstr ""

#: ../../../driver-api/mtdnand.rst:763
msgid ""
"Error correction code byte 0 of the third 256 Bytes of data in this page"
msgstr ""

#: ../../../driver-api/mtdnand.rst:765
msgid "0x2F"
msgstr ""

#: ../../../driver-api/mtdnand.rst:765
msgid "ECC byte 7"
msgstr ""

#: ../../../driver-api/mtdnand.rst:765
msgid ""
"Error correction code byte 1 of the third 256 Bytes of data in this page"
msgstr ""

#: ../../../driver-api/mtdnand.rst:767
msgid "0x30"
msgstr ""

#: ../../../driver-api/mtdnand.rst:767
msgid "ECC byte 8"
msgstr ""

#: ../../../driver-api/mtdnand.rst:767
msgid ""
"Error correction code byte 2 of the third 256 Bytes of data in this page"
msgstr ""

#: ../../../driver-api/mtdnand.rst:769
msgid "0x31"
msgstr ""

#: ../../../driver-api/mtdnand.rst:769
msgid "ECC byte 9"
msgstr ""

#: ../../../driver-api/mtdnand.rst:769
msgid ""
"Error correction code byte 0 of the fourth 256 Bytes of data in this page"
msgstr ""

#: ../../../driver-api/mtdnand.rst:771
msgid "0x32"
msgstr ""

#: ../../../driver-api/mtdnand.rst:771
msgid "ECC byte 10"
msgstr ""

#: ../../../driver-api/mtdnand.rst:771
msgid ""
"Error correction code byte 1 of the fourth 256 Bytes of data in this page"
msgstr ""

#: ../../../driver-api/mtdnand.rst:773
msgid "0x33"
msgstr ""

#: ../../../driver-api/mtdnand.rst:773
msgid "ECC byte 11"
msgstr ""

#: ../../../driver-api/mtdnand.rst:773
msgid ""
"Error correction code byte 2 of the fourth 256 Bytes of data in this page"
msgstr ""

#: ../../../driver-api/mtdnand.rst:775
msgid "0x34"
msgstr ""

#: ../../../driver-api/mtdnand.rst:775
msgid "ECC byte 12"
msgstr ""

#: ../../../driver-api/mtdnand.rst:775
msgid ""
"Error correction code byte 0 of the fifth 256 Bytes of data in this page"
msgstr ""

#: ../../../driver-api/mtdnand.rst:777
msgid "0x35"
msgstr ""

#: ../../../driver-api/mtdnand.rst:777
msgid "ECC byte 13"
msgstr ""

#: ../../../driver-api/mtdnand.rst:777
msgid ""
"Error correction code byte 1 of the fifth 256 Bytes of data in this page"
msgstr ""

#: ../../../driver-api/mtdnand.rst:779
msgid "0x36"
msgstr ""

#: ../../../driver-api/mtdnand.rst:779
msgid "ECC byte 14"
msgstr ""

#: ../../../driver-api/mtdnand.rst:779
msgid ""
"Error correction code byte 2 of the fifth 256 Bytes of data in this page"
msgstr ""

#: ../../../driver-api/mtdnand.rst:781
msgid "0x37"
msgstr ""

#: ../../../driver-api/mtdnand.rst:781
msgid "ECC byte 15"
msgstr ""

#: ../../../driver-api/mtdnand.rst:781
msgid ""
"Error correction code byte 0 of the sixth 256 Bytes of data in this page"
msgstr ""

#: ../../../driver-api/mtdnand.rst:783
msgid "0x38"
msgstr ""

#: ../../../driver-api/mtdnand.rst:783
msgid "ECC byte 16"
msgstr ""

#: ../../../driver-api/mtdnand.rst:783
msgid ""
"Error correction code byte 1 of the sixth 256 Bytes of data in this page"
msgstr ""

#: ../../../driver-api/mtdnand.rst:785
msgid "0x39"
msgstr ""

#: ../../../driver-api/mtdnand.rst:785
msgid "ECC byte 17"
msgstr ""

#: ../../../driver-api/mtdnand.rst:785
msgid ""
"Error correction code byte 2 of the sixth 256 Bytes of data in this page"
msgstr ""

#: ../../../driver-api/mtdnand.rst:787
msgid "0x3A"
msgstr ""

#: ../../../driver-api/mtdnand.rst:787
msgid "ECC byte 18"
msgstr ""

#: ../../../driver-api/mtdnand.rst:787
msgid ""
"Error correction code byte 0 of the seventh 256 Bytes of data in this page"
msgstr ""

#: ../../../driver-api/mtdnand.rst:789
msgid "0x3B"
msgstr ""

#: ../../../driver-api/mtdnand.rst:789
msgid "ECC byte 19"
msgstr ""

#: ../../../driver-api/mtdnand.rst:789
msgid ""
"Error correction code byte 1 of the seventh 256 Bytes of data in this page"
msgstr ""

#: ../../../driver-api/mtdnand.rst:791
msgid "0x3C"
msgstr ""

#: ../../../driver-api/mtdnand.rst:791
msgid "ECC byte 20"
msgstr ""

#: ../../../driver-api/mtdnand.rst:791
msgid ""
"Error correction code byte 2 of the seventh 256 Bytes of data in this page"
msgstr ""

#: ../../../driver-api/mtdnand.rst:793
msgid "0x3D"
msgstr ""

#: ../../../driver-api/mtdnand.rst:793
msgid "ECC byte 21"
msgstr ""

#: ../../../driver-api/mtdnand.rst:793
msgid ""
"Error correction code byte 0 of the eighth 256 Bytes of data in this page"
msgstr ""

#: ../../../driver-api/mtdnand.rst:795
msgid "0x3E"
msgstr ""

#: ../../../driver-api/mtdnand.rst:795
msgid "ECC byte 22"
msgstr ""

#: ../../../driver-api/mtdnand.rst:795
msgid ""
"Error correction code byte 1 of the eighth 256 Bytes of data in this page"
msgstr ""

#: ../../../driver-api/mtdnand.rst:797
msgid "0x3F"
msgstr ""

#: ../../../driver-api/mtdnand.rst:797
msgid "ECC byte 23"
msgstr ""

#: ../../../driver-api/mtdnand.rst:797
msgid ""
"Error correction code byte 2 of the eighth 256 Bytes of data in this page"
msgstr ""

#: ../../../driver-api/mtdnand.rst:802
msgid "Filesystem support"
msgstr ""

#: ../../../driver-api/mtdnand.rst:804
msgid ""
"The NAND driver provides all necessary functions for a filesystem via the "
"MTD interface."
msgstr ""

#: ../../../driver-api/mtdnand.rst:807
msgid ""
"Filesystems must be aware of the NAND peculiarities and restrictions. One "
"major restrictions of NAND Flash is, that you cannot write as often as you "
"want to a page. The consecutive writes to a page, before erasing it again, "
"are restricted to 1-3 writes, depending on the manufacturers specifications. "
"This applies similar to the spare area."
msgstr ""

#: ../../../driver-api/mtdnand.rst:813
msgid ""
"Therefore NAND aware filesystems must either write in page size chunks or "
"hold a writebuffer to collect smaller writes until they sum up to pagesize. "
"Available NAND aware filesystems: JFFS2, YAFFS."
msgstr ""

#: ../../../driver-api/mtdnand.rst:817
msgid ""
"The spare area usage to store filesystem data is controlled by the spare "
"area placement functionality which is described in one of the earlier "
"chapters."
msgstr ""

#: ../../../driver-api/mtdnand.rst:822
msgid "Tools"
msgstr ""

#: ../../../driver-api/mtdnand.rst:824
msgid ""
"The MTD project provides a couple of helpful tools to handle NAND Flash."
msgstr ""

#: ../../../driver-api/mtdnand.rst:826
msgid "flasherase, flasheraseall: Erase and format FLASH partitions"
msgstr ""

#: ../../../driver-api/mtdnand.rst:828
msgid "nandwrite: write filesystem images to NAND FLASH"
msgstr ""

#: ../../../driver-api/mtdnand.rst:830
msgid "nanddump: dump the contents of a NAND FLASH partitions"
msgstr ""

#: ../../../driver-api/mtdnand.rst:832
msgid ""
"These tools are aware of the NAND restrictions. Please use those tools "
"instead of complaining about errors which are caused by non NAND aware "
"access methods."
msgstr ""

#: ../../../driver-api/mtdnand.rst:837
msgid "Constants"
msgstr ""

#: ../../../driver-api/mtdnand.rst:839
msgid ""
"This chapter describes the constants which might be relevant for a driver "
"developer."
msgstr ""

#: ../../../driver-api/mtdnand.rst:843
msgid "Chip option constants"
msgstr ""

#: ../../../driver-api/mtdnand.rst:846
msgid "Constants for chip id table"
msgstr ""

#: ../../../driver-api/mtdnand.rst:848
msgid ""
"These constants are defined in rawnand.h. They are OR-ed together to "
"describe the chip functionality::"
msgstr ""

#: ../../../driver-api/mtdnand.rst:868
msgid "Constants for runtime options"
msgstr ""

#: ../../../driver-api/mtdnand.rst:870
msgid ""
"These constants are defined in rawnand.h. They are OR-ed together to "
"describe the functionality::"
msgstr ""

#: ../../../driver-api/mtdnand.rst:880
msgid "ECC selection constants"
msgstr ""

#: ../../../driver-api/mtdnand.rst:882
msgid "Use these constants to select the ECC algorithm::"
msgstr ""

#: ../../../driver-api/mtdnand.rst:899
msgid "Hardware control related constants"
msgstr ""

#: ../../../driver-api/mtdnand.rst:901
msgid ""
"These constants describe the requested hardware access function when the "
"boardspecific hardware control function is called::"
msgstr ""

#: ../../../driver-api/mtdnand.rst:923
msgid "Bad block table related constants"
msgstr ""

#: ../../../driver-api/mtdnand.rst:925
msgid ""
"These constants describe the options used for bad block table descriptors::"
msgstr ""

#: ../../../driver-api/mtdnand.rst:953
msgid "Structures"
msgstr ""

#: ../../../driver-api/mtdnand.rst:955
msgid ""
"This chapter contains the autogenerated documentation of the structures "
"which are used in the NAND driver and might be relevant for a driver "
"developer. Each struct member has a short description which is marked with "
"an [XXX] identifier. See the chapter \"Documentation hints\" for an "
"explanation."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:225
msgid "NAND generic parameters from the parameter page"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:229
#: include/linux/mtd/rawnand.h:253 include/linux/mtd/rawnand.h:263
#: include/linux/mtd/rawnand.h:275 include/linux/mtd/rawnand.h:301
#: include/linux/mtd/rawnand.h:392 include/linux/mtd/rawnand.h:484
#: include/linux/mtd/rawnand.h:608 include/linux/mtd/rawnand.h:671
#: include/linux/mtd/rawnand.h:679 include/linux/mtd/rawnand.h:689
#: include/linux/mtd/rawnand.h:710 include/linux/mtd/rawnand.h:734
#: include/linux/mtd/rawnand.h:849 include/linux/mtd/rawnand.h:883
#: include/linux/mtd/rawnand.h:892 include/linux/mtd/rawnand.h:900
#: include/linux/mtd/rawnand.h:950 include/linux/mtd/rawnand.h:982
#: include/linux/mtd/rawnand.h:1008 include/linux/mtd/rawnand.h:1080
#: include/linux/mtd/rawnand.h:1112 include/linux/mtd/rawnand.h:1140
#: include/linux/mtd/rawnand.h:1191 include/linux/mtd/rawnand.h:1210
#: include/linux/mtd/rawnand.h:1220 include/linux/mtd/rawnand.h:1230
#: include/linux/mtd/rawnand.h:1434 ../../../driver-api/mtdnand:984:
#: drivers/mtd/nand/raw/nand_base.c:2299
msgid "**Definition**::"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:240
#: include/linux/mtd/rawnand.h:260 include/linux/mtd/rawnand.h:271
#: include/linux/mtd/rawnand.h:283 include/linux/mtd/rawnand.h:332
#: include/linux/mtd/rawnand.h:435 include/linux/mtd/rawnand.h:524
#: include/linux/mtd/rawnand.h:621 include/linux/mtd/rawnand.h:677
#: include/linux/mtd/rawnand.h:686 include/linux/mtd/rawnand.h:700
#: include/linux/mtd/rawnand.h:716 include/linux/mtd/rawnand.h:747
#: include/linux/mtd/rawnand.h:859 include/linux/mtd/rawnand.h:889
#: include/linux/mtd/rawnand.h:898 include/linux/mtd/rawnand.h:911
#: include/linux/mtd/rawnand.h:958 include/linux/mtd/rawnand.h:989
#: include/linux/mtd/rawnand.h:1017 include/linux/mtd/rawnand.h:1089
#: include/linux/mtd/rawnand.h:1124 include/linux/mtd/rawnand.h:1162
#: include/linux/mtd/rawnand.h:1202 include/linux/mtd/rawnand.h:1217
#: include/linux/mtd/rawnand.h:1227 include/linux/mtd/rawnand.h:1280
#: include/linux/mtd/rawnand.h:1457 ../../../driver-api/mtdnand:984:
#: drivers/mtd/nand/raw/nand_base.c:2307
msgid "**Members**"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:226
msgid "``model``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:227
msgid "Model name"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:227
msgid "``supports_set_get_features``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:228
msgid "The NAND chip supports setting/getting features"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:228
msgid "``supports_read_cache``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:229
msgid "The NAND chip supports read cache operations"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:229
msgid "``set_feature_list``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:230
msgid "Bitmap of features that can be set"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:230
msgid "``get_feature_list``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:231
msgid "Bitmap of features that can be get"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:231
msgid "``onfi``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:232
msgid "ONFI specific parameters"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:249
msgid "NAND id structure"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:250
msgid "``data``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:251
msgid "buffer containing the id bytes."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:251
#: include/linux/mtd/rawnand.h:686
msgid "``len``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:252
msgid "ID length."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:259
msgid "ECC step information of ECC engine"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:260
msgid "``stepsize``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:261
#: include/linux/mtd/rawnand.h:303
msgid "data bytes per ECC step"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:261
msgid "``strengths``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:262
msgid "array of supported strengths"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:262
msgid "``nstrengths``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:263
msgid "number of supported strengths"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:271
msgid "capability of ECC engine"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:272
msgid "``stepinfos``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:273
msgid "array of ECC step information"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:273
msgid "``nstepinfos``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:274
msgid "number of ECC step information"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:274
msgid "``calc_ecc_bytes``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:275
msgid "driver's hook to calculate ECC bytes per step"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:297
msgid "Control structure for ECC"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:298
msgid "``engine_type``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:299
msgid "ECC engine type"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:299
msgid "``placement``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:300
msgid "OOB bytes placement"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:300
msgid "``algo``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:301
msgid "ECC algorithm"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:301
msgid "``steps``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:302
msgid "number of ECC steps per page"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:302
#: include/linux/mtd/rawnand.h:1218
msgid "``size``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:303
msgid "``bytes``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:304
msgid "ECC bytes per step"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:305
msgid "``total``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:306
msgid "total number of ECC bytes per page"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:304
msgid "``strength``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:305
msgid "max number of correctible bits per ECC step"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:306
msgid "``prepad``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:307
#: include/linux/mtd/rawnand.h:308
msgid "padding information for syndrome based ECC generators"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:307
msgid "``postpad``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:308
#: include/linux/mtd/rawnand.h:1236 include/linux/mtd/rawnand.h:1443
msgid "``options``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:309
msgid "ECC specific options (see NAND_ECC_XXX flags defined above)"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:309
msgid "``calc_buf``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:310
msgid "buffer for calculated ECC, size is oobsize."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:310
msgid "``code_buf``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:311
msgid "buffer for ECC read from flash, size is oobsize."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:311
msgid "``hwctl``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:312
msgid ""
"function to control hardware ECC generator. Must only be provided if an "
"hardware ECC is available"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:313
msgid "``calculate``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:314
msgid "function for ECC calculation or readback from ECC hardware"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:314
msgid "``correct``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:315
msgid ""
"function for ECC correction, matching to ECC generator (sw/hw). Should "
"return a positive number representing the number of corrected bitflips, -"
"EBADMSG if the number of bitflips exceed ECC strength, or any other error "
"code if the error is not directly related to correction. If -EBADMSG is "
"returned the input buffers should be left untouched."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:321
msgid "``read_page_raw``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:322
msgid ""
"function to read a raw page without ECC. This function should hide the "
"specific layout used by the ECC controller and always return contiguous in-"
"band and out-of-band data even if they're not stored contiguously on the "
"NAND chip (e.g. NAND_ECC_PLACEMENT_INTERLEAVED interleaves in-band and out-"
"of-band data)."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:328
msgid "``write_page_raw``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:329
msgid ""
"function to write a raw page without ECC. This function should hide the "
"specific layout used by the ECC controller and consider the passed data as "
"contiguous in-band and out-of-band data. ECC controller is responsible for "
"doing the appropriate transformations to adapt to its specific layout (e.g. "
"NAND_ECC_PLACEMENT_INTERLEAVED interleaves in-band and out-of-band data)."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:336
msgid "``read_page``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:337
msgid ""
"function to read a page according to the ECC generator requirements; returns "
"maximum number of bitflips corrected in any single ECC step, -EIO hw error"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:339
msgid "``read_subpage``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:340
msgid ""
"function to read parts of the page covered by ECC; returns same as "
"read_page()"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:341
msgid "``write_subpage``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:342
msgid "function to write parts of the page covered by ECC."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:342
msgid "``write_page``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:343
msgid "function to write a page according to the ECC generator requirements."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:344
msgid "``write_oob_raw``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:345
msgid "function to write chip OOB data without ECC"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:345
msgid "``read_oob_raw``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:346
msgid "function to read chip OOB data without ECC"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:346
msgid "``read_oob``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:347
msgid "function to read chip OOB data"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:347
msgid "``write_oob``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:348
msgid "function to write chip OOB data"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:388
msgid "SDR NAND chip timings"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:398
#: include/linux/mtd/rawnand.h:490
msgid "``tBERS_max``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:399
#: include/linux/mtd/rawnand.h:491
msgid "Block erase time"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:399
#: include/linux/mtd/rawnand.h:491
msgid "``tCCS_min``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:400
#: include/linux/mtd/rawnand.h:492
msgid "Change column setup time"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:400
#: include/linux/mtd/rawnand.h:492
msgid "``tPROG_max``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:401
#: include/linux/mtd/rawnand.h:493
msgid "Page program time"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:401
#: include/linux/mtd/rawnand.h:493
msgid "``tR_max``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:402
#: include/linux/mtd/rawnand.h:494
msgid "Page read time"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:402
msgid "``tALH_min``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:403
msgid "ALE hold time"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:403
#: include/linux/mtd/rawnand.h:496
msgid "``tADL_min``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:404
#: include/linux/mtd/rawnand.h:497
msgid "ALE to data loading time"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:404
msgid "``tALS_min``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:405
msgid "ALE setup time"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:405
msgid "``tAR_min``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:406
msgid "ALE to RE# delay"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:406
msgid "``tCEA_max``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:407
msgid "CE# access time"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:407
#: include/linux/mtd/rawnand.h:502
msgid "``tCEH_min``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:408
#: include/linux/mtd/rawnand.h:503
msgid "CE# high hold time"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:408
#: include/linux/mtd/rawnand.h:503
msgid "``tCH_min``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:409
#: include/linux/mtd/rawnand.h:504
msgid "CE# hold time"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:409
msgid "``tCHZ_max``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:410
msgid "CE# high to output hi-Z"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:410
msgid "``tCLH_min``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:411
msgid "CLE hold time"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:411
msgid "``tCLR_min``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:412
msgid "CLE to RE# delay"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:412
msgid "``tCLS_min``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:413
msgid "CLE setup time"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:413
msgid "``tCOH_min``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:414
msgid "CE# high to output hold"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:414
#: include/linux/mtd/rawnand.h:505
msgid "``tCS_min``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:415
#: include/linux/mtd/rawnand.h:506
msgid "CE# setup time"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:415
#: include/linux/mtd/rawnand.h:506
msgid "``tDH_min``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:416
#: include/linux/mtd/rawnand.h:507
msgid "Data hold time"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:416
#: include/linux/mtd/rawnand.h:513
msgid "``tDS_min``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:417
#: include/linux/mtd/rawnand.h:514
msgid "Data setup time"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:417
#: include/linux/mtd/rawnand.h:515
msgid "``tFEAT_max``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:418
#: include/linux/mtd/rawnand.h:516
msgid "Busy time for Set Features and Get Features"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:418
msgid "``tIR_min``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:419
msgid "Output hi-Z to RE# low"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:419
#: include/linux/mtd/rawnand.h:516
msgid "``tITC_max``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:420
#: include/linux/mtd/rawnand.h:517
msgid "Interface and Timing Mode Change time"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:420
msgid "``tRC_min``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:421
msgid "RE# cycle time"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:421
msgid "``tREA_max``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:422
msgid "RE# access time"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:422
msgid "``tREH_min``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:423
msgid "RE# high hold time"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:423
msgid "``tRHOH_min``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:424
msgid "RE# high to output hold"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:424
#: include/linux/mtd/rawnand.h:518
msgid "``tRHW_min``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:425
msgid "RE# high to WE# low"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:425
msgid "``tRHZ_max``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:426
msgid "RE# high to output hi-Z"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:426
msgid "``tRLOH_min``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:427
msgid "RE# low to output hold"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:427
msgid "``tRP_min``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:428
msgid "RE# pulse width"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:428
#: include/linux/mtd/rawnand.h:519
msgid "``tRR_min``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:429
#: include/linux/mtd/rawnand.h:520
msgid "Ready to RE# low (data only)"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:429
#: include/linux/mtd/rawnand.h:520
msgid "``tRST_max``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:430
#: include/linux/mtd/rawnand.h:521
msgid ""
"Device reset time, measured from the falling edge of R/B# to the rising edge "
"of R/B#."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:431
#: include/linux/mtd/rawnand.h:522
msgid "``tWB_max``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:432
#: include/linux/mtd/rawnand.h:523
msgid "WE# high to SR[6] low"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:432
msgid "``tWC_min``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:433
msgid "WE# cycle time"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:433
msgid "``tWH_min``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:434
msgid "WE# high hold time"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:434
#: include/linux/mtd/rawnand.h:523
msgid "``tWHR_min``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:435
#: include/linux/mtd/rawnand.h:524
msgid "WE# high to RE# low"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:435
msgid "``tWP_min``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:436
msgid "WE# pulse width"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:436
#: include/linux/mtd/rawnand.h:525
msgid "``tWW_min``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:437
#: include/linux/mtd/rawnand.h:526
msgid "WP# transition to WE# low"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:440
#: include/linux/mtd/rawnand.h:529 include/linux/mtd/rawnand.h:694
#: include/linux/mtd/rawnand.h:856 include/linux/mtd/rawnand.h:953
#: include/linux/mtd/rawnand.h:984 include/linux/mtd/rawnand.h:1013
#: include/linux/mtd/rawnand.h:1162 include/linux/mtd/rawnand.h:1619
#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:126
#: drivers/mtd/nand/raw/nand_base.c:168 drivers/mtd/nand/raw/nand_base.c:191
#: drivers/mtd/nand/raw/nand_base.c:642 drivers/mtd/nand/raw/nand_base.c:714
#: drivers/mtd/nand/raw/nand_base.c:1337 drivers/mtd/nand/raw/nand_base.c:1433
#: drivers/mtd/nand/raw/nand_base.c:1500 drivers/mtd/nand/raw/nand_base.c:1604
#: drivers/mtd/nand/raw/nand_base.c:1638 drivers/mtd/nand/raw/nand_base.c:1690
#: drivers/mtd/nand/raw/nand_base.c:1745 drivers/mtd/nand/raw/nand_base.c:1807
#: drivers/mtd/nand/raw/nand_base.c:1873 drivers/mtd/nand/raw/nand_base.c:1921
#: drivers/mtd/nand/raw/nand_base.c:1950 drivers/mtd/nand/raw/nand_base.c:2137
#: drivers/mtd/nand/raw/nand_base.c:2174 drivers/mtd/nand/raw/nand_base.c:2257
#: drivers/mtd/nand/raw/nand_base.c:2501 drivers/mtd/nand/raw/nand_base.c:2603
#: drivers/mtd/nand/raw/nand_base.c:2625 drivers/mtd/nand/raw/nand_base.c:2657
#: drivers/mtd/nand/raw/nand_base.c:2679 drivers/mtd/nand/raw/nand_base.c:2711
#: drivers/mtd/nand/raw/nand_base.c:2808 drivers/mtd/nand/raw/nand_base.c:2838
#: drivers/mtd/nand/raw/nand_base.c:3172 drivers/mtd/nand/raw/nand_base.c:3923
#: drivers/mtd/nand/raw/nand_base.c:3953 drivers/mtd/nand/raw/nand_base.c:6091
#: drivers/mtd/nand/raw/nand_base.c:6513 ../../../driver-api/mtdnand:984:
#: drivers/mtd/nand/raw/nand_base.c:207 drivers/mtd/nand/raw/nand_base.c:221
#: drivers/mtd/nand/raw/nand_base.c:250 drivers/mtd/nand/raw/nand_base.c:287
#: drivers/mtd/nand/raw/nand_base.c:336 drivers/mtd/nand/raw/nand_base.c:357
#: drivers/mtd/nand/raw/nand_base.c:425 drivers/mtd/nand/raw/nand_base.c:498
#: drivers/mtd/nand/raw/nand_base.c:554 drivers/mtd/nand/raw/nand_base.c:607
#: drivers/mtd/nand/raw/nand_base.c:625 drivers/mtd/nand/raw/nand_base.c:749
#: drivers/mtd/nand/raw/nand_base.c:793 drivers/mtd/nand/raw/nand_base.c:833
#: drivers/mtd/nand/raw/nand_base.c:926 drivers/mtd/nand/raw/nand_base.c:977
#: drivers/mtd/nand/raw/nand_base.c:1027 drivers/mtd/nand/raw/nand_base.c:1048
#: drivers/mtd/nand/raw/nand_base.c:1086 drivers/mtd/nand/raw/nand_base.c:1384
#: drivers/mtd/nand/raw/nand_base.c:2012 drivers/mtd/nand/raw/nand_base.c:2062
#: drivers/mtd/nand/raw/nand_base.c:2302 drivers/mtd/nand/raw/nand_base.c:2320
#: drivers/mtd/nand/raw/nand_base.c:2371 drivers/mtd/nand/raw/nand_base.c:2750
#: drivers/mtd/nand/raw/nand_base.c:2771 drivers/mtd/nand/raw/nand_base.c:2793
#: drivers/mtd/nand/raw/nand_base.c:2879 drivers/mtd/nand/raw/nand_base.c:3100
#: drivers/mtd/nand/raw/nand_base.c:3238 drivers/mtd/nand/raw/nand_base.c:3405
#: drivers/mtd/nand/raw/nand_base.c:3439 drivers/mtd/nand/raw/nand_base.c:3783
#: drivers/mtd/nand/raw/nand_base.c:3865 drivers/mtd/nand/raw/nand_base.c:3908
#: drivers/mtd/nand/raw/nand_base.c:3989 drivers/mtd/nand/raw/nand_base.c:4196
#: drivers/mtd/nand/raw/nand_base.c:4305 drivers/mtd/nand/raw/nand_base.c:4440
#: drivers/mtd/nand/raw/nand_base.c:4508 drivers/mtd/nand/raw/nand_base.c:4521
#: drivers/mtd/nand/raw/nand_base.c:4620 drivers/mtd/nand/raw/nand_base.c:4682
#: drivers/mtd/nand/raw/nand_base.c:5536 drivers/mtd/nand/raw/nand_base.c:5883
#: drivers/mtd/nand/raw/nand_base.c:5937 drivers/mtd/nand/raw/nand_base.c:6021
#: drivers/mtd/nand/raw/nand_base.c:6173 ../../../driver-api/mtdnand:987:
#: drivers/mtd/nand/raw/nand_bbt.c:104 drivers/mtd/nand/raw/nand_bbt.c:124
#: drivers/mtd/nand/raw/nand_bbt.c:140 drivers/mtd/nand/raw/nand_bbt.c:164
#: drivers/mtd/nand/raw/nand_bbt.c:256 drivers/mtd/nand/raw/nand_bbt.c:308
#: drivers/mtd/nand/raw/nand_bbt.c:386 drivers/mtd/nand/raw/nand_bbt.c:487
#: drivers/mtd/nand/raw/nand_bbt.c:543 drivers/mtd/nand/raw/nand_bbt.c:626
#: drivers/mtd/nand/raw/nand_bbt.c:647 drivers/mtd/nand/raw/nand_bbt.c:711
#: drivers/mtd/nand/raw/nand_bbt.c:742 drivers/mtd/nand/raw/nand_bbt.c:927
#: drivers/mtd/nand/raw/nand_bbt.c:944 drivers/mtd/nand/raw/nand_bbt.c:1071
#: drivers/mtd/nand/raw/nand_bbt.c:1126 drivers/mtd/nand/raw/nand_bbt.c:1187
#: drivers/mtd/nand/raw/nand_bbt.c:1236 drivers/mtd/nand/raw/nand_bbt.c:1366
msgid "**Description**"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:389
msgid ""
"This struct defines the timing requirements of a SDR NAND chip. These "
"information can be found in every NAND datasheets and the timings meaning "
"are described in the ONFI specifications: https://media-www.micron.com/-/"
"media/client/onfi/specs/onfi_3_1_spec.pdf (chapter 4.15 Timing Parameters)"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:395
#: include/linux/mtd/rawnand.h:487
msgid "All these timings are expressed in picoseconds."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:480
msgid "NV-DDR NAND chip timings"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:494
msgid "``tAC_min``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:495
#: include/linux/mtd/rawnand.h:496
msgid "Access window of DQ[7:0] from CLK"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:495
msgid "``tAC_max``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:497
msgid "``tCAD_min``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:498
msgid "Command, Address, Data delay"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:498
msgid "``tCAH_min``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:499
msgid "Command/Address DQ hold time"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:499
msgid "``tCALH_min``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:500
msgid "W/R_n, CLE and ALE hold time"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:500
msgid "``tCALS_min``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:501
msgid "W/R_n, CLE and ALE setup time"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:501
msgid "``tCAS_min``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:502
msgid "Command/address DQ setup time"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:504
msgid "``tCK_min``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:505
msgid "Average clock cycle time"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:507
msgid "``tDQSCK_min``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:508
msgid "Start of the access window of DQS from CLK"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:508
msgid "``tDQSCK_max``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:509
msgid "End of the access window of DQS from CLK"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:509
msgid "``tDQSD_min``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:510
msgid "Min W/R_n low to DQS/DQ driven by device"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:510
msgid "``tDQSD_max``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:511
msgid "Max W/R_n low to DQS/DQ driven by device"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:511
msgid "``tDQSHZ_max``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:512
msgid "W/R_n high to DQS/DQ tri-state by device"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:512
msgid "``tDQSQ_max``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:513
msgid "DQS-DQ skew, DQS to last DQ valid, per access"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:514
msgid "``tDSC_min``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:515
msgid "DQS cycle time"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:517
msgid "``tQHS_max``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:518
msgid "Data hold skew factor"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:519
msgid "Data output cycle to command, address, or data input cycle"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:524
msgid "``tWRCK_min``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:525
msgid "W/R_n low to data output cycle"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:481
msgid ""
"This struct defines the timing requirements of a NV-DDR NAND data interface. "
"These information can be found in every NAND datasheets and the timings "
"meaning are described in the ONFI specifications: https://media-www.micron."
"com/-/media/client/onfi/specs/onfi_4_1_gold.pdf (chapter 4.18.2 NV-DDR)"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:594
msgid "NAND interface type"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:598
#: include/linux/mtd/rawnand.h:718
msgid "**Constants**"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:600
msgid "``NAND_SDR_IFACE``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:601
msgid "Single Data Rate interface"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:603
msgid "``NAND_NVDDR_IFACE``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:604
msgid "Double Data Rate interface"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:604
msgid "NAND interface timing"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:605
#: include/linux/mtd/rawnand.h:731 include/linux/mtd/rawnand.h:897
msgid "``type``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:606
msgid "type of the timing"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:606
msgid "``timings``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:607
msgid "The timing information"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:607
msgid "``timings.mode``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:608
msgid "Timing mode as defined in the specification"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1
msgid "``{unnamed_union}``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:2
msgid "anonymous"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:608
msgid "``timings.sdr``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:609
msgid "Use it when **type** is ``NAND_SDR_IFACE``."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:609
msgid "``timings.nvddr``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:610
msgid "Use it when **type** is ``NAND_NVDDR_IFACE``."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:623
#: include/linux/mtd/rawnand.h:632
msgid "get the interface type"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:627
#: include/linux/mtd/rawnand.h:636 include/linux/mtd/rawnand.h:645
#: include/linux/mtd/rawnand.h:658 include/linux/mtd/rawnand.h:1395
#: include/linux/mtd/rawnand.h:1494 include/linux/mtd/rawnand.h:1620
#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:123
#: drivers/mtd/nand/raw/nand_base.c:167 drivers/mtd/nand/raw/nand_base.c:192
#: drivers/mtd/nand/raw/nand_base.c:642 drivers/mtd/nand/raw/nand_base.c:713
#: drivers/mtd/nand/raw/nand_base.c:1334 drivers/mtd/nand/raw/nand_base.c:1430
#: drivers/mtd/nand/raw/nand_base.c:1497 drivers/mtd/nand/raw/nand_base.c:1601
#: drivers/mtd/nand/raw/nand_base.c:1639 drivers/mtd/nand/raw/nand_base.c:1687
#: drivers/mtd/nand/raw/nand_base.c:1742 drivers/mtd/nand/raw/nand_base.c:1805
#: drivers/mtd/nand/raw/nand_base.c:1873 drivers/mtd/nand/raw/nand_base.c:1922
#: drivers/mtd/nand/raw/nand_base.c:1950 drivers/mtd/nand/raw/nand_base.c:2138
#: drivers/mtd/nand/raw/nand_base.c:2170 drivers/mtd/nand/raw/nand_base.c:2255
#: drivers/mtd/nand/raw/nand_base.c:2498 drivers/mtd/nand/raw/nand_base.c:2603
#: drivers/mtd/nand/raw/nand_base.c:2625 drivers/mtd/nand/raw/nand_base.c:2657
#: drivers/mtd/nand/raw/nand_base.c:2679 drivers/mtd/nand/raw/nand_base.c:2711
#: drivers/mtd/nand/raw/nand_base.c:2806 drivers/mtd/nand/raw/nand_base.c:2836
#: drivers/mtd/nand/raw/nand_base.c:3169 drivers/mtd/nand/raw/nand_base.c:3628
#: drivers/mtd/nand/raw/nand_base.c:3695 drivers/mtd/nand/raw/nand_base.c:3921
#: drivers/mtd/nand/raw/nand_base.c:3951 drivers/mtd/nand/raw/nand_base.c:5452
#: drivers/mtd/nand/raw/nand_base.c:6090 drivers/mtd/nand/raw/nand_base.c:6512
#: drivers/mtd/nand/raw/nand_base.c:6553 ../../../driver-api/mtdnand:984:
#: drivers/mtd/nand/raw/nand_base.c:208 drivers/mtd/nand/raw/nand_base.c:221
#: drivers/mtd/nand/raw/nand_base.c:250 drivers/mtd/nand/raw/nand_base.c:286
#: drivers/mtd/nand/raw/nand_base.c:337 drivers/mtd/nand/raw/nand_base.c:358
#: drivers/mtd/nand/raw/nand_base.c:386 drivers/mtd/nand/raw/nand_base.c:424
#: drivers/mtd/nand/raw/nand_base.c:498 drivers/mtd/nand/raw/nand_base.c:541
#: drivers/mtd/nand/raw/nand_base.c:554 drivers/mtd/nand/raw/nand_base.c:607
#: drivers/mtd/nand/raw/nand_base.c:624 drivers/mtd/nand/raw/nand_base.c:749
#: drivers/mtd/nand/raw/nand_base.c:793 drivers/mtd/nand/raw/nand_base.c:833
#: drivers/mtd/nand/raw/nand_base.c:924 drivers/mtd/nand/raw/nand_base.c:975
#: drivers/mtd/nand/raw/nand_base.c:1026 drivers/mtd/nand/raw/nand_base.c:1049
#: drivers/mtd/nand/raw/nand_base.c:1085 drivers/mtd/nand/raw/nand_base.c:1382
#: drivers/mtd/nand/raw/nand_base.c:2011 drivers/mtd/nand/raw/nand_base.c:2061
#: drivers/mtd/nand/raw/nand_base.c:2314 drivers/mtd/nand/raw/nand_base.c:2370
#: drivers/mtd/nand/raw/nand_base.c:2749 drivers/mtd/nand/raw/nand_base.c:2770
#: drivers/mtd/nand/raw/nand_base.c:2791 drivers/mtd/nand/raw/nand_base.c:2877
#: drivers/mtd/nand/raw/nand_base.c:2941 drivers/mtd/nand/raw/nand_base.c:2987
#: drivers/mtd/nand/raw/nand_base.c:3098 drivers/mtd/nand/raw/nand_base.c:3236
#: drivers/mtd/nand/raw/nand_base.c:3328 drivers/mtd/nand/raw/nand_base.c:3405
#: drivers/mtd/nand/raw/nand_base.c:3438 drivers/mtd/nand/raw/nand_base.c:3641
#: drivers/mtd/nand/raw/nand_base.c:3709 drivers/mtd/nand/raw/nand_base.c:3782
#: drivers/mtd/nand/raw/nand_base.c:3864 drivers/mtd/nand/raw/nand_base.c:3906
#: drivers/mtd/nand/raw/nand_base.c:3987 drivers/mtd/nand/raw/nand_base.c:4051
#: drivers/mtd/nand/raw/nand_base.c:4080 drivers/mtd/nand/raw/nand_base.c:4124
#: drivers/mtd/nand/raw/nand_base.c:4194 drivers/mtd/nand/raw/nand_base.c:4264
#: drivers/mtd/nand/raw/nand_base.c:4304 drivers/mtd/nand/raw/nand_base.c:4437
#: drivers/mtd/nand/raw/nand_base.c:4472 drivers/mtd/nand/raw/nand_base.c:4508
#: drivers/mtd/nand/raw/nand_base.c:4520 drivers/mtd/nand/raw/nand_base.c:4621
#: drivers/mtd/nand/raw/nand_base.c:4639 drivers/mtd/nand/raw/nand_base.c:4663
#: drivers/mtd/nand/raw/nand_base.c:4683 drivers/mtd/nand/raw/nand_base.c:4704
#: drivers/mtd/nand/raw/nand_base.c:4726 drivers/mtd/nand/raw/nand_base.c:4736
#: drivers/mtd/nand/raw/nand_base.c:4752 drivers/mtd/nand/raw/nand_base.c:5535
#: drivers/mtd/nand/raw/nand_base.c:5882 drivers/mtd/nand/raw/nand_base.c:5936
#: drivers/mtd/nand/raw/nand_base.c:6020 drivers/mtd/nand/raw/nand_base.c:6174
#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:102
#: drivers/mtd/nand/raw/nand_bbt.c:124 drivers/mtd/nand/raw/nand_bbt.c:141
#: drivers/mtd/nand/raw/nand_bbt.c:160 drivers/mtd/nand/raw/nand_bbt.c:253
#: drivers/mtd/nand/raw/nand_bbt.c:306 drivers/mtd/nand/raw/nand_bbt.c:384
#: drivers/mtd/nand/raw/nand_bbt.c:484 drivers/mtd/nand/raw/nand_bbt.c:542
#: drivers/mtd/nand/raw/nand_bbt.c:624 drivers/mtd/nand/raw/nand_bbt.c:645
#: drivers/mtd/nand/raw/nand_bbt.c:709 drivers/mtd/nand/raw/nand_bbt.c:739
#: drivers/mtd/nand/raw/nand_bbt.c:927 drivers/mtd/nand/raw/nand_bbt.c:943
#: drivers/mtd/nand/raw/nand_bbt.c:1071 drivers/mtd/nand/raw/nand_bbt.c:1126
#: drivers/mtd/nand/raw/nand_bbt.c:1187 drivers/mtd/nand/raw/nand_bbt.c:1236
#: drivers/mtd/nand/raw/nand_bbt.c:1367 drivers/mtd/nand/raw/nand_bbt.c:1433
#: drivers/mtd/nand/raw/nand_bbt.c:1446 drivers/mtd/nand/raw/nand_bbt.c:1476
msgid "**Parameters**"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:629
#: include/linux/mtd/rawnand.h:638 include/linux/mtd/rawnand.h:647
#: include/linux/mtd/rawnand.h:660
msgid "``const struct nand_interface_config *conf``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:624
#: include/linux/mtd/rawnand.h:633 include/linux/mtd/rawnand.h:642
#: include/linux/mtd/rawnand.h:655
msgid "The data interface"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:641
msgid "get SDR timing from data interface"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:654
msgid "get NV-DDR timing from data interface"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:667
msgid "Definition of a command instruction"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:668
msgid "``opcode``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:669
msgid "the command to issue in one cycle"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:675
msgid "Definition of an address instruction"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:676
msgid "``naddrs``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:677
msgid "length of the **addrs** array"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:677
msgid "``addrs``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:678
msgid "array containing the address cycles to issue"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:685
msgid "Definition of a data instruction"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:687
msgid "number of data bytes to move"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:687
msgid "``buf``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:688
msgid "buffer to fill"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:688
msgid "``buf.in``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:689
msgid "buffer to fill when reading from the NAND chip"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:689
msgid "``buf.out``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:690
msgid "buffer to read from when writing to the NAND chip"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:690
msgid "``force_8bit``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:691
msgid "force 8-bit access"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:691
msgid ""
"Please note that \"in\" and \"out\" are inverted from the ONFI specification "
"and are from the controller perspective, so a \"in\" is a read from the NAND "
"chip while a \"out\" is a write to the NAND chip."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:706
msgid "Definition of a wait ready instruction"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:707
msgid "``timeout_ms``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:708
msgid "maximum delay while waiting for the ready/busy pin in ms"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:714
msgid "Definition of all instruction types"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:720
msgid "``NAND_OP_CMD_INSTR``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:721
msgid "command instruction"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:723
msgid "``NAND_OP_ADDR_INSTR``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:724
msgid "address instruction"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:726
msgid "``NAND_OP_DATA_IN_INSTR``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:727
msgid "data in instruction"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:729
msgid "``NAND_OP_DATA_OUT_INSTR``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:730
msgid "data out instruction"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:732
msgid "``NAND_OP_WAITRDY_INSTR``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:733
msgid "wait ready instruction"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:730
msgid "Instruction object"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:732
msgid "the instruction type"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:732
#: include/linux/mtd/rawnand.h:899
msgid "``ctx``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:733
msgid ""
"extra data associated to the instruction. You'll have to use the appropriate "
"element depending on **type**"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:734
msgid "``ctx.cmd``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:735
msgid "use it if **type** is ``NAND_OP_CMD_INSTR``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:735
#: include/linux/mtd/rawnand.h:900
msgid "``ctx.addr``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:736
msgid "use it if **type** is ``NAND_OP_ADDR_INSTR``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:736
#: include/linux/mtd/rawnand.h:901
msgid "``ctx.data``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:737
msgid ""
"use it if **type** is ``NAND_OP_DATA_IN_INSTR`` or ``NAND_OP_DATA_OUT_INSTR``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:738
msgid "``ctx.waitrdy``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:739
msgid "use it if **type** is ``NAND_OP_WAITRDY_INSTR``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:739
msgid "``delay_ns``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:740
msgid ""
"delay the controller should apply after the instruction has been issued on "
"the bus. Most modern controllers have internal timings control logic, and in "
"this case, the controller driver can ignore this field."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:845
msgid "a sub operation"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:846
#: include/linux/mtd/rawnand.h:1005
msgid "``cs``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:847
msgid "the CS line to select for this NAND sub-operation"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:847
#: include/linux/mtd/rawnand.h:1008 ../../../driver-api/mtdnand:984:
#: drivers/mtd/nand/raw/nand_base.c:2296
msgid "``instrs``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:848
msgid "array of instructions"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:848
#: include/linux/mtd/rawnand.h:1009 ../../../driver-api/mtdnand:984:
#: drivers/mtd/nand/raw/nand_base.c:2297
msgid "``ninstrs``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:849
#: include/linux/mtd/rawnand.h:1010 ../../../driver-api/mtdnand:984:
#: drivers/mtd/nand/raw/nand_base.c:2298
msgid "length of the **instrs** array"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:849
msgid "``first_instr_start_off``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:850
msgid "offset to start from for the first instruction of the sub-operation"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:851
msgid "``last_instr_end_off``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:852
msgid ""
"offset to end at (excluded) for the last instruction of the sub-operation"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:853
msgid ""
"Both **first_instr_start_off** and **last_instr_end_off** only apply to data "
"or address instructions."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:856
msgid ""
"When an operation cannot be handled as is by the NAND controller, it will be "
"split by the parser into sub-operations which will be passed to the "
"controller driver."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:879
msgid "Constraints for address instructions"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:880
msgid "``maxcycles``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:881
msgid ""
"maximum number of address cycles the controller can issue in a single step"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:888
msgid "Constraints for data instructions"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:889
msgid "``maxlen``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:890
msgid "maximum data length that the controller can handle in a single step"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:896
msgid "One element of a pattern"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:898
msgid "the instructuction type"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:898
msgid "``optional``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:899
msgid "whether this element of the pattern is optional or mandatory"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:900
msgid "address or data constraint"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:901
msgid "address constraint (number of cycles)"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:902
msgid "data constraint (data length)"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:946
msgid "NAND sub-operation pattern descriptor"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:947
msgid "``elems``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:948
msgid "array of pattern elements"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:948
msgid "``nelems``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:949
msgid "number of pattern elements in **elems** array"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:949
msgid "``exec``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:950
msgid "the function that will issue a sub-operation"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:950
msgid ""
"A pattern is a list of elements, each element reprensenting one instruction "
"with its constraints. The pattern itself is used by the core to match NAND "
"chip operation with NAND controller operations. Once a match between a NAND "
"controller operation pattern and a NAND chip operation (or a sub-set of a "
"NAND operation) is found, the pattern ->exec() hook is called so that the "
"controller driver can issue the operation on the bus."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:958
msgid ""
"Controller drivers should declare as many patterns as they support and pass "
"this list of patterns (created with the help of the following macro) to the "
"nand_op_parser_exec_op() helper."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:978
msgid "NAND controller operation parser descriptor"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:979
msgid "``patterns``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:980
msgid "array of supported patterns"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:980
msgid "``npatterns``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:981
msgid "length of the **patterns** array"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:981
msgid ""
"The parser descriptor is just an array of supported patterns which will be "
"iterated by nand_op_parser_exec_op() everytime it tries to execute an NAND "
"operation (or tries to determine if a specific operation is supported)."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:985
msgid ""
"It is worth mentioning that patterns will be tested in their declaration "
"order, and the first match will be taken, so it's important to order "
"patterns appropriately so that simple/inefficient patterns are placed at the "
"end of the list. Usually, this is where you put single instruction patterns."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1004
msgid "NAND operation descriptor"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1006
msgid "the CS line to select for this NAND operation"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1006
msgid "``deassert_wp``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1007
msgid ""
"set to true when the operation requires the WP pin to be de-asserted (ERASE, "
"PROG, ...)"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1009
msgid "array of instructions to execute"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1010
msgid "The actual operation structure that will be passed to chip->exec_op()."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1076
msgid "Controller operations"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1078
msgid "``attach_chip``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1079
msgid ""
"this method is called after the NAND detection phase after flash ID and MTD "
"fields such as erase size, page size and OOB size have been set up. ECC "
"requirements are available if provided by the NAND chip or device tree. "
"Typically used to choose the appropriate ECC configuration and allocate "
"associated resources. This hook is optional."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1085
msgid "``detach_chip``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1086
msgid ""
"free all resources allocated/claimed in nand_controller_ops->attach_chip(). "
"This hook is optional."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1088
msgid "``exec_op``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1089
msgid ""
"controller specific method to execute NAND operations. This method replaces "
"chip->legacy.cmdfunc(), chip->legacy.{read,write}_{buf,byte,word}(), chip-"
">legacy.dev_ready() and chip->legacy.waitfunc()."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1092
msgid "``setup_interface``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1093
msgid ""
"setup the data interface and timing. If chipnr is set to "
"``NAND_DATA_IFACE_CHECK_ONLY`` this means the configuration should not be "
"applied but only checked. This hook is optional."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1108
msgid "Structure used to describe a NAND controller"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1110
#: include/linux/mtd/rawnand.h:1267
msgid "``lock``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1111
msgid "lock used to serialize accesses to the NAND controller"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1111
#: include/linux/mtd/rawnand.h:1231
msgid "``ops``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1112
msgid "NAND controller operations."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1112
msgid "``supported_op``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1113
msgid ""
"NAND controller known-to-be-supported operations, only writable by the core "
"after initial checking."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1114
msgid "``supported_op.data_only_read``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1115
msgid ""
"The controller supports reading more data from the bus without restarting an "
"entire read operation nor changing the column."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1117
msgid "``supported_op.cont_read``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1118
msgid "The controller supports sequential cache reads."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1118
msgid "``controller_wp``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1119
msgid "the controller is in charge of handling the WP pin."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1136
msgid "NAND chip legacy fields/hooks"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1137
msgid "``IO_ADDR_R``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1138
msgid "address to read the 8 I/O lines of the flash device"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1138
msgid "``IO_ADDR_W``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1139
msgid "address to write the 8 I/O lines of the flash device"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1139
msgid "``select_chip``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1140
msgid "select/deselect a specific target/die"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1140
msgid "``read_byte``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1141
msgid "read one byte from the chip"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1141
msgid "``write_byte``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1142
msgid "write a single byte to the chip on the low 8 I/O lines"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1142
msgid "``write_buf``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1143
msgid "write data from the buffer to the chip"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1143
msgid "``read_buf``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1144
msgid "read data from the chip into the buffer"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1144
msgid "``cmd_ctrl``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1145
msgid ""
"hardware specific function for controlling ALE/CLE/nCE. Also used to write "
"command and address"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1146
msgid "``cmdfunc``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1147
msgid "hardware specific function for writing commands to the chip."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1147
msgid "``dev_ready``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1148
msgid ""
"hardware specific function for accessing device ready/busy line. If set to "
"NULL no access to ready/busy is available and the ready/busy information is "
"read from the chip status register."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1150
msgid "``waitfunc``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1151
msgid "hardware specific function for wait on ready."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1151
msgid "``block_bad``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1152
msgid "check if a block is bad, using OOB markers"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1152
msgid "``block_markbad``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1153
#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:550
msgid "mark a block bad"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1153
msgid "``set_features``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1154
msgid "set the NAND chip features"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1154
msgid "``get_features``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1155
msgid "get the NAND chip features"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1155
msgid "``chip_delay``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1156
msgid ""
"chip dependent delay for transferring data from array to read regs (tR)."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1157
msgid "``dummy_controller``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1158
msgid ""
"dummy controller implementation for drivers that can only control a single "
"chip"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1159
msgid ""
"If you look at this structure you're already wrong. These fields/hooks are "
"all deprecated."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1187
#: include/linux/mtd/rawnand.h:1232
msgid "NAND chip operations"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1188
msgid "``suspend``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1189
msgid "Suspend operation"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1189
msgid "``resume``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1190
msgid "Resume operation"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1190
msgid "``lock_area``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1191
msgid "Lock operation"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1191
msgid "``unlock_area``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1192
msgid "Unlock operation"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1192
msgid "``setup_read_retry``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1193
msgid "Set the read-retry mode (mostly needed for MLC NANDs)"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1193
msgid "``choose_interface_config``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1194
msgid "Choose the best interface configuration"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1206
msgid "NAND manufacturer structure"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1207
msgid "``desc``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1208
msgid "The manufacturer description"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1208
#: include/linux/mtd/rawnand.h:1286
msgid "``priv``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1209
msgid "Private information for the manufacturer driver"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1216
msgid "NAND secure region structure"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1217
msgid "``offset``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1218
msgid "Offset of the start of the secure region"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1219
msgid "Size of the secure region"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1226
msgid "NAND Private Flash Chip Data"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1227
msgid "``base``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1228
msgid "Inherit from the generic NAND device"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1228
#: include/linux/mtd/rawnand.h:1437
msgid "``id``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1229
msgid "Holds NAND ID"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1229
msgid "``parameters``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1230
msgid "Holds generic parameters under an easily readable form"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1230
msgid "``manufacturer``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1231
msgid "Manufacturer information"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1232
msgid "``legacy``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1233
msgid ""
"All legacy fields/hooks. If you develop a new driver, don't even try to use "
"any of these fields/hooks, and if you're modifying an existing driver that "
"is using those fields/hooks, you should consider reworking the driver and "
"avoid using them."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1237
msgid ""
"Various chip options. They can partly be set to inform nand_scan about "
"special functionality. See the defines for further explanation."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1239
msgid "``current_interface_config``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1240
msgid "The currently used NAND interface configuration"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1240
msgid "``best_interface_config``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1241
msgid ""
"The best NAND interface configuration which fits both the NAND chip and NAND "
"controller constraints. If unset, the default reset interface configuration "
"must be used."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1244
msgid "``bbt_erase_shift``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1245
msgid "Number of address bits in a bbt entry"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1245
msgid "``bbt_options``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1246
msgid ""
"Bad block table specific options. All options used here must come from bbm."
"h. By default, these options will be copied to the appropriate "
"nand_bbt_descr's."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1248
msgid "``badblockpos``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1249
msgid "Bad block marker position in the oob area"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1249
msgid "``badblockbits``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1250
msgid ""
"Minimum number of set bits in a good block's bad block marker position; i."
"e., BBM = 11110111b is good when badblockbits = 7"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1251
msgid "``bbt_td``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1252
msgid "Bad block table descriptor for flash lookup"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1252
msgid "``bbt_md``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1253
msgid "Bad block table mirror descriptor"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1253
msgid "``badblock_pattern``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1254
msgid "Bad block scan pattern used for initial bad block scan"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1254
msgid "``bbt``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1255
msgid "Bad block table pointer"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1255
msgid "``page_shift``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1256
msgid "Number of address bits in a page (column address bits)"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1256
msgid "``phys_erase_shift``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1257
msgid "Number of address bits in a physical eraseblock"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1257
msgid "``chip_shift``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1258
msgid "Number of address bits in one chip"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1258
msgid "``pagemask``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1259
msgid "Page number mask = number of (pages / chip) - 1"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1259
msgid "``subpagesize``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1260
msgid "Holds the subpagesize"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1260
msgid "``data_buf``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1261
msgid "Buffer for data, size is (page size + oobsize)"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1261
msgid "``oob_poi``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1262
msgid "pointer on the OOB area covered by data_buf"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1262
msgid "``pagecache``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1263
msgid "Structure containing page cache related fields"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1263
msgid "``pagecache.bitflips``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1264
msgid "Number of bitflips of the cached page"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1264
msgid "``pagecache.page``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1265
msgid ""
"Page number currently in the cache. -1 means no page is currently cached"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1266
msgid "``buf_align``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1267
msgid "Minimum buffer alignment required by a platform"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1268
msgid ""
"Lock protecting the suspended field. Also used to serialize accesses to the "
"NAND device"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1269
msgid "``suspended``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1270
msgid "Set to 1 when the device is suspended, 0 when it's not"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1270
msgid "``resume_wq``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1271
msgid "wait queue to sleep if rawnand is in suspended state."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1271
msgid "``cur_cs``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1272
msgid ""
"Currently selected target. -1 means no target selected, otherwise we should "
"always have cur_cs >= 0 && cur_cs < nanddev_ntargets(). NAND Controller "
"drivers should not modify this value, but they're allowed to read it."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1275
msgid "``read_retries``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1276
msgid "The number of read retry modes supported"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1276
msgid "``secure_regions``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1277
msgid "Structure containing the secure regions info"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1277
msgid "``nr_secure_regions``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1278
msgid "Number of secure regions"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1278
msgid "``cont_read``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1279
msgid "Sequential page read internals"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1279
msgid "``cont_read.ongoing``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1280
msgid "Whether a continuous read is ongoing or not"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1280
msgid "``cont_read.first_page``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1281
msgid "Start of the continuous read operation"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1281
msgid "``cont_read.pause_page``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1282
msgid "End of the current sequential cache read operation"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1282
msgid "``cont_read.last_page``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1283
msgid "End of the continuous read operation"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1283
msgid "``controller``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1284
msgid ""
"The hardware controller structure which is shared among multiple independent "
"devices"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1285
#: include/linux/mtd/rawnand.h:1446
msgid "``ecc``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1286
msgid "The ECC controller structure"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1287
msgid "Chip private data"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1391
msgid "Retrieve the current interface configuration of a NAND chip"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1397
#: include/linux/mtd/rawnand.h:1622 ../../../driver-api/mtdnand:972:
#: drivers/mtd/nand/raw/nand_base.c:169 drivers/mtd/nand/raw/nand_base.c:194
#: drivers/mtd/nand/raw/nand_base.c:644 drivers/mtd/nand/raw/nand_base.c:715
#: drivers/mtd/nand/raw/nand_base.c:1336 drivers/mtd/nand/raw/nand_base.c:1432
#: drivers/mtd/nand/raw/nand_base.c:1499 drivers/mtd/nand/raw/nand_base.c:1603
#: drivers/mtd/nand/raw/nand_base.c:1641 drivers/mtd/nand/raw/nand_base.c:1689
#: drivers/mtd/nand/raw/nand_base.c:1744 drivers/mtd/nand/raw/nand_base.c:1807
#: drivers/mtd/nand/raw/nand_base.c:1875 drivers/mtd/nand/raw/nand_base.c:1924
#: drivers/mtd/nand/raw/nand_base.c:1952 drivers/mtd/nand/raw/nand_base.c:2140
#: drivers/mtd/nand/raw/nand_base.c:2172 drivers/mtd/nand/raw/nand_base.c:2257
#: drivers/mtd/nand/raw/nand_base.c:2500 drivers/mtd/nand/raw/nand_base.c:2713
#: drivers/mtd/nand/raw/nand_base.c:2808 drivers/mtd/nand/raw/nand_base.c:2838
#: drivers/mtd/nand/raw/nand_base.c:3171 drivers/mtd/nand/raw/nand_base.c:3630
#: drivers/mtd/nand/raw/nand_base.c:3697 drivers/mtd/nand/raw/nand_base.c:3923
#: drivers/mtd/nand/raw/nand_base.c:3953 drivers/mtd/nand/raw/nand_base.c:6092
#: drivers/mtd/nand/raw/nand_base.c:6514 drivers/mtd/nand/raw/nand_base.c:6555
#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:210
#: drivers/mtd/nand/raw/nand_base.c:223 drivers/mtd/nand/raw/nand_base.c:252
#: drivers/mtd/nand/raw/nand_base.c:288 drivers/mtd/nand/raw/nand_base.c:339
#: drivers/mtd/nand/raw/nand_base.c:360 drivers/mtd/nand/raw/nand_base.c:388
#: drivers/mtd/nand/raw/nand_base.c:426 drivers/mtd/nand/raw/nand_base.c:500
#: drivers/mtd/nand/raw/nand_base.c:543 drivers/mtd/nand/raw/nand_base.c:556
#: drivers/mtd/nand/raw/nand_base.c:626 drivers/mtd/nand/raw/nand_base.c:751
#: drivers/mtd/nand/raw/nand_base.c:795 drivers/mtd/nand/raw/nand_base.c:835
#: drivers/mtd/nand/raw/nand_base.c:926 drivers/mtd/nand/raw/nand_base.c:977
#: drivers/mtd/nand/raw/nand_base.c:1028 drivers/mtd/nand/raw/nand_base.c:1051
#: drivers/mtd/nand/raw/nand_base.c:1087 drivers/mtd/nand/raw/nand_base.c:1384
#: drivers/mtd/nand/raw/nand_base.c:2013 drivers/mtd/nand/raw/nand_base.c:2063
#: drivers/mtd/nand/raw/nand_base.c:2751 drivers/mtd/nand/raw/nand_base.c:2772
#: drivers/mtd/nand/raw/nand_base.c:2793 drivers/mtd/nand/raw/nand_base.c:2879
#: drivers/mtd/nand/raw/nand_base.c:2943 drivers/mtd/nand/raw/nand_base.c:2989
#: drivers/mtd/nand/raw/nand_base.c:3100 drivers/mtd/nand/raw/nand_base.c:3238
#: drivers/mtd/nand/raw/nand_base.c:3330 drivers/mtd/nand/raw/nand_base.c:3407
#: drivers/mtd/nand/raw/nand_base.c:3440 drivers/mtd/nand/raw/nand_base.c:3643
#: drivers/mtd/nand/raw/nand_base.c:3711 drivers/mtd/nand/raw/nand_base.c:3784
#: drivers/mtd/nand/raw/nand_base.c:3908 drivers/mtd/nand/raw/nand_base.c:3989
#: drivers/mtd/nand/raw/nand_base.c:4053 drivers/mtd/nand/raw/nand_base.c:4082
#: drivers/mtd/nand/raw/nand_base.c:4126 drivers/mtd/nand/raw/nand_base.c:4196
#: drivers/mtd/nand/raw/nand_base.c:4266 drivers/mtd/nand/raw/nand_base.c:4306
#: drivers/mtd/nand/raw/nand_base.c:4522 drivers/mtd/nand/raw/nand_base.c:5537
#: drivers/mtd/nand/raw/nand_base.c:5884 drivers/mtd/nand/raw/nand_base.c:5938
#: drivers/mtd/nand/raw/nand_base.c:6022 drivers/mtd/nand/raw/nand_base.c:6176
msgid "``struct nand_chip *chip``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1393
#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1331
#: drivers/mtd/nand/raw/nand_base.c:1427 drivers/mtd/nand/raw/nand_base.c:1494
#: drivers/mtd/nand/raw/nand_base.c:1598 drivers/mtd/nand/raw/nand_base.c:1636
#: drivers/mtd/nand/raw/nand_base.c:1684 drivers/mtd/nand/raw/nand_base.c:1739
#: drivers/mtd/nand/raw/nand_base.c:1802 drivers/mtd/nand/raw/nand_base.c:1870
#: drivers/mtd/nand/raw/nand_base.c:1919 drivers/mtd/nand/raw/nand_base.c:1947
#: drivers/mtd/nand/raw/nand_base.c:2135 drivers/mtd/nand/raw/nand_base.c:2167
#: drivers/mtd/nand/raw/nand_base.c:2252 drivers/mtd/nand/raw/nand_base.c:2708
#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:790
#: drivers/mtd/nand/raw/nand_base.c:830 drivers/mtd/nand/raw/nand_base.c:1046
#: drivers/mtd/nand/raw/nand_base.c:1082 drivers/mtd/nand/raw/nand_base.c:1379
#: drivers/mtd/nand/raw/nand_base.c:2008 drivers/mtd/nand/raw/nand_base.c:2058
msgid "The NAND chip"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1430
msgid "NAND Flash Device ID Structure"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1431
msgid "``name``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1432
msgid "a human-readable name of the NAND chip"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1
msgid "``{unnamed_struct}``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1433
msgid "``mfr_id``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1434
msgid ""
"manufacturer ID part of the full chip ID array (refers the same memory "
"address as ``id[0]``)"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1435
msgid "``dev_id``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1436
msgid ""
"device ID part of the full chip ID array (refers the same memory address as "
"``id[1]``)"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1438
msgid "full device ID array"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1438
msgid "``pagesize``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1439
msgid ""
"size of the NAND page in bytes; if 0, then the real page size (as well as "
"the eraseblock size) is determined from the extended NAND chip ID array)"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1441
msgid "``chipsize``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1442
msgid "total chip size in MiB"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1442
msgid "``erasesize``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1443
msgid "eraseblock size in bytes (determined from the extended ID if 0)"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1444
msgid "stores various chip bit options"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1444
msgid "``id_len``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1445
msgid "The valid length of the **id**."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1445
msgid "``oobsize``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1446
msgid "OOB size"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1447
msgid "ECC correctability and step information from the datasheet."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1447
msgid "``ecc.strength_ds``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1448
msgid ""
"The ECC correctability from the datasheet, same as the **ecc_strength_ds** "
"in nand_chip{}."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1449
msgid "``ecc.step_ds``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1450
msgid ""
"The ECC step required by the **ecc.strength_ds**, same as the "
"**ecc_step_ds** in nand_chip{}, also from the datasheet. For example, the "
"\"4bit ECC for each 512Byte\" can be set with NAND_ECC_INFO(4, 512)."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1490
msgid "Check if the opcode's address should be sent only on the lower 8 bits"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1496
msgid "``unsigned int command``"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1492
msgid "opcode to check"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1616
msgid "Get the internal page buffer"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1617
#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:164
#: drivers/mtd/nand/raw/nand_base.c:189 drivers/mtd/nand/raw/nand_base.c:6509
#: drivers/mtd/nand/raw/nand_base.c:6550 ../../../driver-api/mtdnand:984:
#: drivers/mtd/nand/raw/nand_base.c:205 drivers/mtd/nand/raw/nand_base.c:218
#: drivers/mtd/nand/raw/nand_base.c:247 drivers/mtd/nand/raw/nand_base.c:283
#: drivers/mtd/nand/raw/nand_base.c:355 drivers/mtd/nand/raw/nand_base.c:383
#: drivers/mtd/nand/raw/nand_base.c:421 drivers/mtd/nand/raw/nand_base.c:495
#: drivers/mtd/nand/raw/nand_base.c:538 drivers/mtd/nand/raw/nand_base.c:551
#: drivers/mtd/nand/raw/nand_base.c:621 drivers/mtd/nand/raw/nand_base.c:3325
#: drivers/mtd/nand/raw/nand_base.c:3402 drivers/mtd/nand/raw/nand_base.c:3435
#: drivers/mtd/nand/raw/nand_base.c:3779 drivers/mtd/nand/raw/nand_base.c:4301
#: drivers/mtd/nand/raw/nand_base.c:4517 drivers/mtd/nand/raw/nand_base.c:5532
#: drivers/mtd/nand/raw/nand_base.c:6171 ../../../driver-api/mtdnand:987:
#: drivers/mtd/nand/raw/nand_bbt.c:157 drivers/mtd/nand/raw/nand_bbt.c:250
#: drivers/mtd/nand/raw/nand_bbt.c:303 drivers/mtd/nand/raw/nand_bbt.c:381
#: drivers/mtd/nand/raw/nand_bbt.c:481 drivers/mtd/nand/raw/nand_bbt.c:539
#: drivers/mtd/nand/raw/nand_bbt.c:621 drivers/mtd/nand/raw/nand_bbt.c:736
#: drivers/mtd/nand/raw/nand_bbt.c:924 drivers/mtd/nand/raw/nand_bbt.c:1430
#: drivers/mtd/nand/raw/nand_bbt.c:1443 drivers/mtd/nand/raw/nand_bbt.c:1473
msgid "NAND chip object"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1618
msgid ""
"Returns the pre-allocated page buffer after invalidating the cache. This "
"function should be used by drivers that do not want to allocate their own "
"bounce buffer and still need such a buffer for specific operations (most "
"commonly when reading OOB data only)."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1623
msgid ""
"Be careful to never call this function in the write/write_oob path, because "
"the core may have placed the data to be written out in this buffer."
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1626
msgid "**Return**"
msgstr ""

#: ../../../driver-api/mtdnand:961: include/linux/mtd/rawnand.h:1627
msgid "pointer to the page cache buffer"
msgstr ""

#: ../../../driver-api/mtdnand.rst:965
msgid "Public Functions Provided"
msgstr ""

#: ../../../driver-api/mtdnand.rst:967
msgid ""
"This chapter contains the autogenerated documentation of the NAND kernel API "
"functions which are exported. Each function has a short description which is "
"marked with an [XXX] identifier. See the chapter \"Documentation hints\" for "
"an explanation."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:119
msgid "Copy unaligned bits from one buffer to another one"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:125
msgid "``u8 *dst``"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:120
msgid "destination buffer"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:122
msgid "``unsigned int dst_off``"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:121
msgid "bit offset at which the writing starts"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:123
msgid "``const u8 *src``"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:122
msgid "source buffer"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:124
msgid "``unsigned int src_off``"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:123
msgid "bit offset at which the reading starts"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:125
msgid "``unsigned int nbits``"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:124
msgid "number of bits to copy from **src** to **dst**"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:125
msgid "Copy bits from one memory region to another (overlap authorized)."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:163
msgid "Select a NAND target (A.K.A. die)"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:166
msgid "``unsigned int cs``"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:165
msgid ""
"the CS line to select. Note that this CS id is always from the chip PoV, not "
"the controller one"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:167
msgid ""
"Select a NAND target so that further operations executed on **chip** go to "
"the selected NAND target."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:188
msgid "Deselect the currently selected target"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:190
msgid ""
"Deselect the currently selected NAND target. The result of operations "
"executed on **chip** after the target has been deselected is undefined."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:638
msgid "Poll STATUS reg until RDY bit is set to 1"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:639
#: drivers/mtd/nand/raw/nand_base.c:710 ../../../driver-api/mtdnand:984:
#: drivers/mtd/nand/raw/nand_base.c:334 drivers/mtd/nand/raw/nand_base.c:746
msgid "NAND chip structure"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:641
#: drivers/mtd/nand/raw/nand_base.c:713
msgid "``unsigned long timeout_ms``"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:640
#: drivers/mtd/nand/raw/nand_base.c:712
msgid "Timeout in ms"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:641
msgid ""
"Poll the STATUS register using ->exec_op() until the RDY bit becomes 1. If "
"that does not happen whitin the specified timeout, -ETIMEDOUT is returned."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:645
msgid ""
"This helper is intended to be used when the controller does not have access "
"to the NAND R/B pin."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:648
msgid ""
"Be aware that calling this helper from an ->exec_op() implementation means -"
">exec_op() must be re-entrant."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:651
msgid "Return 0 if the NAND chip is ready, a negative error otherwise."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:709
msgid "Poll R/B GPIO pin until ready"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:712
msgid "``struct gpio_desc *gpiod``"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:711
msgid "GPIO descriptor of R/B pin"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:713
msgid ""
"Poll the R/B GPIO pin until it becomes ready. If that does not happen whitin "
"the specified timeout, -ETIMEDOUT is returned."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:716
msgid ""
"This helper is intended to be used when the controller has access to the "
"NAND R/B pin over GPIO."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:719
msgid ""
"Return 0 if the R/B pin indicates chip is ready, a negative error otherwise."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1330
msgid "Do a READ PAGE operation"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1333
#: drivers/mtd/nand/raw/nand_base.c:1496 drivers/mtd/nand/raw/nand_base.c:1600
#: drivers/mtd/nand/raw/nand_base.c:1686
msgid "``unsigned int page``"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1332
#: drivers/mtd/nand/raw/nand_base.c:1495
msgid "page to read"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1334
#: drivers/mtd/nand/raw/nand_base.c:1429 drivers/mtd/nand/raw/nand_base.c:1601
#: drivers/mtd/nand/raw/nand_base.c:1687 drivers/mtd/nand/raw/nand_base.c:1741
#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:1085
msgid "``unsigned int offset_in_page``"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1333
#: drivers/mtd/nand/raw/nand_base.c:1428 drivers/mtd/nand/raw/nand_base.c:1600
#: drivers/mtd/nand/raw/nand_base.c:1686 drivers/mtd/nand/raw/nand_base.c:1740
msgid "offset within the page"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1335
#: drivers/mtd/nand/raw/nand_base.c:1430 drivers/mtd/nand/raw/nand_base.c:1498
#: drivers/mtd/nand/raw/nand_base.c:1805 drivers/mtd/nand/raw/nand_base.c:2169
#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:1382
msgid "``void *buf``"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1334
#: drivers/mtd/nand/raw/nand_base.c:1429 drivers/mtd/nand/raw/nand_base.c:1497
#: drivers/mtd/nand/raw/nand_base.c:2168 ../../../driver-api/mtdnand:984:
#: drivers/mtd/nand/raw/nand_base.c:1381
msgid "buffer used to store the data"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1336
#: drivers/mtd/nand/raw/nand_base.c:1431 drivers/mtd/nand/raw/nand_base.c:1499
#: drivers/mtd/nand/raw/nand_base.c:1603 drivers/mtd/nand/raw/nand_base.c:1689
#: drivers/mtd/nand/raw/nand_base.c:1743 drivers/mtd/nand/raw/nand_base.c:1806
#: drivers/mtd/nand/raw/nand_base.c:2170 drivers/mtd/nand/raw/nand_base.c:2255
#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:1383
msgid "``unsigned int len``"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1335
#: drivers/mtd/nand/raw/nand_base.c:1430 drivers/mtd/nand/raw/nand_base.c:1498
#: drivers/mtd/nand/raw/nand_base.c:1602 drivers/mtd/nand/raw/nand_base.c:1688
#: drivers/mtd/nand/raw/nand_base.c:1742 drivers/mtd/nand/raw/nand_base.c:1805
#: drivers/mtd/nand/raw/nand_base.c:2169 drivers/mtd/nand/raw/nand_base.c:2254
#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:1382
msgid "length of the buffer"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1336
msgid ""
"This function issues a READ PAGE operation. This function does not select/"
"unselect the CS line."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1339
#: drivers/mtd/nand/raw/nand_base.c:1435 drivers/mtd/nand/raw/nand_base.c:1502
#: drivers/mtd/nand/raw/nand_base.c:1606 drivers/mtd/nand/raw/nand_base.c:1640
#: drivers/mtd/nand/raw/nand_base.c:1692 drivers/mtd/nand/raw/nand_base.c:1747
#: drivers/mtd/nand/raw/nand_base.c:1810 drivers/mtd/nand/raw/nand_base.c:1876
#: drivers/mtd/nand/raw/nand_base.c:1925 drivers/mtd/nand/raw/nand_base.c:1953
#: drivers/mtd/nand/raw/nand_base.c:2140 drivers/mtd/nand/raw/nand_base.c:2177
#: drivers/mtd/nand/raw/nand_base.c:2260 drivers/mtd/nand/raw/nand_base.c:2714
#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:1386
#: drivers/mtd/nand/raw/nand_base.c:2015 drivers/mtd/nand/raw/nand_base.c:2065
msgid "Returns 0 on success, a negative error code otherwise."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1426
msgid "Do a CHANGE READ COLUMN operation"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1432
#: drivers/mtd/nand/raw/nand_base.c:1744 drivers/mtd/nand/raw/nand_base.c:2171
#: drivers/mtd/nand/raw/nand_base.c:2256
msgid "``bool force_8bit``"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1431
#: drivers/mtd/nand/raw/nand_base.c:1743 drivers/mtd/nand/raw/nand_base.c:2170
#: drivers/mtd/nand/raw/nand_base.c:2255
msgid "force 8-bit bus access"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1432
msgid ""
"This function issues a CHANGE READ COLUMN operation. This function does not "
"select/unselect the CS line."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1493
msgid "Do a READ OOB operation"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1497
msgid "``unsigned int offset_in_oob``"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1496
msgid "offset within the OOB area"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1499
msgid ""
"This function issues a READ OOB operation. This function does not select/"
"unselect the CS line."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1597
msgid "starts a PROG PAGE operation"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1599
#: drivers/mtd/nand/raw/nand_base.c:1685
msgid "page to write"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1602
#: drivers/mtd/nand/raw/nand_base.c:1688 drivers/mtd/nand/raw/nand_base.c:1742
#: drivers/mtd/nand/raw/nand_base.c:2254
msgid "``const void *buf``"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1601
#: drivers/mtd/nand/raw/nand_base.c:1687
msgid "buffer containing the data to write to the page"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1603
msgid ""
"This function issues the first half of a PROG PAGE operation. This function "
"does not select/unselect the CS line."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1635
msgid "ends a PROG PAGE operation"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1637
msgid ""
"This function issues the second half of a PROG PAGE operation. This function "
"does not select/unselect the CS line."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1683
msgid "Do a full PROG PAGE operation"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1689
msgid ""
"This function issues a full PROG PAGE operation. This function does not "
"select/unselect the CS line."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1738
msgid "Do a CHANGE WRITE COLUMN operation"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1741
msgid "buffer containing the data to send to the NAND"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1744
msgid ""
"This function issues a CHANGE WRITE COLUMN operation. This function does not "
"select/unselect the CS line."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1801
msgid "Do a READID operation"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1804
msgid "``u8 addr``"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1803
msgid "address cycle to pass after the READID command"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1804
msgid "buffer used to store the ID"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1806
msgid ""
"This function sends a READID command and reads back the ID returned by the "
"NAND. This function does not select/unselect the CS line."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1869
msgid "Do a STATUS operation"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1872
msgid "``u8 *status``"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1871
msgid "out variable to store the NAND status"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1872
msgid ""
"This function sends a STATUS command and reads back the status returned by "
"the NAND. This function does not select/unselect the CS line."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1918
msgid "Exit a STATUS operation"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1920
msgid ""
"This function sends a READ0 command to cancel the effect of the STATUS "
"command to avoid reading only the status until a new read command is sent."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1923
msgid "This function does not select/unselect the CS line."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1946
msgid "Do an erase operation"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1949
msgid "``unsigned int eraseblock``"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1948
msgid "block to erase"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:1949
msgid ""
"This function sends an ERASE command and waits for the NAND to be ready "
"before returning. This function does not select/unselect the CS line."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2134
msgid "Do a reset operation"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2136
msgid ""
"This function sends a RESET command and waits for the NAND to be ready "
"before returning. This function does not select/unselect the CS line."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2166
msgid "Read data from the NAND"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2172
#: drivers/mtd/nand/raw/nand_base.c:2499
msgid "``bool check_only``"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2171
msgid ""
"do not actually run the command, only checks if the controller driver "
"supports it"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2173
msgid ""
"This function does a raw data read on the bus. Usually used after launching "
"another NAND operation like nand_read_page_op(). This function does not "
"select/unselect the CS line."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2251
msgid "Write data from the NAND"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2253
msgid "buffer containing the data to send on the bus"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2256
msgid ""
"This function does a raw data write on the bus. Usually used after launching "
"another NAND operation like nand_write_page_begin_op(). This function does "
"not select/unselect the CS line."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2494
msgid "exec_op parser"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2495
#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:922
#: drivers/mtd/nand/raw/nand_base.c:973 drivers/mtd/nand/raw/nand_base.c:1024
msgid "the NAND chip"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2497
msgid "``const struct nand_op_parser *parser``"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2496
msgid "patterns description provided by the controller driver"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2498
msgid "``const struct nand_operation *op``"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2497
msgid "the NAND operation to address"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2498
msgid ""
"when true, the function only checks if **op** can be handled but does not "
"execute the operation"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2500
msgid ""
"Helper function designed to ease integration of NAND controller drivers that "
"only support a limited set of instruction sequences. The supported sequences "
"are described in **parser**, and the framework takes care of splitting "
"**op** into multiple sub-operations (if required) and pass them back to the -"
">exec() callback of the matching pattern if **check_only** is set to false."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2506
msgid ""
"NAND controller drivers should call this function from their own ->exec_op() "
"implementation."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2509
msgid ""
"Returns 0 on success, a negative error code otherwise. A failure can be "
"caused by an unsupported operation (none of the supported patterns is able "
"to handle the requested operation), or an error returned by one of the "
"matching pattern->exec() hook."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2599
msgid "Get the start offset in an address array"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2605
#: drivers/mtd/nand/raw/nand_base.c:2627 drivers/mtd/nand/raw/nand_base.c:2659
#: drivers/mtd/nand/raw/nand_base.c:2681
msgid "``const struct nand_subop *subop``"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2600
#: drivers/mtd/nand/raw/nand_base.c:2622 drivers/mtd/nand/raw/nand_base.c:2654
#: drivers/mtd/nand/raw/nand_base.c:2676
msgid "The entire sub-operation"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2602
#: drivers/mtd/nand/raw/nand_base.c:2624 drivers/mtd/nand/raw/nand_base.c:2656
#: drivers/mtd/nand/raw/nand_base.c:2678
msgid "``unsigned int instr_idx``"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2601
#: drivers/mtd/nand/raw/nand_base.c:2623 drivers/mtd/nand/raw/nand_base.c:2655
#: drivers/mtd/nand/raw/nand_base.c:2677
msgid "Index of the instruction inside the sub-operation"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2602
msgid ""
"During driver development, one could be tempted to directly use the ->addr."
"addrs field of address instructions. This is wrong as address instructions "
"might be split."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2606
msgid ""
"Given an address instruction, returns the offset of the first cycle to issue."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2621
msgid "Get the remaining address cycles to assert"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2624
msgid ""
"During driver development, one could be tempted to directly use the ->addr-"
">naddrs field of a data instruction. This is wrong as instructions might be "
"split."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2628
msgid ""
"Given an address instruction, returns the number of address cycle to issue."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2653
msgid "Get the start offset in a data array"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2656
msgid ""
"During driver development, one could be tempted to directly use the ->data-"
">buf.{in,out} field of data instructions. This is wrong as data instructions "
"might be split."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2660
msgid "Given a data instruction, returns the offset to start from."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2675
msgid "Get the number of bytes to retrieve"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2678
msgid ""
"During driver development, one could be tempted to directly use the ->data-"
">len field of a data instruction. This is wrong as data instructions might "
"be split."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2682
msgid "Returns the length of the chunk of data to send/receive."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2707
msgid "Reset and initialize a NAND device"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2710
#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:792
#: drivers/mtd/nand/raw/nand_base.c:832
msgid "``int chipnr``"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2709
#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:791
#: drivers/mtd/nand/raw/nand_base.c:831
msgid "Internal die id"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2710
msgid ""
"Save the timings data structure, then apply SDR timings mode 0 (see "
"nand_reset_interface for details), do the reset operation, and apply back "
"the previous timings."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2802
#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2873
msgid "[INTERN] read raw page data without ecc"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2803
#: drivers/mtd/nand/raw/nand_base.c:3167 drivers/mtd/nand/raw/nand_base.c:3625
#: drivers/mtd/nand/raw/nand_base.c:3692 drivers/mtd/nand/raw/nand_base.c:3918
#: drivers/mtd/nand/raw/nand_base.c:6087 ../../../driver-api/mtdnand:984:
#: drivers/mtd/nand/raw/nand_base.c:2788 drivers/mtd/nand/raw/nand_base.c:2874
#: drivers/mtd/nand/raw/nand_base.c:2938 drivers/mtd/nand/raw/nand_base.c:2984
#: drivers/mtd/nand/raw/nand_base.c:3095 drivers/mtd/nand/raw/nand_base.c:3233
#: drivers/mtd/nand/raw/nand_base.c:3639 drivers/mtd/nand/raw/nand_base.c:3707
#: drivers/mtd/nand/raw/nand_base.c:3903 drivers/mtd/nand/raw/nand_base.c:3984
#: drivers/mtd/nand/raw/nand_base.c:4048 drivers/mtd/nand/raw/nand_base.c:4077
#: drivers/mtd/nand/raw/nand_base.c:4121 drivers/mtd/nand/raw/nand_base.c:4191
#: drivers/mtd/nand/raw/nand_base.c:5879 drivers/mtd/nand/raw/nand_base.c:5933
#: drivers/mtd/nand/raw/nand_base.c:6017
msgid "nand chip info structure"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2805
#: drivers/mtd/nand/raw/nand_base.c:3169 ../../../driver-api/mtdnand:984:
#: drivers/mtd/nand/raw/nand_base.c:2876 drivers/mtd/nand/raw/nand_base.c:2940
#: drivers/mtd/nand/raw/nand_base.c:3097 drivers/mtd/nand/raw/nand_base.c:3235
#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:104
#: drivers/mtd/nand/raw/nand_bbt.c:126 drivers/mtd/nand/raw/nand_bbt.c:159
#: drivers/mtd/nand/raw/nand_bbt.c:252 drivers/mtd/nand/raw/nand_bbt.c:305
#: drivers/mtd/nand/raw/nand_bbt.c:383 drivers/mtd/nand/raw/nand_bbt.c:483
#: drivers/mtd/nand/raw/nand_bbt.c:541 drivers/mtd/nand/raw/nand_bbt.c:623
#: drivers/mtd/nand/raw/nand_bbt.c:738 drivers/mtd/nand/raw/nand_bbt.c:942
msgid "``uint8_t *buf``"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2804
#: drivers/mtd/nand/raw/nand_base.c:2834 drivers/mtd/nand/raw/nand_base.c:3168
#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2789
#: drivers/mtd/nand/raw/nand_base.c:2875 drivers/mtd/nand/raw/nand_base.c:2939
#: drivers/mtd/nand/raw/nand_base.c:2987 drivers/mtd/nand/raw/nand_base.c:3096
#: drivers/mtd/nand/raw/nand_base.c:3234
msgid "buffer to store read data"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2806
#: drivers/mtd/nand/raw/nand_base.c:2836 drivers/mtd/nand/raw/nand_base.c:3170
#: drivers/mtd/nand/raw/nand_base.c:3921 drivers/mtd/nand/raw/nand_base.c:3951
#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2791
#: drivers/mtd/nand/raw/nand_base.c:2877 drivers/mtd/nand/raw/nand_base.c:2941
#: drivers/mtd/nand/raw/nand_base.c:3098 drivers/mtd/nand/raw/nand_base.c:3236
#: drivers/mtd/nand/raw/nand_base.c:3906 drivers/mtd/nand/raw/nand_base.c:3987
#: drivers/mtd/nand/raw/nand_base.c:4051 drivers/mtd/nand/raw/nand_base.c:4080
#: drivers/mtd/nand/raw/nand_base.c:4126 drivers/mtd/nand/raw/nand_base.c:4194
#: drivers/mtd/nand/raw/nand_base.c:4266
msgid "``int oob_required``"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2805
#: drivers/mtd/nand/raw/nand_base.c:2835 drivers/mtd/nand/raw/nand_base.c:3169
#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2790
#: drivers/mtd/nand/raw/nand_base.c:2876 drivers/mtd/nand/raw/nand_base.c:2940
#: drivers/mtd/nand/raw/nand_base.c:3097 drivers/mtd/nand/raw/nand_base.c:3235
msgid "caller requires OOB data read to chip->oob_poi"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2807
#: drivers/mtd/nand/raw/nand_base.c:2837 drivers/mtd/nand/raw/nand_base.c:3171
#: drivers/mtd/nand/raw/nand_base.c:3627 drivers/mtd/nand/raw/nand_base.c:3694
#: drivers/mtd/nand/raw/nand_base.c:3922 drivers/mtd/nand/raw/nand_base.c:3952
#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:220
#: drivers/mtd/nand/raw/nand_base.c:2792 drivers/mtd/nand/raw/nand_base.c:2878
#: drivers/mtd/nand/raw/nand_base.c:2942 drivers/mtd/nand/raw/nand_base.c:2989
#: drivers/mtd/nand/raw/nand_base.c:3099 drivers/mtd/nand/raw/nand_base.c:3237
#: drivers/mtd/nand/raw/nand_base.c:3641 drivers/mtd/nand/raw/nand_base.c:3709
#: drivers/mtd/nand/raw/nand_base.c:3907 drivers/mtd/nand/raw/nand_base.c:3988
#: drivers/mtd/nand/raw/nand_base.c:4052 drivers/mtd/nand/raw/nand_base.c:4081
#: drivers/mtd/nand/raw/nand_base.c:4127 drivers/mtd/nand/raw/nand_base.c:4195
#: drivers/mtd/nand/raw/nand_base.c:4267 ../../../driver-api/mtdnand:987:
#: drivers/mtd/nand/raw/nand_bbt.c:160
msgid "``int page``"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2806
#: drivers/mtd/nand/raw/nand_base.c:2836 drivers/mtd/nand/raw/nand_base.c:3170
#: drivers/mtd/nand/raw/nand_base.c:3626 ../../../driver-api/mtdnand:984:
#: drivers/mtd/nand/raw/nand_base.c:2791 drivers/mtd/nand/raw/nand_base.c:2877
#: drivers/mtd/nand/raw/nand_base.c:2941 drivers/mtd/nand/raw/nand_base.c:2988
#: drivers/mtd/nand/raw/nand_base.c:3098 drivers/mtd/nand/raw/nand_base.c:3236
#: drivers/mtd/nand/raw/nand_base.c:3640
msgid "page number to read"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2807
#: drivers/mtd/nand/raw/nand_base.c:3922
msgid ""
"Not for syndrome calculating ECC controllers, which use a special oob layout."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2832
msgid "Monolithic page read in raw mode"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2833
#: drivers/mtd/nand/raw/nand_base.c:3948 ../../../driver-api/mtdnand:984:
#: drivers/mtd/nand/raw/nand_base.c:2746 drivers/mtd/nand/raw/nand_base.c:2767
msgid "NAND chip info structure"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2835
#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2790
msgid "``u8 *buf``"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:2837
msgid ""
"This is a raw page read, ie. without any error detection/correction. "
"Monolithic means we are requesting all the relevant data (main plus "
"eventually OOB) to be loaded in the NAND cache and sent over the bus (from "
"the NAND chip to the NAND controller) in a single operation. This is an "
"alternative to nand_read_page_raw(), which first reads the main data, and if "
"the OOB data is requested too, then reads more data on the bus."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:3165
msgid "Hardware ECC page read with ECC data read from OOB area"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:3171
msgid ""
"Hardware ECC for large page chips, which requires the ECC data to be "
"extracted from the OOB before the actual data is read."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:3624
msgid "[REPLACEABLE] the most common OOB data read function"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:3691
msgid "[REPLACEABLE] the most common OOB data write function"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:3693
#: drivers/mtd/nand/raw/nand_base.c:3921 drivers/mtd/nand/raw/nand_base.c:3951
#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:3708
#: drivers/mtd/nand/raw/nand_base.c:3906 drivers/mtd/nand/raw/nand_base.c:3987
#: drivers/mtd/nand/raw/nand_base.c:4051 drivers/mtd/nand/raw/nand_base.c:4080
#: drivers/mtd/nand/raw/nand_base.c:4126 drivers/mtd/nand/raw/nand_base.c:4194
#: drivers/mtd/nand/raw/nand_base.c:4266
msgid "page number to write"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:3917
#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:3983
msgid "[INTERN] raw page write function"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:3920
#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:3986
#: drivers/mtd/nand/raw/nand_base.c:4050 drivers/mtd/nand/raw/nand_base.c:4079
#: drivers/mtd/nand/raw/nand_base.c:4125 drivers/mtd/nand/raw/nand_base.c:4193
#: drivers/mtd/nand/raw/nand_base.c:4265 drivers/mtd/nand/raw/nand_base.c:4439
msgid "``const uint8_t *buf``"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:3919
#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:3904
#: drivers/mtd/nand/raw/nand_base.c:3985 drivers/mtd/nand/raw/nand_base.c:4049
#: drivers/mtd/nand/raw/nand_base.c:4078 drivers/mtd/nand/raw/nand_base.c:4124
#: drivers/mtd/nand/raw/nand_base.c:4192
msgid "data buffer"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:3920
#: drivers/mtd/nand/raw/nand_base.c:3950 ../../../driver-api/mtdnand:984:
#: drivers/mtd/nand/raw/nand_base.c:3905 drivers/mtd/nand/raw/nand_base.c:3986
#: drivers/mtd/nand/raw/nand_base.c:4050 drivers/mtd/nand/raw/nand_base.c:4079
#: drivers/mtd/nand/raw/nand_base.c:4125 drivers/mtd/nand/raw/nand_base.c:4193
#: drivers/mtd/nand/raw/nand_base.c:4265
msgid "must write chip->oob_poi to OOB"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:3947
msgid "Monolithic page write in raw mode"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:3950
#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:3905
msgid "``const u8 *buf``"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:3949
msgid "data buffer to write"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:3952
msgid ""
"This is a raw page write, ie. without any error detection/correction. "
"Monolithic means we are requesting all the relevant data (main plus "
"eventually OOB) to be sent over the bus and effectively programmed into the "
"NAND chip arrays in a single operation. This is an alternative to "
"nand_write_page_raw(), which first sends the main data, then eventually send "
"the OOB data by latching more data cycles on the NAND bus, and finally sends "
"the program command to synchronyze the NAND chip cache."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:5448
msgid "Parse the gpio-cs property of a controller"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:5454
msgid "``struct device *dev``"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:5449
msgid "Device that will be parsed. Also used for managed allocations."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:5451
msgid "``struct gpio_desc ***cs_array``"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:5450
msgid "Array of GPIO desc pointers allocated on success"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:5452
msgid "``unsigned int *ncs_array``"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:5451
msgid ""
"Number of entries in **cs_array** updated on success. **return** 0 on "
"success, an error otherwise."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:6086
msgid "Set the ECC strength and ECC step size"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:6089
#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:5881
#: drivers/mtd/nand/raw/nand_base.c:5935 drivers/mtd/nand/raw/nand_base.c:6019
msgid "``const struct nand_ecc_caps *caps``"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:6088
#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:5934
#: drivers/mtd/nand/raw/nand_base.c:6018
msgid "ECC engine caps info structure"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:6090
#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:5882
#: drivers/mtd/nand/raw/nand_base.c:5936 drivers/mtd/nand/raw/nand_base.c:6020
msgid "``int oobavail``"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:6089
#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:5881
#: drivers/mtd/nand/raw/nand_base.c:5935 drivers/mtd/nand/raw/nand_base.c:6019
msgid "OOB size that the ECC engine can use"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:6090
msgid "Choose the ECC configuration according to following logic."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:6092
msgid ""
"If both ECC step size and ECC strength are already set (usually by DT) then "
"check if it is supported by this controller."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:6094
msgid ""
"If the user provided the nand-ecc-maximize property, then select maximum ECC "
"strength."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:6096
msgid ""
"Otherwise, try to match the ECC step size and ECC strength closest to the "
"chip's requirement. If available OOB size can't fit the chip requirement "
"then fallback to the maximum ECC step size and ECC strength."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:6100
msgid "On success, the chosen ECC settings are set."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:6508
msgid "[NAND Interface] Scan for the NAND device"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:6511
#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:5534
msgid "``unsigned int maxchips``"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:6510
msgid "number of chips to scan for."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:6512
msgid "``struct nand_flash_dev *ids``"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:6511
msgid "optional flash IDs table"
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:6512
msgid ""
"This fills out all the uninitialized function pointers with the defaults. "
"The flash ID is read and the mtd/chip structures are filled with the "
"appropriate values."
msgstr ""

#: ../../../driver-api/mtdnand:972: drivers/mtd/nand/raw/nand_base.c:6549
msgid "[NAND Interface] Free resources held by the NAND device"
msgstr ""

#: ../../../driver-api/mtdnand.rst:976
msgid "Internal Functions Provided"
msgstr ""

#: ../../../driver-api/mtdnand.rst:978
msgid ""
"This chapter contains the autogenerated documentation of the NAND driver "
"internal functions. Each function has a short description which is marked "
"with an [XXX] identifier. See the chapter \"Documentation hints\" for an "
"explanation. The functions marked with [DEFAULT] might be relevant for a "
"board driver developer."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:204
msgid "[GENERIC] release chip"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:206
msgid "Release chip lock and wake up anyone waiting on the device."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:217
msgid "Get the next page for bad block markers"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:219
msgid "First page to start checking for bad block marker usage"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:220
msgid ""
"Returns an integer that corresponds to the page offset within a block, for a "
"page that is used to store bad block markers. If no more pages are "
"available, -EINVAL is returned."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:246
msgid "[DEFAULT] Read bad block marker from the chip"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:249
#: drivers/mtd/nand/raw/nand_base.c:497 drivers/mtd/nand/raw/nand_base.c:540
#: drivers/mtd/nand/raw/nand_base.c:553 drivers/mtd/nand/raw/nand_base.c:606
#: drivers/mtd/nand/raw/nand_base.c:623 drivers/mtd/nand/raw/nand_base.c:4662
#: drivers/mtd/nand/raw/nand_base.c:4735 drivers/mtd/nand/raw/nand_base.c:4751
msgid "``loff_t ofs``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:248
#: drivers/mtd/nand/raw/nand_base.c:496 drivers/mtd/nand/raw/nand_base.c:552
#: drivers/mtd/nand/raw/nand_base.c:605 drivers/mtd/nand/raw/nand_base.c:622
msgid "offset from device start"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:249
msgid "Check, if the block is bad."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:282
msgid "Check if the region is secured"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:285
msgid "``loff_t offset``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:284
msgid "Offset of the region to check"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:286
msgid "``u64 size``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:285
msgid "Size of the region to check"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:286
msgid ""
"Checks if the region is secured by comparing the offset and size with the "
"list of secure regions obtained from DT. Returns true if the region is "
"secured else false."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:333
msgid "[GENERIC] Get chip for selected access"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:335
msgid "Lock the device and its controller for exclusive access"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:354
msgid "[GENERIC] check if the chip is write protected"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:356
msgid ""
"Check, if the device is write protected. The function expects, that the "
"device is already selected."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:382
msgid "[INTERN] Transfer client buffer to oob"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:385
#: drivers/mtd/nand/raw/nand_base.c:3327
msgid "``uint8_t *oob``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:384
msgid "oob data buffer"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:386
#: drivers/mtd/nand/raw/nand_base.c:3329 drivers/mtd/nand/raw/nand_base.c:4437
#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:307
msgid "``size_t len``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:385
msgid "oob data write length"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:387
#: drivers/mtd/nand/raw/nand_base.c:424 drivers/mtd/nand/raw/nand_base.c:3328
#: drivers/mtd/nand/raw/nand_base.c:3438 drivers/mtd/nand/raw/nand_base.c:3782
#: drivers/mtd/nand/raw/nand_base.c:3864 drivers/mtd/nand/raw/nand_base.c:4304
#: drivers/mtd/nand/raw/nand_base.c:4472
msgid "``struct mtd_oob_ops *ops``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:386
#: drivers/mtd/nand/raw/nand_base.c:3327 drivers/mtd/nand/raw/nand_base.c:3437
msgid "oob ops structure"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:420
msgid "[MTD Interface] NAND write out-of-band"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:423
#: drivers/mtd/nand/raw/nand_base.c:4303 drivers/mtd/nand/raw/nand_base.c:4436
#: drivers/mtd/nand/raw/nand_base.c:4471
msgid "``loff_t to``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:422
#: drivers/mtd/nand/raw/nand_base.c:4302 drivers/mtd/nand/raw/nand_base.c:4435
#: drivers/mtd/nand/raw/nand_base.c:4470
msgid "offset to write to"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:423
#: drivers/mtd/nand/raw/nand_base.c:3863 drivers/mtd/nand/raw/nand_base.c:4471
msgid "oob operation description structure"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:424
msgid "NAND write out-of-band."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:494
msgid "[DEFAULT] mark a block bad via bad block marker"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:497
msgid ""
"This is the default implementation, which can be overridden by a hardware "
"specific driver. It provides the details for writing a bad block marker to a "
"block."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:537
msgid "mark a block by updating the BBM"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:539
msgid "offset of the block to mark bad"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:553
msgid ""
"This function performs the generic NAND bad block marking steps (i.e., bad "
"block table(s) and/or marker(s)). We only allow the hardware driver to "
"specify how to write bad block markers to OOB (chip->legacy.block_markbad)."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:557
msgid "We try operations in the following order:"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:559
msgid "erase the affected block, to allow OOB marker to be written cleanly"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:560
msgid ""
"write bad block marker to OOB area of affected block (unless flag "
"NAND_BBT_NO_OOB_BBM is present)"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:562
msgid "update the BBT"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:564
msgid ""
"Note that we retain the first error encountered in (2) or (3), finish the "
"procedures, and dump the error in the end."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:603
msgid "[GENERIC] Check if a block is marked reserved."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:609
#: drivers/mtd/nand/raw/nand_base.c:3866 drivers/mtd/nand/raw/nand_base.c:4439
#: drivers/mtd/nand/raw/nand_base.c:4474 drivers/mtd/nand/raw/nand_base.c:4510
#: drivers/mtd/nand/raw/nand_base.c:4623 drivers/mtd/nand/raw/nand_base.c:4641
#: drivers/mtd/nand/raw/nand_base.c:4665 drivers/mtd/nand/raw/nand_base.c:4685
#: drivers/mtd/nand/raw/nand_base.c:4706 drivers/mtd/nand/raw/nand_base.c:4728
#: drivers/mtd/nand/raw/nand_base.c:4738 drivers/mtd/nand/raw/nand_base.c:4754
msgid "``struct mtd_info *mtd``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:604
#: drivers/mtd/nand/raw/nand_base.c:3861 drivers/mtd/nand/raw/nand_base.c:4434
#: drivers/mtd/nand/raw/nand_base.c:4469 drivers/mtd/nand/raw/nand_base.c:4505
#: drivers/mtd/nand/raw/nand_base.c:4618 drivers/mtd/nand/raw/nand_base.c:4636
#: drivers/mtd/nand/raw/nand_base.c:4660 drivers/mtd/nand/raw/nand_base.c:4680
#: drivers/mtd/nand/raw/nand_base.c:4701 drivers/mtd/nand/raw/nand_base.c:4724
#: drivers/mtd/nand/raw/nand_base.c:4733 drivers/mtd/nand/raw/nand_base.c:4749
msgid "MTD device structure"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:606
msgid "Check if the block is marked as reserved."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:620
msgid "[GENERIC] Check if a block is marked bad"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:624
#: drivers/mtd/nand/raw/nand_base.c:4520 ../../../driver-api/mtdnand:987:
#: drivers/mtd/nand/raw/nand_bbt.c:1446
msgid "``int allowbbt``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:623
msgid "1, if its allowed to access the bbt area"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:624
msgid ""
"Check, if the block is bad. Either by reading the bad block table or calling "
"of the scan function."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:745
msgid "[GENERIC] wait until the command is done"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:748
msgid "``unsigned long timeo``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:747
msgid "timeout"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:748
msgid ""
"Wait for command done. This is a helper function for nand_wait used when we "
"are in interrupt context. May happen when in panic and trying to write an "
"oops through mtdoops."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:789
msgid "Reset data interface and timings"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:792
msgid "Reset the Data interface and timings to ONFI mode 0."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:794
#: drivers/mtd/nand/raw/nand_base.c:835 drivers/mtd/nand/raw/nand_base.c:1054
#: drivers/mtd/nand/raw/nand_base.c:4681
msgid "Returns 0 for success or negative error code otherwise."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:829
msgid "Setup the best data interface and timings"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:832
msgid ""
"Configure what has been reported to be the best data interface and NAND "
"timings supported by the chip and the driver."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:920
msgid ""
"Pick up the best SDR timings that both the NAND controller and the NAND chip "
"support"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:924
#: drivers/mtd/nand/raw/nand_base.c:975 drivers/mtd/nand/raw/nand_base.c:1026
msgid "``struct nand_interface_config *iface``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:923
#: drivers/mtd/nand/raw/nand_base.c:974 drivers/mtd/nand/raw/nand_base.c:1025
msgid "the interface configuration (can eventually be updated)"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:925
msgid "``struct nand_sdr_timings *spec_timings``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:924
#: drivers/mtd/nand/raw/nand_base.c:975
msgid "specific timings, when not fitting the ONFI specification"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:925
#: drivers/mtd/nand/raw/nand_base.c:976 drivers/mtd/nand/raw/nand_base.c:1026
msgid ""
"If specific timings are provided, use them. Otherwise, retrieve supported "
"timing modes from ONFI information."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:971
msgid ""
"Pick up the best NVDDR timings that both the NAND controller and the NAND "
"chip support"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:976
msgid "``struct nand_nvddr_timings *spec_timings``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:1022
msgid ""
"Pick up the best NVDDR or SDR timings that both NAND controller and the NAND "
"chip support"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:1045
msgid "find the best data interface and timings"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:1047
msgid ""
"Find the best data interface and NAND timings supported by the chip and the "
"driver. Eventually let the NAND manufacturer driver propose his own set of "
"timings."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:1051
msgid ""
"After this function nand_chip->interface_config is initialized with the best "
"timing mode available."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:1081
msgid "fill the column cycles of an address"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:1084
msgid "``u8 *addrs``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:1083
msgid "Array of address cycles to fill"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:1084
msgid "The offset in the page"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:1085
msgid ""
"Fills the first or the first two bytes of the **addrs** field depending on "
"the NAND bus width and the page size."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:1088
msgid ""
"Returns the number of cycles needed to encode the column, or a negative "
"error code in case one of the arguments is invalid."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:1378
msgid "Do a READ PARAMETER PAGE operation"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:1381
msgid "``u8 page``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:1380
msgid "parameter page to read"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:1383
msgid ""
"This function issues a READ PARAMETER PAGE operation. This function does not "
"select/unselect the CS line."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2007
msgid "Do a SET FEATURES operation"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2010
#: drivers/mtd/nand/raw/nand_base.c:2060
msgid "``u8 feature``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2009
#: drivers/mtd/nand/raw/nand_base.c:2059
msgid "feature id"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2011
msgid "``const void *data``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2010
#: drivers/mtd/nand/raw/nand_base.c:2060
msgid "4 bytes of data"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2011
msgid ""
"This function sends a SET FEATURES command and waits for the NAND to be "
"ready before returning. This function does not select/unselect the CS line."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2057
msgid "Do a GET FEATURES operation"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2061
msgid "``void *data``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2061
msgid ""
"This function sends a GET FEATURES command and waits for the NAND to be "
"ready before returning. This function does not select/unselect the CS line."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2295
msgid "Context used by the parser"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2297
msgid "array of all the instructions that must be addressed"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2298
msgid "``subop``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2299
msgid "Sub-operation to be passed to the NAND controller"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2299
msgid ""
"This structure is used by the core to split NAND operations into sub-"
"operations that can be handled by the NAND controller."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2310
msgid "Checks if an instruction must be split"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2316
msgid "``const struct nand_op_parser_pattern_elem *pat``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2311
msgid "the parser pattern element that matches **instr**"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2313
msgid "``const struct nand_op_instr *instr``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2312
msgid "pointer to the instruction to check"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2314
msgid "``unsigned int *start_offset``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2313
msgid ""
"this is an in/out parameter. If **instr** has already been split, then "
"**start_offset** is the offset from which to start (either an address cycle "
"or an offset in the data buffer). Conversely, if the function returns true "
"(ie. instr must be split), this parameter is updated to point to the first "
"data/address cycle that has not been taken care of."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2319
msgid ""
"Some NAND controllers are limited and cannot send X address cycles with a "
"unique operation, or cannot read/write more than Y bytes at the same time. "
"In this case, split the instruction that does not fit in a single controller-"
"operation into two or more chunks."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2324
msgid ""
"Returns true if the instruction must be split, false otherwise. The "
"**start_offset** parameter is also updated to the offset at which the next "
"bundle of instruction must start (if an address or a data instruction)."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2366
msgid ""
"Checks if a pattern matches the instructions remaining in the parser context"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2372
msgid "``const struct nand_op_parser_pattern *pat``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2368
msgid "the pattern to test"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2370
msgid "``struct nand_op_parser_ctx *ctx``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2369
msgid "the parser context structure to match with the pattern **pat**"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2370
msgid ""
"Check if **pat** matches the set or a sub-set of instructions remaining in "
"**ctx**. Returns true if this is the case, false ortherwise. When true is "
"returned, **ctx->subop** is updated with the set of instructions to be "
"passed to the controller driver."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2745
msgid "wrapper to perform a GET_FEATURE"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2748
#: drivers/mtd/nand/raw/nand_base.c:2769
msgid "``int addr``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2747
#: drivers/mtd/nand/raw/nand_base.c:2768
msgid "feature address"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2749
#: drivers/mtd/nand/raw/nand_base.c:2770
msgid "``u8 *subfeature_param``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2748
#: drivers/mtd/nand/raw/nand_base.c:2769
msgid "the subfeature parameters, a four bytes array"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2749
#: drivers/mtd/nand/raw/nand_base.c:2770
msgid ""
"Returns 0 for success, a negative error otherwise. Returns -ENOTSUPP if the "
"operation cannot be handled."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2766
msgid "wrapper to perform a SET_FEATURE"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2787
msgid "dummy read raw page function"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2792
#: drivers/mtd/nand/raw/nand_base.c:3907
msgid "Returns -ENOTSUPP unconditionally."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2878
msgid "We need a special oob layout and handling even when OOB isn't used."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2937
msgid "[REPLACEABLE] software ECC based page read function"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2983
msgid "[REPLACEABLE] ECC based sub-page read function"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2986
msgid "``uint32_t data_offs``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2985
msgid "offset of requested data within the page"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2987
msgid "``uint32_t readlen``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2986
#: drivers/mtd/nand/raw/nand_base.c:4123
msgid "data length"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:2988
msgid "``uint8_t *bufpoi``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:3094
msgid "[REPLACEABLE] hardware ECC based page read function"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:3099
msgid ""
"Not for syndrome calculating ECC controllers which need a special oob layout."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:3232
msgid "[REPLACEABLE] hardware ECC syndrome based page read"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:3237
#: drivers/mtd/nand/raw/nand_base.c:4195
msgid ""
"The hw generator calculates the error syndrome automatically. Therefore we "
"need a special oob layout and handling."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:3324
msgid "[INTERN] Transfer oob to client buffer"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:3326
msgid "oob destination address"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:3328
msgid "size of oob to transfer"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:3401
msgid "[INTERN] Set the READ RETRY mode"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:3404
msgid "``int retry_mode``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:3403
msgid "the retry mode to use"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:3404
msgid ""
"Some vendors supply a special command to shift the Vt threshold, to be used "
"when there are too many bitflips in a page (i.e., ECC error). After setting "
"a new threshold, the host should retry reading the page."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:3434
msgid "[INTERN] Read data with ECC"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:3437
#: drivers/mtd/nand/raw/nand_base.c:3781 drivers/mtd/nand/raw/nand_base.c:3863
msgid "``loff_t from``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:3436
#: drivers/mtd/nand/raw/nand_base.c:3780 drivers/mtd/nand/raw/nand_base.c:3862
msgid "offset to read from"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:3438
msgid "Internal function. Called with chip held."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:3637
msgid "[REPLACEABLE] OOB data read function for HW ECC with syndromes"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:3705
msgid ""
"[REPLACEABLE] OOB data write function for HW ECC with syndrome - only for "
"large page flash"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:3778
msgid "[INTERN] NAND read out-of-band"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:3781
#: drivers/mtd/nand/raw/nand_base.c:4303
msgid "oob operations description structure"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:3782
msgid "NAND read out-of-band data from the spare area."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:3860
msgid "[MTD Interface] NAND read data and/or out-of-band"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:3864
msgid "NAND read data and/or out-of-band data."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:3902
msgid "dummy raw page write function"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:3988
msgid "We need a special oob layout and handling even when ECC isn't checked."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4047
msgid "[REPLACEABLE] software ECC based page write function"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4076
msgid "[REPLACEABLE] hardware ECC based page write function"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4120
msgid "[REPLACEABLE] hardware ECC based subpage write"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4123
#: drivers/mtd/nand/raw/nand_base.c:4263
msgid "``uint32_t offset``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4122
msgid "column address of subpage within the page"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4124
msgid "``uint32_t data_len``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4190
msgid "[REPLACEABLE] hardware ECC syndrome based page write"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4260
msgid "write one page"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4261
msgid "NAND chip descriptor"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4262
msgid "address offset within the page"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4264
msgid "``int data_len``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4263
msgid "length of actual data to be written"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4264
#: drivers/mtd/nand/raw/nand_base.c:4438
msgid "the data to write"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4268
msgid "``int raw``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4267
msgid "use _raw version of write_page"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4300
msgid "[INTERN] NAND write with ECC"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4304
msgid "NAND write with ECC."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4433
msgid "[MTD Interface] NAND write with ECC"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4436
msgid "number of bytes to write"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4438
msgid "``size_t *retlen``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4437
msgid "pointer to variable to store the number of written bytes"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4439
msgid ""
"NAND write with ECC. Used when performing writes in interrupt context, this "
"may for example be called by mtdoops when writing an oops while in panic."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4468
msgid "[MTD Interface] NAND write data and/or out-of-band"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4504
msgid "[MTD Interface] erase block(s)"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4507
#: drivers/mtd/nand/raw/nand_base.c:4519
msgid "``struct erase_info *instr``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4506
#: drivers/mtd/nand/raw/nand_base.c:4518
msgid "erase instruction"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4507
#: drivers/mtd/nand/raw/nand_base.c:4520
msgid "Erase one ore more blocks."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4516
msgid "[INTERN] erase block(s)"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4519
msgid "allow erasing the bbt area"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4617
msgid "[MTD Interface] sync"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4619
msgid "Sync is actually a wait for chip ready function."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4635
msgid "[MTD Interface] Check if block at offset is bad"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4638
#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:306
#: drivers/mtd/nand/raw/nand_bbt.c:1070 drivers/mtd/nand/raw/nand_bbt.c:1432
#: drivers/mtd/nand/raw/nand_bbt.c:1445 drivers/mtd/nand/raw/nand_bbt.c:1475
msgid "``loff_t offs``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4637
#: drivers/mtd/nand/raw/nand_base.c:4661
msgid "offset relative to mtd start"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4659
msgid "[MTD Interface] Mark block at the given offset as bad"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4679
msgid "[MTD Interface] Suspend the NAND flash"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4700
msgid "[MTD Interface] Resume the NAND flash"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4722
msgid ""
"[MTD Interface] Finish the current NAND operation and prevent further "
"operations"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4732
msgid "[MTD Interface] Lock the NAND flash"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4734
#: drivers/mtd/nand/raw/nand_base.c:4750
msgid "offset byte address"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4736
#: drivers/mtd/nand/raw/nand_base.c:4752
msgid "``uint64_t len``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4735
msgid "number of bytes to lock (must be a multiple of block/page size)"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4748
msgid "[MTD Interface] Unlock the NAND flash"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:4751
msgid "number of bytes to unlock (must be a multiple of block/page size)"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:5531
#: drivers/mtd/nand/raw/nand_base.c:6170
msgid "Scan for the NAND device"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:5533
msgid "number of chips to scan for"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:5535
msgid "``struct nand_flash_dev *table``"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:5534
msgid "alternative NAND ID table"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:5535
msgid ""
"This is the first phase of the normal nand_scan() function. It reads the "
"flash ID and sets up MTD fields accordingly."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:5538
msgid ""
"This helper used to be called directly from controller drivers that needed "
"to tweak some ECC-related parameters before nand_scan_tail(). This "
"separation prevented dynamic allocations during this phase which was "
"unconvenient and as been banned for the benefit of the ->init_ecc()/"
"cleanup_ecc() hooks."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:5878
msgid "check the sanity of preset ECC settings"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:5880
msgid "ECC caps info structure"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:5882
msgid ""
"When ECC step size and strength are already set, check if they are supported "
"by the controller and the calculated ECC bytes fit within the chip's OOB. On "
"success, the calculated ECC bytes is set."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:5932
msgid "meet the chip's requirement with least ECC bytes"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:5936
msgid ""
"If a chip's ECC requirement is provided, try to meet it with the least "
"number of ECC bytes (i.e. with the largest number of OOB-free bytes). On "
"success, the chosen ECC settings are set."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:6016
msgid "choose the max ECC strength available"
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:6020
msgid ""
"Choose the max ECC strength that is supported on the controller, and can fit "
"within the chip's OOB.  On success, the chosen ECC settings are set."
msgstr ""

#: ../../../driver-api/mtdnand:984: drivers/mtd/nand/raw/nand_base.c:6172
msgid ""
"This is the second phase of the normal nand_scan() function. It fills out "
"all the uninitialized function pointers with the defaults and scans for a "
"bad block table if appropriate."
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:98
#: drivers/mtd/nand/raw/nand_bbt.c:120
msgid "[GENERIC] check if a pattern is in the buffer"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:99
#: drivers/mtd/nand/raw/nand_bbt.c:121
msgid "the buffer to search"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:101
msgid "``int len``"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:100
msgid "the length of buffer to search"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:102
msgid "``int paglen``"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:101
msgid "the pagelength"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:103
#: drivers/mtd/nand/raw/nand_bbt.c:123 drivers/mtd/nand/raw/nand_bbt.c:143
#: drivers/mtd/nand/raw/nand_bbt.c:162 drivers/mtd/nand/raw/nand_bbt.c:253
#: drivers/mtd/nand/raw/nand_bbt.c:384 drivers/mtd/nand/raw/nand_bbt.c:542
#: drivers/mtd/nand/raw/nand_bbt.c:624 drivers/mtd/nand/raw/nand_bbt.c:644
#: drivers/mtd/nand/raw/nand_bbt.c:708 drivers/mtd/nand/raw/nand_bbt.c:739
#: drivers/mtd/nand/raw/nand_bbt.c:1125
msgid "``struct nand_bbt_descr *td``"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:102
#: drivers/mtd/nand/raw/nand_bbt.c:122
msgid "search pattern descriptor"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:103
msgid ""
"Check for a pattern at the given place. Used to search bad block tables and "
"good / bad block identifiers."
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:123
msgid ""
"Check for a pattern at the given place. Used to search bad block tables and "
"good / bad block identifiers. Same as check_pattern, but no optional empty "
"check."
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:137
msgid "compute the length of the marker in data area"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:138
msgid "BBT descriptor used for computation"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:139
msgid "The length will be 0 if the marker is located in OOB area."
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:156
msgid "[GENERIC] Read the bad block table starting from page"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:162
#: drivers/mtd/nand/raw/nand_bbt.c:255 drivers/mtd/nand/raw/nand_bbt.c:308
#: drivers/mtd/nand/raw/nand_bbt.c:386 drivers/mtd/nand/raw/nand_bbt.c:486
#: drivers/mtd/nand/raw/nand_bbt.c:544 drivers/mtd/nand/raw/nand_bbt.c:626
#: drivers/mtd/nand/raw/nand_bbt.c:647 drivers/mtd/nand/raw/nand_bbt.c:711
#: drivers/mtd/nand/raw/nand_bbt.c:741 drivers/mtd/nand/raw/nand_bbt.c:929
#: drivers/mtd/nand/raw/nand_bbt.c:945 drivers/mtd/nand/raw/nand_bbt.c:1073
#: drivers/mtd/nand/raw/nand_bbt.c:1128 drivers/mtd/nand/raw/nand_bbt.c:1189
#: drivers/mtd/nand/raw/nand_bbt.c:1238 drivers/mtd/nand/raw/nand_bbt.c:1369
#: drivers/mtd/nand/raw/nand_bbt.c:1435 drivers/mtd/nand/raw/nand_bbt.c:1448
#: drivers/mtd/nand/raw/nand_bbt.c:1478
msgid "``struct nand_chip *this``"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:158
#: drivers/mtd/nand/raw/nand_bbt.c:251 drivers/mtd/nand/raw/nand_bbt.c:304
#: drivers/mtd/nand/raw/nand_bbt.c:382 drivers/mtd/nand/raw/nand_bbt.c:482
#: drivers/mtd/nand/raw/nand_bbt.c:540 drivers/mtd/nand/raw/nand_bbt.c:622
#: drivers/mtd/nand/raw/nand_bbt.c:737 drivers/mtd/nand/raw/nand_bbt.c:941
msgid "temporary buffer"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:159
msgid "the starting page"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:161
msgid "``int num``"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:160
msgid "the number of bbt descriptors to read"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:161
msgid "the bbt describtion table"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:163
msgid "``int offs``"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:162
msgid "block number offset in the table"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:163
msgid "Read the bad block table starting from page."
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:249
msgid "[GENERIC] Read the bad block table starting at a given page"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:252
#: drivers/mtd/nand/raw/nand_bbt.c:383 drivers/mtd/nand/raw/nand_bbt.c:541
#: drivers/mtd/nand/raw/nand_bbt.c:623 drivers/mtd/nand/raw/nand_bbt.c:738
msgid "descriptor for the bad block table"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:254
#: drivers/mtd/nand/raw/nand_bbt.c:485 drivers/mtd/nand/raw/nand_bbt.c:646
#: drivers/mtd/nand/raw/nand_bbt.c:709
msgid "``int chip``"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:253
msgid ""
"read the table for a specific chip, -1 read all chips; applies only if "
"NAND_BBT_PERCHIP option is set"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:255
msgid ""
"Read the bad block table for all chips starting at a given page. We assume "
"that the bbt bits are in consecutive order."
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:302
msgid "[GENERIC] Scan data+OOB region to buffer"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:305
msgid "offset at which to scan"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:306
msgid "length of data region to read"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:307
msgid ""
"Scan read data from data+OOB. May traverse multiple pages, interleaving page,"
"OOB,page,OOB,... in buf. Completes transfer and returns the \"strongest\" "
"ECC condition (error or bitflip). May quit on the first (non-ECC) error."
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:380
msgid ""
"[GENERIC] Read the bad block table(s) for all chips starting at a given page"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:385
#: drivers/mtd/nand/raw/nand_bbt.c:625 drivers/mtd/nand/raw/nand_bbt.c:645
#: drivers/mtd/nand/raw/nand_bbt.c:740
msgid "``struct nand_bbt_descr *md``"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:384
#: drivers/mtd/nand/raw/nand_bbt.c:624 drivers/mtd/nand/raw/nand_bbt.c:739
msgid "descriptor for the bad block table mirror"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:385
msgid ""
"Read the bad block table(s) for all chips starting at a given page. We "
"assume that the bbt bits are in consecutive order."
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:480
msgid "[GENERIC] Create a bad block table by scanning the device"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:484
#: drivers/mtd/nand/raw/nand_bbt.c:926 drivers/mtd/nand/raw/nand_bbt.c:943
#: drivers/mtd/nand/raw/nand_bbt.c:1186 drivers/mtd/nand/raw/nand_bbt.c:1235
msgid "``struct nand_bbt_descr *bd``"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:483
#: drivers/mtd/nand/raw/nand_bbt.c:925 drivers/mtd/nand/raw/nand_bbt.c:942
#: drivers/mtd/nand/raw/nand_bbt.c:1234
msgid "descriptor for the good/bad block search pattern"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:484
msgid ""
"create the table for a specific chip, -1 read all chips; applies only if "
"NAND_BBT_PERCHIP option is set"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:486
msgid ""
"Create a bad block table by scanning the device for the given good/bad block "
"identify pattern."
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:538
msgid "[GENERIC] scan the device for a specific bad block table"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:542
msgid ""
"Read the bad block table by searching for a given ident pattern. Search is "
"preformed either from the beginning up or from the end of the device "
"downwards. The search starts always at the start of a block. If the option "
"NAND_BBT_PERCHIP is given, each chip is searched for a bbt, which contains "
"the bad block information of this chip. This is necessary to provide support "
"for certain DOC devices."
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:549
msgid ""
"The bbt ident pattern resides in the oob area of the first page in a block."
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:620
msgid "[GENERIC] scan the device for bad block table(s)"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:625
msgid "Search and read the bad block table(s)."
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:641
msgid "Get the first valid eraseblock suitable to store a BBT"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:642
#: drivers/mtd/nand/raw/nand_bbt.c:706 drivers/mtd/nand/raw/nand_bbt.c:940
#: drivers/mtd/nand/raw/nand_bbt.c:1068 drivers/mtd/nand/raw/nand_bbt.c:1123
#: drivers/mtd/nand/raw/nand_bbt.c:1184 drivers/mtd/nand/raw/nand_bbt.c:1233
msgid "the NAND device"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:643
#: drivers/mtd/nand/raw/nand_bbt.c:707
msgid "the BBT description"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:644
msgid "the mirror BBT descriptor"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:645
#: drivers/mtd/nand/raw/nand_bbt.c:708
msgid "the CHIP selector"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:646
msgid ""
"This functions returns a positive block number pointing a valid eraseblock "
"suitable to store a BBT (i.e. in the range reserved for BBT), or -ENOSPC if "
"all blocks are already used of marked bad. If td->pages[chip] was already "
"pointing to a valid block we re-use it, otherwise we search for the next "
"valid one."
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:705
msgid "Mark one of the block reserved for BBT bad"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:710
msgid "``int block``"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:709
msgid "the BBT block to mark"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:710
msgid ""
"Blocks reserved for BBT can become bad. This functions is an helper to mark "
"such blocks as bad. It takes care of updating the in-memory BBT, marking the "
"block as bad using a bad block marker and invalidating the associated td-"
">pages[] entry."
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:735
msgid "[GENERIC] (Re)write the bad block table"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:741
msgid "``int chipsel``"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:740
msgid "selector for a specific chip, -1 for all"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:741
msgid "(Re)write the bad block table."
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:923
msgid "[GENERIC] create a memory based bad block table"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:926
msgid ""
"The function creates a memory based bbt by scanning the device for "
"manufacturer / software marked good / bad blocks."
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:939
msgid "[GENERIC] create and write bbt(s) if necessary"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:943
msgid ""
"The function checks the results of the previous call to read_bbt and "
"creates / updates the bbt(s) if necessary. Creation is necessary if no bbt "
"was found for the chip/device. Update is necessary if one of the tables is "
"missing or the version nr. of one table is less than the other."
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:1067
msgid "update bad block table(s)"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:1069
msgid "the offset of the newly marked block"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:1070
msgid "The function updates the bad block table(s)."
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:1122
msgid "[GENERIC] mark the bad block table regions"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:1124
msgid "bad block table descriptor"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:1125
msgid ""
"The bad block table regions are marked as \"bad\" to prevent accidental "
"erasures / writes. The regions are identified by the mark 0x02."
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:1183
msgid "verify the bad block description"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:1185
msgid "the table to verify"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:1186
msgid ""
"This functions performs a few sanity checks on the bad block description "
"table."
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:1232
msgid "[NAND Interface] scan, find, read and maybe create bad block table(s)"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:1235
msgid ""
"The function checks, if a bad block table(s) is/are already available. If "
"not it scans the device for manufacturer marked good / bad blocks and writes "
"the bad block table(s) to the selected place."
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:1239
msgid ""
"The bad block table memory is allocated here. It must be freed by calling "
"the nand_free_bbt function."
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:1363
msgid "[INTERN] Creates a BBT descriptor structure"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:1364
msgid "NAND chip to create descriptor for"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:1365
msgid ""
"This function allocates and initializes a nand_bbt_descr for BBM detection "
"based on the properties of **this**. The new descriptor is stored in this-"
">badblock_pattern. Thus, this->badblock_pattern should be NULL when passed "
"to this function."
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:1429
msgid "[NAND Interface] Check if a block is reserved"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:1431
#: drivers/mtd/nand/raw/nand_bbt.c:1444
msgid "offset in the device"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:1442
msgid "[NAND Interface] Check if a block is bad"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:1445
msgid "allow access to bad block table region"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:1472
msgid "[NAND Interface] Mark a block bad in the BBT"
msgstr ""

#: ../../../driver-api/mtdnand:987: drivers/mtd/nand/raw/nand_bbt.c:1474
msgid "offset of the bad block"
msgstr ""

#: ../../../driver-api/mtdnand.rst:991
msgid "Credits"
msgstr ""

#: ../../../driver-api/mtdnand.rst:993
msgid "The following people have contributed to the NAND driver:"
msgstr ""

#: ../../../driver-api/mtdnand.rst:995
msgid "Steven J. Hill\\ sjhill@realitydiluted.com"
msgstr ""

#: ../../../driver-api/mtdnand.rst:997
msgid "David Woodhouse\\ dwmw2@infradead.org"
msgstr ""

#: ../../../driver-api/mtdnand.rst:999 ../../../driver-api/mtdnand.rst:1006
msgid "Thomas Gleixner\\ tglx@linutronix.de"
msgstr ""

#: ../../../driver-api/mtdnand.rst:1001
msgid ""
"A lot of users have provided bugfixes, improvements and helping hands for "
"testing. Thanks a lot."
msgstr ""

#: ../../../driver-api/mtdnand.rst:1004
msgid "The following people have contributed to this document:"
msgstr ""
