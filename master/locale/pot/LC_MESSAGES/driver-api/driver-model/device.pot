# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../driver-api/driver-model/device.rst:3
msgid "The Basic Device Structure"
msgstr ""

#: ../../../driver-api/driver-model/device.rst:5
msgid "See the kerneldoc for the struct device."
msgstr ""

#: ../../../driver-api/driver-model/device.rst:9
msgid "Programming Interface"
msgstr ""

#: ../../../driver-api/driver-model/device.rst:10
msgid ""
"The bus driver that discovers the device uses this to register the device "
"with the core::"
msgstr ""

#: ../../../driver-api/driver-model/device.rst:15
msgid "The bus should initialize the following fields:"
msgstr ""

#: ../../../driver-api/driver-model/device.rst:17
msgid "parent"
msgstr ""

#: ../../../driver-api/driver-model/device.rst:18
msgid "name"
msgstr ""

#: ../../../driver-api/driver-model/device.rst:19
msgid "bus_id"
msgstr ""

#: ../../../driver-api/driver-model/device.rst:20
msgid "bus"
msgstr ""

#: ../../../driver-api/driver-model/device.rst:22
msgid ""
"A device is removed from the core when its reference count goes to 0. The "
"reference count can be adjusted using::"
msgstr ""

#: ../../../driver-api/driver-model/device.rst:28
msgid ""
"get_device() will return a pointer to the struct device passed to it if the "
"reference is not already 0 (if it's in the process of being removed already)."
msgstr ""

#: ../../../driver-api/driver-model/device.rst:32
msgid "A driver can access the lock in the device structure using::"
msgstr ""

#: ../../../driver-api/driver-model/device.rst:39
msgid "Attributes"
msgstr ""

#: ../../../driver-api/driver-model/device.rst:51
msgid "Attributes of devices can be exported by a device driver through sysfs."
msgstr ""

#: ../../../driver-api/driver-model/device.rst:53
msgid ""
"Please see Documentation/filesystems/sysfs.rst for more information on how "
"sysfs works."
msgstr ""

#: ../../../driver-api/driver-model/device.rst:56
msgid ""
"As explained in Documentation/core-api/kobject.rst, device attributes must "
"be created before the KOBJ_ADD uevent is generated. The only way to realize "
"that is by defining an attribute group."
msgstr ""

#: ../../../driver-api/driver-model/device.rst:60
msgid "Attributes are declared using a macro called DEVICE_ATTR::"
msgstr ""

#: ../../../driver-api/driver-model/device.rst:64
msgid "Example:::"
msgstr ""

#: ../../../driver-api/driver-model/device.rst:69
msgid ""
"Helper macros are available for common values of mode, so the above examples "
"can be simplified to:::"
msgstr ""

#: ../../../driver-api/driver-model/device.rst:75
msgid ""
"This declares two structures of type struct device_attribute with respective "
"names 'dev_attr_type' and 'dev_attr_power'. These two attributes can be "
"organized as follows into a group::"
msgstr ""

#: ../../../driver-api/driver-model/device.rst:94
msgid ""
"A helper macro is available for the common case of a single group, so the "
"above two structures can be declared using:::"
msgstr ""

#: ../../../driver-api/driver-model/device.rst:99
msgid ""
"This array of groups can then be associated with a device by setting the "
"group pointer in struct device before device_register() is invoked::"
msgstr ""

#: ../../../driver-api/driver-model/device.rst:105
msgid ""
"The device_register() function will use the 'groups' pointer to create the "
"device attributes and the device_unregister() function will use this pointer "
"to remove the device attributes."
msgstr ""

#: ../../../driver-api/driver-model/device.rst:109
msgid ""
"Word of warning:  While the kernel allows device_create_file() and "
"device_remove_file() to be called on a device at any time, userspace has "
"strict expectations on when attributes get created.  When a new device is "
"registered in the kernel, a uevent is generated to notify userspace (like "
"udev) that a new device is available.  If attributes are added after the "
"device is registered, then userspace won't get notified and userspace will "
"not know about the new attributes."
msgstr ""

#: ../../../driver-api/driver-model/device.rst:117
msgid ""
"This is important for device driver that need to publish additional "
"attributes for a device at driver probe time.  If the device driver simply "
"calls device_create_file() on the device structure passed to it, then "
"userspace will never be notified of the new attributes."
msgstr ""
