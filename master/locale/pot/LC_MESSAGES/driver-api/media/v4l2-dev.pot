# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../driver-api/media/v4l2-dev.rst:4
msgid "Video device' s internal representation"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:6
msgid ""
"The actual device nodes in the ``/dev`` directory are created using the :c:"
"type:`video_device` struct (``v4l2-dev.h``). This struct can either be "
"allocated dynamically or embedded in a larger struct."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:10
msgid "To allocate it dynamically use :c:func:`video_device_alloc`:"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:21
msgid ""
"If you embed it in a larger struct, then you must set the ``release()`` "
"callback to your own function:"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:30
msgid ""
"The ``release()`` callback must be set and it is called when the last user "
"of the video device exits."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:33
msgid ""
"The default :c:func:`video_device_release` callback currently just calls "
"``kfree`` to free the allocated memory."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:36
msgid ""
"There is also a :c:func:`video_device_release_empty` function that does "
"nothing (is empty) and should be used if the struct is embedded and there is "
"nothing to do when it is released."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:40
msgid "You should also set these fields of :c:type:`video_device`:"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:42
msgid ""
":c:type:`video_device`->v4l2_dev: must be set to the :c:type:`v4l2_device` "
"parent device."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:45
msgid ":c:type:`video_device`->name: set to something descriptive and unique."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:47
msgid ""
":c:type:`video_device`->vfl_dir: set this to ``VFL_DIR_RX`` for capture "
"devices (``VFL_DIR_RX`` has value 0, so this is normally already the "
"default), set to ``VFL_DIR_TX`` for output devices and ``VFL_DIR_M2M`` for "
"mem2mem (codec) devices."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:51
msgid ""
":c:type:`video_device`->fops: set to the :c:type:`v4l2_file_operations` "
"struct."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:54
msgid ""
":c:type:`video_device`->ioctl_ops: if you use the :c:type:`v4l2_ioctl_ops` "
"to simplify ioctl maintenance (highly recommended to use this and it might "
"become compulsory in the future!), then set this to your :c:type:"
"`v4l2_ioctl_ops` struct. The :c:type:`video_device`->vfl_type and :c:type:"
"`video_device`->vfl_dir fields are used to disable ops that do not match the "
"type/dir combination. E.g. VBI ops are disabled for non-VBI nodes, and "
"output ops  are disabled for a capture device. This makes it possible to "
"provide just one :c:type:`v4l2_ioctl_ops` struct for both vbi and video "
"nodes."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:64
msgid ""
":c:type:`video_device`->lock: leave to ``NULL`` if you want to do all the "
"locking  in the driver. Otherwise you give it a pointer to a struct "
"``mutex_lock`` and before the :c:type:`video_device`->unlocked_ioctl file "
"operation is called this lock will be taken by the core and released "
"afterwards. See the next section for more details."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:70
msgid ""
":c:type:`video_device`->queue: a pointer to the struct vb2_queue associated "
"with this device node. If queue is not ``NULL``, and queue->lock is not "
"``NULL``, then queue->lock is used for the queuing ioctls "
"(``VIDIOC_REQBUFS``, ``CREATE_BUFS``, ``QBUF``, ``DQBUF``,  ``QUERYBUF``, "
"``PREPARE_BUF``, ``STREAMON`` and ``STREAMOFF``) instead of the lock above. "
"That way the :ref:`vb2 <vb2_framework>` queuing framework does not have to "
"wait for other ioctls.   This queue pointer is also used by the :ref:`vb2 "
"<vb2_framework>` helper functions to check for queuing ownership (i.e. is "
"the filehandle calling it allowed to do the operation)."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:82
msgid ""
":c:type:`video_device`->prio: keeps track of the priorities. Used to "
"implement ``VIDIOC_G_PRIORITY`` and ``VIDIOC_S_PRIORITY``. If left to "
"``NULL``, then it will use the struct v4l2_prio_state in :c:type:"
"`v4l2_device`. If you want to have a separate priority state per (group of) "
"device node(s),   then you can point it to your own struct :c:type:"
"`v4l2_prio_state`."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:89
msgid ""
":c:type:`video_device`->dev_parent: you only set this if v4l2_device was "
"registered with ``NULL`` as the parent ``device`` struct. This only happens "
"in cases where one hardware device has multiple PCI devices that all share "
"the same :c:type:`v4l2_device` core."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:94
msgid ""
"The cx88 driver is an example of this: one core :c:type:`v4l2_device` "
"struct, but   it is used by both a raw video PCI device (cx8800) and a MPEG "
"PCI device (cx8802). Since the :c:type:`v4l2_device` cannot be associated "
"with two PCI devices at the same time it is setup without a parent device. "
"But when the struct video_device is initialized you **do** know which parent "
"PCI device to use and so you set ``dev_device`` to the correct PCI device."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:101
msgid ""
"If you use :c:type:`v4l2_ioctl_ops`, then you should set :c:type:"
"`video_device`->unlocked_ioctl to :c:func:`video_ioctl2` in your :c:type:"
"`v4l2_file_operations` struct."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:105
msgid ""
"In some cases you want to tell the core that a function you had specified in "
"your :c:type:`v4l2_ioctl_ops` should be ignored. You can mark such ioctls by "
"calling this function before :c:func:`video_register_device` is called:"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:109
msgid ""
":c:func:`v4l2_disable_ioctl <v4l2_disable_ioctl>` (:c:type:`vdev "
"<video_device>`, cmd)."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:112
msgid ""
"This tends to be needed if based on external factors (e.g. which card is "
"being used) you want to turns off certain features in :c:type:"
"`v4l2_ioctl_ops` without having to make a new struct."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:116
msgid ""
"The :c:type:`v4l2_file_operations` struct is a subset of file_operations. "
"The main difference is that the inode argument is omitted since it is never "
"used."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:120
msgid ""
"If integration with the media framework is needed, you must initialize the :"
"c:type:`media_entity` struct embedded in the :c:type:`video_device` struct "
"(entity field) by calling :c:func:`media_entity_pads_init`:"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:131
msgid ""
"The pads array must have been previously initialized. There is no need to "
"manually set the struct media_entity type and name fields."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:134
msgid ""
"A reference to the entity will be automatically acquired/released when the "
"video device is opened/closed."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:138
msgid "ioctls and locking"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:140
msgid ""
"The V4L core provides optional locking services. The main service is the "
"lock field in struct video_device, which is a pointer to a mutex. If you set "
"this pointer, then that will be used by unlocked_ioctl to serialize all "
"ioctls."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:145
msgid ""
"If you are using the :ref:`videobuf2 framework <vb2_framework>`, then there "
"is a second lock that you can set: :c:type:`video_device`->queue->lock. If "
"set, then this lock will be used instead of :c:type:`video_device`->lock to "
"serialize all queuing ioctls (see the previous section for the full list of "
"those ioctls)."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:151
msgid ""
"The advantage of using a different lock for the queuing ioctls is that for "
"some drivers (particularly USB drivers) certain commands such as setting "
"controls can take a long time, so you want to use a separate lock for the "
"buffer queuing ioctls. That way your ``VIDIOC_DQBUF`` doesn't stall because "
"the driver is busy changing the e.g. exposure of the webcam."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:157
msgid ""
"Of course, you can always do all the locking yourself by leaving both lock "
"pointers at ``NULL``."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:160
msgid ""
"In the case of :ref:`videobuf2 <vb2_framework>` you will need to implement "
"the ``wait_prepare()`` and ``wait_finish()`` callbacks to unlock/lock if "
"applicable. If you use the ``queue->lock`` pointer, then you can use the "
"helper functions :c:func:`vb2_ops_wait_prepare` and :c:func:"
"`vb2_ops_wait_finish`."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:165
msgid ""
"The implementation of a hotplug disconnect should also take the lock from :c:"
"type:`video_device` before calling v4l2_device_disconnect. If you are also "
"using :c:type:`video_device`->queue->lock, then you have to first lock :c:"
"type:`video_device`->queue->lock followed by :c:type:`video_device`->lock. "
"That way you can be sure no ioctl is running when you call :c:func:"
"`v4l2_device_disconnect`."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:173
msgid "Video device registration"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:175
msgid ""
"Next you register the video device with :c:func:`video_register_device`. "
"This will create the character device for you."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:186
msgid ""
"If the :c:type:`v4l2_device` parent device has a not ``NULL`` mdev field, "
"the video device entity will be automatically registered with the media "
"device."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:190
msgid ""
"Which device is registered depends on the type argument. The following types "
"exist:"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:194
msgid ":c:type:`vfl_devnode_type`"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:194
msgid "Device name"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:194
msgid "Usage"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:196
#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:31
msgid "``VFL_TYPE_VIDEO``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:196
msgid "``/dev/videoX``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:196
#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:32
msgid "for video input/output devices"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:197
#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:34
msgid "``VFL_TYPE_VBI``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:197
msgid "``/dev/vbiX``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:197
#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:35
msgid "for vertical blank data (i.e. closed captions, teletext)"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:199
#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:37
msgid "``VFL_TYPE_RADIO``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:199
msgid "``/dev/radioX``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:199
#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:38
msgid "for radio tuners"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:200
#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:40
msgid "``VFL_TYPE_SUBDEV``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:200
msgid "``/dev/v4l-subdevX``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:200
#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:41
msgid "for V4L2 subdevices"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:201
#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:43
msgid "``VFL_TYPE_SDR``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:201
msgid "``/dev/swradioX``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:201
msgid "for Software Defined Radio (SDR) tuners"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:203
#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:46
msgid "``VFL_TYPE_TOUCH``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:203
msgid "``/dev/v4l-touchX``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:203
#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:47
msgid "for touch sensors"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:206
msgid ""
"The last argument gives you a certain amount of control over the device node "
"number used (i.e. the X in ``videoX``). Normally you will pass -1 to let the "
"v4l2 framework pick the first free number. But sometimes users want to "
"select a specific node number. It is common that drivers allow the user to "
"select a specific device node number through a driver module option. That "
"number is then passed to this function and video_register_device will "
"attempt to select that device node number. If that number was already in "
"use, then the next free device node number will be selected and it will send "
"a warning to the kernel log."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:216
msgid ""
"Another use-case is if a driver creates many devices. In that case it can be "
"useful to place different video devices in separate ranges. For example, "
"video capture devices start at 0, video output devices start at 16. So you "
"can use the last argument to specify a minimum device node number and the "
"v4l2 framework will try to pick the first free number that is equal or "
"higher to what you passed. If that fails, then it will just pick the first "
"free number."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:224
msgid ""
"Since in this case you do not care about a warning about not being able to "
"select the specified device node number, you can call the function :c:func:"
"`video_register_device_no_warn` instead."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:228
msgid ""
"Whenever a device node is created some attributes are also created for you. "
"If you look in ``/sys/class/video4linux`` you see the devices. Go into e.g. "
"``video0`` and you will see 'name', 'dev_debug' and 'index' attributes. The "
"'name' attribute is the 'name' field of the video_device struct. The "
"'dev_debug' attribute can be used to enable core debugging. See the next "
"section for more detailed information on this."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:235
msgid ""
"The 'index' attribute is the index of the device node: for each call to :c:"
"func:`video_register_device()` the index is just increased by 1. The first "
"video device node you register always starts with index 0."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:239
msgid ""
"Users can setup udev rules that utilize the index attribute to make fancy "
"device names (e.g. '``mpegX``' for MPEG video capture device nodes)."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:242
msgid ""
"After the device was successfully registered, then you can use these fields:"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:244
msgid ""
":c:type:`video_device`->vfl_type: the device type passed to :c:func:"
"`video_register_device`."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:246
msgid ":c:type:`video_device`->minor: the assigned device minor number."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:247
msgid ""
":c:type:`video_device`->num: the device node number (i.e. the X in "
"``videoX``)."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:249
msgid ":c:type:`video_device`->index: the device index number."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:251
msgid ""
"If the registration failed, then you need to call :c:func:"
"`video_device_release` to free the allocated :c:type:`video_device` struct, "
"or free your own struct if the :c:type:`video_device` was embedded in it. "
"The ``vdev->release()`` callback will never be called if the registration "
"failed, nor should you ever attempt to unregister the device if the "
"registration failed."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:259
msgid "video device debugging"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:261
msgid ""
"The 'dev_debug' attribute that is created for each video, vbi, radio or "
"swradio device in ``/sys/class/video4linux/<devX>/`` allows you to enable "
"logging of file operations."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:265
msgid "It is a bitmask and the following bits can be set:"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:270
msgid "Mask"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:270
msgid "Description"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:272
msgid "0x01"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:272
msgid ""
"Log the ioctl name and error code. VIDIOC_(D)QBUF ioctls are only logged if "
"bit 0x08 is also set."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:274
msgid "0x02"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:274
msgid ""
"Log the ioctl name arguments and error code. VIDIOC_(D)QBUF ioctls are only "
"logged if bit 0x08 is also set."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:277
msgid "0x04"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:277
msgid ""
"Log the file operations open, release, read, write, mmap and "
"get_unmapped_area. The read and write operations are only logged if bit 0x08 "
"is also set."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:280
msgid "0x08"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:280
msgid ""
"Log the read and write file operations and the VIDIOC_QBUF and VIDIOC_DQBUF "
"ioctls."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:282
msgid "0x10"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:282
msgid "Log the poll file operation."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:283
msgid "0x20"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:283
msgid "Log error and messages in the control operations."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:287
msgid "Video device cleanup"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:289
msgid ""
"When the video device nodes have to be removed, either during the unload of "
"the driver or because the USB device was disconnected, then you should "
"unregister them with:"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:293
msgid ":c:func:`video_unregister_device` (:c:type:`vdev <video_device>`);"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:296
msgid ""
"This will remove the device nodes from sysfs (causing udev to remove them "
"from ``/dev``)."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:299
msgid ""
"After :c:func:`video_unregister_device` returns no new opens can be done. "
"However, in the case of USB devices some application might still have one of "
"these device nodes open. So after the unregister all file operations (except "
"release, of course) will return an error as well."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:304
msgid ""
"When the last user of the video device node exits, then the ``vdev-"
">release()`` callback is called and you can do the final cleanup there."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:307
msgid ""
"Don't forget to cleanup the media entity associated with the video device if "
"it has been initialized:"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:310
msgid ":c:func:`media_entity_cleanup <media_entity_cleanup>` (&vdev->entity);"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:313
msgid "This can be done from the release callback."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:317
msgid "helper functions"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:319
msgid "There are a few useful helper functions:"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:321
msgid "file and :c:type:`video_device` private data"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:323
msgid "You can set/get driver private data in the video_device struct using:"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:325
msgid ""
":c:func:`video_get_drvdata <video_get_drvdata>` (:c:type:`vdev "
"<video_device>`);"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:328
msgid ""
":c:func:`video_set_drvdata <video_set_drvdata>` (:c:type:`vdev "
"<video_device>`);"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:331
msgid ""
"Note that you can safely call :c:func:`video_set_drvdata` before calling :c:"
"func:`video_register_device`."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:334
msgid "And this function:"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:336
msgid ":c:func:`video_devdata <video_devdata>` (struct file \\*file);"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:339
msgid "returns the video_device belonging to the file struct."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:341
msgid ""
"The :c:func:`video_devdata` function combines :c:func:`video_get_drvdata` "
"with :c:func:`video_devdata`:"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:344
msgid ":c:func:`video_drvdata <video_drvdata>` (struct file \\*file);"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:347
msgid ""
"You can go from a :c:type:`video_device` struct to the v4l2_device struct "
"using:"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:353
msgid "Device node name"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:355
msgid "The :c:type:`video_device` node kernel name can be retrieved using:"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:357
msgid ""
":c:func:`video_device_node_name <video_device_node_name>` (:c:type:`vdev "
"<video_device>`);"
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:360
msgid ""
"The name is used as a hint by userspace tools such as udev. The function "
"should be used where possible instead of accessing the video_device::num and "
"video_device::minor fields."
msgstr ""

#: ../../../driver-api/media/v4l2-dev.rst:365
msgid "video_device functions and data structures"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:25
msgid "type of V4L2 device node"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:29
#: include/media/v4l2-dev.h:50 include/media/v4l2-dev.h:72
msgid "**Constants**"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:44
msgid "for Software Defined Radio tuners"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:49
msgid "``VFL_TYPE_MAX``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:50
msgid "number of VFL types, must always be last in the enum"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:46
msgid ""
"Identifies if a :c:type:`struct video_device <video_device>` corresponds to "
"a receiver, a transmitter or a mem-to-mem device."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:52
msgid "``VFL_DIR_RX``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:53
msgid "device is a receiver."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:55
msgid "``VFL_DIR_TX``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:56
msgid "device is a transmitter."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:58
msgid "``VFL_DIR_M2M``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:59
msgid "device is a memory to memory device."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:61
msgid "**Note**"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:53
msgid ""
"Ignored if :c:type:`enum vfl_devnode_type <vfl_devnode_type>` is "
"``VFL_TYPE_SUBDEV``."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:68
msgid "Flags used by :c:type:`struct video_device <video_device>`"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:74
msgid "``V4L2_FL_REGISTERED``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:75
msgid ""
"indicates that a :c:type:`struct video_device <video_device>` is registered. "
"Drivers can clear this flag if they want to block all future device access. "
"It is cleared by video_unregister_device."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:79
msgid "``V4L2_FL_USES_V4L2_FH``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:80
msgid ""
"indicates that file->private_data points to :c:type:`struct v4l2_fh "
"<v4l2_fh>`. This flag is set by the core when v4l2_fh_init() is called. All "
"new drivers should use it."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:84
msgid "``V4L2_FL_QUIRK_INVERTED_CROP``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:85
msgid ""
"some old M2M drivers use g/s_crop/cropcap incorrectly: crop and compose are "
"swapped. If this flag is set, then the selection targets are swapped in the "
"g/s_crop/cropcap functions in v4l2-ioctl.c. This allows those drivers to "
"correctly implement the selection API, but the old crop API will still work "
"as expected in order to preserve backwards compatibility. Never set this "
"flag for new drivers."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:93
msgid "``V4L2_FL_SUBDEV_RO_DEVNODE``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:94
msgid ""
"indicates that the video device node is registered in read-only mode. The "
"flag only applies to device nodes registered for sub-devices, it is set by "
"the core when the sub-devices device nodes are registered with "
"v4l2_device_register_ro_subdev_nodes() and used by the sub-device ioctl "
"handler to restrict access to some ioctl calls."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:103
msgid "stores the priority states"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:107
#: include/media/v4l2-dev.h:184 include/media/v4l2-dev.h:228
msgid "**Definition**::"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:113
#: include/media/v4l2-dev.h:201 include/media/v4l2-dev.h:262
msgid "**Members**"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:105
msgid "``prios``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:106
msgid "array with elements to store the array priorities"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:3
#: include/media/v4l2-dev.h:109 include/media/v4l2-dev.h:130
#: include/media/v4l2-dev.h:142 include/media/v4l2-dev.h:153
#: include/media/v4l2-dev.h:163 include/media/v4l2-dev.h:174
#: include/media/v4l2-dev.h:197 include/media/v4l2-dev.h:262
#: include/media/v4l2-dev.h:346 include/media/v4l2-dev.h:377
#: include/media/v4l2-dev.h:401 include/media/v4l2-dev.h:425
#: include/media/v4l2-dev.h:441 include/media/v4l2-dev.h:451
#: include/media/v4l2-dev.h:467 include/media/v4l2-dev.h:487
#: include/media/v4l2-dev.h:518 include/media/v4l2-dev.h:531
#: include/media/v4l2-dev.h:570 include/media/v4l2-dev.h:592
#: include/media/v4l2-dev.h:605 include/media/v4l2-dev.h:623
#: include/media/v4l2-dev.h:635 include/media/v4l2-dev.h:649
msgid "**Description**"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:107
msgid ""
"The size of **prios** array matches the number of priority types defined by "
"enum :c:type:`v4l2_priority`."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:117
msgid "initializes a struct v4l2_prio_state"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:121
#: include/media/v4l2-dev.h:128 include/media/v4l2-dev.h:141
#: include/media/v4l2-dev.h:152 include/media/v4l2-dev.h:163
#: include/media/v4l2-dev.h:173 include/media/v4l2-dev.h:317
#: include/media/v4l2-dev.h:332 include/media/v4l2-dev.h:340
#: include/media/v4l2-dev.h:374 include/media/v4l2-dev.h:398
#: include/media/v4l2-dev.h:425 include/media/v4l2-dev.h:434
#: include/media/v4l2-dev.h:441 include/media/v4l2-dev.h:450
#: include/media/v4l2-dev.h:465 include/media/v4l2-dev.h:487
#: include/media/v4l2-dev.h:499 include/media/v4l2-dev.h:510
#: include/media/v4l2-dev.h:517 include/media/v4l2-dev.h:531
#: include/media/v4l2-dev.h:543 include/media/v4l2-dev.h:554
#: include/media/v4l2-dev.h:570 include/media/v4l2-dev.h:592
#: include/media/v4l2-dev.h:606 include/media/v4l2-dev.h:624
#: include/media/v4l2-dev.h:636 include/media/v4l2-dev.h:650
msgid "**Parameters**"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:123
#: include/media/v4l2-dev.h:130 include/media/v4l2-dev.h:143
#: include/media/v4l2-dev.h:154 include/media/v4l2-dev.h:165
#: include/media/v4l2-dev.h:175
msgid "``struct v4l2_prio_state *global``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:119
msgid "pointer to :c:type:`struct v4l2_prio_state <v4l2_prio_state>`"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:124
msgid "changes the v4l2 file handler priority"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:126
#: include/media/v4l2-dev.h:139 include/media/v4l2-dev.h:150
#: include/media/v4l2-dev.h:161 include/media/v4l2-dev.h:171
msgid ""
"pointer to the :c:type:`struct v4l2_prio_state <v4l2_prio_state>` of the "
"device node."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:128
#: include/media/v4l2-dev.h:141
msgid "``enum v4l2_priority *local``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:127
#: include/media/v4l2-dev.h:140
msgid ""
"pointer to the desired priority, as defined by enum :c:type:`v4l2_priority`"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:129
msgid "``enum v4l2_priority new``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:128
msgid "Priority type requested, as defined by enum :c:type:`v4l2_priority`."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:130
#: include/media/v4l2-dev.h:142 include/media/v4l2-dev.h:153
#: include/media/v4l2-dev.h:163 include/media/v4l2-dev.h:174
msgid "This function should be used only by the V4L2 core."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:137
msgid "Implements the priority logic for a file handler open"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:148
#: include/media/v4l2-dev.h:169
msgid "Implements the priority logic for a file handler close"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:152
#: include/media/v4l2-dev.h:173
msgid "``enum v4l2_priority local``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:151
msgid "priority to be released, as defined by enum :c:type:`v4l2_priority`"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:159
msgid "Return the maximum priority, as stored at the **global** array."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:172
msgid "desired priority, as defined by enum :c:type:`v4l2_priority` local"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:180
msgid "fs operations used by a V4L2 device"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:182
msgid "``owner``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:183
msgid "pointer to struct module"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:183
msgid "``read``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:184
msgid "operations needed to implement the read() syscall"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:184
msgid "``write``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:185
msgid "operations needed to implement the write() syscall"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:185
msgid "``poll``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:186
msgid "operations needed to implement the poll() syscall"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:186
msgid "``unlocked_ioctl``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:187
msgid "operations needed to implement the ioctl() syscall"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:187
msgid "``compat_ioctl32``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:188
msgid ""
"operations needed to implement the ioctl() syscall for the special case "
"where the Kernel uses 64 bits instructions, but the userspace uses 32 bits."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:190
msgid "``get_unmapped_area``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:191
msgid "called by the mmap() syscall, used when %!CONFIG_MMU"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:191
msgid "``mmap``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:192
msgid "operations needed to implement the mmap() syscall"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:192
msgid "``open``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:193
msgid "operations needed to implement the open() syscall"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:193
#: include/media/v4l2-dev.h:254
msgid "``release``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:194
msgid "operations needed to implement the release() syscall"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:196
msgid ""
"Those operations are used to implemente the fs struct file_operations at the "
"V4L2 drivers. The V4L2 core overrides the fs ops with some extra logic "
"needed by the subsystem."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:224
msgid "Structure used to create and manage the V4L2 device nodes."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:227
msgid "``entity``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:228
msgid ":c:type:`struct media_entity <media_entity>`"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:228
msgid "``intf_devnode``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:229
msgid "pointer to :c:type:`struct media_intf_devnode <media_intf_devnode>`"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:229
msgid "``pipe``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:230
msgid ":c:type:`struct media_pipeline <media_pipeline>`"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:230
msgid "``fops``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:231
msgid ""
"pointer to :c:type:`struct v4l2_file_operations <v4l2_file_operations>` for "
"the video device"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:231
msgid "``device_caps``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:232
msgid "device capabilities as used in v4l2_capabilities"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:232
msgid "``dev``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:233
msgid ":c:type:`struct device <device>` for the video device"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:233
msgid "``cdev``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:234
msgid "character device"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:234
msgid "``v4l2_dev``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:235
msgid "pointer to :c:type:`struct v4l2_device <v4l2_device>` parent"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:235
msgid "``dev_parent``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:236
msgid "pointer to :c:type:`struct device <device>` parent"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:236
msgid "``ctrl_handler``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:237
msgid "Control handler associated with this device node. May be NULL."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:238
msgid "``queue``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:239
msgid ""
":c:type:`struct vb2_queue <vb2_queue>` associated with this device node. May "
"be NULL."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:239
msgid "``prio``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:240
msgid ""
"pointer to :c:type:`struct v4l2_prio_state <v4l2_prio_state>` with device's "
"Priority state. If NULL, then v4l2_dev->prio will be used."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:241
msgid "``name``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:242
msgid "video device name"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:242
msgid "``vfl_type``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:243
msgid ""
"V4L device type, as defined by :c:type:`enum vfl_devnode_type "
"<vfl_devnode_type>`"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:243
msgid "``vfl_dir``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:244
msgid "V4L receiver, transmitter or m2m"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:244
msgid "``minor``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:245
msgid "device node 'minor'. It is set to -1 if the registration failed"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:245
msgid "``num``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:246
msgid "number of the video device node"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:246
msgid "``flags``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:247
msgid ""
"video device flags. Use bitops to set/clear/test flags. Contains a set of :c:"
"type:`enum v4l2_video_device_flags <v4l2_video_device_flags>`."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:248
msgid "``index``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:249
msgid "attribute to differentiate multiple indices on one physical device"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:249
msgid "``fh_lock``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:250
msgid "Lock for all v4l2_fhs"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:250
msgid "``fh_list``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:251
msgid "List of :c:type:`struct v4l2_fh <v4l2_fh>`"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:251
msgid "``dev_debug``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:252
msgid "Internal device debug flags, not for use by drivers"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:252
msgid "``tvnorms``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:253
msgid "Supported tv norms"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:255
msgid "video device release() callback"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:255
msgid "``ioctl_ops``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:256
msgid ""
"pointer to :c:type:`struct v4l2_ioctl_ops <v4l2_ioctl_ops>` with ioctl "
"callbacks"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:257
msgid "``valid_ioctls``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:258
msgid "bitmap with the valid ioctls for this device"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:258
msgid "``lock``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:259
msgid "pointer to :c:type:`struct mutex <mutex>` serialization lock"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:260
msgid "Only set **dev_parent** if that can't be deduced from **v4l2_dev**."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:315
msgid "``media_entity_to_video_device (__entity)``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:313
msgid ""
"Returns a :c:type:`struct video_device <video_device>` from the :c:type:"
"`struct media_entity <media_entity>` embedded on it."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:319
msgid "``__entity``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:316
msgid "pointer to :c:type:`struct media_entity <media_entity>`, may be NULL"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:330
msgid "``to_video_device (cd)``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:328
msgid ""
"Returns a :c:type:`struct video_device <video_device>` from the :c:type:"
"`struct device <device>` embedded on it."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:334
msgid "``cd``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:331
msgid "pointer to :c:type:`struct device <device>`"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:336
#: include/media/v4l2-dev.h:370 include/media/v4l2-dev.h:394
msgid "register video4linux devices"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:342
#: include/media/v4l2-dev.h:376 include/media/v4l2-dev.h:400
#: include/media/v4l2-dev.h:427 include/media/v4l2-dev.h:443
#: include/media/v4l2-dev.h:452 include/media/v4l2-dev.h:467
#: include/media/v4l2-dev.h:489 include/media/v4l2-dev.h:501
#: include/media/v4l2-dev.h:533 include/media/v4l2-dev.h:545
#: include/media/v4l2-dev.h:572 include/media/v4l2-dev.h:594
#: include/media/v4l2-dev.h:608 include/media/v4l2-dev.h:626
#: include/media/v4l2-dev.h:638 include/media/v4l2-dev.h:652
msgid "``struct video_device *vdev``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:338
#: include/media/v4l2-dev.h:372 include/media/v4l2-dev.h:396
msgid "struct video_device to register"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:340
#: include/media/v4l2-dev.h:374 include/media/v4l2-dev.h:398
msgid "``enum vfl_devnode_type type``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:339
#: include/media/v4l2-dev.h:373 include/media/v4l2-dev.h:397
msgid ""
"type of device to register, as defined by :c:type:`enum vfl_devnode_type "
"<vfl_devnode_type>`"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:341
#: include/media/v4l2-dev.h:375 include/media/v4l2-dev.h:399
msgid "``int nr``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:340
#: include/media/v4l2-dev.h:374 include/media/v4l2-dev.h:398
msgid ""
"which device node number is desired: (0 == /dev/video0, 1 == /dev/"
"video1, ..., -1 == first free)"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:343
msgid "``int warn_if_nr_in_use``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:342
msgid ""
"warn if the desired device node number was already in use and another number "
"was chosen instead."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:345
msgid "``struct module *owner``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:344
msgid "module that owns the video device node"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:345
msgid ""
"The registration code assigns minor numbers and device node numbers based on "
"the requested type and registers the new device node with the kernel."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:349
msgid ""
"This function assumes that struct video_device was zeroed when it was "
"allocated and does not contain any stale date."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:352
msgid ""
"An error is returned if no free minor or device node number could be found, "
"or if the registration of the device node failed."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:355
msgid "Returns 0 on success."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:359
msgid ""
"This function is meant to be used only inside the V4L2 core. Drivers should "
"use video_register_device() or video_register_device_no_warn()."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:376
#: include/media/v4l2-dev.h:403
msgid ""
"Internally, it calls __video_register_device(). Please see its documentation "
"for more details."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:380
#: include/media/v4l2-dev.h:407
msgid ""
"if video_register_device fails, the release() callback of :c:type:`struct "
"video_device <video_device>` structure is *not* called, so the caller is "
"responsible for freeing any data. Usually that means that you "
"video_device_release() should be called on failure."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:400
msgid ""
"This function is identical to video_register_device() except that no warning "
"is issued if the desired device node number was already in use."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:421
msgid "Unregister video devices."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:423
msgid ":c:type:`struct video_device <video_device>` to register"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:424
msgid "Does nothing if vdev == NULL or if video_is_registered() returns false."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:430
msgid "helper function to alloc :c:type:`struct video_device <video_device>`"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:436
#: include/media/v4l2-dev.h:556
msgid "``void``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:1
msgid "no arguments"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:431
msgid ""
"Returns NULL if ``-ENOMEM`` or a :c:type:`struct video_device "
"<video_device>` on success."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:437
msgid "helper function to release :c:type:`struct video_device <video_device>`"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:439
#: include/media/v4l2-dev.h:449 include/media/v4l2-dev.h:464
#: include/media/v4l2-dev.h:485 include/media/v4l2-dev.h:497
#: include/media/v4l2-dev.h:529 include/media/v4l2-dev.h:542
msgid "pointer to :c:type:`struct video_device <video_device>`"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:440
msgid "Can also be used for video_device->release\\(\\)."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:446
msgid "helper function to implement the video_device->release\\(\\) callback."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:450
msgid "This release function does nothing."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:452
msgid "It should be used when the video_device is a static global struct."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:455
msgid "Having a static video_device is a dubious construction at best."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:461
msgid "mark that a given command isn't implemented. shouldn't use core locking"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:466
msgid "``unsigned int cmd``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:465
msgid "ioctl command"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:466
msgid ""
"This function allows drivers to provide just one v4l2_ioctl_ops struct, but "
"disable ioctls based on the specific card that is actually found."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:471
msgid ""
"This must be called before video_register_device. See also the comments for "
"determine_valid_ioctls()."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:483
msgid "gets private data from :c:type:`struct video_device <video_device>`."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:486
msgid "returns a pointer to the private data"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:495
msgid "sets private data from :c:type:`struct video_device <video_device>`."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:499
msgid "``void *data``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:498
msgid "private data pointer"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:506
msgid "gets :c:type:`struct video_device <video_device>` from struct file."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:512
#: include/media/v4l2-dev.h:519
msgid "``struct file *file``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:508
#: include/media/v4l2-dev.h:516
msgid "pointer to struct file"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:513
msgid ""
"gets private data from :c:type:`struct video_device <video_device>` using "
"the struct file."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:517
msgid ""
"This is function combines both video_get_drvdata() and video_devdata() as "
"this is used very often."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:527
msgid "returns the video device name"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:530
msgid "Returns the device name string"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:539
msgid ""
"returns true if the :c:type:`struct video_device <video_device>` is "
"registered."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:550
msgid "returns the dentry of the top-level \"v4l2\" debugfs dir"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:551
msgid "If this directory does not yet exist, then it will be created."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:566
#: include/media/v4l2-dev.h:588 include/media/v4l2-dev.h:632
msgid "Mark a pipeline as streaming"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:567
#: include/media/v4l2-dev.h:589 include/media/v4l2-dev.h:603
#: include/media/v4l2-dev.h:621 include/media/v4l2-dev.h:633
msgid "Starting video device"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:569
#: include/media/v4l2-dev.h:591
msgid "``struct media_pipeline *pipe``"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:568
#: include/media/v4l2-dev.h:590
msgid "Media pipeline to be assigned to all entities in the pipeline."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:569
msgid ""
"Mark all entities connected to a given video device through enabled links, "
"either directly or indirectly, as streaming. The given pipeline object is "
"assigned to every pad in the pipeline and stored in the media_pad pipe field."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:574
msgid ""
"Calls to this function can be nested, in which case the same number of "
"video_device_pipeline_stop() calls will be required to stop streaming. The "
"pipeline pointer must be identical for all nested calls to "
"video_device_pipeline_start()."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:579
#: include/media/v4l2-dev.h:593 include/media/v4l2-dev.h:612
#: include/media/v4l2-dev.h:624 include/media/v4l2-dev.h:654
msgid "The video device must contain a single pad."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:581
msgid "This is a convenience wrapper around media_pipeline_start()."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:591
msgid ""
"..note:: This is the non-locking version of video_device_pipeline_start()"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:595
msgid "This is a convenience wrapper around __media_pipeline_start()."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:602
#: include/media/v4l2-dev.h:620
msgid "Mark a pipeline as not streaming"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:604
msgid ""
"Mark all entities connected to a given video device through enabled links, "
"either directly or indirectly, as not streaming. The media_pad pipe field is "
"reset to ``NULL``."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:608
msgid ""
"If multiple calls to media_pipeline_start() have been made, the same number "
"of calls to this function are required to mark the pipeline as not streaming."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:614
msgid "This is a convenience wrapper around media_pipeline_stop()."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:622
msgid "This is the non-locking version of media_pipeline_stop()"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:626
msgid "This is a convenience wrapper around __media_pipeline_stop()."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:634
msgid ""
"video_device_pipeline_alloc_start() is similar to "
"video_device_pipeline_start() but instead of working on a given pipeline the "
"function will use an existing pipeline if the video device is already part "
"of a pipeline, or allocate a new pipeline."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:639
msgid ""
"Calls to video_device_pipeline_alloc_start() must be matched with "
"video_device_pipeline_stop()."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:646
msgid "Get the media pipeline a video device is part of"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:647
msgid "The video device"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:648
msgid ""
"This function returns the media pipeline that a video device has been "
"associated with when constructing the pipeline with "
"video_device_pipeline_start(). The pointer remains valid until "
"video_device_pipeline_stop() is called."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:656
msgid "This is a convenience wrapper around media_entity_pipeline()."
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:658
msgid "**Return**"
msgstr ""

#: ../../../driver-api/media/v4l2-dev:367: include/media/v4l2-dev.h:654
msgid ""
"The media_pipeline the video device is part of, or NULL if the video device "
"is not part of any pipeline."
msgstr ""
