# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-20 11:24+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../driver-api/media/v4l2-event.rst:4
msgid "V4L2 events"
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:6
msgid ""
"The V4L2 events provide a generic way to pass events to user space. The "
"driver must use :c:type:`v4l2_fh` to be able to support V4L2 events."
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:9
msgid ""
"Events are subscribed per-filehandle. An event specification consists of a "
"``type`` and is optionally associated with an object identified through the "
"``id`` field. If unused, then the ``id`` is 0. So an event is uniquely "
"identified by the ``(type, id)`` tuple."
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:14
msgid ""
"The :c:type:`v4l2_fh` struct has a list of subscribed events on its "
"``subscribed`` field."
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:17
msgid ""
"When the user subscribes to an event, a :c:type:`v4l2_subscribed_event` "
"struct is added to :c:type:`v4l2_fh`\\ ``.subscribed``, one for every "
"subscribed event."
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:21
msgid ""
"Each :c:type:`v4l2_subscribed_event` struct ends with a :c:type:"
"`v4l2_kevent` ringbuffer, with the size given by the caller of :c:func:"
"`v4l2_event_subscribe`. This ringbuffer is used to store any events raised "
"by the driver."
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:26
msgid ""
"So every ``(type, ID)`` event tuple will have its own :c:type:`v4l2_kevent` "
"ringbuffer. This guarantees that if a driver is generating lots of events of "
"one type in a short time, then that will not overwrite events of another "
"type."
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:31
msgid ""
"But if you get more events of one type than the size of the :c:type:"
"`v4l2_kevent` ringbuffer, then the oldest event will be dropped and the new "
"one added."
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:35
msgid ""
"The :c:type:`v4l2_kevent` struct links into the ``available`` list of the :c:"
"type:`v4l2_fh` struct so :ref:`VIDIOC_DQEVENT` will know which event to "
"dequeue first."
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:39
msgid ""
"Finally, if the event subscription is associated with a particular object "
"such as a V4L2 control, then that object needs to know about that as well so "
"that an event can be raised by that object. So the ``node`` field can be "
"used to link the :c:type:`v4l2_subscribed_event` struct into a list of such "
"objects."
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:45
msgid "So to summarize:"
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:47
msgid ""
"struct v4l2_fh has two lists: one of the ``subscribed`` events, and one of "
"the ``available`` events."
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:50
msgid ""
"struct v4l2_subscribed_event has a ringbuffer of raised (pending) events of "
"that particular type."
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:53
msgid ""
"If struct v4l2_subscribed_event is associated with a specific object, then "
"that object will have an internal list of struct v4l2_subscribed_event so it "
"knows who subscribed an event to that object."
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:58
msgid ""
"Furthermore, the internal struct v4l2_subscribed_event has ``merge()`` and "
"``replace()`` callbacks which drivers can set. These callbacks are called "
"when a new event is raised and there is no more room."
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:62
msgid ""
"The ``replace()`` callback allows you to replace the payload of the old "
"event with that of the new event, merging any relevant data from the old "
"payload into the new payload that replaces it. It is called when this event "
"type has a ringbuffer with size is one, i.e. only one event can be stored in "
"the ringbuffer."
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:68
msgid ""
"The ``merge()`` callback allows you to merge the oldest event payload into "
"that of the second-oldest event payload. It is called when the ringbuffer "
"has size is greater than one."
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:72
msgid ""
"This way no status information is lost, just the intermediate steps leading "
"up to that state."
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:75
msgid ""
"A good example of these ``replace``/``merge`` callbacks is in v4l2-event.c: "
"``ctrls_replace()`` and ``ctrls_merge()`` callbacks for the control event."
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:79
msgid ""
"these callbacks can be called from interrupt context, so they must be fast."
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:82
msgid "In order to queue events to video device, drivers should call:"
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:84
msgid ""
":c:func:`v4l2_event_queue <v4l2_event_queue>` (:c:type:`vdev "
"<video_device>`, :c:type:`ev <v4l2_event>`)"
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:87
#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:102
#: include/media/v4l2-event.h:116
msgid ""
"The driver's only responsibility is to fill in the type and the data fields. "
"The other fields will be filled in by V4L2."
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:91
msgid "Event subscription"
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:93
msgid "Subscribing to an event is via:"
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:95
msgid ""
":c:func:`v4l2_event_subscribe <v4l2_event_subscribe>` (:c:type:`fh "
"<v4l2_fh>`, :c:type:`sub <v4l2_event_subscription>` , elems, :c:type:`ops "
"<v4l2_subscribed_event_ops>`)"
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:100
msgid ""
"This function is used to implement :c:type:`video_device`-> :c:type:"
"`ioctl_ops <v4l2_ioctl_ops>`-> ``vidioc_subscribe_event``, but the driver "
"must check first if the driver is able to produce events with specified "
"event id, and then should call :c:func:`v4l2_event_subscribe` to subscribe "
"the event."
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:106
msgid ""
"The elems argument is the size of the event queue for this event. If it is "
"0, then the framework will fill in a default value (this depends on the "
"event type)."
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:110
msgid "The ops argument allows the driver to specify a number of callbacks:"
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:115
msgid "Callback"
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:115
msgid "Description"
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:117
msgid "add"
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:117
msgid ""
"called when a new listener gets added (subscribing to the same event twice "
"will only cause this callback to get called once)"
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:119
msgid "del"
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:119
msgid "called when a listener stops listening"
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:120
msgid "replace"
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:120
msgid "replace event 'old' with event 'new'."
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:121
msgid "merge"
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:121
msgid "merge event 'old' into event 'new'."
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:124
msgid ""
"All 4 callbacks are optional, if you don't want to specify any callbacks the "
"ops argument itself maybe ``NULL``."
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:128
msgid "Unsubscribing an event"
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:130
msgid "Unsubscribing to an event is via:"
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:132
msgid ""
":c:func:`v4l2_event_unsubscribe <v4l2_event_unsubscribe>` (:c:type:`fh "
"<v4l2_fh>`, :c:type:`sub <v4l2_event_subscription>`)"
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:135
msgid ""
"This function is used to implement :c:type:`video_device`-> :c:type:"
"`ioctl_ops <v4l2_ioctl_ops>`-> ``vidioc_unsubscribe_event``. A driver may "
"call :c:func:`v4l2_event_unsubscribe` directly unless it wants to be "
"involved in unsubscription process."
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:140
msgid ""
"The special type ``V4L2_EVENT_ALL`` may be used to unsubscribe all events. "
"The drivers may want to handle this in a special way."
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:144
msgid "Check if there's a pending event"
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:146
msgid "Checking if there's a pending event is via:"
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:148
msgid ""
":c:func:`v4l2_event_pending <v4l2_event_pending>` (:c:type:`fh <v4l2_fh>`)"
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:152
msgid ""
"This function returns the number of pending events. Useful when implementing "
"poll."
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:156
msgid "How events work"
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:158
msgid ""
"Events are delivered to user space through the poll system call. The driver "
"can use :c:type:`v4l2_fh`->wait (a wait_queue_head_t) as the argument for "
"``poll_wait()``."
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:162
msgid ""
"There are standard and private events. New standard events must use the "
"smallest available event type. The drivers must allocate their events from "
"their own class starting from class base. Class base is "
"``V4L2_EVENT_PRIVATE_START`` + n * 1000 where n is the lowest available "
"number. The first event type in the class is reserved for future use, so the "
"first available event type is 'class base + 1'."
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:169
msgid ""
"An example on how the V4L2 events may be used can be found in the OMAP 3 ISP "
"driver (``drivers/media/platform/ti/omap3isp``)."
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:172
msgid ""
"A subdev can directly send an event to the :c:type:`v4l2_device` notify "
"function with ``V4L2_DEVICE_NOTIFY_EVENT``. This allows the bridge to map "
"the subdev that sends the event to the video node(s) associated with the "
"subdev that need to be informed about such an event."
msgstr ""

#: ../../../driver-api/media/v4l2-event.rst:178
msgid "V4L2 event functions and data structures"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:25
msgid "Internal kernel event struct."
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:29
#: include/media/v4l2-event.h:43 include/media/v4l2-event.h:58
msgid "**Definition**::"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:38
#: include/media/v4l2-event.h:52 include/media/v4l2-event.h:74
msgid "**Members**"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:26
#: include/media/v4l2-event.h:57
msgid "``list``"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:27
msgid "List node for the v4l2_fh->available list."
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:27
msgid "``sev``"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:28
msgid "Pointer to parent v4l2_subscribed_event."
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:28
msgid "``event``"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:29
msgid "The event itself."
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:29
msgid "``ts``"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:30
msgid "The timestamp of the event."
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:39
msgid "Subscribed event operations."
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:41
msgid "``add``"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:42
msgid "Optional callback, called when a new listener is added"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:42
msgid "``del``"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:43
msgid "Optional callback, called when a listener stops listening"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:43
msgid "``replace``"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:44
msgid "Optional callback that can replace event 'old' with event 'new'."
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:44
msgid "``merge``"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:45
msgid "Optional callback that can merge event 'old' into event 'new'."
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:54
msgid "Internal struct representing a subscribed event."
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:58
msgid "List node for the v4l2_fh->subscribed list."
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:58
msgid "``type``"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:59
msgid "Event type."
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:59
msgid "``id``"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:60
msgid "Associated object ID (e.g. control ID). 0 if there isn't any."
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:60
msgid "``flags``"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:61
msgid "Copy of v4l2_event_subscription->flags."
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:61
msgid "``fh``"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:62
msgid "Filehandle that subscribed to this event."
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:62
msgid "``node``"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:63
msgid "List node that hooks into the object's event list (if there is one)."
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:64
msgid "``ops``"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:65
msgid "v4l2_subscribed_event_ops"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:65
msgid "``elems``"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:66
msgid "The number of elements in the events array."
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:66
msgid "``first``"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:67
msgid "The index of the events containing the oldest available event."
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:67
msgid "``in_use``"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:68
msgid "The number of queued events."
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:68
msgid "``events``"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:69
msgid "An array of **elems** events."
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:85
msgid "Dequeue events from video device."
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:89
#: include/media/v4l2-event.h:99 include/media/v4l2-event.h:113
#: include/media/v4l2-event.h:128 include/media/v4l2-event.h:137
#: include/media/v4l2-event.h:146 include/media/v4l2-event.h:163
#: include/media/v4l2-event.h:171 include/media/v4l2-event.h:178
#: include/media/v4l2-event.h:193 include/media/v4l2-event.h:202
msgid "**Parameters**"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:91
#: include/media/v4l2-event.h:115 include/media/v4l2-event.h:139
#: include/media/v4l2-event.h:148 include/media/v4l2-event.h:165
#: include/media/v4l2-event.h:173 include/media/v4l2-event.h:178
#: include/media/v4l2-event.h:195 include/media/v4l2-event.h:203
msgid "``struct v4l2_fh *fh``"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:87
#: include/media/v4l2-event.h:192
msgid "pointer to struct v4l2_fh"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:89
msgid "``struct v4l2_event *event``"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:88
msgid "pointer to struct v4l2_event"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:90
msgid "``int nonblocking``"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:89
msgid "if not zero, waits for an event to arrive"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:95
#: include/media/v4l2-event.h:109
msgid "Queue events to video device."
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:101
#: include/media/v4l2-event.h:130
msgid "``struct video_device *vdev``"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:97
#: include/media/v4l2-event.h:128
msgid "pointer to :c:type:`struct video_device <video_device>`"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:99
#: include/media/v4l2-event.h:113
msgid "``const struct v4l2_event *ev``"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:98
#: include/media/v4l2-event.h:112
msgid "pointer to :c:type:`struct v4l2_event <v4l2_event>`"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:100
#: include/media/v4l2-event.h:114 include/media/v4l2-event.h:130
#: include/media/v4l2-event.h:137 include/media/v4l2-event.h:149
#: include/media/v4l2-event.h:180
msgid "**Description**"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:99
msgid ""
"The event will be queued for all :c:type:`struct v4l2_fh <v4l2_fh>` file "
"handlers."
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:111
#: include/media/v4l2-event.h:135 include/media/v4l2-event.h:144
#: include/media/v4l2-event.h:161 include/media/v4l2-event.h:169
#: include/media/v4l2-event.h:177 include/media/v4l2-event.h:202
msgid "pointer to :c:type:`struct v4l2_fh <v4l2_fh>`"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:113
msgid ""
"The event will be queued only for the specified :c:type:`struct v4l2_fh "
"<v4l2_fh>` file handler."
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:124
msgid "Wake all filehandles."
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:125
msgid "Used when unregistering a video device."
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:133
msgid "Check if an event is available"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:136
msgid "Returns the number of pending events."
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:142
msgid "Subscribes to an event"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:146
#: include/media/v4l2-event.h:163 include/media/v4l2-event.h:194
msgid "``const struct v4l2_event_subscription *sub``"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:145
#: include/media/v4l2-event.h:162 include/media/v4l2-event.h:178
#: include/media/v4l2-event.h:193 include/media/v4l2-event.h:203
msgid ""
"pointer to :c:type:`struct v4l2_event_subscription <v4l2_event_subscription>`"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:147
msgid "``unsigned int elems``"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:146
msgid "size of the events queue"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:148
msgid "``const struct v4l2_subscribed_event_ops *ops``"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:147
msgid "pointer to :c:type:`v4l2_subscribed_event_ops`"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:150
msgid ""
"if **elems** is zero, the framework will fill in a default value, with is "
"currently 1 element."
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:159
msgid "Unsubscribes to an event"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:167
msgid "Unsubscribes to all events"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:174
msgid "Subdev variant of v4l2_event_unsubscribe()"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:180
#: include/media/v4l2-event.h:204
msgid "``struct v4l2_subdev *sd``"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:176
#: include/media/v4l2-event.h:201
msgid "pointer to :c:type:`struct v4l2_subdev <v4l2_subdev>`"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:179
#: include/media/v4l2-event.h:204
msgid "``struct v4l2_event_subscription *sub``"
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:181
msgid ""
"This function should be used for the :c:type:`struct v4l2_subdev_core_ops "
"<v4l2_subdev_core_ops>` ``unsubscribe_event`` field."
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:189
msgid ""
"helper function that calls v4l2_event_subscribe() if the event is "
"``V4L2_EVENT_SOURCE_CHANGE``."
msgstr ""

#: ../../../driver-api/media/v4l2-event:180: include/media/v4l2-event.h:198
msgid ""
"Variant of v4l2_event_subscribe(), meant to subscribe only events of the "
"type ``V4L2_EVENT_SOURCE_CHANGE``."
msgstr ""
