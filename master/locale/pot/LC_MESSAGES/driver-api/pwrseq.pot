# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-20 11:24+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../driver-api/pwrseq.rst:6
msgid "Power Sequencing API"
msgstr ""

#: ../../../driver-api/pwrseq.rst:0
msgid "Author"
msgstr ""

#: ../../../driver-api/pwrseq.rst:8
msgid "Bartosz Golaszewski"
msgstr ""

#: ../../../driver-api/pwrseq.rst:11
msgid "Introduction"
msgstr ""

#: ../../../driver-api/pwrseq.rst:13
msgid ""
"This framework is designed to abstract complex power-up sequences that are "
"shared between multiple logical devices in the Linux kernel."
msgstr ""

#: ../../../driver-api/pwrseq.rst:16
msgid ""
"The intention is to allow consumers to obtain a power sequencing handle "
"exposed by the power sequence provider and delegate the actual requesting "
"and control of the underlying resources as well as to allow the provider to "
"mitigate any potential conflicts between multiple users behind the scenes."
msgstr ""

#: ../../../driver-api/pwrseq.rst:22
msgid "Glossary"
msgstr ""

#: ../../../driver-api/pwrseq.rst:24
msgid ""
"The power sequencing API uses a number of terms specific to the subsystem:"
msgstr ""

#: ../../../driver-api/pwrseq.rst:26
msgid "Unit"
msgstr ""

#: ../../../driver-api/pwrseq.rst:28
msgid ""
"A unit is a discrete chunk of a power sequence. For instance one unit may "
"enable a set of regulators, another may enable a specific GPIO. Units can "
"define dependencies in the form of other units that must be enabled before "
"it itself can be."
msgstr ""

#: ../../../driver-api/pwrseq.rst:33
msgid "Target"
msgstr ""

#: ../../../driver-api/pwrseq.rst:35
msgid ""
"A target is a set of units (composed of the \"final\" unit and its "
"dependencies) that a consumer selects by its name when requesting a handle "
"to the power sequencer. Via the dependency system, multiple targets may "
"share the same parts of a power sequence but ignore parts that are "
"irrelevant."
msgstr ""

#: ../../../driver-api/pwrseq.rst:41
msgid "Descriptor"
msgstr ""

#: ../../../driver-api/pwrseq.rst:43
msgid ""
"A handle passed by the pwrseq core to every consumer that serves as the "
"entry point to the provider layer. It ensures coherence between different "
"users and keeps reference counting consistent."
msgstr ""

#: ../../../driver-api/pwrseq.rst:48
msgid "Consumer interface"
msgstr ""

#: ../../../driver-api/pwrseq.rst:50
msgid ""
"The consumer API is aimed to be as simple as possible. The driver interested "
"in getting a descriptor from the power sequencer should call pwrseq_get() "
"and specify the name of the target it wants to reach in the sequence after "
"calling pwrseq_power_up(). The descriptor can be released by calling "
"pwrseq_put() and the consumer can request the powering down of its target "
"with pwrseq_power_off(). Note that there is no guarantee that "
"pwrseq_power_off() will have any effect as there may be multiple users of "
"the underlying resources who may keep them active."
msgstr ""

#: ../../../driver-api/pwrseq.rst:60
msgid "Provider interface"
msgstr ""

#: ../../../driver-api/pwrseq.rst:62
msgid ""
"The provider API is admittedly not nearly as straightforward as the one for "
"consumers but it makes up for it in flexibility."
msgstr ""

#: ../../../driver-api/pwrseq.rst:65
msgid ""
"Each provider can logically split the power-up sequence into discrete chunks "
"(units) and define their dependencies. They can then expose named targets "
"that consumers may use as the final point in the sequence that they wish to "
"reach."
msgstr ""

#: ../../../driver-api/pwrseq.rst:69
msgid ""
"To that end the providers fill out a set of configuration structures and "
"register with the pwrseq subsystem by calling pwrseq_device_register()."
msgstr ""

#: ../../../driver-api/pwrseq.rst:73
msgid "Dynamic consumer matching"
msgstr ""

#: ../../../driver-api/pwrseq.rst:75
msgid ""
"The main difference between pwrseq and other Linux kernel providers is the "
"mechanism for dynamic matching of consumers and providers. Every power "
"sequence provider driver must implement the `match()` callback and pass it "
"to the pwrseq core when registering with the subsystems."
msgstr ""

#: ../../../driver-api/pwrseq.rst:80
msgid ""
"When a client requests a sequencer handle, the core will call this callback "
"for every registered provider and let it flexibly figure out whether the "
"proposed client device is indeed its consumer. For example: if the provider "
"binds to the device-tree node representing a power management unit of a "
"chipset and the consumer driver controls one of its modules, the provider "
"driver may parse the relevant regulator supply properties in device tree and "
"see if they lead from the PMU to the consumer."
msgstr ""

#: ../../../driver-api/pwrseq.rst:89
msgid "API reference"
msgstr ""

#: ../../../driver-api/pwrseq:91: include/linux/pwrseq/provider.h:20
msgid "Configuration of a single power sequencing unit."
msgstr ""

#: ../../../driver-api/pwrseq:91: include/linux/pwrseq/provider.h:24
#: include/linux/pwrseq/provider.h:42 include/linux/pwrseq/provider.h:58
msgid "**Definition**::"
msgstr ""

#: ../../../driver-api/pwrseq:91: include/linux/pwrseq/provider.h:33
#: include/linux/pwrseq/provider.h:50 include/linux/pwrseq/provider.h:68
msgid "**Members**"
msgstr ""

#: ../../../driver-api/pwrseq:91: include/linux/pwrseq/provider.h:22
#: include/linux/pwrseq/provider.h:39
msgid "``name``"
msgstr ""

#: ../../../driver-api/pwrseq:91: include/linux/pwrseq/provider.h:23
msgid "Name of the unit."
msgstr ""

#: ../../../driver-api/pwrseq:91: include/linux/pwrseq/provider.h:23
msgid "``deps``"
msgstr ""

#: ../../../driver-api/pwrseq:91: include/linux/pwrseq/provider.h:24
msgid ""
"Units that must be enabled before this one and disabled after it in the "
"order they come in this array. Must be NULL-terminated."
msgstr ""

#: ../../../driver-api/pwrseq:91: include/linux/pwrseq/provider.h:25
msgid "``enable``"
msgstr ""

#: ../../../driver-api/pwrseq:91: include/linux/pwrseq/provider.h:26
msgid ""
"Callback running the part of the power-on sequence provided by this unit."
msgstr ""

#: ../../../driver-api/pwrseq:91: include/linux/pwrseq/provider.h:27
msgid "``disable``"
msgstr ""

#: ../../../driver-api/pwrseq:91: include/linux/pwrseq/provider.h:28
msgid ""
"Callback running the part of the power-off sequence provided by this unit."
msgstr ""

#: ../../../driver-api/pwrseq:91: include/linux/pwrseq/provider.h:38
msgid "Configuration of a power sequencing target."
msgstr ""

#: ../../../driver-api/pwrseq:91: include/linux/pwrseq/provider.h:40
msgid "Name of the target."
msgstr ""

#: ../../../driver-api/pwrseq:91: include/linux/pwrseq/provider.h:40
msgid "``unit``"
msgstr ""

#: ../../../driver-api/pwrseq:91: include/linux/pwrseq/provider.h:41
msgid ""
"Final unit that this target must reach in order to be considered enabled."
msgstr ""

#: ../../../driver-api/pwrseq:91: include/linux/pwrseq/provider.h:42
msgid "``post_enable``"
msgstr ""

#: ../../../driver-api/pwrseq:91: include/linux/pwrseq/provider.h:43
msgid ""
"Callback run after the target unit has been enabled, *after* the state lock "
"has been released. It's useful for implementing boot-up delays without "
"blocking other users from powering up using the same power sequencer."
msgstr ""

#: ../../../driver-api/pwrseq:91: include/linux/pwrseq/provider.h:54
msgid "Configuration used for registering a new provider."
msgstr ""

#: ../../../driver-api/pwrseq:91: include/linux/pwrseq/provider.h:55
msgid "``parent``"
msgstr ""

#: ../../../driver-api/pwrseq:91: include/linux/pwrseq/provider.h:56
msgid "Parent device for the sequencer. Must be set."
msgstr ""

#: ../../../driver-api/pwrseq:91: include/linux/pwrseq/provider.h:56
msgid "``owner``"
msgstr ""

#: ../../../driver-api/pwrseq:91: include/linux/pwrseq/provider.h:57
msgid "Module providing this device."
msgstr ""

#: ../../../driver-api/pwrseq:91: include/linux/pwrseq/provider.h:57
msgid "``drvdata``"
msgstr ""

#: ../../../driver-api/pwrseq:91: include/linux/pwrseq/provider.h:58
msgid "Private driver data."
msgstr ""

#: ../../../driver-api/pwrseq:91: include/linux/pwrseq/provider.h:58
msgid "``match``"
msgstr ""

#: ../../../driver-api/pwrseq:91: include/linux/pwrseq/provider.h:59
msgid "Provider callback used to match the consumer device to the sequencer."
msgstr ""

#: ../../../driver-api/pwrseq:91: include/linux/pwrseq/provider.h:59
msgid "``targets``"
msgstr ""

#: ../../../driver-api/pwrseq:91: include/linux/pwrseq/provider.h:60
msgid "Array of targets for this power sequencer. Must be NULL-terminated."
msgstr ""

#: ../../../driver-api/pwrseq:94: drivers/power/sequencing/core.c:463
msgid "Register a new power sequencer."
msgstr ""

#: ../../../driver-api/pwrseq:94: drivers/power/sequencing/core.c:467
#: drivers/power/sequencing/core.c:542 drivers/power/sequencing/core.c:574
#: drivers/power/sequencing/core.c:602 drivers/power/sequencing/core.c:662
#: drivers/power/sequencing/core.c:700 drivers/power/sequencing/core.c:729
#: drivers/power/sequencing/core.c:879 drivers/power/sequencing/core.c:931
msgid "**Parameters**"
msgstr ""

#: ../../../driver-api/pwrseq:94: drivers/power/sequencing/core.c:469
#: drivers/power/sequencing/core.c:573
msgid "``const struct pwrseq_config *config``"
msgstr ""

#: ../../../driver-api/pwrseq:94: drivers/power/sequencing/core.c:464
#: drivers/power/sequencing/core.c:572
msgid "Configuration of the new power sequencing device."
msgstr ""

#: ../../../driver-api/pwrseq:94: drivers/power/sequencing/core.c:466
#: drivers/power/sequencing/core.c:879 drivers/power/sequencing/core.c:931
msgid "**Description**"
msgstr ""

#: ../../../driver-api/pwrseq:94: drivers/power/sequencing/core.c:465
msgid ""
"The config structure is only used during the call and can be freed after the "
"function returns. The config structure *must* have the parent device as well "
"as the match() callback and at least one target set."
msgstr ""

#: ../../../driver-api/pwrseq:94: drivers/power/sequencing/core.c:469
#: drivers/power/sequencing/core.c:574 drivers/power/sequencing/core.c:602
#: drivers/power/sequencing/core.c:663 drivers/power/sequencing/core.c:731
#: drivers/power/sequencing/core.c:884 drivers/power/sequencing/core.c:935
msgid "**Return**"
msgstr ""

#: ../../../driver-api/pwrseq:94: drivers/power/sequencing/core.c:470
#: drivers/power/sequencing/core.c:574
msgid "Returns the address of the new pwrseq device or ERR_PTR() on failure."
msgstr ""

#: ../../../driver-api/pwrseq:94: drivers/power/sequencing/core.c:538
msgid "Unregister the power sequencer."
msgstr ""

#: ../../../driver-api/pwrseq:94: drivers/power/sequencing/core.c:544
#: drivers/power/sequencing/core.c:604
msgid "``struct pwrseq_device *pwrseq``"
msgstr ""

#: ../../../driver-api/pwrseq:94: drivers/power/sequencing/core.c:539
msgid "Power sequencer to unregister."
msgstr ""

#: ../../../driver-api/pwrseq:94: drivers/power/sequencing/core.c:570
msgid "Managed variant of pwrseq_device_register()."
msgstr ""

#: ../../../driver-api/pwrseq:94: drivers/power/sequencing/core.c:576
#: drivers/power/sequencing/core.c:664 drivers/power/sequencing/core.c:731
msgid "``struct device *dev``"
msgstr ""

#: ../../../driver-api/pwrseq:94: drivers/power/sequencing/core.c:571
msgid "Managing device."
msgstr ""

#: ../../../driver-api/pwrseq:94: drivers/power/sequencing/core.c:598
msgid "Get the driver private data associated with this sequencer."
msgstr ""

#: ../../../driver-api/pwrseq:94: drivers/power/sequencing/core.c:600
msgid "Power sequencer object."
msgstr ""

#: ../../../driver-api/pwrseq:94: drivers/power/sequencing/core.c:602
msgid "Address of the private driver data."
msgstr ""

#: ../../../driver-api/pwrseq:94: drivers/power/sequencing/core.c:658
msgid "Get the power sequencer associated with this device."
msgstr ""

#: ../../../driver-api/pwrseq:94: drivers/power/sequencing/core.c:659
msgid "Device for which to get the sequencer."
msgstr ""

#: ../../../driver-api/pwrseq:94: drivers/power/sequencing/core.c:661
#: drivers/power/sequencing/core.c:729
msgid "``const char *target``"
msgstr ""

#: ../../../driver-api/pwrseq:94: drivers/power/sequencing/core.c:660
#: drivers/power/sequencing/core.c:728
msgid "Name of the target exposed by the sequencer this device wants to reach."
msgstr ""

#: ../../../driver-api/pwrseq:94: drivers/power/sequencing/core.c:663
#: drivers/power/sequencing/core.c:731
msgid ""
"New power sequencer descriptor for use by the consumer driver or ERR_PTR() "
"on failure."
msgstr ""

#: ../../../driver-api/pwrseq:94: drivers/power/sequencing/core.c:696
msgid "Release the power sequencer descriptor."
msgstr ""

#: ../../../driver-api/pwrseq:94: drivers/power/sequencing/core.c:702
#: drivers/power/sequencing/core.c:881 drivers/power/sequencing/core.c:933
msgid "``struct pwrseq_desc *desc``"
msgstr ""

#: ../../../driver-api/pwrseq:94: drivers/power/sequencing/core.c:697
msgid "Descriptor to release."
msgstr ""

#: ../../../driver-api/pwrseq:94: drivers/power/sequencing/core.c:725
msgid "Managed variant of pwrseq_get()."
msgstr ""

#: ../../../driver-api/pwrseq:94: drivers/power/sequencing/core.c:726
msgid ""
"Device for which to get the sequencer and which also manages its lifetime."
msgstr ""

#: ../../../driver-api/pwrseq:94: drivers/power/sequencing/core.c:875
msgid "Issue a power-on request on behalf of the consumer device."
msgstr ""

#: ../../../driver-api/pwrseq:94: drivers/power/sequencing/core.c:877
#: drivers/power/sequencing/core.c:929
msgid "Descriptor referencing the power sequencer."
msgstr ""

#: ../../../driver-api/pwrseq:94: drivers/power/sequencing/core.c:878
msgid ""
"This function tells the power sequencer that the consumer wants to be "
"powered-up. The sequencer may already have powered-up the device in which "
"case the function returns 0. If the power-up sequence is already in "
"progress, the function will block until it's done and return 0. If this is "
"the first request, the device will be powered up."
msgstr ""

#: ../../../driver-api/pwrseq:94: drivers/power/sequencing/core.c:885
#: drivers/power/sequencing/core.c:936
msgid "0 on success, negative error number on failure."
msgstr ""

#: ../../../driver-api/pwrseq:94: drivers/power/sequencing/core.c:927
msgid "Issue a power-off request on behalf of the consumer device."
msgstr ""

#: ../../../driver-api/pwrseq:94: drivers/power/sequencing/core.c:930
msgid ""
"This undoes the effects of pwrseq_power_on(). It issues a power-off request "
"on behalf of the consumer and when the last remaining user does so, the "
"power-down sequence will be started. If one is in progress, the function "
"will block until it's complete and then return."
msgstr ""
