# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../admin-guide/hw-vuln/l1tf.rst:2
msgid "L1TF - L1 Terminal Fault"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:4
msgid ""
"L1 Terminal Fault is a hardware vulnerability which allows unprivileged "
"speculative access to data which is available in the Level 1 Data Cache when "
"the page table entry controlling the virtual address, which is used for the "
"access, has the Present bit cleared or other reserved bits set."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:10
msgid "Affected processors"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:12
msgid ""
"This vulnerability affects a wide range of Intel processors. The "
"vulnerability is not present on:"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:15
msgid "Processors from AMD, Centaur and other non Intel vendors"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:17
msgid "Older processor models, where the CPU family is < 6"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:19
msgid ""
"A range of Intel ATOM processors (Cedarview, Cloverview, Lincroft, Penwell, "
"Pineview, Silvermont, Airmont, Merrifield)"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:22
msgid "The Intel XEON PHI family"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:24
msgid ""
"Intel processors which have the ARCH_CAP_RDCL_NO bit set in the "
"IA32_ARCH_CAPABILITIES MSR. If the bit is set the CPU is not affected by the "
"Meltdown vulnerability either. These CPUs should become available by end of "
"2018."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:29
msgid ""
"Whether a processor is affected or not can be read out from the L1TF "
"vulnerability file in sysfs. See :ref:`l1tf_sys_info`."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:33
msgid "Related CVEs"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:35
msgid "The following CVE entries are related to the L1TF vulnerability:"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:38
msgid "CVE-2018-3615"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:38
#: ../../../admin-guide/hw-vuln/l1tf.rst:39
#: ../../../admin-guide/hw-vuln/l1tf.rst:40
msgid "L1 Terminal Fault"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:38
msgid "SGX related aspects"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:39
msgid "CVE-2018-3620"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:39
msgid "OS, SMM related aspects"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:40
msgid "CVE-2018-3646"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:40
msgid "Virtualization related aspects"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:44
msgid "Problem"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:46
msgid ""
"If an instruction accesses a virtual address for which the relevant page "
"table entry (PTE) has the Present bit cleared or other reserved bits set, "
"then speculative execution ignores the invalid PTE and loads the referenced "
"data if it is present in the Level 1 Data Cache, as if the page referenced "
"by the address bits in the PTE was still present and accessible."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:52
msgid ""
"While this is a purely speculative mechanism and the instruction will raise "
"a page fault when it is retired eventually, the pure act of loading the data "
"and making it available to other speculative instructions opens up the "
"opportunity for side channel attacks to unprivileged malicious code, similar "
"to the Meltdown attack."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:58
msgid ""
"While Meltdown breaks the user space to kernel space protection, L1TF allows "
"to attack any physical memory address in the system and the attack works "
"across all protection domains. It allows an attack of SGX and also works "
"from inside virtual machines because the speculation bypasses the extended "
"page table (EPT) protection mechanism."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:66
msgid "Attack scenarios"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:69
msgid "1. Malicious user space"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:71
msgid ""
"Operating Systems store arbitrary information in the address bits of a PTE "
"which is marked non present. This allows a malicious user space application "
"to attack the physical memory to which these PTEs resolve. In some cases "
"user-space can maliciously influence the information encoded in the address "
"bits of the PTE, thus making attacks more deterministic and more practical."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:78
msgid ""
"The Linux kernel contains a mitigation for this attack vector, PTE "
"inversion, which is permanently enabled and has no performance impact. The "
"kernel ensures that the address bits of PTEs, which are not marked present, "
"never point to cacheable physical memory space."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:83
msgid ""
"A system with an up to date kernel is protected against attacks from "
"malicious user space applications."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:87
msgid "2. Malicious guest in a virtual machine"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:89
msgid ""
"The fact that L1TF breaks all domain protections allows malicious guest "
"OSes, which can control the PTEs directly, and malicious guest user space "
"applications, which run on an unprotected guest kernel lacking the PTE "
"inversion mitigation for L1TF, to attack physical host memory."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:94
msgid ""
"A special aspect of L1TF in the context of virtualization is symmetric multi "
"threading (SMT). The Intel implementation of SMT is called HyperThreading. "
"The fact that Hyperthreads on the affected processors share the L1 Data "
"Cache (L1D) is important for this. As the flaw allows only to attack data "
"which is present in L1D, a malicious guest running on one Hyperthread can "
"attack the data which is brought into the L1D by the context which runs on "
"the sibling Hyperthread of the same physical core. This context can be host "
"OS, host user space or a different guest."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:103
msgid ""
"If the processor does not support Extended Page Tables, the attack is only "
"possible, when the hypervisor does not sanitize the content of the effective "
"(shadow) page tables."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:107
msgid ""
"While solutions exist to mitigate these attack vectors fully, these "
"mitigations are not enabled by default in the Linux kernel because they can "
"affect performance significantly. The kernel provides several mechanisms "
"which can be utilized to address the problem depending on the deployment "
"scenario. The mitigations, their protection scope and impact are described "
"in the next sections."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:114
msgid ""
"The default mitigations and the rationale for choosing them are explained at "
"the end of this document. See :ref:`default_mitigations`."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:120
msgid "L1TF system information"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:122
msgid ""
"The Linux kernel provides a sysfs interface to enumerate the current L1TF "
"status of the system: whether the system is vulnerable, and which "
"mitigations are active. The relevant sysfs file is:"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:126
msgid "/sys/devices/system/cpu/vulnerabilities/l1tf"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:128
msgid "The possible values in this file are:"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:131
msgid "'Not affected'"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:131
msgid "The processor is not vulnerable"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:132
msgid "'Mitigation: PTE Inversion'"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:132
msgid "The host protection is active"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:135
msgid ""
"If KVM/VMX is enabled and the processor is vulnerable then the following "
"information is appended to the 'Mitigation: PTE Inversion' part:"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:138
msgid "SMT status:"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:141
msgid "'VMX: SMT vulnerable'"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:141
msgid "SMT is enabled"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:142
msgid "'VMX: SMT disabled'"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:142
msgid "SMT is disabled"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:145
msgid "L1D Flush mode:"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:148
msgid "'L1D vulnerable'"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:148
msgid "L1D flushing is disabled"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:150
msgid "'L1D conditional cache flushes'"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:150
msgid "L1D flush is conditionally enabled"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:152
msgid "'L1D cache flushes'"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:152
msgid "L1D flush is unconditionally enabled"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:155
msgid ""
"The resulting grade of protection is discussed in the following sections."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:159
msgid "Host mitigation mechanism"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:161
msgid ""
"The kernel is unconditionally protected against L1TF attacks from malicious "
"user space running on the host."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:166
msgid "Guest mitigation mechanisms"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:171
msgid "1. L1D flush on VMENTER"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:173
msgid ""
"To make sure that a guest cannot attack data which is present in the L1D the "
"hypervisor flushes the L1D before entering the guest."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:176
msgid ""
"Flushing the L1D evicts not only the data which should not be accessed by a "
"potentially malicious guest, it also flushes the guest data. Flushing the "
"L1D has a performance impact as the processor has to bring the flushed guest "
"data back into the L1D. Depending on the frequency of VMEXIT/VMENTER and the "
"type of computations in the guest performance degradation in the range of 1% "
"to 50% has been observed. For scenarios where guest VMEXIT/VMENTER are rare "
"the performance impact is minimal. Virtio and mechanisms like posted "
"interrupts are designed to confine the VMEXITs to a bare minimum, but "
"specific configurations and application scenarios might still suffer from a "
"high VMEXIT rate."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:187
msgid "The kernel provides two L1D flush modes:"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:188
msgid "conditional ('cond')"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:189
msgid "unconditional ('always')"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:191
msgid ""
"The conditional mode avoids L1D flushing after VMEXITs which execute only "
"audited code paths before the corresponding VMENTER. These code paths have "
"been verified that they cannot expose secrets or other interesting data to "
"an attacker, but they can leak information about the address space layout of "
"the hypervisor."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:197
msgid ""
"Unconditional mode flushes L1D on all VMENTER invocations and provides "
"maximum protection. It has a higher overhead than the conditional mode. The "
"overhead cannot be quantified correctly as it depends on the workload "
"scenario and the resulting number of VMEXITs."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:202
msgid ""
"The general recommendation is to enable L1D flush on VMENTER. The kernel "
"defaults to conditional mode on affected processors."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:205
msgid ""
"**Note**, that L1D flush does not prevent the SMT problem because the "
"sibling thread will also bring back its data into the L1D which makes it "
"attackable again."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:209
msgid ""
"L1D flush can be controlled by the administrator via the kernel command line "
"and sysfs control files. See :ref:`mitigation_control_command_line` and :ref:"
"`mitigation_control_kvm`."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:216
msgid "2. Guest VCPU confinement to dedicated physical cores"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:218
msgid ""
"To address the SMT problem, it is possible to make a guest or a group of "
"guests affine to one or more physical cores. The proper mechanism for that "
"is to utilize exclusive cpusets to ensure that no other guest or host tasks "
"can run on these cores."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:223
msgid ""
"If only a single guest or related guests run on sibling SMT threads on the "
"same physical core then they can only attack their own memory and restricted "
"parts of the host memory."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:227
msgid ""
"Host memory is attackable, when one of the sibling SMT threads runs in host "
"OS (hypervisor) context and the other in guest context. The amount of "
"valuable information from the host OS context depends on the context which "
"the host OS executes, i.e. interrupts, soft interrupts and kernel threads. "
"The amount of valuable data from these contexts cannot be declared as non-"
"interesting for an attacker without deep inspection of the code."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:235
msgid ""
"**Note**, that assigning guests to a fixed set of physical cores affects the "
"ability of the scheduler to do load balancing and might have negative "
"effects on CPU utilization depending on the hosting scenario. Disabling SMT "
"might be a viable alternative for particular scenarios."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:241
msgid ""
"For further information about confining guests to a single or to a group of "
"cores consult the cpusets documentation:"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:244
msgid ""
"https://www.kernel.org/doc/Documentation/admin-guide/cgroup-v1/cpusets.rst"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:249
msgid "3. Interrupt affinity"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:251
msgid ""
"Interrupts can be made affine to logical CPUs. This is not universally true "
"because there are types of interrupts which are truly per CPU interrupts, e."
"g. the local timer interrupt. Aside of that multi queue devices affine their "
"interrupts to single CPUs or groups of CPUs per queue without allowing the "
"administrator to control the affinities."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:257
msgid ""
"Moving the interrupts, which can be affinity controlled, away from CPUs "
"which run untrusted guests, reduces the attack vector space."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:260
msgid ""
"Whether the interrupts with are affine to CPUs, which run untrusted guests, "
"provide interesting data for an attacker depends on the system configuration "
"and the scenarios which run on the system. While for some of the interrupts "
"it can be assumed that they won't expose interesting information beyond "
"exposing hints about the host OS memory layout, there is no way to make "
"general assumptions."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:267
msgid ""
"Interrupt affinity can be controlled by the administrator via the /proc/irq/"
"$NR/smp_affinity[_list] files. Limited documentation is available at:"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:271
msgid "https://www.kernel.org/doc/Documentation/core-api/irq/irq-affinity.rst"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:276
msgid "4. SMT control"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:278
msgid ""
"To prevent the SMT issues of L1TF it might be necessary to disable SMT "
"completely. Disabling SMT can have a significant performance impact, but the "
"impact depends on the hosting scenario and the type of workloads. The impact "
"of disabling SMT needs also to be weighted against the impact of other "
"mitigation solutions like confining guests to dedicated cores."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:284
msgid ""
"The kernel provides a sysfs interface to retrieve the status of SMT and to "
"control it. It also provides a kernel command line interface to control SMT."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:288
msgid "The kernel command line interface consists of the following options:"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:291
msgid "nosmt"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:291
msgid ""
"Affects the bring up of the secondary CPUs during boot. The kernel tries to "
"bring all present CPUs online during the boot process. \"nosmt\" makes sure "
"that from each physical core only one - the so called primary (hyper) thread "
"is activated. Due to a design flaw of Intel processors related to Machine "
"Check Exceptions the non primary siblings have to be brought up at least "
"partially and are then shut down again.  \"nosmt\" can be undone via the "
"sysfs interface."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:300
msgid "nosmt=force"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:300
msgid ""
"Has the same effect as \"nosmt\" but it does not allow to undo the SMT "
"disable via the sysfs interface."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:304
msgid "The sysfs interface provides two files:"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:306
msgid "/sys/devices/system/cpu/smt/control"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:307
msgid "/sys/devices/system/cpu/smt/active"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:309
msgid "/sys/devices/system/cpu/smt/control:"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:311
msgid ""
"This file allows to read out the SMT control state and provides the ability "
"to disable or (re)enable SMT. The possible states are:"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:315
#: ../../../admin-guide/hw-vuln/l1tf.rst:335
msgid "on"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:315
msgid ""
"SMT is supported by the CPU and enabled. All logical CPUs can be onlined and "
"offlined without restrictions."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:319
#: ../../../admin-guide/hw-vuln/l1tf.rst:336
#: ../../../admin-guide/hw-vuln/l1tf.rst:406
msgid "off"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:319
msgid ""
"SMT is supported by the CPU and disabled. Only the so called primary SMT "
"threads can be onlined and offlined without restrictions. An attempt to "
"online a non-primary sibling is rejected"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:324
#: ../../../admin-guide/hw-vuln/l1tf.rst:337
msgid "forceoff"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:324
msgid ""
"Same as 'off' but the state cannot be controlled. Attempts to write to the "
"control file are rejected."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:327
msgid "notsupported"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:327
msgid ""
"The processor does not support SMT. It's therefore not affected by the SMT "
"implications of L1TF. Attempts to write to the control file are rejected."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:332
msgid ""
"The possible states which can be written into this file to control SMT state "
"are:"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:339
msgid "/sys/devices/system/cpu/smt/active:"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:341
msgid ""
"This file reports whether SMT is enabled and active, i.e. if on any physical "
"core two or more sibling threads are online."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:344
msgid ""
"SMT control is also possible at boot time via the l1tf kernel command line "
"parameter in combination with L1D flush control. See :ref:"
"`mitigation_control_command_line`."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:349
msgid "5. Disabling EPT"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:351
msgid ""
"Disabling EPT for virtual machines provides full mitigation for L1TF even "
"with SMT enabled, because the effective page tables for guests are managed "
"and sanitized by the hypervisor. Though disabling EPT has a significant "
"performance impact especially when the Meltdown mitigation KPTI is enabled."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:357
#: ../../../admin-guide/hw-vuln/l1tf.rst:491
#: ../../../admin-guide/hw-vuln/l1tf.rst:550
msgid ""
"EPT can be disabled in the hypervisor via the 'kvm-intel.ept' parameter."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:359
msgid ""
"There is ongoing research and development for new mitigation mechanisms to "
"address the performance impact of disabling SMT or EPT."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:365
msgid "Mitigation control on the kernel command line"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:367
msgid ""
"The kernel command line allows to control the L1TF mitigations at boot time "
"with the option \"l1tf=\". The valid arguments for this option are:"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:371
msgid "full"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:371
msgid ""
"Provides all available mitigations for the L1TF vulnerability. Disables SMT "
"and enables all mitigations in the hypervisors, i.e. unconditional L1D "
"flushing"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:375
#: ../../../admin-guide/hw-vuln/l1tf.rst:388
#: ../../../admin-guide/hw-vuln/l1tf.rst:397
msgid ""
"SMT control and L1D flush control via the sysfs interface is still possible "
"after boot.  Hypervisors will issue a warning when the first VM is started "
"in a potentially insecure configuration, i.e. SMT enabled or L1D flush "
"disabled."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:381
msgid "full,force"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:381
msgid ""
"Same as 'full', but disables SMT and L1D flush runtime control. Implies the "
"'nosmt=force' command line option. (i.e. sysfs control of SMT is disabled.)"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:385
msgid "flush"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:385
msgid ""
"Leaves SMT enabled and enables the default hypervisor mitigation, i.e. "
"conditional L1D flushing"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:394
msgid "flush,nosmt"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:394
msgid ""
"Disables SMT and enables the default hypervisor mitigation, i.e. conditional "
"L1D flushing."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:403
msgid "flush,nowarn"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:403
msgid ""
"Same as 'flush', but hypervisors will not warn when a VM is started in a "
"potentially insecure configuration."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:406
msgid ""
"Disables hypervisor mitigations and doesn't emit any warnings. It also drops "
"the swap size and available RAM limit restrictions on both hypervisor and "
"bare metal."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:413
msgid ""
"The default is 'flush'. For details about L1D flushing see :ref:`l1d_flush`."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:419
msgid "Mitigation control for KVM - module parameter"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:421
msgid ""
"The KVM hypervisor mitigation mechanism, flushing the L1D cache when "
"entering a guest, can be controlled with a module parameter."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:424
msgid ""
"The option/parameter is \"kvm-intel.vmentry_l1d_flush=\". It takes the "
"following arguments:"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:428
msgid "always"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:428
msgid "L1D cache flush on every VMENTER."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:430
msgid "cond"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:430
msgid ""
"Flush L1D on VMENTER only when the code between VMEXIT and VMENTER can leak "
"host memory which is considered interesting for an attacker. This still can "
"leak host memory which allows e.g. to determine the hosts address space "
"layout."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:435
msgid "never"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:435
msgid "Disables the mitigation"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:438
msgid ""
"The parameter can be provided on the kernel command line, as a module "
"parameter when loading the modules and at runtime modified via the sysfs "
"file:"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:442
msgid "/sys/module/kvm_intel/parameters/vmentry_l1d_flush"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:444
msgid ""
"The default is 'cond'. If 'l1tf=full,force' is given on the kernel command "
"line, then 'always' is enforced and the kvm-intel.vmentry_l1d_flush module "
"parameter is ignored and writes to the sysfs file are rejected."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:451
msgid "Mitigation selection guide"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:454
msgid "1. No virtualization in use"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:456
msgid ""
"The system is protected by the kernel unconditionally and no further action "
"is required."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:460
msgid "2. Virtualization with trusted guests"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:462
msgid ""
"If the guest comes from a trusted source and the guest OS kernel is "
"guaranteed to have the L1TF mitigations in place the system is fully "
"protected against L1TF and no further action is required."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:466
msgid ""
"To avoid the overhead of the default L1D flushing on VMENTER the "
"administrator can disable the flushing via the kernel command line and sysfs "
"control files. See :ref:`mitigation_control_command_line` and :ref:"
"`mitigation_control_kvm`."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:473
msgid "3. Virtualization with untrusted guests"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:476
msgid "3.1. SMT not supported or disabled"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:478
msgid ""
"If SMT is not supported by the processor or disabled in the BIOS or by the "
"kernel, it's only required to enforce L1D flushing on VMENTER."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:481
#: ../../../admin-guide/hw-vuln/l1tf.rst:504
msgid ""
"Conditional L1D flushing is the default behaviour and can be tuned. See :ref:"
"`mitigation_control_command_line` and :ref:`mitigation_control_kvm`."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:485
msgid "3.2. EPT not supported or disabled"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:487
msgid ""
"If EPT is not supported by the processor or disabled in the hypervisor, the "
"system is fully protected. SMT can stay enabled and L1D flushing on VMENTER "
"is not required."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:494
msgid "3.3. SMT and EPT supported and active"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:496
msgid ""
"If SMT and EPT are supported and active then various degrees of mitigations "
"can be employed:"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:499
msgid "L1D flushing on VMENTER:"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:501
msgid ""
"L1D flushing on VMENTER is the minimal protection requirement, but it is "
"only potent in combination with other mitigation methods."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:507
msgid "Guest confinement:"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:509
msgid ""
"Confinement of guests to a single or a group of physical cores which are not "
"running any other processes, can reduce the attack surface significantly, "
"but interrupts, soft interrupts and kernel threads can still expose valuable "
"data to a potential attacker. See :ref:`guest_confinement`."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:515
msgid "Interrupt isolation:"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:517
msgid ""
"Isolating the guest CPUs from interrupts can reduce the attack surface "
"further, but still allows a malicious guest to explore a limited amount of "
"host physical memory. This can at least be used to gain knowledge about the "
"host address space layout. The interrupts which have a fixed affinity to the "
"CPUs which run the untrusted guests can depending on the scenario still "
"trigger soft interrupts and schedule kernel threads which might expose "
"valuable information. See :ref:`interrupt_isolation`."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:526
msgid ""
"The above three mitigation methods combined can provide protection to a "
"certain degree, but the risk of the remaining attack surface has to be "
"carefully analyzed. For full protection the following methods are available:"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:531
msgid "Disabling SMT:"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:533
msgid ""
"Disabling SMT and enforcing the L1D flushing provides the maximum amount of "
"protection. This mitigation is not depending on any of the above mitigation "
"methods."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:537
msgid ""
"SMT control and L1D flushing can be tuned by the command line parameters "
"'nosmt', 'l1tf', 'kvm-intel.vmentry_l1d_flush' and at run time with the "
"matching sysfs control files. See :ref:`smt_control`, :ref:"
"`mitigation_control_command_line` and :ref:`mitigation_control_kvm`."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:543
msgid "Disabling EPT:"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:545
msgid ""
"Disabling EPT provides the maximum amount of protection as well. It is not "
"depending on any of the above mitigation methods. SMT can stay enabled and "
"L1D flushing is not required, but the performance impact is significant."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:554
msgid "3.4. Nested virtual machines"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:556
msgid ""
"When nested virtualization is in use, three operating systems are involved: "
"the bare metal hypervisor, the nested hypervisor and the nested virtual "
"machine.  VMENTER operations from the nested hypervisor into the nested "
"guest will always be processed by the bare metal hypervisor. If KVM is the "
"bare metal hypervisor it will:"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:562
msgid ""
"Flush the L1D cache on every switch from the nested hypervisor to the nested "
"virtual machine, so that the nested hypervisor's secrets are not exposed to "
"the nested virtual machine;"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:566
msgid ""
"Flush the L1D cache on every switch from the nested virtual machine to the "
"nested hypervisor; this is a complex operation, and flushing the L1D cache "
"avoids that the bare metal hypervisor's secrets are exposed to the nested "
"virtual machine;"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:571
msgid ""
"Instruct the nested hypervisor to not perform any L1D cache flush. This is "
"an optimization to avoid double L1D flushing."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:578
msgid "Default mitigations"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:580
msgid "The kernel default mitigations for vulnerable processors are:"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:582
msgid ""
"PTE inversion to protect against malicious user space. This is done "
"unconditionally and cannot be controlled. The swap storage is limited to "
"~16TB."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:586
msgid "L1D conditional flushing on VMENTER when EPT is enabled for a guest."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:589
msgid ""
"The kernel does not by default enforce the disabling of SMT, which leaves "
"SMT systems vulnerable when running untrusted guests with EPT enabled."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:592
msgid "The rationale for this choice is:"
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:594
msgid ""
"Force disabling SMT can break existing setups, especially with unattended "
"updates."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:597
msgid ""
"If regular users run untrusted guests on their machine, then L1TF is just an "
"add on to other malware which might be embedded in an untrusted guest, e.g. "
"spam-bots or attacks on the local network."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:601
msgid ""
"There is no technical way to prevent a user from running untrusted code on "
"their machines blindly."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:604
msgid ""
"It's technically extremely unlikely and from today's knowledge even "
"impossible that L1TF can be exploited via the most popular attack mechanisms "
"like JavaScript because these mechanisms have no way to control PTEs. If "
"this would be possible and not other mitigation would be possible, then the "
"default might be different."
msgstr ""

#: ../../../admin-guide/hw-vuln/l1tf.rst:610
msgid ""
"The administrators of cloud and hosting setups have to carefully analyze the "
"risk for their scenarios and make the appropriate mitigation choices, which "
"might even vary across their deployed machines and also result in other "
"changes of their overall setup. There is no way for the kernel to provide a "
"sensible default for this kind of scenarios."
msgstr ""
