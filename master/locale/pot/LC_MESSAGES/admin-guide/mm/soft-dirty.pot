# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../admin-guide/mm/soft-dirty.rst:3
msgid "Soft-Dirty PTEs"
msgstr ""

#: ../../../admin-guide/mm/soft-dirty.rst:5
msgid ""
"The soft-dirty is a bit on a PTE which helps to track which pages a task "
"writes to. In order to do this tracking one should"
msgstr ""

#: ../../../admin-guide/mm/soft-dirty.rst:8
msgid "Clear soft-dirty bits from the task's PTEs."
msgstr ""

#: ../../../admin-guide/mm/soft-dirty.rst:10
msgid ""
"This is done by writing \"4\" into the ``/proc/PID/clear_refs`` file of the "
"task in question."
msgstr ""

#: ../../../admin-guide/mm/soft-dirty.rst:13
msgid "Wait some time."
msgstr ""

#: ../../../admin-guide/mm/soft-dirty.rst:15
msgid "Read soft-dirty bits from the PTEs."
msgstr ""

#: ../../../admin-guide/mm/soft-dirty.rst:17
msgid ""
"This is done by reading from the ``/proc/PID/pagemap``. The bit 55 of the 64-"
"bit qword is the soft-dirty one. If set, the respective PTE was written to "
"since step 1."
msgstr ""

#: ../../../admin-guide/mm/soft-dirty.rst:22
msgid ""
"Internally, to do this tracking, the writable bit is cleared from PTEs when "
"the soft-dirty bit is cleared. So, after this, when the task tries to modify "
"a page at some virtual address the #PF occurs and the kernel sets the soft-"
"dirty bit on the respective PTE."
msgstr ""

#: ../../../admin-guide/mm/soft-dirty.rst:27
msgid ""
"Note, that although all the task's address space is marked as r/o after the "
"soft-dirty bits clear, the #PF-s that occur after that are processed fast. "
"This is so, since the pages are still mapped to physical memory, and thus "
"all the kernel does is finds this fact out and puts both writable and soft-"
"dirty bits on the PTE."
msgstr ""

#: ../../../admin-guide/mm/soft-dirty.rst:33
msgid ""
"While in most cases tracking memory changes by #PF-s is more than enough "
"there is still a scenario when we can lose soft dirty bits -- a task unmaps "
"a previously mapped memory region and then maps a new one at exactly the "
"same place. When unmap is called, the kernel internally clears PTE values "
"including soft dirty bits. To notify user space application about such "
"memory region renewal the kernel always marks new memory regions (and "
"expanded regions) as soft dirty."
msgstr ""

#: ../../../admin-guide/mm/soft-dirty.rst:41
msgid ""
"This feature is actively used by the checkpoint-restore project. You can "
"find more details about it on http://criu.org"
msgstr ""

#: ../../../admin-guide/mm/soft-dirty.rst:45
msgid "-- Pavel Emelyanov, Apr 9, 2013"
msgstr ""
