# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../admin-guide/bootconfig.rst:7
msgid "Boot Configuration"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:0
msgid "Author"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:9
msgid "Masami Hiramatsu <mhiramat@kernel.org>"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:12
msgid "Overview"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:14
msgid ""
"The boot configuration expands the current kernel command line to support "
"additional key-value data when booting the kernel in an efficient way. This "
"allows administrators to pass a structured-Key config file."
msgstr ""

#: ../../../admin-guide/bootconfig.rst:19
msgid "Config File Syntax"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:21
msgid ""
"The boot config syntax is a simple structured key-value. Each key consists "
"of dot-connected-words, and key and value are connected by ``=``. The value "
"has to be terminated by semi-colon (``;``) or newline (``\\n``). For array "
"value, array entries are separated by comma (``,``). ::"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:28
msgid ""
"Unlike the kernel command line syntax, spaces are OK around the comma and "
"``=``."
msgstr ""

#: ../../../admin-guide/bootconfig.rst:30
msgid ""
"Each key word must contain only alphabets, numbers, dash (``-``) or "
"underscore (``_``). And each value only contains printable characters or "
"spaces except for delimiters such as semi-colon (``;``), new-line (``\\n``), "
"comma (``,``), hash (``#``) and closing brace (``}``)."
msgstr ""

#: ../../../admin-guide/bootconfig.rst:35
msgid ""
"If you want to use those delimiters in a value, you can use either double- "
"quotes (``\"VALUE\"``) or single-quotes (``'VALUE'``) to quote it. Note that "
"you can not escape these quotes."
msgstr ""

#: ../../../admin-guide/bootconfig.rst:39
msgid ""
"There can be a key which doesn't have value or has an empty value. Those "
"keys are used for checking if the key exists or not (like a boolean)."
msgstr ""

#: ../../../admin-guide/bootconfig.rst:43
msgid "Key-Value Syntax"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:45
msgid ""
"The boot config file syntax allows user to merge partially same word keys by "
"brace. For example::"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:51
msgid "These can be written also in::"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:58
msgid "Or more shorter, written as following::"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:62
msgid ""
"In both styles, same key words are automatically merged when parsing it at "
"boot time. So you can append similar trees or key-values."
msgstr ""

#: ../../../admin-guide/bootconfig.rst:66
msgid "Same-key Values"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:68
msgid ""
"It is prohibited that two or more values or arrays share a same-key. For "
"example,::"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:74
msgid ""
"If you want to update the value, you must use the override operator ``:=`` "
"explicitly. For example::"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:80
msgid ""
"then, the ``qux`` is assigned to ``foo`` key. This is useful for overriding "
"the default value by adding (partial) custom bootconfigs without parsing the "
"default bootconfig."
msgstr ""

#: ../../../admin-guide/bootconfig.rst:84
msgid ""
"If you want to append the value to existing key as an array member, you can "
"use ``+=`` operator. For example::"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:90
msgid "In this case, the key ``foo`` has ``bar``, ``baz`` and ``qux``."
msgstr ""

#: ../../../admin-guide/bootconfig.rst:92
msgid ""
"Moreover, sub-keys and a value can coexist under a parent key. For example, "
"following config is allowed.::"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:99
msgid ""
"Note, since there is no syntax to put a raw value directly under a "
"structured key, you have to define it outside of the brace. For example::"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:110
msgid ""
"Also, the order of the value node under a key is fixed. If there are a value "
"and subkeys, the value is always the first child node of the key. Thus if "
"user specifies subkeys first, e.g.::"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:117
msgid "In the program (and /proc/bootconfig), it will be shown as below::"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:123
msgid "Comments"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:125
msgid ""
"The config syntax accepts shell-script style comments. The comments starting "
"with hash (\"#\") until newline (\"\\n\") will be ignored."
msgstr ""

#: ../../../admin-guide/bootconfig.rst:136
msgid "This is parsed as below::"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:141
msgid ""
"Note that you can not put a comment between value and delimiter(``,`` or ``;"
"``). This means following config has a syntax error ::"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:149
msgid "/proc/bootconfig"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:151
msgid ""
"/proc/bootconfig is a user-space interface of the boot config. Unlike /proc/"
"cmdline, this file shows the key-value style list. Each key-value pair is "
"shown in each line with following style::"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:159
msgid "Boot Kernel With a Boot Config"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:161
msgid ""
"There are two options to boot the kernel with bootconfig: attaching the "
"bootconfig to the initrd image or embedding it in the kernel itself."
msgstr ""

#: ../../../admin-guide/bootconfig.rst:165
msgid "Attaching a Boot Config to Initrd"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:167
msgid ""
"Since the boot configuration file is loaded with initrd by default, it will "
"be added to the end of the initrd (initramfs) image file with padding, size, "
"checksum and 12-byte magic word as below."
msgstr ""

#: ../../../admin-guide/bootconfig.rst:171
msgid ""
"[initrd][bootconfig][padding][size(le32)][checksum(le32)][#BOOTCONFIG\\n]"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:173
msgid "The size and checksum fields are unsigned 32bit little endian value."
msgstr ""

#: ../../../admin-guide/bootconfig.rst:175
msgid ""
"When the boot configuration is added to the initrd image, the total file "
"size is aligned to 4 bytes. To fill the gap, null characters (``\\0``) will "
"be added. Thus the ``size`` is the length of the bootconfig file + padding "
"bytes."
msgstr ""

#: ../../../admin-guide/bootconfig.rst:180
msgid ""
"The Linux kernel decodes the last part of the initrd image in memory to get "
"the boot configuration data. Because of this \"piggyback\" method, there is "
"no need to change or update the boot loader and the kernel image itself as "
"long as the boot loader passes the correct initrd file size. If by any "
"chance, the boot loader passes a longer size, the kernel fails to find the "
"bootconfig data."
msgstr ""

#: ../../../admin-guide/bootconfig.rst:187
msgid ""
"To do this operation, Linux kernel provides ``bootconfig`` command under "
"tools/bootconfig, which allows admin to apply or delete the config file to/"
"from initrd image. You can build it by the following command::"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:193
msgid ""
"To add your boot config file to initrd image, run bootconfig as below (Old "
"data is removed automatically if exists)::"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:198
msgid "To remove the config from the image, you can use -d option as below::"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:202
msgid ""
"Then add \"bootconfig\" on the normal kernel command line to tell the kernel "
"to look for the bootconfig at the end of the initrd file. Alternatively, "
"build your kernel with the ``CONFIG_BOOT_CONFIG_FORCE`` Kconfig option "
"selected."
msgstr ""

#: ../../../admin-guide/bootconfig.rst:208
msgid "Embedding a Boot Config into Kernel"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:210
msgid ""
"If you can not use initrd, you can also embed the bootconfig file in the "
"kernel by Kconfig options. In this case, you need to recompile the kernel "
"with the following configs::"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:217
msgid ""
"``CONFIG_BOOT_CONFIG_EMBED_FILE`` requires an absolute path or a relative "
"path to the bootconfig file from source tree or object tree. The kernel will "
"embed it as the default bootconfig."
msgstr ""

#: ../../../admin-guide/bootconfig.rst:221
msgid ""
"Just as when attaching the bootconfig to the initrd, you need ``bootconfig`` "
"option on the kernel command line to enable the embedded bootconfig, or, "
"alternatively, build your kernel with the ``CONFIG_BOOT_CONFIG_FORCE`` "
"Kconfig option selected."
msgstr ""

#: ../../../admin-guide/bootconfig.rst:226
msgid ""
"Note that even if you set this option, you can override the embedded "
"bootconfig by another bootconfig which attached to the initrd."
msgstr ""

#: ../../../admin-guide/bootconfig.rst:230
msgid "Kernel parameters via Boot Config"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:232
msgid ""
"In addition to the kernel command line, the boot config can be used for "
"passing the kernel parameters. All the key-value pairs under ``kernel`` key "
"will be passed to kernel cmdline directly. Moreover, the key-value pairs "
"under ``init`` will be passed to init process via the cmdline. The "
"parameters are concatenated with user-given kernel cmdline string as the "
"following order, so that the command line parameter can override bootconfig "
"parameters (this depends on how the subsystem handles parameters but in "
"general, earlier parameter will be overwritten by later one.)::"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:243
msgid "Here is an example of the bootconfig file for kernel/init parameters.::"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:252
msgid "This will be copied into the kernel cmdline string as the following::"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:256
msgid "If user gives some other command line like,::"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:260
msgid "The final kernel cmdline will be the following::"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:266
msgid "Config File Limitation"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:268
msgid ""
"Currently the maximum config size is 32KB and the total key-words (not key-"
"value entries) must be under 1024 nodes. Note: this is not the number of "
"entries but nodes, an entry must consume more than 2 nodes (a key-word and a "
"value). So theoretically, it will be up to 512 key-value pairs. If keys "
"contains 3 words in average, it can contain 256 key-value pairs. In most "
"cases, the number of config items will be under 100 entries and smaller than "
"8KB, so it would be enough. If the node number exceeds 1024, parser returns "
"an error even if the file size is smaller than 32KB. (Note that this maximum "
"size is not including the padding null characters.) Anyway, since bootconfig "
"command verifies it when appending a boot config to initrd image, user can "
"notice it before boot."
msgstr ""

#: ../../../admin-guide/bootconfig.rst:283
msgid "Bootconfig APIs"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:285
msgid ""
"User can query or loop on key-value pairs, also it is possible to find a "
"root (prefix) key node and find key-values under that node."
msgstr ""

#: ../../../admin-guide/bootconfig.rst:288
msgid ""
"If you have a key string, you can query the value directly with the key "
"using xbc_find_value(). If you want to know what keys exist in the boot "
"config, you can use xbc_for_each_key_value() to iterate key-value pairs. "
"Note that you need to use xbc_array_for_each_value() for accessing each "
"array's value, e.g.::"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:301
msgid ""
"If you want to focus on keys which have a prefix string, you can use "
"xbc_find_node() to find a node by the prefix string, and iterate keys under "
"the prefix node with xbc_node_for_each_key_value()."
msgstr ""

#: ../../../admin-guide/bootconfig.rst:305
msgid ""
"But the most typical usage is to get the named value under prefix or get the "
"named array under prefix as below::"
msgstr ""

#: ../../../admin-guide/bootconfig.rst:315
msgid ""
"This accesses a value of \"key.prefix.option\" and an array of \"key.prefix."
"array-option\"."
msgstr ""

#: ../../../admin-guide/bootconfig.rst:318
msgid ""
"Locking is not needed, since after initialization, the config becomes read-"
"only. All data and keys must be copied if you need to modify it."
msgstr ""

#: ../../../admin-guide/bootconfig.rst:323
msgid "Functions and structures"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:31
msgid "Calculate checksum of bootconfig"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:35
#: include/linux/bootconfig.h:80 include/linux/bootconfig.h:91
#: include/linux/bootconfig.h:102 include/linux/bootconfig.h:113
#: include/linux/bootconfig.h:142 include/linux/bootconfig.h:158
#: include/linux/bootconfig.h:170 include/linux/bootconfig.h:187
#: include/linux/bootconfig.h:201 include/linux/bootconfig.h:213
#: include/linux/bootconfig.h:225 include/linux/bootconfig.h:245
#: include/linux/bootconfig.h:258 include/linux/bootconfig.h:273
#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:87
#: lib/bootconfig.c:116 lib/bootconfig.c:130 lib/bootconfig.c:141
#: lib/bootconfig.c:153 lib/bootconfig.c:165 lib/bootconfig.c:179
#: lib/bootconfig.c:215 lib/bootconfig.c:246 lib/bootconfig.c:280
#: lib/bootconfig.c:336 lib/bootconfig.c:386 lib/bootconfig.c:906
#: lib/bootconfig.c:925
msgid "**Parameters**"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:37
msgid "``void *data``"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:32
msgid "Bootconfig data."
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:34
msgid "``uint32_t size``"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:33
msgid "The size of the bootconfig data."
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:35
#: include/linux/bootconfig.h:79 include/linux/bootconfig.h:90
#: include/linux/bootconfig.h:101 include/linux/bootconfig.h:112
#: include/linux/bootconfig.h:142 include/linux/bootconfig.h:157
#: include/linux/bootconfig.h:169 include/linux/bootconfig.h:187
#: include/linux/bootconfig.h:201 include/linux/bootconfig.h:213
#: include/linux/bootconfig.h:227 include/linux/bootconfig.h:246
#: include/linux/bootconfig.h:258 include/linux/bootconfig.h:274
#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:3 lib/bootconfig.c:87
#: lib/bootconfig.c:129 lib/bootconfig.c:140 lib/bootconfig.c:152
#: lib/bootconfig.c:164 lib/bootconfig.c:178 lib/bootconfig.c:215
#: lib/bootconfig.c:247 lib/bootconfig.c:282 lib/bootconfig.c:336
#: lib/bootconfig.c:386 lib/bootconfig.c:905 lib/bootconfig.c:927
msgid "**Description**"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:34
msgid ""
"Calculate the checksum value of the bootconfig data. The checksum will be "
"used with the BOOTCONFIG_MAGIC and the size for embedding the bootconfig in "
"the initrd image."
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:76
msgid "Test the node is a value node"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:82
#: include/linux/bootconfig.h:93 include/linux/bootconfig.h:104
#: include/linux/bootconfig.h:115 include/linux/bootconfig.h:172
#: include/linux/bootconfig.h:275 ../../../admin-guide/bootconfig:326:
#: lib/bootconfig.c:132 lib/bootconfig.c:143 lib/bootconfig.c:155
#: lib/bootconfig.c:167 lib/bootconfig.c:181 lib/bootconfig.c:279
#: lib/bootconfig.c:335
msgid "``struct xbc_node *node``"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:77
#: include/linux/bootconfig.h:88 include/linux/bootconfig.h:99
#: include/linux/bootconfig.h:110 include/linux/bootconfig.h:198
#: include/linux/bootconfig.h:210 include/linux/bootconfig.h:222
#: include/linux/bootconfig.h:242 include/linux/bootconfig.h:270
#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:138
#: lib/bootconfig.c:150 lib/bootconfig.c:162 lib/bootconfig.c:176
#: lib/bootconfig.c:212 lib/bootconfig.c:243
msgid "An XBC node."
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:78
msgid ""
"Test the **node** is a value node and return true if a value node, false if "
"not."
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:87
msgid "Test the node is a key node"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:89
msgid ""
"Test the **node** is a key node and return true if a key node, false if not."
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:98
msgid "Test the node is an arraied value node"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:100
msgid "Test the **node** is an arraied value node."
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:109
msgid "Test the node is a leaf key node"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:111
msgid ""
"Test the **node** is a leaf key node which is a key node and has a value "
"node or no child. Returns true if it is a leaf node, or false if not. Note "
"that the leaf node can have subkey nodes in addition to the value node."
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:138
msgid "Find a value which matches the key"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:144
#: include/linux/bootconfig.h:160 ../../../admin-guide/bootconfig:326:
#: lib/bootconfig.c:214 lib/bootconfig.c:245
msgid "``const char *key``"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:139
#: include/linux/bootconfig.h:155
msgid "Search key"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:141
#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:246
msgid "``struct xbc_node **vnode``"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:140
msgid "A container pointer of XBC value node."
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:141
msgid ""
"Search a value whose key matches **key** from whole of XBC tree and return "
"the value if found. Found value node is stored in ***vnode**. Note that this "
"can return 0-length string and store NULL in ***vnode** for key-only (non-"
"value) entry."
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:154
msgid "Find a node which matches the key"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:156
msgid ""
"Search a (key) node whose key matches **key** from whole of XBC tree and "
"return the node if found. If not found, returns NULL."
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:166
msgid "Return the first subkey node if exists"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:167
msgid "Parent node"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:168
msgid ""
"Return the first subkey node of the **node**. If the **node** has no child "
"or only value node, this will return NULL."
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:185
msgid "``xbc_array_for_each_value (anode, value)``"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:183
msgid "Iterate value nodes on an array"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:189
#: include/linux/bootconfig.h:225
msgid "``anode``"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:184
msgid "An XBC arraied value node"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:186
#: include/linux/bootconfig.h:226 include/linux/bootconfig.h:245
#: include/linux/bootconfig.h:257
msgid "``value``"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:185
msgid "A value"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:186
msgid ""
"Iterate array value nodes and values starts from **anode**. This is expected "
"to be used with xbc_find_value() and xbc_node_find_value(), so that user can "
"process each array entry node."
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:199
msgid "``xbc_node_for_each_child (parent, child)``"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:197
msgid "Iterate child nodes"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:203
#: include/linux/bootconfig.h:215
msgid "``parent``"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:200
#: include/linux/bootconfig.h:212
msgid "``child``"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:199
#: include/linux/bootconfig.h:211
msgid "Iterated XBC node."
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:200
msgid ""
"Iterate child nodes of **parent**. Each child nodes are stored to **child**. "
"The **child** can be mixture of a value node and subkey nodes."
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:211
msgid "``xbc_node_for_each_subkey (parent, child)``"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:209
msgid "Iterate child subkey nodes"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:212
msgid ""
"Iterate subkey nodes of **parent**. Each child nodes are stored to "
"**child**. The **child** is only the subkey node."
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:223
msgid "``xbc_node_for_each_array_value (node, key, anode, value)``"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:221
msgid "Iterate array entries of geven key"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:227
#: include/linux/bootconfig.h:247
msgid "``node``"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:224
msgid "``key``"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:223
msgid "A key string searched under **node**"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:224
msgid "Iterated XBC node of array entry."
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:225
msgid "Iterated value of array entry."
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:226
msgid ""
"Iterate array entries of given **key** under **node**. Each array entry node "
"is stored to **anode** and **value**. If the **node** doesn't have **key** "
"node, it does nothing. Note that even if the found key node has only one "
"value (not array) this executes block once. However, if the found key node "
"has no value (key-only node), this does nothing. So don't use this for "
"testing the key-value pair existence."
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:243
msgid "``xbc_node_for_each_key_value (node, knode, value)``"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:241
msgid "Iterate key-value pairs under a node"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:244
#: include/linux/bootconfig.h:260
msgid "``knode``"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:243
#: include/linux/bootconfig.h:255
msgid "Iterated key node"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:244
#: include/linux/bootconfig.h:256
msgid "Iterated value string"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:245
msgid ""
"Iterate key-value pairs under **node**. Each key node and value string are "
"stored in **knode** and **value** respectively."
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:256
msgid "``xbc_for_each_key_value (knode, value)``"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:254
msgid "Iterate key-value pairs"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:257
msgid ""
"Iterate key-value pairs in whole XBC tree. Each key node and value string "
"are stored in **knode** and **value** respectively."
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:269
msgid "Compose full key string of the XBC node"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:272
#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:280
msgid "``char *buf``"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:271
#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:279
msgid "A buffer to store the key."
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:273
#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:281
#: lib/bootconfig.c:924
msgid "``size_t size``"
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:272
#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:280
msgid "The size of the **buf**."
msgstr ""

#: ../../../admin-guide/bootconfig:325: include/linux/bootconfig.h:273
msgid ""
"Compose the full-length key of the **node** into **buf**. Returns the total "
"length of the key stored in **buf**. Or returns -EINVAL if **node** is NULL, "
"and -ERANGE if the key depth is deeper than max depth."
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:83
msgid "Get the information of loaded boot config"
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:89
msgid "``int *node_size``"
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:84
msgid "A pointer to store the number of nodes."
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:86
msgid "``size_t *data_size``"
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:85
msgid "A pointer to store the size of bootconfig data."
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:86
msgid ""
"Get the number of used nodes in **node_size** if it is not NULL, and the "
"size of bootconfig data in **data_size** if it is not NULL. Return 0 if the "
"boot config is initialized, or return -ENODEV."
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:112
msgid "Get the root node of extended boot config"
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:118
msgid "``void``"
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:1
msgid "no arguments"
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:113
msgid ""
"Return the address of root node of extended boot config. If the extended "
"boot config is not initiized, return NULL."
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:126
msgid "Get the index of XBC node"
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:127
msgid "A target node of getting index."
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:128
msgid "Return the index number of **node** in XBC node list."
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:137
msgid "Get the parent XBC node"
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:139
msgid ""
"Return the parent node of **node**. If the node is top node of the tree, "
"return NULL."
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:149
msgid "Get the child XBC node"
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:151
msgid ""
"Return the first child node of **node**. If the node has no child, return "
"NULL."
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:161
msgid "Get the next sibling XBC node"
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:163
msgid ""
"Return the NEXT sibling node of **node**. If the node has no next sibling, "
"return NULL. Note that even if this returns NULL, it doesn't mean **node** "
"has no siblings. (You also has to check whether the parent's child node is "
"**node** or not.)"
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:175
msgid "Get the data of XBC node"
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:177
msgid ""
"Return the data (which is always a null terminated string) of **node**. If "
"the node has invalid data, warn and return NULL."
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:211
msgid "Find a subkey node which matches given key"
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:217
#: lib/bootconfig.c:248
msgid "``struct xbc_node *parent``"
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:213
#: lib/bootconfig.c:244
msgid "A key string."
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:214
msgid ""
"Search a key node under **parent** which matches **key**. The **key** can "
"contain several words jointed with '.'. If **parent** is NULL, this searches "
"the node from whole tree. Return NULL if no node is matched."
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:242
msgid "Find a value node which matches given key"
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:245
msgid "A container pointer of found XBC node."
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:246
msgid ""
"Search a value node under **parent** whose (parent) key node matches "
"**key**, store it in ***vnode**, and returns the value string. The **key** "
"can contain several words jointed with '.'. If **parent** is NULL, this "
"searches the node from whole tree. Return the value string if a matched key "
"found, return NULL if no node is matched. Note that this returns 0-length "
"string and stores NULL in ***vnode** if the key has no value. And also it "
"will return the value of the first entry if the value is an array."
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:276
msgid "Compose partial key string of the XBC node"
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:282
#: lib/bootconfig.c:338 lib/bootconfig.c:388
msgid "``struct xbc_node *root``"
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:277
msgid "Root XBC node"
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:278
msgid "Target XBC node."
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:281
msgid ""
"Compose the partial key of the **node** into **buf**, which is starting "
"right after **root** (**root** is not included.) If **root** is NULL, this "
"returns full key words of **node**. Returns the total length of the key "
"stored in **buf**. Returns -EINVAL if **node** is NULL or **root** is not "
"the ancestor of **node** or **root** is **node**, or returns -ERANGE if the "
"key depth is deeper than max depth. This is expected to be used with "
"xbc_find_node() to list up all (child) keys under given key."
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:332
msgid "Find the next leaf node under given node"
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:333
#: lib/bootconfig.c:383
msgid "An XBC root node"
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:334
msgid "An XBC node which starts from."
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:335
msgid ""
"Search the next leaf node (which means the terminal key node) of **node** "
"under **root** node (including **root** node itself). Return the next node "
"or NULL if next leaf node is not found."
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:382
msgid "Find the next key-value pair nodes"
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:385
msgid "``struct xbc_node **leaf``"
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:384
msgid "A container pointer of XBC node which starts from."
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:385
msgid ""
"Search the next leaf node (which means the terminal key node) of ***leaf** "
"under **root** node. Returns the value and update ***leaf** if next leaf "
"node is found, or NULL if no next leaf node is found. Note that this returns "
"0-length string if the key has no value, or the value of the first entry if "
"the value is an array."
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:902
msgid "Clean up all parsed bootconfig"
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:908
msgid "``bool early``"
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:903
msgid "Set true if this is called before budy system is initialized."
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:904
msgid ""
"This clears all data structures of parsed bootconfig on memory. If you need "
"to reuse xbc_init() with new boot config, you can use this."
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:921
msgid "Parse given XBC file and build XBC internal tree"
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:927
msgid "``const char *data``"
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:922
msgid "The boot config text original data"
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:923
msgid "The size of **data**"
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:925
msgid "``const char **emsg``"
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:924
msgid "A pointer of const char * to store the error message"
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:926
msgid "``int *epos``"
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:925
msgid "A pointer of int to store the error position"
msgstr ""

#: ../../../admin-guide/bootconfig:326: lib/bootconfig.c:926
msgid ""
"This parses the boot config text in **data**. **size** must be smaller than "
"XBC_DATA_MAX. Return the number of stored nodes (>0) if succeeded, or -errno "
"if there is any error. In error cases, **emsg** will be updated with an "
"error message and **epos** will be updated with the error position which is "
"the byte offset of **buf**. If the error is not a parser error, **epos** "
"will be -1."
msgstr ""
