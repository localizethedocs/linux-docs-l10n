# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../admin-guide/bug-hunting.rst:2
msgid "Bug hunting"
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:4
msgid "Kernel bug reports often come with a stack dump like the one below::"
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:40
msgid ""
"Such stack traces provide enough information to identify the line inside the "
"Kernel's source code where the bug happened. Depending on the severity of "
"the issue, it may also contain the word **Oops**, as on this one::"
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:50
msgid ""
"Despite being an **Oops** or some other sort of stack trace, the offended "
"line is usually required to identify and handle the bug. Along this chapter, "
"we'll refer to \"Oops\" for all kinds of stack traces that need to be "
"analyzed."
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:54
msgid ""
"If the kernel is compiled with ``CONFIG_DEBUG_INFO``, you can enhance the "
"quality of the stack trace by using file:`scripts/decode_stacktrace.sh`."
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:58
msgid "Modules linked in"
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:60
msgid ""
"Modules that are tainted or are being loaded or unloaded are marked with "
"\"(...)\", where the taint flags are described in file:`Documentation/admin-"
"guide/tainted-kernels.rst`, \"being loaded\" is annotated with \"+\", and "
"\"being unloaded\" is annotated with \"-\"."
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:67
msgid "Where is the Oops message is located?"
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:69
msgid ""
"Normally the Oops text is read from the kernel buffers by klogd and handed "
"to ``syslogd`` which writes it to a syslog file, typically ``/var/log/"
"messages`` (depends on ``/etc/syslog.conf``). On systems with systemd, it "
"may also be stored by the ``journald`` daemon, and accessed by running "
"``journalctl`` command."
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:75
msgid ""
"Sometimes ``klogd`` dies, in which case you can run ``dmesg > file`` to read "
"the data from the kernel buffers and save it.  Or you can ``cat /proc/kmsg > "
"file``, however you have to break in to stop the transfer, since ``kmsg`` is "
"a \"never ending file\"."
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:80
msgid ""
"If the machine has crashed so badly that you cannot enter commands or the "
"disk is not available then you have three options:"
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:83
msgid ""
"Hand copy the text from the screen and type it in after the machine has "
"restarted.  Messy but it is the only option if you have not planned for a "
"crash. Alternatively, you can take a picture of the screen with a digital "
"camera - not nice, but better than nothing.  If the messages scroll off the "
"top of the console, you may find that booting with a higher resolution (e."
"g., ``vga=791``) will allow you to read more of the text. (Caveat: This "
"needs ``vesafb``, so won't help for 'early' oopses.)"
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:92
msgid ""
"Boot with a serial console (see :ref:`Documentation/admin-guide/serial-"
"console.rst <serial_console>`), run a null modem to a second machine and "
"capture the output there using your favourite communication program.  "
"Minicom works well."
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:97
msgid ""
"Use Kdump (see Documentation/admin-guide/kdump/kdump.rst), extract the "
"kernel ring buffer from old memory with using dmesg gdbmacro in "
"Documentation/admin-guide/kdump/gdbmacros.txt."
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:102
msgid "Finding the bug's location"
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:104
msgid ""
"Reporting a bug works best if you point the location of the bug at the "
"Kernel source file. There are two methods for doing that. Usually, using "
"``gdb`` is easier, but the Kernel should be pre-compiled with debug info."
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:109
msgid "gdb"
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:111
msgid ""
"The GNU debugger (``gdb``) is the best way to figure out the exact file and "
"line number of the OOPS from the ``vmlinux`` file."
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:114
msgid ""
"The usage of gdb works best on a kernel compiled with ``CONFIG_DEBUG_INFO``. "
"This can be set by running::"
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:119
msgid ""
"On a kernel compiled with ``CONFIG_DEBUG_INFO``, you can simply copy the EIP "
"value from the OOPS::"
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:124
msgid "And use GDB to translate that to human-readable form::"
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:129
msgid ""
"If you don't have ``CONFIG_DEBUG_INFO`` enabled, you use the function offset "
"from the OOPS::"
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:134
msgid "And recompile the kernel with ``CONFIG_DEBUG_INFO`` enabled::"
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:152
msgid "or, if you want to be more verbose::"
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:158
msgid "You could, instead, use the object file::"
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:164
msgid "If you have a call trace, such as::"
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:172
msgid ""
"this shows the problem likely is in the :jbd: module. You can load that "
"module in gdb and list the relevant code::"
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:180
msgid ""
"You can also do the same for any function call at the stack trace, like this "
"one::"
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:185
msgid "The position where the above call happened can be seen with::"
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:191
msgid "objdump"
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:193
msgid ""
"To debug a kernel, use objdump and look for the hex offset from the crash "
"output to find the valid line of code/assembler. Without debug symbols, you "
"will see the assembler code for the routine shown, but if your kernel has "
"debug symbols the C code will also be available. (Debug symbols can be "
"enabled in the kernel hacking menu of the menu configuration.) For example::"
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:203
msgid ""
"You need to be at the top level of the kernel tree for this to pick up your "
"C files."
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:206
msgid ""
"If you don't have access to the source code you can still debug some crash "
"dumps using the following method (example crash dump output as shown by Dave "
"Miller)::"
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:238
msgid ""
"file:`scripts/decodecode` can be used to automate most of this, depending on "
"what CPU architecture is being debugged."
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:242
msgid "Reporting the bug"
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:244
msgid ""
"Once you find where the bug happened, by inspecting its location, you could "
"either try to fix it yourself or report it upstream."
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:247
msgid ""
"In order to report it upstream, you should identify the bug tracker, if any, "
"or mailing list used for the development of the affected code. This can be "
"done by using the ``get_maintainer.pl`` script."
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:251
msgid ""
"For example, if you find a bug at the gspca's sonixj.c file, you can get its "
"maintainers with::"
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:262
msgid "Please notice that it will point to:"
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:264
msgid ""
"The last developers that touched the source code (if this is done inside a "
"git tree). On the above example, Tejun and Bhaktipriya (in this specific "
"case, none really involved on the development of this file);"
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:267
msgid "The driver maintainer (Hans Verkuil);"
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:268
msgid "The subsystem maintainer (Mauro Carvalho Chehab);"
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:269
msgid "The driver and/or subsystem mailing list (linux-media@vger.kernel.org);"
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:270
msgid "The Linux Kernel mailing list (linux-kernel@vger.kernel.org);"
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:271
msgid ""
"The bug reporting URIs for the driver/subsystem (none in the above example)."
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:273
msgid ""
"If the listing contains bug reporting URIs at the end, please prefer them "
"over email. Otherwise, please report bugs to the mailing list used for the "
"development of the code (linux-media ML) copying the driver maintainer "
"(Hans)."
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:277
msgid ""
"If you are totally stumped as to whom to send the report, and "
"``get_maintainer.pl`` didn't provide you anything useful, send it to linux-"
"kernel@vger.kernel.org."
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:281
msgid "Thanks for your help in making Linux as stable as humanly possible."
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:284
msgid "Fixing the bug"
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:286
msgid ""
"If you know programming, you could help us by not only reporting the bug, "
"but also providing us with a solution. After all, open source is about "
"sharing what you do and don't you want to be recognised for your genius?"
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:290
msgid ""
"If you decide to take this way, once you have worked out a fix please submit "
"it upstream."
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:293
msgid ""
"Please do read :ref:`Documentation/process/submitting-patches.rst "
"<submittingpatches>` though to help your code get accepted."
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:301
msgid "Notes on Oops tracing with ``klogd``"
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:303
msgid ""
"In order to help Linus and the other kernel developers there has been "
"substantial support incorporated into ``klogd`` for processing protection "
"faults.  In order to have full support for address resolution at least "
"version 1.3-pl3 of the ``sysklogd`` package should be used."
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:308
msgid ""
"When a protection fault occurs the ``klogd`` daemon automatically translates "
"important addresses in the kernel log messages to their symbolic "
"equivalents.  This translated kernel message is then forwarded through "
"whatever reporting mechanism ``klogd`` is using.  The protection fault "
"message can be simply cut out of the message files and forwarded to the "
"kernel developers."
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:315
msgid ""
"Two types of address resolution are performed by ``klogd``.  The first is "
"static translation and the second is dynamic translation. Static translation "
"uses the System.map file. In order to do static translation the ``klogd`` "
"daemon must be able to find a system map file at daemon initialization time. "
"See the klogd man page for information on how ``klogd`` searches for map "
"files."
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:323
msgid ""
"Dynamic address translation is important when kernel loadable modules are "
"being used.  Since memory for kernel modules is allocated from the kernel's "
"dynamic memory pools there are no fixed locations for either the start of "
"the module or for functions and symbols in the module."
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:328
msgid ""
"The kernel supports system calls which allow a program to determine which "
"modules are loaded and their location in memory.  Using these system calls "
"the klogd daemon builds a symbol table which can be used to debug a "
"protection fault which occurs in a loadable kernel module."
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:333
msgid ""
"At the very minimum klogd will provide the name of the module which "
"generated the protection fault.  There may be additional symbolic "
"information available if the developer of the loadable module chose to "
"export symbol information from the module."
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:338
msgid ""
"Since the kernel module environment can be dynamic there must be a mechanism "
"for notifying the ``klogd`` daemon when a change in module environment "
"occurs.  There are command line options available which allow klogd to "
"signal the currently executing daemon that symbol information should be "
"refreshed.  See the ``klogd`` manual page for more information."
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:345
msgid ""
"A patch is included with the sysklogd distribution which modifies the "
"``modules-2.0.0`` package to automatically signal klogd whenever a module is "
"loaded or unloaded.  Applying this patch provides essentially seamless "
"support for debugging protection faults which occur with kernel loadable "
"modules."
msgstr ""

#: ../../../admin-guide/bug-hunting.rst:351
msgid ""
"The following is an example of a protection fault in a loadable module "
"processed by ``klogd``::"
msgstr ""
