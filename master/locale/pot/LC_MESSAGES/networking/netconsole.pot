# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../networking/netconsole.rst:5
msgid "Netconsole"
msgstr ""

#: ../../../networking/netconsole.rst:8
msgid "started by Ingo Molnar <mingo@redhat.com>, 2001.09.17"
msgstr ""

#: ../../../networking/netconsole.rst:10
msgid "2.6 port and netpoll api by Matt Mackall <mpm@selenic.com>, Sep 9 2003"
msgstr ""

#: ../../../networking/netconsole.rst:12
msgid "IPv6 support by Cong Wang <xiyou.wangcong@gmail.com>, Jan 1 2013"
msgstr ""

#: ../../../networking/netconsole.rst:14
msgid "Extended console support by Tejun Heo <tj@kernel.org>, May 1 2015"
msgstr ""

#: ../../../networking/netconsole.rst:16
msgid "Release prepend support by Breno Leitao <leitao@debian.org>, Jul 7 2023"
msgstr ""

#: ../../../networking/netconsole.rst:18
msgid ""
"Userdata append support by Matthew Wood <thepacketgeek@gmail.com>, Jan 22 "
"2024"
msgstr ""

#: ../../../networking/netconsole.rst:20
msgid "Sysdata append support by Breno Leitao <leitao@debian.org>, Jan 15 2025"
msgstr ""

#: ../../../networking/netconsole.rst:22
msgid ""
"Please send bug reports to Matt Mackall <mpm@selenic.com> Satyam Sharma "
"<satyam.sharma@gmail.com>, and Cong Wang <xiyou.wangcong@gmail.com>"
msgstr ""

#: ../../../networking/netconsole.rst:26
msgid "Introduction:"
msgstr ""

#: ../../../networking/netconsole.rst:28
msgid ""
"This module logs kernel printk messages over UDP allowing debugging of "
"problem where disk logging fails and serial consoles are impractical."
msgstr ""

#: ../../../networking/netconsole.rst:31
msgid ""
"It can be used either built-in or as a module. As a built-in, netconsole "
"initializes immediately after NIC cards and will bring up the specified "
"interface as soon as possible. While this doesn't allow capture of early "
"kernel panics, it does capture most of the boot process."
msgstr ""

#: ../../../networking/netconsole.rst:38
msgid "Sender and receiver configuration:"
msgstr ""

#: ../../../networking/netconsole.rst:40
msgid ""
"It takes a string configuration parameter \"netconsole\" in the following "
"format::"
msgstr ""

#: ../../../networking/netconsole.rst:55
msgid "Examples::"
msgstr ""

#: ../../../networking/netconsole.rst:59
msgid "or::"
msgstr ""

#: ../../../networking/netconsole.rst:63
msgid "or using IPv6::"
msgstr ""

#: ../../../networking/netconsole.rst:67
msgid "or using a MAC address to select the egress interface::"
msgstr ""

#: ../../../networking/netconsole.rst:71
msgid ""
"It also supports logging to multiple remote agents by specifying parameters "
"for the multiple agents separated by semicolons and the complete string "
"enclosed in \"quotes\", thusly::"
msgstr ""

#: ../../../networking/netconsole.rst:77
msgid ""
"Built-in netconsole starts immediately after the TCP stack is initialized "
"and attempts to bring up the supplied dev at the supplied address."
msgstr ""

#: ../../../networking/netconsole.rst:81
msgid ""
"The remote host has several options to receive the kernel messages, for "
"example:"
msgstr ""

#: ../../../networking/netconsole.rst:84
msgid "syslogd"
msgstr ""

#: ../../../networking/netconsole.rst:86
msgid "netcat"
msgstr ""

#: ../../../networking/netconsole.rst:88
msgid ""
"On distributions using a BSD-based netcat version (e.g. Fedora, openSUSE and "
"Ubuntu) the listening port must be specified without the -p switch::"
msgstr ""

#: ../../../networking/netconsole.rst:98
msgid "socat"
msgstr ""

#: ../../../networking/netconsole.rst:105
msgid "Dynamic reconfiguration:"
msgstr ""

#: ../../../networking/netconsole.rst:107
msgid ""
"Dynamic reconfigurability is a useful addition to netconsole that enables "
"remote logging targets to be dynamically added, removed, or have their "
"parameters reconfigured at runtime from a configfs-based userspace interface."
msgstr ""

#: ../../../networking/netconsole.rst:111
msgid ""
"To include this feature, select CONFIG_NETCONSOLE_DYNAMIC when building the "
"netconsole module (or kernel, if netconsole is built-in)."
msgstr ""

#: ../../../networking/netconsole.rst:114
msgid ""
"Some examples follow (where configfs is mounted at the /sys/kernel/config "
"mountpoint)."
msgstr ""

#: ../../../networking/netconsole.rst:117
msgid "To add a remote logging target (target names can be arbitrary)::"
msgstr ""

#: ../../../networking/netconsole.rst:122
msgid ""
"Note that newly created targets have default parameter values (as mentioned "
"above) and are disabled by default -- they must first be enabled by writing "
"\"1\" to the \"enabled\" attribute (usually after setting parameters "
"accordingly) as described below."
msgstr ""

#: ../../../networking/netconsole.rst:127
msgid "To remove a target::"
msgstr ""

#: ../../../networking/netconsole.rst:131
msgid ""
"The interface exposes these parameters of a netconsole target to userspace:"
msgstr ""

#: ../../../networking/netconsole.rst:134
msgid "enabled"
msgstr ""

#: ../../../networking/netconsole.rst:134
msgid "Is this target currently enabled?"
msgstr ""

#: ../../../networking/netconsole.rst:134
#: ../../../networking/netconsole.rst:135
#: ../../../networking/netconsole.rst:136
#: ../../../networking/netconsole.rst:137
#: ../../../networking/netconsole.rst:138
#: ../../../networking/netconsole.rst:139
#: ../../../networking/netconsole.rst:140
#: ../../../networking/netconsole.rst:141
#: ../../../networking/netconsole.rst:143
msgid "(read-write)"
msgstr ""

#: ../../../networking/netconsole.rst:135
msgid "extended"
msgstr ""

#: ../../../networking/netconsole.rst:135
msgid "Extended mode enabled"
msgstr ""

#: ../../../networking/netconsole.rst:136
msgid "release"
msgstr ""

#: ../../../networking/netconsole.rst:136
msgid "Prepend kernel release to message"
msgstr ""

#: ../../../networking/netconsole.rst:137
msgid "dev_name"
msgstr ""

#: ../../../networking/netconsole.rst:137
msgid "Local network interface name"
msgstr ""

#: ../../../networking/netconsole.rst:138
msgid "local_port"
msgstr ""

#: ../../../networking/netconsole.rst:138
msgid "Source UDP port to use"
msgstr ""

#: ../../../networking/netconsole.rst:139
msgid "remote_port"
msgstr ""

#: ../../../networking/netconsole.rst:139
msgid "Remote agent's UDP port"
msgstr ""

#: ../../../networking/netconsole.rst:140
msgid "local_ip"
msgstr ""

#: ../../../networking/netconsole.rst:140
msgid "Source IP address to use"
msgstr ""

#: ../../../networking/netconsole.rst:141
msgid "remote_ip"
msgstr ""

#: ../../../networking/netconsole.rst:141
msgid "Remote agent's IP address"
msgstr ""

#: ../../../networking/netconsole.rst:142
msgid "local_mac"
msgstr ""

#: ../../../networking/netconsole.rst:142
msgid "Local interface's MAC address"
msgstr ""

#: ../../../networking/netconsole.rst:142
#: ../../../networking/netconsole.rst:144
msgid "(read-only)"
msgstr ""

#: ../../../networking/netconsole.rst:143
msgid "remote_mac"
msgstr ""

#: ../../../networking/netconsole.rst:143
msgid "Remote agent's MAC address"
msgstr ""

#: ../../../networking/netconsole.rst:144
msgid "transmit_errors"
msgstr ""

#: ../../../networking/netconsole.rst:144
msgid "Number of packet send errors"
msgstr ""

#: ../../../networking/netconsole.rst:147
msgid ""
"The \"enabled\" attribute is also used to control whether the parameters of "
"a target can be updated or not -- you can modify the parameters of only "
"disabled targets (i.e. if \"enabled\" is 0)."
msgstr ""

#: ../../../networking/netconsole.rst:151
msgid "To update a target's parameters::"
msgstr ""

#: ../../../networking/netconsole.rst:160
msgid ""
"You can also update the local interface dynamically. This is especially "
"useful if you want to use interfaces that have newly come up (and may not "
"have existed when netconsole was loaded / initialized)."
msgstr ""

#: ../../../networking/netconsole.rst:164
msgid ""
"Netconsole targets defined at boot time (or module load time) with the "
"`netconsole=` param are assigned the name `cmdline<index>`.  For example, "
"the first target in the parameter is named `cmdline0`.  You can control and "
"modify these targets by creating configfs directories with the matching name."
msgstr ""

#: ../../../networking/netconsole.rst:169
msgid "Let's suppose you have two netconsole targets defined at boot time::"
msgstr ""

#: ../../../networking/netconsole.rst:173
msgid ""
"You can modify these targets in runtime by creating the following targets::"
msgstr ""

#: ../../../networking/netconsole.rst:184
msgid "Append User Data"
msgstr ""

#: ../../../networking/netconsole.rst:186
msgid ""
"Custom user data can be appended to the end of messages with netconsole "
"dynamic configuration enabled. User data entries can be modified without "
"changing the \"enabled\" attribute of a target."
msgstr ""

#: ../../../networking/netconsole.rst:190
msgid ""
"Directories (keys) under `userdata` are limited to 53 character length, and "
"data in `userdata/<key>/value` are limited to 200 bytes::"
msgstr ""

#: ../../../networking/netconsole.rst:200
msgid "Messages will now include this additional user data::"
msgstr ""

#: ../../../networking/netconsole.rst:204
msgid "Sends::"
msgstr ""

#: ../../../networking/netconsole.rst:210
msgid "Preview the userdata that will be appended with::"
msgstr ""

#: ../../../networking/netconsole.rst:215
msgid ""
"If a `userdata` entry is created but no data is written to the `value` file, "
"the entry will be omitted from netconsole messages::"
msgstr ""

#: ../../../networking/netconsole.rst:224
msgid "The `qux` key is omitted since it has no value::"
msgstr ""

#: ../../../networking/netconsole.rst:230
msgid "Delete `userdata` entries with `rmdir`::"
msgstr ""

#: ../../../networking/netconsole.rst:235
msgid ""
"When writing strings to user data values, input is broken up per line in "
"configfs store calls and this can cause confusing behavior::"
msgstr ""

#: ../../../networking/netconsole.rst:245
msgid "It is recommended to not write user data values with newlines."
msgstr ""

#: ../../../networking/netconsole.rst:248
msgid "Task name auto population in userdata"
msgstr ""

#: ../../../networking/netconsole.rst:250
msgid ""
"Inside the netconsole configfs hierarchy, there is a file called "
"`taskname_enabled` under the `userdata` directory. This file is used to "
"enable or disable the automatic task name population feature. This feature "
"automatically populates the current task name that is scheduled in the CPU "
"sneding the message."
msgstr ""

#: ../../../networking/netconsole.rst:256
msgid "To enable task name auto-population::"
msgstr ""

#: ../../../networking/netconsole.rst:260
msgid ""
"When this option is enabled, the netconsole messages will include an "
"additional line in the userdata field with the format `taskname=<task "
"name>`. This allows the receiver of the netconsole messages to easily find "
"which application was currently scheduled when that message was generated, "
"providing extra context for kernel messages and helping to categorize them."
msgstr ""

#: ../../../networking/netconsole.rst:266
#: ../../../networking/netconsole.rst:287
#: ../../../networking/netconsole.rst:318
#: ../../../networking/netconsole.rst:365
msgid "Example::"
msgstr ""

#: ../../../networking/netconsole.rst:272
msgid ""
"In this example, the message was generated while \"echo\" was the current "
"scheduled process."
msgstr ""

#: ../../../networking/netconsole.rst:276
msgid "Kernel release auto population in userdata"
msgstr ""

#: ../../../networking/netconsole.rst:278
msgid ""
"Within the netconsole configfs hierarchy, there is a file named "
"`release_enabled` located in the `userdata` directory. This file controls "
"the kernel release (version) auto-population feature, which appends the "
"kernel release information to userdata dictionary in every message sent."
msgstr ""

#: ../../../networking/netconsole.rst:283
msgid "To enable the release auto-population::"
msgstr ""

#: ../../../networking/netconsole.rst:295
msgid ""
"This feature provides the same data as the \"release prepend\" feature. "
"However, in this case, the release information is appended to the userdata "
"dictionary rather than being included in the message header."
msgstr ""

#: ../../../networking/netconsole.rst:301
msgid "CPU number auto population in userdata"
msgstr ""

#: ../../../networking/netconsole.rst:303
msgid ""
"Inside the netconsole configfs hierarchy, there is a file called `cpu_nr` "
"under the `userdata` directory. This file is used to enable or disable the "
"automatic CPU number population feature. This feature automatically "
"populates the CPU number that is sending the message."
msgstr ""

#: ../../../networking/netconsole.rst:308
msgid "To enable the CPU number auto-population::"
msgstr ""

#: ../../../networking/netconsole.rst:312
msgid ""
"When this option is enabled, the netconsole messages will include an "
"additional line in the userdata field with the format `cpu=<cpu_number>`. "
"This allows the receiver of the netconsole messages to easily differentiate "
"and demultiplex messages originating from different CPUs, which is "
"particularly useful when dealing with parallel log output."
msgstr ""

#: ../../../networking/netconsole.rst:324
msgid "In this example, the message was sent by CPU 42."
msgstr ""

#: ../../../networking/netconsole.rst:328
msgid ""
"If the user has set a conflicting `cpu` key in the userdata dictionary, both "
"keys will be reported, with the kernel-populated entry appearing after the "
"user one. For example::"
msgstr ""

#: ../../../networking/netconsole.rst:336
msgid "Output might look like::"
msgstr ""

#: ../../../networking/netconsole.rst:344
msgid "Message ID auto population in userdata"
msgstr ""

#: ../../../networking/netconsole.rst:346
msgid ""
"Within the netconsole configfs hierarchy, there is a file named "
"`msgid_enabled` located in the `userdata` directory. This file controls the "
"message ID auto-population feature, which assigns a numeric id to each "
"message sent to a given target and appends the ID to userdata dictionary in "
"every message sent."
msgstr ""

#: ../../../networking/netconsole.rst:351
msgid ""
"The message ID is generated using a per-target 32 bit counter that is "
"incremented for every message sent to the target. Note that this counter "
"will eventually wrap around after reaching uint32_t max value, so the "
"message ID is not globally unique over time. However, it can still be used "
"by the target to detect if messages were dropped before reaching the target "
"by identifying gaps in the sequence of IDs."
msgstr ""

#: ../../../networking/netconsole.rst:358
msgid ""
"It is important to distinguish message IDs from the message <sequnum> field. "
"Some kernel messages may never reach netconsole (for example, due to printk "
"rate limiting). Thus, a gap in <sequnum> cannot be solely relied upon to "
"indicate that a message was dropped during transmission, as it may never "
"have been sent via netconsole. The message ID, on the other hand, is only "
"assigned to messages that are actually transmitted via netconsole."
msgstr ""

#: ../../../networking/netconsole.rst:376
msgid "Extended console:"
msgstr ""

#: ../../../networking/netconsole.rst:378
msgid ""
"If '+' is prefixed to the configuration line or \"extended\" config file is "
"set to 1, extended console support is enabled. An example boot param "
"follows::"
msgstr ""

#: ../../../networking/netconsole.rst:384
msgid ""
"Log messages are transmitted with extended metadata header in the following "
"format which is the same as /dev/kmsg::"
msgstr ""

#: ../../../networking/netconsole.rst:389
msgid ""
"If 'r' (release) feature is enabled, the kernel release version is prepended "
"to the start of the message. Example::"
msgstr ""

#: ../../../networking/netconsole.rst:394
msgid ""
"Non printable characters in <message text> are escaped using \"\\xff\" "
"notation. If the message contains optional dictionary, verbatim newline is "
"used as the delimiter."
msgstr ""

#: ../../../networking/netconsole.rst:398
msgid ""
"If a message doesn't fit in certain number of bytes (currently 1000), the "
"message is split into multiple fragments by netconsole. These fragments are "
"transmitted with \"ncfrag\" header field added::"
msgstr ""

#: ../../../networking/netconsole.rst:404
msgid ""
"For example, assuming a lot smaller chunk size, a message \"the first chunk, "
"the 2nd chunk.\" may be split as follows::"
msgstr ""

#: ../../../networking/netconsole.rst:411
msgid "Miscellaneous notes:"
msgstr ""

#: ../../../networking/netconsole.rst:415
msgid ""
"the default target ethernet setting uses the broadcast ethernet address to "
"send packets, which can cause increased load on other systems on the same "
"ethernet segment."
msgstr ""

#: ../../../networking/netconsole.rst:421
msgid ""
"some LAN switches may be configured to suppress ethernet broadcasts so it is "
"advised to explicitly specify the remote agents' MAC addresses from the "
"config parameters passed to netconsole."
msgstr ""

#: ../../../networking/netconsole.rst:427
msgid "to find out the MAC address of, say, 10.0.0.2, you may try using::"
msgstr ""

#: ../../../networking/netconsole.rst:433
msgid ""
"in case the remote logging agent is on a separate LAN subnet than the "
"sender, it is suggested to try specifying the MAC address of the default "
"gateway (you may use /sbin/route -n to find it out) as the remote MAC "
"address instead."
msgstr ""

#: ../../../networking/netconsole.rst:440
msgid ""
"the network device (eth1 in the above case) can run any kind of other "
"network traffic, netconsole is not intrusive. Netconsole might cause slight "
"delays in other traffic if the volume of kernel messages is high, but should "
"have no other impact."
msgstr ""

#: ../../../networking/netconsole.rst:447
msgid ""
"if you find that the remote logging agent is not receiving or printing all "
"messages from the sender, it is likely that you have set the "
"\"console_loglevel\" parameter (on the sender) to only send high priority "
"messages to the console. You can change this at runtime using::"
msgstr ""

#: ../../../networking/netconsole.rst:454
msgid ""
"or by specifying \"debug\" on the kernel command line at boot, to send all "
"kernel messages to the console. A specific value for this parameter can also "
"be set using the \"loglevel\" kernel boot option. See the dmesg(8) man page "
"and Documentation/admin-guide/kernel-parameters.rst for details."
msgstr ""

#: ../../../networking/netconsole.rst:460
msgid ""
"Netconsole was designed to be as instantaneous as possible, to enable the "
"logging of even the most critical kernel bugs. It works from IRQ contexts as "
"well, and does not enable interrupts while sending packets. Due to these "
"unique needs, configuration cannot be more automatic, and some fundamental "
"limitations will remain: only IP networks, UDP packets and ethernet devices "
"are supported."
msgstr ""
