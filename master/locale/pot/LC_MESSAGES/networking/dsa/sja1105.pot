# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../networking/dsa/sja1105.rst:3
msgid "NXP SJA1105 switch driver"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:6
msgid "Overview"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:8
msgid "The NXP SJA1105 is a family of 10 SPI-managed automotive switches:"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:10
msgid "SJA1105E: First generation, no TTEthernet"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:11
msgid "SJA1105T: First generation, TTEthernet"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:12
msgid "SJA1105P: Second generation, no TTEthernet, no SGMII"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:13
msgid "SJA1105Q: Second generation, TTEthernet, no SGMII"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:14
msgid "SJA1105R: Second generation, no TTEthernet, SGMII"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:15
msgid "SJA1105S: Second generation, TTEthernet, SGMII"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:16
msgid ""
"SJA1110A: Third generation, TTEthernet, SGMII, integrated 100base-T1 and "
"100base-TX PHYs"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:18
msgid "SJA1110B: Third generation, TTEthernet, SGMII, 100base-T1, 100base-TX"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:19
msgid "SJA1110C: Third generation, TTEthernet, SGMII, 100base-T1, 100base-TX"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:20
msgid "SJA1110D: Third generation, TTEthernet, SGMII, 100base-T1"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:22
msgid ""
"Being automotive parts, their configuration interface is geared towards set-"
"and-forget use, with minimal dynamic interaction at runtime. They require a "
"static configuration to be composed by software and packed with CRC and "
"table headers, and sent over SPI."
msgstr ""

#: ../../../networking/dsa/sja1105.rst:27
msgid ""
"The static configuration is composed of several configuration tables. Each "
"table takes a number of entries. Some configuration tables can be "
"(partially) reconfigured at runtime, some not. Some tables are mandatory, "
"some not:"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:32
msgid "Table"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:32
msgid "Mandatory"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:32
msgid "Reconfigurable"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:34
msgid "Schedule"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:34
#: ../../../networking/dsa/sja1105.rst:35
#: ../../../networking/dsa/sja1105.rst:36
#: ../../../networking/dsa/sja1105.rst:37
#: ../../../networking/dsa/sja1105.rst:38
#: ../../../networking/dsa/sja1105.rst:39
#: ../../../networking/dsa/sja1105.rst:40
#: ../../../networking/dsa/sja1105.rst:44
#: ../../../networking/dsa/sja1105.rst:45
#: ../../../networking/dsa/sja1105.rst:46
#: ../../../networking/dsa/sja1105.rst:47
#: ../../../networking/dsa/sja1105.rst:48
#: ../../../networking/dsa/sja1105.rst:49
#: ../../../networking/dsa/sja1105.rst:50
#: ../../../networking/dsa/sja1105.rst:52
#: ../../../networking/dsa/sja1105.rst:53
#: ../../../networking/dsa/sja1105.rst:54
msgid "no"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:35
msgid "Schedule entry points"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:35
#: ../../../networking/dsa/sja1105.rst:44
#: ../../../networking/dsa/sja1105.rst:45
msgid "if Scheduling"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:36
msgid "VL Lookup"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:37
msgid "VL Policing"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:37
#: ../../../networking/dsa/sja1105.rst:38
msgid "if VL Lookup"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:38
msgid "VL Forwarding"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:39
msgid "L2 Lookup"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:40
msgid "L2 Policing"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:40
#: ../../../networking/dsa/sja1105.rst:41
#: ../../../networking/dsa/sja1105.rst:42
#: ../../../networking/dsa/sja1105.rst:43
#: ../../../networking/dsa/sja1105.rst:48
#: ../../../networking/dsa/sja1105.rst:51
#: ../../../networking/dsa/sja1105.rst:52
#: ../../../networking/dsa/sja1105.rst:53
#: ../../../networking/dsa/sja1105.rst:54
msgid "yes"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:41
msgid "VLAN Lookup"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:42
msgid "L2 Forwarding"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:42
#: ../../../networking/dsa/sja1105.rst:43
#: ../../../networking/dsa/sja1105.rst:47
msgid "partially (fully on P/Q/R/S)"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:43
msgid "MAC Config"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:44
msgid "Schedule Params"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:45
msgid "Schedule Entry Points Params"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:46
msgid "VL Forwarding Params"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:46
msgid "if VL Forwarding"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:47
msgid "L2 Lookup Params"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:48
msgid "L2 Forwarding Params"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:49
msgid "Clock Sync Params"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:50
msgid "AVB Params"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:51
msgid "General Params"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:51
msgid "partially"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:52
msgid "Retagging"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:53
msgid "xMII Params"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:54
#: ../../../networking/dsa/sja1105.rst:420
#: ../../../networking/dsa/sja1105.rst:431
msgid "SGMII"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:58
msgid ""
"Also the configuration is write-only (software cannot read it back from the "
"switch except for very few exceptions)."
msgstr ""

#: ../../../networking/dsa/sja1105.rst:61
msgid ""
"The driver creates a static configuration at probe time, and keeps it at all "
"times in memory, as a shadow for the hardware state. When required to change "
"a hardware setting, the static configuration is also updated. If that "
"changed setting can be transmitted to the switch through the dynamic "
"reconfiguration interface, it is; otherwise the switch is reset and "
"reprogrammed with the updated static configuration."
msgstr ""

#: ../../../networking/dsa/sja1105.rst:69
msgid "Switching features"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:71
msgid ""
"The driver supports the configuration of L2 forwarding rules in hardware for "
"port bridging. The forwarding, broadcast and flooding domain between ports "
"can be restricted through two methods: either at the L2 forwarding level "
"(isolate one bridge's ports from another's) or at the VLAN port membership "
"level (isolate ports within the same bridge). The final forwarding decision "
"taken by the hardware is a logical AND of these two sets of rules."
msgstr ""

#: ../../../networking/dsa/sja1105.rst:78
msgid ""
"The hardware tags all traffic internally with a port-based VLAN (pvid), or "
"it decodes the VLAN information from the 802.1Q tag. Advanced VLAN "
"classification is not possible. Once attributed a VLAN tag, frames are "
"checked against the port's membership rules and dropped at ingress if they "
"don't match any VLAN. This behavior is available when switch ports join a "
"bridge with ``vlan_filtering 1``."
msgstr ""

#: ../../../networking/dsa/sja1105.rst:85
msgid ""
"Normally the hardware is not configurable with respect to VLAN awareness, "
"but by changing what TPID the switch searches 802.1Q tags for, the semantics "
"of a bridge with ``vlan_filtering 0`` can be kept (accept all traffic, "
"tagged or untagged), and therefore this mode is also supported."
msgstr ""

#: ../../../networking/dsa/sja1105.rst:90
msgid ""
"Segregating the switch ports in multiple bridges is supported (e.g. 2 + 2), "
"but all bridges should have the same level of VLAN awareness (either both "
"have ``vlan_filtering`` 0, or both 1)."
msgstr ""

#: ../../../networking/dsa/sja1105.rst:94
msgid "Topology and loop detection through STP is supported."
msgstr ""

#: ../../../networking/dsa/sja1105.rst:97
msgid "Offloads"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:100
msgid "Time-aware scheduling"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:102
msgid ""
"The switch supports a variation of the enhancements for scheduled traffic "
"specified in IEEE 802.1Q-2018 (formerly 802.1Qbv). This means it can be used "
"to ensure deterministic latency for priority traffic that is sent in-band "
"with its gate-open event in the network schedule."
msgstr ""

#: ../../../networking/dsa/sja1105.rst:107
msgid ""
"This capability can be managed through the tc-taprio offload ('flags 2'). "
"The difference compared to the software implementation of taprio is that the "
"latter would only be able to shape traffic originated from the CPU, but not "
"autonomously forwarded flows."
msgstr ""

#: ../../../networking/dsa/sja1105.rst:112
msgid ""
"The device has 8 traffic classes, and maps incoming frames to one of them "
"based on the VLAN PCP bits (if no VLAN is present, the port-based default is "
"used). As described in the previous sections, depending on the value of "
"``vlan_filtering``, the EtherType recognized by the switch as being VLAN can "
"either be the typical 0x8100 or a custom value used internally by the driver "
"for tagging. Therefore, the switch ignores the VLAN PCP if used in "
"standalone or bridge mode with ``vlan_filtering=0``, as it will not "
"recognize the 0x8100 EtherType. In these modes, injecting into a particular "
"TX queue can only be done by the DSA net devices, which populate the PCP "
"field of the tagging header on egress. Using ``vlan_filtering=1``, the "
"behavior is the other way around: offloaded flows can be steered to TX "
"queues based on the VLAN PCP, but the DSA net devices are no longer able to "
"do that. To inject frames into a hardware TX queue with VLAN awareness "
"active, it is necessary to create a VLAN sub-interface on the DSA conduit "
"port, and send normal (0x8100) VLAN-tagged towards the switch, with the VLAN "
"PCP bits set appropriately."
msgstr ""

#: ../../../networking/dsa/sja1105.rst:128
msgid ""
"Management traffic (having DMAC 01-80-C2-xx-xx-xx or 01-19-1B-xx-xx-xx) is "
"the notable exception: the switch always treats it with a fixed priority and "
"disregards any VLAN PCP bits even if present. The traffic class for "
"management traffic has a value of 7 (highest priority) at the moment, which "
"is not configurable in the driver."
msgstr ""

#: ../../../networking/dsa/sja1105.rst:134
msgid ""
"Below is an example of configuring a 500 us cyclic schedule on egress port "
"``swp5``. The traffic class gate for management traffic (7) is open for 100 "
"us, and the gates for all other traffic classes are open for 400 us::"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:174
msgid ""
"It is possible to apply the tc-taprio offload on multiple egress ports. "
"There are hardware restrictions related to the fact that no gate event may "
"trigger simultaneously on two ports. The driver checks the consistency of "
"the schedules against this restriction and errors out when appropriate. "
"Schedule analysis is needed to avoid this, which is outside the scope of the "
"document."
msgstr ""

#: ../../../networking/dsa/sja1105.rst:181
msgid "Routing actions (redirect, trap, drop)"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:183
msgid ""
"The switch is able to offload flow-based redirection of packets to a set of "
"destination ports specified by the user. Internally, this is implemented by "
"making use of Virtual Links, a TTEthernet concept."
msgstr ""

#: ../../../networking/dsa/sja1105.rst:187
msgid "The driver supports 2 types of keys for Virtual Links:"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:189
msgid ""
"VLAN-aware virtual links: these match on destination MAC address, VLAN ID "
"and VLAN PCP."
msgstr ""

#: ../../../networking/dsa/sja1105.rst:191
msgid ""
"VLAN-unaware virtual links: these match on destination MAC address only."
msgstr ""

#: ../../../networking/dsa/sja1105.rst:193
msgid ""
"The VLAN awareness state of the bridge (vlan_filtering) cannot be changed "
"while there are virtual link rules installed."
msgstr ""

#: ../../../networking/dsa/sja1105.rst:196
msgid ""
"Composing multiple actions inside the same rule is supported. When only "
"routing actions are requested, the driver creates a \"non-critical\" virtual "
"link. When the action list also contains tc-gate (more details below), the "
"virtual link becomes \"time-critical\" (draws frame buffers from a reserved "
"memory partition, etc)."
msgstr ""

#: ../../../networking/dsa/sja1105.rst:202
msgid ""
"The 3 routing actions that are supported are \"trap\", \"drop\" and "
"\"redirect\"."
msgstr ""

#: ../../../networking/dsa/sja1105.rst:204
msgid ""
"Example 1: send frames received on swp2 with a DA of 42:be:24:9b:76:20 to "
"the CPU and to swp3. This type of key (DA only) when the port's VLAN "
"awareness state is off::"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:213
msgid ""
"Example 2: drop frames received on swp2 with a DA of 42:be:24:9b:76:20, a "
"VID of 100 and a PCP of 0::"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:220
msgid "Time-based ingress policing"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:222
msgid ""
"The TTEthernet hardware abilities of the switch can be constrained to act "
"similarly to the Per-Stream Filtering and Policing (PSFP) clause specified "
"in IEEE 802.1Q-2018 (formerly 802.1Qci). This means it can be used to "
"perform tight timing-based admission control for up to 1024 flows "
"(identified by a tuple composed of destination MAC address, VLAN ID and VLAN "
"PCP). Packets which are received outside their expected reception window are "
"dropped."
msgstr ""

#: ../../../networking/dsa/sja1105.rst:229
msgid ""
"This capability can be managed through the offload of the tc-gate action. As "
"routing actions are intrinsic to virtual links in TTEthernet (which performs "
"explicit routing of time-critical traffic and does not leave that in the "
"hands of the FDB, flooding etc), the tc-gate action may never appear alone "
"when asking sja1105 to offload it. One (or more) redirect or trap actions "
"must also follow along."
msgstr ""

#: ../../../networking/dsa/sja1105.rst:236
msgid ""
"Example: create a tc-taprio schedule that is phase-aligned with a tc-gate "
"schedule (the clocks must be synchronized by a 1588 application stack, which "
"is outside the scope of this document). No packet delivered by the sender "
"will be dropped. Note that the reception window is larger than the "
"transmission window (and much more so, in this example) to compensate for "
"the packet propagation delay of the link (which can be determined by the "
"1588 application stack)."
msgstr ""

#: ../../../networking/dsa/sja1105.rst:243
msgid "Receiver (sja1105)::"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:257
msgid "Sender::"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:272
msgid ""
"The engine used to schedule the ingress gate operations is the same that the "
"one used for the tc-taprio offload. Therefore, the restrictions regarding "
"the fact that no two gate actions (either tc-gate or tc-taprio gates) may "
"fire at the same time (during the same 200 ns slot) still apply."
msgstr ""

#: ../../../networking/dsa/sja1105.rst:277
msgid ""
"To come in handy, it is possible to share time-triggered virtual links "
"across more than 1 ingress port, via flow blocks. In this case, the "
"restriction of firing at the same time does not apply because there is a "
"single schedule in the system, that of the shared virtual link::"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:291
msgid ""
"Hardware statistics for each flow are also available (\"pkts\" counts the "
"number of dropped frames, which is a sum of frames dropped due to timing "
"violations, lack of destination ports and MTU enforcement checks). Byte-"
"level counters are not available."
msgstr ""

#: ../../../networking/dsa/sja1105.rst:297
msgid "Limitations"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:299
msgid ""
"The SJA1105 switch family always performs VLAN processing. When configured "
"as VLAN-unaware, frames carry a different VLAN tag internally, depending on "
"whether the port is standalone or under a VLAN-unaware bridge."
msgstr ""

#: ../../../networking/dsa/sja1105.rst:303
msgid ""
"The virtual link keys are always fixed at {MAC DA, VLAN ID, VLAN PCP}, but "
"the driver asks for the VLAN ID and VLAN PCP when the port is under a VLAN-"
"aware bridge. Otherwise, it fills in the VLAN ID and PCP automatically, "
"based on whether the port is standalone or in a VLAN-unaware bridge, and "
"accepts only \"VLAN-unaware\" tc-flower keys (MAC DA)."
msgstr ""

#: ../../../networking/dsa/sja1105.rst:309
msgid ""
"The existing tc-flower keys that are offloaded using virtual links are no "
"longer operational after one of the following happens:"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:312
msgid "port was standalone and joins a bridge (VLAN-aware or VLAN-unaware)"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:313
msgid "port is part of a bridge whose VLAN awareness state changes"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:314
msgid "port was part of a bridge and becomes standalone"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:315
msgid ""
"port was standalone, but another port joins a VLAN-aware bridge and this "
"changes the global VLAN awareness state of the bridge"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:318
msgid ""
"The driver cannot veto all these operations, and it cannot update/remove the "
"existing tc-flower filters either. So for proper operation, the tc-flower "
"filters should be installed only after the forwarding configuration of the "
"port has been made, and removed by user space before making any changes to "
"it."
msgstr ""

#: ../../../networking/dsa/sja1105.rst:324
msgid "Device Tree bindings and board design"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:326
msgid ""
"This section references ``Documentation/devicetree/bindings/net/dsa/nxp,"
"sja1105.yaml`` and aims to showcase some potential switch caveats."
msgstr ""

#: ../../../networking/dsa/sja1105.rst:330
msgid "RMII PHY role and out-of-band signaling"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:332
msgid ""
"In the RMII spec, the 50 MHz clock signals are either driven by the MAC or "
"by an external oscillator (but not by the PHY). But the spec is rather loose "
"and devices go outside it in several ways. Some PHYs go against the spec and "
"may provide an output pin where they source the 50 MHz clock themselves, in "
"an attempt to be helpful. On the other hand, the SJA1105 is only binary "
"configurable - when in the RMII MAC role it will also attempt to drive the "
"clock signal. To prevent this from happening it must be put in RMII PHY "
"role. But doing so has some unintended consequences. In the RMII spec, the "
"PHY can transmit extra out-of-band signals via RXD[1:0]. These are "
"practically some extra code words (/J/ and /K/) sent prior to the preamble "
"of each frame. The MAC does not have this out-of-band signaling mechanism "
"defined by the RMII spec. So when the SJA1105 port is put in PHY role to "
"avoid having 2 drivers on the clock signal, inevitably an RMII PHY-to-PHY "
"connection is created. The SJA1105 emulates a PHY interface fully and "
"generates the /J/ and /K/ symbols prior to frame preambles, which the real "
"PHY is not expected to understand. So the PHY simply encodes the extra "
"symbols received from the SJA1105-as-PHY onto the 100Base-Tx wire. On the "
"other side of the wire, some link partners might discard these extra "
"symbols, while others might choke on them and discard the entire Ethernet "
"frames that follow along. This looks like packet loss with some link "
"partners but not with others. The take-away is that in RMII mode, the "
"SJA1105 must be let to drive the reference clock if connected to a PHY."
msgstr ""

#: ../../../networking/dsa/sja1105.rst:359
msgid "RGMII fixed-link and internal delays"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:361
msgid ""
"As mentioned in the bindings document, the second generation of devices has "
"tunable delay lines as part of the MAC, which can be used to establish the "
"correct RGMII timing budget. When powered up, these can shift the Rx and Tx "
"clocks with a phase difference between 73.8 and 101.7 degrees. The catch is "
"that the delay lines need to lock onto a clock signal with a stable "
"frequency. This means that there must be at least 2 microseconds of silence "
"between the clock at the old vs at the new frequency. Otherwise the lock is "
"lost and the delay lines must be reset (powered down and back up). In RGMII "
"the clock frequency changes with link speed (125 MHz at 1000 Mbps, 25 MHz at "
"100 Mbps and 2.5 MHz at 10 Mbps), and link speed might change during the AN "
"process. In the situation where the switch port is connected through an "
"RGMII fixed-link to a link partner whose link state life cycle is outside "
"the control of Linux (such as a different SoC), then the delay lines would "
"remain unlocked (and inactive) until there is manual intervention (ifdown/"
"ifup on the switch port). The take-away is that in RGMII mode, the switch's "
"internal delays are only reliable if the link partner never changes link "
"speeds, or if it does, it does so in a way that is coordinated with the "
"switch port (practically, both ends of the fixed-link are under control of "
"the same Linux system). As to why would a fixed-link interface ever change "
"link speeds: there are Ethernet controllers out there which come out of "
"reset in 100 Mbps mode, and their driver inevitably needs to change the "
"speed and clock frequency if it's required to work at gigabit."
msgstr ""

#: ../../../networking/dsa/sja1105.rst:387
msgid "MDIO bus and PHY management"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:389
msgid ""
"The SJA1105 does not have an MDIO bus and does not perform in-band AN "
"either. Therefore there is no link state notification coming from the switch "
"device. A board would need to hook up the PHYs connected to the switch to "
"any other MDIO bus available to Linux within the system (e.g. to the DSA "
"conduit's MDIO bus). Link state management then works by the driver manually "
"keeping in sync (over SPI commands) the MAC link speed with the settings "
"negotiated by the PHY."
msgstr ""

#: ../../../networking/dsa/sja1105.rst:396
msgid ""
"By comparison, the SJA1110 supports an MDIO slave access point over which "
"its internal 100base-T1 PHYs can be accessed from the host. This is, "
"however, not used by the driver, instead the internal 100base-T1 and 100base-"
"TX PHYs are accessed through SPI commands, modeled in Linux as virtual MDIO "
"buses."
msgstr ""

#: ../../../networking/dsa/sja1105.rst:401
msgid ""
"The microcontroller attached to the SJA1110 port 0 also has an MDIO "
"controller operating in master mode, however the driver does not support "
"this either, since the microcontroller gets disabled when the Linux driver "
"operates. Discrete PHYs connected to the switch ports should have their MDIO "
"interface attached to an MDIO controller from the host system and not to the "
"switch, similar to SJA1105."
msgstr ""

#: ../../../networking/dsa/sja1105.rst:409
msgid "Port compatibility matrix"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:411
msgid "The SJA1105 port compatibility matrix is:"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:414
#: ../../../networking/dsa/sja1105.rst:427
msgid "Port"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:414
msgid "SJA1105E/T"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:414
msgid "SJA1105P/Q"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:414
msgid "SJA1105R/S"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:416
#: ../../../networking/dsa/sja1105.rst:429
msgid "0"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:416
#: ../../../networking/dsa/sja1105.rst:417
#: ../../../networking/dsa/sja1105.rst:418
#: ../../../networking/dsa/sja1105.rst:419
#: ../../../networking/dsa/sja1105.rst:420
#: ../../../networking/dsa/sja1105.rst:432
#: ../../../networking/dsa/sja1105.rst:434
msgid "xMII"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:417
#: ../../../networking/dsa/sja1105.rst:430
msgid "1"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:418
#: ../../../networking/dsa/sja1105.rst:432
msgid "2"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:419
#: ../../../networking/dsa/sja1105.rst:434
msgid "3"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:420
#: ../../../networking/dsa/sja1105.rst:437
msgid "4"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:424
msgid "The SJA1110 port compatibility matrix is:"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:427
msgid "SJA1110A"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:427
msgid "SJA1110B"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:427
msgid "SJA1110C"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:427
msgid "SJA1110D"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:429
msgid "RevMII (uC)"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:430
msgid "100base-TX or SGMII"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:430
msgid "100base-TX"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:432
msgid "xMII or SGMII"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:434
msgid "xMII or SGMII or 2500base-X"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:435
#: ../../../networking/dsa/sja1105.rst:437
msgid "SGMII or 2500base-X"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:439
msgid "5"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:439
#: ../../../networking/dsa/sja1105.rst:440
#: ../../../networking/dsa/sja1105.rst:441
#: ../../../networking/dsa/sja1105.rst:442
#: ../../../networking/dsa/sja1105.rst:443
#: ../../../networking/dsa/sja1105.rst:444
msgid "100base-T1"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:440
msgid "6"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:441
msgid "7"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:442
msgid "8"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:442
#: ../../../networking/dsa/sja1105.rst:443
#: ../../../networking/dsa/sja1105.rst:444
msgid "n/a"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:443
msgid "9"
msgstr ""

#: ../../../networking/dsa/sja1105.rst:444
msgid "10"
msgstr ""
