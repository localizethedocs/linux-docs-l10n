# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../networking/netdev-features.rst:5
msgid "Netdev features mess and how to get out from it alive"
msgstr ""

#: ../../../networking/netdev-features.rst:7
msgid "Author:"
msgstr ""

#: ../../../networking/netdev-features.rst:8
msgid "Michał Mirosław <mirq-linux@rere.qmqm.pl>"
msgstr ""

#: ../../../networking/netdev-features.rst:13
msgid "Part I: Feature sets"
msgstr ""

#: ../../../networking/netdev-features.rst:15
msgid ""
"Long gone are the days when a network card would just take and give packets "
"verbatim.  Today's devices add multiple features and bugs (read: offloads) "
"that relieve an OS of various tasks like generating and checking checksums, "
"splitting packets, classifying them.  Those capabilities and their state are "
"commonly referred to as netdev features in Linux kernel world."
msgstr ""

#: ../../../networking/netdev-features.rst:21
msgid ""
"There are currently three sets of features relevant to the driver, and one "
"used internally by network core:"
msgstr ""

#: ../../../networking/netdev-features.rst:24
msgid ""
"netdev->hw_features set contains features whose state may possibly be "
"changed (enabled or disabled) for a particular device by user's request.  "
"This set should be initialized in ndo_init callback and not changed later."
msgstr ""

#: ../../../networking/netdev-features.rst:29
msgid ""
"netdev->features set contains features which are currently enabled for a "
"device.  This should be changed only by network core or in error paths of "
"ndo_set_features callback."
msgstr ""

#: ../../../networking/netdev-features.rst:33
msgid ""
"netdev->vlan_features set contains features whose state is inherited by "
"child VLAN devices (limits netdev->features set).  This is currently used "
"for all VLAN devices whether tags are stripped or inserted in hardware or "
"software."
msgstr ""

#: ../../../networking/netdev-features.rst:38
msgid ""
"netdev->wanted_features set contains feature set requested by user. This set "
"is filtered by ndo_fix_features callback whenever it or some device-specific "
"conditions change. This set is internal to networking core and should not be "
"referenced in drivers."
msgstr ""

#: ../../../networking/netdev-features.rst:46
msgid "Part II: Controlling enabled features"
msgstr ""

#: ../../../networking/netdev-features.rst:48
msgid ""
"When current feature set (netdev->features) is to be changed, new set is "
"calculated and filtered by calling ndo_fix_features callback and "
"netdev_fix_features(). If the resulting set differs from current set, it is "
"passed to ndo_set_features callback and (if the callback returns success) "
"replaces value stored in netdev->features. NETDEV_FEAT_CHANGE notification "
"is issued after that whenever current set might have changed."
msgstr ""

#: ../../../networking/netdev-features.rst:56
msgid "The following events trigger recalculation:"
msgstr ""

#: ../../../networking/netdev-features.rst:57
msgid "device's registration, after ndo_init returned success"
msgstr ""

#: ../../../networking/netdev-features.rst:58
msgid "user requested changes in features state"
msgstr ""

#: ../../../networking/netdev-features.rst:59
msgid "netdev_update_features() is called"
msgstr ""

#: ../../../networking/netdev-features.rst:61
msgid ""
"ndo_*_features callbacks are called with rtnl_lock held. Missing callbacks "
"are treated as always returning success."
msgstr ""

#: ../../../networking/netdev-features.rst:64
msgid ""
"A driver that wants to trigger recalculation must do so by calling "
"netdev_update_features() while holding rtnl_lock. This should not be done "
"from ndo_*_features callbacks. netdev->features should not be modified by "
"driver except by means of ndo_fix_features callback."
msgstr ""

#: ../../../networking/netdev-features.rst:72
msgid "Part III: Implementation hints"
msgstr ""

#: ../../../networking/netdev-features.rst:74
msgid "ndo_fix_features:"
msgstr ""

#: ../../../networking/netdev-features.rst:76
msgid ""
"All dependencies between features should be resolved here. The resulting set "
"can be reduced further by networking core imposed limitations (as coded in "
"netdev_fix_features()). For this reason it is safer to disable a feature "
"when its dependencies are not met instead of forcing the dependency on."
msgstr ""

#: ../../../networking/netdev-features.rst:81
msgid ""
"This callback should not modify hardware nor driver state (should be "
"stateless).  It can be called multiple times between successive "
"ndo_set_features calls."
msgstr ""

#: ../../../networking/netdev-features.rst:85
msgid ""
"Callback must not alter features contained in NETIF_F_SOFT_FEATURES or "
"NETIF_F_NEVER_CHANGE sets. The exception is NETIF_F_VLAN_CHALLENGED but care "
"must be taken as the change won't affect already configured VLANs."
msgstr ""

#: ../../../networking/netdev-features.rst:89
msgid "ndo_set_features:"
msgstr ""

#: ../../../networking/netdev-features.rst:91
msgid ""
"Hardware should be reconfigured to match passed feature set. The set should "
"not be altered unless some error condition happens that can't be reliably "
"detected in ndo_fix_features. In this case, the callback should update "
"netdev->features to match resulting hardware state. Errors returned are not "
"(and cannot be) propagated anywhere except dmesg. (Note: successful return "
"is zero, >0 means silent error.)"
msgstr ""

#: ../../../networking/netdev-features.rst:101
msgid "Part IV: Features"
msgstr ""

#: ../../../networking/netdev-features.rst:103
msgid ""
"For current list of features, see include/linux/netdev_features.h. This "
"section describes semantics of some of them."
msgstr ""

#: ../../../networking/netdev-features.rst:106
msgid "Transmit checksumming"
msgstr ""

#: ../../../networking/netdev-features.rst:108
msgid ""
"For complete description, see comments near the top of include/linux/skbuff."
"h."
msgstr ""

#: ../../../networking/netdev-features.rst:110
msgid ""
"Note: NETIF_F_HW_CSUM is a superset of NETIF_F_IP_CSUM + NETIF_F_IPV6_CSUM. "
"It means that device can fill TCP/UDP-like checksum anywhere in the packets "
"whatever headers there might be."
msgstr ""

#: ../../../networking/netdev-features.rst:114
msgid "Transmit TCP segmentation offload"
msgstr ""

#: ../../../networking/netdev-features.rst:116
msgid ""
"NETIF_F_TSO_ECN means that hardware can properly split packets with CWR bit "
"set, be it TCPv4 (when NETIF_F_TSO is enabled) or TCPv6 (NETIF_F_TSO6)."
msgstr ""

#: ../../../networking/netdev-features.rst:119
msgid "Transmit UDP segmentation offload"
msgstr ""

#: ../../../networking/netdev-features.rst:121
msgid ""
"NETIF_F_GSO_UDP_L4 accepts a single UDP header with a payload that exceeds "
"gso_size. On segmentation, it segments the payload on gso_size boundaries "
"and replicates the network and UDP headers (fixing up the last one if less "
"than gso_size)."
msgstr ""

#: ../../../networking/netdev-features.rst:126
msgid "Transmit DMA from high memory"
msgstr ""

#: ../../../networking/netdev-features.rst:128
msgid ""
"On platforms where this is relevant, NETIF_F_HIGHDMA signals that "
"ndo_start_xmit can handle skbs with frags in high memory."
msgstr ""

#: ../../../networking/netdev-features.rst:131
msgid "Transmit scatter-gather"
msgstr ""

#: ../../../networking/netdev-features.rst:133
msgid ""
"Those features say that ndo_start_xmit can handle fragmented skbs: "
"NETIF_F_SG --- paged skbs (skb_shinfo()->frags), NETIF_F_FRAGLIST --- "
"chained skbs (skb->next/prev list)."
msgstr ""

#: ../../../networking/netdev-features.rst:137
msgid "Software features"
msgstr ""

#: ../../../networking/netdev-features.rst:139
msgid ""
"Features contained in NETIF_F_SOFT_FEATURES are features of networking "
"stack. Driver should not change behaviour based on them."
msgstr ""

#: ../../../networking/netdev-features.rst:142
msgid "VLAN challenged"
msgstr ""

#: ../../../networking/netdev-features.rst:144
msgid ""
"NETIF_F_VLAN_CHALLENGED should be set for devices which can't cope with VLAN "
"headers. Some drivers set this because the cards can't handle the bigger "
"MTU. [FIXME: Those cases could be fixed in VLAN code by allowing only "
"reduced-MTU VLANs. This may be not useful, though.]"
msgstr ""

#: ../../../networking/netdev-features.rst:149
msgid "rx-fcs"
msgstr ""

#: ../../../networking/netdev-features.rst:151
msgid ""
"This requests that the NIC append the Ethernet Frame Checksum (FCS) to the "
"end of the skb data.  This allows sniffers and other tools to read the CRC "
"recorded by the NIC on receipt of the packet."
msgstr ""

#: ../../../networking/netdev-features.rst:155
msgid "rx-all"
msgstr ""

#: ../../../networking/netdev-features.rst:157
msgid ""
"This requests that the NIC receive all possible frames, including errored "
"frames (such as bad FCS, etc).  This can be helpful when sniffing a link "
"with bad packets on it.  Some NICs may receive more packets if also put into "
"normal PROMISC mode."
msgstr ""

#: ../../../networking/netdev-features.rst:162
msgid "rx-gro-hw"
msgstr ""

#: ../../../networking/netdev-features.rst:164
msgid ""
"This requests that the NIC enables Hardware GRO (generic receive offload). "
"Hardware GRO is basically the exact reverse of TSO, and is generally "
"stricter than Hardware LRO.  A packet stream merged by Hardware GRO must be "
"re-segmentable by GSO or TSO back to the exact original packet stream. "
"Hardware GRO is dependent on RXCSUM since every packet successfully merged "
"by hardware must also have the checksum verified by hardware."
msgstr ""

#: ../../../networking/netdev-features.rst:171
msgid "hsr-tag-ins-offload"
msgstr ""

#: ../../../networking/netdev-features.rst:173
msgid ""
"This should be set for devices which insert an HSR (High-availability "
"Seamless Redundancy) or PRP (Parallel Redundancy Protocol) tag automatically."
msgstr ""

#: ../../../networking/netdev-features.rst:176
msgid "hsr-tag-rm-offload"
msgstr ""

#: ../../../networking/netdev-features.rst:178
msgid ""
"This should be set for devices which remove HSR (High-availability Seamless "
"Redundancy) or PRP (Parallel Redundancy Protocol) tags automatically."
msgstr ""

#: ../../../networking/netdev-features.rst:181
msgid "hsr-fwd-offload"
msgstr ""

#: ../../../networking/netdev-features.rst:183
msgid ""
"This should be set for devices which forward HSR (High-availability Seamless "
"Redundancy) frames from one port to another in hardware."
msgstr ""

#: ../../../networking/netdev-features.rst:186
msgid "hsr-dup-offload"
msgstr ""

#: ../../../networking/netdev-features.rst:188
msgid ""
"This should be set for devices which duplicate outgoing HSR (High-"
"availability Seamless Redundancy) or PRP (Parallel Redundancy Protocol) tags "
"automatically frames in hardware."
msgstr ""

#: ../../../networking/netdev-features.rst:192
msgid "netmem-tx"
msgstr ""

#: ../../../networking/netdev-features.rst:194
msgid ""
"This should be set for devices which support netmem TX. See Documentation/"
"networking/netmem.rst"
msgstr ""
