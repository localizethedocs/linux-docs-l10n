# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-20 11:24+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../driver-api/i3c/master-driver-api.rst:5
msgid "I3C master controller driver API"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:30
msgid "Lock the bus for a maintenance operation"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:34
#: drivers/i3c/master.c:55 drivers/i3c/master.c:69 drivers/i3c/master.c:90
#: drivers/i3c/master.c:880 drivers/i3c/master.c:954 drivers/i3c/master.c:1009
#: drivers/i3c/master.c:1030 drivers/i3c/master.c:1051
#: drivers/i3c/master.c:1702 drivers/i3c/master.c:1736
#: drivers/i3c/master.c:1789 drivers/i3c/master.c:1809
#: drivers/i3c/master.c:1896 drivers/i3c/master.c:2110
#: drivers/i3c/master.c:2627 drivers/i3c/master.c:2685
#: drivers/i3c/master.c:2715 drivers/i3c/master.c:2776
#: drivers/i3c/master.c:2803 drivers/i3c/master.c:2841
#: drivers/i3c/master.c:2985 ../../../driver-api/i3c/master-driver-api:9:
#: include/linux/i3c/master.h:544 include/linux/i3c/master.h:555
#: include/linux/i3c/master.h:621 include/linux/i3c/master.h:634
#: include/linux/i3c/master.h:649 include/linux/i3c/master.h:662
#: include/linux/i3c/master.h:677 include/linux/i3c/master.h:689
#: include/linux/i3c/master.h:701
msgid "**Parameters**"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:36
#: drivers/i3c/master.c:57 drivers/i3c/master.c:71 drivers/i3c/master.c:92
msgid "``struct i3c_bus *bus``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:31
#: drivers/i3c/master.c:66
msgid "I3C bus to take the lock on"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:33
#: drivers/i3c/master.c:55 drivers/i3c/master.c:68 drivers/i3c/master.c:89
#: drivers/i3c/master.c:880 drivers/i3c/master.c:954 drivers/i3c/master.c:1010
#: drivers/i3c/master.c:1031 drivers/i3c/master.c:1050
#: drivers/i3c/master.c:1701 drivers/i3c/master.c:1740
#: drivers/i3c/master.c:1788 drivers/i3c/master.c:1809
#: drivers/i3c/master.c:1895 drivers/i3c/master.c:2110
#: drivers/i3c/master.c:2627 drivers/i3c/master.c:2684
#: drivers/i3c/master.c:2715 drivers/i3c/master.c:2775
#: drivers/i3c/master.c:2803 drivers/i3c/master.c:2846
#: drivers/i3c/master.c:2984 ../../../driver-api/i3c/master-driver-api:9:
#: include/linux/i3c/master.h:49 include/linux/i3c/master.h:70
#: include/linux/i3c/master.h:87 include/linux/i3c/master.h:110
#: include/linux/i3c/master.h:148 include/linux/i3c/master.h:184
#: include/linux/i3c/master.h:211 include/linux/i3c/master.h:234
#: include/linux/i3c/master.h:330 include/linux/i3c/master.h:362
#: include/linux/i3c/master.h:520 include/linux/i3c/master.h:545
#: include/linux/i3c/master.h:556 include/linux/i3c/master.h:635
#: include/linux/i3c/master.h:663
msgid "**Description**"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:32
msgid ""
"This function takes the bus lock so that no other operations can occur on "
"the bus. This is needed for all kind of bus maintenance operation, like - "
"enabling/disabling slave events - re-triggering DAA - changing the dynamic "
"address of a device - relinquishing mastership - ..."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:40
msgid ""
"The reason for this kind of locking is that we don't want drivers and core "
"logic to rely on I3C device information that could be changed behind their "
"back."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:51
msgid "Release the bus lock after a maintenance operation"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:53
#: drivers/i3c/master.c:87
msgid "I3C bus to release the lock on"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:54
msgid ""
"Should be called when the bus maintenance operation is done. See "
"i3c_bus_maintenance_lock() for more details on what these maintenance "
"operations are."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:65
msgid "Lock the bus for a normal operation"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:67
msgid ""
"This function takes the bus lock for any operation that is not a maintenance "
"operation (see i3c_bus_maintenance_lock() for a non-exhaustive list of "
"maintenance operations). Basically all communications with I3C devices are "
"normal operations (HDR, SDR transfers or CCC commands that do not change bus "
"state or I3C dynamic address)."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:73
msgid ""
"Note that this lock is not guaranteeing serialization of normal operations. "
"In other words, transfer requests passed to the I3C master can be submitted "
"in parallel and I3C master drivers have to use their own locking to make "
"sure two different communications are not inter-mixed, or access to the "
"output/input queue is not done while the engine is busy."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:86
msgid "Release the bus lock after a normal operation"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:88
msgid ""
"Should be called when a normal operation is done. See "
"i3c_bus_normaluse_lock() for more details on what these normal operations "
"are."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:876
msgid "get a free address on the bus"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:882
#: drivers/i3c/master.c:956 drivers/i3c/master.c:1011 drivers/i3c/master.c:1032
#: drivers/i3c/master.c:1053 drivers/i3c/master.c:1704
#: drivers/i3c/master.c:1811 drivers/i3c/master.c:1898
#: drivers/i3c/master.c:2112 drivers/i3c/master.c:2843
#: drivers/i3c/master.c:2987 ../../../driver-api/i3c/master-driver-api:9:
#: include/linux/i3c/master.h:703
msgid "``struct i3c_master_controller *master``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:877
msgid "I3C master object"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:879
msgid "``u8 start_addr``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:878
msgid "where to start searching"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:879
#: drivers/i3c/master.c:959 drivers/i3c/master.c:1012 drivers/i3c/master.c:1033
#: drivers/i3c/master.c:1059 drivers/i3c/master.c:1707
#: drivers/i3c/master.c:2116
msgid "This function must be called with the bus lock held in write mode."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:881
#: drivers/i3c/master.c:961 drivers/i3c/master.c:1014 drivers/i3c/master.c:1035
#: drivers/i3c/master.c:1061 drivers/i3c/master.c:1709
#: drivers/i3c/master.c:1741 drivers/i3c/master.c:1823
#: drivers/i3c/master.c:1920 drivers/i3c/master.c:2118
#: drivers/i3c/master.c:2716 drivers/i3c/master.c:2778
#: drivers/i3c/master.c:2854 ../../../driver-api/i3c/master-driver-api:9:
#: include/linux/i3c/master.h:621 include/linux/i3c/master.h:649
#: include/linux/i3c/master.h:676 include/linux/i3c/master.h:688
#: include/linux/i3c/master.h:700
msgid "**Return**"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:882
msgid ""
"the first free address starting at **start_addr** (included) or -ENOMEM if "
"there's no more address available."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:950
msgid "start a DAA (Dynamic Address Assignment) procedure"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:952
#: drivers/i3c/master.c:1006 drivers/i3c/master.c:1027
#: drivers/i3c/master.c:1048 drivers/i3c/master.c:1806
#: drivers/i3c/master.c:2107 drivers/i3c/master.c:2838
#: drivers/i3c/master.c:2982
msgid "master used to send frames on the bus"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:953
msgid "Send a ENTDAA CCC command to start a DAA procedure."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:955
msgid ""
"Note that this function only sends the ENTDAA CCC command, all the logic "
"behind dynamic address assignment has to be handled in the I3C master driver."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:962
#: drivers/i3c/master.c:1015 drivers/i3c/master.c:1036
#: drivers/i3c/master.c:1062
msgid ""
"0 in case of success, a positive I3C error code if the error is one of the "
"official Mx error codes, and a negative error code otherwise."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1005
msgid "send a DISEC CCC command"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1008
#: drivers/i3c/master.c:1029 drivers/i3c/master.c:2109
msgid "``u8 addr``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1007
#: drivers/i3c/master.c:1028
msgid "a valid I3C slave address or ``I3C_BROADCAST_ADDR``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1009
#: drivers/i3c/master.c:1030
msgid "``u8 evts``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1008
#: drivers/i3c/master.c:1029
msgid "events to disable"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1009
msgid ""
"Send a DISEC CCC command to disable some or all events coming from a "
"specific slave, or all devices if **addr** is ``I3C_BROADCAST_ADDR``."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1026
msgid "send an ENEC CCC command"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1030
msgid ""
"Sends an ENEC CCC command to enable some or all events coming from a "
"specific slave, or all devices if **addr** is ``I3C_BROADCAST_ADDR``."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1047
msgid "send a DEFSLVS CCC command"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1049
msgid ""
"Send a DEFSLVS CCC command containing all the devices known to the "
"**master**. This is useful when you have secondary masters on the bus to "
"propagate device information."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1053
msgid ""
"This should be called after all I3C devices have been discovered (in other "
"words, after the DAA procedure has finished) and instantiated in :c:type:"
"`i3c_master_controller_ops->bus_init\\(\\) <i3c_master_controller_ops>`. It "
"should also be called if a master ACKed an Hot-Join request and assigned a "
"dynamic address to the device joining the bus."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1698
msgid "do a DAA (Dynamic Address Assignment)"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1699
msgid "master doing the DAA"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1700
#: drivers/i3c/master.c:2109
msgid ""
"This function is instantiating an I3C device object and adding it to the I3C "
"device list. All device information are automatically retrieved using "
"standard CCC commands."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1704
#: drivers/i3c/master.c:2113
msgid ""
"The I3C device object is returned in case the master wants to attach private "
"data to it using i3c_dev_set_master_data()."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1710
#: drivers/i3c/master.c:1921 drivers/i3c/master.c:2119
msgid "a 0 in case of success, an negative error code otherwise."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1732
msgid "Map buffer for single DMA transfer"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1738
msgid "``struct device *dev``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1733
#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:564
msgid "device object of a device doing DMA"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1735
msgid "``void *buf``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1734
#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:565
msgid "destination/source buffer for DMA"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1736
msgid "``size_t len``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1735
#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:566
msgid "length of transfer"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1737
msgid "``bool force_bounce``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1736
msgid ""
"true, force to use a bounce buffer, false, function will auto check is a "
"bounce buffer required"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1739
msgid "``enum dma_data_direction dir``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1738
#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:569
msgid "DMA direction"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1739
msgid "Map buffer for a DMA transfer and allocate a bounce buffer if required."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1742
msgid "I3C DMA transfer descriptor or NULL in case of error."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1785
msgid "Unmap buffer after DMA"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1791
msgid "``struct i3c_dma *dma_xfer``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1786
#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:562
msgid "DMA transfer and mapping descriptor"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1787
msgid "Unmap buffer and cleanup DMA transfer descriptor."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1805
msgid "set master device information"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1808
msgid "``const struct i3c_device_info *info``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1807
msgid "I3C device information"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1808
msgid ""
"Set master device info. This should be called from :c:type:"
"`i3c_master_controller_ops->bus_init\\(\\) <i3c_master_controller_ops>`."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1811
msgid ""
"Not all :c:type:`i3c_device_info` fields are meaningful for a master device. "
"Here is a list of fields that should be properly filled:"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1814
msgid ":c:type:`i3c_device_info->dyn_addr <i3c_device_info>`"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1815
msgid ":c:type:`i3c_device_info->bcr <i3c_device_info>`"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1816
msgid ":c:type:`i3c_device_info->dcr <i3c_device_info>`"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1817
msgid ":c:type:`i3c_device_info->pid <i3c_device_info>`"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1818
msgid ""
":c:type:`i3c_device_info->hdr_cap <i3c_device_info>` if ``I3C_BCR_HDR_CAP`` "
"bit is set in :c:type:`i3c_device_info->bcr <i3c_device_info>`"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1821
msgid ""
"This function must be called with the bus lock held in maintenance mode."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1824
msgid ""
"0 if **info** contains valid information (not every piece of information can "
"be checked, but we can at least make sure **info->dyn_addr** and **info-"
">bcr** are correct), -EINVAL otherwise."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1892
msgid "initialize an I3C bus"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1893
msgid "main master initializing the bus"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1894
msgid ""
"This function is following all initialisation steps described in the I3C "
"specification:"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1897
msgid ""
"Attach I2C devs to the master so that the master can fill its internal "
"device table appropriately"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1900
msgid ""
"Call :c:type:`i3c_master_controller_ops->bus_init\\(\\) "
"<i3c_master_controller_ops>` method to initialize the master controller. "
"That's usually where the bus mode is selected (pure bus or mixed fast/slow "
"bus)"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1904
msgid ""
"Instruct all devices on the bus to drop their dynamic address. This is "
"particularly important when the bus was previously configured by someone "
"else (for example the bootloader)"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1908
msgid "Disable all slave events."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1910
msgid ""
"Reserve address slots for I3C devices with init_dyn_addr. And if devices "
"also have static_addr, try to pre-assign dynamic addresses requested by the "
"FW with SETDASA and attach corresponding statically defined I3C devices to "
"the master."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1915
msgid ""
"Do a DAA (Dynamic Address Assignment) to assign dynamic addresses to all "
"remaining I3C devices"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:1918
msgid "Once this is done, all I3C and I2C devices should be usable."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2106
msgid "add an I3C slave to the bus"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2108
msgid "I3C slave dynamic address assigned to the device"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2623
msgid "Queue an IBI"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2629
#: drivers/i3c/master.c:2717 ../../../driver-api/i3c/master-driver-api:9:
#: include/linux/i3c/master.h:636 include/linux/i3c/master.h:679
msgid "``struct i3c_dev_desc *dev``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2624
msgid "the device this IBI is coming from"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2626
msgid "``struct i3c_ibi_slot *slot``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2625
msgid "the IBI slot used to store the payload"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2626
msgid ""
"Queue an IBI to the controller workqueue. The IBI handler attached to the "
"dev will be called from a workqueue context."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2681
msgid "Free a generic IBI pool"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2687
#: drivers/i3c/master.c:2778 drivers/i3c/master.c:2805
msgid "``struct i3c_generic_ibi_pool *pool``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2682
msgid "the IBI pool to free"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2683
msgid "Free all IBI slots allated by a generic IBI pool."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2711
msgid "Create a generic IBI pool"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2712
msgid "the device this pool will be used for"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2714
msgid "``const struct i3c_ibi_setup *req``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2713
msgid "IBI setup request describing what the device driver expects"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2714
msgid "Create a generic IBI pool based on the information provided in **req**."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2717
msgid "a valid IBI pool in case of success, an ERR_PTR() otherwise."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2772
msgid "Get a free slot from a generic IBI pool"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2773
msgid "the pool to query an IBI slot on"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2774
msgid ""
"Search for a free slot in a generic IBI pool. The slot should be returned to "
"the pool using i3c_generic_ibi_recycle_slot() when it's no longer needed."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2779
msgid "a pointer to a free slot, or NULL if there's no free slot available."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2799
msgid "Return a slot to a generic IBI pool"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2800
msgid "the pool to return the IBI slot to"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2802
msgid "``struct i3c_ibi_slot *s``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2801
msgid "IBI slot to recycle"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2802
msgid ""
"Add an IBI slot back to its generic IBI pool. Should be called from the "
"master driver struct_master_controller_ops->recycle_ibi() method."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2837
msgid "register an I3C master"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2840
msgid "``struct device *parent``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2839
msgid "the parent device (the one that provides this I3C master controller)"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2842
msgid "``const struct i3c_master_controller_ops *ops``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2841
msgid "the master controller operations"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2843
msgid "``bool secondary``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2842
msgid ""
"true if you are registering a secondary master. Will return -EOPNOTSUPP if "
"set to true since secondary masters are not yet supported"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2845
msgid "This function takes care of everything for you:"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2847
msgid "creates and initializes the I3C bus"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2848
msgid ""
"populates the bus with static I2C devs if **parent->of_node** is not NULL"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2850
msgid ""
"registers all I3C devices added by the controller during bus initialization"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2852
msgid "registers the I2C adapter and all I2C devices"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2855
msgid "0 in case of success, a negative error code otherwise."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2981
msgid "unregister an I3C master"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:7: drivers/i3c/master.c:2983
msgid "Basically undo everything done in i3c_master_register()."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:39
msgid "Common part of the I3C/I2C device descriptor"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:43
#: include/linux/i3c/master.h:66 include/linux/i3c/master.h:82
#: include/linux/i3c/master.h:105 include/linux/i3c/master.h:129
#: include/linux/i3c/master.h:171 include/linux/i3c/master.h:200
#: include/linux/i3c/master.h:229 include/linux/i3c/master.h:332
#: include/linux/i3c/master.h:386 include/linux/i3c/master.h:501
#: include/linux/i3c/master.h:566
msgid "**Definition**::"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:51
#: include/linux/i3c/master.h:74 include/linux/i3c/master.h:91
#: include/linux/i3c/master.h:114 include/linux/i3c/master.h:141
#: include/linux/i3c/master.h:181 include/linux/i3c/master.h:211
#: include/linux/i3c/master.h:237 include/linux/i3c/master.h:350
#: include/linux/i3c/master.h:411 include/linux/i3c/master.h:519
#: include/linux/i3c/master.h:578
msgid "**Members**"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:40
#: include/linux/i3c/master.h:63 include/linux/i3c/master.h:168
msgid "``node``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:41
msgid "node element used to insert the slot into the I2C or I3C device list"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:42
msgid "``master``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:43
msgid ""
"I3C master that instantiated this device. Will be used to do I2C/I3C "
"transfers"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:44
msgid "``master_priv``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:45
msgid ""
"master private data assigned to the device. Can be used to add master "
"specific information"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:46
msgid "This structure is describing common I3C/I2C dev information."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:62
msgid "I2C device board information"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:64
msgid "used to insert the boardinfo object in the I2C boardinfo list"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:64
msgid "``base``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:65
msgid "regular I2C board information"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:65
#: include/linux/i3c/master.h:82
msgid "``lvr``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:66
#: include/linux/i3c/master.h:83
msgid ""
"LVR (Legacy Virtual Register) needed by the I3C core to know about the I2C "
"device limitations"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:67
msgid ""
"This structure is used to attach board-level information to an I2C device. "
"Each I2C device connected on the I3C bus should have one."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:78
msgid "I2C device descriptor"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:79
#: include/linux/i3c/master.h:197
msgid "``common``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:80
msgid "common part of the I2C device descriptor"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:80
#: include/linux/i3c/master.h:104 include/linux/i3c/master.h:203
#: include/linux/i3c/master.h:226 include/linux/i3c/master.h:498
#: include/linux/i3c/master.h:543 include/linux/i3c/master.h:554
#: include/linux/i3c/master.h:563
msgid "``dev``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:81
msgid "I2C device object registered to the I2C framework"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:81
#: include/linux/i3c/master.h:567
msgid "``addr``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:82
msgid "I2C device address"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:84
msgid ""
"Each I2C device connected on the bus will have an i2c_dev_desc. This object "
"is created by the core and later attached to the controller using :c:type:"
"`struct_i3c_master_controller->ops <struct_i3c_master_controller>`-"
">attach_i2c_dev()."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:88
msgid ""
":c:type:`struct_i2c_dev_desc <_i2c_dev_desc>` is the internal representation "
"of an I2C device connected on an I3C bus. This object is also passed to all :"
"c:type:`struct_i3c_master_controller_ops <_i3c_master_controller_ops>` hooks."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:101
msgid "I3C IBI (In-Band Interrupt) slot"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:102
msgid "``work``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:103
msgid "work associated to this slot. The IBI handler will be called from there"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:105
msgid "the I3C device that has generated this IBI"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:105
#: include/linux/i3c/master.h:565
msgid "``len``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:106
msgid "length of the payload associated to this IBI"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:106
msgid "``data``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:107
msgid "payload buffer"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:107
msgid ""
"An IBI slot is an object pre-allocated by the controller and used when an "
"IBI comes in. Every time an IBI comes in, the I3C master driver should find "
"a free IBI slot in its IBI slot pool, retrieve the IBI payload and queue the "
"IBI using i3c_master_queue_ibi()."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:113
msgid ""
"How IBI slots are allocated is left to the I3C master driver, though, for "
"simple kmalloc-based allocation, the generic IBI slot pool can be used."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:125
msgid "IBI information attached to a specific device"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:126
msgid "``all_ibis_handled``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:127
msgid ""
"used to be informed when no more IBIs are waiting to be processed. Used by "
"i3c_device_disable_ibi() to wait for all IBIs to be dequeued"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:129
msgid "``pending_ibis``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:130
msgid ""
"count the number of pending IBIs. Each pending IBI has its work element "
"queued to the controller workqueue"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:131
msgid "``max_payload_len``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:132
msgid ""
"maximum payload length for an IBI coming from this device. this value is "
"specified when calling i3c_device_request_ibi() and should not change at run "
"time. All messages IBIs exceeding this limit should be rejected by the master"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:136
msgid "``num_slots``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:137
msgid "number of IBI slots reserved for this device"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:137
msgid "``enabled``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:138
msgid "reflect the IBI status"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:138
#: include/linux/i3c/master.h:512
msgid "``wq``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:139
msgid "workqueue used to execute IBI handlers."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:139
msgid "``handler``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:140
msgid ""
"IBI handler specified at i3c_device_request_ibi() call time. This handler "
"will be called from the controller workqueue, and as such is allowed to "
"sleep (though it is recommended to process the IBI as fast as possible to "
"not stall processing of other IBIs queued on the same workqueue). New I3C "
"messages can be sent from the IBI handler"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:145
msgid ""
"The :c:type:`struct_i3c_device_ibi_info <_i3c_device_ibi_info>` object is "
"allocated when i3c_device_request_ibi() is called and attached to a specific "
"device. This object is here to manage IBIs coming from a specific I3C device."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:149
msgid ""
"Note that this structure is the generic view of the IBI management "
"infrastructure. I3C master drivers may have their own internal "
"representation which they can associate to the device using controller-"
"private data."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:167
msgid "I3C device board information"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:169
msgid "used to insert the boardinfo object in the I3C boardinfo list"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:169
msgid "``init_dyn_addr``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:170
msgid ""
"initial dynamic address requested by the FW. We provide no guarantee that "
"the device will end up using this address, but try our best to assign this "
"specific address to the device"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:173
msgid "``static_addr``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:174
msgid ""
"static address the I3C device listen on before it's been assigned a dynamic "
"address by the master. Will be used during bus initialization to assign it a "
"specific dynamic address before starting DAA (Dynamic Address Assignment)"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:177
msgid "``pid``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:178
msgid ""
"I3C Provisioned ID exposed by the device. This is a unique identifier that "
"may be used to attach boardinfo to i3c_dev_desc when the device does not "
"have a static address"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:180
msgid "``of_node``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:181
msgid "optional DT node in case the device has been described in the DT"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:181
msgid ""
"This structure is used to attach board-level information to an I3C device. "
"Not all I3C devices connected on the bus will have a boardinfo. It's only "
"needed if you want to attach extra resources to a device or assign it a "
"specific dynamic address."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:196
msgid "I3C device descriptor"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:198
msgid "common part of the I3C device descriptor"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:198
msgid "``info``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:199
msgid ""
"I3C device information. Will be automatically filled when you create your "
"device with i3c_master_add_i3c_dev_locked()"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:200
msgid "``ibi_lock``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:201
msgid ""
"lock used to protect the :c:type:`struct_i3c_device->ibi <struct_i3c_device>`"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:201
msgid "``ibi``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:202
msgid ""
"IBI info attached to a device. Should be NULL until i3c_device_request_ibi() "
"is called"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:204
msgid ""
"pointer to the I3C device object exposed to I3C device drivers. This should "
"never be accessed from I3C master controller drivers. Only core code should "
"manipulate it in when updating the dev <-> desc link or when propagating IBI "
"events to the driver"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:207
#: include/linux/i3c/master.h:510
msgid "``boardinfo``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:208
msgid "pointer to the boardinfo attached to this I3C device"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:208
msgid ""
"Internal representation of an I3C device. This object is only used by the "
"core and passed to I3C master controller drivers when they're requested to "
"do some operations on the device. The core maintains the link between the "
"internal I3C dev descriptor and the object exposed to the I3C device drivers "
"(:c:type:`struct_i3c_device <_i3c_device>`)."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:225
msgid "I3C device object"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:227
msgid "device object to register the I3C dev to the device model"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:227
msgid "``desc``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:228
msgid ""
"pointer to an i3c device descriptor object. This link is updated every time "
"the I3C device is rediscovered with a different dynamic address assigned"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:230
#: include/linux/i3c/master.h:511 include/linux/i3c/master.h:546
#: include/linux/i3c/master.h:557
msgid "``bus``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:231
msgid "I3C bus this device is attached to"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:231
msgid ""
"I3C device object exposed to I3C device drivers. The takes care of linking "
"this object to the relevant :c:type:`struct_i3c_dev_desc <_i3c_dev_desc>` "
"one. All I3C devs on the I3C bus are represented, including I3C masters. For "
"each of them, we have an instance of :c:type:`struct i3c_device "
"<i3c_device>`."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:264
msgid "I3C bus mode"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:268
#: include/linux/i3c/master.h:290 include/linux/i3c/master.h:304
msgid "**Constants**"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:270
msgid "``I3C_BUS_MODE_PURE``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:271
msgid "only I3C devices are connected to the bus. No limitation expected"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:274
msgid "``I3C_BUS_MODE_MIXED_FAST``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:275
msgid ""
"I2C devices with 50ns spike filter are present on the bus. The only impact "
"in this mode is that the high SCL pulse has to stay below 50ns to trick I2C "
"devices when transmitting I3C frames"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:280
msgid "``I3C_BUS_MODE_MIXED_LIMITED``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:281
msgid ""
"I2C devices without 50ns spike filter are present on the bus. However they "
"allow compliance up to the maximum SDR SCL clock frequency."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:286
msgid "``I3C_BUS_MODE_MIXED_SLOW``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:287
msgid "I2C devices without 50ns spike filter are present on the bus"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:286
msgid "I3C open-drain speed"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:292
msgid "``I3C_OPEN_DRAIN_SLOW_SPEED``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:293
msgid ""
"Slow open-drain speed for sending the first broadcast address. The first "
"broadcast address at this speed will be visible to all devices on the I3C "
"bus. I3C devices working in I2C mode will turn off their spike filter when "
"switching into I3C mode."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:299
msgid "``I3C_OPEN_DRAIN_NORMAL_SPEED``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:300
msgid "Normal open-drain speed in I3C bus mode."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:300
msgid "I3C address slot status"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:306
msgid "``I3C_ADDR_SLOT_FREE``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:307
msgid "address is free"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:309
msgid "``I3C_ADDR_SLOT_RSVD``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:310
msgid "address is reserved"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:312
msgid "``I3C_ADDR_SLOT_I2C_DEV``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:313
msgid "address is assigned to an I2C device"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:315
msgid "``I3C_ADDR_SLOT_I3C_DEV``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:316
msgid "address is assigned to an I3C device"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:318
msgid "``I3C_ADDR_SLOT_STATUS_MASK``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:319
msgid "address slot mask"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:321
msgid "``I3C_ADDR_SLOT_EXT_STATUS_MASK``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:322
msgid "address slot mask with extended information"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:324
msgid "``I3C_ADDR_SLOT_EXT_DESIRED``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:325
msgid ""
"the bitmask represents addresses that are preferred by some devices, such as "
"the \"assigned-address\" property in a device tree source. On an I3C bus, "
"addresses are assigned dynamically, and we need to know which addresses are "
"free to use and which ones are already assigned."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:311
msgid ""
"Addresses marked as reserved are those reserved by the I3C protocol "
"(broadcast address, ...)."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:328
msgid "I3C bus object"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:329
msgid "``cur_master``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:330
msgid ""
"I3C master currently driving the bus. Since I3C is multi-master this can "
"change over the time. Will be used to let a master know whether it needs to "
"request bus ownership before sending a frame or not"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:333
msgid "``id``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:334
msgid "bus ID. Assigned by the framework when register the bus"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:334
msgid "``addrslots``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:335
msgid ""
"a bitmap with 2-bits per-slot to encode the address status and ease the DAA "
"(Dynamic Address Assignment) procedure (see :c:type:`enum "
"i3c_addr_slot_status <i3c_addr_slot_status>`)"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:337
msgid "``mode``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:338
msgid "bus mode (see :c:type:`enum i3c_bus_mode <i3c_bus_mode>`)"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:341
msgid "``scl_rate``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:342
msgid "SCL signal rate for I3C and I2C mode"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:338
msgid "``scl_rate.i3c``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:339
msgid "maximum rate for the clock signal when doing I3C SDR/priv transfers"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:340
msgid "``scl_rate.i2c``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:341
msgid "maximum rate for the clock signal when doing I2C transfers"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:348
msgid "``devs``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:349
msgid "2 lists containing all I3C/I2C devices connected to the bus"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:342
msgid "``devs.i3c``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:343
msgid ""
"contains a list of I3C device descriptors representing I3C devices connected "
"on the bus and successfully attached to the I3C master"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:345
msgid "``devs.i2c``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:346
msgid ""
"contains a list of I2C device descriptors representing I2C devices connected "
"on the bus and successfully attached to the I3C master"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:349
msgid "``lock``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:350
msgid ""
"read/write lock on the bus. This is needed to protect against operations "
"that have an impact on the whole bus and the devices connected to it. For "
"example, when asking slaves to drop their dynamic address (RSTDAA CCC), we "
"need to make sure no one is trying to send I3C frames to these devices. Note "
"that this lock does not protect against concurrency between devices: several "
"drivers can send different I3C/I2C frames through the same master in "
"parallel. This is the responsibility of the master to guarantee that frames "
"are actually sent sequentially and not interlaced"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:359
msgid ""
"The I3C bus is represented with its own object and not implicitly described "
"by the I3C master to cope with the multi-master functionality, where one bus "
"can be shared amongst several masters, each of them requesting bus ownership "
"when they need to."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:382
msgid "I3C master methods"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:383
msgid "``bus_init``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:384
msgid ""
"hook responsible for the I3C bus initialization. You should at least call "
"master_set_info() from there and set the bus mode. You can also put "
"controller specific initialization in there. This method is mandatory."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:387
msgid "``bus_cleanup``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:388
msgid ""
"cleanup everything done in :c:type:`i3c_master_controller_ops-"
">bus_init\\(\\) <i3c_master_controller_ops>`. This method is optional."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:390
msgid "``attach_i3c_dev``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:391
msgid ""
"called every time an I3C device is attached to the bus. It can be after a "
"DAA or when a device is statically declared by the FW, in which case it will "
"only have a static address and the dynamic address will be 0. When this "
"function is called, device information have not been retrieved yet. This is "
"a good place to attach master controller specific data to I3C devices. This "
"method is optional."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:399
msgid "``reattach_i3c_dev``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:400
msgid ""
"called every time an I3C device has its addressed changed. It can be because "
"the device has been powered down and has lost its address, or it can happen "
"when a device had a static address and has been assigned a dynamic address "
"with SETDASA. This method is optional."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:405
msgid "``detach_i3c_dev``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:406
msgid ""
"called when an I3C device is detached from the bus. Usually happens when the "
"master device is unregistered. This method is optional."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:408
msgid "``do_daa``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:409
msgid ""
"do a DAA (Dynamic Address Assignment) procedure. This is procedure should "
"send an ENTDAA CCC command and then add all devices discovered sure the DAA "
"using i3c_master_add_i3c_dev_locked(). Add devices added with "
"i3c_master_add_i3c_dev_locked() will then be attached or re-attached to the "
"controller. This method is mandatory."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:414
msgid "``supports_ccc_cmd``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:415
msgid ""
"should return true if the CCC command is supported, false otherwise. This "
"method is optional, if not provided the core assumes all CCC commands are "
"supported."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:418
msgid "``send_ccc_cmd``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:419
msgid "send a CCC command This method is mandatory."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:420
msgid "``priv_xfers``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:421
msgid "do one or several private I3C SDR transfers This method is mandatory."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:422
msgid "``attach_i2c_dev``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:423
msgid ""
"called every time an I2C device is attached to the bus. This is a good place "
"to attach master controller specific data to I2C devices. This method is "
"optional."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:426
msgid "``detach_i2c_dev``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:427
msgid ""
"called when an I2C device is detached from the bus. Usually happens when the "
"master device is unregistered. This method is optional."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:429
msgid "``i2c_xfers``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:430
msgid ""
"do one or several I2C transfers. Note that, unlike i3c transfers, the core "
"does not guarantee that buffers attached to the transfers are DMA-safe. If "
"drivers want to have DMA-safe buffers, they should use the "
"i2c_get_dma_safe_msg_buf() and i2c_put_dma_safe_msg_buf() helpers provided "
"by the I2C framework. This method is mandatory."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:436
msgid "``request_ibi``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:437
msgid ""
"attach an IBI handler to an I3C device. This implies defining an IBI handler "
"and the constraints of the IBI (maximum payload length and number of pre-"
"allocated slots). Some controllers support less IBI-capable devices than "
"regular devices, so this method might return -``EBUSY`` if there's no more "
"space for an extra IBI registration This method is optional."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:443
msgid "``free_ibi``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:444
msgid ""
"free an IBI previously requested with ->request_ibi(). The IBI should have "
"been disabled with ->disable_irq() prior to that This method is mandatory "
"only if ->request_ibi is not NULL."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:446
msgid "``enable_ibi``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:447
msgid ""
"enable the IBI. Only valid if ->request_ibi() has been called prior to -"
">enable_ibi(). The controller should first enable the IBI on the controller "
"end (for example, unmask the hardware IRQ) and then send the ENEC CCC "
"command (with the IBI flag set) to the I3C device. This method is mandatory "
"only if ->request_ibi is not NULL."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:452
msgid "``disable_ibi``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:453
msgid ""
"disable an IBI. First send the DISEC CCC command with the IBI flag set and "
"then deactivate the hardware IRQ on the controller end. This method is "
"mandatory only if ->request_ibi is not NULL."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:456
msgid "``recycle_ibi_slot``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:457
msgid ""
"recycle an IBI slot. Called every time an IBI has been processed by its "
"handler. The IBI slot should be put back in the IBI slot pool so that the "
"controller can re-use it for a future IBI This method is mandatory only if -"
">request_ibi is not NULL."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:462
msgid "``enable_hotjoin``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:463
msgid "enable hot join event detect."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:463
msgid "``disable_hotjoin``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:464
msgid "disable hot join event detect."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:464
msgid "``set_speed``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:465
msgid "adjust I3C open drain mode timing."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:497
msgid "I3C master controller object"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:499
msgid "device to be registered to the device-model"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:499
msgid "``this``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:500
msgid ""
"an I3C device object representing this master. This device will be added to "
"the list of I3C devs available on the bus"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:501
msgid "``i2c``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:502
msgid ""
"I2C adapter used for backward compatibility. This adapter is registered to "
"the I2C subsystem to be as transparent as possible to existing I2C drivers"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:504
msgid "``ops``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:505
msgid ""
"master operations. See :c:type:`struct i3c_master_controller_ops "
"<i3c_master_controller_ops>`"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:505
msgid "``secondary``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:506
msgid "true if the master is a secondary master"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:506
msgid "``init_done``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:507
msgid "true when the bus initialization is done"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:507
msgid "``hotjoin``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:508
msgid "true if the master support hotjoin"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:511
msgid "board-level information attached to devices connected on the bus"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:508
msgid "``boardinfo.i3c``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:509
msgid "list of I3C  boardinfo objects"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:509
msgid "``boardinfo.i2c``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:510
msgid "list of I2C boardinfo objects"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:512
msgid "I3C bus exposed by this master"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:513
msgid ""
"workqueue which can be used by master drivers if they need to postpone "
"operations that need to take place in a thread context. Typical examples are "
"Hot Join processing which requires taking the bus lock in maintenance, which "
"in turn, can only be done from a sleep-able context"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:517
msgid ""
"A :c:type:`struct i3c_master_controller <i3c_master_controller>` has to be "
"registered to the I3C subsystem through i3c_master_register(). None of :c:"
"type:`struct i3c_master_controller <i3c_master_controller>` fields should be "
"set manually, just pass appropriate values to i3c_master_register()."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:542
msgid "``i3c_bus_for_each_i2cdev (bus, dev)``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:540
msgid "iterate over all I2C devices present on the bus"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:541
#: include/linux/i3c/master.h:552
msgid "the I3C bus"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:542
msgid ""
"an I2C device descriptor pointer updated to point to the current slot at "
"each iteration of the loop"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:544
msgid "Iterate over all I2C devs present on the bus."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:553
msgid "``i3c_bus_for_each_i3cdev (bus, dev)``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:551
msgid "iterate over all I3C devices present on the bus"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:553
msgid ""
"and I3C device descriptor pointer updated to point to the current slot at "
"each iteration of the loop"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:555
msgid "Iterate over all I3C devs present on the bus."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:564
msgid "``buf``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:566
msgid "``map_len``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:567
msgid "length of DMA mapping"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:568
msgid "mapped DMA address for a Host Controller Driver"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:568
msgid "``dir``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:569
msgid "``bounce_buf``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:570
msgid "an allocated bounce buffer if transfer needs it or NULL"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:617
msgid "get master private data attached to an I3C device descriptor"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:623
msgid "``const struct i3c_dev_desc *dev``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:619
msgid "the I3C device descriptor to get private data from"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:621
msgid ""
"the private data previously attached with i3c_dev_set_master_data() or NULL "
"if no data has been attached to the device."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:630
msgid "attach master private data to an I3C device descriptor"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:632
msgid "the I3C device descriptor to attach private data to"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:634
#: include/linux/i3c/master.h:662
msgid "``void *data``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:633
#: include/linux/i3c/master.h:661
msgid "private data"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:634
msgid ""
"This functions allows a master controller to attach per-device private data "
"which can then be retrieved with i3c_dev_get_master_data()."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:645
msgid "get master private data attached to an I2C device descriptor"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:651
msgid "``const struct i2c_dev_desc *dev``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:647
msgid "the I2C device descriptor to get private data from"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:649
msgid ""
"the private data previously attached with i2c_dev_set_master_data() or NULL "
"if no data has been attached to the device."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:658
msgid "attach master private data to an I2C device descriptor"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:664
#: include/linux/i3c/master.h:691
msgid "``struct i2c_dev_desc *dev``"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:660
msgid "the I2C device descriptor to attach private data to"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:662
msgid ""
"This functions allows a master controller to attach per-device private data "
"which can then be retrieved with i2c_device_get_master_data()."
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:673
#: include/linux/i3c/master.h:685
msgid "get master used to communicate with a device"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:674
msgid "I3C dev"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:676
#: include/linux/i3c/master.h:688
msgid "the master controller driving **dev**"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:686
msgid "I2C dev"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:697
msgid "get the bus attached to a master"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:698
msgid "master object"
msgstr ""

#: ../../../driver-api/i3c/master-driver-api:9: include/linux/i3c/master.h:700
msgid "the I3C bus **master** is connected to"
msgstr ""
