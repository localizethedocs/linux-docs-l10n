# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../driver-api/mailbox.rst:3
msgid "The Common Mailbox Framework"
msgstr ""

#: ../../../driver-api/mailbox.rst:0
msgid "Author"
msgstr ""

#: ../../../driver-api/mailbox.rst:5
msgid "Jassi Brar <jaswinder.singh@linaro.org>"
msgstr ""

#: ../../../driver-api/mailbox.rst:7
msgid ""
"This document aims to help developers write client and controller drivers "
"for the API. But before we start, let us note that the client (especially) "
"and controller drivers are likely going to be very platform specific because "
"the remote firmware is likely to be proprietary and implement non-standard "
"protocol. So even if two platforms employ, say, PL320 controller, the client "
"drivers can't be shared across them. Even the PL320 driver might need to "
"accommodate some platform specific quirks. So the API is meant mainly to "
"avoid similar copies of code written for each platform. Having said that, "
"nothing prevents the remote f/w to also be Linux based and use the same api "
"there. However none of that helps us locally because we only ever deal at "
"client's protocol level."
msgstr ""

#: ../../../driver-api/mailbox.rst:20
msgid ""
"Some of the choices made during implementation are the result of this "
"peculiarity of this \"common\" framework."
msgstr ""

#: ../../../driver-api/mailbox.rst:26
msgid "Controller Driver (See include/linux/mailbox_controller.h)"
msgstr ""

#: ../../../driver-api/mailbox.rst:29
msgid ""
"Allocate mbox_controller and the array of mbox_chan. Populate mbox_chan_ops, "
"except peek_data() all are mandatory. The controller driver might know a "
"message has been consumed by the remote by getting an IRQ or polling some "
"hardware flag or it can never know (the client knows by way of the "
"protocol). The method in order of preference is IRQ -> Poll -> None, which "
"the controller driver should set via 'txdone_irq' or 'txdone_poll' or "
"neither."
msgstr ""

#: ../../../driver-api/mailbox.rst:40
msgid "Client Driver (See include/linux/mailbox_client.h)"
msgstr ""

#: ../../../driver-api/mailbox.rst:43
msgid ""
"The client might want to operate in blocking mode (synchronously send a "
"message through before returning) or non-blocking/async mode (submit a "
"message and a callback function to the API and return immediately)."
msgstr ""
