# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-27 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../driver-api/gpio/index.rst:3
msgid "General Purpose Input/Output (GPIO)"
msgstr ""

#: ../../../driver-api/gpio/index.rst:5
msgid "Contents:"
msgstr ""

#: ../../../driver-api/gpio/index.rst:20
msgid "Core"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:49
msgid "GPIO interrupt controller"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:53
#: include/linux/gpio/driver.h:329 include/linux/gpio/driver.h:712
msgid "**Definition**::"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:92
#: include/linux/gpio/driver.h:368 include/linux/gpio/driver.h:720
msgid "**Members**"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:53
msgid "``chip``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:54
msgid "GPIO IRQ chip implementation, provided by GPIO driver."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:60
msgid "``domain``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:61
msgid ""
"Interrupt translation domain; responsible for mapping between GPIO hwirq "
"number and Linux IRQ number."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:69
#: include/linux/gpio/driver.h:330
msgid "``fwnode``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:70
msgid ""
"Firmware node corresponding to this gpiochip/irqchip, necessary for "
"hierarchical irqdomain support."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:77
msgid "``parent_domain``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:78
msgid ""
"If non-NULL, will be set as the parent of this GPIO interrupt controller's "
"IRQ domain to establish a hierarchical interrupt domain. The presence of "
"this will activate the hierarchical interrupt support."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:87
msgid "``child_to_parent_hwirq``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:88
msgid ""
"This callback translates a child hardware IRQ offset to a parent hardware "
"IRQ offset on a hierarchical interrupt chip. The child hardware IRQs "
"correspond to the GPIO index 0..ngpio-1 (see the ngpio field of struct "
"gpio_chip) and the corresponding parent hardware IRQ and type (such as "
"IRQ_TYPE_*) shall be returned by the driver. The driver can calculate this "
"from an offset or using a lookup table or whatever method is best for this "
"chip. Return 0 on successful translation in the driver."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:97
msgid ""
"If some ranges of hardware IRQs do not have a corresponding parent HWIRQ, "
"return -EINVAL, but also make sure to fill in **valid_mask** and "
"**need_valid_mask** to make these GPIO lines unavailable for translation."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:110
msgid "``populate_parent_alloc_arg``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:111
msgid ""
"This optional callback allocates and populates the specific struct for the "
"parent's IRQ domain. If this is not specified, then :c:type:"
"`gpiochip_populate_parent_fwspec_twocell` will be used. A four-cell variant "
"named :c:type:`gpiochip_populate_parent_fwspec_fourcell` is also available."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:124
msgid "``child_offset_to_irq``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:125
msgid ""
"This optional callback is used to translate the child's GPIO line offset on "
"the GPIO chip to an IRQ number for the GPIO to_irq() callback. If this is "
"not specified, then a default callback will be provided that returns the "
"line offset."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:135
msgid "``child_irq_domain_ops``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:136
msgid ""
"The IRQ domain operations that will be used for this GPIO IRQ chip. If no "
"operations are provided, then default callbacks will be populated to setup "
"the IRQ hierarchy. Some drivers need to supply their own translate function."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:146
msgid "``handler``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:147
msgid ""
"The IRQ handler to use (often a predefined IRQ core function) for GPIO IRQs, "
"provided by GPIO driver."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:154
msgid "``default_type``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:155
msgid ""
"Default IRQ triggering type applied during GPIO driver initialization, "
"provided by GPIO driver."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:162
msgid "``lock_key``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:163
msgid "Per GPIO IRQ chip lockdep class for IRQ lock."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:169
msgid "``request_key``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:170
msgid "Per GPIO IRQ chip lockdep class for IRQ request."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:176
msgid "``parent_handler``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:177
msgid ""
"The interrupt handler for the GPIO chip's parent interrupts, may be NULL if "
"the parent interrupts are nested rather than cascaded."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:1
msgid "``{unnamed_union}``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:2
msgid "anonymous"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:185
msgid "``parent_handler_data``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:186
msgid ""
"If **per_parent_data** is false, **parent_handler_data** is a single pointer "
"used as the data associated with every parent interrupt."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:194
msgid "``parent_handler_data_array``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:195
msgid ""
"If **per_parent_data** is true, **parent_handler_data_array** is an array of "
"**num_parents** pointers, and is used to associate different data for each "
"parent. This cannot be NULL if **per_parent_data** is true."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:205
msgid "``num_parents``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:206
msgid "The number of interrupt parents of a GPIO chip."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:212
msgid "``parents``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:213
msgid ""
"A list of interrupt parents of a GPIO chip. This is owned by the driver, so "
"the core will only reference this list, not modify it."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:220
msgid "``map``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:221
msgid "A list of interrupt parents for each line of a GPIO chip."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:227
msgid "``threaded``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:228
msgid "True if set the interrupt handling uses nested threads."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:234
msgid "``per_parent_data``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:235
msgid ""
"True if parent_handler_data_array describes a **num_parents** sized array to "
"be used as parent data."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:242
msgid "``initialized``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:243
msgid ""
"Flag to track GPIO chip irq member's initialization. This flag will make "
"sure GPIO chip irq members are not used before they are initialized."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:251
msgid "``domain_is_allocated_externally``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:252
msgid ""
"True it the irq_domain was allocated outside of gpiolib, in which case "
"gpiolib won't free the irq_domain itself."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:259
msgid "``init_hw``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:260
msgid ""
"optional routine to initialize hardware before an IRQ chip will be added. "
"This is quite useful when a particular driver wants to clear IRQ related "
"registers in order to avoid undesired events."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:267
#: include/linux/gpio/driver.h:362
msgid "``init_valid_mask``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:268
msgid ""
"optional routine to initialize **valid_mask**, to be used if not all GPIO "
"lines are valid interrupts. Sometimes some lines just cannot fire "
"interrupts, and this routine, when defined, is passed a bitmap in "
"\"valid_mask\" and it will have ngpios bits from 0..(ngpios-1) set to \"1\" "
"as in valid. The callback can then directly set some bits to \"0\" if they "
"cannot be used for interrupts."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:280
msgid "``valid_mask``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:281
msgid ""
"If not ``NULL``, holds bitmask of GPIOs which are valid to be included in "
"IRQ domain of the chip."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:288
msgid "``first``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:289
msgid ""
"Required for static IRQ allocation. If set, irq_domain_create_simple() will "
"allocate and map all IRQs during initialization."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:297
msgid "``irq_enable``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:298
msgid "Store old irq_chip irq_enable callback"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:304
msgid "``irq_disable``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:305
msgid "Store old irq_chip irq_disable callback"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:310
msgid "``irq_unmask``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:311
msgid "Store old irq_chip irq_unmask callback"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:317
msgid "``irq_mask``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:318
msgid "Store old irq_chip irq_mask callback"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:325
msgid "abstract a GPIO controller"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:326
msgid "``label``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:327
msgid ""
"a functional name for the GPIO device, such as a part number or the name of "
"the SoC IP-block implementing it."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:328
msgid "``gpiodev``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:329
msgid "the internal state holder, opaque struct"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:329
msgid "``parent``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:330
msgid "optional parent device providing the GPIOs"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:331
msgid "optional fwnode providing this controller's properties"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:331
msgid "``owner``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:332
msgid "helps prevent removal of modules exporting active GPIOs"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:332
msgid "``request``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:333
msgid ""
"optional hook for chip-specific activation, such as enabling module power "
"and clock; may sleep; must return 0 on success or negative error number on "
"failure"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:335
msgid "``free``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:336
msgid ""
"optional hook for chip-specific deactivation, such as disabling module power "
"and clock; may sleep"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:337
msgid "``get_direction``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:338
msgid ""
"returns direction for signal \"offset\", 0=out, 1=in, (same as "
"GPIO_LINE_DIRECTION_OUT / GPIO_LINE_DIRECTION_IN), or negative error. It is "
"recommended to always implement this function, even on input-only or output-"
"only gpio chips."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:341
msgid "``direction_input``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:342
msgid ""
"configures signal \"offset\" as input, returns 0 on success or a negative "
"error number. This can be omitted on input-only or output-only gpio chips."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:344
msgid "``direction_output``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:345
msgid ""
"configures signal \"offset\" as output, returns 0 on success or a negative "
"error number. This can be omitted on input-only or output-only gpio chips."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:347
msgid "``get``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:348
msgid "returns value for signal \"offset\", 0=low, 1=high, or negative error"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:348
msgid "``get_multiple``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:349
msgid ""
"reads values for multiple signals defined by \"mask\" and stores them in "
"\"bits\", returns 0 on success or negative error"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:350
msgid "``set``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:351
msgid ""
"assigns output value for signal \"offset\", returns 0 on success or negative "
"error value"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:352
msgid "``set_multiple``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:353
msgid ""
"assigns output values for multiple signals defined by \"mask\", returns 0 on "
"success or negative error value"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:354
msgid "``set_config``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:355
msgid ""
"optional hook for all kinds of settings. Uses the same packed config format "
"as generic pinconf. Must return 0 on success and a negative error number on "
"failure."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:357
msgid "``to_irq``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:358
msgid ""
"optional hook supporting non-static gpiod_to_irq() mappings; implementation "
"may not sleep"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:359
msgid "``dbg_show``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:360
msgid ""
"optional routine to show contents in debugfs; default code will be used when "
"this is omitted, but custom code can show extra state (such as pullup/"
"pulldown configuration)."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:363
msgid ""
"optional routine to initialize **valid_mask**, to be used if not all GPIOs "
"are valid."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:364
msgid "``add_pin_ranges``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:365
msgid ""
"optional routine to initialize pin ranges, to be used when requires special "
"mapping of the pins that provides GPIO functionality. It is called after "
"adding GPIO chip and before adding IRQ chip."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:367
msgid "``en_hw_timestamp``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:368
msgid ""
"Dependent on GPIO chip, an optional routine to enable hardware timestamp."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:369
msgid "``dis_hw_timestamp``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:370
msgid ""
"Dependent on GPIO chip, an optional routine to disable hardware timestamp."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:371
msgid "``base``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:372
msgid ""
"identifies the first GPIO number handled by this chip; or, if negative "
"during registration, requests dynamic ID allocation. DEPRECATION: providing "
"anything non-negative and nailing the base offset of GPIO chips is "
"deprecated. Please pass -1 as base to let gpiolib select the chip base in "
"all possible cases. We want to get rid of the static GPIO number space in "
"the long run."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:377
msgid "``ngpio``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:378
msgid ""
"the number of GPIOs handled by this controller; the last GPIO handled is "
"(base + ngpio - 1)."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:379
msgid "``offset``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:380
msgid ""
"when multiple gpio chips belong to the same device this can be used as "
"offset within the device so friendly names can be properly assigned."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:382
msgid "``names``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:383
msgid ""
"if set, must be an array of strings to use as alternative names for the "
"GPIOs in this chip. Any entry in the array may be NULL if there is no alias "
"for the GPIO, however the array must be **ngpio** entries long."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:386
msgid "``can_sleep``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:387
msgid ""
"flag must be set iff get()/set() methods sleep, as they must while accessing "
"GPIO expander chips over I2C or SPI. This implies that if the chip supports "
"IRQs, these IRQs need to be threaded as the chip access may sleep when e.g. "
"reading out the IRQ status registers."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:463
msgid "``irq``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:464
msgid ""
"Integrates interrupt chip functionality with the GPIO chip. Can be used to "
"handle IRQs for most practical cases."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:478
msgid "``of_gpio_n_cells``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:479
msgid ""
"Number of cells used to form the GPIO specifier. The standard is 2 cells:"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:482
msgid "gpios = <:c:type:`gpio` offset flags>;"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:484
msgid ""
"some complex GPIO controllers instantiate more than one chip per device tree "
"node and have 3 cells:"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:487
msgid "gpios = <:c:type:`gpio` instance offset flags>;"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:489
msgid "Legacy GPIO controllers may even have 1 cell:"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:491
msgid "gpios = <:c:type:`gpio` offset>;"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:497
msgid "``of_node_instance_match``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:498
msgid ""
"Determine if a chip is the right instance. Must be implemented by any driver "
"using more than one gpio_chip per device tree node. Returns true if gc is "
"the instance indicated by i (which is the first cell in the phandles for "
"GPIO lines and gpio-ranges)."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:507
msgid "``of_xlate``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:508
msgid ""
"Callback to translate a device tree GPIO specifier into a chip- relative "
"GPIO number and flags."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:512
#: include/linux/gpio/driver.h:588 ../../../driver-api/gpio/index:25:
#: drivers/gpio/gpiolib.c:206 drivers/gpio/gpiolib.c:226
#: drivers/gpio/gpiolib.c:243 drivers/gpio/gpiolib.c:265
#: drivers/gpio/gpiolib.c:314 drivers/gpio/gpiolib.c:429
#: drivers/gpio/gpiolib.c:788 drivers/gpio/gpiolib.c:1268
#: drivers/gpio/gpiolib.c:1315 drivers/gpio/gpiolib.c:1426
#: drivers/gpio/gpiolib.c:2201 drivers/gpio/gpiolib.c:2302
#: drivers/gpio/gpiolib.c:2362 drivers/gpio/gpiolib.c:2559
#: drivers/gpio/gpiolib.c:2600 drivers/gpio/gpiolib.c:2646
#: drivers/gpio/gpiolib.c:2823 drivers/gpio/gpiolib.c:2969
#: drivers/gpio/gpiolib.c:2995 drivers/gpio/gpiolib.c:3477
#: drivers/gpio/gpiolib.c:3497 drivers/gpio/gpiolib.c:3527
#: drivers/gpio/gpiolib.c:3556 drivers/gpio/gpiolib.c:3825
#: drivers/gpio/gpiolib.c:3873 drivers/gpio/gpiolib.c:3898
#: drivers/gpio/gpiolib.c:3926 drivers/gpio/gpiolib.c:4037
#: drivers/gpio/gpiolib.c:4086 drivers/gpio/gpiolib.c:4196
#: drivers/gpio/gpiolib.c:4214 drivers/gpio/gpiolib.c:4241
#: drivers/gpio/gpiolib.c:4270 drivers/gpio/gpiolib.c:4297
#: drivers/gpio/gpiolib.c:4318 drivers/gpio/gpiolib.c:4341
#: drivers/gpio/gpiolib.c:4384 drivers/gpio/gpiolib.c:4713
#: drivers/gpio/gpiolib.c:4788 drivers/gpio/gpiolib.c:4887
#: drivers/gpio/gpiolib.c:4916 drivers/gpio/gpiolib.c:5004
#: drivers/gpio/gpiolib.c:5136 drivers/gpio/gpiolib.c:5163
#: ../../../driver-api/gpio/index:31: drivers/gpio/gpiolib-acpi-core.c:454
#: drivers/gpio/gpiolib-acpi-core.c:494 drivers/gpio/gpiolib-acpi-core.c:980
#: ../../../driver-api/gpio/index:37: drivers/gpio/gpiolib-of.c:455
#: drivers/gpio/gpiolib-of.c:1042 ../../../driver-api/gpio/index:43:
#: drivers/gpio/gpiolib-devres.c:38 drivers/gpio/gpiolib-devres.c:61
#: drivers/gpio/gpiolib-devres.c:85 drivers/gpio/gpiolib-devres.c:135
#: drivers/gpio/gpiolib-devres.c:171 drivers/gpio/gpiolib-devres.c:202
#: drivers/gpio/gpiolib-devres.c:237 drivers/gpio/gpiolib-devres.c:267
#: drivers/gpio/gpiolib-devres.c:282 drivers/gpio/gpiolib-devres.c:316
#: drivers/gpio/gpiolib-devres.c:343 ../../../driver-api/gpio/index:49:
#: drivers/gpio/gpiolib-sysfs.c:717 drivers/gpio/gpiolib-sysfs.c:890
#: drivers/gpio/gpiolib-sysfs.c:926
msgid "**Description**"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:391
msgid ""
"A gpio_chip can help platforms abstract various sources of GPIOs so they can "
"all be accessed through a common programming interface. Example sources "
"would be SOC controllers, FPGAs, multifunction chips, dedicated GPIO "
"expanders, and so on."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:396
msgid ""
"Each chip controls a number of signals, identified in method calls by "
"\"offset\" values in the range 0..(**ngpio** - 1).  When those signals are "
"referenced through calls like gpio_get_value(gpio), the offset is calculated "
"by subtracting **base** from the gpio number."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:538
msgid "``for_each_hwgpio_in_range (_chip, _i, _base, _size, _label)``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:536
msgid "Iterates over all GPIOs in a given range"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:540
#: include/linux/gpio/driver.h:555 include/linux/gpio/driver.h:565
#: include/linux/gpio/driver.h:586 ../../../driver-api/gpio/index:25:
#: drivers/gpio/gpiolib.c:169 drivers/gpio/gpiolib.c:201
#: drivers/gpio/gpiolib.c:227 drivers/gpio/gpiolib.c:244
#: drivers/gpio/gpiolib.c:265 drivers/gpio/gpiolib.c:286
#: drivers/gpio/gpiolib.c:299 drivers/gpio/gpiolib.c:313
#: drivers/gpio/gpiolib.c:394 drivers/gpio/gpiolib.c:428
#: drivers/gpio/gpiolib.c:787 drivers/gpio/gpiolib.c:973
#: drivers/gpio/gpiolib.c:1269 drivers/gpio/gpiolib.c:1313
#: drivers/gpio/gpiolib.c:1367 drivers/gpio/gpiolib.c:1387
#: drivers/gpio/gpiolib.c:1402 drivers/gpio/gpiolib.c:1415
#: drivers/gpio/gpiolib.c:1426 drivers/gpio/gpiolib.c:2201
#: drivers/gpio/gpiolib.c:2242 drivers/gpio/gpiolib.c:2261
#: drivers/gpio/gpiolib.c:2277 drivers/gpio/gpiolib.c:2300
#: drivers/gpio/gpiolib.c:2356 drivers/gpio/gpiolib.c:2424
#: drivers/gpio/gpiolib.c:2555 drivers/gpio/gpiolib.c:2594
#: drivers/gpio/gpiolib.c:2647 drivers/gpio/gpiolib.c:2824
#: drivers/gpio/gpiolib.c:2969 drivers/gpio/gpiolib.c:2995
#: drivers/gpio/gpiolib.c:3083 drivers/gpio/gpiolib.c:3116
#: drivers/gpio/gpiolib.c:3150 drivers/gpio/gpiolib.c:3188
#: drivers/gpio/gpiolib.c:3229 drivers/gpio/gpiolib.c:3243
#: drivers/gpio/gpiolib.c:3475 drivers/gpio/gpiolib.c:3495
#: drivers/gpio/gpiolib.c:3525 drivers/gpio/gpiolib.c:3554
#: drivers/gpio/gpiolib.c:3825 drivers/gpio/gpiolib.c:3873
#: drivers/gpio/gpiolib.c:3896 drivers/gpio/gpiolib.c:3924
#: drivers/gpio/gpiolib.c:3953 drivers/gpio/gpiolib.c:3967
#: drivers/gpio/gpiolib.c:3989 drivers/gpio/gpiolib.c:4037
#: drivers/gpio/gpiolib.c:4086 drivers/gpio/gpiolib.c:4194
#: drivers/gpio/gpiolib.c:4212 drivers/gpio/gpiolib.c:4239
#: drivers/gpio/gpiolib.c:4268 drivers/gpio/gpiolib.c:4297
#: drivers/gpio/gpiolib.c:4318 drivers/gpio/gpiolib.c:4339
#: drivers/gpio/gpiolib.c:4382 drivers/gpio/gpiolib.c:4418
#: drivers/gpio/gpiolib.c:4428 drivers/gpio/gpiolib.c:4444
#: drivers/gpio/gpiolib.c:4710 drivers/gpio/gpiolib.c:4741
#: drivers/gpio/gpiolib.c:4769 drivers/gpio/gpiolib.c:4787
#: drivers/gpio/gpiolib.c:4885 drivers/gpio/gpiolib.c:4913
#: drivers/gpio/gpiolib.c:5003 drivers/gpio/gpiolib.c:5134
#: drivers/gpio/gpiolib.c:5164 drivers/gpio/gpiolib.c:5176
#: ../../../driver-api/gpio/index:31: drivers/gpio/gpiolib-acpi-core.c:197
#: drivers/gpio/gpiolib-acpi-core.c:455 drivers/gpio/gpiolib-acpi-core.c:495
#: drivers/gpio/gpiolib-acpi-core.c:978 ../../../driver-api/gpio/index:37:
#: drivers/gpio/gpiolib-of.c:454 drivers/gpio/gpiolib-of.c:1041
#: drivers/gpio/gpiolib-of.c:1103 ../../../driver-api/gpio/index:43:
#: drivers/gpio/gpiolib-devres.c:37 drivers/gpio/gpiolib-devres.c:60
#: drivers/gpio/gpiolib-devres.c:83 drivers/gpio/gpiolib-devres.c:131
#: drivers/gpio/gpiolib-devres.c:169 drivers/gpio/gpiolib-devres.c:201
#: drivers/gpio/gpiolib-devres.c:236 drivers/gpio/gpiolib-devres.c:267
#: drivers/gpio/gpiolib-devres.c:282 drivers/gpio/gpiolib-devres.c:316
#: drivers/gpio/gpiolib-devres.c:338 ../../../driver-api/gpio/index:49:
#: drivers/gpio/gpiolib-sysfs.c:716 drivers/gpio/gpiolib-sysfs.c:889
#: drivers/gpio/gpiolib-sysfs.c:927
msgid "**Parameters**"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:542
#: include/linux/gpio/driver.h:557 include/linux/gpio/driver.h:567
msgid "``_chip``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:537
#: include/linux/gpio/driver.h:552
msgid "Chip to iterate over."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:539
#: include/linux/gpio/driver.h:554 include/linux/gpio/driver.h:564
msgid "``_i``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:538
#: include/linux/gpio/driver.h:553
msgid "Loop counter."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:540
#: include/linux/gpio/driver.h:565
msgid "``_base``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:539
msgid "First GPIO in the ranger."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:541
#: include/linux/gpio/driver.h:566
msgid "``_size``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:540
msgid "Amount of GPIOs to check starting from **base**."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:542
#: include/linux/gpio/driver.h:555 include/linux/gpio/driver.h:567
msgid "``_label``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:541
#: include/linux/gpio/driver.h:554
msgid ""
"Place to store the address of the label if the GPIO is requested. Set to "
"NULL for unused GPIOs."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:553
msgid "``for_each_hwgpio (_chip, _i, _label)``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:551
msgid "Iterates over all GPIOs for given chip."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:563
msgid "``for_each_requested_gpio_in_range (_chip, _i, _base, _size, _label)``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:561
msgid "iterates over requested GPIOs in a given range"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:562
msgid "the chip to query"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:563
msgid "loop variable"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:564
msgid "first GPIO in the range"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:565
msgid "amount of GPIOs to check starting from **base**"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:566
msgid "label of current GPIO"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:584
msgid "``gpiochip_add_data (gc, data)``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:582
msgid "register a gpio_chip"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:588
msgid "``gc``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:583
msgid "the chip to register, with gc->base initialized"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:585
msgid "``data``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:584
#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:337
msgid "driver-private data associated with this chip"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:586
#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:341
#: ../../../driver-api/gpio/index:49: drivers/gpio/gpiolib-sysfs.c:716
msgid "**Context**"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:586
#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:341
msgid "potentially before irqs will work"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:587
msgid ""
"When gpiochip_add_data() is called very early during boot, so that GPIOs can "
"be freely used, the gc->parent device must be registered before the gpio "
"framework's arch_initcall().  Otherwise sysfs initialization for GPIOs will "
"fail rudely."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:592
msgid ""
"gpiochip_add_data() must only be called after gpiolib initialization, i.e. "
"after core_initcall()."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:595
msgid ""
"If gc->base is negative, this requests dynamic assignment of a range of "
"valid GPIOs."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:598
#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:168
#: drivers/gpio/gpiolib.c:202 drivers/gpio/gpiolib.c:228
#: drivers/gpio/gpiolib.c:247 drivers/gpio/gpiolib.c:268
#: drivers/gpio/gpiolib.c:285 drivers/gpio/gpiolib.c:298
#: drivers/gpio/gpiolib.c:312 drivers/gpio/gpiolib.c:394
#: drivers/gpio/gpiolib.c:427 drivers/gpio/gpiolib.c:786
#: drivers/gpio/gpiolib.c:972 drivers/gpio/gpiolib.c:1313
#: drivers/gpio/gpiolib.c:1367 drivers/gpio/gpiolib.c:1387
#: drivers/gpio/gpiolib.c:1401 drivers/gpio/gpiolib.c:1428
#: drivers/gpio/gpiolib.c:2202 drivers/gpio/gpiolib.c:2242
#: drivers/gpio/gpiolib.c:2278 drivers/gpio/gpiolib.c:2306
#: drivers/gpio/gpiolib.c:2366 drivers/gpio/gpiolib.c:2555
#: drivers/gpio/gpiolib.c:2605 drivers/gpio/gpiolib.c:2825
#: drivers/gpio/gpiolib.c:2972 drivers/gpio/gpiolib.c:2999
#: drivers/gpio/gpiolib.c:3084 drivers/gpio/gpiolib.c:3117
#: drivers/gpio/gpiolib.c:3150 drivers/gpio/gpiolib.c:3188
#: drivers/gpio/gpiolib.c:3228 drivers/gpio/gpiolib.c:3474
#: drivers/gpio/gpiolib.c:3494 drivers/gpio/gpiolib.c:3532
#: drivers/gpio/gpiolib.c:3561 drivers/gpio/gpiolib.c:3830
#: drivers/gpio/gpiolib.c:3878 drivers/gpio/gpiolib.c:3903
#: drivers/gpio/gpiolib.c:3931 drivers/gpio/gpiolib.c:3952
#: drivers/gpio/gpiolib.c:3967 drivers/gpio/gpiolib.c:3988
#: drivers/gpio/gpiolib.c:4039 drivers/gpio/gpiolib.c:4193
#: drivers/gpio/gpiolib.c:4211 drivers/gpio/gpiolib.c:4245
#: drivers/gpio/gpiolib.c:4274 drivers/gpio/gpiolib.c:4301
#: drivers/gpio/gpiolib.c:4322 drivers/gpio/gpiolib.c:4345
#: drivers/gpio/gpiolib.c:4388 drivers/gpio/gpiolib.c:4722
#: drivers/gpio/gpiolib.c:4741 drivers/gpio/gpiolib.c:4770
#: drivers/gpio/gpiolib.c:4791 drivers/gpio/gpiolib.c:4889
#: drivers/gpio/gpiolib.c:4919 drivers/gpio/gpiolib.c:5005
#: drivers/gpio/gpiolib.c:5138 ../../../driver-api/gpio/index:31:
#: drivers/gpio/gpiolib-acpi-core.c:198 drivers/gpio/gpiolib-acpi-core.c:992
#: ../../../driver-api/gpio/index:37: drivers/gpio/gpiolib-of.c:456
#: drivers/gpio/gpiolib-of.c:1055 ../../../driver-api/gpio/index:43:
#: drivers/gpio/gpiolib-devres.c:41 drivers/gpio/gpiolib-devres.c:64
#: drivers/gpio/gpiolib-devres.c:88 drivers/gpio/gpiolib-devres.c:137
#: drivers/gpio/gpiolib-devres.c:175 drivers/gpio/gpiolib-devres.c:205
#: drivers/gpio/gpiolib-devres.c:241 drivers/gpio/gpiolib-devres.c:344
#: ../../../driver-api/gpio/index:49: drivers/gpio/gpiolib-sysfs.c:723
#: drivers/gpio/gpiolib-sysfs.c:892
msgid "**Return**"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:599
#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:345
msgid ""
"A negative errno if the chip can't be registered, such as because the gc-"
">base is invalid or already associated with a different chip. Otherwise it "
"returns zero as a success code."
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:708
msgid "pin range controlled by a gpio chip"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:709
msgid "``node``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:710
msgid "list for maintaining set of pin ranges, used internally"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:710
msgid "``pctldev``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:711
msgid "pinctrl device which handles corresponding pins"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:711
msgid "``range``"
msgstr ""

#: ../../../driver-api/gpio/index:22: include/linux/gpio/driver.h:712
msgid "actual range of pins controlled by a gpio controller"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:165
msgid "Convert a GPIO number to its descriptor"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:171
msgid "``unsigned gpio``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:166
msgid "global GPIO number"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:168
msgid ""
"The GPIO descriptor associated with the given GPIO, or ``NULL`` if no GPIO "
"with the given number exists in the system."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:197
msgid ""
"get the GPIO descriptor corresponding to the given hardware number for this "
"GPIO device"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:203
#: drivers/gpio/gpiolib.c:288 drivers/gpio/gpiolib.c:301
#: drivers/gpio/gpiolib.c:315 drivers/gpio/gpiolib.c:1404
#: drivers/gpio/gpiolib.c:1417 drivers/gpio/gpiolib.c:1428
msgid "``struct gpio_device *gdev``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:199
msgid "GPIO device to get the descriptor from"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:201
#: drivers/gpio/gpiolib.c:2593
msgid "``unsigned int hwnum``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:200
msgid "hardware number of the GPIO for this chip"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:202
msgid ""
"A pointer to the GPIO descriptor or ``EINVAL`` if no GPIO exists in the "
"given chip for the specified hardware number or ``ENODEV`` if the underlying "
"chip already vanished."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:206
msgid ""
"The reference count of struct gpio_device is *NOT* increased like when the "
"GPIO is being requested for exclusive usage. It's up to the caller to make "
"sure the GPIO device will stay alive together with the descriptor returned "
"by this function."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:223
msgid "convert a GPIO descriptor to the integer namespace"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:229
#: drivers/gpio/gpiolib.c:246 drivers/gpio/gpiolib.c:396
#: drivers/gpio/gpiolib.c:3231 drivers/gpio/gpiolib.c:3477
#: drivers/gpio/gpiolib.c:3497 drivers/gpio/gpiolib.c:3955
#: drivers/gpio/gpiolib.c:3991 drivers/gpio/gpiolib.c:4196
#: drivers/gpio/gpiolib.c:4214
msgid "``const struct gpio_desc *desc``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:224
msgid "GPIO descriptor"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:225
msgid ""
"This should disappear in the future but is needed since we still use GPIO "
"numbers for error messages and sysfs nodes."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:229
msgid "The global GPIO number for the GPIO specified by its descriptor."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:240
msgid "Return the GPIO chip to which a GPIO descriptor belongs"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:241
msgid "descriptor to return the chip of"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:242
msgid ""
"*DEPRECATED* This function is unsafe and should not be used. Using the chip "
"address without taking the SRCU read lock may result in dereferencing a "
"dangling pointer."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:248
#: drivers/gpio/gpiolib.c:312
msgid "Address of the GPIO chip backing this device."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:261
msgid "Return the GPIO device to which this descriptor belongs."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:267
#: drivers/gpio/gpiolib.c:430 drivers/gpio/gpiolib.c:2649
#: drivers/gpio/gpiolib.c:2826 drivers/gpio/gpiolib.c:2971
#: drivers/gpio/gpiolib.c:2997 drivers/gpio/gpiolib.c:3085
#: drivers/gpio/gpiolib.c:3118 drivers/gpio/gpiolib.c:3152
#: drivers/gpio/gpiolib.c:3190 drivers/gpio/gpiolib.c:3245
#: drivers/gpio/gpiolib.c:3827 drivers/gpio/gpiolib.c:3875
#: drivers/gpio/gpiolib.c:3969 drivers/gpio/gpiolib.c:4299
#: drivers/gpio/gpiolib.c:4320 drivers/gpio/gpiolib.c:5166
#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:266
#: drivers/gpio/gpiolib-devres.c:281 ../../../driver-api/gpio/index:49:
#: drivers/gpio/gpiolib-sysfs.c:718 drivers/gpio/gpiolib-sysfs.c:889
#: drivers/gpio/gpiolib-sysfs.c:929
msgid "``struct gpio_desc *desc``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:263
msgid "Descriptor for which to return the GPIO device."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:264
msgid ""
"This *DOES NOT* increase the reference count of the GPIO device as it's "
"expected that the descriptor is requested and the users already holds a "
"reference to the device."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:269
msgid "Address of the GPIO device owning this descriptor."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:282
msgid "Get the base GPIO number allocated by this device"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:283
#: drivers/gpio/gpiolib.c:296 drivers/gpio/gpiolib.c:310
msgid "GPIO device"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:285
msgid "First GPIO number in the global GPIO numberspace for this device."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:295
msgid "Get the label of this GPIO device"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:298
msgid ""
"Pointer to the string containing the GPIO device label. The string's "
"lifetime is tied to that of the underlying GPIO device."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:309
msgid "Get the gpio_chip implementation of this GPIO device"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:314
msgid ""
"*DEPRECATED* Until we can get rid of all non-driver users of struct "
"gpio_chip, we must provide a way of retrieving the pointer to it from struct "
"gpio_device. This is *NOT* safe as the GPIO API is considered to be hot-"
"unpluggable and the chip can dissapear at any moment (unlike reference-"
"counted struct gpio_device)."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:321
msgid "Use at your own risk."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:390
msgid "Check if two GPIO descriptors refer to the same pin."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:391
msgid "Descriptor to compare."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:393
msgid "``const struct gpio_desc *other``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:392
msgid "The second descriptor to compare against."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:394
msgid ""
"True if the descriptors refer to the same physical pin. False otherwise."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:424
msgid "return the current direction of a GPIO"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:425
msgid "GPIO to get the direction of"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:427
msgid "0 for output, 1 for input, or an error code in case of error."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:429
msgid "This function may sleep if gpiod_cansleep() is true."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:783
msgid "return the GPIO validity information"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:789
msgid "``const struct gpio_chip *gc``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:784
msgid "gpio chip which validity information is queried"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:786
msgid "bitmap representing valid GPIOs or NULL if all GPIOs are valid"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:787
msgid ""
"Some GPIO chips may support configurations where some of the pins aren't "
"available. These chips can have valid_mask set to represent the valid GPIOs. "
"This function can be used to retrieve this information."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:969
msgid "get per-subdriver data for the chip"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:975
#: drivers/gpio/gpiolib.c:1271 drivers/gpio/gpiolib.c:2203
#: drivers/gpio/gpiolib.c:2244 drivers/gpio/gpiolib.c:2263
#: drivers/gpio/gpiolib.c:2279 drivers/gpio/gpiolib.c:2302
#: drivers/gpio/gpiolib.c:2358 drivers/gpio/gpiolib.c:2426
#: drivers/gpio/gpiolib.c:2557 drivers/gpio/gpiolib.c:2596
#: drivers/gpio/gpiolib.c:4039 drivers/gpio/gpiolib.c:4088
#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:337
msgid "``struct gpio_chip *gc``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:970
#: drivers/gpio/gpiolib.c:2591 ../../../driver-api/gpio/index:31:
#: drivers/gpio/gpiolib-acpi-core.c:452 drivers/gpio/gpiolib-acpi-core.c:492
msgid "GPIO chip"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:972
msgid "The per-subdriver data for the chip."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:1265
msgid "unregister a gpio_chip"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:1266
msgid "the chip to unregister"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:1267
msgid "A gpio_chip with any GPIOs still requested may not be removed."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:1309
msgid "find a specific GPIO device"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:1315
msgid "``const void *data``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:1310
msgid "data to pass to match function"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:1312
msgid "``int (*match)(struct gpio_chip *gc, const void *data)``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:1311
msgid "Callback function to check gpio_chip"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:1313
msgid "New reference to struct gpio_device."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:1315
msgid ""
"Similar to bus_find_device(). It returns a reference to a gpio_device as "
"determined by a user supplied **match** callback. The callback should return "
"0 if the device doesn't match and non-zero if it does. If the callback "
"returns non-zero, this function will return to the caller and not iterate "
"over any more gpio_devices."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:1321
msgid ""
"The callback takes the GPIO chip structure as argument. During the execution "
"of the callback function the chip is protected from being freed. TODO: This "
"actually has yet to be implemented."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:1325
msgid ""
"If the function returns non-NULL, the returned reference must be freed by "
"the caller using gpio_device_put()."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:1363
msgid ""
"wrapper around gpio_device_find() finding the GPIO device by its backing "
"chip's label"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:1369
#: drivers/gpio/gpiolib.c:2594 drivers/gpio/gpiolib.c:4712
#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:134
msgid "``const char *label``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:1365
msgid "Label to lookup"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:1367
#: drivers/gpio/gpiolib.c:1387
msgid ""
"Reference to the GPIO device or NULL. Reference must be released with "
"gpio_device_put()."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:1383
msgid "wrapper around gpio_device_find() finding the GPIO device by its fwnode"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:1389
msgid "``const struct fwnode_handle *fwnode``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:1385
msgid "Firmware node to lookup"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:1398
msgid "Increase the reference count of this GPIO device"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:1399
msgid "GPIO device to increase the refcount for"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:1401
msgid "Pointer to **gdev**."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:1411
msgid ""
"Decrease the reference count of this GPIO device and possibly free all "
"resources associated with it."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:1413
msgid "GPIO device to decrease the reference count for"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:1422
msgid "Retrieve the address of the underlying struct device."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:1424
msgid "GPIO device for which to return the address."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:1425
msgid ""
"This does not increase the reference count of the GPIO device nor the "
"underlying struct device."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:1429
msgid "Address of struct device backing this GPIO device."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2197
msgid "adds an irqdomain to a gpiochip"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2198
msgid "the gpiochip to add the irqchip to"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2200
msgid "``struct irq_domain *domain``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2199
msgid "the irqdomain to add to the gpiochip"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2200
msgid "This function adds an IRQ domain to the gpiochip."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2203
#: drivers/gpio/gpiolib.c:2242 drivers/gpio/gpiolib.c:2278
#: drivers/gpio/gpiolib.c:2307 drivers/gpio/gpiolib.c:2826
#: drivers/gpio/gpiolib.c:2973 drivers/gpio/gpiolib.c:3000
#: drivers/gpio/gpiolib.c:3084 drivers/gpio/gpiolib.c:3117
#: drivers/gpio/gpiolib.c:3533 drivers/gpio/gpiolib.c:3562
#: drivers/gpio/gpiolib.c:3904 drivers/gpio/gpiolib.c:3932
#: drivers/gpio/gpiolib.c:3967 drivers/gpio/gpiolib.c:4040
#: drivers/gpio/gpiolib.c:4246 drivers/gpio/gpiolib.c:4275
#: drivers/gpio/gpiolib.c:4346 drivers/gpio/gpiolib.c:4389
#: ../../../driver-api/gpio/index:37: drivers/gpio/gpiolib-of.c:1056
#: ../../../driver-api/gpio/index:49: drivers/gpio/gpiolib-sysfs.c:724
#: drivers/gpio/gpiolib-sysfs.c:893
msgid "0 on success, or negative errno on failure."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2238
msgid "request the gpio function for a pin"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2239
#: drivers/gpio/gpiolib.c:2274
msgid "the gpiochip owning the GPIO"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2241
#: drivers/gpio/gpiolib.c:2260 drivers/gpio/gpiolib.c:2276
#: drivers/gpio/gpiolib.c:2554 drivers/gpio/gpiolib.c:4036
#: drivers/gpio/gpiolib.c:4085
msgid "``unsigned int offset``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2240
msgid "the offset of the GPIO to request for GPIO function"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2257
msgid "free the gpio function from a pin"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2258
msgid "the gpiochip to request the gpio function for"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2259
msgid "the offset of the GPIO to free from GPIO function"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2273
msgid "apply configuration for a pin"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2275
msgid "the offset of the GPIO to apply the configuration"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2277
#: drivers/gpio/gpiolib.c:3149
msgid "``unsigned long config``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2276
msgid "the configuration to be applied"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2296
#: drivers/gpio/gpiolib.c:2352
msgid "add a range for GPIO <-> pin mapping"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2297
#: drivers/gpio/gpiolib.c:2353
msgid "the gpiochip to add the range for"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2299
msgid "``struct pinctrl_dev *pctldev``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2298
msgid "the pin controller to map to"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2300
#: drivers/gpio/gpiolib.c:2356
msgid "``unsigned int gpio_offset``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2299
#: drivers/gpio/gpiolib.c:2355
msgid "the start offset in the current gpio_chip number space"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2301
msgid "``const char *pin_group``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2300
msgid "name of the pin group inside the pin controller"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2301
#: drivers/gpio/gpiolib.c:2361
msgid ""
"Calling this function directly from a DeviceTree-supported pinctrl driver is "
"DEPRECATED. Please see Section 2.1 of Documentation/devicetree/bindings/gpio/"
"gpio.txt on how to bind pinctrl and gpio drivers via the \"gpio-ranges\" "
"property."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2355
msgid "``const char *pinctl_name``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2354
msgid "the dev_name() of the pin controller to map to"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2357
msgid "``unsigned int pin_offset``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2356
msgid "the start offset in the pin controller number space"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2358
msgid "``unsigned int const *pins``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2357
msgid ""
"the list of non consecutive pins to accumulate in this range (if not NULL, "
"pin_offset is ignored by pinctrl core)"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2360
msgid "``unsigned int npins``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2359
msgid ""
"the number of pins from the offset of each pin space (GPIO and pin "
"controller) to accumulate in this range"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2367
msgid "0 on success, or a negative errno on failure."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2420
msgid "remove all the GPIO <-> pin mappings"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2421
msgid "the chip to remove all the mappings for"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2551
msgid "Get a copy of the consumer label."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2552
msgid "GPIO chip controlling this line."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2553
msgid "Hardware offset of the line."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2555
msgid ""
"Pointer to a copy of the consumer label if the line is requested or NULL if "
"it's not. If a valid pointer was returned, it must be freed using kfree(). "
"In case of a memory allocation error, the function returns ``ENOMEM``."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2559
msgid "Must not be called from atomic context."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2590
msgid "Allow GPIO chip to request its own descriptor"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2592
msgid "hardware number of the GPIO for which to request the descriptor"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2593
msgid "label for the GPIO"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2595
msgid "``enum gpio_lookup_flags lflags``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2594
msgid ""
"lookup flags for this GPIO or 0 if default, this can be used to specify "
"things like line inversion semantics with the machine flags such as "
"GPIO_OUT_LOW"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2598
msgid "``enum gpiod_flags dflags``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2597
msgid ""
"descriptor request flags for this GPIO or 0 if default, this can be used to "
"specify consumer semantics such as open drain"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2599
msgid ""
"Function allows GPIO chip drivers to request and use their own GPIO "
"descriptors via gpiolib API. Difference to gpiod_request() is that this "
"function will not increase reference count of the GPIO chip module. This "
"allows the GPIO chip module to be unloaded as needed (we assume that the "
"GPIO chip driver handles freeing the GPIOs it has requested)."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2606
msgid ""
"A pointer to the GPIO descriptor, or an ERR_PTR()-encoded negative error "
"code on failure."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2643
msgid "Free GPIO requested by the chip driver"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2644
msgid "GPIO descriptor to free"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2645
msgid ""
"Function frees the given GPIO requested previously with "
"gpiochip_request_own_desc()."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2820
msgid "set the GPIO direction to input"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2821
msgid "GPIO to set to input"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2822
msgid ""
"Set the direction of the passed GPIO to input, such as gpiod_get_value() can "
"be called safely on it."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2965
#: drivers/gpio/gpiolib.c:2991
msgid "set the GPIO direction to output"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2966
#: drivers/gpio/gpiolib.c:2992
msgid "GPIO to set to output"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2968
#: drivers/gpio/gpiolib.c:2994 drivers/gpio/gpiolib.c:3824
#: drivers/gpio/gpiolib.c:3872 drivers/gpio/gpiolib.c:4296
#: drivers/gpio/gpiolib.c:4317
msgid "``int value``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2967
#: drivers/gpio/gpiolib.c:2993
msgid "initial output value of the GPIO"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2968
msgid ""
"Set the direction of the passed GPIO to output, such as gpiod_set_value() "
"can be called safely on it. The initial value of the output must be "
"specified as raw value on the physical line without regard for the "
"ACTIVE_LOW status."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:2994
msgid ""
"Set the direction of the passed GPIO to output, such as gpiod_set_value() "
"can be called safely on it. The initial value of the output must be "
"specified as the logical value of the GPIO, i.e. taking its ACTIVE_LOW "
"status into account."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3079
msgid "Enable hardware timestamp in nanoseconds."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3081
msgid "GPIO to enable."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3083
#: drivers/gpio/gpiolib.c:3116
msgid "``unsigned long flags``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3082
msgid "Flags related to GPIO edge."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3112
msgid "Disable hardware timestamp."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3114
msgid "GPIO to disable."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3115
msgid "Flags related to GPIO edge, same value as used during enable call."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3146
msgid "sets **config** for a GPIO"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3147
msgid "descriptor of the GPIO for which to set the configuration"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3148
msgid "Same packed config format as generic pinconf"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3150
msgid ""
"0 on success, ``-ENOTSUPP`` if the controller doesn't support setting the "
"configuration."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3184
msgid "sets **debounce** time for a GPIO"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3185
msgid "descriptor of the GPIO for which to set debounce time"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3187
msgid "``unsigned int debounce``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3186
msgid "debounce time in microseconds"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3188
msgid ""
"0 on success, ``-ENOTSUPP`` if the controller doesn't support setting the "
"debounce time."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3225
msgid "test whether a GPIO is active-low or not"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3226
msgid "the gpio descriptor to test"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3228
msgid "1 if the GPIO is active-low, 0 otherwise."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3239
msgid "toggle whether a GPIO is active-low or not"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3240
msgid "the gpio descriptor to change"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3471
#: drivers/gpio/gpiolib.c:4190
msgid "return a gpio's raw value"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3472
#: drivers/gpio/gpiolib.c:3492 drivers/gpio/gpiolib.c:4191
#: drivers/gpio/gpiolib.c:4209
msgid "gpio whose value will be returned"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3474
#: drivers/gpio/gpiolib.c:4193
msgid ""
"The GPIO's raw value, i.e. the value of the physical line disregarding its "
"ACTIVE_LOW status, or negative errno on failure."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3477
#: drivers/gpio/gpiolib.c:3497 drivers/gpio/gpiolib.c:3827
#: drivers/gpio/gpiolib.c:3875 drivers/gpio/gpiolib.c:3900
#: drivers/gpio/gpiolib.c:3928
msgid ""
"This function can be called from contexts where we cannot sleep, and will "
"complain if the GPIO chip functions potentially sleep."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3491
#: drivers/gpio/gpiolib.c:4208
msgid "return a gpio's value"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3494
#: drivers/gpio/gpiolib.c:4211
msgid ""
"The GPIO's logical value, i.e. taking the ACTIVE_LOW status into account, or "
"negative errno on failure."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3521
#: drivers/gpio/gpiolib.c:4235
msgid "read raw values from an array of GPIOs"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3527
#: drivers/gpio/gpiolib.c:3556 drivers/gpio/gpiolib.c:3898
#: drivers/gpio/gpiolib.c:3926 drivers/gpio/gpiolib.c:4241
#: drivers/gpio/gpiolib.c:4270 drivers/gpio/gpiolib.c:4341
#: drivers/gpio/gpiolib.c:4384
msgid "``unsigned int array_size``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3522
#: drivers/gpio/gpiolib.c:3551 drivers/gpio/gpiolib.c:3893
#: drivers/gpio/gpiolib.c:3921 drivers/gpio/gpiolib.c:4236
#: drivers/gpio/gpiolib.c:4265 drivers/gpio/gpiolib.c:4336
#: drivers/gpio/gpiolib.c:4379
msgid "number of elements in the descriptor array / value bitmap"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3524
#: drivers/gpio/gpiolib.c:3553 drivers/gpio/gpiolib.c:3895
#: drivers/gpio/gpiolib.c:3923 drivers/gpio/gpiolib.c:4238
#: drivers/gpio/gpiolib.c:4267 drivers/gpio/gpiolib.c:4338
#: drivers/gpio/gpiolib.c:4381
msgid "``struct gpio_desc **desc_array``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3523
#: drivers/gpio/gpiolib.c:3552 drivers/gpio/gpiolib.c:4237
#: drivers/gpio/gpiolib.c:4266
msgid "array of GPIO descriptors whose values will be read"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3525
#: drivers/gpio/gpiolib.c:3554 drivers/gpio/gpiolib.c:3896
#: drivers/gpio/gpiolib.c:3924 drivers/gpio/gpiolib.c:4239
#: drivers/gpio/gpiolib.c:4268 drivers/gpio/gpiolib.c:4339
#: drivers/gpio/gpiolib.c:4382
msgid "``struct gpio_array *array_info``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3524
#: drivers/gpio/gpiolib.c:3553 drivers/gpio/gpiolib.c:3895
#: drivers/gpio/gpiolib.c:3923 drivers/gpio/gpiolib.c:4238
#: drivers/gpio/gpiolib.c:4267 drivers/gpio/gpiolib.c:4338
#: drivers/gpio/gpiolib.c:4381
msgid "information on applicability of fast bitmap processing path"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3526
#: drivers/gpio/gpiolib.c:3555 drivers/gpio/gpiolib.c:3897
#: drivers/gpio/gpiolib.c:3925 drivers/gpio/gpiolib.c:4240
#: drivers/gpio/gpiolib.c:4269 drivers/gpio/gpiolib.c:4340
#: drivers/gpio/gpiolib.c:4383
msgid "``unsigned long *value_bitmap``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3525
#: drivers/gpio/gpiolib.c:3554 drivers/gpio/gpiolib.c:4239
#: drivers/gpio/gpiolib.c:4268
msgid "bitmap to store the read values"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3526
#: drivers/gpio/gpiolib.c:4240
msgid ""
"Read the raw values of the GPIOs, i.e. the values of the physical lines "
"without regard for their ACTIVE_LOW status."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3529
#: drivers/gpio/gpiolib.c:3558
msgid ""
"This function can be called from contexts where we cannot sleep, and it will "
"complain if the GPIO chip functions potentially sleep."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3550
#: drivers/gpio/gpiolib.c:4264
msgid "read values from an array of GPIOs"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3555
#: drivers/gpio/gpiolib.c:4269
msgid ""
"Read the logical values of the GPIOs, i.e. taking their ACTIVE_LOW status "
"into account."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3821
#: drivers/gpio/gpiolib.c:4293
msgid "assign a gpio's raw value"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3822
#: drivers/gpio/gpiolib.c:3870 drivers/gpio/gpiolib.c:4294
#: drivers/gpio/gpiolib.c:4315
msgid "gpio whose value will be assigned"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3823
#: drivers/gpio/gpiolib.c:3871 drivers/gpio/gpiolib.c:4295
#: drivers/gpio/gpiolib.c:4316
msgid "value to assign"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3824
#: drivers/gpio/gpiolib.c:4296
msgid ""
"Set the raw value of the GPIO, i.e. the value of its physical line without "
"regard for its ACTIVE_LOW status."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3831
#: drivers/gpio/gpiolib.c:3879 drivers/gpio/gpiolib.c:4302
#: drivers/gpio/gpiolib.c:4323
msgid "0 on success, negative error number on failure."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3869
#: drivers/gpio/gpiolib.c:4314
msgid "assign a gpio's value"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3872
msgid ""
"Set the logical value of the GPIO, i.e. taking its ACTIVE_LOW, OPEN_DRAIN "
"and OPEN_SOURCE flags into account."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3892
#: drivers/gpio/gpiolib.c:3920 drivers/gpio/gpiolib.c:4335
#: drivers/gpio/gpiolib.c:4378
msgid "assign values to an array of GPIOs"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3894
#: drivers/gpio/gpiolib.c:3922 drivers/gpio/gpiolib.c:4337
#: drivers/gpio/gpiolib.c:4380
msgid "array of GPIO descriptors whose values will be assigned"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3896
#: drivers/gpio/gpiolib.c:3924 drivers/gpio/gpiolib.c:4339
#: drivers/gpio/gpiolib.c:4382
msgid "bitmap of values to assign"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3897
#: drivers/gpio/gpiolib.c:4340
msgid ""
"Set the raw values of the GPIOs, i.e. the values of the physical lines "
"without regard for their ACTIVE_LOW status."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3925
#: drivers/gpio/gpiolib.c:4383
msgid ""
"Set the logical values of the GPIOs, i.e. taking their ACTIVE_LOW status "
"into account."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3949
msgid "report whether gpio value access may sleep"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3950
msgid "gpio to check"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3952
msgid ""
"0 for non-sleepable, 1 for sleepable, or an error code in case of error."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3963
msgid "set the consumer name for the descriptor"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3964
msgid "gpio to set the consumer name on"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3966
#: ../../../driver-api/gpio/index:49: drivers/gpio/gpiolib-sysfs.c:888
msgid "``const char *name``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3965
msgid "the new consumer name"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3985
msgid "return the IRQ corresponding to a GPIO"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3986
msgid "gpio whose IRQ will be returned (already requested)"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:3988
msgid ""
"The IRQ corresponding to the passed GPIO, or an error code in case of error."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4033
msgid "lock a GPIO to be used as IRQ"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4034
#: drivers/gpio/gpiolib.c:4083
msgid "the chip the GPIO to lock belongs to"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4035
#: drivers/gpio/gpiolib.c:4084
msgid "the offset of the GPIO to lock as IRQ"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4036
msgid ""
"This is used directly by GPIO drivers that want to lock down a certain GPIO "
"line to be used for IRQs."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4082
msgid "unlock a GPIO used as IRQ"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4085
msgid ""
"This is used directly by GPIO drivers that want to indicate that a certain "
"GPIO is no longer used exclusively for IRQ."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4196
#: drivers/gpio/gpiolib.c:4214 drivers/gpio/gpiolib.c:4243
#: drivers/gpio/gpiolib.c:4272 drivers/gpio/gpiolib.c:4299
#: drivers/gpio/gpiolib.c:4320 drivers/gpio/gpiolib.c:4343
#: drivers/gpio/gpiolib.c:4386
msgid "This function is to be called from contexts that can sleep."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4317
msgid ""
"Set the logical value of the GPIO, i.e. taking its ACTIVE_LOW status into "
"account"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4414
msgid "register GPIO device consumers"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4420
#: drivers/gpio/gpiolib.c:4430
msgid "``struct gpiod_lookup_table *table``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4415
msgid "table of consumers to register"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4424
msgid "unregister GPIO device consumers"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4425
msgid "table of consumers to unregister"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4440
msgid "register a set of GPIO hogs from machine code"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4446
msgid "``struct gpiod_hog *hogs``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4441
msgid "table of gpio hog entries with a zeroed sentinel at the end"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4706
msgid "obtain a GPIO from firmware node"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4712
#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:130
msgid "``struct fwnode_handle *fwnode``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4707
msgid "handle of the firmware node"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4709
#: drivers/gpio/gpiolib.c:4740 drivers/gpio/gpiolib.c:4768
#: drivers/gpio/gpiolib.c:4786 drivers/gpio/gpiolib.c:4884
#: drivers/gpio/gpiolib.c:4913 drivers/gpio/gpiolib.c:5002
#: drivers/gpio/gpiolib.c:5134 ../../../driver-api/gpio/index:31:
#: drivers/gpio/gpiolib-acpi-core.c:977 ../../../driver-api/gpio/index:43:
#: drivers/gpio/gpiolib-devres.c:36 drivers/gpio/gpiolib-devres.c:59
#: drivers/gpio/gpiolib-devres.c:82 drivers/gpio/gpiolib-devres.c:131
#: drivers/gpio/gpiolib-devres.c:168 drivers/gpio/gpiolib-devres.c:200
#: drivers/gpio/gpiolib-devres.c:235
msgid "``const char *con_id``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4708
#: drivers/gpio/gpiolib.c:4739 drivers/gpio/gpiolib.c:4767
#: drivers/gpio/gpiolib.c:4785 drivers/gpio/gpiolib.c:4883
#: drivers/gpio/gpiolib.c:4912 drivers/gpio/gpiolib.c:5001
#: drivers/gpio/gpiolib.c:5133 ../../../driver-api/gpio/index:43:
#: drivers/gpio/gpiolib-devres.c:35 drivers/gpio/gpiolib-devres.c:58
#: drivers/gpio/gpiolib-devres.c:81 drivers/gpio/gpiolib-devres.c:130
#: drivers/gpio/gpiolib-devres.c:167 drivers/gpio/gpiolib-devres.c:199
#: drivers/gpio/gpiolib-devres.c:234
msgid "function within the GPIO consumer"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4710
#: ../../../driver-api/gpio/index:31: drivers/gpio/gpiolib-acpi-core.c:978
#: ../../../driver-api/gpio/index:37: drivers/gpio/gpiolib-of.c:454
#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:132
msgid "``int index``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4709
msgid "index of the GPIO to obtain for the consumer"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4711
#: drivers/gpio/gpiolib.c:4769 drivers/gpio/gpiolib.c:4787
#: drivers/gpio/gpiolib.c:4886 drivers/gpio/gpiolib.c:4915
#: drivers/gpio/gpiolib.c:5003 drivers/gpio/gpiolib.c:5135
#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:37
#: drivers/gpio/gpiolib-devres.c:60 drivers/gpio/gpiolib-devres.c:84
#: drivers/gpio/gpiolib-devres.c:133 drivers/gpio/gpiolib-devres.c:170
#: drivers/gpio/gpiolib-devres.c:201 drivers/gpio/gpiolib-devres.c:236
msgid "``enum gpiod_flags flags``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4710
#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:132
msgid "GPIO initialization flags"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4711
#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:133
msgid "label to attach to the requested GPIO"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4712
msgid ""
"This function can be used for drivers that get their configuration from "
"opaque firmware."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4715
msgid ""
"The function properly finds the corresponding GPIO using whatever is the "
"underlying firmware interface and then makes sure that the GPIO descriptor "
"is requested before it is returned to the caller."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4720
msgid "In case of error an ERR_PTR() is returned."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4720
msgid ""
"On successful request the GPIO pin is configured in accordance with provided "
"**flags**."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4737
msgid "return the number of GPIOs associated with a device / function"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4743
#: drivers/gpio/gpiolib.c:4771 drivers/gpio/gpiolib.c:4789
#: drivers/gpio/gpiolib.c:4887 drivers/gpio/gpiolib.c:4915
#: drivers/gpio/gpiolib.c:5005 drivers/gpio/gpiolib.c:5136
#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:39
#: drivers/gpio/gpiolib-devres.c:62 drivers/gpio/gpiolib-devres.c:85
#: drivers/gpio/gpiolib-devres.c:133 drivers/gpio/gpiolib-devres.c:171
#: drivers/gpio/gpiolib-devres.c:203 drivers/gpio/gpiolib-devres.c:238
#: drivers/gpio/gpiolib-devres.c:269 drivers/gpio/gpiolib-devres.c:284
#: drivers/gpio/gpiolib-devres.c:318 drivers/gpio/gpiolib-devres.c:340
#: ../../../driver-api/gpio/index:49: drivers/gpio/gpiolib-sysfs.c:891
msgid "``struct device *dev``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4738
#: drivers/gpio/gpiolib.c:4766 drivers/gpio/gpiolib.c:4784
#: drivers/gpio/gpiolib.c:4882 drivers/gpio/gpiolib.c:4911
#: drivers/gpio/gpiolib.c:5000 drivers/gpio/gpiolib.c:5132
msgid "GPIO consumer, can be NULL for system-global GPIOs"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4741
msgid ""
"The number of GPIOs associated with a device / function or -ENOENT if no "
"GPIO has been assigned to the requested function."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4765
msgid "obtain a GPIO for a given GPIO function"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4768
#: drivers/gpio/gpiolib.c:4786 drivers/gpio/gpiolib.c:4885
#: drivers/gpio/gpiolib.c:4914 drivers/gpio/gpiolib.c:5002
#: drivers/gpio/gpiolib.c:5134 ../../../driver-api/gpio/index:43:
#: drivers/gpio/gpiolib-devres.c:36 drivers/gpio/gpiolib-devres.c:59
#: drivers/gpio/gpiolib-devres.c:83 drivers/gpio/gpiolib-devres.c:169
#: drivers/gpio/gpiolib-devres.c:200 drivers/gpio/gpiolib-devres.c:235
msgid "optional GPIO initialization flags"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4770
msgid ""
"The GPIO descriptor corresponding to the function **con_id** of device dev, -"
"ENOENT if no GPIO has been assigned to the requested function, or another "
"IS_ERR() code if an error occurred while trying to acquire the GPIO."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4783
msgid "obtain an optional GPIO for a given GPIO function"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4787
msgid ""
"This is equivalent to gpiod_get(), except that when no GPIO was assigned to "
"the requested function it will return NULL. This is convenient for drivers "
"that need to handle optional GPIOs."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4792
#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:65
msgid ""
"The GPIO descriptor corresponding to the function **con_id** of device dev, "
"NULL if no GPIO has been assigned to the requested function, or another "
"IS_ERR() code if an error occurred while trying to acquire the GPIO."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4881
msgid "obtain a GPIO from a multi-index GPIO function"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4885
#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:83
msgid "``unsigned int idx``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4884
#: drivers/gpio/gpiolib.c:4913 ../../../driver-api/gpio/index:43:
#: drivers/gpio/gpiolib-devres.c:82 drivers/gpio/gpiolib-devres.c:131
#: drivers/gpio/gpiolib-devres.c:168
msgid "index of the GPIO to obtain in the consumer"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4886
msgid ""
"This variant of gpiod_get() allows to access GPIOs other than the first "
"defined one for functions that define several GPIOs."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4890
msgid ""
"A valid GPIO descriptor, -ENOENT if no GPIO has been assigned to the "
"requested function and/or index, or another IS_ERR() code if an error "
"occurred while trying to acquire the GPIO."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4909
msgid "obtain an optional GPIO from a multi-index GPIO function"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4914
#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:169
msgid "``unsigned int index``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4915
msgid ""
"This is equivalent to gpiod_get_index(), except that when no GPIO with the "
"specified index was assigned to the requested function it will return NULL. "
"This is convenient for drivers that need to handle optional GPIOs."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4920
msgid ""
"A valid GPIO descriptor, NULL if no GPIO has been assigned to the requested "
"function and/or index, or another IS_ERR() code if an error occurred while "
"trying to acquire the GPIO."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:4999
#: drivers/gpio/gpiolib.c:5130
msgid "obtain multiple GPIOs from a multi-index GPIO function"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:5003
msgid "This function acquires all the GPIOs defined under a given function."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:5006
msgid ""
"The GPIO descriptors corresponding to the function **con_id** of device dev, "
"-ENOENT if no GPIO has been assigned to the requested function, or another "
"IS_ERR() code if an error occurred while trying to acquire the GPIOs."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:5135
msgid ""
"This is equivalent to gpiod_get_array(), except that when no GPIO was "
"assigned to the requested function it will return NULL."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:5139
msgid ""
"The GPIO descriptors corresponding to the function **con_id** of device dev, "
"NULL if no GPIO has been assigned to the requested function, or another "
"IS_ERR() code if an error occurred while trying to acquire the GPIOs."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:5160
msgid "dispose of a GPIO descriptor"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:5161
#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:265
msgid "GPIO descriptor to dispose of"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:5162
msgid "No descriptor can be used after gpiod_put() has been called on it."
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:5172
msgid "dispose of multiple GPIO descriptors"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:5178
#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:315
msgid "``struct gpio_descs *descs``"
msgstr ""

#: ../../../driver-api/gpio/index:25: drivers/gpio/gpiolib.c:5173
msgid "struct gpio_descs containing an array of descriptors"
msgstr ""

#: ../../../driver-api/gpio/index.rst:29
msgid "ACPI support"
msgstr ""

#: ../../../driver-api/gpio/index:31: drivers/gpio/gpiolib-acpi-core.c:193
msgid ""
"Fetch details of an ACPI resource if it is a GPIO I/O resource or return "
"False if not."
msgstr ""

#: ../../../driver-api/gpio/index:31: drivers/gpio/gpiolib-acpi-core.c:199
msgid "``struct acpi_resource *ares``"
msgstr ""

#: ../../../driver-api/gpio/index:31: drivers/gpio/gpiolib-acpi-core.c:195
msgid "Pointer to the ACPI resource to fetch"
msgstr ""

#: ../../../driver-api/gpio/index:31: drivers/gpio/gpiolib-acpi-core.c:197
msgid "``struct acpi_resource_gpio **agpio``"
msgstr ""

#: ../../../driver-api/gpio/index:31: drivers/gpio/gpiolib-acpi-core.c:196
msgid ""
"Pointer to a :c:type:`struct acpi_resource_gpio <acpi_resource_gpio>` to "
"store the output pointer"
msgstr ""

#: ../../../driver-api/gpio/index:31: drivers/gpio/gpiolib-acpi-core.c:198
msgid "``true`` if GpioIo resource is found, ``false`` otherwise."
msgstr ""

#: ../../../driver-api/gpio/index:31: drivers/gpio/gpiolib-acpi-core.c:451
msgid "Register isr for gpio chip ACPI events"
msgstr ""

#: ../../../driver-api/gpio/index:31: drivers/gpio/gpiolib-acpi-core.c:457
#: drivers/gpio/gpiolib-acpi-core.c:497
msgid "``struct gpio_chip *chip``"
msgstr ""

#: ../../../driver-api/gpio/index:31: drivers/gpio/gpiolib-acpi-core.c:453
msgid ""
"ACPI5 platforms can use GPIO signaled ACPI events. These GPIO interrupts are "
"handled by ACPI event methods which need to be called from the GPIO chip's "
"interrupt handler. acpi_gpiochip_request_interrupts() finds out which GPIO "
"pins have ACPI event methods and assigns interrupt handlers that calls the "
"ACPI event methods for those pins."
msgstr ""

#: ../../../driver-api/gpio/index:31: drivers/gpio/gpiolib-acpi-core.c:491
msgid "Free GPIO ACPI event interrupts."
msgstr ""

#: ../../../driver-api/gpio/index:31: drivers/gpio/gpiolib-acpi-core.c:493
msgid ""
"Free interrupts associated with GPIO ACPI event method for the given GPIO "
"chip."
msgstr ""

#: ../../../driver-api/gpio/index:31: drivers/gpio/gpiolib-acpi-core.c:974
msgid "Find GpioInt and translate it to Linux IRQ number"
msgstr ""

#: ../../../driver-api/gpio/index:31: drivers/gpio/gpiolib-acpi-core.c:980
msgid "``struct acpi_device *adev``"
msgstr ""

#: ../../../driver-api/gpio/index:31: drivers/gpio/gpiolib-acpi-core.c:975
msgid "pointer to a ACPI device to get IRQ from"
msgstr ""

#: ../../../driver-api/gpio/index:31: drivers/gpio/gpiolib-acpi-core.c:976
msgid "optional name of GpioInt resource"
msgstr ""

#: ../../../driver-api/gpio/index:31: drivers/gpio/gpiolib-acpi-core.c:977
msgid "index of GpioInt resource (starting from ``0``)"
msgstr ""

#: ../../../driver-api/gpio/index:31: drivers/gpio/gpiolib-acpi-core.c:979
msgid "``bool *wake_capable``"
msgstr ""

#: ../../../driver-api/gpio/index:31: drivers/gpio/gpiolib-acpi-core.c:978
msgid "Set to true if the IRQ is wake capable"
msgstr ""

#: ../../../driver-api/gpio/index:31: drivers/gpio/gpiolib-acpi-core.c:979
msgid ""
"If the device has one or more GpioInt resources, this function can be used "
"to translate from the GPIO offset in the resource to the Linux IRQ number."
msgstr ""

#: ../../../driver-api/gpio/index:31: drivers/gpio/gpiolib-acpi-core.c:983
msgid ""
"The function is idempotent, though each time it runs it will configure GPIO "
"pin direction according to the flags in GpioInt resource."
msgstr ""

#: ../../../driver-api/gpio/index:31: drivers/gpio/gpiolib-acpi-core.c:986
msgid ""
"The function takes optional **con_id** parameter. If the resource has a "
"**con_id** in a property, then only those will be taken into account."
msgstr ""

#: ../../../driver-api/gpio/index:31: drivers/gpio/gpiolib-acpi-core.c:989
msgid ""
"The GPIO is considered wake capable if the GpioInt resource specifies "
"SharedAndWake or ExclusiveAndWake."
msgstr ""

#: ../../../driver-api/gpio/index:31: drivers/gpio/gpiolib-acpi-core.c:993
msgid "Linux IRQ number (> 0) on success, negative errno on failure."
msgstr ""

#: ../../../driver-api/gpio/index.rst:35
msgid "Device tree support"
msgstr ""

#: ../../../driver-api/gpio/index:37: drivers/gpio/gpiolib-of.c:450
msgid "Get a GPIO number to use with GPIO API"
msgstr ""

#: ../../../driver-api/gpio/index:37: drivers/gpio/gpiolib-of.c:456
msgid "``const struct device_node *np``"
msgstr ""

#: ../../../driver-api/gpio/index:37: drivers/gpio/gpiolib-of.c:451
msgid "device node to get GPIO from"
msgstr ""

#: ../../../driver-api/gpio/index:37: drivers/gpio/gpiolib-of.c:453
msgid "``const char *propname``"
msgstr ""

#: ../../../driver-api/gpio/index:37: drivers/gpio/gpiolib-of.c:452
msgid "Name of property containing gpio specifier(s)"
msgstr ""

#: ../../../driver-api/gpio/index:37: drivers/gpio/gpiolib-of.c:453
msgid "index of the GPIO"
msgstr ""

#: ../../../driver-api/gpio/index:37: drivers/gpio/gpiolib-of.c:454
msgid ""
"**DEPRECATED** This function is deprecated and must not be used in new code."
msgstr ""

#: ../../../driver-api/gpio/index:37: drivers/gpio/gpiolib-of.c:457
msgid ""
"GPIO number to use with Linux generic GPIO API, or one of the errno value on "
"the error condition."
msgstr ""

#: ../../../driver-api/gpio/index:37: drivers/gpio/gpiolib-of.c:1037
msgid "Add memory mapped GPIO chip (bank)"
msgstr ""

#: ../../../driver-api/gpio/index:37: drivers/gpio/gpiolib-of.c:1043
msgid "``struct device_node *np``"
msgstr ""

#: ../../../driver-api/gpio/index:37: drivers/gpio/gpiolib-of.c:1038
msgid "device node of the GPIO chip"
msgstr ""

#: ../../../driver-api/gpio/index:37: drivers/gpio/gpiolib-of.c:1040
#: drivers/gpio/gpiolib-of.c:1105
msgid "``struct of_mm_gpio_chip *mm_gc``"
msgstr ""

#: ../../../driver-api/gpio/index:37: drivers/gpio/gpiolib-of.c:1039
#: drivers/gpio/gpiolib-of.c:1100
msgid "pointer to the of_mm_gpio_chip allocated structure"
msgstr ""

#: ../../../driver-api/gpio/index:37: drivers/gpio/gpiolib-of.c:1041
#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:338
msgid "``void *data``"
msgstr ""

#: ../../../driver-api/gpio/index:37: drivers/gpio/gpiolib-of.c:1040
msgid "driver data to store in the struct gpio_chip"
msgstr ""

#: ../../../driver-api/gpio/index:37: drivers/gpio/gpiolib-of.c:1041
msgid "To use this function you should allocate and fill mm_gc with:"
msgstr ""

#: ../../../driver-api/gpio/index:37: drivers/gpio/gpiolib-of.c:1043
msgid ""
"In the gpio_chip structure: - all the callbacks - of_gpio_n_cells - of_xlate "
"callback (optional)"
msgstr ""

#: ../../../driver-api/gpio/index:37: drivers/gpio/gpiolib-of.c:1048
msgid "In the of_mm_gpio_chip structure: - save_regs callback (optional)"
msgstr ""

#: ../../../driver-api/gpio/index:37: drivers/gpio/gpiolib-of.c:1051
msgid ""
"If succeeded, this function will map bank's memory and will do all necessary "
"work for you. Then you'll able to use .regs to manage GPIOs from the "
"callbacks."
msgstr ""

#: ../../../driver-api/gpio/index:37: drivers/gpio/gpiolib-of.c:1099
msgid "Remove memory mapped GPIO chip (bank)"
msgstr ""

#: ../../../driver-api/gpio/index.rst:41
msgid "Device-managed API"
msgstr ""

#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:33
msgid "Resource-managed gpiod_get()"
msgstr ""

#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:34
#: drivers/gpio/gpiolib-devres.c:57 drivers/gpio/gpiolib-devres.c:80
#: drivers/gpio/gpiolib-devres.c:128 drivers/gpio/gpiolib-devres.c:166
#: drivers/gpio/gpiolib-devres.c:198 drivers/gpio/gpiolib-devres.c:233
#: drivers/gpio/gpiolib-devres.c:264 drivers/gpio/gpiolib-devres.c:279
#: drivers/gpio/gpiolib-devres.c:313
msgid "GPIO consumer"
msgstr ""

#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:37
msgid ""
"Managed gpiod_get(). GPIO descriptors returned from this function are "
"automatically disposed on driver detach. See gpiod_get() for detailed "
"information about behavior and return values."
msgstr ""

#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:42
#: drivers/gpio/gpiolib-devres.c:89 drivers/gpio/gpiolib-devres.c:138
msgid ""
"The GPIO descriptor corresponding to the function **con_id** of device dev, "
"``-ENOENT`` if no GPIO has been assigned to the requested function, or "
"another IS_ERR() code if an error occurred while trying to acquire the GPIO."
msgstr ""

#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:56
msgid "Resource-managed gpiod_get_optional()"
msgstr ""

#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:60
msgid ""
"Managed gpiod_get_optional(). GPIO descriptors returned from this function "
"are automatically disposed on driver detach. See gpiod_get_optional() for "
"detailed information about behavior and return values."
msgstr ""

#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:79
msgid "Resource-managed gpiod_get_index()"
msgstr ""

#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:84
msgid ""
"Managed gpiod_get_index(). GPIO descriptors returned from this function are "
"automatically disposed on driver detach. See gpiod_get_index() for detailed "
"information about behavior and return values."
msgstr ""

#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:127
msgid "get a GPIO descriptor from a given node"
msgstr ""

#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:129
msgid "firmware node containing GPIO reference"
msgstr ""

#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:134
msgid ""
"GPIO descriptors returned from this function are automatically disposed on "
"driver detach."
msgstr ""

#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:165
msgid "Resource-managed gpiod_get_index_optional()"
msgstr ""

#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:170
msgid ""
"Managed gpiod_get_index_optional(). GPIO descriptors returned from this "
"function are automatically disposed on driver detach. See "
"gpiod_get_index_optional() for detailed information about behavior and "
"return values."
msgstr ""

#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:176
msgid ""
"The GPIO descriptor corresponding to the function **con_id** of device dev, "
"``NULL`` if no GPIO has been assigned to the requested function, or another "
"IS_ERR() code if an error occurred while trying to acquire the GPIO."
msgstr ""

#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:197
msgid "Resource-managed gpiod_get_array()"
msgstr ""

#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:201
msgid ""
"Managed gpiod_get_array(). GPIO descriptors returned from this function are "
"automatically disposed on driver detach. See gpiod_get_array() for detailed "
"information about behavior and return values."
msgstr ""

#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:206
msgid ""
"The GPIO descriptors corresponding to the function **con_id** of device dev, "
"``-ENOENT`` if no GPIO has been assigned to the requested function, or "
"another IS_ERR() code if an error occurred while trying to acquire the GPIOs."
msgstr ""

#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:232
msgid "Resource-managed gpiod_get_array_optional()"
msgstr ""

#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:236
msgid ""
"Managed gpiod_get_array_optional(). GPIO descriptors returned from this "
"function are automatically disposed on driver detach. See "
"gpiod_get_array_optional() for detailed information about behavior and "
"return values."
msgstr ""

#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:242
msgid ""
"The GPIO descriptors corresponding to the function **con_id** of device dev, "
"``NULL`` if no GPIO has been assigned to the requested function, or another "
"IS_ERR() code if an error occurred while trying to acquire the GPIOs."
msgstr ""

#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:263
msgid "Resource-managed gpiod_put()"
msgstr ""

#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:266
msgid ""
"Dispose of a GPIO descriptor obtained with devm_gpiod_get() or "
"devm_gpiod_get_index(). Normally this function will not be called as the "
"GPIO will be disposed of by the resource management code."
msgstr ""

#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:278
msgid "Remove resource management from a gpio descriptor"
msgstr ""

#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:280
msgid "GPIO descriptor to remove resource management from"
msgstr ""

#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:281
msgid ""
"*DEPRECATED* This function should not be used. It's been provided as a "
"workaround for resource ownership issues in the regulator framework and "
"should be replaced with a better solution."
msgstr ""

#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:286
msgid ""
"Remove resource management from a GPIO descriptor. This is needed when you "
"want to hand over lifecycle management of a descriptor to another mechanism."
msgstr ""

#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:312
msgid "Resource-managed gpiod_put_array()"
msgstr ""

#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:314
msgid "GPIO descriptor array to dispose of"
msgstr ""

#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:315
msgid ""
"Dispose of an array of GPIO descriptors obtained with "
"devm_gpiod_get_array(). Normally this function will not be called as the "
"GPIOs will be disposed of by the resource management code."
msgstr ""

#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:334
msgid "Resource managed gpiochip_add_data_with_key()"
msgstr ""

#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:335
msgid "pointer to the device that gpio_chip belongs to."
msgstr ""

#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:336
msgid "the GPIO chip to register"
msgstr ""

#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:339
msgid "``struct lock_class_key *lock_key``"
msgstr ""

#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:338
msgid "lockdep class for IRQ lock"
msgstr ""

#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:340
msgid "``struct lock_class_key *request_key``"
msgstr ""

#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:339
msgid "lockdep class for IRQ request"
msgstr ""

#: ../../../driver-api/gpio/index:43: drivers/gpio/gpiolib-devres.c:342
msgid "The gpio chip automatically be released when the device is unbound."
msgstr ""

#: ../../../driver-api/gpio/index.rst:47
msgid "sysfs helpers"
msgstr ""

#: ../../../driver-api/gpio/index:49: drivers/gpio/gpiolib-sysfs.c:712
msgid "export a GPIO through sysfs"
msgstr ""

#: ../../../driver-api/gpio/index:49: drivers/gpio/gpiolib-sysfs.c:713
msgid "GPIO to make available, already requested"
msgstr ""

#: ../../../driver-api/gpio/index:49: drivers/gpio/gpiolib-sysfs.c:715
msgid "``bool direction_may_change``"
msgstr ""

#: ../../../driver-api/gpio/index:49: drivers/gpio/gpiolib-sysfs.c:714
msgid "true if userspace may change GPIO direction"
msgstr ""

#: ../../../driver-api/gpio/index:49: drivers/gpio/gpiolib-sysfs.c:715
msgid "arch_initcall or later"
msgstr ""

#: ../../../driver-api/gpio/index:49: drivers/gpio/gpiolib-sysfs.c:716
msgid ""
"When drivers want to make a GPIO accessible to userspace after they have "
"requested it -- perhaps while debugging, or as part of their public "
"interface -- they may use this routine.  If the GPIO can change direction "
"(some can't) and the caller allows it, userspace will see \"direction\" "
"sysfs attribute which may be used to change the gpio's direction.  A "
"\"value\" attribute will always be provided."
msgstr ""

#: ../../../driver-api/gpio/index:49: drivers/gpio/gpiolib-sysfs.c:885
msgid "create a sysfs link to an exported GPIO node"
msgstr ""

#: ../../../driver-api/gpio/index:49: drivers/gpio/gpiolib-sysfs.c:886
msgid "device under which to create symlink"
msgstr ""

#: ../../../driver-api/gpio/index:49: drivers/gpio/gpiolib-sysfs.c:887
msgid "name of the symlink"
msgstr ""

#: ../../../driver-api/gpio/index:49: drivers/gpio/gpiolib-sysfs.c:888
msgid "GPIO to create symlink to, already exported"
msgstr ""

#: ../../../driver-api/gpio/index:49: drivers/gpio/gpiolib-sysfs.c:889
msgid ""
"Set up a symlink from /sys/.../dev/name to /sys/class/gpio/gpioN node. "
"Caller is responsible for unlinking."
msgstr ""

#: ../../../driver-api/gpio/index:49: drivers/gpio/gpiolib-sysfs.c:923
msgid "reverse effect of gpiod_export()"
msgstr ""

#: ../../../driver-api/gpio/index:49: drivers/gpio/gpiolib-sysfs.c:924
msgid "GPIO to make unavailable"
msgstr ""

#: ../../../driver-api/gpio/index:49: drivers/gpio/gpiolib-sysfs.c:925
msgid "This is implicit on gpiod_free()."
msgstr ""
