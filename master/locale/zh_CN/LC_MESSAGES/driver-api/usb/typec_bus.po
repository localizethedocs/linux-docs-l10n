# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../driver-api/usb/typec_bus.rst:3
msgid "API for USB Type-C Alternate Mode drivers"
msgstr ""

#: ../../../driver-api/usb/typec_bus.rst:6
msgid "Introduction"
msgstr ""

#: ../../../driver-api/usb/typec_bus.rst:8
msgid ""
"Alternate modes require communication with the partner using Vendor Defined "
"Messages (VDM) as defined in USB Type-C and USB Power Delivery "
"Specifications. The communication is SVID (Standard or Vendor ID) specific, "
"i.e. specific for every alternate mode, so every alternate mode will need a "
"custom driver."
msgstr ""

#: ../../../driver-api/usb/typec_bus.rst:13
msgid ""
"USB Type-C bus allows binding a driver to the discovered partner alternate "
"modes by using the SVID and the mode number."
msgstr ""

#: ../../../driver-api/usb/typec_bus.rst:16
msgid ""
":ref:`USB Type-C Connector Class <typec>` provides a device for every "
"alternate mode a port supports, and separate device for every alternate mode "
"the partner supports. The drivers for the alternate modes are bound to the "
"partner alternate mode devices, and the port alternate mode devices must be "
"handled by the port drivers."
msgstr ""

#: ../../../driver-api/usb/typec_bus.rst:22
msgid ""
"When a new partner alternate mode device is registered, it is linked to the "
"alternate mode device of the port that the partner is attached to, that has "
"matching SVID and mode. Communication between the port driver and alternate "
"mode driver will happen using the same API."
msgstr ""

#: ../../../driver-api/usb/typec_bus.rst:27
msgid ""
"The port alternate mode devices are used as a proxy between the partner and "
"the alternate mode drivers, so the port drivers are only expected to pass "
"the SVID specific commands from the alternate mode drivers to the partner, "
"and from the partners to the alternate mode drivers. No direct SVID specific "
"communication is needed from the port drivers, but the port drivers need to "
"provide the operation callbacks for the port alternate mode devices, just "
"like the alternate mode drivers need to provide them for the partner "
"alternate mode devices."
msgstr ""

#: ../../../driver-api/usb/typec_bus.rst:36
msgid "Usage:"
msgstr ""

#: ../../../driver-api/usb/typec_bus.rst:39
msgid "General"
msgstr ""

#: ../../../driver-api/usb/typec_bus.rst:41
msgid ""
"By default, the alternate mode drivers are responsible for entering the "
"mode. It is also possible to leave the decision about entering the mode to "
"the user space (See Documentation/ABI/testing/sysfs-class-typec). Port "
"drivers should not enter any modes on their own."
msgstr ""

#: ../../../driver-api/usb/typec_bus.rst:46
msgid ""
"``->vdm`` is the most important callback in the operation callbacks vector. "
"It will be used to deliver all the SVID specific commands from the partner "
"to the alternate mode driver, and vice versa in case of port drivers. The "
"drivers send the SVID specific commands to each other using :c:func:"
"`typec_altmode_vdm()`."
msgstr ""

#: ../../../driver-api/usb/typec_bus.rst:51
msgid ""
"If the communication with the partner using the SVID specific commands "
"results in need to reconfigure the pins on the connector, the alternate mode "
"driver needs to notify the bus using :c:func:`typec_altmode_notify()`. The "
"driver passes the negotiated SVID specific pin configuration value to the "
"function as parameter. The bus driver will then configure the mux behind the "
"connector using that value as the state value for the mux."
msgstr ""

#: ../../../driver-api/usb/typec_bus.rst:58
msgid ""
"NOTE: The SVID specific pin configuration values must always start from "
"``TYPEC_STATE_MODAL``. USB Type-C specification defines two default states "
"for the connector: ``TYPEC_STATE_USB`` and ``TYPEC_STATE_SAFE``. These "
"values are reserved by the bus as the first possible values for the state. "
"When the alternate mode is entered, the bus will put the connector into "
"``TYPEC_STATE_SAFE`` before sending Enter or Exit Mode command as defined in "
"USB Type-C Specification, and also put the connector back to "
"``TYPEC_STATE_USB`` after the mode has been exited."
msgstr ""

#: ../../../driver-api/usb/typec_bus.rst:67
msgid ""
"An example of working definitions for SVID specific pin configurations would "
"look like this::"
msgstr ""

#: ../../../driver-api/usb/typec_bus.rst:76
msgid "Helper macro ``TYPEC_MODAL_STATE()`` can also be used::"
msgstr ""

#: ../../../driver-api/usb/typec_bus.rst:82
msgid "Cable plug alternate modes"
msgstr ""

#: ../../../driver-api/usb/typec_bus.rst:84
msgid ""
"The alternate mode drivers are not bound to cable plug alternate mode "
"devices, only to the partner alternate mode devices. If the alternate mode "
"supports, or requires, a cable that responds to SOP Prime, and optionally "
"SOP Double Prime messages, the driver for that alternate mode must request "
"handle to the cable plug alternate modes using :c:func:"
"`typec_altmode_get_plug()`, and take over their control."
msgstr ""

#: ../../../driver-api/usb/typec_bus.rst:92
msgid "Driver API"
msgstr ""

#: ../../../driver-api/usb/typec_bus.rst:95
msgid "Alternate mode structs"
msgstr ""

#: ../../../driver-api/usb/typec_bus:97: include/linux/usb/typec_altmode.h:51
msgid "Alternate mode specific operations vector"
msgstr ""

#: ../../../driver-api/usb/typec_bus:97: include/linux/usb/typec_altmode.h:55
#: include/linux/usb/typec_altmode.h:180
msgid "**Definition**::"
msgstr ""

#: ../../../driver-api/usb/typec_bus:97: include/linux/usb/typec_altmode.h:66
#: include/linux/usb/typec_altmode.h:189
msgid "**Members**"
msgstr ""

#: ../../../driver-api/usb/typec_bus:97: include/linux/usb/typec_altmode.h:52
msgid "``enter``"
msgstr ""

#: ../../../driver-api/usb/typec_bus:97: include/linux/usb/typec_altmode.h:53
msgid "Operations to be executed with Enter Mode Command"
msgstr ""

#: ../../../driver-api/usb/typec_bus:97: include/linux/usb/typec_altmode.h:53
msgid "``exit``"
msgstr ""

#: ../../../driver-api/usb/typec_bus:97: include/linux/usb/typec_altmode.h:54
msgid "Operations to be executed with Exit Mode Command"
msgstr ""

#: ../../../driver-api/usb/typec_bus:97: include/linux/usb/typec_altmode.h:54
msgid "``attention``"
msgstr ""

#: ../../../driver-api/usb/typec_bus:97: include/linux/usb/typec_altmode.h:55
msgid "Callback for Attention Command"
msgstr ""

#: ../../../driver-api/usb/typec_bus:97: include/linux/usb/typec_altmode.h:55
msgid "``vdm``"
msgstr ""

#: ../../../driver-api/usb/typec_bus:97: include/linux/usb/typec_altmode.h:56
msgid "Callback for SVID specific commands"
msgstr ""

#: ../../../driver-api/usb/typec_bus:97: include/linux/usb/typec_altmode.h:56
msgid "``notify``"
msgstr ""

#: ../../../driver-api/usb/typec_bus:97: include/linux/usb/typec_altmode.h:57
msgid "Communication channel for platform and the alternate mode"
msgstr ""

#: ../../../driver-api/usb/typec_bus:97: include/linux/usb/typec_altmode.h:57
msgid "``activate``"
msgstr ""

#: ../../../driver-api/usb/typec_bus:97: include/linux/usb/typec_altmode.h:58
msgid "User callback for Enter/Exit Mode"
msgstr ""

#: ../../../driver-api/usb/typec_bus:97: include/linux/usb/typec_altmode.h:176
msgid "USB Type-C alternate mode device driver"
msgstr ""

#: ../../../driver-api/usb/typec_bus:97: include/linux/usb/typec_altmode.h:177
msgid "``id_table``"
msgstr ""

#: ../../../driver-api/usb/typec_bus:97: include/linux/usb/typec_altmode.h:178
msgid "Null terminated array of SVIDs"
msgstr ""

#: ../../../driver-api/usb/typec_bus:97: include/linux/usb/typec_altmode.h:178
msgid "``probe``"
msgstr ""

#: ../../../driver-api/usb/typec_bus:97: include/linux/usb/typec_altmode.h:179
msgid "Callback for device binding"
msgstr ""

#: ../../../driver-api/usb/typec_bus:97: include/linux/usb/typec_altmode.h:179
msgid "``remove``"
msgstr ""

#: ../../../driver-api/usb/typec_bus:97: include/linux/usb/typec_altmode.h:180
msgid "Callback for device unbinding"
msgstr ""

#: ../../../driver-api/usb/typec_bus:97: include/linux/usb/typec_altmode.h:180
msgid "``driver``"
msgstr ""

#: ../../../driver-api/usb/typec_bus:97: include/linux/usb/typec_altmode.h:181
msgid "Device driver model driver"
msgstr ""

#: ../../../driver-api/usb/typec_bus:103: include/linux/usb/typec_altmode.h:200
#: include/linux/usb/typec_altmode.h:212 ../../../driver-api/usb/typec_bus:109:
#: drivers/usb/typec/bus.c:79 drivers/usb/typec/bus.c:121
#: drivers/usb/typec/bus.c:155 drivers/usb/typec/bus.c:184
#: drivers/usb/typec/bus.c:210 ../../../driver-api/usb/typec_bus:115:
#: drivers/usb/typec/bus.c:414 ../../../driver-api/usb/typec_bus:121:
#: drivers/usb/typec/bus.c:357 ../../../driver-api/usb/typec_bus:97:
#: include/linux/usb/typec_altmode.h:184
msgid "**Description**"
msgstr ""

#: ../../../driver-api/usb/typec_bus:103: include/linux/usb/typec_altmode.h:199
#: include/linux/usb/typec_altmode.h:211 ../../../driver-api/usb/typec_bus:97:
#: include/linux/usb/typec_altmode.h:181
msgid ""
"These drivers will be bind to the partner alternate mode devices. They will "
"handle all SVID specific communication."
msgstr ""

#: ../../../driver-api/usb/typec_bus.rst:101
msgid "Alternate mode driver registering/unregistering"
msgstr ""

#: ../../../driver-api/usb/typec_bus:103: include/linux/usb/typec_altmode.h:198
msgid "``typec_altmode_register_driver (drv)``"
msgstr ""

#: ../../../driver-api/usb/typec_bus:103: include/linux/usb/typec_altmode.h:196
msgid "registers a USB Type-C alternate mode device driver"
msgstr ""

#: ../../../driver-api/usb/typec_bus:103: include/linux/usb/typec_altmode.h:200
#: include/linux/usb/typec_altmode.h:212 ../../../driver-api/usb/typec_bus:109:
#: drivers/usb/typec/bus.c:78 drivers/usb/typec/bus.c:121
#: drivers/usb/typec/bus.c:156 drivers/usb/typec/bus.c:184
#: drivers/usb/typec/bus.c:208 ../../../driver-api/usb/typec_bus:115:
#: drivers/usb/typec/bus.c:412 ../../../driver-api/usb/typec_bus:121:
#: drivers/usb/typec/bus.c:357 drivers/usb/typec/bus.c:379
msgid "**Parameters**"
msgstr ""

#: ../../../driver-api/usb/typec_bus:103: include/linux/usb/typec_altmode.h:202
msgid "``drv``"
msgstr ""

#: ../../../driver-api/usb/typec_bus:103: include/linux/usb/typec_altmode.h:198
#: include/linux/usb/typec_altmode.h:210
msgid "pointer to struct typec_altmode_driver"
msgstr ""

#: ../../../driver-api/usb/typec_bus:103: include/linux/usb/typec_altmode.h:208
msgid "unregisters a USB Type-C alternate mode device driver"
msgstr ""

#: ../../../driver-api/usb/typec_bus:103: include/linux/usb/typec_altmode.h:214
msgid "``struct typec_altmode_driver *drv``"
msgstr ""

#: ../../../driver-api/usb/typec_bus.rst:107
msgid "Alternate mode driver operations"
msgstr ""

#: ../../../driver-api/usb/typec_bus:109: drivers/usb/typec/bus.c:74
msgid "Communication between the OS and alternate mode driver"
msgstr ""

#: ../../../driver-api/usb/typec_bus:109: drivers/usb/typec/bus.c:80
#: drivers/usb/typec/bus.c:123 drivers/usb/typec/bus.c:158
#: drivers/usb/typec/bus.c:186 drivers/usb/typec/bus.c:210
#: ../../../driver-api/usb/typec_bus:121: drivers/usb/typec/bus.c:359
msgid "``struct typec_altmode *adev``"
msgstr ""

#: ../../../driver-api/usb/typec_bus:109: drivers/usb/typec/bus.c:75
msgid "Handle to the alternate mode"
msgstr ""

#: ../../../driver-api/usb/typec_bus:109: drivers/usb/typec/bus.c:77
msgid "``unsigned long conf``"
msgstr ""

#: ../../../driver-api/usb/typec_bus:109: drivers/usb/typec/bus.c:76
msgid "Alternate mode specific configuration value"
msgstr ""

#: ../../../driver-api/usb/typec_bus:109: drivers/usb/typec/bus.c:78
msgid "``void *data``"
msgstr ""

#: ../../../driver-api/usb/typec_bus:109: drivers/usb/typec/bus.c:77
msgid "Alternate mode specific data"
msgstr ""

#: ../../../driver-api/usb/typec_bus:109: drivers/usb/typec/bus.c:78
msgid ""
"The primary purpose for this function is to allow the alternate mode drivers "
"to tell which pin configuration has been negotiated with the partner. That "
"information will then be used for example to configure the muxes. "
"Communication to the other direction is also possible, and low level device "
"drivers can also send notifications to the alternate mode drivers. The "
"actual communication will be specific for every SVID."
msgstr ""

#: ../../../driver-api/usb/typec_bus:109: drivers/usb/typec/bus.c:117
msgid "Enter Mode"
msgstr ""

#: ../../../driver-api/usb/typec_bus:109: drivers/usb/typec/bus.c:118
#: drivers/usb/typec/bus.c:153 drivers/usb/typec/bus.c:181
msgid "The alternate mode"
msgstr ""

#: ../../../driver-api/usb/typec_bus:109: drivers/usb/typec/bus.c:120
msgid "``u32 *vdo``"
msgstr ""

#: ../../../driver-api/usb/typec_bus:109: drivers/usb/typec/bus.c:119
msgid "VDO for the Enter Mode command"
msgstr ""

#: ../../../driver-api/usb/typec_bus:109: drivers/usb/typec/bus.c:120
msgid ""
"The alternate mode drivers use this function to enter mode. The port drivers "
"use this to inform the alternate mode drivers that the partner has initiated "
"Enter Mode command. If the alternate mode does not require VDO, **vdo** must "
"be NULL."
msgstr ""

#: ../../../driver-api/usb/typec_bus:109: drivers/usb/typec/bus.c:152
msgid "Exit Mode"
msgstr ""

#: ../../../driver-api/usb/typec_bus:109: drivers/usb/typec/bus.c:154
msgid "The partner of **adev** has initiated Exit Mode command."
msgstr ""

#: ../../../driver-api/usb/typec_bus:109: drivers/usb/typec/bus.c:180
msgid "Attention command"
msgstr ""

#: ../../../driver-api/usb/typec_bus:109: drivers/usb/typec/bus.c:183
msgid "``u32 vdo``"
msgstr ""

#: ../../../driver-api/usb/typec_bus:109: drivers/usb/typec/bus.c:182
msgid "VDO for the Attention command"
msgstr ""

#: ../../../driver-api/usb/typec_bus:109: drivers/usb/typec/bus.c:183
msgid "Notifies the partner of **adev** about Attention command."
msgstr ""

#: ../../../driver-api/usb/typec_bus:109: drivers/usb/typec/bus.c:204
msgid "Send Vendor Defined Messages (VDM) to the partner"
msgstr ""

#: ../../../driver-api/usb/typec_bus:109: drivers/usb/typec/bus.c:205
msgid "Alternate mode handle"
msgstr ""

#: ../../../driver-api/usb/typec_bus:109: drivers/usb/typec/bus.c:207
msgid "``const u32 header``"
msgstr ""

#: ../../../driver-api/usb/typec_bus:109: drivers/usb/typec/bus.c:206
msgid "VDM Header"
msgstr ""

#: ../../../driver-api/usb/typec_bus:109: drivers/usb/typec/bus.c:208
msgid "``const u32 *vdo``"
msgstr ""

#: ../../../driver-api/usb/typec_bus:109: drivers/usb/typec/bus.c:207
msgid "Array of Vendor Defined Data Objects"
msgstr ""

#: ../../../driver-api/usb/typec_bus:109: drivers/usb/typec/bus.c:209
msgid "``int count``"
msgstr ""

#: ../../../driver-api/usb/typec_bus:109: drivers/usb/typec/bus.c:208
msgid "Number of Data Objects"
msgstr ""

#: ../../../driver-api/usb/typec_bus:109: drivers/usb/typec/bus.c:209
msgid ""
"The alternate mode drivers use this function for SVID specific communication "
"with the partner. The port drivers use it to deliver the Structured VDMs "
"received from the partners to the alternate mode drivers."
msgstr ""

#: ../../../driver-api/usb/typec_bus.rst:113
msgid "API for the port drivers"
msgstr ""

#: ../../../driver-api/usb/typec_bus:115: drivers/usb/typec/bus.c:408
msgid "Match SVID and mode to an array of alternate modes"
msgstr ""

#: ../../../driver-api/usb/typec_bus:115: drivers/usb/typec/bus.c:414
msgid "``struct typec_altmode **altmodes``"
msgstr ""

#: ../../../driver-api/usb/typec_bus:115: drivers/usb/typec/bus.c:409
msgid "Array of alternate modes"
msgstr ""

#: ../../../driver-api/usb/typec_bus:115: drivers/usb/typec/bus.c:411
msgid "``size_t n``"
msgstr ""

#: ../../../driver-api/usb/typec_bus:115: drivers/usb/typec/bus.c:410
msgid "Number of elements in the array, or -1 for NULL terminated arrays"
msgstr ""

#: ../../../driver-api/usb/typec_bus:115: drivers/usb/typec/bus.c:412
msgid "``u16 svid``"
msgstr ""

#: ../../../driver-api/usb/typec_bus:115: drivers/usb/typec/bus.c:411
msgid "Standard or Vendor ID to match with"
msgstr ""

#: ../../../driver-api/usb/typec_bus:115: drivers/usb/typec/bus.c:413
msgid "``u8 mode``"
msgstr ""

#: ../../../driver-api/usb/typec_bus:115: drivers/usb/typec/bus.c:412
msgid "Mode to match with"
msgstr ""

#: ../../../driver-api/usb/typec_bus:115: drivers/usb/typec/bus.c:413
msgid ""
"Return pointer to an alternate mode with SVID matching **svid**, or NULL "
"when no match is found."
msgstr ""

#: ../../../driver-api/usb/typec_bus.rst:119
msgid "Cable Plug operations"
msgstr ""

#: ../../../driver-api/usb/typec_bus:121: drivers/usb/typec/bus.c:353
msgid "Find cable plug alternate mode"
msgstr ""

#: ../../../driver-api/usb/typec_bus:121: drivers/usb/typec/bus.c:354
msgid "Handle to partner alternate mode"
msgstr ""

#: ../../../driver-api/usb/typec_bus:121: drivers/usb/typec/bus.c:356
msgid "``enum typec_plug_index index``"
msgstr ""

#: ../../../driver-api/usb/typec_bus:121: drivers/usb/typec/bus.c:355
msgid "Cable plug index"
msgstr ""

#: ../../../driver-api/usb/typec_bus:121: drivers/usb/typec/bus.c:356
msgid ""
"Increment reference count for cable plug alternate mode device. Returns "
"handle to the cable plug alternate mode, or NULL if none is found."
msgstr ""

#: ../../../driver-api/usb/typec_bus:121: drivers/usb/typec/bus.c:375
msgid "Decrement cable plug alternate mode reference count"
msgstr ""

#: ../../../driver-api/usb/typec_bus:121: drivers/usb/typec/bus.c:381
msgid "``struct typec_altmode *plug``"
msgstr ""

#: ../../../driver-api/usb/typec_bus:121: drivers/usb/typec/bus.c:376
msgid "Handle to the cable plug alternate mode"
msgstr ""
