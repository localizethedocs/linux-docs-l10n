# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-06 15:47+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../core-api/kho/concepts.rst:6
msgid "Kexec Handover Concepts"
msgstr ""

#: ../../../core-api/kho/concepts.rst:8
msgid ""
"Kexec HandOver (KHO) is a mechanism that allows Linux to preserve memory "
"regions, which could contain serialized system states, across kexec."
msgstr ""

#: ../../../core-api/kho/concepts.rst:11
msgid "It introduces multiple concepts:"
msgstr ""

#: ../../../core-api/kho/concepts.rst:14
msgid "KHO FDT"
msgstr ""

#: ../../../core-api/kho/concepts.rst:16
msgid ""
"Every KHO kexec carries a KHO specific flattened device tree (FDT) blob that "
"describes preserved memory regions. These regions contain either serialized "
"subsystem states, or in-memory data that shall not be touched across kexec. "
"After KHO, subsystems can retrieve and restore preserved memory regions from "
"KHO FDT."
msgstr ""

#: ../../../core-api/kho/concepts.rst:22
msgid ""
"KHO only uses the FDT container format and libfdt library, but does not "
"adhere to the same property semantics that normal device trees do: "
"Properties are passed in native endianness and standardized properties like "
"``regs`` and ``ranges`` do not exist, hence there are no ``#...-cells`` "
"properties."
msgstr ""

#: ../../../core-api/kho/concepts.rst:27
msgid ""
"KHO is still under development. The FDT schema is unstable and would change "
"in the future."
msgstr ""

#: ../../../core-api/kho/concepts.rst:31
msgid "Scratch Regions"
msgstr ""

#: ../../../core-api/kho/concepts.rst:33
msgid ""
"To boot into kexec, we need to have a physically contiguous memory range "
"that contains no handed over memory. Kexec then places the target kernel and "
"initrd into that region. The new kernel exclusively uses this region for "
"memory allocations before during boot up to the initialization of the page "
"allocator."
msgstr ""

#: ../../../core-api/kho/concepts.rst:38
msgid ""
"We guarantee that we always have such regions through the scratch regions: "
"On first boot KHO allocates several physically contiguous memory regions. "
"Since after kexec these regions will be used by early memory allocations, "
"there is a scratch region per NUMA node plus a scratch region to satisfy "
"allocations requests that do not require particular NUMA node assignment. By "
"default, size of the scratch region is calculated based on amount of memory "
"allocated during boot. The ``kho_scratch`` kernel command line option may be "
"used to explicitly define size of the scratch regions. The scratch regions "
"are declared as CMA when page allocator is initialized so that their memory "
"can be used during system lifetime. CMA gives us the guarantee that no "
"handover pages land in that region, because handover pages must be at a "
"static physical memory location and CMA enforces that only movable pages can "
"be located inside."
msgstr ""

#: ../../../core-api/kho/concepts.rst:52
msgid ""
"After KHO kexec, we ignore the ``kho_scratch`` kernel command line option "
"and instead reuse the exact same region that was originally allocated. This "
"allows us to recursively execute any amount of KHO kexecs. Because we used "
"this region for boot memory allocations and as target memory for kexec "
"blobs, some parts of that memory region may be reserved. These reservations "
"are irrelevant for the next KHO, because kexec can overwrite even the "
"original kernel."
msgstr ""

#: ../../../core-api/kho/concepts.rst:62
msgid "KHO finalization phase"
msgstr ""

#: ../../../core-api/kho/concepts.rst:64
msgid ""
"To enable user space based kexec file loader, the kernel needs to be able to "
"provide the FDT that describes the current kernel's state before performing "
"the actual kexec. The process of generating that FDT is called "
"serialization. When the FDT is generated, some properties of the system may "
"become immutable because they are already written down in the FDT. That "
"state is called the KHO finalization phase."
msgstr ""

#: ../../../core-api/kho/concepts.rst:72
msgid "Public API"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:238
msgid "recreates the folio from the preserved memory."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:242
#: kernel/kexec_handover.c:643 kernel/kexec_handover.c:710
#: kernel/kexec_handover.c:732 kernel/kexec_handover.c:995
#: kernel/kexec_handover.c:1015
msgid "**Parameters**"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:244
#: kernel/kexec_handover.c:734
msgid "``phys_addr_t phys``"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:239
msgid "physical address of the folio."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:241
#: kernel/kexec_handover.c:650 kernel/kexec_handover.c:711
#: kernel/kexec_handover.c:734 kernel/kexec_handover.c:1002
#: kernel/kexec_handover.c:1017
msgid "**Return**"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:241
msgid "pointer to the struct folio on success, NULL on failure."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:639
msgid "record the physical address of a sub FDT in KHO root tree."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:645
msgid "``struct kho_serialization *ser``"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:640
msgid "serialization control object passed by KHO notifiers."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:642
#: kernel/kexec_handover.c:1017
msgid "``const char *name``"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:641
msgid "name of the sub tree."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:643
msgid "``void *fdt``"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:642
msgid "the sub tree blob."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:3
#: kernel/kexec_handover.c:644 kernel/kexec_handover.c:709
#: kernel/kexec_handover.c:732 kernel/kexec_handover.c:1015
msgid "**Description**"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:643
msgid ""
"Creates a new child node named **name** in KHO root FDT and records the "
"physical address of **fdt**. The pages of **fdt** must also be preserved by "
"KHO for the new kernel to retrieve it after kexec."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:647
msgid ""
"A debugfs blob entry is also created at ``/sys/kernel/debug/kho/out/sub_fdts/"
"**name**``."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:651
#: kernel/kexec_handover.c:712 kernel/kexec_handover.c:735
#: kernel/kexec_handover.c:1018
msgid "0 on success, error code on failure"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:706
msgid "preserve a folio across kexec."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:712
msgid "``struct folio *folio``"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:707
msgid "folio to preserve."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:708
msgid ""
"Instructs KHO to preserve the whole folio across kexec. The order will be "
"preserved as well."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:728
msgid "preserve a physically contiguous range across kexec."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:729
msgid "physical address of the range."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:731
msgid "``size_t size``"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:730
msgid "size of the range."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:731
msgid ""
"Instructs KHO to preserve the memory range from **phys** to **phys** + "
"**size** across kexec."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:991
msgid "check if current kernel was booted via KHO-enabled kexec"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:997
msgid "``void``"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:1
msgid "no arguments"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:992
msgid ""
"This function checks if the current kernel was loaded through a kexec "
"operation with KHO enabled, by verifying that a valid KHO FDT was passed."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:996
msgid "**Note**"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:998
msgid ""
"This function returns reliable results only after kho_populate() has been "
"called during early boot. Before that, it may return false even if KHO data "
"is present."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:1002
msgid "true if booted via KHO-enabled kexec, false otherwise"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:1011
msgid "retrieve a preserved sub FDT by its name."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:1012
msgid "the name of the sub FDT passed to kho_add_subtree()."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:1014
msgid "``phys_addr_t *phys``"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:1013
msgid "if found, the physical address of the sub FDT is stored in **phys**."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:1014
msgid ""
"Retrieve a preserved sub FDT named **name** and store its physical address "
"in **phys**."
msgstr ""
