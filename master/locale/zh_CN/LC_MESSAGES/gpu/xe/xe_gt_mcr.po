# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-20 11:24+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../gpu/xe/xe_gt_mcr.rst:5
msgid "GT Multicast/Replicated (MCR) Register Support"
msgstr ""

#: ../../../gpu/xe/xe_gt_mcr:7: drivers/gpu/drm/xe/xe_gt_mcr.c:19
msgid ""
"Some GT registers are designed as \"multicast\" or \"replicated\" registers: "
"multiple instances of the same register share a single MMIO offset.  MCR "
"registers are generally used when the hardware needs to potentially track "
"independent values of a register per hardware unit (e.g., per-subslice, per-"
"L3bank, etc.).  The specific types of replication that exist vary per-"
"platform."
msgstr ""

#: ../../../gpu/xe/xe_gt_mcr:7: drivers/gpu/drm/xe/xe_gt_mcr.c:26
msgid ""
"MMIO accesses to MCR registers are controlled according to the settings "
"programmed in the platform's MCR_SELECTOR register(s).  MMIO writes to MCR "
"registers can be done in either multicast (a single write updates all "
"instances of the register to the same value) or unicast (a write updates "
"only one specific instance) form.  Reads of MCR registers always operate in "
"a unicast manner regardless of how the multicast/unicast bit is set in "
"MCR_SELECTOR.  Selection of a specific MCR instance for unicast operations "
"is referred to as \"steering.\""
msgstr ""

#: ../../../gpu/xe/xe_gt_mcr:7: drivers/gpu/drm/xe/xe_gt_mcr.c:35
msgid ""
"If MCR register operations are steered toward a hardware unit that is fused "
"off or currently powered down due to power gating, the MMIO operation is "
"\"terminated\" by the hardware.  Terminated read operations will return a "
"value of zero and terminated unicast write operations will be silently "
"ignored. During device initialization, the goal of the various "
"``init_steering_*()`` functions is to apply the platform-specific rules for "
"each MCR register type to identify a steering target that will select a non-"
"terminated instance."
msgstr ""

#: ../../../gpu/xe/xe_gt_mcr:7: drivers/gpu/drm/xe/xe_gt_mcr.c:44
msgid "MCR registers are not available on Virtual Function (VF)."
msgstr ""

#: ../../../gpu/xe/xe_gt_mcr.rst:11
msgid "Internal API"
msgstr ""

#: ../../../gpu/xe/xe_gt_mcr.rst:13
msgid "TODO"
msgstr ""
