# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../gpu/nova/core/todo.rst:5
msgid "Task List"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:7
msgid "Tasks may have the following fields:"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:9
msgid ""
"``Complexity``: Describes the required familiarity with Rust and / or the "
"corresponding kernel APIs or subsystems. There are four different "
"complexities, ``Beginner``, ``Intermediate``, ``Advanced`` and ``Expert``."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:12
msgid "``Reference``: References to other tasks."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:13
msgid "``Link``: Links to external resources."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:14
msgid ""
"``Contact``: The person that can be contacted for further information about "
"the task."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:17
msgid ""
"A task might have `[ABCD]` code after its name. This code can be used to "
"grep into the code for `TODO` entries related to it."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:21
msgid "Enablement (Rust)"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:23
msgid ""
"Tasks that are not directly related to nova-core, but are preconditions in "
"terms of required APIs."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:27
msgid "FromPrimitive API [FPRI]"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:29
msgid ""
"Sometimes the need arises to convert a number to a value of an enum or a "
"structure."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:32
msgid ""
"A good example from nova-core would be the ``Chipset`` enum type, which "
"defines the value ``AD102``. When probing the GPU the value ``0x192`` can be "
"read from a certain register indication the chipset AD102. Hence, the enum "
"value ``AD102`` should be derived from the number ``0x192``. Currently, nova-"
"core uses a custom implementation (``Chipset::from_u32`` for this."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:38
msgid ""
"Instead, it would be desirable to have something like the ``FromPrimitive`` "
"trait [1] from the num crate."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:41
msgid ""
"Having this generalization also helps with implementing a generic macro that "
"automatically generates the corresponding mappings between a value and a "
"number."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:44 ../../../gpu/nova/core/todo.rst:55
#: ../../../gpu/nova/core/todo.rst:63 ../../../gpu/nova/core/todo.rst:167
#: ../../../gpu/nova/core/todo.rst:214 ../../../gpu/nova/core/todo.rst:241
#: ../../../gpu/nova/core/todo.rst:259 ../../../gpu/nova/core/todo.rst:370
msgid "Complexity: Beginner"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:45
msgid "Link: https://docs.rs/num/latest/num/trait.FromPrimitive.html"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:48
msgid "Conversion from byte slices for types implementing FromBytes [TRSM]"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:50
msgid ""
"We retrieve several structures from byte streams coming from the BIOS or "
"loaded firmware. At the moment converting the bytes slice into the proper "
"type require an inelegant `unsafe` operation; this will go away once "
"`FromBytes` implements a proper `from_bytes` method."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:58
msgid "CoherentAllocation improvements [COHA]"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:60
msgid ""
"`CoherentAllocation` needs a safe way to write into the allocation, and to "
"obtain slices within the allocation."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:64 ../../../gpu/nova/core/todo.rst:206
#: ../../../gpu/nova/core/todo.rst:242 ../../../gpu/nova/core/todo.rst:250
msgid "Contact: Abdiel Janulgue"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:67
msgid "Generic register abstraction [REGA]"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:69
msgid ""
"Work out how register constants and structures can be automatically "
"generated through generalized macros."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:72
msgid "Example:"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:82
msgid "This could expand to something like:"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:118
msgid "Usage:"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:127
msgid ""
"A work-in-progress implementation currently resides in `drivers/gpu/nova-"
"core/regs/macros.rs` and is used in nova-core. It would be nice to improve "
"it (possibly using proc macros) and move it to the `kernel` crate so it can "
"be used by other components as well."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:132
msgid "Features desired before this happens:"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:134
msgid "Relative register with build-time base address validation,"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:135
msgid "Arrays of registers with build-time index validation,"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:136
msgid "Make I/O optional I/O (for field values that are not registers),"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:137
msgid "Support other sizes than `u32`,"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:138
msgid "Allow visibility control for registers and individual fields,"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:139
msgid "Use Rust slice syntax to express fields ranges."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:141 ../../../gpu/nova/core/todo.rst:193
#: ../../../gpu/nova/core/todo.rst:286 ../../../gpu/nova/core/todo.rst:344
#: ../../../gpu/nova/core/todo.rst:379 ../../../gpu/nova/core/todo.rst:388
#: ../../../gpu/nova/core/todo.rst:417 ../../../gpu/nova/core/todo.rst:425
#: ../../../gpu/nova/core/todo.rst:449
msgid "Complexity: Advanced"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:142 ../../../gpu/nova/core/todo.rst:157
msgid "Contact: Alexandre Courbot"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:145
msgid "Numerical operations [NUMM]"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:147
msgid ""
"Nova uses integer operations that are not part of the standard library (or "
"not implemented in an optimized way for the kernel). These include:"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:150
msgid "Aligning up and down to a power of two,"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:151
msgid ""
"The \"Find Last Set Bit\" (`fls` function of the C part of the kernel) "
"operation."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:154
msgid ""
"A `num` core kernel module is being designed to provide these operations."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:156 ../../../gpu/nova/core/todo.rst:181
#: ../../../gpu/nova/core/todo.rst:205 ../../../gpu/nova/core/todo.rst:222
#: ../../../gpu/nova/core/todo.rst:230 ../../../gpu/nova/core/todo.rst:249
#: ../../../gpu/nova/core/todo.rst:293 ../../../gpu/nova/core/todo.rst:309
#: ../../../gpu/nova/core/todo.rst:353 ../../../gpu/nova/core/todo.rst:362
#: ../../../gpu/nova/core/todo.rst:397 ../../../gpu/nova/core/todo.rst:405
#: ../../../gpu/nova/core/todo.rst:432
msgid "Complexity: Intermediate"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:160
msgid "Delay / Sleep abstractions [DLAY]"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:162
msgid "Rust abstractions for the kernel's delay() and sleep() functions."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:164
msgid ""
"FUJITA Tomonori plans to work on abstractions for read_poll_timeout_atomic() "
"(and friends) [1]."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:168
msgid ""
"Link: https://lore.kernel.org/netdev/20250228.080550.354359820929821928."
"fujita.tomonori@gmail.com/ [1]"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:171
msgid "IRQ abstractions"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:173
msgid "Rust abstractions for IRQ handling."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:175
msgid ""
"There is active ongoing work from Daniel Almeida [1] for the \"core\" "
"abstractions to request IRQs."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:178
msgid ""
"Besides optional review and testing work, the required ``pci::Device`` code "
"around those core abstractions needs to be worked out."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:182
msgid ""
"Link: https://lore.kernel.org/lkml/20250122163932.46697-1-daniel."
"almeida@collabora.com/ [1]"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:183
msgid "Contact: Daniel Almeida"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:186
msgid "Page abstraction for foreign pages"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:188
msgid ""
"Rust abstractions for pages not created by the Rust page abstraction without "
"direct ownership."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:191
msgid "There is active onging work from Abdiel Janulgue [1] and Lina [2]."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:194
msgid ""
"Link: https://lore.kernel.org/linux-mm/20241119112408.779243-1-abdiel."
"janulgue@gmail.com/ [1]"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:195
msgid ""
"Link: https://lore.kernel.org/rust-for-linux/20250202-rust-page-v1-0-"
"e3170d7fe55e@asahilina.net/ [2]"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:198
msgid "Scatterlist / sg_table abstractions"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:200
msgid "Rust abstractions for scatterlist / sg_table."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:202
msgid ""
"There is preceding work from Abdiel Janulgue, which hasn't made it to the "
"mailing list yet."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:209
msgid "PCI MISC APIs"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:211
msgid ""
"Extend the existing PCI device / driver abstractions by SR-IOV, config "
"space, capability, MSI API abstractions."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:217
msgid "XArray bindings [XARR]"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:219
msgid ""
"We need bindings for `xa_alloc`/`xa_alloc_cyclic` in order to generate the "
"auxiliary device IDs."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:225
msgid "Debugfs abstractions"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:227
msgid "Rust abstraction for debugfs APIs."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:229
msgid "Reference: Export GSP log buffers"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:233
msgid "GPU (general)"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:236
msgid "Parse firmware headers"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:238
msgid "Parse ELF headers from the firmware files loaded from the filesystem."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:240
msgid "Reference: ELF utils"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:245
msgid "Build radix3 page table"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:247
msgid "Build the radix3 page table to map the firmware."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:253
msgid "Initial Devinit support"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:255
msgid ""
"Implement BIOS Device Initialization, i.e. memory sizing, waiting, PLL "
"configuration."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:258 ../../../gpu/nova/core/todo.rst:294
#: ../../../gpu/nova/core/todo.rst:345 ../../../gpu/nova/core/todo.rst:354
#: ../../../gpu/nova/core/todo.rst:363 ../../../gpu/nova/core/todo.rst:371
#: ../../../gpu/nova/core/todo.rst:380 ../../../gpu/nova/core/todo.rst:389
#: ../../../gpu/nova/core/todo.rst:398 ../../../gpu/nova/core/todo.rst:406
msgid "Contact: Dave Airlie"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:262
msgid "MMU / PT management"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:264
msgid "Work out the architecture for MMU / page table management."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:266
msgid ""
"We need to consider that nova-drm will need rather fine-grained control, "
"especially in terms of locking, in order to be able to implement "
"asynchronous Vulkan queues."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:270
msgid ""
"While generally sharing the corresponding code is desirable, it needs to be "
"evaluated how (and if at all) sharing the corresponding code is expedient."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:273 ../../../gpu/nova/core/todo.rst:336
msgid "Complexity: Expert"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:276
msgid "VRAM memory allocator"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:278
msgid "Investigate options for a VRAM memory allocator."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:280
msgid "Some possible options:"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:281
msgid "Rust abstractions for - RB tree (interval tree) / drm_mm - maple_tree"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:284
msgid "native Rust collections"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:289
msgid "Instance Memory"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:291
msgid "Implement support for instmem (bar2) used to store page tables."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:297
msgid "GPU System Processor (GSP)"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:300
msgid "Export GSP log buffers"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:302
msgid ""
"Recent patches from Timur Tabi [1] added support to expose GSP-RM log "
"buffers (even after failure to probe the driver) through debugfs."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:305
msgid ""
"This is also an interesting feature for nova-core, especially in the early "
"days."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:307
msgid ""
"Link: https://lore.kernel.org/nouveau/20241030202952.694055-2-ttabi@nvidia."
"com/ [1]"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:308
msgid "Reference: Debugfs abstractions"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:312
msgid "GSP firmware abstraction"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:314
msgid ""
"The GSP-RM firmware API is unstable and may incompatibly change from version "
"to version, in terms of data structures and semantics."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:317
msgid ""
"This problem is one of the big motivations for using Rust for nova-core, "
"since it turns out that Rust's procedural macro feature provides a rather "
"elegant way to address this issue:"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:321
msgid ""
"generate Rust structures from the C headers in a separate namespace per "
"version"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:322
msgid ""
"build abstraction structures (within a generic namespace) that implement the "
"firmware interfaces; annotate the differences in implementation with version "
"identifiers"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:325
msgid ""
"use a procedural macro to generate the actual per version implementation out "
"of this abstraction"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:327
msgid ""
"instantiate the correct version type one on runtime (can be sure that all "
"have the same interface because it's defined by a common trait)"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:330
msgid ""
"There is a PoC implementation of this pattern, in the context of the nova-"
"core PoC driver."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:333
msgid ""
"This task aims at refining the feature and ideally generalize it, to be "
"usable by other drivers as well."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:339
msgid "GSP message queue"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:341
msgid ""
"Implement low level GSP message queue (command, status) for communication "
"between the kernel driver and GSP."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:348
msgid "Bootstrap GSP"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:350
msgid ""
"Call the boot firmware to boot the GSP processor; execute initial control "
"messages."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:357
msgid "Client / Device APIs"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:359
msgid ""
"Implement the GSP message interface for client / device allocation and the "
"corresponding client and device allocation APIs."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:366
msgid "Bar PDE handling"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:368
msgid ""
"Synchronize page table handling for BARs between the kernel driver and GSP."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:374
msgid "FIFO engine"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:376
msgid ""
"Implement support for the FIFO engine, i.e. the corresponding GSP message "
"interface and provide an API for chid allocation and channel handling."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:383
msgid "GR engine"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:385
msgid ""
"Implement support for the graphics engine, i.e. the corresponding GSP "
"message interface and provide an API for (golden) context creation and "
"promotion."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:392
msgid "CE engine"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:394
msgid ""
"Implement support for the copy engine, i.e. the corresponding GSP message "
"interface."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:401
msgid "VFN IRQ controller"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:403
msgid "Support for the VFN interrupt controller."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:409
msgid "External APIs"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:412
msgid "nova-core base API"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:414
msgid ""
"Work out the common pieces of the API to connect 2nd level drivers, i.e. "
"vGPU manager and nova-drm."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:420
msgid "vGPU manager API"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:422
msgid ""
"Work out the API parts required by the vGPU manager, which are not covered "
"by the base API."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:428
msgid "nova-core C API"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:430
msgid "Implement a C wrapper for the APIs required by the vGPU manager driver."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:435
msgid "Testing"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:438
msgid "CI pipeline"
msgstr ""

#: ../../../gpu/nova/core/todo.rst:440
msgid "Investigate option for continuous integration testing."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:442
msgid ""
"This can go from as simple as running KUnit tests over running (graphics) "
"CTS to booting up (multiple) guest VMs to test VFIO use-cases."
msgstr ""

#: ../../../gpu/nova/core/todo.rst:445
msgid ""
"It might also be worth to consider the introduction of a new test suite "
"directly sitting on top of the uAPI for more targeted testing and debugging. "
"There may be options for collaboration / shared code with the Mesa project."
msgstr ""
