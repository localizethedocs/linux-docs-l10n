# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../admin-guide/sysrq.rst:2
msgid "Linux Magic System Request Key Hacks"
msgstr ""

#: ../../../admin-guide/sysrq.rst:4
msgid "Documentation for sysrq.c"
msgstr ""

#: ../../../admin-guide/sysrq.rst:7
msgid "What is the magic SysRq key?"
msgstr ""

#: ../../../admin-guide/sysrq.rst:9
msgid ""
"It is a 'magical' key combo you can hit which the kernel will respond to "
"regardless of whatever else it is doing, unless it is completely locked up."
msgstr ""

#: ../../../admin-guide/sysrq.rst:13
msgid "How do I enable the magic SysRq key?"
msgstr ""

#: ../../../admin-guide/sysrq.rst:15
msgid ""
"You need to say \"yes\" to 'Magic SysRq key (CONFIG_MAGIC_SYSRQ)' when "
"configuring the kernel. When running a kernel with SysRq compiled in, /proc/"
"sys/kernel/sysrq controls the functions allowed to be invoked via the SysRq "
"key. The default value in this file is set by the "
"CONFIG_MAGIC_SYSRQ_DEFAULT_ENABLE config symbol, which itself defaults to 1. "
"Here is the list of possible values in /proc/sys/kernel/sysrq:"
msgstr ""

#: ../../../admin-guide/sysrq.rst:22
msgid "0 - disable sysrq completely"
msgstr ""

#: ../../../admin-guide/sysrq.rst:23
msgid "1 - enable all functions of sysrq"
msgstr ""

#: ../../../admin-guide/sysrq.rst:24
msgid ""
">1 - bitmask of allowed sysrq functions (see below for detailed function "
"description)::"
msgstr ""

#: ../../../admin-guide/sysrq.rst:36
msgid "You can set the value in the file by the following command::"
msgstr ""

#: ../../../admin-guide/sysrq.rst:40
msgid ""
"The number may be written here either as decimal or as hexadecimal with the "
"0x prefix. CONFIG_MAGIC_SYSRQ_DEFAULT_ENABLE must always be written in "
"hexadecimal."
msgstr ""

#: ../../../admin-guide/sysrq.rst:44
msgid ""
"Note that the value of ``/proc/sys/kernel/sysrq`` influences only the "
"invocation via a keyboard. Invocation of any operation via ``/proc/sysrq-"
"trigger`` is always allowed (by a user with admin privileges)."
msgstr ""

#: ../../../admin-guide/sysrq.rst:49
msgid "How do I use the magic SysRq key?"
msgstr ""

#: ../../../admin-guide/sysrq.rst:51
msgid "On x86"
msgstr ""

#: ../../../admin-guide/sysrq.rst:52
msgid "You press the key combo `ALT-SysRq-<command key>`."
msgstr ""

#: ../../../admin-guide/sysrq.rst:55
msgid ""
"Some keyboards may not have a key labeled 'SysRq'. The 'SysRq' key is also "
"known as the 'Print Screen' key. Also some keyboards cannot handle so many "
"keys being pressed at the same time, so you might have better luck with "
"press `Alt`, press `SysRq`, release `SysRq`, press `<command key>`, release "
"everything."
msgstr ""

#: ../../../admin-guide/sysrq.rst:62
msgid "On SPARC"
msgstr ""

#: ../../../admin-guide/sysrq.rst:63
msgid "You press `ALT-STOP-<command key>`, I believe."
msgstr ""

#: ../../../admin-guide/sysrq.rst:65
msgid "On the serial console (PC style standard serial ports only)"
msgstr ""

#: ../../../admin-guide/sysrq.rst:66
msgid ""
"You send a ``BREAK``, then within 5 seconds a command key. Sending ``BREAK`` "
"twice is interpreted as a normal BREAK."
msgstr ""

#: ../../../admin-guide/sysrq.rst:69
msgid "On PowerPC"
msgstr ""

#: ../../../admin-guide/sysrq.rst:70
msgid ""
"Press `ALT - Print Screen` (or `F13`) - `<command key>`. `Print Screen` (or "
"`F13`) - `<command key>` may suffice."
msgstr ""

#: ../../../admin-guide/sysrq.rst:73
msgid "On other"
msgstr ""

#: ../../../admin-guide/sysrq.rst:74
msgid ""
"If you know of the key combos for other architectures, please submit a patch "
"to be included in this section."
msgstr ""

#: ../../../admin-guide/sysrq.rst:77
msgid "On all"
msgstr ""

#: ../../../admin-guide/sysrq.rst:78
msgid ""
"Write a single character to /proc/sysrq-trigger. Only the first character is "
"processed, the rest of the string is ignored. However, it is not recommended "
"to write any extra characters as the behavior is undefined and might change "
"in the future versions. E.g.::"
msgstr ""

#: ../../../admin-guide/sysrq.rst:86
msgid ""
"Alternatively, write multiple characters prepended by underscore. This way, "
"all characters will be processed. E.g.::"
msgstr ""

#: ../../../admin-guide/sysrq.rst:91
msgid "The `<command key>` is case sensitive."
msgstr ""

#: ../../../admin-guide/sysrq.rst:94
msgid "What are the 'command' keys?"
msgstr ""

#: ../../../admin-guide/sysrq.rst:97
msgid "Command"
msgstr ""

#: ../../../admin-guide/sysrq.rst:97
msgid "Function"
msgstr ""

#: ../../../admin-guide/sysrq.rst:99
msgid "``b``"
msgstr ""

#: ../../../admin-guide/sysrq.rst:99
msgid ""
"Will immediately reboot the system without syncing or unmounting your disks."
msgstr ""

#: ../../../admin-guide/sysrq.rst:102
msgid "``c``"
msgstr ""

#: ../../../admin-guide/sysrq.rst:102
msgid ""
"Will perform a system crash and a crashdump will be taken if configured."
msgstr ""

#: ../../../admin-guide/sysrq.rst:105
msgid "``d``"
msgstr ""

#: ../../../admin-guide/sysrq.rst:105
msgid "Shows all locks that are held."
msgstr ""

#: ../../../admin-guide/sysrq.rst:107
msgid "``e``"
msgstr ""

#: ../../../admin-guide/sysrq.rst:107
msgid "Send a SIGTERM to all processes, except for init."
msgstr ""

#: ../../../admin-guide/sysrq.rst:109
msgid "``f``"
msgstr ""

#: ../../../admin-guide/sysrq.rst:109
msgid ""
"Will call the oom killer to kill a memory hog process, but do not panic if "
"nothing can be killed."
msgstr ""

#: ../../../admin-guide/sysrq.rst:112
msgid "``g``"
msgstr ""

#: ../../../admin-guide/sysrq.rst:112
msgid "Used by kgdb (kernel debugger)"
msgstr ""

#: ../../../admin-guide/sysrq.rst:114
msgid "``h``"
msgstr ""

#: ../../../admin-guide/sysrq.rst:114
msgid ""
"Will display help (actually any other key than those listed here will "
"display help. but ``h`` is easy to remember :-)"
msgstr ""

#: ../../../admin-guide/sysrq.rst:117
msgid "``i``"
msgstr ""

#: ../../../admin-guide/sysrq.rst:117
msgid "Send a SIGKILL to all processes, except for init."
msgstr ""

#: ../../../admin-guide/sysrq.rst:119
msgid "``j``"
msgstr ""

#: ../../../admin-guide/sysrq.rst:119
msgid "Forcibly \"Just thaw it\" - filesystems frozen by the FIFREEZE ioctl."
msgstr ""

#: ../../../admin-guide/sysrq.rst:121
msgid "``k``"
msgstr ""

#: ../../../admin-guide/sysrq.rst:121
msgid ""
"Secure Access Key (SAK) Kills all programs on the current virtual console. "
"NOTE: See important comments below in SAK section."
msgstr ""

#: ../../../admin-guide/sysrq.rst:124
msgid "``l``"
msgstr ""

#: ../../../admin-guide/sysrq.rst:124
msgid "Shows a stack backtrace for all active CPUs."
msgstr ""

#: ../../../admin-guide/sysrq.rst:126
msgid "``m``"
msgstr ""

#: ../../../admin-guide/sysrq.rst:126
msgid "Will dump current memory info to your console."
msgstr ""

#: ../../../admin-guide/sysrq.rst:128
msgid "``n``"
msgstr ""

#: ../../../admin-guide/sysrq.rst:128
msgid "Used to make RT tasks nice-able"
msgstr ""

#: ../../../admin-guide/sysrq.rst:130
msgid "``o``"
msgstr ""

#: ../../../admin-guide/sysrq.rst:130
msgid "Will shut your system off (if configured and supported)."
msgstr ""

#: ../../../admin-guide/sysrq.rst:132
msgid "``p``"
msgstr ""

#: ../../../admin-guide/sysrq.rst:132
msgid "Will dump the current registers and flags to your console."
msgstr ""

#: ../../../admin-guide/sysrq.rst:134
msgid "``q``"
msgstr ""

#: ../../../admin-guide/sysrq.rst:134
msgid ""
"Will dump per CPU lists of all armed hrtimers (but NOT regular timer_list "
"timers) and detailed information about all clockevent devices."
msgstr ""

#: ../../../admin-guide/sysrq.rst:138
msgid "``r``"
msgstr ""

#: ../../../admin-guide/sysrq.rst:138
msgid "Turns off keyboard raw mode and sets it to XLATE."
msgstr ""

#: ../../../admin-guide/sysrq.rst:140
msgid "``s``"
msgstr ""

#: ../../../admin-guide/sysrq.rst:140
msgid "Will attempt to sync all mounted filesystems."
msgstr ""

#: ../../../admin-guide/sysrq.rst:142
msgid "``t``"
msgstr ""

#: ../../../admin-guide/sysrq.rst:142
msgid ""
"Will dump a list of current tasks and their information to your console."
msgstr ""

#: ../../../admin-guide/sysrq.rst:145
msgid "``u``"
msgstr ""

#: ../../../admin-guide/sysrq.rst:145
msgid "Will attempt to remount all mounted filesystems read-only."
msgstr ""

#: ../../../admin-guide/sysrq.rst:147 ../../../admin-guide/sysrq.rst:148
msgid "``v``"
msgstr ""

#: ../../../admin-guide/sysrq.rst:147
msgid "Forcefully restores framebuffer console"
msgstr ""

#: ../../../admin-guide/sysrq.rst:148
msgid "Causes ETM buffer dump [ARM-specific]"
msgstr ""

#: ../../../admin-guide/sysrq.rst:150
msgid "``w``"
msgstr ""

#: ../../../admin-guide/sysrq.rst:150
msgid "Dumps tasks that are in uninterruptible (blocked) state."
msgstr ""

#: ../../../admin-guide/sysrq.rst:152
msgid "``x``"
msgstr ""

#: ../../../admin-guide/sysrq.rst:152
msgid ""
"Used by xmon interface on ppc/powerpc platforms. Show global PMU Registers "
"on sparc64. Dump all TLB entries on MIPS."
msgstr ""

#: ../../../admin-guide/sysrq.rst:156
msgid "``y``"
msgstr ""

#: ../../../admin-guide/sysrq.rst:156
msgid "Show global CPU Registers [SPARC-64 specific]"
msgstr ""

#: ../../../admin-guide/sysrq.rst:158
msgid "``z``"
msgstr ""

#: ../../../admin-guide/sysrq.rst:158
msgid "Dump the ftrace buffer"
msgstr ""

#: ../../../admin-guide/sysrq.rst:160
msgid "``0``-``9``"
msgstr ""

#: ../../../admin-guide/sysrq.rst:160
msgid ""
"Sets the console log level, controlling which kernel messages will be "
"printed to your console. (``0``, for example would make it so that only "
"emergency messages like PANICs or OOPSes would make it to your console.)"
msgstr ""

#: ../../../admin-guide/sysrq.rst:165
msgid "``R``"
msgstr ""

#: ../../../admin-guide/sysrq.rst:165
msgid "Replay the kernel log messages on consoles."
msgstr ""

#: ../../../admin-guide/sysrq.rst:169
msgid "Okay, so what can I use them for?"
msgstr ""

#: ../../../admin-guide/sysrq.rst:171
msgid ""
"Well, unraw(r) is very handy when your X server or a svgalib program crashes."
msgstr ""

#: ../../../admin-guide/sysrq.rst:173
msgid ""
"sak(k) (Secure Access Key) is useful when you want to be sure there is no "
"trojan program running at console which could grab your password when you "
"would try to login. It will kill all programs on given console, thus letting "
"you make sure that the login prompt you see is actually the one from init, "
"not some trojan program."
msgstr ""

#: ../../../admin-guide/sysrq.rst:181
msgid ""
"In its true form it is not a true SAK like the one in a c2 compliant system, "
"and it should not be mistaken as such."
msgstr ""

#: ../../../admin-guide/sysrq.rst:185
msgid ""
"It seems others find it useful as (System Attention Key) which is useful "
"when you want to exit a program that will not let you switch consoles. (For "
"example, X or a svgalib program.)"
msgstr ""

#: ../../../admin-guide/sysrq.rst:189
msgid ""
"``reboot(b)`` is good when you're unable to shut down, it is an equivalent "
"of pressing the \"reset\" button."
msgstr ""

#: ../../../admin-guide/sysrq.rst:192
msgid ""
"``crash(c)`` can be used to manually trigger a crashdump when the system is "
"hung. Note that this just triggers a crash if there is no dump mechanism "
"available."
msgstr ""

#: ../../../admin-guide/sysrq.rst:195
msgid ""
"``sync(s)`` is handy before yanking removable medium or after using a rescue "
"shell that provides no graceful shutdown -- it will ensure your data is "
"safely written to the disk. Note that the sync hasn't taken place until you "
"see the \"OK\" and \"Done\" appear on the screen."
msgstr ""

#: ../../../admin-guide/sysrq.rst:200
msgid ""
"``umount(u)`` can be used to mark filesystems as properly unmounted. From "
"the running system's point of view, they will be remounted read-only. The "
"remount isn't complete until you see the \"OK\" and \"Done\" message appear "
"on the screen."
msgstr ""

#: ../../../admin-guide/sysrq.rst:204
msgid ""
"The loglevels ``0``-``9`` are useful when your console is being flooded with "
"kernel messages you do not want to see. Selecting ``0`` will prevent all but "
"the most urgent kernel messages from reaching your console. (They will still "
"be logged if syslogd/klogd are alive, though.)"
msgstr ""

#: ../../../admin-guide/sysrq.rst:209
msgid ""
"``term(e)`` and ``kill(i)`` are useful if you have some sort of runaway "
"process you are unable to kill any other way, especially if it's spawning "
"other processes."
msgstr ""

#: ../../../admin-guide/sysrq.rst:213
msgid ""
"\"just thaw ``it(j)``\" is useful if your system becomes unresponsive due to "
"a frozen (probably root) filesystem via the FIFREEZE ioctl."
msgstr ""

#: ../../../admin-guide/sysrq.rst:216
msgid ""
"``Replay logs(R)`` is useful to view the kernel log messages when system is "
"hung or you are not able to use dmesg command to view the messages in printk "
"buffer. User may have to press the key combination multiple times if console "
"system is busy. If it is completely locked up, then messages won't be "
"printed. Output messages depend on current console loglevel, which can be "
"modified using sysrq[0-9] (see above)."
msgstr ""

#: ../../../admin-guide/sysrq.rst:224
msgid "Sometimes SysRq seems to get 'stuck' after using it, what can I do?"
msgstr ""

#: ../../../admin-guide/sysrq.rst:226
msgid ""
"When this happens, try tapping shift, alt and control on both sides of the "
"keyboard, and hitting an invalid sysrq sequence again. (i.e., something like "
"`alt-sysrq-z`)."
msgstr ""

#: ../../../admin-guide/sysrq.rst:230
msgid ""
"Switching to another virtual console (`ALT+Fn`) and then back again should "
"also help."
msgstr ""

#: ../../../admin-guide/sysrq.rst:234
msgid "I hit SysRq, but nothing seems to happen, what's wrong?"
msgstr ""

#: ../../../admin-guide/sysrq.rst:236
msgid ""
"There are some keyboards that produce a different keycode for SysRq than the "
"pre-defined value of 99 (see ``KEY_SYSRQ`` in ``include/uapi/linux/input-"
"event-codes.h``), or which don't have a SysRq key at all. In these cases, "
"run ``showkey -s`` to find an appropriate scancode sequence, and use "
"``setkeycodes <sequence> 99`` to map this sequence to the usual SysRq code "
"(e.g., ``setkeycodes e05b 99``). It's probably best to put this command in a "
"boot script. Oh, and by the way, you exit ``showkey`` by not typing anything "
"for ten seconds."
msgstr ""

#: ../../../admin-guide/sysrq.rst:246
msgid "I want to add SysRQ key events to a module, how does it work?"
msgstr ""

#: ../../../admin-guide/sysrq.rst:248
msgid ""
"In order to register a basic function with the table, you must first include "
"the header ``include/linux/sysrq.h``, this will define everything else you "
"need. Next, you must create a ``sysrq_key_op`` struct, and populate it with "
"A) the key handler function you will use, B) a help_msg string, that will "
"print when SysRQ prints help, and C) an action_msg string, that will print "
"right before your handler is called. Your handler must conform to the "
"prototype in 'sysrq.h'."
msgstr ""

#: ../../../admin-guide/sysrq.rst:255
msgid ""
"After the ``sysrq_key_op`` is created, you can call the kernel function "
"``register_sysrq_key(int key, const struct sysrq_key_op *op_p);`` this will "
"register the operation pointed to by ``op_p`` at table key 'key', if that "
"slot in the table is blank. At module unload time, you must call the "
"function ``unregister_sysrq_key(int key, const struct sysrq_key_op *op_p)``, "
"which will remove the key op pointed to by 'op_p' from the key 'key', if and "
"only if it is currently registered in that slot. This is in case the slot "
"has been overwritten since you registered it."
msgstr ""

#: ../../../admin-guide/sysrq.rst:264
msgid ""
"The Magic SysRQ system works by registering key operations against a key op "
"lookup table, which is defined in 'drivers/tty/sysrq.c'. This key table has "
"a number of operations registered into it at compile time, but is mutable, "
"and 2 functions are exported for interface to it::"
msgstr ""

#: ../../../admin-guide/sysrq.rst:271
msgid ""
"Of course, never ever leave an invalid pointer in the table. I.e., when your "
"module that called register_sysrq_key() exits, it must call "
"unregister_sysrq_key() to clean up the sysrq key table entry that it used. "
"Null pointers in the table are always safe. :)"
msgstr ""

#: ../../../admin-guide/sysrq.rst:276
msgid ""
"If for some reason you feel the need to call the handle_sysrq function from "
"within a function called by handle_sysrq, you must be aware that you are in "
"a lock (you are also in an interrupt handler, which means don't sleep!), so "
"you must call ``__handle_sysrq_nolock`` instead."
msgstr ""

#: ../../../admin-guide/sysrq.rst:282
msgid ""
"When I hit a SysRq key combination only the header appears on the console?"
msgstr ""

#: ../../../admin-guide/sysrq.rst:284
msgid ""
"Sysrq output is subject to the same console loglevel control as all other "
"console output.  This means that if the kernel was booted 'quiet' as is "
"common on distro kernels the output may not appear on the actual console, "
"even though it will appear in the dmesg buffer, and be accessible via the "
"dmesg command and to the consumers of ``/proc/kmsg``.  As a specific "
"exception the header line from the sysrq command is passed to all console "
"consumers as if the current loglevel was maximum.  If only the header is "
"emitted it is almost certain that the kernel loglevel is too low. Should you "
"require the output on the console channel then you will need to temporarily "
"up the console loglevel using `alt-sysrq-8` or::"
msgstr ""

#: ../../../admin-guide/sysrq.rst:297
msgid ""
"Remember to return the loglevel to normal after triggering the sysrq command "
"you are interested in."
msgstr ""

#: ../../../admin-guide/sysrq.rst:301
msgid "I have more questions, who can I ask?"
msgstr ""

#: ../../../admin-guide/sysrq.rst:303
msgid "Just ask them on the linux-kernel mailing list:"
msgstr ""

#: ../../../admin-guide/sysrq.rst:304
msgid "linux-kernel@vger.kernel.org"
msgstr ""

#: ../../../admin-guide/sysrq.rst:307
msgid "Credits"
msgstr ""

#: ../../../admin-guide/sysrq.rst:309
msgid "Written by Mydraal <vulpyne@vulpyne.net>"
msgstr ""

#: ../../../admin-guide/sysrq.rst:310
msgid "Updated by Adam Sulmicki <adam@cfar.umd.edu>"
msgstr ""

#: ../../../admin-guide/sysrq.rst:311
msgid "Updated by Jeremy M. Dolan <jmd@turbogeek.org> 2001/01/28 10:15:59"
msgstr ""

#: ../../../admin-guide/sysrq.rst:312
msgid "Added to by Crutcher Dunnavant <crutcher+kernel@datastacks.com>"
msgstr ""
