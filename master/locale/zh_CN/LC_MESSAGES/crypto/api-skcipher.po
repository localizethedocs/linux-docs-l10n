# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 08:27+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../crypto/api-skcipher.rst:2
msgid "Symmetric Key Cipher"
msgstr ""

#: ../../../crypto/api-skcipher.rst:5
msgid "Block Cipher Algorithm Definitions"
msgstr ""

#: ../../../crypto/api-skcipher:7: include/linux/crypto.h:198
msgid ""
"These data structures define modular crypto algorithm implementations, "
"managed via crypto_register_alg() and crypto_unregister_alg()."
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:205
msgid "single-block symmetric ciphers definition"
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:209
#: include/linux/crypto.h:267
msgid "**Definition**::"
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:219
#: include/linux/crypto.h:291
msgid "**Members**"
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:206
msgid "``cia_min_keysize``"
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:207
msgid ""
"Minimum key size supported by the transformation. This is the smallest key "
"length supported by this transformation algorithm. This must be set to one "
"of the pre-defined values as this is not hardware specific. Possible values "
"for this field can be found via git grep \"_MIN_KEY_SIZE\" include/crypto/"
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:212
msgid "``cia_max_keysize``"
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:213
msgid ""
"Maximum key size supported by the transformation. This is the largest key "
"length supported by this transformation algorithm. This must be set to one "
"of the pre-defined values as this is not hardware specific. Possible values "
"for this field can be found via git grep \"_MAX_KEY_SIZE\" include/crypto/"
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:218
msgid "``cia_setkey``"
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:219
msgid ""
"Set key for the transformation. This function is used to either program a "
"supplied key into the hardware or store the key in the transformation "
"context for programming it later. Note that this function does modify the "
"transformation context. This function can be called multiple times during "
"the existence of the transformation object, so one must make sure the key is "
"properly reprogrammed into the hardware. This function is also responsible "
"for checking the key length for validity."
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:226
msgid "``cia_encrypt``"
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:227
msgid ""
"Encrypt a single block. This function is used to encrypt a single block of "
"data, which must be **cra_blocksize** big. This always operates on a full "
"**cra_blocksize** and it is not possible to encrypt a block of smaller size. "
"The supplied buffers must therefore also be at least of **cra_blocksize** "
"size. Both the input and output buffers are always aligned to "
"**cra_alignmask**. In case either of the input or output buffer supplied by "
"user of the crypto API is not aligned to **cra_alignmask**, the crypto API "
"will re-align the buffers. The re-alignment means that a new buffer will be "
"allocated, the data will be copied into the new buffer, then the processing "
"will happen on the new buffer, then the data will be copied back into the "
"original buffer and finally the new buffer will be freed. In case a software "
"fallback was put in place in the **cra_init** call, this function might need "
"to use the fallback if the algorithm doesn't support all of the key sizes. "
"In case the key was stored in transformation context, the key might need to "
"be re-programmed into the hardware in this function. This function shall not "
"modify the transformation context, as this function may be called in "
"parallel with the same transformation object."
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:246
msgid "``cia_decrypt``"
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:247
msgid ""
"Decrypt a single block. This is a reverse counterpart to **cia_encrypt**, "
"and the conditions are exactly the same."
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:251
#: include/linux/crypto.h:326 ../../../crypto/api-skcipher:19:
#: include/crypto/skcipher.h:272 include/crypto/skcipher.h:325
#: include/crypto/skcipher.h:397 include/crypto/skcipher.h:432
#: include/crypto/skcipher.h:604 include/crypto/skcipher.h:670
#: include/crypto/skcipher.h:694 include/crypto/skcipher.h:707
#: ../../../crypto/api-skcipher:28: include/crypto/skcipher.h:814
#: include/crypto/skcipher.h:840 include/crypto/skcipher.h:894
#: include/crypto/skcipher.h:921 ../../../crypto/api-skcipher:37:
#: include/crypto/internal/cipher.h:49 include/crypto/internal/cipher.h:103
#: include/crypto/internal/cipher.h:142 include/crypto/internal/cipher.h:161
#: include/crypto/internal/cipher.h:173
msgid "**Description**"
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:248
msgid "All fields are mandatory and must be filled."
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:263
msgid "definition of a cryptograpic cipher algorithm"
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:323
msgid "``cra_list``"
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:324
#: include/linux/crypto.h:325 include/linux/crypto.h:326
#: include/linux/crypto.h:327
msgid "internally used"
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:324
msgid "``cra_users``"
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:264
msgid "``cra_flags``"
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:265
msgid ""
"Flags describing this transformation. See include/linux/crypto.h "
"CRYPTO_ALG_* flags for the flags which go in here. Those are used for fine-"
"tuning the description of the transformation algorithm."
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:268
msgid "``cra_blocksize``"
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:269
msgid ""
"Minimum block size of this transformation. The size in bytes of the smallest "
"possible unit which can be transformed with this algorithm. The users must "
"respect this value. In case of HASH transformation, it is possible for a "
"smaller block than **cra_blocksize** to be passed to the crypto API for "
"transformation, in case of any other transformation type, an error will be "
"returned upon any attempt to transform smaller than **cra_blocksize** chunks."
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:276
msgid "``cra_ctxsize``"
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:277
msgid ""
"Size of the operational context of the transformation. This value informs "
"the kernel crypto API about the memory size needed to be allocated for the "
"transformation context."
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:279
msgid "``cra_alignmask``"
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:280
msgid ""
"For cipher, skcipher, lskcipher, and aead algorithms this is 1 less than the "
"alignment, in bytes, that the algorithm implementation requires for input "
"and output buffers.  When the crypto API is invoked with buffers that are "
"not aligned to this alignment, the crypto API automatically utilizes "
"appropriately aligned temporary buffers to comply with what the algorithm "
"needs.  (For scatterlists this happens only if the algorithm uses the "
"skcipher_walk helper functions.)  This misalignment handling carries a "
"performance penalty, so it is preferred that algorithms do not set a nonzero "
"alignmask. Also, crypto API users may wish to allocate buffers aligned to "
"the alignmask of the algorithm being used, in order to avoid the API having "
"to realign them.  Note: the alignmask is not supported for hash algorithms "
"and is always 0 for them."
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:293
msgid "``cra_reqsize``"
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:294
msgid "Size of the request context for this algorithm."
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:294
msgid "``cra_priority``"
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:295
msgid ""
"Priority of this transformation implementation. In case multiple "
"transformations with same **cra_name** are available to the Crypto API, the "
"kernel will use the one with highest **cra_priority**."
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:325
msgid "``cra_refcnt``"
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:298
msgid "``cra_name``"
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:299
msgid ""
"Generic name (usable by multiple implementations) of the transformation "
"algorithm. This is the name of the transformation itself. This field is used "
"by the kernel when looking up the providers of particular transformation."
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:302
msgid "``cra_driver_name``"
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:303
msgid ""
"Unique name of the transformation provider. This is the name of the provider "
"of the transformation. This can be any arbitrary value, but in the usual "
"case, this contains the name of the chip or provider and the name of the "
"transformation algorithm."
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:307
msgid "``cra_type``"
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:308
msgid ""
"Type of the cryptographic transformation. This is a pointer to struct "
"crypto_type, which implements callbacks common for all transformation types. "
"There are multiple options, such as :c:type:`crypto_skcipher_type`, :c:type:"
"`crypto_ahash_type`, :c:type:`crypto_rng_type`. This field might be empty. "
"In that case, there are no common callbacks. This is the case for: cipher."
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:313
msgid "``cra_u``"
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:314
msgid ""
"Callbacks implementing the transformation. This is a union of multiple "
"structures. Depending on the type of transformation selected by **cra_type** "
"and **cra_flags** above, the associated structure must be filled with "
"callbacks. This field might be empty. This is the case for ahash, shash."
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:320
msgid "``cra_u.cipher``"
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:321
msgid ""
"Union member which contains a single-block symmetric cipher definition. See "
"**struct** **cipher_alg**."
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:318
msgid "``cra_init``"
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:319
#: include/linux/crypto.h:320
msgid "Deprecated, do not use."
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:319
msgid "``cra_exit``"
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:326
msgid "``cra_destroy``"
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:322
msgid "``cra_module``"
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:323
msgid "Owner of this transformation implementation. Set to THIS_MODULE"
msgstr ""

#: ../../../crypto/api-skcipher:10: include/linux/crypto.h:327
msgid ""
"The struct crypto_alg describes a generic Crypto API algorithm and is common "
"for all of the transformations. Any variable not documented here shall not "
"be used by a cipher implementation as it is internal to the Crypto API."
msgstr ""

#: ../../../crypto/api-skcipher.rst:14
msgid "Symmetric Key Cipher API"
msgstr ""

#: ../../../crypto/api-skcipher:16: include/crypto/skcipher.h:230
msgid ""
"Symmetric key cipher API is used with the ciphers of type "
"CRYPTO_ALG_TYPE_SKCIPHER (listed as type \"skcipher\" in /proc/crypto)."
msgstr ""

#: ../../../crypto/api-skcipher:16: include/crypto/skcipher.h:233
msgid ""
"Asynchronous cipher operations imply that the function invocation for a "
"cipher request returns immediately before the completion of the operation. "
"The cipher request is scheduled as a separate kernel thread and therefore "
"load-balanced on the different CPUs via the process scheduler. To allow the "
"kernel crypto API to inform the caller about the completion of a cipher "
"request, the caller must provide a callback function. That function is "
"invoked with the cipher handle when the request completes."
msgstr ""

#: ../../../crypto/api-skcipher:16: include/crypto/skcipher.h:241
msgid ""
"To support the asynchronous operation, additional information than just the "
"cipher handle must be supplied to the kernel crypto API. That additional "
"information is given by filling in the skcipher_request data structure."
msgstr ""

#: ../../../crypto/api-skcipher:16: include/crypto/skcipher.h:245
msgid ""
"For the symmetric key cipher API, the state is maintained with the tfm "
"cipher handle. A single tfm can be used across multiple calls and in "
"parallel. For asynchronous block cipher calls, context data supplied and "
"only used by the caller can be referenced the request data structure in "
"addition to the IV used for the cipher request. The maintenance of such "
"state information would be important for a crypto driver implementer to "
"have, because when calling the callback function upon completion of the "
"cipher operation, that callback function may need some information about "
"which operation just finished if it invoked multiple in parallel. This state "
"information is unused by the kernel crypto API."
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:266
msgid "allocate symmetric key cipher handle"
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:270
#: include/crypto/skcipher.h:326 include/crypto/skcipher.h:353
#: include/crypto/skcipher.h:398 include/crypto/skcipher.h:433
#: include/crypto/skcipher.h:603 include/crypto/skcipher.h:671
#: include/crypto/skcipher.h:694 include/crypto/skcipher.h:707
#: ../../../crypto/api-skcipher:28: include/crypto/skcipher.h:803
#: include/crypto/skcipher.h:814 include/crypto/skcipher.h:840
#: include/crypto/skcipher.h:866 include/crypto/skcipher.h:882
#: include/crypto/skcipher.h:917 ../../../crypto/api-skcipher:37:
#: include/crypto/internal/cipher.h:47 include/crypto/internal/cipher.h:76
#: include/crypto/internal/cipher.h:85 include/crypto/internal/cipher.h:104
#: include/crypto/internal/cipher.h:141 include/crypto/internal/cipher.h:160
#: include/crypto/internal/cipher.h:172
msgid "**Parameters**"
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:272
#: include/crypto/skcipher.h:355 ../../../crypto/api-skcipher:37:
#: include/crypto/internal/cipher.h:49 include/crypto/internal/cipher.h:87
msgid "``const char *alg_name``"
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:267
msgid ""
"is the cra_name / name or cra_driver_name / driver name of the skcipher "
"cipher"
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:270
#: include/crypto/skcipher.h:353 ../../../crypto/api-skcipher:37:
#: include/crypto/internal/cipher.h:47 include/crypto/internal/cipher.h:85
msgid "``u32 type``"
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:269
#: ../../../crypto/api-skcipher:37: include/crypto/internal/cipher.h:46
#: include/crypto/internal/cipher.h:84
msgid "specifies the type of the cipher"
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:271
#: include/crypto/skcipher.h:354 ../../../crypto/api-skcipher:37:
#: include/crypto/internal/cipher.h:48 include/crypto/internal/cipher.h:86
msgid "``u32 mask``"
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:270
#: ../../../crypto/api-skcipher:37: include/crypto/internal/cipher.h:47
#: include/crypto/internal/cipher.h:85
msgid "specifies the mask for the cipher"
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:271
msgid ""
"Allocate a cipher handle for an skcipher. The returned struct "
"crypto_skcipher is the cipher handle that is required for any subsequent API "
"invocation for that skcipher."
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:275
#: include/crypto/skcipher.h:355 include/crypto/skcipher.h:399
#: include/crypto/skcipher.h:435 include/crypto/skcipher.h:611
#: include/crypto/skcipher.h:672 include/crypto/skcipher.h:697
#: include/crypto/skcipher.h:710 ../../../crypto/api-skcipher:28:
#: include/crypto/skcipher.h:802 include/crypto/skcipher.h:843
#: ../../../crypto/api-skcipher:37: include/crypto/internal/cipher.h:52
#: include/crypto/internal/cipher.h:87 include/crypto/internal/cipher.h:106
#: include/crypto/internal/cipher.h:149
msgid "**Return**"
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:276
#: ../../../crypto/api-skcipher:37: include/crypto/internal/cipher.h:53
msgid ""
"allocated cipher handle in case of success; IS_ERR() is true in case of an "
"error, PTR_ERR() returns the error code."
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:322
msgid "zeroize and free cipher handle"
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:328
#: include/crypto/skcipher.h:400 include/crypto/skcipher.h:435
#: include/crypto/skcipher.h:605 ../../../crypto/api-skcipher:28:
#: include/crypto/skcipher.h:805 include/crypto/skcipher.h:813
#: include/crypto/skcipher.h:842
msgid "``struct crypto_skcipher *tfm``"
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:323
#: ../../../crypto/api-skcipher:37: include/crypto/internal/cipher.h:73
msgid "cipher handle to be freed"
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:324
msgid "If **tfm** is a NULL or error pointer, this function does nothing."
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:349
msgid "Search for the availability of an skcipher."
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:350
msgid "is the cra_name / name or cra_driver_name / driver name of the skcipher"
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:352
msgid "specifies the type of the skcipher"
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:353
msgid "specifies the mask for the skcipher"
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:355
msgid ""
"true when the skcipher is known to the kernel crypto API; false otherwise"
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:394
msgid "obtain IV size"
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:395
#: include/crypto/skcipher.h:430 include/crypto/skcipher.h:600
#: ../../../crypto/api-skcipher:28: include/crypto/skcipher.h:800
#: ../../../crypto/api-skcipher:37: include/crypto/internal/cipher.h:101
#: include/crypto/internal/cipher.h:138 include/crypto/internal/cipher.h:157
#: include/crypto/internal/cipher.h:169
msgid "cipher handle"
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:396
msgid ""
"The size of the IV for the skcipher referenced by the cipher handle is "
"returned. This IV size may be zero if the cipher does not need an IV."
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:400
msgid "IV size in bytes"
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:429
msgid "obtain block size of cipher"
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:431
msgid ""
"The block size for the skcipher referenced with the cipher handle is "
"returned. The caller may use that information to allocate appropriate memory "
"for the data returned by the encryption or decryption operation"
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:436
#: ../../../crypto/api-skcipher:37: include/crypto/internal/cipher.h:107
msgid "block size of cipher"
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:599
#: ../../../crypto/api-skcipher:37: include/crypto/internal/cipher.h:137
msgid "set key for cipher"
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:602
#: ../../../crypto/api-skcipher:37: include/crypto/internal/cipher.h:140
msgid "``const u8 *key``"
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:601
#: ../../../crypto/api-skcipher:37: include/crypto/internal/cipher.h:139
msgid "buffer holding the key"
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:603
#: ../../../crypto/api-skcipher:37: include/crypto/internal/cipher.h:141
msgid "``unsigned int keylen``"
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:602
#: ../../../crypto/api-skcipher:37: include/crypto/internal/cipher.h:140
msgid "length of the key in bytes"
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:603
msgid ""
"The caller provided key is set for the skcipher referenced by the cipher "
"handle."
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:606
#: ../../../crypto/api-skcipher:37: include/crypto/internal/cipher.h:144
msgid ""
"Note, the key length determines the cipher type. Many block ciphers "
"implement different cipher modes depending on the key size, such as AES-128 "
"vs AES-192 vs. AES-256. When providing a 16 byte key for an AES cipher "
"handle, AES-128 is performed."
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:612
#: ../../../crypto/api-skcipher:37: include/crypto/internal/cipher.h:150
msgid "0 if the setting of the key was successful; < 0 if an error occurred"
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:667
msgid "obtain cipher handle from request"
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:673
#: include/crypto/skcipher.h:696 include/crypto/skcipher.h:709
#: ../../../crypto/api-skcipher:28: include/crypto/skcipher.h:816
#: include/crypto/skcipher.h:868 include/crypto/skcipher.h:884
#: include/crypto/skcipher.h:919
msgid "``struct skcipher_request *req``"
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:668
msgid "skcipher_request out of which the cipher handle is to be obtained"
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:669
msgid ""
"Return the crypto_skcipher handle when furnishing an skcipher_request data "
"structure."
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:673
msgid "crypto_skcipher handle"
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:690
msgid "encrypt plaintext"
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:691
#: include/crypto/skcipher.h:704
msgid ""
"reference to the skcipher_request handle that holds all information needed "
"to perform the cipher operation"
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:693
msgid ""
"Encrypt plaintext data using the skcipher_request handle. That data "
"structure and how it is filled with data is discussed with the "
"skcipher_request_* functions."
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:698
#: include/crypto/skcipher.h:711
msgid "0 if the cipher operation was successful; < 0 if an error occurred"
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:703
msgid "decrypt ciphertext"
msgstr ""

#: ../../../crypto/api-skcipher:19: include/crypto/skcipher.h:706
msgid ""
"Decrypt ciphertext data using the skcipher_request handle. That data "
"structure and how it is filled with data is discussed with the "
"skcipher_request_* functions."
msgstr ""

#: ../../../crypto/api-skcipher.rst:23
msgid "Symmetric Key Cipher Request Handle"
msgstr ""

#: ../../../crypto/api-skcipher:25: include/crypto/skcipher.h:788
msgid ""
"The skcipher_request data structure contains all pointers to data required "
"for the symmetric key cipher operation. This includes the cipher handle "
"(which can be used by multiple skcipher_request instances), pointer to "
"plaintext and ciphertext, asynchronous callback function, etc. It acts as a "
"handle to the skcipher_request_* API calls in a similar way as skcipher "
"handle to the crypto_skcipher_* API calls."
msgstr ""

#: ../../../crypto/api-skcipher:28: include/crypto/skcipher.h:799
msgid "obtain size of the request data structure"
msgstr ""

#: ../../../crypto/api-skcipher:28: include/crypto/skcipher.h:802
msgid "number of bytes"
msgstr ""

#: ../../../crypto/api-skcipher:28: include/crypto/skcipher.h:810
msgid "update cipher handle reference in request"
msgstr ""

#: ../../../crypto/api-skcipher:28: include/crypto/skcipher.h:811
msgid "request handle to be modified"
msgstr ""

#: ../../../crypto/api-skcipher:28: include/crypto/skcipher.h:812
msgid "cipher handle that shall be added to the request handle"
msgstr ""

#: ../../../crypto/api-skcipher:28: include/crypto/skcipher.h:813
msgid ""
"Allow the caller to replace the existing skcipher handle in the request data "
"structure with a different one."
msgstr ""

#: ../../../crypto/api-skcipher:28: include/crypto/skcipher.h:836
msgid "allocate request data structure"
msgstr ""

#: ../../../crypto/api-skcipher:28: include/crypto/skcipher.h:837
msgid "cipher handle to be registered with the request"
msgstr ""

#: ../../../crypto/api-skcipher:28: include/crypto/skcipher.h:839
msgid "``gfp_t gfp``"
msgstr ""

#: ../../../crypto/api-skcipher:28: include/crypto/skcipher.h:838
msgid "memory allocation flag that is handed to kmalloc by the API call."
msgstr ""

#: ../../../crypto/api-skcipher:28: include/crypto/skcipher.h:839
msgid ""
"Allocate the request data structure that must be used with the skcipher "
"encrypt and decrypt API calls. During the allocation, the provided skcipher "
"handle is registered in the request data structure."
msgstr ""

#: ../../../crypto/api-skcipher:28: include/crypto/skcipher.h:844
msgid "allocated request handle in case of success, or NULL if out of memory"
msgstr ""

#: ../../../crypto/api-skcipher:28: include/crypto/skcipher.h:862
msgid "zeroize and free request data structure"
msgstr ""

#: ../../../crypto/api-skcipher:28: include/crypto/skcipher.h:863
msgid "request data structure cipher handle to be freed"
msgstr ""

#: ../../../crypto/api-skcipher:28: include/crypto/skcipher.h:878
msgid "set asynchronous callback function"
msgstr ""

#: ../../../crypto/api-skcipher:28: include/crypto/skcipher.h:879
#: include/crypto/skcipher.h:914
msgid "request handle"
msgstr ""

#: ../../../crypto/api-skcipher:28: include/crypto/skcipher.h:881
msgid "``u32 flags``"
msgstr ""

#: ../../../crypto/api-skcipher:28: include/crypto/skcipher.h:880
msgid ""
"specify zero or an ORing of the flags CRYPTO_TFM_REQ_MAY_BACKLOG the request "
"queue may back log and increase the wait queue beyond the initial maximum "
"size; CRYPTO_TFM_REQ_MAY_SLEEP the request processing may sleep"
msgstr ""

#: ../../../crypto/api-skcipher:28: include/crypto/skcipher.h:885
msgid "``crypto_completion_t compl``"
msgstr ""

#: ../../../crypto/api-skcipher:28: include/crypto/skcipher.h:884
msgid "callback function pointer to be registered with the request handle"
msgstr ""

#: ../../../crypto/api-skcipher:28: include/crypto/skcipher.h:886
msgid "``void *data``"
msgstr ""

#: ../../../crypto/api-skcipher:28: include/crypto/skcipher.h:885
msgid ""
"The data pointer refers to memory that is not used by the kernel crypto API, "
"but provided to the callback function for it to use. Here, the caller can "
"provide a reference to memory the callback function can operate on. As the "
"callback function is invoked asynchronously to the related functionality, it "
"may need to access data structures of the related functionality which can be "
"referenced using this pointer. The callback function can access the memory "
"via the \"data\" field in the crypto_async_request data structure provided "
"to the callback function."
msgstr ""

#: ../../../crypto/api-skcipher:28: include/crypto/skcipher.h:893
msgid ""
"This function allows setting the callback function that is triggered once "
"the cipher operation completes."
msgstr ""

#: ../../../crypto/api-skcipher:28: include/crypto/skcipher.h:896
msgid ""
"The callback function is registered with the skcipher_request handle and "
"must comply with the following template::"
msgstr ""

#: ../../../crypto/api-skcipher:28: include/crypto/skcipher.h:913
msgid "set data buffers"
msgstr ""

#: ../../../crypto/api-skcipher:28: include/crypto/skcipher.h:916
msgid "``struct scatterlist *src``"
msgstr ""

#: ../../../crypto/api-skcipher:28: include/crypto/skcipher.h:915
msgid "source scatter / gather list"
msgstr ""

#: ../../../crypto/api-skcipher:28: include/crypto/skcipher.h:917
msgid "``struct scatterlist *dst``"
msgstr ""

#: ../../../crypto/api-skcipher:28: include/crypto/skcipher.h:916
msgid "destination scatter / gather list"
msgstr ""

#: ../../../crypto/api-skcipher:28: include/crypto/skcipher.h:918
msgid "``unsigned int cryptlen``"
msgstr ""

#: ../../../crypto/api-skcipher:28: include/crypto/skcipher.h:917
msgid "number of bytes to process from **src**"
msgstr ""

#: ../../../crypto/api-skcipher:28: include/crypto/skcipher.h:919
msgid "``void *iv``"
msgstr ""

#: ../../../crypto/api-skcipher:28: include/crypto/skcipher.h:918
msgid ""
"IV for the cipher operation which must comply with the IV size defined by "
"crypto_skcipher_ivsize"
msgstr ""

#: ../../../crypto/api-skcipher:28: include/crypto/skcipher.h:920
msgid ""
"This function allows setting of the source data and destination data "
"scatter / gather lists."
msgstr ""

#: ../../../crypto/api-skcipher:28: include/crypto/skcipher.h:923
msgid ""
"For encryption, the source is treated as the plaintext and the destination "
"is the ciphertext. For a decryption operation, the use is reversed - the "
"source is the ciphertext and the destination is the plaintext."
msgstr ""

#: ../../../crypto/api-skcipher.rst:32
msgid "Single Block Cipher API"
msgstr ""

#: ../../../crypto/api-skcipher:34: include/crypto/internal/cipher.h:21
msgid ""
"The single block cipher API is used with the ciphers of type "
"CRYPTO_ALG_TYPE_CIPHER (listed as type \"cipher\" in /proc/crypto)."
msgstr ""

#: ../../../crypto/api-skcipher:34: include/crypto/internal/cipher.h:24
msgid ""
"Using the single block cipher API calls, operations with the basic cipher "
"primitive can be implemented. These cipher primitives exclude any block "
"chaining operations including IV handling."
msgstr ""

#: ../../../crypto/api-skcipher:34: include/crypto/internal/cipher.h:28
msgid ""
"The purpose of this single block cipher API is to support the implementation "
"of templates or other concepts that only need to perform the cipher "
"operation on one block at a time. Templates invoke the underlying cipher "
"primitive block-wise and process either the input or the output data of "
"these cipher operations."
msgstr ""

#: ../../../crypto/api-skcipher:37: include/crypto/internal/cipher.h:43
msgid "allocate single block cipher handle"
msgstr ""

#: ../../../crypto/api-skcipher:37: include/crypto/internal/cipher.h:44
#: include/crypto/internal/cipher.h:82
msgid ""
"is the cra_name / name or cra_driver_name / driver name of the single block "
"cipher"
msgstr ""

#: ../../../crypto/api-skcipher:37: include/crypto/internal/cipher.h:48
msgid ""
"Allocate a cipher handle for a single block cipher. The returned struct "
"crypto_cipher is the cipher handle that is required for any subsequent API "
"invocation for that single block cipher."
msgstr ""

#: ../../../crypto/api-skcipher:37: include/crypto/internal/cipher.h:72
msgid "zeroize and free the single block cipher handle"
msgstr ""

#: ../../../crypto/api-skcipher:37: include/crypto/internal/cipher.h:78
#: include/crypto/internal/cipher.h:106 include/crypto/internal/cipher.h:143
#: include/crypto/internal/cipher.h:162 include/crypto/internal/cipher.h:174
msgid "``struct crypto_cipher *tfm``"
msgstr ""

#: ../../../crypto/api-skcipher:37: include/crypto/internal/cipher.h:81
msgid "Search for the availability of a single block cipher"
msgstr ""

#: ../../../crypto/api-skcipher:37: include/crypto/internal/cipher.h:87
msgid ""
"true when the single block cipher is known to the kernel crypto API; false "
"otherwise"
msgstr ""

#: ../../../crypto/api-skcipher:37: include/crypto/internal/cipher.h:100
msgid "obtain block size for cipher"
msgstr ""

#: ../../../crypto/api-skcipher:37: include/crypto/internal/cipher.h:102
msgid ""
"The block size for the single block cipher referenced with the cipher handle "
"tfm is returned. The caller may use that information to allocate appropriate "
"memory for the data returned by the encryption or decryption operation"
msgstr ""

#: ../../../crypto/api-skcipher:37: include/crypto/internal/cipher.h:141
msgid ""
"The caller provided key is set for the single block cipher referenced by the "
"cipher handle."
msgstr ""

#: ../../../crypto/api-skcipher:37: include/crypto/internal/cipher.h:156
msgid "encrypt one block of plaintext"
msgstr ""

#: ../../../crypto/api-skcipher:37: include/crypto/internal/cipher.h:159
#: include/crypto/internal/cipher.h:171
msgid "``u8 *dst``"
msgstr ""

#: ../../../crypto/api-skcipher:37: include/crypto/internal/cipher.h:158
msgid "points to the buffer that will be filled with the ciphertext"
msgstr ""

#: ../../../crypto/api-skcipher:37: include/crypto/internal/cipher.h:160
#: include/crypto/internal/cipher.h:172
msgid "``const u8 *src``"
msgstr ""

#: ../../../crypto/api-skcipher:37: include/crypto/internal/cipher.h:159
msgid "buffer holding the plaintext to be encrypted"
msgstr ""

#: ../../../crypto/api-skcipher:37: include/crypto/internal/cipher.h:160
msgid ""
"Invoke the encryption operation of one block. The caller must ensure that "
"the plaintext and ciphertext buffers are at least one block in size."
msgstr ""

#: ../../../crypto/api-skcipher:37: include/crypto/internal/cipher.h:168
msgid "decrypt one block of ciphertext"
msgstr ""

#: ../../../crypto/api-skcipher:37: include/crypto/internal/cipher.h:170
msgid "points to the buffer that will be filled with the plaintext"
msgstr ""

#: ../../../crypto/api-skcipher:37: include/crypto/internal/cipher.h:171
msgid "buffer holding the ciphertext to be decrypted"
msgstr ""

#: ../../../crypto/api-skcipher:37: include/crypto/internal/cipher.h:172
msgid ""
"Invoke the decryption operation of one block. The caller must ensure that "
"the plaintext and ciphertext buffers are at least one block in size."
msgstr ""
