# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-06 15:47+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../crypto/api-rng.rst:2
msgid "Random Number Generator (RNG)"
msgstr ""

#: ../../../crypto/api-rng.rst:5
msgid "Random Number Algorithm Definitions"
msgstr ""

#: ../../../crypto/api-rng:7: include/crypto/rng.h:19
msgid "random number generator definition"
msgstr ""

#: ../../../crypto/api-rng:7: include/crypto/rng.h:23
msgid "**Definition**::"
msgstr ""

#: ../../../crypto/api-rng:7: include/crypto/rng.h:33
msgid "**Members**"
msgstr ""

#: ../../../crypto/api-rng:7: include/crypto/rng.h:21
msgid "``generate``"
msgstr ""

#: ../../../crypto/api-rng:7: include/crypto/rng.h:22
msgid ""
"The function defined by this variable obtains a random number. The random "
"number generator transform must generate the random number out of the "
"context provided with this call, plus any additional data if provided to the "
"call."
msgstr ""

#: ../../../crypto/api-rng:7: include/crypto/rng.h:26
msgid "``seed``"
msgstr ""

#: ../../../crypto/api-rng:7: include/crypto/rng.h:27
msgid ""
"Seed or reseed the random number generator.  With the invocation of this "
"function call, the random number generator shall become ready for "
"generation.  If the random number generator requires a seed for setting up a "
"new state, the seed must be provided by the consumer while invoking this "
"function. The required size of the seed is defined with **seedsize** ."
msgstr ""

#: ../../../crypto/api-rng:7: include/crypto/rng.h:33
msgid "``set_ent``"
msgstr ""

#: ../../../crypto/api-rng:7: include/crypto/rng.h:34
msgid ""
"Set entropy that would otherwise be obtained from entropy source.  Internal "
"use only."
msgstr ""

#: ../../../crypto/api-rng:7: include/crypto/rng.h:35
msgid "``seedsize``"
msgstr ""

#: ../../../crypto/api-rng:7: include/crypto/rng.h:36
msgid ""
"The seed size required for a random number generator initialization defined "
"with this variable. Some random number generators does not require a seed as "
"the seeding is implemented internally without the need of support by the "
"consumer. In this case, the seed size is set to zero."
msgstr ""

#: ../../../crypto/api-rng:7: include/crypto/rng.h:41
msgid "``base``"
msgstr ""

#: ../../../crypto/api-rng:7: include/crypto/rng.h:42
msgid "Common crypto API algorithm data structure."
msgstr ""

#: ../../../crypto/api-rng.rst:11
msgid "Crypto API Random Number API"
msgstr ""

#: ../../../crypto/api-rng:13: include/crypto/rng.h:66
msgid ""
"The random number generator API is used with the ciphers of type "
"CRYPTO_ALG_TYPE_RNG (listed as type \"rng\" in /proc/crypto)"
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:73
msgid "allocate RNG handle"
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:77 include/crypto/rng.h:109
#: include/crypto/rng.h:120 include/crypto/rng.h:131 include/crypto/rng.h:152
#: include/crypto/rng.h:169 include/crypto/rng.h:189
msgid "**Parameters**"
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:79
msgid "``const char *alg_name``"
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:74
msgid ""
"is the cra_name / name or cra_driver_name / driver name of the message "
"digest cipher"
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:77
msgid "``u32 type``"
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:76
msgid "specifies the type of the cipher"
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:78
msgid "``u32 mask``"
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:77
msgid "specifies the mask for the cipher"
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:79 include/crypto/rng.h:119
#: include/crypto/rng.h:134 include/crypto/rng.h:153 include/crypto/rng.h:170
#: include/crypto/rng.h:188
msgid "**Description**"
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:78
msgid ""
"Allocate a cipher handle for a random number generator. The returned struct "
"crypto_rng is the cipher handle that is required for any subsequent API "
"invocation for that random number generator."
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:82
msgid ""
"For all random number generators, this call creates a new private copy of "
"the random number generator that does not share a state with other "
"instances. The only exception is the \"krng\" random number generator which "
"is a kernel crypto API use case for the get_random_bytes() function of the /"
"dev/random driver."
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:88 include/crypto/rng.h:108
#: include/crypto/rng.h:137 include/crypto/rng.h:155 include/crypto/rng.h:178
#: include/crypto/rng.h:193
msgid "**Return**"
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:89
msgid ""
"allocated cipher handle in case of success; IS_ERR() is true in case of an "
"error, PTR_ERR() returns the error code."
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:105
msgid "obtain 'struct rng_alg' pointer from RNG handle"
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:111
#: include/crypto/rng.h:122 include/crypto/rng.h:133 include/crypto/rng.h:154
#: include/crypto/rng.h:171 include/crypto/rng.h:191
msgid "``struct crypto_rng *tfm``"
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:106
msgid "RNG handle"
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:108
msgid "Pointer to 'struct rng_alg', derived from **tfm** RNG handle"
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:116
msgid "zeroize and free RNG handle"
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:117
msgid "cipher handle to be freed"
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:118
msgid "If **tfm** is a NULL or error pointer, this function does nothing."
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:127
#: include/crypto/rng.h:148
msgid "get random number"
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:128
#: include/crypto/rng.h:149 include/crypto/rng.h:166 include/crypto/rng.h:186
msgid "cipher handle"
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:130
msgid "``const u8 *src``"
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:129
msgid "Input buffer holding additional data, may be NULL"
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:131
#: include/crypto/rng.h:169
msgid "``unsigned int slen``"
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:130
msgid "Length of additional data"
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:132
msgid "``u8 *dst``"
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:131
#: include/crypto/rng.h:150
msgid "output buffer holding the random numbers"
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:133
#: include/crypto/rng.h:152
msgid "``unsigned int dlen``"
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:132
#: include/crypto/rng.h:151
msgid "length of the output buffer"
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:133
#: include/crypto/rng.h:152
msgid ""
"This function fills the caller-allocated buffer with random numbers using "
"the random number generator referenced by the cipher handle."
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:138
#: include/crypto/rng.h:156
msgid "0 function was successful; < 0 if an error occurred"
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:151
msgid "``u8 *rdata``"
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:165
msgid "re-initialize the RNG"
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:168
msgid "``const u8 *seed``"
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:167
msgid "seed input data"
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:168
msgid "length of the seed input data"
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:169
msgid ""
"The reset function completely re-initializes the random number generator "
"referenced by the cipher handle by clearing the current state. The new state "
"is initialized with the caller provided seed or automatically, depending on "
"the random number generator type (the ANSI X9.31 RNG requires caller-"
"provided seed, the SP800-90A DRBGs perform an automatic seeding). The seed "
"is provided as a parameter to this function call. The provided seed should "
"have the length of the seed size defined for the random number generator as "
"defined by crypto_rng_seedsize."
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:179
msgid "0 if the setting of the key was successful; < 0 if an error occurred"
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:185
msgid "obtain seed size of RNG"
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:187
msgid ""
"The function returns the seed size for the random number generator "
"referenced by the cipher handle. This value may be zero if the random number "
"generator does not implement or require a reseeding. For example, the "
"SP800-90A DRBGs implement an automated reseeding after reaching a pre-"
"defined threshold."
msgstr ""

#: ../../../crypto/api-rng:16: include/crypto/rng.h:194
msgid "seed size for the random number generator"
msgstr ""
