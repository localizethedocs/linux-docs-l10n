# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../RCU/rculist_nulls.rst:5
msgid "Using RCU hlist_nulls to protect list and objects"
msgstr ""

#: ../../../RCU/rculist_nulls.rst:7
msgid ""
"This section describes how to use hlist_nulls to protect read-mostly linked "
"lists and objects using SLAB_TYPESAFE_BY_RCU allocations."
msgstr ""

#: ../../../RCU/rculist_nulls.rst:11
msgid "Please read the basics in listRCU.rst."
msgstr ""

#: ../../../RCU/rculist_nulls.rst:14
msgid "Using 'nulls'"
msgstr ""

#: ../../../RCU/rculist_nulls.rst:16
msgid ""
"Using special makers (called 'nulls') is a convenient way to solve following "
"problem."
msgstr ""

#: ../../../RCU/rculist_nulls.rst:19
msgid ""
"Without 'nulls', a typical RCU linked list managing objects which are "
"allocated with SLAB_TYPESAFE_BY_RCU kmem_cache can use the following "
"algorithms.  Following examples assume 'obj' is a pointer to such objects, "
"which is having below type."
msgstr ""

#: ../../../RCU/rculist_nulls.rst:33
msgid "1) Lookup algorithm"
msgstr ""

#: ../../../RCU/rculist_nulls.rst:58
msgid ""
"Beware that lockless_lookup(key) cannot use traditional "
"hlist_for_each_entry_rcu() but a version with an additional memory barrier "
"(smp_rmb())"
msgstr ""

#: ../../../RCU/rculist_nulls.rst:75
msgid ""
"And note the traditional hlist_for_each_entry_rcu() misses this smp_rmb()::"
msgstr ""

#: ../../../RCU/rculist_nulls.rst:86
msgid "Quoting Corey Minyard::"
msgstr ""

#: ../../../RCU/rculist_nulls.rst:98
msgid "2) Insertion algorithm"
msgstr ""

#: ../../../RCU/rculist_nulls.rst:100
msgid ""
"We need to make sure a reader cannot read the new 'obj->obj_node.next' value "
"and previous value of 'obj->key'. Otherwise, an item could be deleted from a "
"chain, and inserted into another chain. If new chain was empty before the "
"move, 'next' pointer is NULL, and lockless reader can not detect the fact "
"that it missed following items in original chain."
msgstr ""

#: ../../../RCU/rculist_nulls.rst:121
msgid "3) Removal algorithm"
msgstr ""

#: ../../../RCU/rculist_nulls.rst:123
msgid ""
"Nothing special here, we can use a standard RCU hlist deletion. But thanks "
"to SLAB_TYPESAFE_BY_RCU, beware a deleted object can be reused very very "
"fast (before the end of RCU grace period)"
msgstr ""

#: ../../../RCU/rculist_nulls.rst:141
msgid "Avoiding extra smp_rmb()"
msgstr ""

#: ../../../RCU/rculist_nulls.rst:143
msgid "With hlist_nulls we can avoid extra smp_rmb() in lockless_lookup()."
msgstr ""

#: ../../../RCU/rculist_nulls.rst:145
msgid ""
"For example, if we choose to store the slot number as the 'nulls' end-of-"
"list marker for each slot of the hash table, we can detect a race (some "
"writer did a delete and/or a move of an object to another chain) checking "
"the final 'nulls' value if the lookup met the end of chain. If final 'nulls' "
"value is not the slot number, then we must restart the lookup at the "
"beginning. If the object was moved to the same chain, then the reader "
"doesn't care: It might occasionally scan the list again without harm."
msgstr ""

#: ../../../RCU/rculist_nulls.rst:155
msgid ""
"Note that using hlist_nulls means the type of 'obj_node' field of 'struct "
"object' becomes 'struct hlist_nulls_node'."
msgstr ""

#: ../../../RCU/rculist_nulls.rst:160
msgid "1) lookup algorithm"
msgstr ""

#: ../../../RCU/rculist_nulls.rst:196
msgid "2) Insert algorithm"
msgstr ""

#: ../../../RCU/rculist_nulls.rst:198
msgid ""
"Same to the above one, but uses hlist_nulls_add_head_rcu() instead of "
"hlist_add_head_rcu()."
msgstr ""
