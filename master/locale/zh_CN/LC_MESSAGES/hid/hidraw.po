# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../hid/hidraw.rst:3
msgid "HIDRAW - Raw Access to USB and Bluetooth Human Interface Devices"
msgstr ""

#: ../../../hid/hidraw.rst:5
msgid ""
"The hidraw driver provides a raw interface to USB and Bluetooth Human "
"Interface Devices (HIDs).  It differs from hiddev in that reports sent and "
"received are not parsed by the HID parser, but are sent to and received from "
"the device unmodified."
msgstr ""

#: ../../../hid/hidraw.rst:10
msgid ""
"Hidraw should be used if the userspace application knows exactly how to "
"communicate with the hardware device, and is able to construct the HID "
"reports manually.  This is often the case when making userspace drivers for "
"custom HID devices."
msgstr ""

#: ../../../hid/hidraw.rst:15
msgid ""
"Hidraw is also useful for communicating with non-conformant HID devices "
"which send and receive data in a way that is inconsistent with their report "
"descriptors.  Because hiddev parses reports which are sent and received "
"through it, checking them against the device's report descriptor, such "
"communication with these non-conformant devices is impossible using hiddev. "
"Hidraw is the only alternative, short of writing a custom kernel driver, for "
"these non-conformant devices."
msgstr ""

#: ../../../hid/hidraw.rst:23
msgid ""
"A benefit of hidraw is that its use by userspace applications is independent "
"of the underlying hardware type.  Currently, hidraw is implemented for USB "
"and Bluetooth.  In the future, as new hardware bus types are developed which "
"use the HID specification, hidraw will be expanded to add support for these "
"new bus types."
msgstr ""

#: ../../../hid/hidraw.rst:29
msgid ""
"Hidraw uses a dynamic major number, meaning that udev should be relied on to "
"create hidraw device nodes.  Udev will typically create the device nodes "
"directly under /dev (eg: /dev/hidraw0).  As this location is distribution- "
"and udev rule-dependent, applications should use libudev to locate hidraw "
"devices attached to the system.  There is a tutorial on libudev with a "
"working example at::"
msgstr ""

#: ../../../hid/hidraw.rst:40
msgid "The HIDRAW API"
msgstr ""

#: ../../../hid/hidraw.rst:43
msgid "read()"
msgstr ""

#: ../../../hid/hidraw.rst:44
msgid ""
"read() will read a queued report received from the HID device. On USB "
"devices, the reports read using read() are the reports sent from the device "
"on the INTERRUPT IN endpoint.  By default, read() will block until there is "
"a report available to be read.  read() can be made non-blocking, by passing "
"the O_NONBLOCK flag to open(), or by setting the O_NONBLOCK flag using "
"fcntl()."
msgstr ""

#: ../../../hid/hidraw.rst:51
msgid ""
"On a device which uses numbered reports, the first byte of the returned data "
"will be the report number; the report data follows, beginning in the second "
"byte.  For devices which do not use numbered reports, the report data will "
"begin at the first byte."
msgstr ""

#: ../../../hid/hidraw.rst:57
msgid "write()"
msgstr ""

#: ../../../hid/hidraw.rst:58
msgid ""
"The write() function will write a report to the device. For USB devices, if "
"the device has an INTERRUPT OUT endpoint, the report will be sent on that "
"endpoint. If it does not, the report will be sent over the control endpoint, "
"using a SET_REPORT transfer."
msgstr ""

#: ../../../hid/hidraw.rst:63
msgid ""
"The first byte of the buffer passed to write() should be set to the report "
"number.  If the device does not use numbered reports, the first byte should "
"be set to 0. The report data itself should begin at the second byte."
msgstr ""

#: ../../../hid/hidraw.rst:68
msgid "ioctl()"
msgstr ""

#: ../../../hid/hidraw.rst:69
msgid "Hidraw supports the following ioctls:"
msgstr ""

#: ../../../hid/hidraw.rst:71
msgid "HIDIOCGRDESCSIZE:"
msgstr ""

#: ../../../hid/hidraw.rst:72
msgid "Get Report Descriptor Size"
msgstr ""

#: ../../../hid/hidraw.rst:74
msgid "This ioctl will get the size of the device's report descriptor."
msgstr ""

#: ../../../hid/hidraw.rst:76
msgid "HIDIOCGRDESC:"
msgstr ""

#: ../../../hid/hidraw.rst:77
msgid "Get Report Descriptor"
msgstr ""

#: ../../../hid/hidraw.rst:79
msgid ""
"This ioctl returns the device's report descriptor using a "
"hidraw_report_descriptor struct.  Make sure to set the size field of the "
"hidraw_report_descriptor struct to the size returned from HIDIOCGRDESCSIZE."
msgstr ""

#: ../../../hid/hidraw.rst:83
msgid "HIDIOCGRAWINFO:"
msgstr ""

#: ../../../hid/hidraw.rst:84
msgid "Get Raw Info"
msgstr ""

#: ../../../hid/hidraw.rst:86
msgid ""
"This ioctl will return a hidraw_devinfo struct containing the bus type, the "
"vendor ID (VID), and product ID (PID) of the device. The bus type can be one "
"of::"
msgstr ""

#: ../../../hid/hidraw.rst:95
msgid "which are defined in uapi/linux/input.h."
msgstr ""

#: ../../../hid/hidraw.rst:97
msgid "HIDIOCGRAWNAME(len):"
msgstr ""

#: ../../../hid/hidraw.rst:98
msgid "Get Raw Name"
msgstr ""

#: ../../../hid/hidraw.rst:100
msgid ""
"This ioctl returns a string containing the vendor and product strings of the "
"device.  The returned string is Unicode, UTF-8 encoded."
msgstr ""

#: ../../../hid/hidraw.rst:103
msgid "HIDIOCGRAWPHYS(len):"
msgstr ""

#: ../../../hid/hidraw.rst:104
msgid "Get Physical Address"
msgstr ""

#: ../../../hid/hidraw.rst:106
msgid ""
"This ioctl returns a string representing the physical address of the device. "
"For USB devices, the string contains the physical path to the device (the "
"USB controller, hubs, ports, etc).  For Bluetooth devices, the string "
"contains the hardware (MAC) address of the device."
msgstr ""

#: ../../../hid/hidraw.rst:111
msgid "HIDIOCSFEATURE(len):"
msgstr ""

#: ../../../hid/hidraw.rst:112
msgid "Send a Feature Report"
msgstr ""

#: ../../../hid/hidraw.rst:114
msgid ""
"This ioctl will send a feature report to the device.  Per the HID "
"specification, feature reports are always sent using the control endpoint. "
"Set the first byte of the supplied buffer to the report number.  For devices "
"which do not use numbered reports, set the first byte to 0. The report data "
"begins in the second byte. Make sure to set len accordingly, to one more "
"than the length of the report (to account for the report number)."
msgstr ""

#: ../../../hid/hidraw.rst:121
msgid "HIDIOCGFEATURE(len):"
msgstr ""

#: ../../../hid/hidraw.rst:122
msgid "Get a Feature Report"
msgstr ""

#: ../../../hid/hidraw.rst:124
msgid ""
"This ioctl will request a feature report from the device using the control "
"endpoint.  The first byte of the supplied buffer should be set to the report "
"number of the requested report.  For devices which do not use numbered "
"reports, set the first byte to 0.  The returned report buffer will contain "
"the report number in the first byte, followed by the report data read from "
"the device.  For devices which do not use numbered reports, the report data "
"will begin at the first byte of the returned buffer."
msgstr ""

#: ../../../hid/hidraw.rst:132
msgid "HIDIOCSINPUT(len):"
msgstr ""

#: ../../../hid/hidraw.rst:133
msgid "Send an Input Report"
msgstr ""

#: ../../../hid/hidraw.rst:135
msgid ""
"This ioctl will send an input report to the device, using the control "
"endpoint. In most cases, setting an input HID report on a device is "
"meaningless and has no effect, but some devices may choose to use this to "
"set or reset an initial state of a report.  The format of the buffer issued "
"with this report is identical to that of HIDIOCSFEATURE."
msgstr ""

#: ../../../hid/hidraw.rst:141
msgid "HIDIOCGINPUT(len):"
msgstr ""

#: ../../../hid/hidraw.rst:142
msgid "Get an Input Report"
msgstr ""

#: ../../../hid/hidraw.rst:144
msgid ""
"This ioctl will request an input report from the device using the control "
"endpoint.  This is slower on most devices where a dedicated In endpoint "
"exists for regular input reports, but allows the host to request the value "
"of a specific report number.  Typically, this is used to request the initial "
"states of an input report of a device, before an application listens for "
"normal reports via the regular device read() interface.  The format of the "
"buffer issued with this report is identical to that of HIDIOCGFEATURE."
msgstr ""

#: ../../../hid/hidraw.rst:152
msgid "HIDIOCSOUTPUT(len):"
msgstr ""

#: ../../../hid/hidraw.rst:153
msgid "Send an Output Report"
msgstr ""

#: ../../../hid/hidraw.rst:155
msgid ""
"This ioctl will send an output report to the device, using the control "
"endpoint. This is slower on most devices where a dedicated Out endpoint "
"exists for regular output reports, but is added for completeness.  "
"Typically, this is used to set the initial states of an output report of a "
"device, before an application sends updates via the regular device write() "
"interface. The format of the buffer issued with this report is identical to "
"that of HIDIOCSFEATURE."
msgstr ""

#: ../../../hid/hidraw.rst:162
msgid "HIDIOCGOUTPUT(len):"
msgstr ""

#: ../../../hid/hidraw.rst:163
msgid "Get an Output Report"
msgstr ""

#: ../../../hid/hidraw.rst:165
msgid ""
"This ioctl will request an output report from the device using the control "
"endpoint.  Typically, this is used to retrieve the initial state of an "
"output report of a device, before an application updates it as necessary "
"either via a HIDIOCSOUTPUT request, or the regular device write() "
"interface.  The format of the buffer issued with this report is identical to "
"that of HIDIOCGFEATURE."
msgstr ""

#: ../../../hid/hidraw.rst:172
msgid "Example"
msgstr ""

#: ../../../hid/hidraw.rst:173
msgid ""
"In samples/, find hid-example.c, which shows examples of read(), write(), "
"and all the ioctls for hidraw.  The code may be used by anyone for any "
"purpose, and can serve as a starting point for developing applications using "
"hidraw."
msgstr ""

#: ../../../hid/hidraw.rst:178
msgid "Document by:"
msgstr ""

#: ../../../hid/hidraw.rst:180
msgid "Alan Ott <alan@signal11.us>, Signal 11 Software"
msgstr ""
