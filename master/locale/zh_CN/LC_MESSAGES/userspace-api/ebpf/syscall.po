# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../userspace-api/ebpf/syscall.rst:4
msgid "eBPF Syscall"
msgstr ""

#: ../../../userspace-api/ebpf/syscall.rst:0
msgid "Authors"
msgstr ""

#: ../../../userspace-api/ebpf/syscall.rst:6
msgid "Alexei Starovoitov <ast@kernel.org>"
msgstr ""

#: ../../../userspace-api/ebpf/syscall.rst:7
msgid "Joe Stringer <joe@wand.net.nz>"
msgstr ""

#: ../../../userspace-api/ebpf/syscall.rst:8
msgid "Michael Kerrisk <mtk.manpages@gmail.com>"
msgstr ""

#: ../../../userspace-api/ebpf/syscall.rst:10
msgid ""
"The primary info for the bpf syscall is available in the `man-pages`_ for "
"`bpf(2)`_."
msgstr ""

#: ../../../userspace-api/ebpf/syscall.rst:14
msgid "bpf() subcommand reference"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:16: include/uapi/linux/bpf.h:149
msgid ""
"The operation to be performed by the **bpf**\\ () system call is determined "
"by the *cmd* argument. Each operation takes an accompanying argument, "
"provided via *attr*, which is a pointer to a union of type *bpf_attr* (see "
"below). The size argument is the size of the union pointed to by *attr*."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:157
msgid "BPF_MAP_CREATE"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:158
#: include/uapi/linux/bpf.h:171 include/uapi/linux/bpf.h:188
#: include/uapi/linux/bpf.h:221 include/uapi/linux/bpf.h:229
#: include/uapi/linux/bpf.h:252 include/uapi/linux/bpf.h:267
#: include/uapi/linux/bpf.h:292 include/uapi/linux/bpf.h:301
#: include/uapi/linux/bpf.h:347 include/uapi/linux/bpf.h:357
#: include/uapi/linux/bpf.h:395 include/uapi/linux/bpf.h:408
#: include/uapi/linux/bpf.h:421 include/uapi/linux/bpf.h:430
#: include/uapi/linux/bpf.h:439 include/uapi/linux/bpf.h:458
#: include/uapi/linux/bpf.h:504 include/uapi/linux/bpf.h:522
#: include/uapi/linux/bpf.h:545 include/uapi/linux/bpf.h:554
#: include/uapi/linux/bpf.h:575 include/uapi/linux/bpf.h:607
#: include/uapi/linux/bpf.h:622 include/uapi/linux/bpf.h:636
#: include/uapi/linux/bpf.h:680 include/uapi/linux/bpf.h:698
#: include/uapi/linux/bpf.h:749 include/uapi/linux/bpf.h:780
#: include/uapi/linux/bpf.h:790 include/uapi/linux/bpf.h:799
#: include/uapi/linux/bpf.h:808 include/uapi/linux/bpf.h:821
#: include/uapi/linux/bpf.h:840 include/uapi/linux/bpf.h:855
#: include/uapi/linux/bpf.h:864 include/uapi/linux/bpf.h:879
#: include/uapi/linux/bpf.h:909
msgid "Description"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:159
msgid ""
"Create a map and return a file descriptor that refers to the map. The close-"
"on-exec file descriptor flag (see **fcntl**\\ (2)) is automatically enabled "
"for the new file descriptor."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:163
msgid ""
"Applying **close**\\ (2) to the file descriptor returned by "
"**BPF_MAP_CREATE** will delete the map (but see NOTES)."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:166
#: include/uapi/linux/bpf.h:183 include/uapi/linux/bpf.h:203
#: include/uapi/linux/bpf.h:224 include/uapi/linux/bpf.h:234
#: include/uapi/linux/bpf.h:262 include/uapi/linux/bpf.h:287
#: include/uapi/linux/bpf.h:296 include/uapi/linux/bpf.h:342
#: include/uapi/linux/bpf.h:352 include/uapi/linux/bpf.h:384
#: include/uapi/linux/bpf.h:403 include/uapi/linux/bpf.h:416
#: include/uapi/linux/bpf.h:425 include/uapi/linux/bpf.h:434
#: include/uapi/linux/bpf.h:453 include/uapi/linux/bpf.h:499
#: include/uapi/linux/bpf.h:517 include/uapi/linux/bpf.h:540
#: include/uapi/linux/bpf.h:549 include/uapi/linux/bpf.h:570
#: include/uapi/linux/bpf.h:602 include/uapi/linux/bpf.h:617
#: include/uapi/linux/bpf.h:631 include/uapi/linux/bpf.h:671
#: include/uapi/linux/bpf.h:693 include/uapi/linux/bpf.h:729
#: include/uapi/linux/bpf.h:775 include/uapi/linux/bpf.h:785
#: include/uapi/linux/bpf.h:794 include/uapi/linux/bpf.h:803
#: include/uapi/linux/bpf.h:816 include/uapi/linux/bpf.h:835
#: include/uapi/linux/bpf.h:850 include/uapi/linux/bpf.h:859
#: include/uapi/linux/bpf.h:874 include/uapi/linux/bpf.h:904
#: include/uapi/linux/bpf.h:915
msgid "Return"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:167
#: include/uapi/linux/bpf.h:263 include/uapi/linux/bpf.h:297
#: include/uapi/linux/bpf.h:426 include/uapi/linux/bpf.h:435
#: include/uapi/linux/bpf.h:518 include/uapi/linux/bpf.h:541
#: include/uapi/linux/bpf.h:550 include/uapi/linux/bpf.h:786
#: include/uapi/linux/bpf.h:804 include/uapi/linux/bpf.h:836
#: include/uapi/linux/bpf.h:851 include/uapi/linux/bpf.h:905
msgid ""
"A new file descriptor (a nonnegative integer), or -1 if an error occurred "
"(in which case, *errno* is set appropriately)."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:170
msgid "BPF_MAP_LOOKUP_ELEM"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:172
msgid ""
"Look up an element with a given *key* in the map referred to by the file "
"descriptor *map_fd*."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:175
msgid "The *flags* argument may be specified as one of the following:"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:178
#: include/uapi/linux/bpf.h:200 include/uapi/linux/bpf.h:583
#: include/uapi/linux/bpf.h:659 include/uapi/linux/bpf.h:720
#: include/uapi/linux/bpf.h:763
msgid "**BPF_F_LOCK**"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:179
#: include/uapi/linux/bpf.h:660 include/uapi/linux/bpf.h:764
msgid ""
"Look up the value of a spin-locked map without returning the lock. This must "
"be specified if the elements contain a spinlock."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:184
#: include/uapi/linux/bpf.h:204 include/uapi/linux/bpf.h:225
#: include/uapi/linux/bpf.h:235 include/uapi/linux/bpf.h:288
#: include/uapi/linux/bpf.h:343 include/uapi/linux/bpf.h:353
#: include/uapi/linux/bpf.h:385 include/uapi/linux/bpf.h:454
#: include/uapi/linux/bpf.h:500 include/uapi/linux/bpf.h:571
#: include/uapi/linux/bpf.h:603 include/uapi/linux/bpf.h:618
#: include/uapi/linux/bpf.h:672 include/uapi/linux/bpf.h:694
#: include/uapi/linux/bpf.h:730 include/uapi/linux/bpf.h:776
#: include/uapi/linux/bpf.h:795 include/uapi/linux/bpf.h:860
#: include/uapi/linux/bpf.h:875
msgid ""
"Returns zero on success. On error, -1 is returned and *errno* is set "
"appropriately."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:187
msgid "BPF_MAP_UPDATE_ELEM"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:189
msgid "Create or update an element (key/value pair) in a specified map."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:191
msgid "The *flags* argument should be specified as one of the following:"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:194
#: include/uapi/linux/bpf.h:714
msgid "**BPF_ANY**"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:195
msgid "Create a new element or update an existing element."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:196
#: include/uapi/linux/bpf.h:716
msgid "**BPF_NOEXIST**"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:197
msgid "Create a new element only if it did not exist."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:198
#: include/uapi/linux/bpf.h:718
msgid "**BPF_EXIST**"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:199
msgid "Update an existing element."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:201
msgid "Update a spin_lock-ed map element."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:207
msgid ""
"May set *errno* to **EINVAL**, **EPERM**, **ENOMEM**, **E2BIG**, **EEXIST**, "
"or **ENOENT**."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:210
msgid "**E2BIG**"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:211
msgid ""
"The number of elements in the map reached the *max_entries* limit specified "
"at map creation time."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:213
#: include/uapi/linux/bpf.h:741
msgid "**EEXIST**"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:214
#: include/uapi/linux/bpf.h:742
msgid ""
"If *flags* specifies **BPF_NOEXIST** and the element with *key* already "
"exists in the map."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:216
#: include/uapi/linux/bpf.h:744
msgid "**ENOENT**"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:217
#: include/uapi/linux/bpf.h:745
msgid ""
"If *flags* specifies **BPF_EXIST** and the element with *key* does not exist "
"in the map."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:220
msgid "BPF_MAP_DELETE_ELEM"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:222
msgid "Look up and delete an element by key in a specified map."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:228
msgid "BPF_MAP_GET_NEXT_KEY"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:230
msgid ""
"Look up an element by key in a specified map and return the key of the next "
"element. Can be used to iterate over all elements in the map."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:238
msgid ""
"The following cases can be used to iterate over all elements of the map:"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:241
msgid ""
"If *key* is not found, the operation returns zero and sets the *next_key* "
"pointer to the key of the first element."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:243
msgid ""
"If *key* is found, the operation returns zero and sets the *next_key* "
"pointer to the key of the next element."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:245
msgid ""
"If *key* is the last element, returns -1 and *errno* is set to **ENOENT**."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:248
msgid ""
"May set *errno* to **ENOMEM**, **EFAULT**, **EPERM**, or **EINVAL** on error."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:251
msgid "BPF_PROG_LOAD"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:253
msgid ""
"Verify and load an eBPF program, returning a new file descriptor associated "
"with the program."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:256
msgid ""
"Applying **close**\\ (2) to the file descriptor returned by "
"**BPF_PROG_LOAD** will unload the eBPF program (but see NOTES)."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:259
msgid ""
"The close-on-exec file descriptor flag (see **fcntl**\\ (2)) is "
"automatically enabled for the new file descriptor."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:266
msgid "BPF_OBJ_PIN"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:268
msgid ""
"Pin an eBPF program or map referred by the specified *bpf_fd* to the "
"provided *pathname* on the filesystem."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:271
msgid "The *pathname* argument must not contain a dot (\".\")."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:273
msgid ""
"On success, *pathname* retains a reference to the eBPF object, preventing "
"deallocation of the object when the original *bpf_fd* is closed. This allow "
"the eBPF object to live beyond **close**\\ (\\ *bpf_fd*\\ ), and hence the "
"lifetime of the parent process."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:279
msgid ""
"Applying **unlink**\\ (2) or similar calls to the *pathname* unpins the "
"object from the filesystem, removing the reference. If no other file "
"descriptors or filesystem nodes refer to the same object, it will be "
"deallocated (see NOTES)."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:284
msgid ""
"The filesystem type for the parent directory of *pathname* must be "
"**BPF_FS_MAGIC**."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:291
msgid "BPF_OBJ_GET"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:293
msgid ""
"Open a file descriptor for the eBPF object pinned to the specified "
"*pathname*."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:300
msgid "BPF_PROG_ATTACH"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:302
msgid ""
"Attach an eBPF program to a *target_fd* at the specified *attach_type* hook."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:305
msgid ""
"The *attach_type* specifies the eBPF attachment point to attach the program "
"to, and must be one of *bpf_attach_type* (see below)."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:309
msgid ""
"The *attach_bpf_fd* must be a valid file descriptor for a loaded eBPF "
"program of a cgroup, flow dissector, LIRC, sockmap or sock_ops type "
"corresponding to the specified *attach_type*."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:313
#: include/uapi/linux/bpf.h:462
msgid ""
"The *target_fd* must be a valid file descriptor for a kernel object which "
"depends on the attach type of *attach_bpf_fd*:"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:316
#: include/uapi/linux/bpf.h:465
msgid ""
"**BPF_PROG_TYPE_CGROUP_DEVICE**, **BPF_PROG_TYPE_CGROUP_SKB**, "
"**BPF_PROG_TYPE_CGROUP_SOCK**, **BPF_PROG_TYPE_CGROUP_SOCK_ADDR**, "
"**BPF_PROG_TYPE_CGROUP_SOCKOPT**, **BPF_PROG_TYPE_CGROUP_SYSCTL**, "
"**BPF_PROG_TYPE_SOCK_OPS**"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:324
#: include/uapi/linux/bpf.h:473
msgid ""
"Control Group v2 hierarchy with the eBPF controller enabled. Requires the "
"kernel to be compiled with **CONFIG_CGROUP_BPF**."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:328
#: include/uapi/linux/bpf.h:477
msgid "**BPF_PROG_TYPE_FLOW_DISSECTOR**"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:330
#: include/uapi/linux/bpf.h:479
msgid "Network namespace (eg /proc/self/ns/net)."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:332
#: include/uapi/linux/bpf.h:481
msgid "**BPF_PROG_TYPE_LIRC_MODE2**"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:334
#: include/uapi/linux/bpf.h:483
msgid ""
"LIRC device path (eg /dev/lircN). Requires the kernel to be compiled with "
"**CONFIG_BPF_LIRC_MODE2**."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:337
msgid "**BPF_PROG_TYPE_SK_SKB**, **BPF_PROG_TYPE_SK_MSG**"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:340
msgid "eBPF map of socket type (eg **BPF_MAP_TYPE_SOCKHASH**)."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:346
msgid "BPF_PROG_DETACH"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:348
msgid ""
"Detach the eBPF program associated with the *target_fd* at the hook "
"specified by *attach_type*. The program must have been previously attached "
"using **BPF_PROG_ATTACH**."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:356
msgid "BPF_PROG_TEST_RUN"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:358
msgid ""
"Run the eBPF program associated with the *prog_fd* a *repeat* number of "
"times against a provided program context *ctx_in* and data *data_in*, and "
"return the modified program context *ctx_out*, *data_out* (for example, "
"packet data), result of the execution *retval*, and *duration* of the test "
"run."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:364
msgid ""
"The sizes of the buffers provided as input and output parameters *ctx_in*, "
"*ctx_out*, *data_in*, and *data_out* must be provided in the corresponding "
"variables *ctx_size_in*, *ctx_size_out*, *data_size_in*, and/or "
"*data_size_out*. If any of these parameters are not provided (ie set to "
"NULL), the corresponding size field must be zero."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:371
msgid "Some program types have particular requirements:"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:373
msgid "**BPF_PROG_TYPE_SK_LOOKUP**"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:374
msgid "*data_in* and *data_out* must be NULL."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:376
msgid ""
"**BPF_PROG_TYPE_RAW_TRACEPOINT**, **BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE**"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:379
msgid ""
"*ctx_out*, *data_in* and *data_out* must be NULL. *repeat* must be zero."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:382
msgid "BPF_PROG_RUN is an alias for BPF_PROG_TEST_RUN."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:388
msgid "**ENOSPC**"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:389
msgid "Either *data_size_out* or *ctx_size_out* is too small."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:390
msgid "**ENOTSUPP**"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:391
msgid ""
"This command is not supported by the program type of the program referred to "
"by *prog_fd*."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:394
msgid "BPF_PROG_GET_NEXT_ID"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:396
msgid "Fetch the next eBPF program currently loaded into the kernel."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:398
msgid ""
"Looks for the eBPF program with an id greater than *start_id* and updates "
"*next_id* on success. If no other eBPF programs remain with ids higher than "
"*start_id*, returns -1 and sets *errno* to **ENOENT**."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:404
#: include/uapi/linux/bpf.h:417 include/uapi/linux/bpf.h:632
#: include/uapi/linux/bpf.h:817
msgid ""
"Returns zero on success. On error, or when no id remains, -1 is returned and "
"*errno* is set appropriately."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:407
msgid "BPF_MAP_GET_NEXT_ID"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:409
msgid "Fetch the next eBPF map currently loaded into the kernel."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:411
msgid ""
"Looks for the eBPF map with an id greater than *start_id* and updates "
"*next_id* on success. If no other eBPF maps remain with ids higher than "
"*start_id*, returns -1 and sets *errno* to **ENOENT**."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:420
msgid "BPF_PROG_GET_FD_BY_ID"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:422
msgid "Open a file descriptor for the eBPF program corresponding to *prog_id*."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:429
msgid "BPF_MAP_GET_FD_BY_ID"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:431
msgid "Open a file descriptor for the eBPF map corresponding to *map_id*."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:438
msgid "BPF_OBJ_GET_INFO_BY_FD"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:440
msgid "Obtain information about the eBPF object corresponding to *bpf_fd*."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:443
msgid ""
"Populates up to *info_len* bytes of *info*, which will be in one of the "
"following formats depending on the eBPF object type of *bpf_fd*:"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:447
msgid "**struct bpf_prog_info**"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:448
msgid "**struct bpf_map_info**"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:449
msgid "**struct bpf_btf_info**"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:450
msgid "**struct bpf_link_info**"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:451
msgid "**struct bpf_token_info**"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:457
msgid "BPF_PROG_QUERY"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:459
msgid ""
"Obtain information about eBPF programs associated with the specified "
"*attach_type* hook."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:486
msgid ""
"**BPF_PROG_QUERY** always fetches the number of programs attached and the "
"*attach_flags* which were used to attach those programs. Additionally, if "
"*prog_ids* is nonzero and the number of attached programs is less than "
"*prog_cnt*, populates *prog_ids* with the eBPF program ids of the programs "
"attached at *target_fd*."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:493
msgid "The following flags may alter the result:"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:495
msgid "**BPF_F_QUERY_EFFECTIVE**"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:496
msgid ""
"Only return information regarding programs which are currently effective at "
"the specified *target_fd*."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:503
msgid "BPF_RAW_TRACEPOINT_OPEN"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:505
msgid ""
"Attach an eBPF program to a tracepoint *name* to access kernel internal "
"arguments of the tracepoint in their raw form."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:508
msgid ""
"The *prog_fd* must be a valid file descriptor associated with a loaded eBPF "
"program of type **BPF_PROG_TYPE_RAW_TRACEPOINT**."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:511
msgid ""
"No ABI guarantees are made about the content of tracepoint arguments exposed "
"to the corresponding eBPF program."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:514
msgid ""
"Applying **close**\\ (2) to the file descriptor returned by "
"**BPF_RAW_TRACEPOINT_OPEN** will delete the map (but see NOTES)."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:521
msgid "BPF_BTF_LOAD"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:523
msgid ""
"Verify and load BPF Type Format (BTF) metadata into the kernel, returning a "
"new file descriptor associated with the metadata. BTF is described in more "
"detail at https://www.kernel.org/doc/html/latest/bpf/btf.html."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:528
msgid ""
"The *btf* parameter must point to valid memory providing *btf_size* bytes of "
"BTF binary metadata."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:531
msgid ""
"The returned file descriptor can be passed to other **bpf**\\ () subcommands "
"such as **BPF_PROG_LOAD** or **BPF_MAP_CREATE** to associate the BTF with "
"those objects."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:535
msgid ""
"Similar to **BPF_PROG_LOAD**, **BPF_BTF_LOAD** has optional parameters to "
"specify a *btf_log_buf*, *btf_log_size* and *btf_log_level* which allow the "
"kernel to return freeform log output regarding the BTF verification process."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:544
msgid "BPF_BTF_GET_FD_BY_ID"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:546
msgid ""
"Open a file descriptor for the BPF Type Format (BTF) corresponding to "
"*btf_id*."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:553
msgid "BPF_TASK_FD_QUERY"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:555
msgid ""
"Obtain information about eBPF programs associated with the target process "
"identified by *pid* and *fd*."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:558
msgid ""
"If the *pid* and *fd* are associated with a tracepoint, kprobe or uprobe "
"perf event, then the *prog_id* and *fd_type* will be populated with the eBPF "
"program id and file descriptor type of type **bpf_task_fd_type**. If "
"associated with a kprobe or uprobe, the  *probe_offset* and *probe_addr* "
"will also be populated. Optionally, if *buf* is provided, then up to "
"*buf_len* bytes of *buf* will be populated with the name of the tracepoint, "
"kprobe or uprobe."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:567
msgid ""
"The resulting *prog_id* may be introspected in deeper detail using "
"**BPF_PROG_GET_FD_BY_ID** and **BPF_OBJ_GET_INFO_BY_FD**."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:574
msgid "BPF_MAP_LOOKUP_AND_DELETE_ELEM"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:576
msgid ""
"Look up an element with the given *key* in the map referred to by the file "
"descriptor *fd*, and if found, delete the element."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:579
msgid ""
"For **BPF_MAP_TYPE_QUEUE** and **BPF_MAP_TYPE_STACK** map types, the *flags* "
"argument needs to be set to 0, but for other map types, it may be specified "
"as:"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:584
msgid ""
"Look up and delete the value of a spin-locked map without returning the "
"lock. This must be specified if the elements contain a spinlock."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:588
msgid ""
"The **BPF_MAP_TYPE_QUEUE** and **BPF_MAP_TYPE_STACK** map types implement "
"this command as a \"pop\" operation, deleting the top element rather than "
"one corresponding to *key*. The *key* and *key_len* parameters should be "
"zeroed when issuing this operation for these map types."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:594
msgid ""
"This command is only valid for the following map types: * "
"**BPF_MAP_TYPE_QUEUE** * **BPF_MAP_TYPE_STACK** * **BPF_MAP_TYPE_HASH** * "
"**BPF_MAP_TYPE_PERCPU_HASH** * **BPF_MAP_TYPE_LRU_HASH** * "
"**BPF_MAP_TYPE_LRU_PERCPU_HASH**"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:606
msgid "BPF_MAP_FREEZE"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:608
msgid "Freeze the permissions of the specified map."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:610
msgid ""
"Write permissions may be frozen by passing zero *flags*. Upon success, no "
"future syscall invocations may alter the map state of *map_fd*. Write "
"operations from eBPF programs are still possible for a frozen map."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:615
msgid "Not supported for maps of type **BPF_MAP_TYPE_STRUCT_OPS**."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:621
msgid "BPF_BTF_GET_NEXT_ID"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:623
msgid ""
"Fetch the next BPF Type Format (BTF) object currently loaded into the kernel."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:626
msgid ""
"Looks for the BTF object with an id greater than *start_id* and updates "
"*next_id* on success. If no other BTF objects remain with ids higher than "
"*start_id*, returns -1 and sets *errno* to **ENOENT**."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:635
msgid "BPF_MAP_LOOKUP_BATCH"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:637
msgid "Iterate and fetch multiple elements in a map."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:639
msgid ""
"Two opaque values are used to manage batch operations, *in_batch* and "
"*out_batch*. Initially, *in_batch* must be set to NULL to begin the batched "
"operation. After each subsequent **BPF_MAP_LOOKUP_BATCH**, the caller should "
"pass the resultant *out_batch* as the *in_batch* for the next operation to "
"continue iteration from the current point. Both *in_batch* and *out_batch* "
"must point to memory large enough to hold a key, except for maps of type "
"**BPF_MAP_TYPE_{HASH, PERCPU_HASH, LRU_HASH, LRU_PERCPU_HASH}**, for which "
"batch parameters must be at least 4 bytes wide regardless of key size."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:650
msgid ""
"The *keys* and *values* are output parameters which must point to memory "
"large enough to hold *count* items based on the key and value size of the "
"map *map_fd*. The *keys* buffer must be of *key_size* * *count*. The "
"*values* buffer must be of *value_size* * *count*."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:656
#: include/uapi/linux/bpf.h:760
msgid "The *elem_flags* argument may be specified as one of the following:"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:664
msgid ""
"On success, *count* elements from the map are copied into the user buffer, "
"with the keys copied into *keys* and the values copied into the "
"corresponding indices in *values*."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:668
#: include/uapi/linux/bpf.h:726
msgid ""
"If an error is returned and *errno* is not **EFAULT**, *count* is set to the "
"number of successfully processed elements."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:675
msgid ""
"May set *errno* to **ENOSPC** to indicate that *keys* or *values* is too "
"small to dump an entire bucket during iteration of a hash-based map type."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:679
msgid "BPF_MAP_LOOKUP_AND_DELETE_BATCH"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:681
msgid "Iterate and delete all elements in a map."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:683
msgid ""
"This operation has the same behavior as **BPF_MAP_LOOKUP_BATCH** with two "
"exceptions:"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:686
msgid ""
"Every element that is successfully returned is also deleted from the map. "
"This is at least *count* elements. Note that *count* is both an input and an "
"output parameter."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:689
msgid ""
"Upon returning with *errno* set to **EFAULT**, up to *count* elements may be "
"deleted without returning the keys and values of the deleted elements."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:697
msgid "BPF_MAP_UPDATE_BATCH"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:699
msgid "Update multiple elements in a map by *key*."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:701
msgid ""
"The *keys* and *values* are input parameters which must point to memory "
"large enough to hold *count* items based on the key and value size of the "
"map *map_fd*. The *keys* buffer must be of *key_size* * *count*. The "
"*values* buffer must be of *value_size* * *count*."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:707
msgid ""
"Each element specified in *keys* is sequentially updated to the value in the "
"corresponding index in *values*. The *in_batch* and *out_batch* parameters "
"are ignored and should be zeroed."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:711
msgid "The *elem_flags* argument should be specified as one of the following:"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:715
msgid "Create new elements or update a existing elements."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:717
msgid "Create new elements only if they do not exist."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:719
msgid "Update existing elements."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:721
msgid ""
"Update spin_lock-ed map elements. This must be specified if the map value "
"contains a spinlock."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:724
#: include/uapi/linux/bpf.h:768
msgid "On success, *count* elements from the map are updated."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:733
msgid ""
"May set *errno* to **EINVAL**, **EPERM**, **ENOMEM**, or **E2BIG**. "
"**E2BIG** indicates that the number of elements in the map reached the "
"*max_entries* limit specified at map creation time."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:738
msgid ""
"May set *errno* to one of the following error codes under specific "
"circumstances:"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:748
msgid "BPF_MAP_DELETE_BATCH"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:750
msgid "Delete multiple elements in a map by *key*."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:752
msgid ""
"The *keys* parameter is an input parameter which must point to memory large "
"enough to hold *count* items based on the key size of the map *map_fd*, that "
"is, *key_size* * *count*."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:756
msgid ""
"Each element specified in *keys* is sequentially deleted. The *in_batch*, "
"*out_batch*, and *values* parameters are ignored and should be zeroed."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:770
msgid ""
"If an error is returned and *errno* is not **EFAULT**, *count* is set to the "
"number of successfully processed elements. If *errno* is **EFAULT**, up to "
"*count* elements may be been deleted."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:779
msgid "BPF_LINK_CREATE"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:781
msgid ""
"Attach an eBPF program to a *target_fd* at the specified *attach_type* hook "
"and return a file descriptor handle for managing the link."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:789
msgid "BPF_LINK_UPDATE"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:791
msgid "Update the eBPF program in the specified *link_fd* to *new_prog_fd*."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:798
msgid "BPF_LINK_GET_FD_BY_ID"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:800
msgid "Open a file descriptor for the eBPF Link corresponding to *link_id*."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:807
msgid "BPF_LINK_GET_NEXT_ID"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:809
msgid "Fetch the next eBPF link currently loaded into the kernel."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:811
msgid ""
"Looks for the eBPF link with an id greater than *start_id* and updates "
"*next_id* on success. If no other eBPF links remain with ids higher than "
"*start_id*, returns -1 and sets *errno* to **ENOENT**."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:820
msgid "BPF_ENABLE_STATS"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:822
msgid "Enable eBPF runtime statistics gathering."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:824
msgid ""
"Runtime statistics gathering for the eBPF runtime is disabled by default to "
"minimize the corresponding performance overhead. This command enables "
"statistics globally."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:828
msgid ""
"Multiple programs may independently enable statistics. After gathering the "
"desired statistics, eBPF runtime statistics may be disabled again by calling "
"**close**\\ (2) for the file descriptor returned by this function. "
"Statistics will only be disabled system-wide when all outstanding file "
"descriptors returned by prior calls for this subcommand are closed."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:839
msgid "BPF_ITER_CREATE"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:841
msgid ""
"Create an iterator on top of the specified *link_fd* (as previously created "
"using **BPF_LINK_CREATE**) and return a file descriptor that can be used to "
"trigger the iteration."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:845
msgid ""
"If the resulting file descriptor is pinned to the filesystem using  "
"**BPF_OBJ_PIN**, then subsequent **read**\\ (2) syscalls for that path will "
"trigger the iterator to read kernel state using the eBPF program attached to "
"*link_fd*."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:854
msgid "BPF_LINK_DETACH"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:856
msgid ""
"Forcefully detach the specified *link_fd* from its corresponding attachment "
"point."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:863
msgid "BPF_PROG_BIND_MAP"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:865
msgid "Bind a map to the lifetime of an eBPF program."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:867
msgid ""
"The map identified by *map_fd* is bound to the program identified by "
"*prog_fd* and only released when *prog_fd* is released. This may be used in "
"cases where metadata should be associated with a program which otherwise "
"does not contain any references to the map (for example, embedded in the "
"eBPF program instructions)."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:878
msgid "BPF_TOKEN_CREATE"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:880
msgid ""
"Create BPF token with embedded information about what BPF-related "
"functionality it allows: - a set of allowed bpf() syscall commands; - a set "
"of allowed BPF map types to be created with BPF_MAP_CREATE command, if "
"BPF_MAP_CREATE itself is allowed; - a set of allowed BPF program types and "
"BPF program attach types to be loaded with BPF_PROG_LOAD command, if "
"BPF_PROG_LOAD itself is allowed."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:889
msgid ""
"BPF token is created (derived) from an instance of BPF FS, assuming it has "
"necessary delegation mount options specified. This BPF token can be passed "
"as an extra parameter to various bpf() syscall commands to grant BPF "
"subsystem functionality to unprivileged processes."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:895
msgid ""
"When created, BPF token is \"associated\" with the owning user namespace of "
"BPF FS instance (super block) that it was derived from, and subsequent BPF "
"operations performed with BPF token would be performing capabilities checks "
"(i.e., CAP_BPF, CAP_PERFMON, CAP_NET_ADMIN, CAP_SYS_ADMIN) within that user "
"namespace. Without BPF token, such capabilities have to be granted in init "
"user namespace, making bpf() syscall incompatible with user namespace, for "
"the most part."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:908
msgid "BPF_PROG_STREAM_READ_BY_FD"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:910
msgid ""
"Read data of a program's BPF stream. The program is identified by *prog_fd*, "
"and the stream is identified by the *stream_id*. The data is copied to a "
"buffer pointed to by *stream_buf*, and filled less than or equal to "
"*stream_buf_len* bytes."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:916
msgid ""
"Number of bytes read from the stream on success, or -1 if an error occurred "
"(in which case, *errno* is set appropriately)."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:919
msgid "NOTES"
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:920
msgid "eBPF objects (maps and programs) can be shared between processes."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:922
msgid ""
"After **fork**\\ (2), the child inherits file descriptors referring to the "
"same eBPF objects."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:924
msgid ""
"File descriptors referring to eBPF objects can be transferred over "
"**unix**\\ (7) domain sockets."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:926
msgid ""
"File descriptors referring to eBPF objects can be duplicated in the usual "
"way, using **dup**\\ (2) and similar calls."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:928
msgid ""
"File descriptors referring to eBPF objects can be pinned to the filesystem "
"using the **BPF_OBJ_PIN** command of **bpf**\\ (2)."
msgstr ""

#: ../../../userspace-api/ebpf/syscall:19: include/uapi/linux/bpf.h:931
msgid ""
"An eBPF object is deallocated only after all file descriptors referring to "
"the object have been closed and no references remain pinned to the "
"filesystem or attached (for example, bound to a program or device)."
msgstr ""
