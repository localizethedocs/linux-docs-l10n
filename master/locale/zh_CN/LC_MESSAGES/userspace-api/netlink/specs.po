# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../userspace-api/netlink/specs.rst:5
msgid "Netlink protocol specifications (in YAML)"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:7
msgid ""
"Netlink protocol specifications are complete, machine readable descriptions "
"of Netlink protocols written in YAML. The goal of the specifications is to "
"allow separating Netlink parsing from user space logic and minimize the "
"amount of hand written Netlink code for each new family, command, attribute. "
"Netlink specs should be complete and not depend on any other spec or C "
"header file, making it easy to use in languages which can't include kernel "
"headers directly."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:15
msgid "Internally kernel uses the YAML specs to generate:"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:17
msgid "the C uAPI header"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:18
msgid ""
"documentation of the protocol as a ReST file - see :ref:`Documentation/"
"networking/netlink_spec/index.rst <specs>`"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:19
msgid "policy tables for input attribute validation"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:20
msgid "operation tables"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:22
msgid "YAML specifications can be found under ``Documentation/netlink/specs/``"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:24
msgid ""
"This document describes details of the schema. See :doc:`intro-specs` for a "
"practical starting guide."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:27
msgid ""
"All specs must be licensed under ``((GPL-2.0 WITH Linux-syscall-note) OR "
"BSD-3-Clause)`` to allow for easy adoption in user space code."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:32
msgid "Compatibility levels"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:34
msgid ""
"There are four schema levels for Netlink specs, from the simplest used by "
"new families to the most complex covering all the quirks of the old ones. "
"Each next level inherits the attributes of the previous level, meaning that "
"user capable of parsing more complex ``genetlink`` schemas is also "
"compatible with simpler ones. The levels are:"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:40
msgid "``genetlink`` - most streamlined, should be used by all new families"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:41
msgid ""
"``genetlink-c`` - superset of ``genetlink`` with extra attributes allowing "
"customization of define and enum type and value names; this schema should be "
"equivalent to ``genetlink`` for all implementations which don't interact "
"directly with C uAPI headers"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:45
msgid ""
"``genetlink-legacy`` - Generic Netlink catch all schema supporting quirks of "
"all old genetlink families, strange attribute formats, binary structures etc."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:47
msgid ""
"``netlink-raw`` - catch all schema supporting pre-Generic Netlink protocols "
"such as ``NETLINK_ROUTE``"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:50
msgid ""
"The definition of the schemas (in ``jsonschema``) can be found under "
"``Documentation/netlink/``."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:54
msgid "Schema structure"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:56
msgid "YAML schema has the following conceptual sections:"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:58
msgid "globals"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:59
#: ../../../userspace-api/netlink/specs.rst:96
msgid "definitions"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:60
#: ../../../userspace-api/netlink/specs.rst:178
msgid "attributes"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:61
#: ../../../userspace-api/netlink/specs.rst:276
msgid "operations"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:62
msgid "multicast groups"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:64
msgid ""
"Most properties in the schema accept (or in fact require) a ``doc`` sub-"
"property documenting the defined object."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:67
msgid ""
"The following sections describe the properties of the most modern "
"``genetlink`` schema. See the documentation of :doc:`genetlink-c <c-code-"
"gen>` for information on how C names are derived from name properties."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:71
msgid ""
"See also :ref:`Documentation/core-api/netlink.rst <kernel_netlink>` for "
"information on the Netlink specification properties that are only relevant "
"to the kernel space and not part of the user space API."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:76
msgid "genetlink"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:79
msgid "Globals"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:81
msgid "Attributes listed directly at the root level of the spec file."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:84
#: ../../../userspace-api/netlink/specs.rst:101
#: ../../../userspace-api/netlink/specs.rst:163
#: ../../../userspace-api/netlink/specs.rst:188
#: ../../../userspace-api/netlink/specs.rst:317
#: ../../../userspace-api/netlink/specs.rst:391
msgid "name"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:86
msgid ""
"Name of the family. Name identifies the family in a unique way, since the "
"Family IDs are allocated dynamically."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:90
msgid "protocol"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:92
msgid ""
"The schema level, default is ``genetlink``, which is the only value allowed "
"for new ``genetlink`` families."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:98
msgid "Array of type and constant definitions."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:103
msgid "Name of the type / constant."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:106
#: ../../../userspace-api/netlink/specs.rst:193
msgid "type"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:108
msgid "One of the following types:"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:110
msgid "const - a single, standalone constant"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:111
msgid ""
"enum - defines an integer enumeration, with values for each entry "
"incrementing by 1, (e.g. 0, 1, 2, 3)"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:113
msgid ""
"flags - defines an integer enumeration, with values for each entry occupying "
"a bit, starting from bit 0, (e.g. 1, 2, 4, 8)"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:117
#: ../../../userspace-api/netlink/specs.rst:200
#: ../../../userspace-api/netlink/specs.rst:322
msgid "value"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:119
msgid "The value for the ``const``."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:122
msgid "value-start"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:124
msgid ""
"The first value for ``enum`` and ``flags``, allows overriding the default "
"start value of ``0`` (for ``enum``) and starting bit (for ``flags``). For "
"``flags`` ``value-start`` selects the starting bit, not the shifted value."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:128
msgid "Sparse enumerations are not supported."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:131
msgid "entries"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:133
msgid "Array of names of the entries for ``enum`` and ``flags``."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:136
msgid "header"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:138
msgid ""
"For C-compatible languages, header which already defines this value. In case "
"the definition is shared by multiple families (e.g. ``IFNAMSIZ``) code "
"generators for C-compatible languages may prefer to add an appropriate "
"include instead of rendering a new definition."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:144
msgid "attribute-sets"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:146
msgid ""
"This property contains information about netlink attributes of the family. "
"All families have at least one attribute set, most have multiple. "
"``attribute-sets`` is an array, with each entry describing a single set."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:150
msgid ""
"Note that the spec is \"flattened\" and is not meant to visually resemble "
"the format of the netlink messages (unlike certain ad-hoc documentation "
"formats seen in kernel comments). In the spec subordinate attribute sets are "
"not defined inline as a nest, but defined in a separate attribute set "
"referred to with a ``nested-attributes`` property of the container."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:156
msgid ""
"Spec may also contain fractional sets - sets which contain a ``subset-of`` "
"property. Such sets describe a section of a full set, allowing narrowing "
"down which attributes are allowed in a nest or refining the validation "
"criteria. Fractional sets can only be used in nests. They are not rendered "
"to the uAPI in any fashion."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:165
msgid ""
"Uniquely identifies the attribute set, operations and nested attributes "
"refer to the sets by the ``name``."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:169
msgid "subset-of"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:171
msgid ""
"Re-defines a portion of another set (a fractional set). Allows narrowing "
"down fields and changing validation criteria or even types of attributes "
"depending on the nest in which they are contained. The ``value`` of each "
"attribute in the fractional set is implicitly the same as in the main set."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:180
msgid "List of attributes in the set."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:185
msgid "Attribute properties"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:190
msgid "Identifies the attribute, unique within the set."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:195
msgid "Netlink attribute type, see :ref:`attr_types`."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:202
msgid ""
"Numerical attribute ID, used in serialized Netlink messages. The ``value`` "
"property can be skipped, in which case the attribute ID will be the value of "
"the previous attribute plus one (recursively) and ``1`` for the first "
"attribute in the attribute set."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:207
msgid ""
"Attributes (and operations) use ``1`` as the default value for the first "
"entry (unlike enums in definitions which start from ``0``) because entry "
"``0`` is almost always reserved as undefined. Spec can explicitly set value "
"to ``0`` if needed."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:212
msgid ""
"Note that the ``value`` of an attribute is defined only in its main set (not "
"in subsets)."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:216
msgid "enum"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:218
msgid ""
"For integer types specifies that values in the attribute belong to an "
"``enum`` or ``flags`` from the ``definitions`` section."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:222
msgid "enum-as-flags"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:224
msgid ""
"Treat ``enum`` as ``flags`` regardless of its type in ``definitions``. When "
"both ``enum`` and ``flags`` forms are needed ``definitions`` should contain "
"an ``enum`` and attributes which need the ``flags`` form should use this "
"attribute."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:230
msgid "nested-attributes"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:232
msgid ""
"Identifies the attribute space for attributes nested within given attribute. "
"Only valid for complex attributes which may have sub-attributes."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:236
msgid "multi-attr (arrays)"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:238
msgid ""
"Boolean property signifying that the attribute may be present multiple "
"times. Allowing an attribute to repeat is the recommended way of "
"implementing arrays (no extra nesting)."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:243
msgid "byte-order"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:245
msgid ""
"For integer types specifies attribute byte order - ``little-endian`` or "
"``big-endian``."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:249
msgid "checks"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:251
msgid ""
"Input validation constraints used by the kernel. User space should query the "
"policy of the running kernel using Generic Netlink introspection, rather "
"than depend on what is specified in the spec file."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:255
msgid ""
"The validation policy in the kernel is formed by combining the type "
"definition (``type`` and ``nested-attributes``) and the ``checks``."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:259
msgid "sub-type"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:261
msgid ""
"Legacy families have special ways of expressing arrays. ``sub-type`` can be "
"used to define the type of array members in case array members are not fully "
"defined as attributes (in a bona fide attribute space). For instance a C "
"array of u32 values can be specified with ``type: binary`` and ``sub-type: "
"u32``. Binary types and legacy array formats are described in more detail "
"in :doc:`genetlink-legacy`."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:269
msgid "display-hint"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:271
msgid ""
"Optional format indicator that is intended only for choosing the right "
"formatting mechanism when displaying values of this type. Currently "
"supported hints are ``hex``, ``mac``, ``fddi``, ``ipv4``, ``ipv6`` and "
"``uuid``."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:278
msgid ""
"This section describes messages passed between the kernel and the user "
"space. There are three types of entries in this section - operations, "
"notifications and events."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:282
msgid ""
"Operations describe the most common request - response communication. User "
"sends a request and kernel replies. Each operation may contain any "
"combination of the two modes familiar to netlink users - ``do`` and "
"``dump``. ``do`` and ``dump`` in turn contain a combination of ``request`` "
"and ``response`` properties. If no explicit message with attributes is "
"passed in a given direction (e.g. a ``dump`` which does not accept filter, "
"or a ``do`` of a SET operation to which the kernel responds with just the "
"netlink error code) ``request`` or ``response`` section can be skipped. "
"``request`` and ``response`` sections list the attributes allowed in a "
"message. The list contains only the names of attributes from a set referred "
"to by the ``attribute-set`` property."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:294
msgid ""
"Notifications and events both refer to the asynchronous messages sent by the "
"kernel to members of a multicast group. The difference between the two is "
"that a notification shares its contents with a GET operation (the name of "
"the GET operation is specified in the ``notify`` property). This arrangement "
"is commonly used for notifications about objects where the notification "
"carries the full object definition."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:301
msgid ""
"Events are more focused and carry only a subset of information rather than "
"full object state (a made up example would be a link state change event with "
"just the interface name and the new link state). Events contain the "
"``event`` property. Events are considered less idiomatic for netlink and "
"notifications should be preferred."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:308
#: ../../../userspace-api/netlink/specs.rst:382
msgid "list"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:310
msgid ""
"The only property of ``operations`` for ``genetlink``, holds the list of "
"operations, notifications etc."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:314
msgid "Operation properties"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:319
msgid "Identifies the operation."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:324
msgid ""
"Numerical message ID, used in serialized Netlink messages. The same "
"enumeration rules are applied as to :ref:`attribute values<assign_val>`."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:329
msgid "attribute-set"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:331
msgid "Specifies the attribute set contained within the message."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:334
msgid "do"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:336
msgid ""
"Specification for the ``doit`` request. Should contain ``request``, "
"``reply`` or both of these properties, each holding a :ref:`attr_list`."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:340
msgid "dump"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:342
msgid ""
"Specification for the ``dumpit`` request. Should contain ``request``, "
"``reply`` or both of these properties, each holding a :ref:`attr_list`."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:346
msgid "notify"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:348
msgid ""
"Designates the message as a notification. Contains the name of the operation "
"(possibly the same as the operation holding this property) which shares the "
"contents with the notification (``do``)."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:353
msgid "event"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:355
msgid ""
"Specification of attributes in the event, holds a :ref:`attr_list`. "
"``event`` property is mutually exclusive with ``notify``."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:359
msgid "mcgrp"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:361
msgid ""
"Used with ``event`` and ``notify``, specifies which multicast group message "
"belongs to."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:367
msgid "Message attribute list"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:369
msgid ""
"``request``, ``reply`` and ``event`` properties have a single ``attributes`` "
"property which holds the list of attribute names."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:372
msgid ""
"Messages can also define ``pre`` and ``post`` properties which will be "
"rendered as ``pre_doit`` and ``post_doit`` calls in the kernel (these "
"properties should be ignored by user space)."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:377
msgid "mcast-groups"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:379
msgid "This section lists the multicast groups of the family."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:384
msgid ""
"The only property of ``mcast-groups`` for ``genetlink``, holds the list of "
"groups."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:388
msgid "Multicast group properties"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:393
msgid ""
"Uniquely identifies the multicast group in the family. Similarly to Family "
"ID, Multicast Group ID needs to be resolved at runtime, based on the name."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:400
msgid "Attribute types"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:402
msgid ""
"This section describes the attribute types supported by the ``genetlink`` "
"compatibility level. Refer to documentation of different levels for "
"additional attribute types."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:407
msgid "Common integer types"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:409
msgid ""
"``sint`` and ``uint`` represent signed and unsigned 64 bit integers. If the "
"value can fit on 32 bits only 32 bits are carried in netlink messages, "
"otherwise full 64 bits are carried. Note that the payload is only aligned to "
"4B, so the full 64 bit value may be unaligned!"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:414
msgid ""
"Common integer types should be preferred over fix-width types in majority of "
"cases."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:418
msgid "Fix-width integer types"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:420
msgid ""
"Fixed-width integer types include: ``u8``, ``u16``, ``u32``, ``u64``, "
"``s8``, ``s16``, ``s32``, ``s64``."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:423
msgid ""
"Note that types smaller than 32 bit should be avoided as using them does not "
"save any memory in Netlink messages (due to alignment). See :ref:`pad_type` "
"for padding of 64 bit attributes."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:427
msgid ""
"The payload of the attribute is the integer in host order unless ``byte-"
"order`` specifies otherwise."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:430
msgid ""
"64 bit values are usually aligned by the kernel but it is recommended that "
"the user space is able to deal with unaligned values."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:436
msgid "pad"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:438
msgid ""
"Special attribute type used for padding attributes which require alignment "
"bigger than standard 4B alignment required by netlink (e.g. 64 bit "
"integers). There can only be a single attribute of the ``pad`` type in any "
"attribute set and it should be automatically used for padding when needed."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:444
msgid "flag"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:446
msgid "Attribute with no payload, its presence is the entire information."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:449
msgid "binary"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:451
msgid "Raw binary data attribute, the contents are opaque to generic code."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:454
msgid "string"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:456
msgid ""
"Character string. Unless ``checks`` has ``unterminated-ok`` set to ``true`` "
"the string is required to be null terminated. ``max-len`` in ``checks`` "
"indicates the longest possible string, if not present the length of the "
"string is unbounded."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:461
msgid "Note that ``max-len`` does not count the terminating character."
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:464
msgid "nest"
msgstr ""

#: ../../../userspace-api/netlink/specs.rst:466
msgid ""
"Attribute containing other (nested) attributes. ``nested-attributes`` "
"specifies which attribute set is used inside."
msgstr ""
