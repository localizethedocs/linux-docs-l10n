# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../userspace-api/futex2.rst:5
msgid "futex2"
msgstr ""

#: ../../../userspace-api/futex2.rst:0
msgid "Author"
msgstr ""

#: ../../../userspace-api/futex2.rst:7
msgid "Andr√© Almeida <andrealmeid@collabora.com>"
msgstr ""

#: ../../../userspace-api/futex2.rst:9
msgid ""
"futex, or fast user mutex, is a set of syscalls to allow userspace to create "
"performant synchronization mechanisms, such as mutexes, semaphores and "
"conditional variables in userspace. C standard libraries, like glibc, uses "
"it as a means to implement more high level interfaces like pthreads."
msgstr ""

#: ../../../userspace-api/futex2.rst:14
msgid ""
"futex2 is a followup version of the initial futex syscall, designed to "
"overcome limitations of the original interface."
msgstr ""

#: ../../../userspace-api/futex2.rst:18
msgid "User API"
msgstr ""

#: ../../../userspace-api/futex2.rst:21
msgid "``futex_waitv()``"
msgstr ""

#: ../../../userspace-api/futex2.rst:23
msgid "Wait on an array of futexes, wake on any::"
msgstr ""

#: ../../../userspace-api/futex2.rst:35
msgid ""
"Userspace sets an array of struct futex_waitv (up to a max of 128 entries), "
"using ``uaddr`` for the address to wait for, ``val`` for the expected value "
"and ``flags`` to specify the type (e.g. private) and size of futex. "
"``__reserved`` needs to be 0, but it can be used for future extension. The "
"pointer for the first item of the array is passed as ``waiters``. An invalid "
"address for ``waiters`` or for any ``uaddr`` returns ``-EFAULT``."
msgstr ""

#: ../../../userspace-api/futex2.rst:42
msgid ""
"If userspace has 32-bit pointers, it should do a explicit cast to make sure "
"the upper bits are zeroed. ``uintptr_t`` does the tricky and it works for "
"both 32/64-bit pointers."
msgstr ""

#: ../../../userspace-api/futex2.rst:46
msgid ""
"``nr_futexes`` specifies the size of the array. Numbers out of [1, 128] "
"interval will make the syscall return ``-EINVAL``."
msgstr ""

#: ../../../userspace-api/futex2.rst:49
msgid ""
"The ``flags`` argument of the syscall needs to be 0, but it can be used for "
"future extension."
msgstr ""

#: ../../../userspace-api/futex2.rst:52
msgid ""
"For each entry in ``waiters`` array, the current value at ``uaddr`` is "
"compared to ``val``. If it's different, the syscall undo all the work done "
"so far and return ``-EAGAIN``. If all tests and verifications succeeds, "
"syscall waits until one of the following happens:"
msgstr ""

#: ../../../userspace-api/futex2.rst:57
msgid "The timeout expires, returning ``-ETIMEOUT``."
msgstr ""

#: ../../../userspace-api/futex2.rst:58
msgid "A signal was sent to the sleeping task, returning ``-ERESTARTSYS``."
msgstr ""

#: ../../../userspace-api/futex2.rst:59
msgid ""
"Some futex at the list was woken, returning the index of some waked futex."
msgstr ""

#: ../../../userspace-api/futex2.rst:61
msgid ""
"An example of how to use the interface can be found at ``tools/testing/"
"selftests/futex/functional/futex_waitv.c``."
msgstr ""

#: ../../../userspace-api/futex2.rst:64
msgid "Timeout"
msgstr ""

#: ../../../userspace-api/futex2.rst:66
msgid ""
"``struct timespec *timeout`` argument is an optional argument that points to "
"an absolute timeout. You need to specify the type of clock being used at "
"``clockid`` argument. ``CLOCK_MONOTONIC`` and ``CLOCK_REALTIME`` are "
"supported. This syscall accepts only 64bit timespec structs."
msgstr ""

#: ../../../userspace-api/futex2.rst:72
msgid "Types of futex"
msgstr ""

#: ../../../userspace-api/futex2.rst:74
msgid ""
"A futex can be either private or shared. Private is used for processes that "
"shares the same memory space and the virtual address of the futex will be "
"the same for all processes. This allows for optimizations in the kernel. To "
"use private futexes, it's necessary to specify ``FUTEX_PRIVATE_FLAG`` in the "
"futex flag. For processes that doesn't share the same memory space and "
"therefore can have different virtual addresses for the same futex (using, "
"for instance, a file-backed shared memory) requires different internal "
"mechanisms to be get properly enqueued. This is the default behavior, and it "
"works with both private and shared futexes."
msgstr ""

#: ../../../userspace-api/futex2.rst:84
msgid ""
"Futexes can be of different sizes: 8, 16, 32 or 64 bits. Currently, the only "
"supported one is 32 bit sized futex, and it need to be specified using "
"``FUTEX_32`` flag."
msgstr ""
