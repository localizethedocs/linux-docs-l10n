# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../userspace-api/media/v4l/dev-overlay.rst:7
msgid "Video Overlay Interface"
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:9
msgid "**Also known as Framebuffer Overlay or Previewing.**"
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:11
msgid ""
"Video overlay devices have the ability to genlock (TV-)video into the "
"(VGA-)video signal of a graphics card, or to store captured images directly "
"in video memory of a graphics card, typically with clipping. This can be "
"considerable more efficient than capturing images and displaying them by "
"other means. In the old days when only nuclear power plants needed cooling "
"towers this used to be the only way to put live video into a window."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:19
msgid ""
"Video overlay devices are accessed through the same character special files "
"as :ref:`video capture <capture>` devices."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:24
msgid ""
"The default function of a ``/dev/video`` device is video capturing. The "
"overlay function is only available after calling the :ref:`VIDIOC_S_FMT "
"<VIDIOC_G_FMT>` ioctl."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:28
msgid ""
"The driver may support simultaneous overlay and capturing using the read/"
"write and streaming I/O methods. If so, operation at the nominal frame rate "
"of the video standard is not guaranteed. Frames may be directed away from "
"overlay to capture, or one field may be used for overlay and the other for "
"capture if the capture parameters permit this."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:34
msgid ""
"Applications should use different file descriptors for capturing and "
"overlay. This must be supported by all drivers capable of simultaneous "
"capturing and overlay. Optionally these drivers may also permit capturing "
"and overlay with a single file descriptor for compatibility with V4L and "
"earlier versions of V4L2. [#f1]_"
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:40
msgid ""
"A common application of two file descriptors is the X11 :ref:`Xv/V4L "
"<xvideo>` interface driver and a V4L2 application. While the X server "
"controls video overlay, the application can take advantage of memory mapping "
"and DMA."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:46
msgid "Querying Capabilities"
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:48
msgid ""
"Devices supporting the video overlay interface set the "
"``V4L2_CAP_VIDEO_OVERLAY`` flag in the ``capabilities`` field of struct :c:"
"type:`v4l2_capability` returned by the :ref:`VIDIOC_QUERYCAP` ioctl. The "
"overlay I/O method specified below must be supported. Tuners and audio "
"inputs are optional."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:57
msgid "Supplemental Functions"
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:59
msgid ""
"Video overlay devices shall support :ref:`audio input <audio>`, :ref:"
"`tuner`, :ref:`controls <control>`, :ref:`cropping and scaling <crop>` and :"
"ref:`streaming parameter <streaming-par>` ioctls as needed. The :ref:`video "
"input <video>` and :ref:`video standard <standard>` ioctls must be supported "
"by all video overlay devices."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:68
msgid "Setup"
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:70
msgid ""
"*Note: support for this has been removed.* Before overlay can commence "
"applications must program the driver with frame buffer parameters, namely "
"the address and size of the frame buffer and the image format, for example "
"RGB 5:6:5. The :ref:`VIDIOC_G_FBUF <VIDIOC_G_FBUF>` and :ref:`VIDIOC_S_FBUF "
"<VIDIOC_G_FBUF>` ioctls are available to get and set these parameters, "
"respectively. The :ref:`VIDIOC_S_FBUF <VIDIOC_G_FBUF>` ioctl is privileged "
"because it allows to set up DMA into physical memory, bypassing the memory "
"protection mechanisms of the kernel. Only the superuser can change the frame "
"buffer address and size. Users are not supposed to run TV applications as "
"root or with SUID bit set. A small helper application with suitable "
"privileges should query the graphics system and program the V4L2 driver at "
"the appropriate time."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:84
msgid ""
"Some devices add the video overlay to the output signal of the graphics "
"card. In this case the frame buffer is not modified by the video device, and "
"the frame buffer address and pixel format are not needed by the driver. The :"
"ref:`VIDIOC_S_FBUF <VIDIOC_G_FBUF>` ioctl is not privileged. An application "
"can check for this type of device by calling the :ref:`VIDIOC_G_FBUF "
"<VIDIOC_G_FBUF>` ioctl."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:91
msgid "A driver may support any (or none) of five clipping/blending methods:"
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:93
msgid ""
"Chroma-keying displays the overlaid image only where pixels in the primary "
"graphics surface assume a certain color."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:96
msgid ""
"*Note: support for this has been removed.* A bitmap can be specified where "
"each bit corresponds to a pixel in the overlaid image. When the bit is set, "
"the corresponding video pixel is displayed, otherwise a pixel of the "
"graphics surface."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:101
msgid ""
"*Note: support for this has been removed.* A list of clipping rectangles can "
"be specified. In these regions *no* video is displayed, so the graphics "
"surface can be seen here."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:105
msgid ""
"The framebuffer has an alpha channel that can be used to clip or blend the "
"framebuffer with the video."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:108
msgid ""
"A global alpha value can be specified to blend the framebuffer contents with "
"video images."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:111
msgid ""
"When simultaneous capturing and overlay is supported and the hardware "
"prohibits different image and frame buffer formats, the format requested "
"first takes precedence. The attempt to capture (:ref:`VIDIOC_S_FMT "
"<VIDIOC_G_FMT>`) or overlay (:ref:`VIDIOC_S_FBUF <VIDIOC_G_FBUF>`) may fail "
"with an ``EBUSY`` error code or return accordingly modified parameters.."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:120
msgid "Overlay Window"
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:122
msgid ""
"The overlaid image is determined by cropping and overlay window parameters. "
"The former select an area of the video picture to capture, the latter how "
"images are overlaid and clipped. Cropping initialization at minimum requires "
"to reset the parameters to defaults. An example is given in :ref:`crop`."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:128
msgid ""
"The overlay window is described by a struct :c:type:`v4l2_window`. It "
"defines the size of the image, its position over the graphics surface and "
"the clipping to be applied. To get the current parameters applications set "
"the ``type`` field of a struct :c:type:`v4l2_format` to "
"``V4L2_BUF_TYPE_VIDEO_OVERLAY`` and call the :ref:`VIDIOC_G_FMT "
"<VIDIOC_G_FMT>` ioctl. The driver fills the struct :c:type:`v4l2_window` "
"substructure named ``win``. It is not possible to retrieve a previously "
"programmed clipping list or bitmap."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:138
msgid ""
"To program the overlay window applications set the ``type`` field of a "
"struct :c:type:`v4l2_format` to ``V4L2_BUF_TYPE_VIDEO_OVERLAY``, initialize "
"the ``win`` substructure and call the :ref:`VIDIOC_S_FMT <VIDIOC_G_FMT>` "
"ioctl. The driver adjusts the parameters against hardware limits and returns "
"the actual parameters as :ref:`VIDIOC_G_FMT <VIDIOC_G_FMT>` does. Like :ref:"
"`VIDIOC_S_FMT <VIDIOC_G_FMT>`, the :ref:`VIDIOC_TRY_FMT <VIDIOC_G_FMT>` "
"ioctl can be used to learn about driver capabilities without actually "
"changing driver state. Unlike :ref:`VIDIOC_S_FMT <VIDIOC_G_FMT>` this also "
"works after the overlay has been enabled."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:148
msgid ""
"The scaling factor of the overlaid image is implied by the width and height "
"given in struct :c:type:`v4l2_window` and the size of the cropping "
"rectangle. For more information see :ref:`crop`."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:152
msgid ""
"When simultaneous capturing and overlay is supported and the hardware "
"prohibits different image and window sizes, the size requested first takes "
"precedence. The attempt to capture or overlay as well (:ref:`VIDIOC_S_FMT "
"<VIDIOC_G_FMT>`) may fail with an ``EBUSY`` error code or return accordingly "
"modified parameters."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:162
msgid "struct v4l2_window"
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:164
msgid "``struct v4l2_rect w``"
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:165
msgid ""
"Size and position of the window relative to the top, left corner of the "
"frame buffer defined with :ref:`VIDIOC_S_FBUF <VIDIOC_G_FBUF>`. The window "
"can extend the frame buffer width and height, the ``x`` and ``y`` "
"coordinates can be negative, and it can lie completely outside the frame "
"buffer. The driver clips the window accordingly, or if that is not possible, "
"modifies its size and/or position."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:173
msgid "``enum v4l2_field field``"
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:174
msgid ""
"Applications set this field to determine which video field shall be "
"overlaid, typically one of ``V4L2_FIELD_ANY`` (0), ``V4L2_FIELD_TOP``, "
"``V4L2_FIELD_BOTTOM`` or ``V4L2_FIELD_INTERLACED``. Drivers may have to "
"choose a different field order and return the actual setting here."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:180
msgid "``__u32 chromakey``"
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:181
msgid ""
"When chroma-keying has been negotiated with :ref:`VIDIOC_S_FBUF "
"<VIDIOC_G_FBUF>` applications set this field to the desired pixel value for "
"the chroma key. The format is the same as the pixel format of the "
"framebuffer (struct :c:type:`v4l2_framebuffer` ``fmt.pixelformat`` field), "
"with bytes in host order. E. g. for :ref:`V4L2_PIX_FMT_BGR24 <V4L2-PIX-FMT-"
"BGR32>` the value should be 0xRRGGBB on a little endian, 0xBBGGRR on a big "
"endian host."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:190
msgid "``struct v4l2_clip * clips``"
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:191
msgid ""
"*Note: support for this has been removed.* When chroma-keying has *not* been "
"negotiated and :ref:`VIDIOC_G_FBUF <VIDIOC_G_FBUF>` indicated this "
"capability, applications can set this field to point to an array of clipping "
"rectangles."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:197
msgid ""
"Like the window coordinates w, clipping rectangles are defined relative to "
"the top, left corner of the frame buffer. However clipping rectangles must "
"not extend the frame buffer width and height, and they must not overlap. If "
"possible applications should merge adjacent rectangles. Whether this must "
"create x-y or y-x bands, or the order of rectangles, is not defined. When "
"clip lists are not supported the driver ignores this field. Its contents "
"after calling :ref:`VIDIOC_S_FMT <VIDIOC_G_FMT>` are undefined."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:207
msgid "``__u32 clipcount``"
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:208
msgid ""
"*Note: support for this has been removed.* When the application set the "
"``clips`` field, this field must contain the number of clipping rectangles "
"in the list. When clip lists are not supported the driver ignores this "
"field, its contents after calling :ref:`VIDIOC_S_FMT <VIDIOC_G_FMT>` are "
"undefined. When clip lists are supported but no clipping is desired this "
"field must be set to zero."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:215
msgid "``void * bitmap``"
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:216
msgid ""
"*Note: support for this has been removed.* When chroma-keying has *not* been "
"negotiated and :ref:`VIDIOC_G_FBUF <VIDIOC_G_FBUF>` indicated this "
"capability, applications can set this field to point to a clipping bit mask."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:221
msgid ""
"It must be of the same size as the window, ``w.width`` and ``w.height``. "
"Each bit corresponds to a pixel in the overlaid image, which is displayed "
"only when the bit is *set*. Pixel coordinates translate to bits like:"
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:231
msgid "where ``0`` ≤ x < ``w.width`` and ``0`` ≤ y <``w.height``. [#f2]_"
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:233
msgid ""
"When a clipping bit mask is not supported the driver ignores this field, its "
"contents after calling :ref:`VIDIOC_S_FMT <VIDIOC_G_FMT>` are undefined. "
"When a bit mask is supported but no clipping is desired this field must be "
"set to ``NULL``."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:238
msgid ""
"Applications need not create a clip list or bit mask. When they pass both, "
"or despite negotiating chroma-keying, the results are undefined. Regardless "
"of the chosen method, the clipping abilities of the hardware may be limited "
"in quantity or quality. The results when these limits are exceeded are "
"undefined. [#f3]_"
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:244
msgid "``__u8 global_alpha``"
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:245
msgid ""
"The global alpha value used to blend the framebuffer with video images, if "
"global alpha blending has been negotiated (``V4L2_FBUF_FLAG_GLOBAL_ALPHA``, "
"see :ref:`VIDIOC_S_FBUF <VIDIOC_G_FBUF>`, :ref:`framebuffer-flags`)."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:253
msgid ""
"This field was added in Linux 2.6.23, extending the structure. However the :"
"ref:`VIDIOC_[G|S|TRY]_FMT <VIDIOC_G_FMT>` ioctls, which take a pointer to a :"
"c:type:`v4l2_format` parent structure with padding bytes at the end, are not "
"affected."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:262
msgid "struct v4l2_clip [#f4]_"
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:264
msgid "``struct v4l2_rect c``"
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:265
msgid ""
"Coordinates of the clipping rectangle, relative to the top, left corner of "
"the frame buffer. Only window pixels *outside* all clipping rectangles are "
"displayed."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:269
msgid "``struct v4l2_clip * next``"
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:270
msgid ""
"Pointer to the next clipping rectangle, ``NULL`` when this is the last "
"rectangle. Drivers ignore this field, it cannot be used to pass a linked "
"list of clipping rectangles."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:278
msgid "struct v4l2_rect"
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:280
msgid "``__s32 left``"
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:281
msgid "Horizontal offset of the top, left corner of the rectangle, in pixels."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:284
msgid "``__s32 top``"
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:285
msgid ""
"Vertical offset of the top, left corner of the rectangle, in pixels. Offsets "
"increase to the right and down."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:288
msgid "``__u32 width``"
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:289
msgid "Width of the rectangle, in pixels."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:291
msgid "``__u32 height``"
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:292
msgid "Height of the rectangle, in pixels."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:296
msgid "Enabling Overlay"
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:298
msgid ""
"To start or stop the frame buffer overlay applications call the :ref:"
"`VIDIOC_OVERLAY` ioctl."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:302
msgid ""
"In the opinion of the designers of this API, no driver writer taking the "
"efforts to support simultaneous capturing and overlay will restrict this "
"ability by requiring a single file descriptor, as in V4L and earlier "
"versions of V4L2. Making this optional means applications depending on two "
"file descriptors need backup routines to be compatible with all drivers, "
"which is considerable more work than using two fds in applications which do "
"not. Also two fd's fit the general concept of one file descriptor for each "
"logical stream. Hence as a complexity trade-off drivers *must* support two "
"file descriptors and *may* support single fd operation."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:314
msgid "Should we require ``w.width`` to be a multiple of eight?"
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:317
msgid ""
"When the image is written into frame buffer memory it will be undesirable if "
"the driver clips out less pixels than expected, because the application and "
"graphics system are not aware these regions need to be refreshed. The driver "
"should clip out more pixels or not write the image at all."
msgstr ""

#: ../../../userspace-api/media/v4l/dev-overlay.rst:324
msgid ""
"The X Window system defines \"regions\" which are vectors of ``struct BoxRec "
"{ short x1, y1, x2, y2; }`` with ``width = x2 - x1`` and ``height = y2 - "
"y1``, so one cannot pass X11 clip lists directly."
msgstr ""
