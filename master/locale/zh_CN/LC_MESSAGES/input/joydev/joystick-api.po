# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../input/joydev/joystick-api.rst:5
msgid "Programming Interface"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:0
msgid "Author"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:7
msgid "Ragnar Hojland Espinosa <ragnar@macula.net> - 7 Aug 1998"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:10
msgid "Introduction"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:13
msgid ""
"This document describes legacy ``js`` interface. Newer clients are "
"encouraged to switch to the generic event (``evdev``) interface."
msgstr ""

#: ../../../input/joydev/joystick-api.rst:16
msgid ""
"The 1.0 driver uses a new, event based approach to the joystick driver. "
"Instead of the user program polling for the joystick values, the joystick "
"driver now reports only any changes of its state. See joystick-api.txt, "
"joystick.h and jstest.c included in the joystick package for more "
"information. The joystick device can be used in either blocking or "
"nonblocking mode, and supports select() calls."
msgstr ""

#: ../../../input/joydev/joystick-api.rst:23
msgid ""
"For backward compatibility the old (v0.x) interface is still included. Any "
"call to the joystick driver using the old interface will return values that "
"are compatible to the old interface. This interface is still limited to 2 "
"axes, and applications using it usually decode only 2 buttons, although the "
"driver provides up to 32."
msgstr ""

#: ../../../input/joydev/joystick-api.rst:30
msgid "Initialization"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:32
msgid ""
"Open the joystick device following the usual semantics (that is, with open). "
"Since the driver now reports events instead of polling for changes, "
"immediately after the open it will issue a series of synthetic events "
"(JS_EVENT_INIT) that you can read to obtain the initial state of the "
"joystick."
msgstr ""

#: ../../../input/joydev/joystick-api.rst:38
msgid "By default, the device is opened in blocking mode::"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:44
msgid "Event Reading"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:51
msgid "where js_event is defined as::"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:60
msgid ""
"If the read is successful, it will return sizeof(e), unless you wanted to "
"read more than one event per read as described in section 3.1."
msgstr ""

#: ../../../input/joydev/joystick-api.rst:65
msgid "js_event.type"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:67
msgid "The possible values of ``type`` are::"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:73
msgid ""
"As mentioned above, the driver will issue synthetic JS_EVENT_INIT ORed "
"events on open. That is, if it's issuing an INIT BUTTON event, the current "
"type value will be::"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:79
msgid ""
"If you choose not to differentiate between synthetic or real events you can "
"turn off the JS_EVENT_INIT bits::"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:86
msgid "js_event.number"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:88
msgid ""
"The values of ``number`` correspond to the axis or button that generated the "
"event. Note that they carry separate numeration (that is, you have both an "
"axis 0 and a button 0). Generally,"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:93
msgid "Axis"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:93
msgid "number"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:95
msgid "1st Axis X"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:95
msgid "0"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:96
msgid "1st Axis Y"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:96
msgid "1"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:97
msgid "2nd Axis X"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:97
msgid "2"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:98
msgid "2nd Axis Y"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:98
msgid "3"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:99
msgid "...and so on"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:102
msgid ""
"Hats vary from one joystick type to another. Some can be moved in 8 "
"directions, some only in 4. The driver, however, always reports a hat as two "
"independent axes, even if the hardware doesn't allow independent movement."
msgstr ""

#: ../../../input/joydev/joystick-api.rst:108
msgid "js_event.value"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:110
msgid ""
"For an axis, ``value`` is a signed integer between -32767 and +32767 "
"representing the position of the joystick along that axis. If you don't read "
"a 0 when the joystick is ``dead``, or if it doesn't span the full range, you "
"should recalibrate it (with, for example, jscal)."
msgstr ""

#: ../../../input/joydev/joystick-api.rst:115
msgid ""
"For a button, ``value`` for a press button event is 1 and for a release "
"button event is 0."
msgstr ""

#: ../../../input/joydev/joystick-api.rst:118
msgid "Though this::"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:124
msgid "may work well if you handle JS_EVENT_INIT events separately,"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:135
msgid ""
"is much safer since it can't lose sync with the driver. As you would have to "
"write a separate handler for JS_EVENT_INIT events in the first snippet, this "
"ends up being shorter."
msgstr ""

#: ../../../input/joydev/joystick-api.rst:141
msgid "js_event.time"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:143
msgid ""
"The time an event was generated is stored in ``js_event.time``. It's a time "
"in milliseconds since ... well, since sometime in the past.  This eases the "
"task of detecting double clicks, figuring out if movement of axis and button "
"presses happened at the same time, and similar."
msgstr ""

#: ../../../input/joydev/joystick-api.rst:150
msgid "Reading"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:152
msgid ""
"If you open the device in blocking mode, a read will block (that is, wait) "
"forever until an event is generated and effectively read. There are two "
"alternatives if you can't afford to wait forever (which is, admittedly, a "
"long time;)"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:157
msgid ""
"use select to wait until there's data to be read on fd, or until it "
"timeouts. There's a good example on the select(2) man page."
msgstr ""

#: ../../../input/joydev/joystick-api.rst:161
msgid "open the device in non-blocking mode (O_NONBLOCK)"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:165
msgid "O_NONBLOCK"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:167
msgid ""
"If read returns -1 when reading in O_NONBLOCK mode, this isn't necessarily a "
"\"real\" error (check errno(3)); it can just mean there are no events "
"pending to be read on the driver queue. You should read all events on the "
"queue (that is, until you get a -1)."
msgstr ""

#: ../../../input/joydev/joystick-api.rst:172
msgid "For example,"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:187
msgid ""
"One reason for emptying the queue is that if it gets full you'll start "
"missing events since the queue is finite, and older events will get "
"overwritten."
msgstr ""

#: ../../../input/joydev/joystick-api.rst:191
msgid ""
"The other reason is that you want to know all that happened, and not delay "
"the processing till later."
msgstr ""

#: ../../../input/joydev/joystick-api.rst:194
msgid ""
"Why can the queue get full? Because you don't empty the queue as mentioned, "
"or because too much time elapses from one read to another and too many "
"events to store in the queue get generated. Note that high system load may "
"contribute to space those reads even more."
msgstr ""

#: ../../../input/joydev/joystick-api.rst:199
msgid ""
"If time between reads is enough to fill the queue and lose an event, the "
"driver will switch to startup mode and next time you read it, synthetic "
"events (JS_EVENT_INIT) will be generated to inform you of the actual state "
"of the joystick."
msgstr ""

#: ../../../input/joydev/joystick-api.rst:207
msgid ""
"As of version 1.2.8, the queue is circular and able to hold 64 events. You "
"can increment this size bumping up JS_BUFF_SIZE in joystick.h and "
"recompiling the driver."
msgstr ""

#: ../../../input/joydev/joystick-api.rst:212
msgid ""
"In the above code, you might as well want to read more than one event at a "
"time using the typical read(2) functionality. For that, you would replace "
"the read above with something like::"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:219
msgid ""
"In this case, read would return -1 if the queue was empty, or some other "
"value in which the number of events read would be i / sizeof(js_event)  "
"Again, if the buffer was full, it's a good idea to process the events and "
"keep reading it until you empty the driver queue."
msgstr ""

#: ../../../input/joydev/joystick-api.rst:226
msgid "IOCTLs"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:228
msgid "The joystick driver defines the following ioctl(2) operations::"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:238
msgid "For example, to read the number of axes::"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:245
msgid "JSIOGCVERSION"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:247
msgid ""
"JSIOGCVERSION is a good way to check in run-time whether the running driver "
"is 1.0+ and supports the event interface. If it is not, the IOCTL will fail. "
"For a compile-time decision, you can test the JS_VERSION symbol::"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:257
msgid "JSIOCGNAME"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:259
msgid ""
"JSIOCGNAME(len) allows you to get the name string of the joystick - the same "
"as is being printed at boot time. The 'len' argument is the length of the "
"buffer provided by the application asking for the name. It is used to avoid "
"possible overrun should the name be too long::"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:271
msgid "JSIOC[SG]CORR"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:273
msgid ""
"For usage on JSIOC[SG]CORR I suggest you to look into jscal.c  They are not "
"needed in a normal program, only in joystick calibration software such as "
"jscal or kcmjoy. These IOCTLs and data types aren't considered to be in the "
"stable part of the API, and therefore may change without warning in "
"following releases of the driver."
msgstr ""

#: ../../../input/joydev/joystick-api.rst:279
msgid ""
"Both JSIOCSCORR and JSIOCGCORR expect &js_corr to be able to hold "
"information for all axes. That is, struct js_corr corr[MAX_AXIS];"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:282
msgid "struct js_corr is defined as::"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:290
msgid "and ``type``::"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:297
msgid "Backward compatibility"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:299
msgid ""
"The 0.x joystick driver API is quite limited and its usage is deprecated. "
"The driver offers backward compatibility, though. Here's a quick summary::"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:310
msgid ""
"As you can figure out from the example, the read returns immediately, with "
"the actual state of the joystick::"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:319
msgid "and JS_RETURN is defined as::"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:323
msgid "To test the state of the buttons,"
msgstr ""

#: ../../../input/joydev/joystick-api.rst:330
msgid ""
"The axis values do not have a defined range in the original 0.x driver, "
"except that the values are non-negative. The 1.2.8+ drivers use a fixed "
"range for reporting the values, 1 being the minimum, 128 the center, and 255 "
"maximum value."
msgstr ""

#: ../../../input/joydev/joystick-api.rst:335
msgid ""
"The v0.8.0.2 driver also had an interface for 'digital joysticks', (now "
"called Multisystem joysticks in this driver), under /dev/djsX. This driver "
"doesn't try to be compatible with that interface."
msgstr ""

#: ../../../input/joydev/joystick-api.rst:341
msgid "Final Notes"
msgstr ""
