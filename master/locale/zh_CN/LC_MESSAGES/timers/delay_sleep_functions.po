# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../timers/delay_sleep_functions.rst:4
msgid "Delay and sleep mechanisms"
msgstr ""

#: ../../../timers/delay_sleep_functions.rst:6
msgid ""
"This document seeks to answer the common question: \"What is the RightWay "
"(TM) to insert a delay?\""
msgstr ""

#: ../../../timers/delay_sleep_functions.rst:9
msgid ""
"This question is most often faced by driver writers who have to deal with "
"hardware delays and who may not be the most intimately familiar with the "
"inner workings of the Linux Kernel."
msgstr ""

#: ../../../timers/delay_sleep_functions.rst:13
msgid ""
"The following table gives a rough overview about the existing function "
"'families' and their limitations. This overview table does not replace the "
"reading of the function description before usage!"
msgstr ""

#: ../../../timers/delay_sleep_functions.rst:22
msgid "`*delay()`"
msgstr ""

#: ../../../timers/delay_sleep_functions.rst:23
#: ../../../timers/delay_sleep_functions.rst:105
msgid "`usleep_range*()`"
msgstr ""

#: ../../../timers/delay_sleep_functions.rst:24
#: ../../../timers/delay_sleep_functions.rst:115
msgid "`*sleep()`"
msgstr ""

#: ../../../timers/delay_sleep_functions.rst:25
msgid "`fsleep()`"
msgstr ""

#: ../../../timers/delay_sleep_functions.rst:27
msgid "busy-wait loop"
msgstr ""

#: ../../../timers/delay_sleep_functions.rst:28
msgid "hrtimers based"
msgstr ""

#: ../../../timers/delay_sleep_functions.rst:29
msgid "timer list timers based"
msgstr ""

#: ../../../timers/delay_sleep_functions.rst:30
msgid "combines the others"
msgstr ""

#: ../../../timers/delay_sleep_functions.rst:31
msgid "Usage in atomic Context"
msgstr ""

#: ../../../timers/delay_sleep_functions.rst:32
#: ../../../timers/delay_sleep_functions.rst:37
#: ../../../timers/delay_sleep_functions.rst:38
#: ../../../timers/delay_sleep_functions.rst:40
#: ../../../timers/delay_sleep_functions.rst:43
#: ../../../timers/delay_sleep_functions.rst:45
#: ../../../timers/delay_sleep_functions.rst:48
#: ../../../timers/delay_sleep_functions.rst:49
msgid "yes"
msgstr ""

#: ../../../timers/delay_sleep_functions.rst:33
#: ../../../timers/delay_sleep_functions.rst:34
#: ../../../timers/delay_sleep_functions.rst:35
#: ../../../timers/delay_sleep_functions.rst:47
#: ../../../timers/delay_sleep_functions.rst:50
msgid "no"
msgstr ""

#: ../../../timers/delay_sleep_functions.rst:36
msgid "precise on \"short intervals\""
msgstr ""

#: ../../../timers/delay_sleep_functions.rst:39
msgid "depends"
msgstr ""

#: ../../../timers/delay_sleep_functions.rst:41
msgid "precise on \"long intervals\""
msgstr ""

#: ../../../timers/delay_sleep_functions.rst:42
msgid "Do not use!"
msgstr ""

#: ../../../timers/delay_sleep_functions.rst:44
msgid "max 12.5% slack"
msgstr ""

#: ../../../timers/delay_sleep_functions.rst:46
msgid "interruptible variant"
msgstr ""

#: ../../../timers/delay_sleep_functions.rst:52
msgid "A generic advice for non atomic contexts could be:"
msgstr ""

#: ../../../timers/delay_sleep_functions.rst:54
#: ../../../timers/delay_sleep_functions.rst:95
msgid ""
"Use `fsleep()` whenever unsure (as it combines all the advantages of the "
"others)"
msgstr ""

#: ../../../timers/delay_sleep_functions.rst:56
#: ../../../timers/delay_sleep_functions.rst:97
msgid "Use `*sleep()` whenever possible"
msgstr ""

#: ../../../timers/delay_sleep_functions.rst:57
#: ../../../timers/delay_sleep_functions.rst:98
msgid "Use `usleep_range*()` whenever accuracy of `*sleep()` is not sufficient"
msgstr ""

#: ../../../timers/delay_sleep_functions.rst:58
msgid "Use `*delay()` for very, very short delays"
msgstr ""

#: ../../../timers/delay_sleep_functions.rst:60
msgid ""
"Find some more detailed information about the function 'families' in the "
"next sections."
msgstr ""

#: ../../../timers/delay_sleep_functions.rst:64
msgid "`*delay()` family of functions"
msgstr ""

#: ../../../timers/delay_sleep_functions.rst:66
msgid ""
"These functions use the jiffy estimation of clock speed and will busy wait "
"for enough loop cycles to achieve the desired delay. udelay() is the basic "
"implementation and ndelay() as well as mdelay() are variants."
msgstr ""

#: ../../../timers/delay_sleep_functions.rst:70
msgid ""
"These functions are mainly used to add a delay in atomic context. Please "
"make sure to ask yourself before adding a delay in atomic context: Is this "
"really required?"
msgstr ""

#: ../../../timers/delay_sleep_functions:74: include/asm-generic/delay.h:32
msgid "Inserting a delay based on microseconds with busy waiting"
msgstr ""

#: ../../../timers/delay_sleep_functions:107: include/linux/delay.h:71
#: include/linux/delay.h:85 ../../../timers/delay_sleep_functions:110:
#: kernel/time/sleep_timeout.c:349 ../../../timers/delay_sleep_functions:117:
#: kernel/time/sleep_timeout.c:287 kernel/time/sleep_timeout.c:327
#: ../../../timers/delay_sleep_functions:120: include/linux/delay.h:100
#: include/linux/delay.h:114 ../../../timers/delay_sleep_functions:74:
#: include/asm-generic/delay.h:36 include/asm-generic/delay.h:73
#: ../../../timers/delay_sleep_functions:77: include/linux/delay.h:39
msgid "**Parameters**"
msgstr ""

#: ../../../timers/delay_sleep_functions:74: include/asm-generic/delay.h:38
msgid "``unsigned long usec``"
msgstr ""

#: ../../../timers/delay_sleep_functions:74: include/asm-generic/delay.h:33
msgid "requested delay in microseconds"
msgstr ""

#: ../../../timers/delay_sleep_functions:107: include/linux/delay.h:71
#: include/linux/delay.h:85 ../../../timers/delay_sleep_functions:110:
#: kernel/time/sleep_timeout.c:350 ../../../timers/delay_sleep_functions:117:
#: kernel/time/sleep_timeout.c:286 kernel/time/sleep_timeout.c:326
#: ../../../timers/delay_sleep_functions:120: include/linux/delay.h:99
#: include/linux/delay.h:113 ../../../timers/delay_sleep_functions:74:
#: include/asm-generic/delay.h:35 include/asm-generic/delay.h:72
#: ../../../timers/delay_sleep_functions:77: include/linux/delay.h:38
msgid "**Description**"
msgstr ""

#: ../../../timers/delay_sleep_functions:74: include/asm-generic/delay.h:34
msgid ""
"When delaying in an atomic context ndelay(), udelay() and mdelay() are the "
"only valid variants of delaying/sleeping to go with."
msgstr ""

#: ../../../timers/delay_sleep_functions:74: include/asm-generic/delay.h:37
msgid ""
"When inserting delays in non atomic context which are shorter than the time "
"which is required to queue e.g. an hrtimer and to enter then the scheduler, "
"it is also valuable to use udelay(). But it is not simple to specify a "
"generic threshold for this which will fit for all systems. An approximation "
"is a threshold for all delays up to 10 microseconds."
msgstr ""

#: ../../../timers/delay_sleep_functions:74: include/asm-generic/delay.h:43
msgid ""
"When having a delay which is larger than the architecture specific "
"``MAX_UDELAY_MS`` value, please make sure mdelay() is used. Otherwise a "
"overflow risk is given."
msgstr ""

#: ../../../timers/delay_sleep_functions:74: include/asm-generic/delay.h:47
msgid ""
"Please note that ndelay(), udelay() and mdelay() may return early for "
"several reasons (https://lists.openwall.net/linux-kernel/2011/01/09/56):"
msgstr ""

#: ../../../timers/delay_sleep_functions:74: include/asm-generic/delay.h:50
msgid ""
"computed loops_per_jiffy too low (due to the time taken to execute the timer "
"interrupt.)"
msgstr ""

#: ../../../timers/delay_sleep_functions:74: include/asm-generic/delay.h:52
msgid ""
"cache behaviour affecting the time it takes to execute the loop function."
msgstr ""

#: ../../../timers/delay_sleep_functions:74: include/asm-generic/delay.h:53
msgid "CPU clock rate changes."
msgstr ""

#: ../../../timers/delay_sleep_functions:74: include/asm-generic/delay.h:69
msgid "Inserting a delay based on nanoseconds with busy waiting"
msgstr ""

#: ../../../timers/delay_sleep_functions:74: include/asm-generic/delay.h:75
msgid "``unsigned long nsec``"
msgstr ""

#: ../../../timers/delay_sleep_functions:74: include/asm-generic/delay.h:70
msgid "requested delay in nanoseconds"
msgstr ""

#: ../../../timers/delay_sleep_functions:74: include/asm-generic/delay.h:71
msgid "See udelay() for basic information about ndelay() and it's variants."
msgstr ""

#: ../../../timers/delay_sleep_functions:77: include/linux/delay.h:37
msgid "``mdelay (n)``"
msgstr ""

#: ../../../timers/delay_sleep_functions:77: include/linux/delay.h:35
msgid "Inserting a delay based on milliseconds with busy waiting"
msgstr ""

#: ../../../timers/delay_sleep_functions:77: include/linux/delay.h:41
msgid "``n``"
msgstr ""

#: ../../../timers/delay_sleep_functions:77: include/linux/delay.h:36
msgid "requested delay in milliseconds"
msgstr ""

#: ../../../timers/delay_sleep_functions:77: include/linux/delay.h:37
msgid "See udelay() for basic information about mdelay() and it's variants."
msgstr ""

#: ../../../timers/delay_sleep_functions:77: include/linux/delay.h:39
msgid ""
"Please double check, whether mdelay() is the right way to go or whether a "
"refactoring of the code is the better variant to be able to use msleep() "
"instead."
msgstr ""

#: ../../../timers/delay_sleep_functions.rst:82
msgid "`usleep_range*()` and `*sleep()` family of functions"
msgstr ""

#: ../../../timers/delay_sleep_functions.rst:84
msgid ""
"These functions use hrtimers or timer list timers to provide the requested "
"sleeping duration. In order to decide which function is the right one to "
"use, take some basic information into account:"
msgstr ""

#: ../../../timers/delay_sleep_functions.rst:88
msgid ""
"hrtimers are more expensive as they are using an rb-tree (instead of hashing)"
msgstr ""

#: ../../../timers/delay_sleep_functions.rst:89
msgid ""
"hrtimers are more expensive when the requested sleeping duration is the "
"first timer which means real hardware has to be programmed"
msgstr ""

#: ../../../timers/delay_sleep_functions.rst:91
msgid ""
"timer list timers always provide some sort of slack as they are jiffy based"
msgstr ""

#: ../../../timers/delay_sleep_functions.rst:93
msgid "The generic advice is repeated here:"
msgstr ""

#: ../../../timers/delay_sleep_functions.rst:100
msgid ""
"First check fsleep() function description and to learn more about accuracy, "
"please check msleep() function description."
msgstr ""

#: ../../../timers/delay_sleep_functions:107: include/linux/delay.h:67
msgid "Sleep for an approximate time"
msgstr ""

#: ../../../timers/delay_sleep_functions:107: include/linux/delay.h:73
#: include/linux/delay.h:87 ../../../timers/delay_sleep_functions:110:
#: kernel/time/sleep_timeout.c:351
msgid "``unsigned long min``"
msgstr ""

#: ../../../timers/delay_sleep_functions:107: include/linux/delay.h:68
#: include/linux/delay.h:82
msgid "Minimum time in microseconds to sleep"
msgstr ""

#: ../../../timers/delay_sleep_functions:107: include/linux/delay.h:70
#: include/linux/delay.h:84 ../../../timers/delay_sleep_functions:110:
#: kernel/time/sleep_timeout.c:348
msgid "``unsigned long max``"
msgstr ""

#: ../../../timers/delay_sleep_functions:107: include/linux/delay.h:69
#: include/linux/delay.h:83
msgid "Maximum time in microseconds to sleep"
msgstr ""

#: ../../../timers/delay_sleep_functions:107: include/linux/delay.h:70
#: include/linux/delay.h:84
msgid "For basic information please refere to usleep_range_state()."
msgstr ""

#: ../../../timers/delay_sleep_functions:107: include/linux/delay.h:72
msgid "The task will be in the state TASK_UNINTERRUPTIBLE during the sleep."
msgstr ""

#: ../../../timers/delay_sleep_functions:107: include/linux/delay.h:81
msgid "Sleep for an approximate time with idle time accounting"
msgstr ""

#: ../../../timers/delay_sleep_functions:107: include/linux/delay.h:86
msgid ""
"The sleeping task has the state TASK_IDLE during the sleep to prevent "
"contribution to the load avarage."
msgstr ""

#: ../../../timers/delay_sleep_functions:110: kernel/time/sleep_timeout.c:345
msgid "Sleep for an approximate time in a given state"
msgstr ""

#: ../../../timers/delay_sleep_functions:110: kernel/time/sleep_timeout.c:346
msgid "Minimum time in usecs to sleep"
msgstr ""

#: ../../../timers/delay_sleep_functions:110: kernel/time/sleep_timeout.c:347
msgid "Maximum time in usecs to sleep"
msgstr ""

#: ../../../timers/delay_sleep_functions:110: kernel/time/sleep_timeout.c:349
msgid "``unsigned int state``"
msgstr ""

#: ../../../timers/delay_sleep_functions:110: kernel/time/sleep_timeout.c:348
msgid "State of the current task that will be while sleeping"
msgstr ""

#: ../../../timers/delay_sleep_functions:110: kernel/time/sleep_timeout.c:349
msgid ""
"usleep_range_state() sleeps at least for the minimum specified time but not "
"longer than the maximum specified amount of time. The range might reduce "
"power usage by allowing hrtimers to coalesce an already scheduled interrupt "
"with this hrtimer. In the worst case, an interrupt is scheduled for the "
"upper bound."
msgstr ""

#: ../../../timers/delay_sleep_functions:110: kernel/time/sleep_timeout.c:355
msgid ""
"The sleeping task is set to the specified state before starting the sleep."
msgstr ""

#: ../../../timers/delay_sleep_functions:110: kernel/time/sleep_timeout.c:357
msgid ""
"In non-atomic context where the exact wakeup time is flexible, use "
"usleep_range() or its variants instead of udelay(). The sleep improves "
"responsiveness by avoiding the CPU-hogging busy-wait of udelay()."
msgstr ""

#: ../../../timers/delay_sleep_functions:117: kernel/time/sleep_timeout.c:283
msgid "sleep safely even with waitqueue interruptions"
msgstr ""

#: ../../../timers/delay_sleep_functions:117: kernel/time/sleep_timeout.c:289
#: kernel/time/sleep_timeout.c:329
msgid "``unsigned int msecs``"
msgstr ""

#: ../../../timers/delay_sleep_functions:117: kernel/time/sleep_timeout.c:284
#: kernel/time/sleep_timeout.c:324
msgid "Requested sleep duration in milliseconds"
msgstr ""

#: ../../../timers/delay_sleep_functions:117: kernel/time/sleep_timeout.c:285
msgid ""
"msleep() uses jiffy based timeouts for the sleep duration. Because of the "
"design of the timer wheel, the maximum additional percentage delay (slack) "
"is 12.5%. This is only valid for timers which will end up in level 1 or a "
"higher level of the timer wheel. For explanation of those 12.5% please check "
"the detailed description about the basics of the timer wheel."
msgstr ""

#: ../../../timers/delay_sleep_functions:117: kernel/time/sleep_timeout.c:291
msgid ""
"The slack of timers which will end up in level 0 depends on sleep duration "
"(msecs) and HZ configuration and can be calculated in the following way "
"(with the timer wheel design restriction that the slack is not less than "
"12.5%):"
msgstr ""

#: ../../../timers/delay_sleep_functions:117: kernel/time/sleep_timeout.c:295
msgid "``slack = MSECS_PER_TICK / msecs``"
msgstr ""

#: ../../../timers/delay_sleep_functions:117: kernel/time/sleep_timeout.c:297
msgid ""
"When the allowed slack of the callsite is known, the calculation could be "
"turned around to find the minimal allowed sleep duration to meet the "
"constraints. For example:"
msgstr ""

#: ../../../timers/delay_sleep_functions:117: kernel/time/sleep_timeout.c:301
msgid ""
"``HZ=1000`` with ``slack=25%``: ``MSECS_PER_TICK / slack = 1 / (1/4) = 4``: "
"all sleep durations greater or equal 4ms will meet the constraints."
msgstr ""

#: ../../../timers/delay_sleep_functions:117: kernel/time/sleep_timeout.c:303
msgid ""
"``HZ=1000`` with ``slack=12.5%``: ``MSECS_PER_TICK / slack = 1 / (1/8) = "
"8``: all sleep durations greater or equal 8ms will meet the constraints."
msgstr ""

#: ../../../timers/delay_sleep_functions:117: kernel/time/sleep_timeout.c:305
msgid ""
"``HZ=250`` with ``slack=25%``: ``MSECS_PER_TICK / slack = 4 / (1/4) = 16``: "
"all sleep durations greater or equal 16ms will meet the constraints."
msgstr ""

#: ../../../timers/delay_sleep_functions:117: kernel/time/sleep_timeout.c:307
msgid ""
"``HZ=250`` with ``slack=12.5%``: ``MSECS_PER_TICK / slack = 4 / (1/8) = "
"32``: all sleep durations greater or equal 32ms will meet the constraints."
msgstr ""

#: ../../../timers/delay_sleep_functions:117: kernel/time/sleep_timeout.c:310
msgid "See also the signal aware variant msleep_interruptible()."
msgstr ""

#: ../../../timers/delay_sleep_functions:117: kernel/time/sleep_timeout.c:323
msgid "sleep waiting for signals"
msgstr ""

#: ../../../timers/delay_sleep_functions:117: kernel/time/sleep_timeout.c:325
msgid "See msleep() for some basic information."
msgstr ""

#: ../../../timers/delay_sleep_functions:117: kernel/time/sleep_timeout.c:327
msgid ""
"The difference between msleep() and msleep_interruptible() is that the sleep "
"could be interrupted by a signal delivery and then returns early."
msgstr ""

#: ../../../timers/delay_sleep_functions:117: kernel/time/sleep_timeout.c:330
msgid "**Return**"
msgstr ""

#: ../../../timers/delay_sleep_functions:117: kernel/time/sleep_timeout.c:331
msgid ""
"The remaining time of the sleep duration transformed to msecs (see "
"schedule_timeout() for details)."
msgstr ""

#: ../../../timers/delay_sleep_functions:120: include/linux/delay.h:96
msgid "wrapper for seconds around msleep"
msgstr ""

#: ../../../timers/delay_sleep_functions:120: include/linux/delay.h:102
msgid "``unsigned int seconds``"
msgstr ""

#: ../../../timers/delay_sleep_functions:120: include/linux/delay.h:97
msgid "Requested sleep duration in seconds"
msgstr ""

#: ../../../timers/delay_sleep_functions:120: include/linux/delay.h:98
msgid "Please refere to msleep() for detailed information."
msgstr ""

#: ../../../timers/delay_sleep_functions:120: include/linux/delay.h:110
msgid "flexible sleep which autoselects the best mechanism"
msgstr ""

#: ../../../timers/delay_sleep_functions:120: include/linux/delay.h:116
msgid "``unsigned long usecs``"
msgstr ""

#: ../../../timers/delay_sleep_functions:120: include/linux/delay.h:111
msgid "requested sleep duration in microseconds"
msgstr ""

#: ../../../timers/delay_sleep_functions:120: include/linux/delay.h:112
msgid ""
"flseep() selects the best mechanism that will provide maximum 25% slack to "
"the requested sleep duration. Therefore it uses:"
msgstr ""

#: ../../../timers/delay_sleep_functions:120: include/linux/delay.h:115
msgid ""
"udelay() loop for sleep durations <= 10 microseconds to avoid hrtimer "
"overhead for really short sleep durations."
msgstr ""

#: ../../../timers/delay_sleep_functions:120: include/linux/delay.h:117
msgid ""
"usleep_range() for sleep durations which would lead with the usage of "
"msleep() to a slack larger than 25%. This depends on the granularity of "
"jiffies."
msgstr ""

#: ../../../timers/delay_sleep_functions:120: include/linux/delay.h:120
msgid "msleep() for all other sleep durations."
msgstr ""

#: ../../../timers/delay_sleep_functions:120: include/linux/delay.h:122
msgid "**Note**"
msgstr ""

#: ../../../timers/delay_sleep_functions:120: include/linux/delay.h:123
msgid ""
"When ``CONFIG_HIGH_RES_TIMERS`` is not set, all sleeps are processed with "
"the granularity of jiffies and the slack might exceed 25% especially for "
"short sleep durations."
msgstr ""
