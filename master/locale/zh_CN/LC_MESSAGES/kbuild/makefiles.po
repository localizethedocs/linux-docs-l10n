# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../kbuild/makefiles.rst:3
msgid "Linux Kernel Makefiles"
msgstr ""

#: ../../../kbuild/makefiles.rst:5
msgid "This document describes the Linux kernel Makefiles."
msgstr ""

#: ../../../kbuild/makefiles.rst:8
msgid "Overview"
msgstr ""

#: ../../../kbuild/makefiles.rst:10
msgid "The Makefiles have five parts::"
msgstr ""

#: ../../../kbuild/makefiles.rst:18
msgid ""
"The top Makefile reads the .config file, which comes from the kernel "
"configuration process."
msgstr ""

#: ../../../kbuild/makefiles.rst:21
msgid ""
"The top Makefile is responsible for building two major products: vmlinux "
"(the resident kernel image) and modules (any module files). It builds these "
"goals by recursively descending into the subdirectories of the kernel source "
"tree."
msgstr ""

#: ../../../kbuild/makefiles.rst:26
msgid ""
"The list of subdirectories which are visited depends upon the kernel "
"configuration. The top Makefile textually includes an arch Makefile with the "
"name arch/$(SRCARCH)/Makefile. The arch Makefile supplies architecture-"
"specific information to the top Makefile."
msgstr ""

#: ../../../kbuild/makefiles.rst:31
msgid ""
"Each subdirectory has a kbuild Makefile which carries out the commands "
"passed down from above. The kbuild Makefile uses information from the ."
"config file to construct various file lists used by kbuild to build any "
"built-in or modular targets."
msgstr ""

#: ../../../kbuild/makefiles.rst:36
msgid ""
"scripts/Makefile.* contains all the definitions/rules etc. that are used to "
"build the kernel based on the kbuild makefiles."
msgstr ""

#: ../../../kbuild/makefiles.rst:40
msgid "Who does what"
msgstr ""

#: ../../../kbuild/makefiles.rst:42
msgid "People have four different relationships with the kernel Makefiles."
msgstr ""

#: ../../../kbuild/makefiles.rst:44
msgid ""
"*Users* are people who build kernels.  These people type commands such as "
"``make menuconfig`` or ``make``.  They usually do not read or edit any "
"kernel Makefiles (or any other source files)."
msgstr ""

#: ../../../kbuild/makefiles.rst:48
msgid ""
"*Normal developers* are people who work on features such as device drivers, "
"file systems, and network protocols.  These people need to maintain the "
"kbuild Makefiles for the subsystem they are working on.  In order to do this "
"effectively, they need some overall knowledge about the kernel Makefiles, "
"plus detailed knowledge about the public interface for kbuild."
msgstr ""

#: ../../../kbuild/makefiles.rst:55
msgid ""
"*Arch developers* are people who work on an entire architecture, such as "
"sparc or x86.  Arch developers need to know about the arch Makefile as well "
"as kbuild Makefiles."
msgstr ""

#: ../../../kbuild/makefiles.rst:59
msgid ""
"*Kbuild developers* are people who work on the kernel build system itself. "
"These people need to know about all aspects of the kernel Makefiles."
msgstr ""

#: ../../../kbuild/makefiles.rst:62
msgid "This document is aimed towards normal developers and arch developers."
msgstr ""

#: ../../../kbuild/makefiles.rst:66
msgid "The kbuild files"
msgstr ""

#: ../../../kbuild/makefiles.rst:68
msgid ""
"Most Makefiles within the kernel are kbuild Makefiles that use the kbuild "
"infrastructure. This chapter introduces the syntax used in the kbuild "
"makefiles."
msgstr ""

#: ../../../kbuild/makefiles.rst:72
msgid ""
"The preferred name for the kbuild files are ``Makefile`` but ``Kbuild`` can "
"be used and if both a ``Makefile`` and a ``Kbuild`` file exists, then the "
"``Kbuild`` file will be used."
msgstr ""

#: ../../../kbuild/makefiles.rst:76
msgid ""
"Section `Goal definitions`_ is a quick intro; further chapters provide more "
"details, with real examples."
msgstr ""

#: ../../../kbuild/makefiles.rst:80
msgid "Goal definitions"
msgstr ""

#: ../../../kbuild/makefiles.rst:82
msgid ""
"Goal definitions are the main part (heart) of the kbuild Makefile. These "
"lines define the files to be built, any special compilation options, and any "
"subdirectories to be entered recursively."
msgstr ""

#: ../../../kbuild/makefiles.rst:86
msgid "The most simple kbuild makefile contains one line:"
msgstr ""

#: ../../../kbuild/makefiles.rst:88 ../../../kbuild/makefiles.rst:98
#: ../../../kbuild/makefiles.rst:128 ../../../kbuild/makefiles.rst:146
#: ../../../kbuild/makefiles.rst:159 ../../../kbuild/makefiles.rst:173
#: ../../../kbuild/makefiles.rst:209 ../../../kbuild/makefiles.rst:235
#: ../../../kbuild/makefiles.rst:289 ../../../kbuild/makefiles.rst:312
#: ../../../kbuild/makefiles.rst:328 ../../../kbuild/makefiles.rst:340
#: ../../../kbuild/makefiles.rst:347 ../../../kbuild/makefiles.rst:359
#: ../../../kbuild/makefiles.rst:367 ../../../kbuild/makefiles.rst:381
#: ../../../kbuild/makefiles.rst:394 ../../../kbuild/makefiles.rst:439
#: ../../../kbuild/makefiles.rst:474 ../../../kbuild/makefiles.rst:489
#: ../../../kbuild/makefiles.rst:564 ../../../kbuild/makefiles.rst:584
#: ../../../kbuild/makefiles.rst:599 ../../../kbuild/makefiles.rst:619
#: ../../../kbuild/makefiles.rst:630 ../../../kbuild/makefiles.rst:641
#: ../../../kbuild/makefiles.rst:665 ../../../kbuild/makefiles.rst:681
#: ../../../kbuild/makefiles.rst:698 ../../../kbuild/makefiles.rst:717
#: ../../../kbuild/makefiles.rst:748 ../../../kbuild/makefiles.rst:765
#: ../../../kbuild/makefiles.rst:785 ../../../kbuild/makefiles.rst:797
#: ../../../kbuild/makefiles.rst:812 ../../../kbuild/makefiles.rst:831
#: ../../../kbuild/makefiles.rst:839 ../../../kbuild/makefiles.rst:846
#: ../../../kbuild/makefiles.rst:864 ../../../kbuild/makefiles.rst:881
#: ../../../kbuild/makefiles.rst:910 ../../../kbuild/makefiles.rst:927
#: ../../../kbuild/makefiles.rst:950 ../../../kbuild/makefiles.rst:958
#: ../../../kbuild/makefiles.rst:964 ../../../kbuild/makefiles.rst:985
#: ../../../kbuild/makefiles.rst:995 ../../../kbuild/makefiles.rst:1021
#: ../../../kbuild/makefiles.rst:1037 ../../../kbuild/makefiles.rst:1099
#: ../../../kbuild/makefiles.rst:1115 ../../../kbuild/makefiles.rst:1129
#: ../../../kbuild/makefiles.rst:1148 ../../../kbuild/makefiles.rst:1162
#: ../../../kbuild/makefiles.rst:1280 ../../../kbuild/makefiles.rst:1313
#: ../../../kbuild/makefiles.rst:1342 ../../../kbuild/makefiles.rst:1356
#: ../../../kbuild/makefiles.rst:1373 ../../../kbuild/makefiles.rst:1389
#: ../../../kbuild/makefiles.rst:1426 ../../../kbuild/makefiles.rst:1444
#: ../../../kbuild/makefiles.rst:1460 ../../../kbuild/makefiles.rst:1545
#: ../../../kbuild/makefiles.rst:1577
msgid "Example::"
msgstr ""

#: ../../../kbuild/makefiles.rst:92
msgid ""
"This tells kbuild that there is one object in that directory, named foo.o. "
"foo.o will be built from foo.c or foo.S."
msgstr ""

#: ../../../kbuild/makefiles.rst:95
msgid ""
"If foo.o shall be built as a module, the variable obj-m is used. Therefore "
"the following pattern is often used:"
msgstr ""

#: ../../../kbuild/makefiles.rst:102
msgid ""
"$(CONFIG_FOO) evaluates to either y (for built-in) or m (for module). If "
"CONFIG_FOO is neither y nor m, then the file will not be compiled nor linked."
msgstr ""

#: ../../../kbuild/makefiles.rst:107
msgid "Built-in object goals - obj-y"
msgstr ""

#: ../../../kbuild/makefiles.rst:109
msgid ""
"The kbuild Makefile specifies object files for vmlinux in the $(obj-y) "
"lists.  These lists depend on the kernel configuration."
msgstr ""

#: ../../../kbuild/makefiles.rst:113
msgid ""
"Kbuild compiles all the $(obj-y) files.  It then calls ``$(AR) rcSTP`` to "
"merge these files into one built-in.a file. This is a thin archive without a "
"symbol table. It will be later linked into vmlinux by scripts/link-vmlinux.sh"
msgstr ""

#: ../../../kbuild/makefiles.rst:118
msgid ""
"The order of files in $(obj-y) is significant.  Duplicates in the lists are "
"allowed: the first instance will be linked into built-in.a and succeeding "
"instances will be ignored."
msgstr ""

#: ../../../kbuild/makefiles.rst:122
msgid ""
"Link order is significant, because certain functions (module_init() / "
"__initcall) will be called during boot in the order they appear. So keep in "
"mind that changing the link order may e.g. change the order in which your "
"SCSI controllers are detected, and thus your disks are renumbered."
msgstr ""

#: ../../../kbuild/makefiles.rst:137
msgid "Loadable module goals - obj-m"
msgstr ""

#: ../../../kbuild/makefiles.rst:139
msgid ""
"$(obj-m) specifies object files which are built as loadable kernel modules."
msgstr ""

#: ../../../kbuild/makefiles.rst:142
msgid ""
"A module may be built from one source file or several source files. In the "
"case of one source file, the kbuild makefile simply adds the file to $(obj-"
"m)."
msgstr ""

#: ../../../kbuild/makefiles.rst:151
msgid "Note: In this example $(CONFIG_ISDN_PPP_BSDCOMP) evaluates to \"m\""
msgstr ""

#: ../../../kbuild/makefiles.rst:153
msgid ""
"If a kernel module is built from several source files, you specify that you "
"want to build a module in the same way as above; however, kbuild needs to "
"know which object files you want to build your module from, so you have to "
"tell it by setting a $(<module_name>-y) variable."
msgstr ""

#: ../../../kbuild/makefiles.rst:165
msgid ""
"In this example, the module name will be isdn.o. Kbuild will compile the "
"objects listed in $(isdn-y) and then run ``$(LD) -r`` on the list of these "
"files to generate isdn.o."
msgstr ""

#: ../../../kbuild/makefiles.rst:169
msgid ""
"Due to kbuild recognizing $(<module_name>-y) for composite objects, you can "
"use the value of a ``CONFIG_`` symbol to optionally include an object file "
"as part of a composite object."
msgstr ""

#: ../../../kbuild/makefiles.rst:182
msgid ""
"In this example, xattr.o, xattr_user.o and xattr_trusted.o are only part of "
"the composite object ext2.o if $(CONFIG_EXT2_FS_XATTR) evaluates to \"y\"."
msgstr ""

#: ../../../kbuild/makefiles.rst:186
msgid ""
"Note: Of course, when you are building objects into the kernel, the syntax "
"above will also work. So, if you have CONFIG_EXT2_FS=y, kbuild will build an "
"ext2.o file for you out of the individual parts and then link this into "
"built-in.a, as you would expect."
msgstr ""

#: ../../../kbuild/makefiles.rst:192
msgid "Library file goals - lib-y"
msgstr ""

#: ../../../kbuild/makefiles.rst:194
msgid ""
"Objects listed with obj-* are used for modules, or combined in a built-in.a "
"for that specific directory. There is also the possibility to list objects "
"that will be included in a library, lib.a. All objects listed with lib-y are "
"combined in a single library for that directory. Objects that are listed in "
"obj-y and additionally listed in lib-y will not be included in the library, "
"since they will be accessible anyway. For consistency, objects listed in lib-"
"m will be included in lib.a."
msgstr ""

#: ../../../kbuild/makefiles.rst:205
msgid ""
"Note that the same kbuild makefile may list files to be built-in and to be "
"part of a library. Therefore the same directory may contain both a built-in."
"a and a lib.a file."
msgstr ""

#: ../../../kbuild/makefiles.rst:214
msgid ""
"This will create a library lib.a based on delay.o. For kbuild to actually "
"recognize that there is a lib.a being built, the directory shall be listed "
"in libs-y."
msgstr ""

#: ../../../kbuild/makefiles.rst:218
msgid "See also `List directories to visit when descending`_."
msgstr ""

#: ../../../kbuild/makefiles.rst:220
msgid "Use of lib-y is normally restricted to ``lib/`` and ``arch/*/lib``."
msgstr ""

#: ../../../kbuild/makefiles.rst:223
msgid "Descending down in directories"
msgstr ""

#: ../../../kbuild/makefiles.rst:225
msgid ""
"A Makefile is only responsible for building objects in its own directory. "
"Files in subdirectories should be taken care of by Makefiles in these "
"subdirs. The build system will automatically invoke make recursively in "
"subdirectories, provided you let it know of them."
msgstr ""

#: ../../../kbuild/makefiles.rst:231
msgid ""
"To do so, obj-y and obj-m are used. ext2 lives in a separate directory, and "
"the Makefile present in fs/ tells kbuild to descend down using the following "
"assignment."
msgstr ""

#: ../../../kbuild/makefiles.rst:240
msgid ""
"If CONFIG_EXT2_FS is set to either \"y\" (built-in) or \"m\" (modular) the "
"corresponding obj- variable will be set, and kbuild will descend down in the "
"ext2 directory."
msgstr ""

#: ../../../kbuild/makefiles.rst:244
msgid ""
"Kbuild uses this information not only to decide that it needs to visit the "
"directory, but also to decide whether or not to link objects from the "
"directory into vmlinux."
msgstr ""

#: ../../../kbuild/makefiles.rst:248
msgid ""
"When Kbuild descends into the directory with \"y\", all built-in objects "
"from that directory are combined into the built-in.a, which will be "
"eventually linked into vmlinux."
msgstr ""

#: ../../../kbuild/makefiles.rst:252
msgid ""
"When Kbuild descends into the directory with \"m\", in contrast, nothing "
"from that directory will be linked into vmlinux. If the Makefile in that "
"directory specifies obj-y, those objects will be left orphan. It is very "
"likely a bug of the Makefile or of dependencies in Kconfig."
msgstr ""

#: ../../../kbuild/makefiles.rst:257
msgid ""
"Kbuild also supports dedicated syntax, subdir-y and subdir-m, for descending "
"into subdirectories. It is a good fit when you know they do not contain "
"kernel-space objects at all. A typical usage is to let Kbuild descend into "
"subdirectories to build tools."
msgstr ""

#: ../../../kbuild/makefiles.rst:262
msgid "Examples::"
msgstr ""

#: ../../../kbuild/makefiles.rst:269
msgid ""
"Unlike obj-y/m, subdir-y/m does not need the trailing slash since this "
"syntax is always used for directories."
msgstr ""

#: ../../../kbuild/makefiles.rst:272
msgid ""
"It is good practice to use a ``CONFIG_`` variable when assigning directory "
"names. This allows kbuild to totally skip the directory if the corresponding "
"``CONFIG_`` option is neither \"y\" nor \"m\"."
msgstr ""

#: ../../../kbuild/makefiles.rst:277
msgid "Non-builtin vmlinux targets - extra-y"
msgstr ""

#: ../../../kbuild/makefiles.rst:279
msgid ""
"extra-y specifies targets which are needed for building vmlinux, but not "
"combined into built-in.a."
msgstr ""

#: ../../../kbuild/makefiles.rst:282
msgid "Examples are:"
msgstr ""

#: ../../../kbuild/makefiles.rst:284
msgid "vmlinux linker script"
msgstr ""

#: ../../../kbuild/makefiles.rst:286
msgid ""
"The linker script for vmlinux is located at arch/$(SRCARCH)/kernel/vmlinux."
"lds"
msgstr ""

#: ../../../kbuild/makefiles.rst:294
msgid "extra-y is now deprecated because this is equivalent to:"
msgstr ""

#: ../../../kbuild/makefiles.rst:296
msgid "always-$(KBUILD_BUILTIN) += vmlinux.lds"
msgstr ""

#: ../../../kbuild/makefiles.rst:298
msgid "$(extra-y) should only contain targets needed for vmlinux."
msgstr ""

#: ../../../kbuild/makefiles.rst:300
msgid ""
"Kbuild skips extra-y when vmlinux is apparently not a final goal. (e.g. "
"``make modules``, or building external modules)"
msgstr ""

#: ../../../kbuild/makefiles.rst:303
msgid ""
"If you intend to build targets unconditionally, always-y (explained in the "
"next section) is the correct syntax to use."
msgstr ""

#: ../../../kbuild/makefiles.rst:307
msgid "Always built goals - always-y"
msgstr ""

#: ../../../kbuild/makefiles.rst:309
msgid ""
"always-y specifies targets which are literally always built when Kbuild "
"visits the Makefile."
msgstr ""

#: ../../../kbuild/makefiles.rst:319
msgid "Compilation flags"
msgstr ""

#: ../../../kbuild/makefiles.rst:321
msgid "ccflags-y, asflags-y and ldflags-y"
msgstr ""

#: ../../../kbuild/makefiles.rst:322
msgid ""
"These three flags apply only to the kbuild makefile in which they are "
"assigned. They are used for all the normal cc, as and ld invocations "
"happening during a recursive build."
msgstr ""

#: ../../../kbuild/makefiles.rst:326
msgid "ccflags-y specifies options for compiling with $(CC)."
msgstr ""

#: ../../../kbuild/makefiles.rst:334
msgid ""
"This variable is necessary because the top Makefile owns the variable "
"$(KBUILD_CFLAGS) and uses it for compilation flags for the entire tree."
msgstr ""

#: ../../../kbuild/makefiles.rst:338
msgid "asflags-y specifies assembler options."
msgstr ""

#: ../../../kbuild/makefiles.rst:345
msgid "ldflags-y specifies options for linking with $(LD)."
msgstr ""

#: ../../../kbuild/makefiles.rst:352
msgid "subdir-ccflags-y, subdir-asflags-y"
msgstr ""

#: ../../../kbuild/makefiles.rst:353
msgid ""
"The two flags listed above are similar to ccflags-y and asflags-y. The "
"difference is that the subdir- variants have effect for the kbuild file "
"where they are present and all subdirectories. Options specified using "
"subdir-* are added to the commandline before the options specified using the "
"non-subdir variants."
msgstr ""

#: ../../../kbuild/makefiles.rst:363
msgid "ccflags-remove-y, asflags-remove-y"
msgstr ""

#: ../../../kbuild/makefiles.rst:364
msgid ""
"These flags are used to remove particular flags for the compiler, assembler "
"invocations."
msgstr ""

#: ../../../kbuild/makefiles.rst:371
msgid "CFLAGS_$@, AFLAGS_$@"
msgstr ""

#: ../../../kbuild/makefiles.rst:372
msgid ""
"CFLAGS_$@ and AFLAGS_$@ only apply to commands in current kbuild makefile."
msgstr ""

#: ../../../kbuild/makefiles.rst:375
msgid ""
"$(CFLAGS_$@) specifies per-file options for $(CC).  The $@ part has a "
"literal value which specifies the file that it is for."
msgstr ""

#: ../../../kbuild/makefiles.rst:378
msgid ""
"CFLAGS_$@ has the higher priority than ccflags-remove-y; CFLAGS_$@ can re-"
"add compiler flags that were removed by ccflags-remove-y."
msgstr ""

#: ../../../kbuild/makefiles.rst:386
msgid "This line specify compilation flags for aha152x.o."
msgstr ""

#: ../../../kbuild/makefiles.rst:388
msgid ""
"$(AFLAGS_$@) is a similar feature for source files in assembly languages."
msgstr ""

#: ../../../kbuild/makefiles.rst:391
msgid ""
"AFLAGS_$@ has the higher priority than asflags-remove-y; AFLAGS_$@ can re-"
"add assembler flags that were removed by asflags-remove-y."
msgstr ""

#: ../../../kbuild/makefiles.rst:402
msgid "Dependency tracking"
msgstr ""

#: ../../../kbuild/makefiles.rst:404
msgid "Kbuild tracks dependencies on the following:"
msgstr ""

#: ../../../kbuild/makefiles.rst:406
msgid "All prerequisite files (both ``*.c`` and ``*.h``)"
msgstr ""

#: ../../../kbuild/makefiles.rst:407
msgid "``CONFIG_`` options used in all prerequisite files"
msgstr ""

#: ../../../kbuild/makefiles.rst:408
msgid "Command-line used to compile target"
msgstr ""

#: ../../../kbuild/makefiles.rst:410
msgid ""
"Thus, if you change an option to $(CC) all affected files will be re-"
"compiled."
msgstr ""

#: ../../../kbuild/makefiles.rst:414
msgid "Custom Rules"
msgstr ""

#: ../../../kbuild/makefiles.rst:416
msgid ""
"Custom rules are used when the kbuild infrastructure does not provide the "
"required support. A typical example is header files generated during the "
"build process. Another example are the architecture-specific Makefiles which "
"need custom rules to prepare boot images etc."
msgstr ""

#: ../../../kbuild/makefiles.rst:422
msgid ""
"Custom rules are written as normal Make rules. Kbuild is not executing in "
"the directory where the Makefile is located, so all custom rules shall use a "
"relative path to prerequisite files and target files."
msgstr ""

#: ../../../kbuild/makefiles.rst:427
msgid "Two variables are used when defining custom rules:"
msgstr ""

#: ../../../kbuild/makefiles.rst:429
msgid "$(src)"
msgstr ""

#: ../../../kbuild/makefiles.rst:430
msgid ""
"$(src) is the directory where the Makefile is located. Always use $(src) "
"when referring to files located in the src tree."
msgstr ""

#: ../../../kbuild/makefiles.rst:433
msgid "$(obj)"
msgstr ""

#: ../../../kbuild/makefiles.rst:434
msgid ""
"$(obj) is the directory where the target is saved. Always use $(obj) when "
"referring to generated files. Use $(obj) for pattern rules that need to work "
"for both generated files and real sources (VPATH will help to find the "
"prerequisites not only in the object tree but also in the source tree)."
msgstr ""

#: ../../../kbuild/makefiles.rst:445
msgid "This is a custom rule, following the normal syntax required by make."
msgstr ""

#: ../../../kbuild/makefiles.rst:448
msgid ""
"The target file depends on two prerequisite files. References to the target "
"file are prefixed with $(obj), references to prerequisites are referenced "
"with $(src) (because they are not generated files)."
msgstr ""

#: ../../../kbuild/makefiles.rst:453
msgid "$(srcroot)"
msgstr ""

#: ../../../kbuild/makefiles.rst:454
msgid ""
"$(srcroot) refers to the root of the source you are building, which can be "
"either the kernel source or the external modules source, depending on "
"whether KBUILD_EXTMOD is set. This can be either a relative or an absolute "
"path, but if KBUILD_ABS_SRCTREE=1 is set, it is always an absolute path."
msgstr ""

#: ../../../kbuild/makefiles.rst:459
msgid "$(srctree)"
msgstr ""

#: ../../../kbuild/makefiles.rst:460
msgid ""
"$(srctree) refers to the root of the kernel source tree. When building the "
"kernel, this is the same as $(srcroot)."
msgstr ""

#: ../../../kbuild/makefiles.rst:463
msgid "$(objtree)"
msgstr ""

#: ../../../kbuild/makefiles.rst:464
msgid ""
"$(objtree) refers to the root of the kernel object tree. It is ``.`` when "
"building the kernel, but it is different when building external modules."
msgstr ""

#: ../../../kbuild/makefiles.rst:467
msgid "$(kecho)"
msgstr ""

#: ../../../kbuild/makefiles.rst:468
msgid ""
"echoing information to user in a rule is often a good practice but when "
"execution ``make -s`` one does not expect to see any output except for "
"warnings/errors. To support this kbuild defines $(kecho) which will echo out "
"the text following $(kecho) to stdout except if ``make -s`` is used."
msgstr ""

#: ../../../kbuild/makefiles.rst:481
msgid ""
"When kbuild is executing with KBUILD_VERBOSE unset, then only a shorthand of "
"a command is normally displayed. To enable this behaviour for custom "
"commands kbuild requires two variables to be set::"
msgstr ""

#: ../../../kbuild/makefiles.rst:498
msgid "When updating the $(obj)/crc32table.h target, the line::"
msgstr ""

#: ../../../kbuild/makefiles.rst:502
msgid "will be displayed with ``make KBUILD_VERBOSE=``."
msgstr ""

#: ../../../kbuild/makefiles.rst:505
msgid "Command change detection"
msgstr ""

#: ../../../kbuild/makefiles.rst:507
msgid ""
"When the rule is evaluated, timestamps are compared between the target and "
"its prerequisite files. GNU Make updates the target when any of the "
"prerequisites is newer than that."
msgstr ""

#: ../../../kbuild/makefiles.rst:511
msgid ""
"The target should be rebuilt also when the command line has changed since "
"the last invocation. This is not supported by Make itself, so Kbuild "
"achieves this by a kind of meta-programming."
msgstr ""

#: ../../../kbuild/makefiles.rst:515
msgid "if_changed is the macro used for this purpose, in the following form::"
msgstr ""

#: ../../../kbuild/makefiles.rst:523
msgid ""
"Any target that utilizes if_changed must be listed in $(targets), otherwise "
"the command line check will fail, and the target will always be built."
msgstr ""

#: ../../../kbuild/makefiles.rst:527
msgid ""
"If the target is already listed in the recognized syntax such as obj-y/m, "
"lib-y/m, extra-y/m, always-y/m, hostprogs, userprogs, Kbuild automatically "
"adds it to $(targets). Otherwise, the target must be explicitly added to "
"$(targets)."
msgstr ""

#: ../../../kbuild/makefiles.rst:532
msgid ""
"Assignments to $(targets) are without $(obj)/ prefix. if_changed may be used "
"in conjunction with custom rules as defined in `Custom Rules`_."
msgstr ""

#: ../../../kbuild/makefiles.rst:535
msgid ""
"Note: It is a typical mistake to forget the FORCE prerequisite. Another "
"common pitfall is that whitespace is sometimes significant; for instance, "
"the below will fail (note the extra space after the comma)::"
msgstr ""

#: ../../../kbuild/makefiles.rst:541
msgid "**WRONG!**      $(call if_changed, objcopy)"
msgstr ""

#: ../../../kbuild/makefiles.rst:543
msgid "Note:"
msgstr ""

#: ../../../kbuild/makefiles.rst:544
msgid ""
"if_changed should not be used more than once per target. It stores the "
"executed command in a corresponding .cmd file and multiple calls would "
"result in overwrites and unwanted results when the target is up to date and "
"only the tests on changed commands trigger execution of commands."
msgstr ""

#: ../../../kbuild/makefiles.rst:551
msgid "$(CC) support functions"
msgstr ""

#: ../../../kbuild/makefiles.rst:553
msgid ""
"The kernel may be built with several different versions of $(CC), each "
"supporting a unique set of features and options. kbuild provides basic "
"support to check for valid options for $(CC). $(CC) is usually the gcc "
"compiler, but other alternatives are available."
msgstr ""

#: ../../../kbuild/makefiles.rst:559
msgid "as-option"
msgstr ""

#: ../../../kbuild/makefiles.rst:560
msgid ""
"as-option is used to check if $(CC) -- when used to compile assembler (``*."
"S``) files -- supports the given option. An optional second option may be "
"specified if the first option is not supported."
msgstr ""

#: ../../../kbuild/makefiles.rst:569
msgid ""
"In the above example, cflags-y will be assigned the option -Wa$(comma)-"
"isa=$(isa-y) if it is supported by $(CC). The second argument is optional, "
"and if supplied will be used if first argument is not supported."
msgstr ""

#: ../../../kbuild/makefiles.rst:574
msgid "as-instr"
msgstr ""

#: ../../../kbuild/makefiles.rst:575
msgid ""
"as-instr checks if the assembler reports a specific instruction and then "
"outputs either option1 or option2 C escapes are supported in the test "
"instruction Note: as-instr-option uses KBUILD_AFLAGS for assembler options"
msgstr ""

#: ../../../kbuild/makefiles.rst:580
msgid "cc-option"
msgstr ""

#: ../../../kbuild/makefiles.rst:581
msgid ""
"cc-option is used to check if $(CC) supports a given option, and if not "
"supported to use an optional second option."
msgstr ""

#: ../../../kbuild/makefiles.rst:589
msgid ""
"In the above example, cflags-y will be assigned the option -march=pentium-"
"mmx if supported by $(CC), otherwise -march=i586. The second argument to cc-"
"option is optional, and if omitted, cflags-y will be assigned no value if "
"first option is not supported. Note: cc-option uses KBUILD_CFLAGS for $(CC) "
"options"
msgstr ""

#: ../../../kbuild/makefiles.rst:595
msgid "cc-option-yn"
msgstr ""

#: ../../../kbuild/makefiles.rst:596
msgid ""
"cc-option-yn is used to check if $(CC) supports a given option and return "
"\"y\" if supported, otherwise \"n\"."
msgstr ""

#: ../../../kbuild/makefiles.rst:606
msgid ""
"In the above example, $(biarch) is set to y if $(CC) supports the -m32 "
"option. When $(biarch) equals \"y\", the expanded variables $(aflags-y) and "
"$(cflags-y) will be assigned the values -a32 and -m32, respectively."
msgstr ""

#: ../../../kbuild/makefiles.rst:611
msgid "Note: cc-option-yn uses KBUILD_CFLAGS for $(CC) options"
msgstr ""

#: ../../../kbuild/makefiles.rst:613
msgid "cc-disable-warning"
msgstr ""

#: ../../../kbuild/makefiles.rst:614
msgid ""
"cc-disable-warning checks if $(CC) supports a given warning and returns the "
"commandline switch to disable it. This special function is needed, because "
"gcc 4.4 and later accept any unknown -Wno-* option and only warn about it if "
"there is another warning in the source file."
msgstr ""

#: ../../../kbuild/makefiles.rst:623
msgid ""
"In the above example, -Wno-unused-but-set-variable will be added to "
"KBUILD_CFLAGS only if $(CC) really accepts it."
msgstr ""

#: ../../../kbuild/makefiles.rst:626
msgid "gcc-min-version"
msgstr ""

#: ../../../kbuild/makefiles.rst:627
msgid ""
"gcc-min-version tests if the value of $(CONFIG_GCC_VERSION) is greater than "
"or equal to the provided value and evaluates to y if so."
msgstr ""

#: ../../../kbuild/makefiles.rst:634
msgid ""
"In this example, cflags-y will be assigned the value -foo if $(CC) is gcc "
"and $(CONFIG_GCC_VERSION) is >= 11.1."
msgstr ""

#: ../../../kbuild/makefiles.rst:637
msgid "clang-min-version"
msgstr ""

#: ../../../kbuild/makefiles.rst:638
msgid ""
"clang-min-version tests if the value of $(CONFIG_CLANG_VERSION) is greater "
"than or equal to the provided value and evaluates to y if so."
msgstr ""

#: ../../../kbuild/makefiles.rst:645
msgid ""
"In this example, cflags-y will be assigned the value -foo if $(CC) is clang "
"and $(CONFIG_CLANG_VERSION) is >= 11.0.0."
msgstr ""

#: ../../../kbuild/makefiles.rst:648
msgid "cc-cross-prefix"
msgstr ""

#: ../../../kbuild/makefiles.rst:649
msgid ""
"cc-cross-prefix is used to check if there exists a $(CC) in path with one of "
"the listed prefixes. The first prefix where there exist a prefix$(CC) in the "
"PATH is returned - and if no prefix$(CC) is found then nothing is returned."
msgstr ""

#: ../../../kbuild/makefiles.rst:654
msgid ""
"Additional prefixes are separated by a single space in the call of cc-cross-"
"prefix."
msgstr ""

#: ../../../kbuild/makefiles.rst:657
msgid ""
"This functionality is useful for architecture Makefiles that try to set "
"CROSS_COMPILE to well-known values but may have several values to select "
"between."
msgstr ""

#: ../../../kbuild/makefiles.rst:661
msgid ""
"It is recommended only to try to set CROSS_COMPILE if it is a cross build "
"(host arch is different from target arch). And if CROSS_COMPILE is already "
"set then leave it with the old value."
msgstr ""

#: ../../../kbuild/makefiles.rst:675
msgid "$(RUSTC) support functions"
msgstr ""

#: ../../../kbuild/makefiles.rst:677
msgid "rustc-min-version"
msgstr ""

#: ../../../kbuild/makefiles.rst:678
msgid ""
"rustc-min-version tests if the value of $(CONFIG_RUSTC_VERSION) is greater "
"than or equal to the provided value and evaluates to y if so."
msgstr ""

#: ../../../kbuild/makefiles.rst:685
msgid ""
"In this example, rustflags-y will be assigned the value -Cfoo if "
"$(CONFIG_RUSTC_VERSION) is >= 1.85.0."
msgstr ""

#: ../../../kbuild/makefiles.rst:689
msgid "$(LD) support functions"
msgstr ""

#: ../../../kbuild/makefiles.rst:691
msgid "ld-option"
msgstr ""

#: ../../../kbuild/makefiles.rst:692
msgid ""
"ld-option is used to check if $(LD) supports the supplied option. ld-option "
"takes two options as arguments."
msgstr ""

#: ../../../kbuild/makefiles.rst:695
msgid ""
"The second argument is an optional option that can be used if the first "
"option is not supported by $(LD)."
msgstr ""

#: ../../../kbuild/makefiles.rst:704
msgid "Script invocation"
msgstr ""

#: ../../../kbuild/makefiles.rst:706
msgid ""
"Make rules may invoke scripts to build the kernel. The rules shall always "
"provide the appropriate interpreter to execute the script. They shall not "
"rely on the execute bits being set, and shall not invoke the script "
"directly. For the convenience of manual script invocation, such as "
"invoking ./scripts/checkpatch.pl, it is recommended to set execute bits on "
"the scripts nonetheless."
msgstr ""

#: ../../../kbuild/makefiles.rst:713
msgid ""
"Kbuild provides variables $(CONFIG_SHELL), $(AWK), $(PERL), and $(PYTHON3) "
"to refer to interpreters for the respective scripts."
msgstr ""

#: ../../../kbuild/makefiles.rst:724
msgid "Host Program support"
msgstr ""

#: ../../../kbuild/makefiles.rst:726
msgid ""
"Kbuild supports building executables on the host for use during the "
"compilation stage."
msgstr ""

#: ../../../kbuild/makefiles.rst:729
msgid "Two steps are required in order to use a host executable."
msgstr ""

#: ../../../kbuild/makefiles.rst:731
msgid ""
"The first step is to tell kbuild that a host program exists. This is done "
"utilising the variable ``hostprogs``."
msgstr ""

#: ../../../kbuild/makefiles.rst:734
msgid ""
"The second step is to add an explicit dependency to the executable. This can "
"be done in two ways. Either add the dependency in a rule, or utilise the "
"variable ``always-y``. Both possibilities are described in the following."
msgstr ""

#: ../../../kbuild/makefiles.rst:740
msgid "Simple Host Program"
msgstr ""

#: ../../../kbuild/makefiles.rst:742
msgid ""
"In some cases there is a need to compile and run a program on the computer "
"where the build is running."
msgstr ""

#: ../../../kbuild/makefiles.rst:745
msgid ""
"The following line tells kbuild that the program bin2hex shall be built on "
"the build host."
msgstr ""

#: ../../../kbuild/makefiles.rst:752
msgid ""
"Kbuild assumes in the above example that bin2hex is made from a single c-"
"source file named bin2hex.c located in the same directory as the Makefile."
msgstr ""

#: ../../../kbuild/makefiles.rst:757
msgid "Composite Host Programs"
msgstr ""

#: ../../../kbuild/makefiles.rst:759
msgid ""
"Host programs can be made up based on composite objects. The syntax used to "
"define composite objects for host programs is similar to the syntax used for "
"kernel objects. $(<executable>-objs) lists all objects used to link the "
"final executable."
msgstr ""

#: ../../../kbuild/makefiles.rst:771
msgid ""
"Objects with extension .o are compiled from the corresponding .c files. In "
"the above example, checklist.c is compiled to checklist.o and lxdialog.c is "
"compiled to lxdialog.o."
msgstr ""

#: ../../../kbuild/makefiles.rst:775
msgid ""
"Finally, the two .o files are linked to the executable, lxdialog. Note: The "
"syntax <executable>-y is not permitted for host-programs."
msgstr ""

#: ../../../kbuild/makefiles.rst:779
msgid "Using C++ for host programs"
msgstr ""

#: ../../../kbuild/makefiles.rst:781
msgid ""
"kbuild offers support for host programs written in C++. This was introduced "
"solely to support kconfig, and is not recommended for general use."
msgstr ""

#: ../../../kbuild/makefiles.rst:791
msgid ""
"In the example above the executable is composed of the C++ file qconf.cc - "
"identified by $(qconf-cxxobjs)."
msgstr ""

#: ../../../kbuild/makefiles.rst:794
msgid ""
"If qconf is composed of a mixture of .c and .cc files, then an additional "
"line can be used to identify this."
msgstr ""

#: ../../../kbuild/makefiles.rst:805
msgid "Using Rust for host programs"
msgstr ""

#: ../../../kbuild/makefiles.rst:807
msgid ""
"Kbuild offers support for host programs written in Rust. However, since a "
"Rust toolchain is not mandatory for kernel compilation, it may only be used "
"in scenarios where Rust is required to be available (e.g. when  "
"``CONFIG_RUST`` is enabled)."
msgstr ""

#: ../../../kbuild/makefiles.rst:817
msgid ""
"Kbuild will compile ``target`` using ``target.rs`` as the crate root, "
"located in the same directory as the ``Makefile``. The crate may consist of "
"several source files (see ``samples/rust/hostprogs``)."
msgstr ""

#: ../../../kbuild/makefiles.rst:822
msgid "Controlling compiler options for host programs"
msgstr ""

#: ../../../kbuild/makefiles.rst:824
msgid ""
"When compiling host programs, it is possible to set specific flags. The "
"programs will always be compiled utilising $(HOSTCC) passed the options "
"specified in $(KBUILD_HOSTCFLAGS)."
msgstr ""

#: ../../../kbuild/makefiles.rst:828
msgid ""
"To set flags that will take effect for all host programs created in that "
"Makefile, use the variable HOST_EXTRACFLAGS."
msgstr ""

#: ../../../kbuild/makefiles.rst:836 ../../../kbuild/makefiles.rst:955
msgid ""
"To set specific flags for a single file the following construction is used:"
msgstr ""

#: ../../../kbuild/makefiles.rst:844 ../../../kbuild/makefiles.rst:962
msgid "It is also possible to specify additional options to the linker."
msgstr ""

#: ../../../kbuild/makefiles.rst:851
msgid ""
"When linking qconf, it will be passed the extra option ``-L$(QTDIR)/lib``."
msgstr ""

#: ../../../kbuild/makefiles.rst:855
msgid "When host programs are actually built"
msgstr ""

#: ../../../kbuild/makefiles.rst:857
msgid ""
"Kbuild will only build host-programs when they are referenced as a "
"prerequisite."
msgstr ""

#: ../../../kbuild/makefiles.rst:860
msgid "This is possible in two ways:"
msgstr ""

#: ../../../kbuild/makefiles.rst:862
msgid "List the prerequisite explicitly in a custom rule."
msgstr ""

#: ../../../kbuild/makefiles.rst:871
msgid ""
"The target $(obj)/devlist.h will not be built before $(obj)/gen-devlist is "
"updated. Note that references to the host programs in custom rules must be "
"prefixed with $(obj)."
msgstr ""

#: ../../../kbuild/makefiles.rst:875 ../../../kbuild/makefiles.rst:993
msgid "Use always-y"
msgstr ""

#: ../../../kbuild/makefiles.rst:877
msgid ""
"When there is no suitable custom rule, and the host program shall be built "
"when a makefile is entered, the always-y variable shall be used."
msgstr ""

#: ../../../kbuild/makefiles.rst:887 ../../../kbuild/makefiles.rst:1000
msgid "Kbuild provides the following shorthand for this::"
msgstr ""

#: ../../../kbuild/makefiles.rst:891
msgid ""
"This will tell kbuild to build lxdialog even if not referenced in any rule."
msgstr ""

#: ../../../kbuild/makefiles.rst:895
msgid "Userspace Program support"
msgstr ""

#: ../../../kbuild/makefiles.rst:897
msgid ""
"Just like host programs, Kbuild also supports building userspace executables "
"for the target architecture (i.e. the same architecture as you are building "
"the kernel for)."
msgstr ""

#: ../../../kbuild/makefiles.rst:901
msgid ""
"The syntax is quite similar. The difference is to use ``userprogs`` instead "
"of ``hostprogs``."
msgstr ""

#: ../../../kbuild/makefiles.rst:905
msgid "Simple Userspace Program"
msgstr ""

#: ../../../kbuild/makefiles.rst:907
msgid ""
"The following line tells kbuild that the program bpf-direct shall be built "
"for the target architecture."
msgstr ""

#: ../../../kbuild/makefiles.rst:914
msgid ""
"Kbuild assumes in the above example that bpf-direct is made from a single C "
"source file named bpf-direct.c located in the same directory as the Makefile."
msgstr ""

#: ../../../kbuild/makefiles.rst:919
msgid "Composite Userspace Programs"
msgstr ""

#: ../../../kbuild/makefiles.rst:921
msgid ""
"Userspace programs can be made up based on composite objects. The syntax "
"used to define composite objects for userspace programs is similar to the "
"syntax used for kernel objects. $(<executable>-objs) lists all objects used "
"to link the final executable."
msgstr ""

#: ../../../kbuild/makefiles.rst:933
msgid ""
"Objects with extension .o are compiled from the corresponding .c files. In "
"the above example, bpf-fancy.c is compiled to bpf-fancy.o and bpf-helper.c "
"is compiled to bpf-helper.o."
msgstr ""

#: ../../../kbuild/makefiles.rst:937
msgid ""
"Finally, the two .o files are linked to the executable, bpf-fancy. Note: The "
"syntax <executable>-y is not permitted for userspace programs."
msgstr ""

#: ../../../kbuild/makefiles.rst:941
msgid "Controlling compiler options for userspace programs"
msgstr ""

#: ../../../kbuild/makefiles.rst:943
msgid ""
"When compiling userspace programs, it is possible to set specific flags. The "
"programs will always be compiled utilising $(CC) passed the options "
"specified in $(KBUILD_USERCFLAGS)."
msgstr ""

#: ../../../kbuild/makefiles.rst:947
msgid ""
"To set flags that will take effect for all userspace programs created in "
"that Makefile, use the variable userccflags."
msgstr ""

#: ../../../kbuild/makefiles.rst:969
msgid ""
"To specify libraries linked to a userspace program, you can use "
"``<executable>-userldlibs``. The ``userldlibs`` syntax specifies libraries "
"linked to all userspace programs created in the current Makefile."
msgstr ""

#: ../../../kbuild/makefiles.rst:973
msgid "When linking bpfilter_umh, it will be passed the extra option -static."
msgstr ""

#: ../../../kbuild/makefiles.rst:975
msgid ""
"From command line, :ref:`USERCFLAGS and USERLDFLAGS <userkbuildflags>` will "
"also be used."
msgstr ""

#: ../../../kbuild/makefiles.rst:978
msgid "When userspace programs are actually built"
msgstr ""

#: ../../../kbuild/makefiles.rst:980
msgid ""
"Kbuild builds userspace programs only when told to do so. There are two ways "
"to do this."
msgstr ""

#: ../../../kbuild/makefiles.rst:983
msgid "Add it as the prerequisite of another file"
msgstr ""

#: ../../../kbuild/makefiles.rst:991
msgid "$(obj)/bpfilter_umh is built before $(obj)/bpfilter_umh_blob.o"
msgstr ""

#: ../../../kbuild/makefiles.rst:1004
msgid ""
"This will tell Kbuild to build binderfs_example when it visits this Makefile."
msgstr ""

#: ../../../kbuild/makefiles.rst:1008
msgid "Kbuild clean infrastructure"
msgstr ""

#: ../../../kbuild/makefiles.rst:1010
msgid ""
"``make clean`` deletes most generated files in the obj tree where the kernel "
"is compiled. This includes generated files such as host programs. Kbuild "
"knows targets listed in $(hostprogs), $(always-y), $(always-m), $(always-), "
"$(extra-y), $(extra-) and $(targets). They are all deleted during ``make "
"clean``. Files matching the patterns ``*.[oas]``, ``*.ko``, plus some "
"additional files generated by kbuild are deleted all over the kernel source "
"tree when ``make clean`` is executed."
msgstr ""

#: ../../../kbuild/makefiles.rst:1018
msgid ""
"Additional files or directories can be specified in kbuild makefiles by use "
"of $(clean-files)."
msgstr ""

#: ../../../kbuild/makefiles.rst:1026
msgid ""
"When executing ``make clean``, the file ``crc32table.h`` will be deleted. "
"Kbuild will assume files to be in the same relative directory as the "
"Makefile."
msgstr ""

#: ../../../kbuild/makefiles.rst:1030
msgid ""
"To exclude certain files or directories from make clean, use the $(no-clean-"
"files) variable."
msgstr ""

#: ../../../kbuild/makefiles.rst:1033
msgid ""
"Usually kbuild descends down in subdirectories due to ``obj-* := dir/``, but "
"in the architecture makefiles where the kbuild infrastructure is not "
"sufficient this sometimes needs to be explicit."
msgstr ""

#: ../../../kbuild/makefiles.rst:1042
msgid ""
"The above assignment instructs kbuild to descend down in the directory "
"compressed/ when ``make clean`` is executed."
msgstr ""

#: ../../../kbuild/makefiles.rst:1045
msgid ""
"Note 1: arch/$(SRCARCH)/Makefile cannot use ``subdir-``, because that file "
"is included in the top level makefile. Instead, arch/$(SRCARCH)/Kbuild can "
"use ``subdir-``."
msgstr ""

#: ../../../kbuild/makefiles.rst:1049
msgid ""
"Note 2: All directories listed in core-y, libs-y, drivers-y and net-y will "
"be visited during ``make clean``."
msgstr ""

#: ../../../kbuild/makefiles.rst:1053
msgid "Architecture Makefiles"
msgstr ""

#: ../../../kbuild/makefiles.rst:1055
msgid ""
"The top level Makefile sets up the environment and does the preparation, "
"before starting to descend down in the individual directories."
msgstr ""

#: ../../../kbuild/makefiles.rst:1058
msgid ""
"The top level makefile contains the generic part, whereas arch/$(SRCARCH)/"
"Makefile contains what is required to set up kbuild for said architecture."
msgstr ""

#: ../../../kbuild/makefiles.rst:1062
msgid ""
"To do so, arch/$(SRCARCH)/Makefile sets up a number of variables and defines "
"a few targets."
msgstr ""

#: ../../../kbuild/makefiles.rst:1065
msgid "When kbuild executes, the following steps are followed (roughly):"
msgstr ""

#: ../../../kbuild/makefiles.rst:1067
msgid "Configuration of the kernel => produce .config"
msgstr ""

#: ../../../kbuild/makefiles.rst:1069
msgid "Store kernel version in include/linux/version.h"
msgstr ""

#: ../../../kbuild/makefiles.rst:1071
msgid "Updating all other prerequisites to the target prepare:"
msgstr ""

#: ../../../kbuild/makefiles.rst:1073
msgid "Additional prerequisites are specified in arch/$(SRCARCH)/Makefile"
msgstr ""

#: ../../../kbuild/makefiles.rst:1075
msgid ""
"Recursively descend down in all directories listed in init-* core* drivers-* "
"net-* libs-* and build all targets."
msgstr ""

#: ../../../kbuild/makefiles.rst:1078
msgid ""
"The values of the above variables are expanded in arch/$(SRCARCH)/Makefile."
msgstr ""

#: ../../../kbuild/makefiles.rst:1080
msgid ""
"All object files are then linked and the resulting file vmlinux is located "
"at the root of the obj tree. The very first objects linked are listed in "
"scripts/head-object-list.txt."
msgstr ""

#: ../../../kbuild/makefiles.rst:1084
msgid ""
"Finally, the architecture-specific part does any required post processing "
"and builds the final bootimage."
msgstr ""

#: ../../../kbuild/makefiles.rst:1087
msgid "This includes building boot records"
msgstr ""

#: ../../../kbuild/makefiles.rst:1088
msgid "Preparing initrd images and the like"
msgstr ""

#: ../../../kbuild/makefiles.rst:1091
msgid "Set variables to tweak the build to the architecture"
msgstr ""

#: ../../../kbuild/makefiles.rst:1093
msgid "KBUILD_LDFLAGS"
msgstr ""

#: ../../../kbuild/makefiles.rst:1094
msgid "Generic $(LD) options"
msgstr ""

#: ../../../kbuild/makefiles.rst:1096
msgid ""
"Flags used for all invocations of the linker. Often specifying the emulation "
"is sufficient."
msgstr ""

#: ../../../kbuild/makefiles.rst:1104
msgid ""
"Note: ldflags-y can be used to further customise the flags used. See `Non-"
"builtin vmlinux targets - extra-y`_."
msgstr ""

#: ../../../kbuild/makefiles.rst:1107
msgid "LDFLAGS_vmlinux"
msgstr ""

#: ../../../kbuild/makefiles.rst:1108
msgid "Options for $(LD) when linking vmlinux"
msgstr ""

#: ../../../kbuild/makefiles.rst:1110
msgid ""
"LDFLAGS_vmlinux is used to specify additional flags to pass to the linker "
"when linking the final vmlinux image."
msgstr ""

#: ../../../kbuild/makefiles.rst:1113
msgid "LDFLAGS_vmlinux uses the LDFLAGS_$@ support."
msgstr ""

#: ../../../kbuild/makefiles.rst:1120
msgid "OBJCOPYFLAGS"
msgstr ""

#: ../../../kbuild/makefiles.rst:1121
msgid "objcopy flags"
msgstr ""

#: ../../../kbuild/makefiles.rst:1123
msgid ""
"When $(call if_changed,objcopy) is used to translate a .o file, the flags "
"specified in OBJCOPYFLAGS will be used."
msgstr ""

#: ../../../kbuild/makefiles.rst:1126
msgid ""
"$(call if_changed,objcopy) is often used to generate raw binaries on vmlinux."
msgstr ""

#: ../../../kbuild/makefiles.rst:1138
msgid ""
"In this example, the binary $(obj)/image is a binary version of vmlinux. The "
"usage of $(call if_changed,xxx) will be described later."
msgstr ""

#: ../../../kbuild/makefiles.rst:1141
msgid "KBUILD_AFLAGS"
msgstr ""

#: ../../../kbuild/makefiles.rst:1142
msgid "Assembler flags"
msgstr ""

#: ../../../kbuild/makefiles.rst:1144 ../../../kbuild/makefiles.rst:1156
#: ../../../kbuild/makefiles.rst:1189
msgid "Default value - see top level Makefile."
msgstr ""

#: ../../../kbuild/makefiles.rst:1146 ../../../kbuild/makefiles.rst:1158
#: ../../../kbuild/makefiles.rst:1191
msgid "Append or modify as required per architecture."
msgstr ""

#: ../../../kbuild/makefiles.rst:1153
msgid "KBUILD_CFLAGS"
msgstr ""

#: ../../../kbuild/makefiles.rst:1154
msgid "$(CC) compiler flags"
msgstr ""

#: ../../../kbuild/makefiles.rst:1160
msgid "Often, the KBUILD_CFLAGS variable depends on the configuration."
msgstr ""

#: ../../../kbuild/makefiles.rst:1169
msgid ""
"Many arch Makefiles dynamically run the target C compiler to probe supported "
"options::"
msgstr ""

#: ../../../kbuild/makefiles.rst:1183
msgid ""
"The first example utilises the trick that a config option expands to \"y\" "
"when selected."
msgstr ""

#: ../../../kbuild/makefiles.rst:1186
msgid "KBUILD_RUSTFLAGS"
msgstr ""

#: ../../../kbuild/makefiles.rst:1187
msgid "$(RUSTC) compiler flags"
msgstr ""

#: ../../../kbuild/makefiles.rst:1193
msgid "Often, the KBUILD_RUSTFLAGS variable depends on the configuration."
msgstr ""

#: ../../../kbuild/makefiles.rst:1195
msgid ""
"Note that target specification file generation (for ``--target``) is handled "
"in ``scripts/generate_rust_target.rs``."
msgstr ""

#: ../../../kbuild/makefiles.rst:1198
msgid "KBUILD_AFLAGS_KERNEL"
msgstr ""

#: ../../../kbuild/makefiles.rst:1199
msgid "Assembler options specific for built-in"
msgstr ""

#: ../../../kbuild/makefiles.rst:1201
msgid ""
"$(KBUILD_AFLAGS_KERNEL) contains extra C compiler flags used to compile "
"resident kernel code."
msgstr ""

#: ../../../kbuild/makefiles.rst:1204
msgid "KBUILD_AFLAGS_MODULE"
msgstr ""

#: ../../../kbuild/makefiles.rst:1205
msgid "Assembler options specific for modules"
msgstr ""

#: ../../../kbuild/makefiles.rst:1207
msgid ""
"$(KBUILD_AFLAGS_MODULE) is used to add arch-specific options that are used "
"for assembler."
msgstr ""

#: ../../../kbuild/makefiles.rst:1210
msgid "From commandline AFLAGS_MODULE shall be used (see kbuild.rst)."
msgstr ""

#: ../../../kbuild/makefiles.rst:1212
msgid "KBUILD_CFLAGS_KERNEL"
msgstr ""

#: ../../../kbuild/makefiles.rst:1213
msgid "$(CC) options specific for built-in"
msgstr ""

#: ../../../kbuild/makefiles.rst:1215
msgid ""
"$(KBUILD_CFLAGS_KERNEL) contains extra C compiler flags used to compile "
"resident kernel code."
msgstr ""

#: ../../../kbuild/makefiles.rst:1218
msgid "KBUILD_CFLAGS_MODULE"
msgstr ""

#: ../../../kbuild/makefiles.rst:1219
msgid "Options for $(CC) when building modules"
msgstr ""

#: ../../../kbuild/makefiles.rst:1221
msgid ""
"$(KBUILD_CFLAGS_MODULE) is used to add arch-specific options that are used "
"for $(CC)."
msgstr ""

#: ../../../kbuild/makefiles.rst:1224
msgid "From commandline CFLAGS_MODULE shall be used (see kbuild.rst)."
msgstr ""

#: ../../../kbuild/makefiles.rst:1226
msgid "KBUILD_RUSTFLAGS_KERNEL"
msgstr ""

#: ../../../kbuild/makefiles.rst:1227
msgid "$(RUSTC) options specific for built-in"
msgstr ""

#: ../../../kbuild/makefiles.rst:1229
msgid ""
"$(KBUILD_RUSTFLAGS_KERNEL) contains extra Rust compiler flags used to "
"compile resident kernel code."
msgstr ""

#: ../../../kbuild/makefiles.rst:1232
msgid "KBUILD_RUSTFLAGS_MODULE"
msgstr ""

#: ../../../kbuild/makefiles.rst:1233
msgid "Options for $(RUSTC) when building modules"
msgstr ""

#: ../../../kbuild/makefiles.rst:1235
msgid ""
"$(KBUILD_RUSTFLAGS_MODULE) is used to add arch-specific options that are "
"used for $(RUSTC)."
msgstr ""

#: ../../../kbuild/makefiles.rst:1238
msgid "From commandline RUSTFLAGS_MODULE shall be used (see kbuild.rst)."
msgstr ""

#: ../../../kbuild/makefiles.rst:1240
msgid "KBUILD_LDFLAGS_MODULE"
msgstr ""

#: ../../../kbuild/makefiles.rst:1241
msgid "Options for $(LD) when linking modules"
msgstr ""

#: ../../../kbuild/makefiles.rst:1243
msgid ""
"$(KBUILD_LDFLAGS_MODULE) is used to add arch-specific options used when "
"linking modules. This is often a linker script."
msgstr ""

#: ../../../kbuild/makefiles.rst:1246
msgid "From commandline LDFLAGS_MODULE shall be used (see kbuild.rst)."
msgstr ""

#: ../../../kbuild/makefiles.rst:1248
msgid "KBUILD_LDS"
msgstr ""

#: ../../../kbuild/makefiles.rst:1249
msgid "The linker script with full path. Assigned by the top-level Makefile."
msgstr ""

#: ../../../kbuild/makefiles.rst:1251
msgid "KBUILD_VMLINUX_OBJS"
msgstr ""

#: ../../../kbuild/makefiles.rst:1252
msgid ""
"All object files for vmlinux. They are linked to vmlinux in the same order "
"as listed in KBUILD_VMLINUX_OBJS."
msgstr ""

#: ../../../kbuild/makefiles.rst:1255
msgid ""
"The objects listed in scripts/head-object-list.txt are exceptions; they are "
"placed before the other objects."
msgstr ""

#: ../../../kbuild/makefiles.rst:1258
msgid "KBUILD_VMLINUX_LIBS"
msgstr ""

#: ../../../kbuild/makefiles.rst:1259
msgid ""
"All .a ``lib`` files for vmlinux. KBUILD_VMLINUX_OBJS and "
"KBUILD_VMLINUX_LIBS together specify all the object files used to link "
"vmlinux."
msgstr ""

#: ../../../kbuild/makefiles.rst:1264
msgid "Add prerequisites to archheaders"
msgstr ""

#: ../../../kbuild/makefiles.rst:1266
msgid ""
"The archheaders: rule is used to generate header files that may be installed "
"into user space by ``make header_install``."
msgstr ""

#: ../../../kbuild/makefiles.rst:1269
msgid ""
"It is run before ``make archprepare`` when run on the architecture itself."
msgstr ""

#: ../../../kbuild/makefiles.rst:1273
msgid "Add prerequisites to archprepare"
msgstr ""

#: ../../../kbuild/makefiles.rst:1275
msgid ""
"The archprepare: rule is used to list prerequisites that need to be built "
"before starting to descend down in the subdirectories."
msgstr ""

#: ../../../kbuild/makefiles.rst:1278
msgid "This is usually used for header files containing assembler constants."
msgstr ""

#: ../../../kbuild/makefiles.rst:1285
msgid ""
"In this example, the file target maketools will be processed before "
"descending down in the subdirectories."
msgstr ""

#: ../../../kbuild/makefiles.rst:1288
msgid ""
"See also chapter XXX-TODO that describes how kbuild supports generating "
"offset header files."
msgstr ""

#: ../../../kbuild/makefiles.rst:1292
msgid "List directories to visit when descending"
msgstr ""

#: ../../../kbuild/makefiles.rst:1294
msgid ""
"An arch Makefile cooperates with the top Makefile to define variables which "
"specify how to build the vmlinux file.  Note that there is no corresponding "
"arch-specific section for modules; the module-building machinery is all "
"architecture-independent."
msgstr ""

#: ../../../kbuild/makefiles.rst:1299
msgid "core-y, libs-y, drivers-y"
msgstr ""

#: ../../../kbuild/makefiles.rst:1300
msgid "$(libs-y) lists directories where a lib.a archive can be located."
msgstr ""

#: ../../../kbuild/makefiles.rst:1302
msgid ""
"The rest list directories where a built-in.a object file can be located."
msgstr ""

#: ../../../kbuild/makefiles.rst:1305
msgid "Then the rest follows in this order:"
msgstr ""

#: ../../../kbuild/makefiles.rst:1307
msgid "$(core-y), $(libs-y), $(drivers-y)"
msgstr ""

#: ../../../kbuild/makefiles.rst:1309
msgid ""
"The top level Makefile defines values for all generic directories, and arch/"
"$(SRCARCH)/Makefile only adds architecture-specific directories."
msgstr ""

#: ../../../kbuild/makefiles.rst:1324
msgid "Architecture-specific boot images"
msgstr ""

#: ../../../kbuild/makefiles.rst:1326
msgid ""
"An arch Makefile specifies goals that take the vmlinux file, compress it, "
"wrap it in bootstrapping code, and copy the resulting files somewhere. This "
"includes various kinds of installation commands. The actual goals are not "
"standardized across architectures."
msgstr ""

#: ../../../kbuild/makefiles.rst:1331
msgid ""
"It is common to locate any additional processing in a boot/ directory below "
"arch/$(SRCARCH)/."
msgstr ""

#: ../../../kbuild/makefiles.rst:1334
msgid ""
"Kbuild does not provide any smart way to support building a target specified "
"in boot/. Therefore arch/$(SRCARCH)/Makefile shall call make manually to "
"build a target in boot/."
msgstr ""

#: ../../../kbuild/makefiles.rst:1338
msgid ""
"The recommended approach is to include shortcuts in arch/$(SRCARCH)/"
"Makefile, and use the full path when calling down into the arch/$(SRCARCH)/"
"boot/Makefile."
msgstr ""

#: ../../../kbuild/makefiles.rst:1349
msgid ""
"``$(Q)$(MAKE) $(build)=<dir>`` is the recommended way to invoke make in a "
"subdirectory."
msgstr ""

#: ../../../kbuild/makefiles.rst:1352
msgid ""
"There are no rules for naming architecture-specific targets, but executing "
"``make help`` will list all relevant targets. To support this, $(archhelp) "
"must be defined."
msgstr ""

#: ../../../kbuild/makefiles.rst:1363
msgid ""
"When make is executed without arguments, the first goal encountered will be "
"built. In the top level Makefile the first goal present is all:."
msgstr ""

#: ../../../kbuild/makefiles.rst:1367
msgid ""
"An architecture shall always, per default, build a bootable image. In ``make "
"help``, the default goal is highlighted with a ``*``."
msgstr ""

#: ../../../kbuild/makefiles.rst:1370
msgid ""
"Add a new prerequisite to all: to select a default goal different from "
"vmlinux."
msgstr ""

#: ../../../kbuild/makefiles.rst:1378
msgid "When ``make`` is executed without arguments, bzImage will be built."
msgstr ""

#: ../../../kbuild/makefiles.rst:1381
msgid "Commands useful for building a boot image"
msgstr ""

#: ../../../kbuild/makefiles.rst:1383
msgid ""
"Kbuild provides a few macros that are useful when building a boot image."
msgstr ""

#: ../../../kbuild/makefiles.rst:1386
msgid "ld"
msgstr ""

#: ../../../kbuild/makefiles.rst:1387
msgid "Link target. Often, LDFLAGS_$@ is used to set specific options to ld."
msgstr ""

#: ../../../kbuild/makefiles.rst:1399
msgid ""
"In this example, there are two possible targets, requiring different options "
"to the linker. The linker options are specified using the LDFLAGS_$@ syntax "
"- one for each potential target."
msgstr ""

#: ../../../kbuild/makefiles.rst:1403
msgid ""
"$(targets) are assigned all potential targets, by which kbuild knows the "
"targets and will:"
msgstr ""

#: ../../../kbuild/makefiles.rst:1406
msgid "check for commandline changes"
msgstr ""

#: ../../../kbuild/makefiles.rst:1407
msgid "delete target during make clean"
msgstr ""

#: ../../../kbuild/makefiles.rst:1409
msgid ""
"The ``: %: %.o`` part of the prerequisite is a shorthand that frees us from "
"listing the setup.o and bootsect.o files."
msgstr ""

#: ../../../kbuild/makefiles.rst:1412
msgid ""
"Note: It is a common mistake to forget the ``targets :=`` assignment, "
"resulting in the target file being recompiled for no obvious reason."
msgstr ""

#: ../../../kbuild/makefiles.rst:1417
msgid "objcopy"
msgstr ""

#: ../../../kbuild/makefiles.rst:1418
msgid ""
"Copy binary. Uses OBJCOPYFLAGS usually specified in arch/$(SRCARCH)/Makefile."
msgstr ""

#: ../../../kbuild/makefiles.rst:1421
msgid "OBJCOPYFLAGS_$@ may be used to set additional options."
msgstr ""

#: ../../../kbuild/makefiles.rst:1423
msgid "gzip"
msgstr ""

#: ../../../kbuild/makefiles.rst:1424
msgid "Compress target. Use maximum compression to compress target."
msgstr ""

#: ../../../kbuild/makefiles.rst:1432
msgid "dtc"
msgstr ""

#: ../../../kbuild/makefiles.rst:1433
msgid ""
"Create flattened device tree blob object suitable for linking into vmlinux. "
"Device tree blobs linked into vmlinux are placed in an init section in the "
"image. Platform code *must* copy the blob to non-init memory prior to "
"calling unflatten_device_tree()."
msgstr ""

#: ../../../kbuild/makefiles.rst:1438
msgid ""
"To use this command, simply add ``*.dtb`` into obj-y or targets, or make "
"some other target depend on ``%.dtb``"
msgstr ""

#: ../../../kbuild/makefiles.rst:1441
msgid ""
"A central rule exists to create ``$(obj)/%.dtb`` from ``$(src)/%.dts``; "
"architecture Makefiles do no need to explicitly write out that rule."
msgstr ""

#: ../../../kbuild/makefiles.rst:1450
msgid "Preprocessing linker scripts"
msgstr ""

#: ../../../kbuild/makefiles.rst:1452
msgid ""
"When the vmlinux image is built, the linker script arch/$(SRCARCH)/kernel/"
"vmlinux.lds is used."
msgstr ""

#: ../../../kbuild/makefiles.rst:1455
msgid ""
"The script is a preprocessed variant of the file vmlinux.lds.S located in "
"the same directory."
msgstr ""

#: ../../../kbuild/makefiles.rst:1458
msgid "kbuild knows .lds files and includes a rule ``*lds.S`` -> ``*lds``."
msgstr ""

#: ../../../kbuild/makefiles.rst:1465
msgid ""
"The assignment to extra-y is used to tell kbuild to build the target vmlinux."
"lds."
msgstr ""

#: ../../../kbuild/makefiles.rst:1468
msgid ""
"The assignment to $(CPPFLAGS_vmlinux.lds) tells kbuild to use the specified "
"options when building the target vmlinux.lds."
msgstr ""

#: ../../../kbuild/makefiles.rst:1471
msgid "When building the ``*.lds`` target, kbuild uses the variables::"
msgstr ""

#: ../../../kbuild/makefiles.rst:1479
msgid ""
"The kbuild infrastructure for ``*lds`` files is used in several architecture-"
"specific files."
msgstr ""

#: ../../../kbuild/makefiles.rst:1483
msgid "Generic header files"
msgstr ""

#: ../../../kbuild/makefiles.rst:1485
msgid ""
"The directory include/asm-generic contains the header files that may be "
"shared between individual architectures."
msgstr ""

#: ../../../kbuild/makefiles.rst:1488
msgid ""
"The recommended approach how to use a generic header file is to list the "
"file in the Kbuild file."
msgstr ""

#: ../../../kbuild/makefiles.rst:1491
msgid "See `generic-y`_ for further info on syntax etc."
msgstr ""

#: ../../../kbuild/makefiles.rst:1494
msgid "Post-link pass"
msgstr ""

#: ../../../kbuild/makefiles.rst:1496
msgid ""
"If the file arch/xxx/Makefile.postlink exists, this makefile will be invoked "
"for post-link objects (vmlinux and modules.ko) for architectures to run post-"
"link passes on. Must also handle the clean target."
msgstr ""

#: ../../../kbuild/makefiles.rst:1501
msgid ""
"This pass runs after kallsyms generation. If the architecture needs to "
"modify symbol locations, rather than manipulate the kallsyms, it may be "
"easier to add another postlink target for .tmp_vmlinux? targets to be called "
"from link-vmlinux.sh."
msgstr ""

#: ../../../kbuild/makefiles.rst:1506
msgid ""
"For example, powerpc uses this to check relocation sanity of the linked "
"vmlinux file."
msgstr ""

#: ../../../kbuild/makefiles.rst:1510
msgid "Kbuild syntax for exported headers"
msgstr ""

#: ../../../kbuild/makefiles.rst:1512
msgid ""
"The kernel includes a set of headers that is exported to userspace. Many "
"headers can be exported as-is but other headers require a minimal pre-"
"processing before they are ready for user-space."
msgstr ""

#: ../../../kbuild/makefiles.rst:1516
msgid "The pre-processing does:"
msgstr ""

#: ../../../kbuild/makefiles.rst:1518
msgid "drop kernel-specific annotations"
msgstr ""

#: ../../../kbuild/makefiles.rst:1519
msgid "drop include of compiler.h"
msgstr ""

#: ../../../kbuild/makefiles.rst:1520
msgid ""
"drop all sections that are kernel internal (guarded by ``ifdef __KERNEL__``)"
msgstr ""

#: ../../../kbuild/makefiles.rst:1522
msgid ""
"All headers under include/uapi/, include/generated/uapi/, arch/<arch>/"
"include/uapi/ and arch/<arch>/include/generated/uapi/ are exported."
msgstr ""

#: ../../../kbuild/makefiles.rst:1526
msgid ""
"A Kbuild file may be defined under arch/<arch>/include/uapi/asm/ and arch/"
"<arch>/include/asm/ to list asm files coming from asm-generic."
msgstr ""

#: ../../../kbuild/makefiles.rst:1529
msgid "See subsequent chapter for the syntax of the Kbuild file."
msgstr ""

#: ../../../kbuild/makefiles.rst:1532
msgid "no-export-headers"
msgstr ""

#: ../../../kbuild/makefiles.rst:1534
msgid ""
"no-export-headers is essentially used by include/uapi/linux/Kbuild to avoid "
"exporting specific headers (e.g. kvm.h) on architectures that do not support "
"it. It should be avoided as much as possible."
msgstr ""

#: ../../../kbuild/makefiles.rst:1539
msgid "generic-y"
msgstr ""

#: ../../../kbuild/makefiles.rst:1541
msgid ""
"If an architecture uses a verbatim copy of a header from include/asm-generic "
"then this is listed in the file arch/$(SRCARCH)/include/asm/Kbuild like this:"
msgstr ""

#: ../../../kbuild/makefiles.rst:1551
msgid ""
"During the prepare phase of the build a wrapper include file is generated in "
"the directory::"
msgstr ""

#: ../../../kbuild/makefiles.rst:1556
msgid ""
"When a header is exported where the architecture uses the generic header a "
"similar wrapper is generated as part of the set of exported headers in the "
"directory::"
msgstr ""

#: ../../../kbuild/makefiles.rst:1562
msgid "The generated wrapper will in both cases look like the following:"
msgstr ""

#: ../../../kbuild/makefiles.rst:1564
msgid "Example: termios.h::"
msgstr ""

#: ../../../kbuild/makefiles.rst:1569
msgid "generated-y"
msgstr ""

#: ../../../kbuild/makefiles.rst:1571
msgid ""
"If an architecture generates other header files alongside generic-y "
"wrappers, generated-y specifies them."
msgstr ""

#: ../../../kbuild/makefiles.rst:1574
msgid ""
"This prevents them being treated as stale asm-generic wrappers and removed."
msgstr ""

#: ../../../kbuild/makefiles.rst:1583
msgid "mandatory-y"
msgstr ""

#: ../../../kbuild/makefiles.rst:1585
msgid ""
"mandatory-y is essentially used by include/(uapi/)asm-generic/Kbuild to "
"define the minimum set of ASM headers that all architectures must have."
msgstr ""

#: ../../../kbuild/makefiles.rst:1588
msgid ""
"This works like optional generic-y. If a mandatory header is missing in arch/"
"$(SRCARCH)/include/(uapi/)/asm, Kbuild will automatically generate a wrapper "
"of the asm-generic one."
msgstr ""

#: ../../../kbuild/makefiles.rst:1593
msgid "Kbuild Variables"
msgstr ""

#: ../../../kbuild/makefiles.rst:1595
msgid "The top Makefile exports the following variables:"
msgstr ""

#: ../../../kbuild/makefiles.rst:1597
msgid "VERSION, PATCHLEVEL, SUBLEVEL, EXTRAVERSION"
msgstr ""

#: ../../../kbuild/makefiles.rst:1598
msgid ""
"These variables define the current kernel version.  A few arch Makefiles "
"actually use these values directly; they should use $(KERNELRELEASE) instead."
msgstr ""

#: ../../../kbuild/makefiles.rst:1602
msgid ""
"$(VERSION), $(PATCHLEVEL), and $(SUBLEVEL) define the basic three-part "
"version number, such as \"2\", \"4\", and \"0\".  These three values are "
"always numeric."
msgstr ""

#: ../../../kbuild/makefiles.rst:1606
msgid ""
"$(EXTRAVERSION) defines an even tinier sublevel for pre-patches or "
"additional patches.        It is usually some non-numeric string such as \"-"
"pre4\", and is often blank."
msgstr ""

#: ../../../kbuild/makefiles.rst:1610
msgid "KERNELRELEASE"
msgstr ""

#: ../../../kbuild/makefiles.rst:1611
msgid ""
"$(KERNELRELEASE) is a single string such as \"2.4.0-pre4\", suitable for "
"constructing installation directory names or showing in version strings.  "
"Some arch Makefiles use it for this purpose."
msgstr ""

#: ../../../kbuild/makefiles.rst:1615
msgid "ARCH"
msgstr ""

#: ../../../kbuild/makefiles.rst:1616
msgid ""
"This variable defines the target architecture, such as \"i386\", \"arm\", or "
"\"sparc\". Some kbuild Makefiles test $(ARCH) to determine which files to "
"compile."
msgstr ""

#: ../../../kbuild/makefiles.rst:1620
msgid ""
"By default, the top Makefile sets $(ARCH) to be the same as the host system "
"architecture.  For a cross build, a user may override the value of $(ARCH) "
"on the command line::"
msgstr ""

#: ../../../kbuild/makefiles.rst:1626
msgid "SRCARCH"
msgstr ""

#: ../../../kbuild/makefiles.rst:1627
msgid "This variable specifies the directory in arch/ to build."
msgstr ""

#: ../../../kbuild/makefiles.rst:1629
msgid ""
"ARCH and SRCARCH may not necessarily match. A couple of arch directories are "
"biarch, that is, a single ``arch/*/`` directory supports both 32-bit and 64-"
"bit."
msgstr ""

#: ../../../kbuild/makefiles.rst:1633
msgid ""
"For example, you can pass in ARCH=i386, ARCH=x86_64, or ARCH=x86. For all of "
"them, SRCARCH=x86 because arch/x86/ supports both i386 and x86_64."
msgstr ""

#: ../../../kbuild/makefiles.rst:1637
msgid "INSTALL_PATH"
msgstr ""

#: ../../../kbuild/makefiles.rst:1638
msgid ""
"This variable defines a place for the arch Makefiles to install the resident "
"kernel image and System.map file. Use this for architecture-specific install "
"targets."
msgstr ""

#: ../../../kbuild/makefiles.rst:1642
msgid "INSTALL_MOD_PATH, MODLIB"
msgstr ""

#: ../../../kbuild/makefiles.rst:1643
msgid ""
"$(INSTALL_MOD_PATH) specifies a prefix to $(MODLIB) for module "
"installation.  This variable is not defined in the Makefile but may be "
"passed in by the user if desired."
msgstr ""

#: ../../../kbuild/makefiles.rst:1647
msgid ""
"$(MODLIB) specifies the directory for module installation. The top Makefile "
"defines $(MODLIB) to $(INSTALL_MOD_PATH)/lib/modules/$(KERNELRELEASE).  The "
"user may override this value on the command line if desired."
msgstr ""

#: ../../../kbuild/makefiles.rst:1652
msgid "INSTALL_MOD_STRIP"
msgstr ""

#: ../../../kbuild/makefiles.rst:1653
msgid ""
"If this variable is specified, it will cause modules to be stripped after "
"they are installed.  If INSTALL_MOD_STRIP is \"1\", then the default option "
"--strip-debug will be used.  Otherwise, the INSTALL_MOD_STRIP value will be "
"used as the option(s) to the strip command."
msgstr ""

#: ../../../kbuild/makefiles.rst:1659
msgid "INSTALL_DTBS_PATH"
msgstr ""

#: ../../../kbuild/makefiles.rst:1660
msgid ""
"This variable specifies a prefix for relocations required by build roots. It "
"defines a place for installing the device tree blobs. Like INSTALL_MOD_PATH, "
"it isn't defined in the Makefile, but can be passed by the user if desired. "
"Otherwise it defaults to the kernel install path."
msgstr ""

#: ../../../kbuild/makefiles.rst:1667
msgid "Makefile language"
msgstr ""

#: ../../../kbuild/makefiles.rst:1669
msgid ""
"The kernel Makefiles are designed to be run with GNU Make.  The Makefiles "
"use only the documented features of GNU Make, but they do use many GNU "
"extensions."
msgstr ""

#: ../../../kbuild/makefiles.rst:1673
msgid ""
"GNU Make supports elementary list-processing functions.  The kernel "
"Makefiles use a novel style of list building and manipulation with few "
"``if`` statements."
msgstr ""

#: ../../../kbuild/makefiles.rst:1677
msgid ""
"GNU Make has two assignment operators, ``:=`` and ``=``.  ``:=`` performs "
"immediate evaluation of the right-hand side and stores an actual string into "
"the left-hand side.  ``=`` is like a formula definition; it stores the right-"
"hand side in an unevaluated form and then evaluates this form each time the "
"left-hand side is used."
msgstr ""

#: ../../../kbuild/makefiles.rst:1683
msgid ""
"There are some cases where ``=`` is appropriate.  Usually, though, ``:=`` is "
"the right choice."
msgstr ""

#: ../../../kbuild/makefiles.rst:1687
msgid "Credits"
msgstr ""

#: ../../../kbuild/makefiles.rst:1689
msgid ""
"Original version made by Michael Elizabeth Chastain, <mailto:mec@shout.net>"
msgstr ""

#: ../../../kbuild/makefiles.rst:1690
msgid "Updates by Kai Germaschewski <kai@tp1.ruhr-uni-bochum.de>"
msgstr ""

#: ../../../kbuild/makefiles.rst:1691
msgid "Updates by Sam Ravnborg <sam@ravnborg.org>"
msgstr ""

#: ../../../kbuild/makefiles.rst:1692
msgid "Language QA by Jan Engelhardt <jengelh@gmx.de>"
msgstr ""

#: ../../../kbuild/makefiles.rst:1695
msgid "TODO"
msgstr ""

#: ../../../kbuild/makefiles.rst:1697
msgid "Generating offset header files."
msgstr ""

#: ../../../kbuild/makefiles.rst:1698
msgid "Add more variables to chapters 7 or 9?"
msgstr ""
