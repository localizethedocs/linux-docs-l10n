# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../arch/powerpc/dexcr.rst:5
msgid "DEXCR (Dynamic Execution Control Register)"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:8
msgid "Overview"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:10
msgid ""
"The DEXCR is a privileged special purpose register (SPR) introduced in "
"PowerPC ISA 3.1B (Power10) that allows per-cpu control over several dynamic "
"execution behaviours. These behaviours include speculation (e.g., indirect "
"branch target prediction) and enabling return-oriented programming (ROP) "
"protection instructions."
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:16
msgid ""
"The execution control is exposed in hardware as up to 32 bits ('aspects') in "
"the DEXCR. Each aspect controls a certain behaviour, and can be set or "
"cleared to enable/disable the aspect. There are several variants of the "
"DEXCR for different purposes:"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:21
msgid "DEXCR"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:22
msgid ""
"A privileged SPR that can control aspects for userspace and kernel space"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:23
msgid "HDEXCR"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:24
msgid ""
"A hypervisor-privileged SPR that can control aspects for the hypervisor and "
"enforce aspects for the kernel and userspace."
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:26
msgid "UDEXCR"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:27
msgid ""
"An optional ultravisor-privileged SPR that can control aspects for the "
"ultravisor."
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:29
msgid ""
"Userspace can examine the current DEXCR state using a dedicated SPR that "
"provides a non-privileged read-only view of the userspace DEXCR aspects. "
"There is also an SPR that provides a read-only view of the hypervisor "
"enforced aspects, which ORed with the userspace DEXCR view gives the "
"effective DEXCR state for a process."
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:37
msgid "Configuration"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:40
msgid "prctl"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:42
msgid ""
"A process can control its own userspace DEXCR value using the "
"``PR_PPC_GET_DEXCR`` and ``PR_PPC_SET_DEXCR`` pair of :manpage:`prctl(2)` "
"commands. These calls have the form::"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:49
msgid ""
"The possible 'which' and 'ctrl' values are as follows. Note there is no "
"relation between the 'which' value and the DEXCR aspect's index."
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:56
msgid "``prctl()`` which"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:57
msgid "Aspect name"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:58
msgid "Aspect index"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:60
msgid "``PR_PPC_DEXCR_SBHE``"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:61
msgid "Speculative Branch Hint Enable (SBHE)"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:62
msgid "0"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:64
msgid "``PR_PPC_DEXCR_IBRTPD``"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:65
msgid "Indirect Branch Recurrent Target Prediction Disable (IBRTPD)"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:66
msgid "3"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:68
msgid "``PR_PPC_DEXCR_SRAPD``"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:69
msgid "Subroutine Return Address Prediction Disable (SRAPD)"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:70
msgid "4"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:72
msgid "``PR_PPC_DEXCR_NPHIE``"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:73
msgid "Non-Privileged Hash Instruction Enable (NPHIE)"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:74
msgid "5"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:80
msgid "``prctl()`` ctrl"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:81 ../../../arch/powerpc/dexcr.rst:139
#: ../../../arch/powerpc/dexcr.rst:155
msgid "Meaning"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:83
msgid "``PR_PPC_DEXCR_CTRL_EDITABLE``"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:84
msgid "This aspect can be configured with PR_PPC_SET_DEXCR (get only)"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:86
msgid "``PR_PPC_DEXCR_CTRL_SET``"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:87
msgid "This aspect is set / set this aspect"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:89
msgid "``PR_PPC_DEXCR_CTRL_CLEAR``"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:90
msgid "This aspect is clear / clear this aspect"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:92
msgid "``PR_PPC_DEXCR_CTRL_SET_ONEXEC``"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:93
msgid "This aspect will be set after exec / set this aspect after exec"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:95
msgid "``PR_PPC_DEXCR_CTRL_CLEAR_ONEXEC``"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:96
msgid "This aspect will be clear after exec / clear this aspect after exec"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:98
msgid "Note that"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:100
msgid ""
"which is a plain value, not a bitmask. Aspects must be worked with "
"individually."
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:102
msgid ""
"ctrl is a bitmask. ``PR_PPC_GET_DEXCR`` returns both the current and onexec "
"configuration. For example, ``PR_PPC_GET_DEXCR`` may return "
"``PR_PPC_DEXCR_CTRL_EDITABLE | PR_PPC_DEXCR_CTRL_SET | "
"PR_PPC_DEXCR_CTRL_CLEAR_ONEXEC``. This would indicate the aspect is "
"currently set, it will be cleared when you run exec, and you can change this "
"with the ``PR_PPC_SET_DEXCR`` prctl."
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:109
msgid ""
"The set/clear terminology refers to setting/clearing the bit in the DEXCR. "
"For example::"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:114
msgid ""
"will set the IBRTPD aspect bit in the DEXCR, causing indirect branch "
"prediction to be disabled."
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:117
msgid ""
"The status returned by ``PR_PPC_GET_DEXCR`` represents what value the "
"process would like applied. It does not include any alternative overrides, "
"such as if the hypervisor is enforcing the aspect be set. To see the true "
"DEXCR state software should read the appropriate SPRs directly."
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:122
msgid ""
"The aspect state when starting a process is copied from the parent's state "
"on :manpage:`fork(2)`. The state is reset to a fixed value on :manpage:"
"`execve(2)`. The PR_PPC_SET_DEXCR prctl() can control both of these values."
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:127
msgid "The ``*_ONEXEC`` controls do not change the current process's DEXCR."
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:129
msgid ""
"Use ``PR_PPC_SET_DEXCR`` with one of ``PR_PPC_DEXCR_CTRL_SET`` or "
"``PR_PPC_DEXCR_CTRL_CLEAR`` to edit a given aspect."
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:132
msgid ""
"Common error codes for both getting and setting the DEXCR are as follows:"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:138 ../../../arch/powerpc/dexcr.rst:154
msgid "Error"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:141 ../../../arch/powerpc/dexcr.rst:157
#: ../../../arch/powerpc/dexcr.rst:160
msgid "``EINVAL``"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:142
msgid "The DEXCR is not supported by the kernel."
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:144
msgid "``ENODEV``"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:145
msgid ""
"The aspect is not recognised by the kernel or not supported by the hardware."
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:148
msgid "``PR_PPC_SET_DEXCR`` may also report the following error codes:"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:158
msgid "The ctrl value contains unrecognised flags."
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:161
msgid ""
"The ctrl value contains mutually conflicting flags (e.g., "
"``PR_PPC_DEXCR_CTRL_SET | PR_PPC_DEXCR_CTRL_CLEAR``)"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:164 ../../../arch/powerpc/dexcr.rst:168
msgid "``EPERM``"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:165
msgid ""
"This aspect cannot be modified with prctl() (check for the "
"PR_PPC_DEXCR_CTRL_EDITABLE flag with PR_PPC_GET_DEXCR)."
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:169
msgid ""
"The process does not have sufficient privilege to perform the operation. For "
"example, clearing NPHIE on exec is a privileged operation (a process can "
"still clear its own NPHIE aspect without privileges)."
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:173
msgid ""
"This interface allows a process to control its own DEXCR aspects, and also "
"set the initial DEXCR value for any children in its process tree (up to the "
"next child to use an ``*_ONEXEC`` control). This allows fine-grained control "
"over the default value of the DEXCR, for example allowing containers to run "
"with different default values."
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:181
msgid "coredump and ptrace"
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:183
msgid ""
"The userspace values of the DEXCR and HDEXCR (in this order) are exposed "
"under ``NT_PPC_DEXCR``. These are each 64 bits and readonly, and are "
"intended to assist with core dumps. The DEXCR may be made writable in "
"future. The top 32 bits of both registers (corresponding to the non-"
"userspace bits) are masked off."
msgstr ""

#: ../../../arch/powerpc/dexcr.rst:188
msgid ""
"If the kernel config ``CONFIG_CHECKPOINT_RESTORE`` is enabled, then "
"``NT_PPC_HASHKEYR`` is available and exposes the HASHKEYR value of the "
"process for reading and writing. This is a tradeoff between increased "
"security and checkpoint/restore support: a process should normally have no "
"need to know its secret key, but restoring a process requires setting its "
"original key. The key therefore appears in core dumps, and an attacker may "
"be able to retrieve it from a coredump and effectively bypass ROP protection "
"on any threads that share this key (potentially all threads from the same "
"parent that have not run ``exec()``)."
msgstr ""
