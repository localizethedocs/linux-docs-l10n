# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-20 11:24+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../bpf/cpumasks.rst:7
msgid "BPF cpumask kfuncs"
msgstr ""

#: ../../../bpf/cpumasks.rst:10
msgid "1. Introduction"
msgstr ""

#: ../../../bpf/cpumasks.rst:12
msgid ""
"``struct cpumask`` is a bitmap data structure in the kernel whose indices "
"reflect the CPUs on the system. Commonly, cpumasks are used to track which "
"CPUs a task is affinitized to, but they can also be used to e.g. track which "
"cores are associated with a scheduling domain, which cores on a machine are "
"idle, etc."
msgstr ""

#: ../../../bpf/cpumasks.rst:18
msgid ""
"BPF provides programs with a set of :ref:`kfuncs-header-label` that can be "
"used to allocate, mutate, query, and free cpumasks."
msgstr ""

#: ../../../bpf/cpumasks.rst:22
msgid "2. BPF cpumask objects"
msgstr ""

#: ../../../bpf/cpumasks.rst:24
msgid ""
"There are two different types of cpumasks that can be used by BPF programs."
msgstr ""

#: ../../../bpf/cpumasks.rst:27
msgid "2.1 ``struct bpf_cpumask *``"
msgstr ""

#: ../../../bpf/cpumasks.rst:29
msgid ""
"``struct bpf_cpumask *`` is a cpumask that is allocated by BPF, on behalf of "
"a BPF program, and whose lifecycle is entirely controlled by BPF. These "
"cpumasks are RCU-protected, can be mutated, can be used as kptrs, and can be "
"safely cast to a ``struct cpumask *``."
msgstr ""

#: ../../../bpf/cpumasks.rst:35
msgid "2.1.1 ``struct bpf_cpumask *`` lifecycle"
msgstr ""

#: ../../../bpf/cpumasks.rst:37
msgid ""
"A ``struct bpf_cpumask *`` is allocated, acquired, and released, using the "
"following functions:"
msgstr ""

#: ../../../bpf/cpumasks:40: kernel/bpf/cpumask.c:40
msgid "Create a mutable BPF cpumask."
msgstr ""

#: ../../../bpf/cpumasks:213: kernel/bpf/cpumask.c:165 kernel/bpf/cpumask.c:178
#: ../../../bpf/cpumasks:258: kernel/bpf/cpumask.c:208 kernel/bpf/cpumask.c:225
#: ../../../bpf/cpumasks:266: kernel/bpf/cpumask.c:243 kernel/bpf/cpumask.c:252
#: ../../../bpf/cpumasks:276: kernel/bpf/cpumask.c:261 kernel/bpf/cpumask.c:280
#: kernel/bpf/cpumask.c:295 ../../../bpf/cpumasks:340: kernel/bpf/cpumask.c:388
#: ../../../bpf/cpumasks:353: kernel/bpf/cpumask.c:116 kernel/bpf/cpumask.c:131
#: kernel/bpf/cpumask.c:147 kernel/bpf/cpumask.c:191 kernel/bpf/cpumask.c:434
#: ../../../bpf/cpumasks:357: kernel/bpf/cpumask.c:310 kernel/bpf/cpumask.c:326
#: kernel/bpf/cpumask.c:342 kernel/bpf/cpumask.c:358 kernel/bpf/cpumask.c:373
#: ../../../bpf/cpumasks:361: kernel/bpf/cpumask.c:400 kernel/bpf/cpumask.c:415
#: ../../../bpf/cpumasks:40: kernel/bpf/cpumask.c:44 ../../../bpf/cpumasks:43:
#: kernel/bpf/cpumask.c:75 ../../../bpf/cpumasks:46: kernel/bpf/cpumask.c:94
msgid "**Parameters**"
msgstr ""

#: ../../../bpf/cpumasks:40: kernel/bpf/cpumask.c:46
msgid "``void``"
msgstr ""

#: ../../../bpf/cpumasks:40: kernel/bpf/cpumask.c:1
msgid "no arguments"
msgstr ""

#: ../../../bpf/cpumasks:276: kernel/bpf/cpumask.c:265 kernel/bpf/cpumask.c:281
#: kernel/bpf/cpumask.c:296 ../../../bpf/cpumasks:340: kernel/bpf/cpumask.c:388
#: ../../../bpf/cpumasks:353: kernel/bpf/cpumask.c:115 kernel/bpf/cpumask.c:131
#: kernel/bpf/cpumask.c:148 kernel/bpf/cpumask.c:433 ../../../bpf/cpumasks:357:
#: kernel/bpf/cpumask.c:313 kernel/bpf/cpumask.c:329 kernel/bpf/cpumask.c:345
#: kernel/bpf/cpumask.c:360 kernel/bpf/cpumask.c:375 ../../../bpf/cpumasks:361:
#: kernel/bpf/cpumask.c:402 kernel/bpf/cpumask.c:420 ../../../bpf/cpumasks:40:
#: kernel/bpf/cpumask.c:3 ../../../bpf/cpumasks:43: kernel/bpf/cpumask.c:75
#: ../../../bpf/cpumasks:46: kernel/bpf/cpumask.c:93
msgid "**Description**"
msgstr ""

#: ../../../bpf/cpumasks:40: kernel/bpf/cpumask.c:41
msgid ""
"Allocates a cpumask that can be queried, mutated, acquired, and released by "
"a BPF program. The cpumask returned by this function must either be embedded "
"in a map as a kptr, or freed with bpf_cpumask_release()."
msgstr ""

#: ../../../bpf/cpumasks:40: kernel/bpf/cpumask.c:45
msgid ""
"bpf_cpumask_create() allocates memory using the BPF memory allocator, and "
"will not block. It may return NULL if no memory is available."
msgstr ""

#: ../../../bpf/cpumasks:258: kernel/bpf/cpumask.c:208 kernel/bpf/cpumask.c:226
#: ../../../bpf/cpumasks:276: kernel/bpf/cpumask.c:262
#: ../../../bpf/cpumasks:353: kernel/bpf/cpumask.c:117 kernel/bpf/cpumask.c:133
#: kernel/bpf/cpumask.c:150 kernel/bpf/cpumask.c:191 kernel/bpf/cpumask.c:434
#: ../../../bpf/cpumasks:357: kernel/bpf/cpumask.c:310 kernel/bpf/cpumask.c:326
#: kernel/bpf/cpumask.c:342 kernel/bpf/cpumask.c:357 kernel/bpf/cpumask.c:372
#: ../../../bpf/cpumasks:361: kernel/bpf/cpumask.c:399 kernel/bpf/cpumask.c:416
#: ../../../bpf/cpumasks:40: kernel/bpf/cpumask.c:48 ../../../bpf/cpumasks:43:
#: kernel/bpf/cpumask.c:78
msgid "**Return**"
msgstr ""

#: ../../../bpf/cpumasks:40: kernel/bpf/cpumask.c:49
msgid "A pointer to a new struct bpf_cpumask instance on success."
msgstr ""

#: ../../../bpf/cpumasks:40: kernel/bpf/cpumask.c:50
msgid "NULL if the BPF memory allocator is out of memory."
msgstr ""

#: ../../../bpf/cpumasks:43: kernel/bpf/cpumask.c:71
msgid "Acquire a reference to a BPF cpumask."
msgstr ""

#: ../../../bpf/cpumasks:213: kernel/bpf/cpumask.c:164 kernel/bpf/cpumask.c:177
#: ../../../bpf/cpumasks:258: kernel/bpf/cpumask.c:207 kernel/bpf/cpumask.c:225
#: ../../../bpf/cpumasks:266: kernel/bpf/cpumask.c:245 kernel/bpf/cpumask.c:254
#: ../../../bpf/cpumasks:43: kernel/bpf/cpumask.c:77 ../../../bpf/cpumasks:46:
#: kernel/bpf/cpumask.c:96
msgid "``struct bpf_cpumask *cpumask``"
msgstr ""

#: ../../../bpf/cpumasks:43: kernel/bpf/cpumask.c:72
msgid "The BPF cpumask being acquired. The cpumask must be a trusted pointer."
msgstr ""

#: ../../../bpf/cpumasks:43: kernel/bpf/cpumask.c:74
msgid ""
"Acquires a reference to a BPF cpumask. The cpumask returned by this function "
"must either be embedded in a map as a kptr, or freed with "
"bpf_cpumask_release()."
msgstr ""

#: ../../../bpf/cpumasks:43: kernel/bpf/cpumask.c:79
msgid "The struct bpf_cpumask pointer passed to the function."
msgstr ""

#: ../../../bpf/cpumasks:46: kernel/bpf/cpumask.c:90
msgid "Release a previously acquired BPF cpumask."
msgstr ""

#: ../../../bpf/cpumasks:46: kernel/bpf/cpumask.c:91
msgid "The cpumask being released."
msgstr ""

#: ../../../bpf/cpumasks:46: kernel/bpf/cpumask.c:92
msgid ""
"Releases a previously acquired reference to a BPF cpumask. When the final "
"reference of the BPF cpumask has been released, it is subsequently freed in "
"an RCU callback in the BPF memory allocator."
msgstr ""

#: ../../../bpf/cpumasks.rst:49
msgid "For example:"
msgstr ""

#: ../../../bpf/cpumasks.rst:115
msgid "2.1.1 ``struct bpf_cpumask *`` as kptrs"
msgstr ""

#: ../../../bpf/cpumasks.rst:117
msgid ""
"As mentioned and illustrated above, these ``struct bpf_cpumask *`` objects "
"can also be stored in a map and used as kptrs. If a ``struct bpf_cpumask *`` "
"is in a map, the reference can be removed from the map with bpf_kptr_xchg(), "
"or opportunistically acquired using RCU:"
msgstr ""

#: ../../../bpf/cpumasks.rst:178
msgid "2.2 ``struct cpumask``"
msgstr ""

#: ../../../bpf/cpumasks.rst:180
msgid ""
"``struct cpumask`` is the object that actually contains the cpumask bitmap "
"being queried, mutated, etc. A ``struct bpf_cpumask`` wraps a ``struct "
"cpumask``, which is why it's safe to cast it as such (note however that it "
"is **not** safe to cast a ``struct cpumask *`` to a ``struct bpf_cpumask "
"*``, and the verifier will reject any program that tries to do so)."
msgstr ""

#: ../../../bpf/cpumasks.rst:186
msgid ""
"As we'll see below, any kfunc that mutates its cpumask argument will take a "
"``struct bpf_cpumask *`` as that argument. Any argument that simply queries "
"the cpumask will instead take a ``struct cpumask *``."
msgstr ""

#: ../../../bpf/cpumasks.rst:191
msgid "3. cpumask kfuncs"
msgstr ""

#: ../../../bpf/cpumasks.rst:193
msgid ""
"Above, we described the kfuncs that can be used to allocate, acquire, "
"release, etc a ``struct bpf_cpumask *``. This section of the document will "
"describe the kfuncs for mutating and querying cpumasks."
msgstr ""

#: ../../../bpf/cpumasks.rst:198
msgid "3.1 Mutating cpumasks"
msgstr ""

#: ../../../bpf/cpumasks.rst:200
msgid ""
"Some cpumask kfuncs are \"read-only\" in that they don't mutate any of their "
"arguments, whereas others mutate at least one argument (which means that the "
"argument must be a ``struct bpf_cpumask *``, as described above)."
msgstr ""

#: ../../../bpf/cpumasks.rst:204
msgid ""
"This section will describe all of the cpumask kfuncs which mutate at least "
"one argument. :ref:`cpumasks-querying-label` below describes the read-only "
"kfuncs."
msgstr ""

#: ../../../bpf/cpumasks.rst:208
msgid "3.1.1 Setting and clearing CPUs"
msgstr ""

#: ../../../bpf/cpumasks.rst:210
msgid ""
"bpf_cpumask_set_cpu() and bpf_cpumask_clear_cpu() can be used to set and "
"clear a CPU in a ``struct bpf_cpumask`` respectively:"
msgstr ""

#: ../../../bpf/cpumasks:213: kernel/bpf/cpumask.c:161
msgid "Set a bit for a CPU in a BPF cpumask."
msgstr ""

#: ../../../bpf/cpumasks:213: kernel/bpf/cpumask.c:167 kernel/bpf/cpumask.c:180
#: ../../../bpf/cpumasks:258: kernel/bpf/cpumask.c:210 kernel/bpf/cpumask.c:227
#: ../../../bpf/cpumasks:353: kernel/bpf/cpumask.c:193
msgid "``u32 cpu``"
msgstr ""

#: ../../../bpf/cpumasks:213: kernel/bpf/cpumask.c:162
msgid "The CPU to be set in the cpumask."
msgstr ""

#: ../../../bpf/cpumasks:213: kernel/bpf/cpumask.c:163
msgid "The BPF cpumask in which a bit is being set."
msgstr ""

#: ../../../bpf/cpumasks:213: kernel/bpf/cpumask.c:174
msgid "Clear a bit for a CPU in a BPF cpumask."
msgstr ""

#: ../../../bpf/cpumasks:213: kernel/bpf/cpumask.c:175
msgid "The CPU to be cleared from the cpumask."
msgstr ""

#: ../../../bpf/cpumasks:213: kernel/bpf/cpumask.c:176
msgid "The BPF cpumask in which a bit is being cleared."
msgstr ""

#: ../../../bpf/cpumasks.rst:216
msgid ""
"These kfuncs are pretty straightforward, and can be used, for example, as "
"follows:"
msgstr ""

#: ../../../bpf/cpumasks.rst:254
msgid ""
"bpf_cpumask_test_and_set_cpu() and bpf_cpumask_test_and_clear_cpu() are "
"complementary kfuncs that allow callers to atomically test and set (or "
"clear) CPUs:"
msgstr ""

#: ../../../bpf/cpumasks:258: kernel/bpf/cpumask.c:204
msgid "Atomically test and set a CPU in a BPF cpumask."
msgstr ""

#: ../../../bpf/cpumasks:258: kernel/bpf/cpumask.c:205
msgid "The CPU being set and queried for."
msgstr ""

#: ../../../bpf/cpumasks:258: kernel/bpf/cpumask.c:206
msgid "The BPF cpumask being set and queried for containing a CPU."
msgstr ""

#: ../../../bpf/cpumasks:258: kernel/bpf/cpumask.c:208 kernel/bpf/cpumask.c:226
#: ../../../bpf/cpumasks:353: kernel/bpf/cpumask.c:191
msgid "true  - **cpu** is set in the cpumask"
msgstr ""

#: ../../../bpf/cpumasks:258: kernel/bpf/cpumask.c:209 kernel/bpf/cpumask.c:227
msgid "false - **cpu** was not set in the cpumask, or **cpu** is invalid."
msgstr ""

#: ../../../bpf/cpumasks:258: kernel/bpf/cpumask.c:221
msgid "Atomically test and clear a CPU in a BPF cpumask."
msgstr ""

#: ../../../bpf/cpumasks:258: kernel/bpf/cpumask.c:223
msgid "The CPU being cleared and queried for."
msgstr ""

#: ../../../bpf/cpumasks:258: kernel/bpf/cpumask.c:224
msgid "The BPF cpumask being cleared and queried for containing a CPU."
msgstr ""

#: ../../../bpf/cpumasks.rst:263
msgid ""
"We can also set and clear entire ``struct bpf_cpumask *`` objects in one "
"operation using bpf_cpumask_setall() and bpf_cpumask_clear():"
msgstr ""

#: ../../../bpf/cpumasks:266: kernel/bpf/cpumask.c:239
msgid "Set all of the bits in a BPF cpumask."
msgstr ""

#: ../../../bpf/cpumasks:266: kernel/bpf/cpumask.c:240
msgid "The BPF cpumask having all of its bits set."
msgstr ""

#: ../../../bpf/cpumasks:266: kernel/bpf/cpumask.c:248
msgid "Clear all of the bits in a BPF cpumask."
msgstr ""

#: ../../../bpf/cpumasks:266: kernel/bpf/cpumask.c:249
msgid "The BPF cpumask being cleared."
msgstr ""

#: ../../../bpf/cpumasks.rst:270
msgid "3.1.2 Operations between cpumasks"
msgstr ""

#: ../../../bpf/cpumasks.rst:272
msgid ""
"In addition to setting and clearing individual CPUs in a single cpumask, "
"callers can also perform bitwise operations between multiple cpumasks using "
"bpf_cpumask_and(), bpf_cpumask_or(), and bpf_cpumask_xor():"
msgstr ""

#: ../../../bpf/cpumasks:276: kernel/bpf/cpumask.c:257
msgid "AND two cpumasks and store the result."
msgstr ""

#: ../../../bpf/cpumasks:276: kernel/bpf/cpumask.c:263 kernel/bpf/cpumask.c:282
#: kernel/bpf/cpumask.c:297 ../../../bpf/cpumasks:340: kernel/bpf/cpumask.c:390
msgid "``struct bpf_cpumask *dst``"
msgstr ""

#: ../../../bpf/cpumasks:276: kernel/bpf/cpumask.c:258 kernel/bpf/cpumask.c:277
#: kernel/bpf/cpumask.c:292
msgid "The BPF cpumask where the result is being stored."
msgstr ""

#: ../../../bpf/cpumasks:276: kernel/bpf/cpumask.c:260 kernel/bpf/cpumask.c:279
#: kernel/bpf/cpumask.c:294 ../../../bpf/cpumasks:353: kernel/bpf/cpumask.c:149
#: ../../../bpf/cpumasks:357: kernel/bpf/cpumask.c:312 kernel/bpf/cpumask.c:328
#: kernel/bpf/cpumask.c:344 ../../../bpf/cpumasks:361: kernel/bpf/cpumask.c:417
msgid "``const struct cpumask *src1``"
msgstr ""

#: ../../../bpf/cpumasks:276: kernel/bpf/cpumask.c:259 kernel/bpf/cpumask.c:278
#: kernel/bpf/cpumask.c:293 ../../../bpf/cpumasks:357: kernel/bpf/cpumask.c:307
#: kernel/bpf/cpumask.c:323
msgid "The first input."
msgstr ""

#: ../../../bpf/cpumasks:276: kernel/bpf/cpumask.c:261 kernel/bpf/cpumask.c:280
#: kernel/bpf/cpumask.c:295 ../../../bpf/cpumasks:353: kernel/bpf/cpumask.c:147
#: ../../../bpf/cpumasks:357: kernel/bpf/cpumask.c:309 kernel/bpf/cpumask.c:325
#: kernel/bpf/cpumask.c:341 ../../../bpf/cpumasks:361: kernel/bpf/cpumask.c:415
msgid "``const struct cpumask *src2``"
msgstr ""

#: ../../../bpf/cpumasks:276: kernel/bpf/cpumask.c:260 kernel/bpf/cpumask.c:279
#: kernel/bpf/cpumask.c:294 ../../../bpf/cpumasks:357: kernel/bpf/cpumask.c:308
#: kernel/bpf/cpumask.c:324
msgid "The second input."
msgstr ""

#: ../../../bpf/cpumasks:276: kernel/bpf/cpumask.c:262
msgid "true  - **dst** has at least one bit set following the operation"
msgstr ""

#: ../../../bpf/cpumasks:276: kernel/bpf/cpumask.c:263
msgid "false - **dst** is empty following the operation"
msgstr ""

#: ../../../bpf/cpumasks:276: kernel/bpf/cpumask.c:265 kernel/bpf/cpumask.c:280
#: kernel/bpf/cpumask.c:295 ../../../bpf/cpumasks:357: kernel/bpf/cpumask.c:313
#: kernel/bpf/cpumask.c:329 kernel/bpf/cpumask.c:345 ../../../bpf/cpumasks:361:
#: kernel/bpf/cpumask.c:420
msgid ""
"struct bpf_cpumask pointers may be safely passed to **src1** and **src2**."
msgstr ""

#: ../../../bpf/cpumasks:276: kernel/bpf/cpumask.c:276
msgid "OR two cpumasks and store the result."
msgstr ""

#: ../../../bpf/cpumasks:276: kernel/bpf/cpumask.c:291
msgid "XOR two cpumasks and store the result."
msgstr ""

#: ../../../bpf/cpumasks.rst:279
msgid ""
"The following is an example of how they may be used. Note that some of the "
"kfuncs shown in this example will be covered in more detail below."
msgstr ""

#: ../../../bpf/cpumasks.rst:337
msgid ""
"The contents of an entire cpumask may be copied to another using "
"bpf_cpumask_copy():"
msgstr ""

#: ../../../bpf/cpumasks:340: kernel/bpf/cpumask.c:384
msgid "Copy the contents of a cpumask into a BPF cpumask."
msgstr ""

#: ../../../bpf/cpumasks:340: kernel/bpf/cpumask.c:385
msgid "The BPF cpumask being copied into."
msgstr ""

#: ../../../bpf/cpumasks:340: kernel/bpf/cpumask.c:387
msgid "``const struct cpumask *src``"
msgstr ""

#: ../../../bpf/cpumasks:340: kernel/bpf/cpumask.c:386
msgid "The cpumask being copied."
msgstr ""

#: ../../../bpf/cpumasks:340: kernel/bpf/cpumask.c:387
#: ../../../bpf/cpumasks:361: kernel/bpf/cpumask.c:402
msgid "A struct bpf_cpumask pointer may be safely passed to **src**."
msgstr ""

#: ../../../bpf/cpumasks.rst:348
msgid "3.2 Querying cpumasks"
msgstr ""

#: ../../../bpf/cpumasks.rst:350
msgid ""
"In addition to the above kfuncs, there is also a set of read-only kfuncs "
"that can be used to query the contents of cpumasks."
msgstr ""

#: ../../../bpf/cpumasks:353: kernel/bpf/cpumask.c:112
msgid "Get the index of the first nonzero bit in the cpumask."
msgstr ""

#: ../../../bpf/cpumasks:353: kernel/bpf/cpumask.c:118 kernel/bpf/cpumask.c:133
#: kernel/bpf/cpumask.c:190 kernel/bpf/cpumask.c:436 ../../../bpf/cpumasks:357:
#: kernel/bpf/cpumask.c:360 kernel/bpf/cpumask.c:375 ../../../bpf/cpumasks:361:
#: kernel/bpf/cpumask.c:402
msgid "``const struct cpumask *cpumask``"
msgstr ""

#: ../../../bpf/cpumasks:353: kernel/bpf/cpumask.c:113 kernel/bpf/cpumask.c:129
#: kernel/bpf/cpumask.c:431 ../../../bpf/cpumasks:361: kernel/bpf/cpumask.c:397
msgid "The cpumask being queried."
msgstr ""

#: ../../../bpf/cpumasks:353: kernel/bpf/cpumask.c:114
msgid ""
"Find the index of the first nonzero bit of the cpumask. A struct bpf_cpumask "
"pointer may be safely passed to this function."
msgstr ""

#: ../../../bpf/cpumasks:353: kernel/bpf/cpumask.c:118
msgid "The index of the first nonzero bit in the struct cpumask."
msgstr ""

#: ../../../bpf/cpumasks:353: kernel/bpf/cpumask.c:127
msgid "Get the index of the first unset bit in the cpumask."
msgstr ""

#: ../../../bpf/cpumasks:353: kernel/bpf/cpumask.c:130
msgid ""
"Find the index of the first unset bit of the cpumask. A struct bpf_cpumask "
"pointer may be safely passed to this function."
msgstr ""

#: ../../../bpf/cpumasks:353: kernel/bpf/cpumask.c:134
msgid "The index of the first zero bit in the struct cpumask."
msgstr ""

#: ../../../bpf/cpumasks:353: kernel/bpf/cpumask.c:143
msgid "Return the index of the first nonzero bit from the AND of two cpumasks."
msgstr ""

#: ../../../bpf/cpumasks:353: kernel/bpf/cpumask.c:145
#: ../../../bpf/cpumasks:361: kernel/bpf/cpumask.c:413
msgid "The first cpumask."
msgstr ""

#: ../../../bpf/cpumasks:353: kernel/bpf/cpumask.c:146
#: ../../../bpf/cpumasks:361: kernel/bpf/cpumask.c:414
msgid "The second cpumask."
msgstr ""

#: ../../../bpf/cpumasks:353: kernel/bpf/cpumask.c:147
msgid ""
"Find the index of the first nonzero bit of the AND of two cpumasks. struct "
"bpf_cpumask pointers may be safely passed to **src1** and **src2**."
msgstr ""

#: ../../../bpf/cpumasks:353: kernel/bpf/cpumask.c:151
msgid "The index of the first bit that is nonzero in both cpumask instances."
msgstr ""

#: ../../../bpf/cpumasks:353: kernel/bpf/cpumask.c:187
msgid "Test whether a CPU is set in a cpumask."
msgstr ""

#: ../../../bpf/cpumasks:353: kernel/bpf/cpumask.c:188
msgid "The CPU being queried for."
msgstr ""

#: ../../../bpf/cpumasks:353: kernel/bpf/cpumask.c:189
msgid "The cpumask being queried for containing a CPU."
msgstr ""

#: ../../../bpf/cpumasks:353: kernel/bpf/cpumask.c:192
msgid ""
"false - **cpu** was not set in the cpumask, or **cpu** is an invalid cpu."
msgstr ""

#: ../../../bpf/cpumasks:353: kernel/bpf/cpumask.c:430
msgid "Return the number of bits in **cpumask**."
msgstr ""

#: ../../../bpf/cpumasks:353: kernel/bpf/cpumask.c:432
msgid "Count the number of set bits in the given cpumask."
msgstr ""

#: ../../../bpf/cpumasks:353: kernel/bpf/cpumask.c:435
msgid "The number of bits set in the mask."
msgstr ""

#: ../../../bpf/cpumasks:357: kernel/bpf/cpumask.c:306
msgid "Check two cpumasks for equality."
msgstr ""

#: ../../../bpf/cpumasks:357: kernel/bpf/cpumask.c:310
msgid "true   - **src1** and **src2** have the same bits set."
msgstr ""

#: ../../../bpf/cpumasks:357: kernel/bpf/cpumask.c:311
msgid "false  - **src1** and **src2** differ in at least one bit."
msgstr ""

#: ../../../bpf/cpumasks:357: kernel/bpf/cpumask.c:322
msgid "Check two cpumasks for overlap."
msgstr ""

#: ../../../bpf/cpumasks:357: kernel/bpf/cpumask.c:326
msgid "true   - **src1** and **src2** have at least one of the same bits set."
msgstr ""

#: ../../../bpf/cpumasks:357: kernel/bpf/cpumask.c:327
msgid "false  - **src1** and **src2** don't have any of the same bits set."
msgstr ""

#: ../../../bpf/cpumasks:357: kernel/bpf/cpumask.c:338
msgid "Check if a cpumask is a subset of another."
msgstr ""

#: ../../../bpf/cpumasks:357: kernel/bpf/cpumask.c:339
msgid "The first cpumask being checked as a subset."
msgstr ""

#: ../../../bpf/cpumasks:357: kernel/bpf/cpumask.c:340
msgid "The second cpumask being checked as a superset."
msgstr ""

#: ../../../bpf/cpumasks:357: kernel/bpf/cpumask.c:342
msgid "true   - All of the bits of **src1** are set in **src2**."
msgstr ""

#: ../../../bpf/cpumasks:357: kernel/bpf/cpumask.c:343
msgid "false  - At least one bit in **src1** is not set in **src2**."
msgstr ""

#: ../../../bpf/cpumasks:357: kernel/bpf/cpumask.c:354
msgid "Check if a cpumask is empty."
msgstr ""

#: ../../../bpf/cpumasks:357: kernel/bpf/cpumask.c:355 kernel/bpf/cpumask.c:370
msgid "The cpumask being checked."
msgstr ""

#: ../../../bpf/cpumasks:357: kernel/bpf/cpumask.c:357
msgid "true   - None of the bits in **cpumask** are set."
msgstr ""

#: ../../../bpf/cpumasks:357: kernel/bpf/cpumask.c:358
msgid "false  - At least one bit in **cpumask** is set."
msgstr ""

#: ../../../bpf/cpumasks:357: kernel/bpf/cpumask.c:360 kernel/bpf/cpumask.c:375
msgid "A struct bpf_cpumask pointer may be safely passed to **cpumask**."
msgstr ""

#: ../../../bpf/cpumasks:357: kernel/bpf/cpumask.c:369
msgid "Check if a cpumask has all bits set."
msgstr ""

#: ../../../bpf/cpumasks:357: kernel/bpf/cpumask.c:372
msgid "true   - All of the bits in **cpumask** are set."
msgstr ""

#: ../../../bpf/cpumasks:357: kernel/bpf/cpumask.c:373
msgid "false  - At least one bit in **cpumask** is cleared."
msgstr ""

#: ../../../bpf/cpumasks:361: kernel/bpf/cpumask.c:396
msgid "Return a random set CPU from a cpumask."
msgstr ""

#: ../../../bpf/cpumasks:361: kernel/bpf/cpumask.c:399
msgid "A random set bit within [0, num_cpus) if at least one bit is set."
msgstr ""

#: ../../../bpf/cpumasks:361: kernel/bpf/cpumask.c:400 kernel/bpf/cpumask.c:418
msgid ">= num_cpus if no bit is set."
msgstr ""

#: ../../../bpf/cpumasks:361: kernel/bpf/cpumask.c:411
msgid "Return a random set CPU from the AND of two cpumasks."
msgstr ""

#: ../../../bpf/cpumasks:361: kernel/bpf/cpumask.c:416
msgid ""
"A random set bit within [0, num_cpus) from the AND of two cpumasks, if at "
"least one bit is set."
msgstr ""

#: ../../../bpf/cpumasks.rst:366
msgid ""
"Some example usages of these querying kfuncs were shown above. We will not "
"replicate those examples here. Note, however, that all of the aforementioned "
"kfuncs are tested in `tools/testing/selftests/bpf/progs/cpumask_success.c`_, "
"so please take a look there if you're looking for more examples of how they "
"can be used."
msgstr ""

#: ../../../bpf/cpumasks.rst:377
msgid "4. Adding BPF cpumask kfuncs"
msgstr ""

#: ../../../bpf/cpumasks.rst:379
msgid ""
"The set of supported BPF cpumask kfuncs are not (yet) a 1-1 match with the "
"cpumask operations in include/linux/cpumask.h. Any of those cpumask "
"operations could easily be encapsulated in a new kfunc if and when required. "
"If you'd like to support a new cpumask operation, please feel free to submit "
"a patch. If you do add a new cpumask kfunc, please document it here, and add "
"any relevant selftest testcases to the cpumask selftest suite."
msgstr ""
