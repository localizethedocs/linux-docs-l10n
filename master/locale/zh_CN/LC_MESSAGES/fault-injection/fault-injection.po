# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../fault-injection/fault-injection.rst:3
msgid "Fault injection capabilities infrastructure"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:5
msgid "See also \"every_nth\" module option for scsi_debug."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:9
msgid "Available fault injection capabilities"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:11
msgid "failslab"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:13
msgid "injects slab allocation failures. (kmalloc(), kmem_cache_alloc(), ...)"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:15
msgid "fail_page_alloc"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:17
msgid ""
"injects page allocation failures. (alloc_pages(), get_free_pages(), ...)"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:19
msgid "fail_usercopy"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:21
msgid ""
"injects failures in user memory access functions. (copy_from_user(), "
"get_user(), ...)"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:23
msgid "fail_futex"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:25
msgid "injects futex deadlock and uaddr fault errors."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:27
msgid "fail_sunrpc"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:29
msgid "injects kernel RPC client and server failures."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:31
msgid "fail_make_request"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:33
msgid ""
"injects disk IO errors on devices permitted by setting /sys/block/<device>/"
"make-it-fail or /sys/block/<device>/<partition>/make-it-fail. "
"(submit_bio_noacct())"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:37
msgid "fail_mmc_request"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:39
msgid ""
"injects MMC data errors on devices permitted by setting debugfs entries "
"under /sys/kernel/debug/mmc0/fail_mmc_request"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:42
msgid "fail_function"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:44
msgid ""
"injects error return on specific functions, which are marked by "
"ALLOW_ERROR_INJECTION() macro, by setting debugfs entries under /sys/kernel/"
"debug/fail_function. No boot option supported."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:48
msgid "fail_skb_realloc"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:50
msgid ""
"inject skb (socket buffer) reallocation events into the network path. The "
"primary goal is to identify and prevent issues related to pointer "
"mismanagement in the network subsystem.  By forcing skb reallocation at "
"strategic points, this feature creates scenarios where existing pointers to "
"skb headers become invalid."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:56
msgid ""
"When the fault is injected and the reallocation is triggered, cached "
"pointers to skb headers and data no longer reference valid memory locations. "
"This deliberate invalidation helps expose code paths where proper pointer "
"updating is neglected after a reallocation event."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:61
msgid ""
"By creating these controlled fault scenarios, the system can catch instances "
"where stale pointers are used, potentially leading to memory corruption or "
"system instability."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:65
msgid ""
"To select the interface to act on, write the network name to /sys/kernel/"
"debug/fail_skb_realloc/devname. If this field is left empty (which is the "
"default value), skb reallocation will be forced on all network interfaces."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:70
msgid ""
"The effectiveness of this fault detection is enhanced when KASAN is enabled, "
"as it helps identify invalid memory references and use-after-free (UAF) "
"issues."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:74
msgid "NVMe fault injection"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:76
msgid ""
"inject NVMe status code and retry flag on devices permitted by setting "
"debugfs entries under /sys/kernel/debug/nvme*/fault_inject. The default "
"status code is NVME_SC_INVALID_OPCODE with no retry. The status code and "
"retry flag can be set via the debugfs."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:81
msgid "Null test block driver fault injection"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:83
msgid ""
"inject IO timeouts by setting config items under /sys/kernel/config/nullb/"
"<disk>/timeout_inject, inject requeue requests by setting config items "
"under /sys/kernel/config/nullb/<disk>/requeue_inject, and inject init_hctx() "
"errors by setting config items under /sys/kernel/config/nullb/<disk>/"
"init_hctx_fault_inject."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:91
msgid "Configure fault-injection capabilities behavior"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:94
#: ../../../fault-injection/fault-injection.rst:376
msgid "debugfs entries"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:96
msgid ""
"fault-inject-debugfs kernel module provides some debugfs entries for runtime "
"configuration of fault-injection capabilities."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:99
msgid "/sys/kernel/debug/fail*/probability:"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:101
msgid "likelihood of failure injection, in percent."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:103
msgid "Format: <percent>"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:105
msgid ""
"Note that one-failure-per-hundred is a very high error rate for some "
"testcases.  Consider setting probability=100 and configure /sys/kernel/debug/"
"fail*/interval for such testcases."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:109
msgid "/sys/kernel/debug/fail*/interval:"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:111
msgid ""
"specifies the interval between failures, for calls to should_fail() that "
"pass all the other tests."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:114
msgid ""
"Note that if you enable this, by setting interval>1, you will probably want "
"to set probability=100."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:117
msgid "/sys/kernel/debug/fail*/times:"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:119
msgid ""
"specifies how many times failures may happen at most. A value of -1 means "
"\"no limit\"."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:122
msgid "/sys/kernel/debug/fail*/space:"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:124
msgid ""
"specifies an initial resource \"budget\", decremented by \"size\" on each "
"call to should_fail(,size).  Failure injection is suppressed until \"space\" "
"reaches zero."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:128
msgid "/sys/kernel/debug/fail*/verbose"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:130
msgid "Format: { 0 | 1 | 2 }"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:132
msgid ""
"specifies the verbosity of the messages when failure is injected.  '0' means "
"no messages; '1' will print only a single log line per failure; '2' will "
"print a call trace too -- useful to debug the problems revealed by fault "
"injection."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:137
msgid "/sys/kernel/debug/fail*/task-filter:"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:139
#: ../../../fault-injection/fault-injection.rst:165
#: ../../../fault-injection/fault-injection.rst:171
#: ../../../fault-injection/fault-injection.rst:181
#: ../../../fault-injection/fault-injection.rst:193
#: ../../../fault-injection/fault-injection.rst:200
#: ../../../fault-injection/fault-injection.rst:207
#: ../../../fault-injection/fault-injection.rst:214
msgid "Format: { 'Y' | 'N' }"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:141
msgid ""
"A value of 'N' disables filtering by process (default). Any positive value "
"limits failures to only processes indicated by /proc/<pid>/make-it-fail==1."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:145
msgid ""
"/sys/kernel/debug/fail*/require-start, /sys/kernel/debug/fail*/require-end, /"
"sys/kernel/debug/fail*/reject-start, /sys/kernel/debug/fail*/reject-end:"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:150
msgid ""
"specifies the range of virtual addresses tested during stacktrace walking.  "
"Failure is injected only if some caller in the walked stacktrace lies within "
"the required range, and none lies within the rejected range. Default "
"required range is [0,ULONG_MAX) (whole of virtual address space). Default "
"rejected range is [0,0)."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:157
msgid "/sys/kernel/debug/fail*/stacktrace-depth:"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:159
msgid ""
"specifies the maximum stacktrace depth walked during search for a caller "
"within [require-start,require-end) OR [reject-start,reject-end)."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:163
msgid "/sys/kernel/debug/fail_page_alloc/ignore-gfp-highmem:"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:167
msgid ""
"default is 'Y', setting it to 'N' will also inject failures into highmem/"
"user allocations (__GFP_HIGHMEM allocations)."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:170
msgid "/sys/kernel/debug/failslab/cache-filter"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:173
msgid ""
"default is 'N', setting it to 'Y' will only inject failures when objects are "
"requests from certain caches."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:176
msgid "Select the cache by writing '1' to /sys/kernel/slab/<cache>/failslab:"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:178
msgid "/sys/kernel/debug/failslab/ignore-gfp-wait:"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:179
msgid "/sys/kernel/debug/fail_page_alloc/ignore-gfp-wait:"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:183
msgid ""
"default is 'Y', setting it to 'N' will also inject failures into allocations "
"that can sleep (__GFP_DIRECT_RECLAIM allocations)."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:186
msgid "/sys/kernel/debug/fail_page_alloc/min-order:"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:188
msgid "specifies the minimum page allocation order to be injected failures."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:191
msgid "/sys/kernel/debug/fail_futex/ignore-private:"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:195
msgid ""
"default is 'N', setting it to 'Y' will disable failure injections when "
"dealing with private (address space) futexes."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:198
msgid "/sys/kernel/debug/fail_sunrpc/ignore-client-disconnect:"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:202
msgid ""
"default is 'N', setting it to 'Y' will disable disconnect injection on the "
"RPC client."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:205
msgid "/sys/kernel/debug/fail_sunrpc/ignore-server-disconnect:"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:209
msgid ""
"default is 'N', setting it to 'Y' will disable disconnect injection on the "
"RPC server."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:212
msgid "/sys/kernel/debug/fail_sunrpc/ignore-cache-wait:"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:216
msgid ""
"default is 'N', setting it to 'Y' will disable cache wait injection on the "
"RPC server."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:219
msgid "/sys/kernel/debug/fail_function/inject:"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:221
msgid "Format: { 'function-name' | '!function-name' | '' }"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:223
msgid ""
"specifies the target function of error injection by name. If the function "
"name leads '!' prefix, given function is removed from injection list. If "
"nothing specified ('') injection list is cleared."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:228
msgid "/sys/kernel/debug/fail_function/injectable:"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:230
msgid ""
"(read only) shows error injectable functions and what type of error values "
"can be specified. The error type will be one of below; - NULL: retval must "
"be 0. - ERRNO: retval must be -1 to -MAX_ERRNO (-4096). - ERR_NULL: retval "
"must be 0 or -1 to -MAX_ERRNO (-4096)."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:237
msgid "/sys/kernel/debug/fail_function/<function-name>/retval:"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:239
msgid ""
"specifies the \"error\" return value to inject to the given function. This "
"will be created when the user specifies a new injection entry. Note that "
"this file only accepts unsigned values. So, if you want to use a negative "
"errno, you better use 'printf' instead of 'echo', e.g.: $ printf %#x -12 > "
"retval"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:245
msgid "/sys/kernel/debug/fail_skb_realloc/devname:"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:247
msgid ""
"Specifies the network interface on which to force SKB reallocation.  If left "
"empty, SKB reallocation will be applied to all network interfaces."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:250
msgid "Example usage::"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:259
msgid "Boot option"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:261
msgid ""
"In order to inject faults while debugfs is not available (early boot time), "
"use the boot option::"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:273
msgid "proc entries"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:275
msgid "/proc/<pid>/fail-nth, /proc/self/task/<tid>/fail-nth:"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:278
msgid ""
"Write to this file of integer N makes N-th call in the task fail. Read from "
"this file returns a integer value. A value of '0' indicates that the fault "
"setup with a previous write to this file was injected. A positive integer N "
"indicates that the fault wasn't yet injected. Note that this file enables "
"all types of faults (slab, futex, etc). This setting takes precedence over "
"all other generic debugfs settings like probability, interval, times, etc. "
"But per-capability settings (e.g. fail_futex/ignore-private) take precedence "
"over it."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:287
msgid ""
"This feature is intended for systematic testing of faults in a single system "
"call. See an example below."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:292
msgid "Error Injectable Functions"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:294
msgid ""
"This part is for the kernel developers considering to add a function to "
"ALLOW_ERROR_INJECTION() macro."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:298
msgid "Requirements for the Error Injectable Functions"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:300
msgid ""
"Since the function-level error injection forcibly changes the code path and "
"returns an error even if the input and conditions are proper, this can cause "
"unexpected kernel crash if you allow error injection on the function which "
"is NOT error injectable. Thus, you (and reviewers) must ensure;"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:305
msgid ""
"The function returns an error code if it fails, and the callers must check "
"it correctly (need to recover from it)."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:308
msgid ""
"The function does not execute any code which can change any state before the "
"first error return. The state includes global or local, or input variable. "
"For example, clear output address storage (e.g. `*ret = NULL`), increments/"
"decrements counter, set a flag, preempt/irq disable or get a lock (if those "
"are recovered before returning error, that will be OK.)"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:314
msgid ""
"The first requirement is important, and it will result in that the release "
"(free objects) functions are usually harder to inject errors than allocate "
"functions. If errors of such release functions are not correctly handled it "
"will cause a memory leak easily (the caller will confuse that the object has "
"been released or corrupted.)"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:320
msgid ""
"The second one is for the caller which expects the function should always "
"does something. Thus if the function error injection skips whole of the "
"function, the expectation is betrayed and causes an unexpected error."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:325
msgid "Type of the Error Injectable Functions"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:327
msgid ""
"Each error injectable functions will have the error type specified by the "
"ALLOW_ERROR_INJECTION() macro. You have to choose it carefully if you add a "
"new error injectable function. If the wrong error type is chosen, the kernel "
"may crash because it may not be able to handle the error. There are 4 types "
"of errors defined in include/asm-generic/error-injection.h"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:333
msgid "EI_ETYPE_NULL"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:334
msgid ""
"This function will return `NULL` if it fails. e.g. return an allocated "
"object address."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:337
msgid "EI_ETYPE_ERRNO"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:338
msgid ""
"This function will return an `-errno` error code if it fails. e.g. return -"
"EINVAL if the input is wrong. This will include the functions which will "
"return an address which encodes `-errno` by ERR_PTR() macro."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:342
msgid "EI_ETYPE_ERRNO_NULL"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:343
msgid ""
"This function will return an `-errno` or `NULL` if it fails. If the caller "
"of this function checks the return value with IS_ERR_OR_NULL() macro, this "
"type will be appropriate."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:347
msgid "EI_ETYPE_TRUE"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:348
msgid "This function will return `true` (non-zero positive value) if it fails."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:350
msgid ""
"If you specifies a wrong type, for example, EI_TYPE_ERRNO for the function "
"which returns an allocated object, it may cause a problem because the "
"returned value is not an object address and the caller can not access to the "
"address."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:356
msgid "How to add new fault injection capability"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:358
msgid "#include <linux/fault-inject.h>"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:360
msgid "define the fault attributes"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:362
msgid "DECLARE_FAULT_ATTR(name);"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:364
msgid ""
"Please see the definition of struct fault_attr in fault-inject.h for details."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:367
msgid "provide a way to configure fault attributes"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:369
msgid "boot option"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:371
msgid ""
"If you need to enable the fault injection capability from boot time, you can "
"provide boot option to configure it. There is a helper function for it:"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:374
msgid "setup_fault_attr(attr, str);"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:378
msgid ""
"failslab, fail_page_alloc, fail_usercopy, and fail_make_request use this "
"way. Helper functions:"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:381
msgid "fault_create_debugfs_attr(name, parent, attr);"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:383
msgid "module parameters"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:385
msgid ""
"If the scope of the fault injection capability is limited to a single kernel "
"module, it is better to provide module parameters to configure the fault "
"attributes."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:389
msgid "add a hook to insert failures"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:391
msgid "Upon should_fail() returning true, client code should inject a failure:"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:393
msgid "should_fail(attr, size);"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:396
msgid "Application Examples"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:398
msgid "Inject slab allocation failures into module init/exit code::"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:433
msgid "Inject page allocation failures only for a specific module::"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:474
msgid "Inject open_ctree error while btrfs mount::"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:512
msgid "Inject only skbuff allocation failures ::"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:524
msgid "Tool to run command with failslab or fail_page_alloc"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:525
msgid ""
"In order to make it easier to accomplish the tasks mentioned above, we can "
"use tools/testing/fault-injection/failcmd.sh.  Please run a command \"./"
"tools/testing/fault-injection/failcmd.sh --help\" for more information and "
"see the following examples."
msgstr ""

#: ../../../fault-injection/fault-injection.rst:530
msgid "Examples:"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:532
msgid ""
"Run a command \"make -C tools/testing/selftests/ run_tests\" with injecting "
"slab allocation failure::"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:538
msgid ""
"Same as above except to specify 100 times failures at most instead of one "
"time at most by default::"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:544
msgid ""
"Same as above except to inject page allocation failure instead of slab "
"allocation failure::"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:552
msgid "Systematic faults using fail-nth"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:554
msgid ""
"The following code systematically faults 0-th, 1-st, 2-nd and so on "
"capabilities in the socketpair() system call::"
msgstr ""

#: ../../../fault-injection/fault-injection.rst:594
msgid "An example output::"
msgstr ""
