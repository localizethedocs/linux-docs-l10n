# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-27 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../process/debugging/driver_development_debugging_guide.rst:5
msgid "Debugging advice for driver development"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:7
msgid ""
"This document serves as a general starting point and lookup for debugging "
"device drivers. While this guide focuses on debugging that requires re-"
"compiling the module/kernel, the :doc:`userspace debugging guide </process/"
"debugging/userspace_debugging_guide>` will guide you through tools like "
"dynamic debug, ftrace and other tools useful for debugging issues and "
"behavior. For general debugging advice, see the :doc:`general advice "
"document </process/debugging/index>`."
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:18
msgid "Contents"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:20
msgid "The following sections show you the available tools."
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:23
msgid "printk() & friends"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:25
msgid ""
"These are derivatives of printf() with varying destinations and support for "
"being dynamically turned on or off, or lack thereof."
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:29
msgid "Simple printk()"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:31
msgid ""
"The classic, can be used to great effect for quick and dirty development of "
"new modules or to extract arbitrary necessary data for troubleshooting."
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:34
msgid "Prerequisite: ``CONFIG_PRINTK`` (usually enabled by default)"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:36
msgid "**Pros**:"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:38
msgid "No need to learn anything, simple to use"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:39
msgid ""
"Easy to modify exactly to your needs (formatting of the data (See: :doc:`/"
"core-api/printk-formats`), visibility in the log)"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:41
msgid ""
"Can cause delays in the execution of the code (beneficial to confirm whether "
"timing is a factor)"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:44
msgid "**Cons**:"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:46
msgid "Requires rebuilding the kernel/module"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:47
msgid ""
"Can cause delays in the execution of the code (which can cause issues to be "
"not reproducible)"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:50
msgid "For the full documentation see :doc:`/core-api/printk-basics`"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:53
msgid "Trace_printk"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:55
msgid "Prerequisite: ``CONFIG_DYNAMIC_FTRACE`` & ``#include <linux/ftrace.h>``"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:57
msgid ""
"It is a tiny bit less comfortable to use than printk(), because you will "
"have to read the messages from the trace file (See: :ref:`read_ftrace_log` "
"instead of from the kernel log, but very useful when printk() adds unwanted "
"delays into the code execution, causing issues to be flaky or hidden.)"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:62
msgid ""
"If the processing of this still causes timing issues then you can try "
"trace_puts()."
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:65
msgid "For the full Documentation see trace_printk()"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:68
msgid "dev_dbg"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:70
msgid ""
"Print statement, which can be targeted by :ref:`process/debugging/"
"userspace_debugging_guide:dynamic debug` that contains additional "
"information about the device used within the context."
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:74
msgid "**When is it appropriate to leave a debug print in the code?**"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:76
msgid ""
"Permanent debug statements have to be useful for a developer to troubleshoot "
"driver misbehavior. Judging that is a bit more of an art than a science, but "
"some guidelines are in the :ref:`Coding style guidelines <process/coding-"
"style:13) printing kernel messages>`. In almost all cases the debug "
"statements shouldn't be upstreamed, as a working driver is supposed to be "
"silent."
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:84
msgid "Custom printk"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:86
msgid "Example::"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:93
msgid "**When should you do this?**"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:95
msgid ""
"It is better to just use a pr_debug(), which can later be turned on/off with "
"dynamic debug. Additionally, a lot of drivers activate these prints via a "
"variable like ``core_debug`` set by a module parameter. However, Module "
"parameters `are not recommended anymore <https://lore.kernel.org/"
"all/2024032757-surcharge-grime-d3dd@gregkh>`_."
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:102
msgid "Ftrace"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:105
msgid "Creating a custom Ftrace tracepoint"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:107
msgid ""
"A tracepoint adds a hook into your code that will be called and logged when "
"the tracepoint is enabled. This can be used, for example, to trace hitting a "
"conditional branch or to dump the internal state at specific points of the "
"code flow during a debugging session."
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:112
msgid ""
"Here is a basic description of :ref:`how to implement new tracepoints <trace/"
"tracepoints:usage>`."
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:115
msgid "For the full event tracing documentation see :doc:`/trace/events`"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:117
msgid "For the full Ftrace documentation see :doc:`/trace/ftrace`"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:120
msgid "DebugFS"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:122
msgid "Prerequisite: ``CONFIG_DEBUG_FS` & `#include <linux/debugfs.h>``"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:124
msgid ""
"DebugFS differs from the other approaches of debugging, as it doesn't write "
"messages to the kernel log nor add traces to the code. Instead it allows the "
"developer to handle a set of files. With these files you can either store "
"values of variables or make register/memory dumps or you can make these "
"files writable and modify values/settings in the driver."
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:131
msgid "Possible use-cases among others:"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:133
msgid "Store register values"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:134
msgid "Keep track of variables"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:135
msgid "Store errors"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:136
msgid "Store settings"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:137
msgid "Toggle a setting like debug on/off"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:138
msgid "Error injection"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:140
msgid ""
"This is especially useful, when the size of a data dump would be hard to "
"digest as part of the general kernel log (for example when dumping raw "
"bitstream data) or when you are not interested in all the values all the "
"time, but with the possibility to inspect them."
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:145
msgid "The general idea is:"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:147
msgid ""
"Create a directory during probe (``struct dentry *parent = "
"debugfs_create_dir(\"my_driver\", NULL);``)"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:149
msgid ""
"Create a file (``debugfs_create_u32(\"my_value\", 444, parent, &my_variable);"
"``)"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:151
msgid ""
"In this example the file is found in ``/sys/kernel/debug/my_driver/"
"my_value`` (with read permissions for user/group/all)"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:154
msgid ""
"any read of the file will return the current contents of the variable "
"``my_variable``"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:157
msgid ""
"Clean up the directory when removing the device (``debugfs_remove(parent);``)"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:160
msgid "For the full documentation see :doc:`/filesystems/debugfs`."
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:163
msgid "KASAN, UBSAN, lockdep and other error checkers"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:166
msgid "KASAN (Kernel Address Sanitizer)"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:168
msgid "Prerequisite: ``CONFIG_KASAN``"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:170
msgid ""
"KASAN is a dynamic memory error detector that helps to find use-after-free "
"and out-of-bounds bugs. It uses compile-time instrumentation to check every "
"memory access."
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:174
msgid "For the full documentation see :doc:`/dev-tools/kasan`."
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:177
msgid "UBSAN (Undefined Behavior Sanitizer)"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:179
msgid "Prerequisite: ``CONFIG_UBSAN``"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:181
msgid ""
"UBSAN relies on compiler instrumentation and runtime checks to detect "
"undefined behavior. It is designed to find a variety of issues, including "
"signed integer overflow, array index out of bounds, and more."
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:185
msgid "For the full documentation see :doc:`/dev-tools/ubsan`"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:188
msgid "lockdep (Lock Dependency Validator)"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:190
msgid "Prerequisite: ``CONFIG_DEBUG_LOCKDEP``"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:192
msgid ""
"lockdep is a runtime lock dependency validator that detects potential "
"deadlocks and other locking-related issues in the kernel. It tracks lock "
"acquisitions and releases, building a dependency graph that is analyzed for "
"potential deadlocks. lockdep is especially useful for validating the "
"correctness of lock ordering in the kernel."
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:200
msgid "PSI (Pressure stall information tracking)"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:202
msgid "Prerequisite: ``CONFIG_PSI``"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:204
msgid ""
"PSI is a measurement tool to identify excessive overcommits on hardware "
"resources, that can cause performance disruptions or even OOM kills."
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:208
msgid "device coredump"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:210
msgid ""
"Prerequisite: ``CONFIG_DEV_COREDUMP`` & ``#include <linux/devcoredump.h>``"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:212
msgid ""
"Provides the infrastructure for a driver to provide arbitrary data to "
"userland. It is most often used in conjunction with udev or similar userland "
"application to listen for kernel uevents, which indicate that the dump is "
"ready. Udev has rules to copy that file somewhere for long-term storage and "
"analysis, as by default, the data for the dump is automatically cleaned up "
"after a default 5 minutes. That data is analyzed with driver-specific tools "
"or GDB."
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:219
msgid ""
"A device coredump can be created with a vmalloc area, with read/free "
"methods, or as a scatter/gather list."
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:222
msgid ""
"You can find an example implementation at: `drivers/media/platform/qcom/"
"venus/core.c <https://elixir.bootlin.com/linux/v6.11.6/source/drivers/media/"
"platform/qcom/venus/core.c#L30>`__, in the Bluetooth HCI layer, in several "
"wireless drivers, and in several DRM drivers."
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:229
msgid "devcoredump interfaces"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:231:
#: include/linux/devcoredump.h:102
msgid "create device coredump with read/free methods"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:231:
#: include/linux/devcoredump.h:106
#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:260 drivers/base/devcoredump.c:284
#: drivers/base/devcoredump.c:297 drivers/base/devcoredump.c:324
#: drivers/base/devcoredump.c:347 drivers/base/devcoredump.c:453
msgid "**Parameters**"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:231:
#: include/linux/devcoredump.h:108
#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:262 drivers/base/devcoredump.c:326
#: drivers/base/devcoredump.c:349 drivers/base/devcoredump.c:455
msgid "``struct device *dev``"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:231:
#: include/linux/devcoredump.h:103
#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:257 drivers/base/devcoredump.c:321
#: drivers/base/devcoredump.c:345 drivers/base/devcoredump.c:451
msgid "the struct device for the crashed device"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:231:
#: include/linux/devcoredump.h:105
#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:347
msgid "``struct module *owner``"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:231:
#: include/linux/devcoredump.h:104
#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:346
msgid "the module that contains the read/free functions, use ``THIS_MODULE``"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:231:
#: include/linux/devcoredump.h:106
#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:259 drivers/base/devcoredump.c:286
#: drivers/base/devcoredump.c:298 drivers/base/devcoredump.c:348
msgid "``void *data``"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:231:
#: include/linux/devcoredump.h:105
#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:347
msgid "data cookie for the **read**/**free** functions"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:231:
#: include/linux/devcoredump.h:107
#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:260 drivers/base/devcoredump.c:349
#: drivers/base/devcoredump.c:454
msgid "``size_t datalen``"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:231:
#: include/linux/devcoredump.h:106
#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:259 drivers/base/devcoredump.c:348
#: drivers/base/devcoredump.c:453
msgid "length of the data"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:231:
#: include/linux/devcoredump.h:108
#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:261 drivers/base/devcoredump.c:350
#: drivers/base/devcoredump.c:455
msgid "``gfp_t gfp``"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:231:
#: include/linux/devcoredump.h:107
#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:260 drivers/base/devcoredump.c:349
#: drivers/base/devcoredump.c:454
msgid "allocation flags"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:231:
#: include/linux/devcoredump.h:109
#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:351
msgid ""
"``ssize_t (*read)(char *buffer, loff_t offset, size_t count, void *data, "
"size_t datalen)``"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:231:
#: include/linux/devcoredump.h:108
#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:350
msgid "function to read from the given buffer"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:231:
#: include/linux/devcoredump.h:110
#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:352
msgid "``void (*free)(void *data)``"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:231:
#: include/linux/devcoredump.h:109
#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:351
msgid "function to free the given buffer"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:231:
#: include/linux/devcoredump.h:111
#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:262 drivers/base/devcoredump.c:323
#: drivers/base/devcoredump.c:354 drivers/base/devcoredump.c:456
msgid "**Description**"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:231:
#: include/linux/devcoredump.h:110
#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:353
msgid ""
"Creates a new device coredump for the given device. If a previous one hasn't "
"been read yet, the new coredump is discarded. The data lifetime is "
"determined by the device coredump framework and when it is no longer needed "
"the **free** function will be called to free the data."
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:256
msgid "create device coredump with vmalloc data"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:258
msgid "vmalloc data containing the device coredump"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:261
msgid ""
"This function takes ownership of the vmalloc'ed data and will free it when "
"it is no longer used. See dev_coredumpm() for more information."
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:280
msgid ""
"free all the memory of the given scatterlist table (i.e. both pages and "
"scatterlist instances)"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:285
msgid "pointer to sg_table to free"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:287
msgid "**NOTE**"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:282
msgid ""
"if two tables allocated with devcd_alloc_sgtable and then chained using the "
"sg_chain function then that function should be called only once on the "
"chained table"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:293
msgid ""
"copy data from sg_table to a given buffer and return the number of bytes read"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:299
msgid "``char *buffer``"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:295
msgid "the buffer to copy the data to it"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:297
msgid "``loff_t offset``"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:298
msgid ""
"start copy from **offset****** bytes from the head of the data in the given "
"scatterlist"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:301
msgid "``size_t buf_len``"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:296
msgid "the length of the buffer"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:297
msgid "the scatterlist table to copy from"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:299
msgid "``size_t data_len``"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:300
msgid "the length of the data in the sg_table"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:302
msgid "**Return**"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:302
msgid "the number of bytes copied"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:320
msgid "remove device coredump"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:322
msgid ""
"dev_coredump_put() removes coredump, if exists, for a given device from the "
"file system and free its associated data otherwise, does nothing."
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:325
msgid ""
"It is useful for modules that do not want to keep coredump available after "
"its unload."
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:343
msgid "create device coredump with read/free methods with a custom timeout."
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:353
msgid "``unsigned long timeout``"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:352
msgid "time in jiffies to remove coredump"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:449
msgid "create device coredump that uses scatterlist as data parameter"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:453
msgid "``struct scatterlist *table``"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:452
msgid "the dump data"
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide:233:
#: drivers/base/devcoredump.c:455
msgid ""
"Creates a new device coredump for the given device. If a previous one hasn't "
"been read yet, the new coredump is discarded. The data lifetime is "
"determined by the device coredump framework and when it is no longer needed "
"it will free the data."
msgstr ""

#: ../../../process/debugging/driver_development_debugging_guide.rst:235
msgid "**Copyright** ©2024 : Collabora"
msgstr ""
