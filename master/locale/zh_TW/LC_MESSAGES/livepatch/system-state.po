# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../livepatch/system-state.rst:3
msgid "System State Changes"
msgstr ""

#: ../../../livepatch/system-state.rst:5
msgid ""
"Some users are really reluctant to reboot a system. This brings the need to "
"provide more livepatches and maintain some compatibility between them."
msgstr ""

#: ../../../livepatch/system-state.rst:8
msgid ""
"Maintaining more livepatches is much easier with cumulative livepatches. "
"Each new livepatch completely replaces any older one. It can keep, add, and "
"even remove fixes. And it is typically safe to replace any version of the "
"livepatch with any other one thanks to the atomic replace feature."
msgstr ""

#: ../../../livepatch/system-state.rst:13
msgid ""
"The problems might come with shadow variables and callbacks. They might "
"change the system behavior or state so that it is no longer safe to go back "
"and use an older livepatch or the original kernel code. Also any new "
"livepatch must be able to detect what changes have already been done by the "
"already installed livepatches."
msgstr ""

#: ../../../livepatch/system-state.rst:19
msgid ""
"This is where the livepatch system state tracking gets useful. It allows to:"
msgstr ""

#: ../../../livepatch/system-state.rst:22
msgid "store data needed to manipulate and restore the system state"
msgstr ""

#: ../../../livepatch/system-state.rst:24
msgid "define compatibility between livepatches using a change id and version"
msgstr ""

#: ../../../livepatch/system-state.rst:29
msgid "1. Livepatch system state API"
msgstr ""

#: ../../../livepatch/system-state.rst:31
msgid ""
"The state of the system might get modified either by several livepatch "
"callbacks or by the newly used code. Also it must be possible to find "
"changes done by already installed livepatches."
msgstr ""

#: ../../../livepatch/system-state.rst:35
msgid ""
"Each modified state is described by struct klp_state, see include/linux/"
"livepatch.h."
msgstr ""

#: ../../../livepatch/system-state.rst:38
msgid ""
"Each livepatch defines an array of struct klp_states. They mention all "
"states that the livepatch modifies."
msgstr ""

#: ../../../livepatch/system-state.rst:41
msgid ""
"The livepatch author must define the following two fields for each struct "
"klp_state:"
msgstr ""

#: ../../../livepatch/system-state.rst:44
msgid "*id*"
msgstr ""

#: ../../../livepatch/system-state.rst:46
msgid "Non-zero number used to identify the affected system state."
msgstr ""

#: ../../../livepatch/system-state.rst:48
msgid "*version*"
msgstr ""

#: ../../../livepatch/system-state.rst:50
msgid ""
"Number describing the variant of the system state change that is supported "
"by the given livepatch."
msgstr ""

#: ../../../livepatch/system-state.rst:53
msgid "The state can be manipulated using two functions:"
msgstr ""

#: ../../../livepatch/system-state.rst:55
msgid "klp_get_state()"
msgstr ""

#: ../../../livepatch/system-state.rst:57
msgid "Get struct klp_state associated with the given livepatch and state id."
msgstr ""

#: ../../../livepatch/system-state.rst:60
msgid "klp_get_prev_state()"
msgstr ""

#: ../../../livepatch/system-state.rst:62
msgid ""
"Get struct klp_state associated with the given feature id and already "
"installed livepatches."
msgstr ""

#: ../../../livepatch/system-state.rst:66
msgid "2. Livepatch compatibility"
msgstr ""

#: ../../../livepatch/system-state.rst:68
msgid ""
"The system state version is used to prevent loading incompatible "
"livepatches. The check is done when the livepatch is enabled. The rules are:"
msgstr ""

#: ../../../livepatch/system-state.rst:71
msgid "Any completely new system state modification is allowed."
msgstr ""

#: ../../../livepatch/system-state.rst:73
msgid ""
"System state modifications with the same or higher version are allowed for "
"already modified system states."
msgstr ""

#: ../../../livepatch/system-state.rst:76
msgid ""
"Cumulative livepatches must handle all system state modifications from "
"already installed livepatches."
msgstr ""

#: ../../../livepatch/system-state.rst:79
msgid ""
"Non-cumulative livepatches are allowed to touch already modified system "
"states."
msgstr ""

#: ../../../livepatch/system-state.rst:83
msgid "3. Supported scenarios"
msgstr ""

#: ../../../livepatch/system-state.rst:85
msgid ""
"Livepatches have their life-cycle and the same is true for the system state "
"changes. Every compatible livepatch has to support the following scenarios:"
msgstr ""

#: ../../../livepatch/system-state.rst:89
msgid ""
"Modify the system state when the livepatch gets enabled and the state has "
"not been already modified by a livepatches that are being replaced."
msgstr ""

#: ../../../livepatch/system-state.rst:93
msgid ""
"Take over or update the system state modification when is has already been "
"done by a livepatch that is being replaced."
msgstr ""

#: ../../../livepatch/system-state.rst:96
msgid "Restore the original state when the livepatch is disabled."
msgstr ""

#: ../../../livepatch/system-state.rst:98
msgid ""
"Restore the previous state when the transition is reverted. It might be the "
"original system state or the state modification done by livepatches that "
"were being replaced."
msgstr ""

#: ../../../livepatch/system-state.rst:102
msgid ""
"Remove any already made changes when error occurs and the livepatch cannot "
"get enabled."
msgstr ""

#: ../../../livepatch/system-state.rst:106
msgid "4. Expected usage"
msgstr ""

#: ../../../livepatch/system-state.rst:108
msgid ""
"System states are usually modified by livepatch callbacks. The expected role "
"of each callback is as follows:"
msgstr ""

#: ../../../livepatch/system-state.rst:111
msgid "*pre_patch()*"
msgstr ""

#: ../../../livepatch/system-state.rst:113
msgid ""
"Allocate *state->data* when necessary. The allocation might fail and "
"*pre_patch()* is the only callback that could stop loading of the livepatch. "
"The allocation is not needed when the data are already provided by "
"previously installed livepatches."
msgstr ""

#: ../../../livepatch/system-state.rst:118
msgid ""
"Do any other preparatory action that is needed by the new code even before "
"the transition gets finished. For example, initialize *state->data*."
msgstr ""

#: ../../../livepatch/system-state.rst:122
msgid ""
"The system state itself is typically modified in *post_patch()* when the "
"entire system is able to handle it."
msgstr ""

#: ../../../livepatch/system-state.rst:125
msgid ""
"Clean up its own mess in case of error. It might be done by a custom code or "
"by calling *post_unpatch()* explicitly."
msgstr ""

#: ../../../livepatch/system-state.rst:128
msgid "*post_patch()*"
msgstr ""

#: ../../../livepatch/system-state.rst:130
msgid ""
"Copy *state->data* from the previous livepatch when they are compatible."
msgstr ""

#: ../../../livepatch/system-state.rst:133
msgid ""
"Do the actual system state modification. Eventually allow the new code to "
"use it."
msgstr ""

#: ../../../livepatch/system-state.rst:136
msgid "Make sure that *state->data* has all necessary information."
msgstr ""

#: ../../../livepatch/system-state.rst:138
msgid ""
"Free *state->data* from replaces livepatches when they are not longer needed."
msgstr ""

#: ../../../livepatch/system-state.rst:141
msgid "*pre_unpatch()*"
msgstr ""

#: ../../../livepatch/system-state.rst:143
msgid ""
"Prevent the code, added by the livepatch, relying on the system state change."
msgstr ""

#: ../../../livepatch/system-state.rst:146
msgid "Revert the system state modification.."
msgstr ""

#: ../../../livepatch/system-state.rst:148
msgid "*post_unpatch()*"
msgstr ""

#: ../../../livepatch/system-state.rst:150
msgid ""
"Distinguish transition reverse and livepatch disabling by checking "
"*klp_get_prev_state()*."
msgstr ""

#: ../../../livepatch/system-state.rst:153
msgid ""
"In case of transition reverse, restore the previous system state. It might "
"mean doing nothing."
msgstr ""

#: ../../../livepatch/system-state.rst:156
msgid "Remove any not longer needed setting or data."
msgstr ""

#: ../../../livepatch/system-state.rst:160
msgid ""
"*pre_unpatch()* typically does symmetric operations to *post_patch()*. "
"Except that it is called only when the livepatch is being disabled. "
"Therefore it does not need to care about any previously installed livepatch."
msgstr ""

#: ../../../livepatch/system-state.rst:165
msgid ""
"*post_unpatch()* typically does symmetric operations to *pre_patch()*. It "
"might be called also during the transition reverse. Therefore it has to "
"handle the state of the previously installed livepatches."
msgstr ""
