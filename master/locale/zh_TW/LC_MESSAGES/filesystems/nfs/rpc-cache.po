# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../filesystems/nfs/rpc-cache.rst:3
msgid "RPC Cache"
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:5
msgid ""
"This document gives a brief introduction to the caching mechanisms in the "
"sunrpc layer that is used, in particular, for NFS authentication."
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:10
msgid "Caches"
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:12
msgid ""
"The caching replaces the old exports table and allows for a wide variety of "
"values to be caches."
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:15
msgid ""
"There are a number of caches that are similar in structure though quite "
"possibly very different in content and use.  There is a corpus of common "
"code for managing these caches."
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:19
msgid "Examples of caches that are likely to be needed are:"
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:21
msgid "mapping from IP address to client name"
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:22
msgid "mapping from client name and filesystem to export options"
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:23
msgid ""
"mapping from UID to list of GIDs, to work around NFS's limitation of 16 gids."
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:25
msgid ""
"mappings between local UID/GID and remote UID/GID for sites that do not have "
"uniform uid assignment"
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:27
msgid "mapping from network identify to public key for crypto authentication."
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:29
msgid "The common code handles such things as:"
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:31
msgid "general cache lookup with correct locking"
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:32
msgid "supporting 'NEGATIVE' as well as positive entries"
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:33
msgid ""
"allowing an EXPIRED time on cache items, and removing items after they "
"expire, and are no longer in-use."
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:35
msgid "making requests to user-space to fill in cache entries"
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:36
msgid "allowing user-space to directly set entries in the cache"
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:37
msgid ""
"delaying RPC requests that depend on as-yet incomplete cache entries, and "
"replaying those requests when the cache entry is complete."
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:40
msgid "clean out old entries as they expire."
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:43
msgid "Creating a Cache"
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:45
msgid ""
"A cache needs a datum to store.  This is in the form of a structure "
"definition that must contain a struct cache_head as an element, usually the "
"first. It will also contain a key and some content. Each cache element is "
"reference counted and contains expiry and update times for use in cache "
"management."
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:51
msgid ""
"A cache needs a \"cache_detail\" structure that describes the cache.  This "
"stores the hash table, some parameters for cache management, and some "
"operations detailing how to work with particular cache items."
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:56
msgid "The operations are:"
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:58
msgid "struct cache_head \\*alloc(void)"
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:59
msgid ""
"This simply allocates appropriate memory and returns a pointer to the "
"cache_detail embedded within the structure"
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:63
msgid "void cache_put(struct kref \\*)"
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:64
msgid ""
"This is called when the last reference to an item is dropped.  The pointer "
"passed is to the 'ref' field in the cache_head.  cache_put should release "
"any references create by 'cache_init' and, if CACHE_VALID is set, any "
"references created by cache_update. It should then release the memory "
"allocated by 'alloc'."
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:72
msgid "int match(struct cache_head \\*orig, struct cache_head \\*new)"
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:73
msgid ""
"test if the keys in the two structures match.  Return 1 if they do, 0 if "
"they don't."
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:76
msgid "void init(struct cache_head \\*orig, struct cache_head \\*new)"
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:77
msgid ""
"Set the 'key' fields in 'new' from 'orig'.  This may include taking "
"references to shared objects."
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:80
msgid "void update(struct cache_head \\*orig, struct cache_head \\*new)"
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:81
msgid "Set the 'content' fields in 'new' from 'orig'."
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:83
msgid ""
"int cache_show(struct seq_file \\*m, struct cache_detail \\*cd, struct "
"cache_head \\*h)"
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:84
msgid ""
"Optional.  Used to provide a /proc file that lists the contents of a cache.  "
"This should show one item, usually on just one line."
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:88
msgid ""
"int cache_request(struct cache_detail \\*cd, struct cache_head \\*h, char "
"\\*\\*bpp, int \\*blen)"
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:89
msgid ""
"Format a request to be send to user-space for an item to be instantiated.  "
"\\*bpp is a buffer of size \\*blen. bpp should be moved forward over the "
"encoded message, and  \\*blen should be reduced to show how much free space "
"remains.  Return 0 on success or <0 if not enough room or other problem."
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:96
msgid "int cache_parse(struct cache_detail \\*cd, char \\*buf, int len)"
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:97
msgid ""
"A message from user space has arrived to fill out a cache entry.  It is in "
"'buf' of length 'len'. cache_parse should parse this, find the item in the "
"cache with sunrpc_cache_lookup_rcu, and update the item with "
"sunrpc_cache_update."
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:104
msgid ""
"A cache needs to be registered using cache_register().  This includes it on "
"a list of caches that will be regularly cleaned to discard old data."
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:109
msgid "Using a cache"
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:111
msgid ""
"To find a value in a cache, call sunrpc_cache_lookup_rcu passing a pointer "
"to the cache_head in a sample item with the 'key' fields filled in. This "
"will be passed to ->match to identify the target entry.  If no entry is "
"found, a new entry will be create, added to the cache, and marked as not "
"containing valid data."
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:117
msgid ""
"The item returned is typically passed to cache_check which will check if the "
"data is valid, and may initiate an up-call to get fresh data. cache_check "
"will return -ENOENT in the entry is negative or if an up call is needed but "
"not possible, -EAGAIN if an upcall is pending, or 0 if the data is valid;"
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:123
msgid ""
"cache_check can be passed a \"struct cache_req\\*\".  This structure is "
"typically embedded in the actual request and can be used to create a "
"deferred copy of the request (struct cache_deferred_req).  This is done when "
"the found cache item is not uptodate, but the is reason to believe that "
"userspace might provide information soon.  When the cache item does become "
"valid, the deferred copy of the request will be revisited (->revisit).  It "
"is expected that this method will reschedule the request for processing."
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:132
msgid ""
"The value returned by sunrpc_cache_lookup_rcu can also be passed to "
"sunrpc_cache_update to set the content for the item.  A second item is "
"passed which should hold the content.  If the item found by _lookup has "
"valid data, then it is discarded and a new item is created.  This saves any "
"user of an item from worrying about content changing while it is being "
"inspected.  If the item found by _lookup does not contain valid data, then "
"the content is copied across and CACHE_VALID is set."
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:141
msgid "Populating a cache"
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:143
msgid ""
"Each cache has a name, and when the cache is registered, a directory with "
"that name is created in /proc/net/rpc"
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:146
msgid ""
"This directory contains a file called 'channel' which is a channel for "
"communicating between kernel and user for populating the cache. This "
"directory may later contain other files of interacting with the cache."
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:151
msgid ""
"The 'channel' works a bit like a datagram socket. Each 'write' is passed as "
"a whole to the cache for parsing and interpretation. Each cache can treat "
"the write requests differently, but it is expected that a message written "
"will contain:"
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:156
msgid "a key"
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:157
msgid "an expiry time"
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:158
msgid "a content."
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:160
msgid ""
"with the intention that an item in the cache with the give key should be "
"create or updated to have the given content, and the expiry time should be "
"set on that item."
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:164
msgid ""
"Reading from a channel is a bit more interesting.  When a cache lookup "
"fails, or when it succeeds but finds an entry that may soon expire, a "
"request is lodged for that cache item to be updated by user-space.  These "
"requests appear in the channel file."
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:169
msgid ""
"Successive reads will return successive requests. If there are no more "
"requests to return, read will return EOF, but a select or poll for read will "
"block waiting for another request to be added."
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:174
msgid "Thus a user-space helper is likely to::"
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:182
msgid ""
"If it dies and needs to be restarted, any requests that have not been "
"answered will still appear in the file and will be read by the new instance "
"of the helper."
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:186
msgid ""
"Each cache should define a \"cache_parse\" method which takes a message "
"written from user-space and processes it.  It should return an error (which "
"propagates back to the write syscall) or 0."
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:190
msgid ""
"Each cache should also define a \"cache_request\" method which takes a cache "
"item and encodes a request into the buffer provided."
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:195
msgid ""
"If a cache has no active readers on the channel, and has had not active "
"readers for more than 60 seconds, further requests will not be added to the "
"channel but instead all lookups that do not find a valid entry will fail.  "
"This is partly for backward compatibility: The previous nfs exports table "
"was deemed to be authoritative and a failed lookup meant a definite 'no'."
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:203
msgid "request/response format"
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:205
msgid ""
"While each cache is free to use its own format for requests and responses "
"over channel, the following is recommended as appropriate and support "
"routines are available to help: Each request or response record should be "
"printable ASCII with precisely one newline character which should be at the "
"end. Fields within the record should be separated by spaces, normally one. "
"If spaces, newlines, or nul characters are needed in a field they much be "
"quoted.  two mechanisms are available:"
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:214
msgid ""
"If a field begins '\\x' then it must contain an even number of hex digits, "
"and pairs of these digits provide the bytes in the field."
msgstr ""

#: ../../../filesystems/nfs/rpc-cache.rst:217
msgid ""
"otherwise a \\ in the field must be followed by 3 octal digits which give "
"the code for a byte.  Other characters are treated as them selves.  At the "
"very least, space, newline, nul, and '\\' must be quoted in this way."
msgstr ""
