# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 08:27+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../arch/s390/s390dbf.rst:3
msgid "S390 Debug Feature"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:5
msgid "files:"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:6
msgid "arch/s390/kernel/debug.c"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:7
msgid "arch/s390/include/asm/debug.h"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:10
msgid "Description:"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:11
msgid ""
"The goal of this feature is to provide a kernel debug logging API where log "
"records can be stored efficiently in memory, where each component (e.g. "
"device drivers) can have one separate debug log. One purpose of this is to "
"inspect the debug logs after a production system crash in order to analyze "
"the reason for the crash."
msgstr ""

#: ../../../arch/s390/s390dbf.rst:17
msgid ""
"If the system still runs but only a subcomponent which uses dbf fails, it is "
"possible to look at the debug logs on a live system via the Linux debugfs "
"filesystem."
msgstr ""

#: ../../../arch/s390/s390dbf.rst:21
msgid ""
"The debug feature may also very useful for kernel and driver development."
msgstr ""

#: ../../../arch/s390/s390dbf.rst:24
msgid "Design:"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:25
msgid ""
"Kernel components (e.g. device drivers) can register themselves at the debug "
"feature with the function call :c:func:`debug_register()`. This function "
"initializes a debug log for the caller. For each debug log exists a number "
"of debug areas where exactly one is active at one time.  Each debug area "
"consists of contiguous pages in memory. In the debug areas there are stored "
"debug entries (log records) which are written by event- and exception-calls."
msgstr ""

#: ../../../arch/s390/s390dbf.rst:33
msgid ""
"An event-call writes the specified debug entry to the active debug area and "
"updates the log pointer for the active area. If the end of the active debug "
"area is reached, a wrap around is done (ring buffer) and the next debug "
"entry will be written at the beginning of the active debug area."
msgstr ""

#: ../../../arch/s390/s390dbf.rst:39
msgid ""
"An exception-call writes the specified debug entry to the log and switches "
"to the next debug area. This is done in order to be sure that the records "
"which describe the origin of the exception are not overwritten when a wrap "
"around for the current area occurs."
msgstr ""

#: ../../../arch/s390/s390dbf.rst:44
msgid ""
"The debug areas themselves are also ordered in form of a ring buffer. When "
"an exception is thrown in the last debug area, the following debug entries "
"are then written again in the very first area."
msgstr ""

#: ../../../arch/s390/s390dbf.rst:48
msgid ""
"There are four versions for the event- and exception-calls: One for logging "
"raw data, one for text, one for numbers (unsigned int and long), and one for "
"sprintf-like formatted strings."
msgstr ""

#: ../../../arch/s390/s390dbf.rst:52
msgid "Each debug entry contains the following data:"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:54
msgid "Timestamp"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:55 ../../../arch/s390/s390dbf.rst:329
msgid "Cpu-Number of calling task"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:56
msgid "Level of debug entry (0...6)"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:57 ../../../arch/s390/s390dbf.rst:330
msgid "Return Address to caller"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:58
msgid "Flag, if entry is an exception or not"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:60
msgid ""
"The debug logs can be inspected in a live system through entries in the "
"debugfs-filesystem. Under the toplevel directory \"``s390dbf``\" there is a "
"directory for each registered component, which is named like the "
"corresponding component. The debugfs normally should be mounted to ``/sys/"
"kernel/debug`` therefore the debug feature can be accessed under ``/sys/"
"kernel/debug/s390dbf``."
msgstr ""

#: ../../../arch/s390/s390dbf.rst:67
msgid ""
"The content of the directories are files which represent different views to "
"the debug log. Each component can decide which views should be used through "
"registering them with the function :c:func:`debug_register_view()`. "
"Predefined views for hex/ascii and sprintf data are provided. It is also "
"possible to define other views. The content of a view can be inspected "
"simply by reading the corresponding debugfs file."
msgstr ""

#: ../../../arch/s390/s390dbf.rst:74
msgid ""
"All debug logs have an actual debug level (range from 0 to 6). The default "
"level is 3. Event and Exception functions have a :c:data:`level` parameter. "
"Only debug entries with a level that is lower or equal than the actual level "
"are written to the log. This means, when writing events, high priority log "
"entries should have a low level value whereas low priority entries should "
"have a high one. The actual debug level can be changed with the help of the "
"debugfs-filesystem through writing a number string \"x\" to the ``level`` "
"debugfs file which is provided for every debug log. Debugging can be "
"switched off completely by using \"-\" on the ``level`` debugfs file."
msgstr ""

#: ../../../arch/s390/s390dbf.rst:85 ../../../arch/s390/s390dbf.rst:198
#: ../../../arch/s390/s390dbf.rst:219
msgid "Example::"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:89
msgid ""
"It is also possible to deactivate the debug feature globally for every debug "
"log. You can change the behavior using  2 sysctl parameters in ``/proc/sys/"
"s390dbf``:"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:93
msgid ""
"There are currently 2 possible triggers, which stop the debug feature "
"globally. The first possibility is to use the ``debug_active`` sysctl. If "
"set to 1 the debug feature is running. If ``debug_active`` is set to 0 the "
"debug feature is turned off."
msgstr ""

#: ../../../arch/s390/s390dbf.rst:98
msgid ""
"The second trigger which stops the debug feature is a kernel oops. That "
"prevents the debug feature from overwriting debug information that happened "
"before the oops. After an oops you can reactivate the debug feature by "
"piping 1 to ``/proc/sys/s390dbf/debug_active``. Nevertheless, it's not "
"suggested to use an oopsed kernel in a production environment."
msgstr ""

#: ../../../arch/s390/s390dbf.rst:104
msgid ""
"If you want to disallow the deactivation of the debug feature, you can use "
"the ``debug_stoppable`` sysctl. If you set ``debug_stoppable`` to 0 the "
"debug feature cannot be stopped. If the debug feature is already stopped, it "
"will stay deactivated."
msgstr ""

#: ../../../arch/s390/s390dbf.rst:110
msgid "Kernel Interfaces:"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:427
msgid "Go to the next entry"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:431
#: arch/s390/kernel/debug.c:470 arch/s390/kernel/debug.c:487
#: arch/s390/kernel/debug.c:529 arch/s390/kernel/debug.c:719
#: arch/s390/kernel/debug.c:792 arch/s390/kernel/debug.c:835
#: arch/s390/kernel/debug.c:859 arch/s390/kernel/debug.c:935
#: arch/s390/kernel/debug.c:985 arch/s390/kernel/debug.c:1149
#: arch/s390/kernel/debug.c:1164 arch/s390/kernel/debug.c:1331
#: arch/s390/kernel/debug.c:1381 ../../../arch/s390/s390dbf:113:
#: arch/s390/include/asm/debug.h:137 arch/s390/include/asm/debug.h:152
#: arch/s390/include/asm/debug.h:173 arch/s390/include/asm/debug.h:195
#: arch/s390/include/asm/debug.h:217 arch/s390/include/asm/debug.h:245
#: arch/s390/include/asm/debug.h:275 arch/s390/include/asm/debug.h:297
#: arch/s390/include/asm/debug.h:320 arch/s390/include/asm/debug.h:343
#: arch/s390/include/asm/debug.h:374 arch/s390/include/asm/debug.h:474
msgid "**Parameters**"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:433
#: arch/s390/kernel/debug.c:472 arch/s390/kernel/debug.c:489
#: arch/s390/kernel/debug.c:531
msgid "``file_private_info_t *p_info``"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:428
#: arch/s390/kernel/debug.c:467 arch/s390/kernel/debug.c:484
#: arch/s390/kernel/debug.c:526
msgid "Private info that is manipulated"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:430
#: arch/s390/kernel/debug.c:469 arch/s390/kernel/debug.c:486
#: arch/s390/kernel/debug.c:529 arch/s390/kernel/debug.c:722
#: arch/s390/kernel/debug.c:801 arch/s390/kernel/debug.c:841
#: arch/s390/kernel/debug.c:861 arch/s390/kernel/debug.c:1149
#: arch/s390/kernel/debug.c:1164 ../../../arch/s390/s390dbf:113:
#: arch/s390/include/asm/debug.h:253 arch/s390/include/asm/debug.h:383
#: arch/s390/include/asm/debug.h:479
msgid "**Description**"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:429
msgid ""
"Sets the current position in **p_info** to the next entry. If no further "
"entry exists the current position is set to one after the end the return "
"value indicates that no further entries exist."
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:3
#: arch/s390/kernel/debug.c:433 arch/s390/kernel/debug.c:489
#: arch/s390/kernel/debug.c:531 arch/s390/kernel/debug.c:728
#: arch/s390/kernel/debug.c:798 arch/s390/kernel/debug.c:838
#: arch/s390/kernel/debug.c:935 arch/s390/kernel/debug.c:986
#: arch/s390/kernel/debug.c:1333 arch/s390/kernel/debug.c:1383
#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:139
#: arch/s390/include/asm/debug.h:156 arch/s390/include/asm/debug.h:176
#: arch/s390/include/asm/debug.h:198 arch/s390/include/asm/debug.h:220
#: arch/s390/include/asm/debug.h:250 arch/s390/include/asm/debug.h:280
#: arch/s390/include/asm/debug.h:301 arch/s390/include/asm/debug.h:324
#: arch/s390/include/asm/debug.h:348 arch/s390/include/asm/debug.h:380
msgid "**Return**"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:434
msgid "True if there are more following entries, false otherwise"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:466
msgid "Go to the currently active entry"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:468
msgid ""
"Sets the current position in **p_info** to the currently active entry of "
"**p_info->debug_info_snap**"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:483
msgid "Go to the previous entry"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:485
msgid ""
"Sets the current position in **p_info** to the previous entry. If no "
"previous entry exists the current position is set left as DEBUG_PROLOG_ENTRY "
"and the return value indicates that no previous entries exist."
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:490
msgid "True if there are more previous entries, false otherwise"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:525
msgid "Go to next entry in either the forward or backward direction"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:528
#: arch/s390/kernel/debug.c:721
msgid "``bool reverse``"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:527
msgid "If true go to the next entry in reverse i.e. previous"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:528
msgid ""
"Sets the current position in **p_info** to the next (**reverse** == false) "
"or previous (**reverse** == true) entry."
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:532
msgid "True if there are further entries in that direction, false otherwise."
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:715
msgid "Get a textual representation of debug info, or as much as fits"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:721
#: arch/s390/kernel/debug.c:861 arch/s390/kernel/debug.c:937
#: arch/s390/kernel/debug.c:987 arch/s390/kernel/debug.c:1333
#: arch/s390/kernel/debug.c:1383 ../../../arch/s390/s390dbf:113:
#: arch/s390/include/asm/debug.h:139 arch/s390/include/asm/debug.h:154
#: arch/s390/include/asm/debug.h:175 arch/s390/include/asm/debug.h:197
#: arch/s390/include/asm/debug.h:219 arch/s390/include/asm/debug.h:277
#: arch/s390/include/asm/debug.h:299 arch/s390/include/asm/debug.h:322
#: arch/s390/include/asm/debug.h:345
msgid "``debug_info_t *id``"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:716
msgid "Debug information to use"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:718
#: arch/s390/kernel/debug.c:1332 arch/s390/kernel/debug.c:1382
msgid "``struct debug_view *view``"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:717
msgid "View with which to dump the debug information"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:719
msgid "``char *buf``"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:718
msgid "Buffer the textual debug data representation is written to"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:720
msgid "``size_t buf_size``"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:719
msgid "Size of the buffer, including the trailing '\\0' byte"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:720
msgid "Go backwards from the last written entry"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:721
msgid ""
"This function may be used whenever a textual representation of the debug "
"information is required without using an s390dbf file."
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:724
#: arch/s390/kernel/debug.c:862 ../../../arch/s390/s390dbf:113:
#: arch/s390/include/asm/debug.h:484
msgid "**Note**"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:725
msgid ""
"It is the callers responsibility to supply a view that is compatible with "
"the debug information data."
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:728
msgid ""
"On success returns the number of bytes written to the buffer not including "
"the trailing '\\0' byte. If bug_size == 0 the function returns 0. On failure "
"an error code less than 0 is returned."
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:788
msgid "creates and initializes debug area."
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:794
#: arch/s390/kernel/debug.c:837
msgid "``const char *name``"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:790
#: arch/s390/kernel/debug.c:833 ../../../arch/s390/s390dbf:113:
#: arch/s390/include/asm/debug.h:473
msgid "Name of debug log (e.g. used for debugfs entry)"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:792
#: arch/s390/kernel/debug.c:835 arch/s390/kernel/debug.c:859
msgid "``int pages_per_area``"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:791
#: arch/s390/kernel/debug.c:834
msgid "Number of pages, which will be allocated per area"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:793
#: arch/s390/kernel/debug.c:836 arch/s390/kernel/debug.c:860
msgid "``int nr_areas``"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:792
#: arch/s390/kernel/debug.c:835 arch/s390/kernel/debug.c:859
#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:475
msgid "Number of debug areas"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:794
#: arch/s390/kernel/debug.c:837
msgid "``int buf_size``"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:793
#: arch/s390/kernel/debug.c:836 ../../../arch/s390/s390dbf:113:
#: arch/s390/include/asm/debug.h:476
msgid "Size of data area in each debug entry"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:795
msgid "``umode_t mode``"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:794
msgid "File mode for debugfs files. E.g. S_IRWXUGO"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:796
msgid "``uid_t uid``"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:795
msgid "User ID for debugfs files. Currently only 0 is supported."
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:797
msgid "``gid_t gid``"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:796
msgid "Group ID for debugfs files. Currently only 0 is supported."
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:798
#: arch/s390/kernel/debug.c:838
msgid "Handle for generated debug area"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:799
#: arch/s390/kernel/debug.c:839
msgid "``NULL`` if register failed"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:801
msgid ""
"Allocates memory for a debug log. Must not be called within an interrupt "
"handler."
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:831
msgid "creates and initializes debug area with default file mode."
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:841
msgid ""
"Allocates memory for a debug log. The debugfs file mode access permissions "
"are read and write for user. Must not be called within an interrupt handler."
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:855
msgid "registers a static debug area"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:857
msgid "Handle for static debug area"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:858
#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:474
msgid "Number of pages per area"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:860
msgid "Register debug_info_t defined using DEFINE_STATIC_DEBUG_INFO."
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:863
msgid "This function is called automatically via an initcall generated by"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:864
msgid "DEFINE_STATIC_DEBUG_INFO."
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:931
msgid "give back debug area."
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:933
#: arch/s390/kernel/debug.c:983 arch/s390/kernel/debug.c:1330
#: arch/s390/kernel/debug.c:1380 ../../../arch/s390/s390dbf:113:
#: arch/s390/include/asm/debug.h:136 arch/s390/include/asm/debug.h:151
#: arch/s390/include/asm/debug.h:172 arch/s390/include/asm/debug.h:194
#: arch/s390/include/asm/debug.h:216 arch/s390/include/asm/debug.h:245
#: arch/s390/include/asm/debug.h:275 arch/s390/include/asm/debug.h:297
#: arch/s390/include/asm/debug.h:320 arch/s390/include/asm/debug.h:344
#: arch/s390/include/asm/debug.h:375
msgid "handle for debug log"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:935
#: arch/s390/kernel/debug.c:986 arch/s390/kernel/debug.c:1147
#: arch/s390/kernel/debug.c:1162
msgid "none"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:981
msgid "Sets new actual debug level if new_level is valid."
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:985
msgid "``int new_level``"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:984
msgid "new debug level"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:1145
msgid "stops the debug feature if stopping is allowed."
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:1151
#: arch/s390/kernel/debug.c:1166
msgid "``void``"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:1
msgid "no arguments"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:1149
msgid "Currently used in case of a kernel oops."
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:1160
msgid "event/exception functions try lock instead of spin."
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:1164
msgid ""
"Currently used in case of stopping all CPUs but the current one. Once in "
"this state, functions to write a debug entry for an event or exception no "
"longer spin on the debug area lock, but only try to get it and fail if they "
"do not get the lock."
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:1327
msgid "registers new debug view and creates debugfs dir entry"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:1331
#: arch/s390/kernel/debug.c:1381
msgid "pointer to debug view struct"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:1333
#: arch/s390/kernel/debug.c:1383
msgid "0  : ok"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:1334
#: arch/s390/kernel/debug.c:1384
msgid "< 0: Error"
msgstr ""

#: ../../../arch/s390/s390dbf:112: arch/s390/kernel/debug.c:1377
msgid "unregisters debug view and removes debugfs dir entry"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:133
msgid ""
"Returns true if debug events for the specified level would be logged. "
"Otherwise returns false."
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:138
#: arch/s390/include/asm/debug.h:153 arch/s390/include/asm/debug.h:174
#: arch/s390/include/asm/debug.h:196 arch/s390/include/asm/debug.h:218
#: arch/s390/include/asm/debug.h:277 arch/s390/include/asm/debug.h:299
#: arch/s390/include/asm/debug.h:322 arch/s390/include/asm/debug.h:346
msgid "``int level``"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:137
#: arch/s390/include/asm/debug.h:152 arch/s390/include/asm/debug.h:173
#: arch/s390/include/asm/debug.h:195 arch/s390/include/asm/debug.h:217
#: arch/s390/include/asm/debug.h:246 arch/s390/include/asm/debug.h:276
#: arch/s390/include/asm/debug.h:298 arch/s390/include/asm/debug.h:321
#: arch/s390/include/asm/debug.h:345 arch/s390/include/asm/debug.h:376
msgid "debug level"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:139
msgid "``true`` if level is less or equal to the current debug level."
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:148
msgid ""
"writes binary debug entry to active debug area (if level <= actual debug "
"level)"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:154
#: arch/s390/include/asm/debug.h:278
msgid "``void *data``"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:153
#: arch/s390/include/asm/debug.h:277
msgid "pointer to data for debug entry"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:155
#: arch/s390/include/asm/debug.h:279
msgid "``int length``"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:154
#: arch/s390/include/asm/debug.h:278
msgid "length of data in bytes"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:156
#: arch/s390/include/asm/debug.h:176 arch/s390/include/asm/debug.h:198
#: arch/s390/include/asm/debug.h:220 arch/s390/include/asm/debug.h:250
#: arch/s390/include/asm/debug.h:280 arch/s390/include/asm/debug.h:301
#: arch/s390/include/asm/debug.h:324 arch/s390/include/asm/debug.h:348
#: arch/s390/include/asm/debug.h:380
msgid "Address of written debug entry"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:157
#: arch/s390/include/asm/debug.h:177 arch/s390/include/asm/debug.h:199
#: arch/s390/include/asm/debug.h:221 arch/s390/include/asm/debug.h:251
#: arch/s390/include/asm/debug.h:281 arch/s390/include/asm/debug.h:302
#: arch/s390/include/asm/debug.h:325 arch/s390/include/asm/debug.h:349
#: arch/s390/include/asm/debug.h:381
msgid "``NULL`` if error"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:169
msgid ""
"writes unsigned integer debug entry to active debug area (if level <= actual "
"debug level)"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:175
#: arch/s390/include/asm/debug.h:300
msgid "``unsigned int tag``"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:174
#: arch/s390/include/asm/debug.h:299
msgid "integer value for debug entry"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:191
msgid ""
"writes unsigned long debug entry to active debug area (if level <= actual "
"debug level)"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:197
#: arch/s390/include/asm/debug.h:323
msgid "``unsigned long tag``"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:196
#: arch/s390/include/asm/debug.h:322
msgid "long integer value for debug entry"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:213
msgid ""
"writes string debug entry in ascii format to active debug area (if level <= "
"actual debug level)"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:219
#: arch/s390/include/asm/debug.h:347
msgid "``const char *txt``"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:218
#: arch/s390/include/asm/debug.h:346
msgid "string for debug entry"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:243
msgid "``debug_sprintf_event (_id, _level, _fmt, ...)``"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:241
msgid ""
"writes debug entry with format string and varargs (longs) to active debug "
"area (if level $<=$ actual debug level)."
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:247
#: arch/s390/include/asm/debug.h:376
msgid "``_id``"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:247
#: arch/s390/include/asm/debug.h:377
msgid "``_level``"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:248
#: arch/s390/include/asm/debug.h:378
msgid "``_fmt``"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:247
#: arch/s390/include/asm/debug.h:377
msgid "format string for debug entry"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:249
#: arch/s390/include/asm/debug.h:379
msgid "``...``"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:248
#: arch/s390/include/asm/debug.h:378
msgid "varargs used as in sprintf()"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:253
#: arch/s390/include/asm/debug.h:383
msgid "floats and long long datatypes cannot be used as varargs."
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:271
msgid ""
"writes binary debug entry to active debug area (if level <= actual debug "
"level) and switches to next debug area"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:293
msgid ""
"writes unsigned int debug entry to active debug area (if level <= actual "
"debug level) and switches to next debug area"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:316
msgid ""
"writes long debug entry to active debug area (if level <= actual debug "
"level) and switches to next debug area"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:339
msgid ""
"writes string debug entry in ascii format to active debug area (if level <= "
"actual debug level) and switches to next debug area area"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:372
msgid "``debug_sprintf_exception (_id, _level, _fmt, ...)``"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:370
msgid ""
"writes debug entry with format string and varargs (longs) to active debug "
"area (if level <= actual debug level) and switches to next debug area."
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:472
msgid ""
"``DEFINE_STATIC_DEBUG_INFO (var, name, pages, nr_areas, buf_size, view)``"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:470
msgid "Define static debug_info_t"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:476
msgid "``var``"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:472
msgid "Name of debug_info_t variable"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:474
msgid "``name``"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:475
msgid "``pages``"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:476
msgid "``nr_areas``"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:477
msgid "``buf_size``"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:478
msgid "``view``"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:477
msgid "Pointer to debug view struct"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:478
msgid ""
"Define a static debug_info_t for early tracing. The associated debugfs log "
"is automatically registered with the specified debug view."
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:481
msgid ""
"Important: Users of this macro must not call any of the debug_register/"
"_unregister() functions for this debug_info_t!"
msgstr ""

#: ../../../arch/s390/s390dbf:113: arch/s390/include/asm/debug.h:485
msgid ""
"Tracing will start with a fixed number of initial pages and areas. The debug "
"area will be changed to use the specified numbers during arch_initcall."
msgstr ""

#: ../../../arch/s390/s390dbf.rst:116
msgid "Predefined views:"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:125
msgid "Examples"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:194
msgid "Debugfs Interface"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:195
msgid ""
"Views to the debug logs can be investigated through reading the "
"corresponding debugfs-files:"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:214
msgid "See section about predefined views for explanation of the above output!"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:217
msgid "Changing the debug level"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:229
msgid "Flushing debug areas"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:230
msgid ""
"Debug areas can be flushed with piping the number of the desired area (0..."
"n) to the debugfs file \"flush\". When using \"-\" all debug areas are "
"flushed."
msgstr ""

#: ../../../arch/s390/s390dbf.rst:234
msgid "Examples:"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:236
msgid "Flush debug area 0::"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:240
msgid "Flush all debug areas::"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:245
msgid "Changing the size of debug areas"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:246
msgid ""
"It is possible the change the size of debug areas through piping the number "
"of pages to the debugfs file \"pages\". The resize request will also flush "
"the debug areas."
msgstr ""

#: ../../../arch/s390/s390dbf.rst:250 ../../../arch/s390/s390dbf.rst:258
#: ../../../arch/s390/s390dbf.rst:410
msgid "Example:"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:252
msgid "Define 4 pages for the debug areas of debug feature \"dasd\"::"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:257
msgid "Stopping the debug feature"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:260
msgid "Check if stopping is allowed::"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:264
msgid "Stop debug feature::"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:269
msgid "crash Interface"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:270
msgid ""
"The ``crash`` tool since v5.1.0 has a built-in command ``s390dbf`` to "
"display all the debug logs or export them to the file system. With this tool "
"it is possible to investigate the debug logs on a live system and with a "
"memory dump after a system crash."
msgstr ""

#: ../../../arch/s390/s390dbf.rst:277
msgid "Investigating raw memory"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:278
msgid ""
"One last possibility to investigate the debug logs at a live system and "
"after a system crash is to look at the raw memory under VM or at the Service "
"Element. It is possible to find the anchor of the debug-logs through the "
"``debug_area_first`` symbol in the System map. Then one has to follow the "
"correct pointers of the data-structures defined in debug.h and find the "
"debug-areas in memory. Normally modules which use the debug feature will "
"also have a global variable with the pointer to the debug-logs. Following "
"this pointer it will also be possible to find the debug logs in memory."
msgstr ""

#: ../../../arch/s390/s390dbf.rst:290
msgid ""
"For this method it is recommended to use '16 * x + 4' byte (x = 0..n) for "
"the length of the data field in :c:func:`debug_register()` in order to see "
"the debug entries well formatted."
msgstr ""

#: ../../../arch/s390/s390dbf.rst:296
msgid "Predefined Views"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:298
msgid ""
"There are two predefined views: hex_ascii and sprintf. The hex_ascii view "
"shows the data field in hex and ascii representation (e.g. ``45 43 4b 44 | "
"ECKD``)."
msgstr ""

#: ../../../arch/s390/s390dbf.rst:302
msgid ""
"The sprintf view formats the debug entries in the same way as the sprintf "
"function would do. The sprintf event/exception functions write to the debug "
"entry a pointer to the format string (size = sizeof(long)) and for each "
"vararg a long value. So e.g. for a debug entry with a format string plus two "
"varargs one would need to allocate a (3 * sizeof(long)) byte data area in "
"the debug_register() function."
msgstr ""

#: ../../../arch/s390/s390dbf.rst:309
msgid "IMPORTANT:"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:310
msgid ""
"Using \"%s\" in sprintf event functions is dangerous. You can only use "
"\"%s\" in the sprintf event functions, if the memory for the passed string "
"is available as long as the debug feature exists. The reason behind this is "
"that due to performance considerations only a pointer to the string is "
"stored in  the debug feature. If you log a string that is freed afterwards, "
"you will get an OOPS when inspecting the debug feature, because then the "
"debug feature will access the already freed memory."
msgstr ""

#: ../../../arch/s390/s390dbf.rst:318
msgid "NOTE:"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:319
msgid ""
"If using the sprintf view do NOT use other event/exception functions than "
"the sprintf-event and -exception functions."
msgstr ""

#: ../../../arch/s390/s390dbf.rst:322
msgid "The format of the hex_ascii and sprintf view is as follows:"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:324
msgid "Number of area"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:325
msgid ""
"Timestamp (formatted as seconds and microseconds since 00:00:00 Coordinated "
"Universal Time (UTC), January 1, 1970)"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:327
msgid "level of debug entry"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:328
msgid "Exception flag (* = Exception)"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:331
msgid "data field"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:333
msgid ""
"A typical line of the hex_ascii view will look like the following (first "
"line is only for explanation and will not be displayed when 'cating' the "
"view)::"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:342
msgid "Defining views"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:344
msgid ""
"Views are specified with the 'debug_view' structure. There are defined "
"callback functions which are used for reading and writing the debugfs files:"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:358
msgid "where:"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:380
msgid ""
"The \"private_data\" member can be used as pointer to view specific data. It "
"is not used by the debug feature itself."
msgstr ""

#: ../../../arch/s390/s390dbf.rst:383
msgid "The output when reading a debugfs file is structured like this::"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:392
msgid ""
"When a view is read from the debugfs, the Debug Feature calls the "
"'prolog_proc' once for writing the prolog. Then 'header_proc' and "
"'format_proc' are called for each existing debug entry."
msgstr ""

#: ../../../arch/s390/s390dbf.rst:397
msgid ""
"The input_proc can be used to implement functionality when it is written to "
"the view (e.g. like with ``echo \"0\" > /sys/kernel/debug/s390dbf/dasd/"
"level``)."
msgstr ""

#: ../../../arch/s390/s390dbf.rst:400
msgid ""
"For header_proc there can be used the default function :c:func:"
"`debug_dflt_header_fn()` which is defined in debug.h. and which produces the "
"same header output as the predefined views. E.g::"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:407
msgid ""
"In order to see how to use the callback functions check the implementation "
"of the default views!"
msgstr ""

#: ../../../arch/s390/s390dbf.rst:454
msgid "test:"
msgstr ""
