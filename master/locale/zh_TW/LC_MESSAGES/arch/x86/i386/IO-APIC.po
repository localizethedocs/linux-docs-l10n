# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../arch/x86/i386/IO-APIC.rst:5
msgid "IO-APIC"
msgstr ""

#: ../../../arch/x86/i386/IO-APIC.rst:0
msgid "Author"
msgstr ""

#: ../../../arch/x86/i386/IO-APIC.rst:7
msgid "Ingo Molnar <mingo@kernel.org>"
msgstr ""

#: ../../../arch/x86/i386/IO-APIC.rst:9
msgid ""
"Most (all) Intel-MP compliant SMP boards have the so-called 'IO-APIC', which "
"is an enhanced interrupt controller. It enables us to route hardware "
"interrupts to multiple CPUs, or to CPU groups. Without an IO-APIC, "
"interrupts from hardware will be delivered only to the CPU which boots the "
"operating system (usually CPU#0)."
msgstr ""

#: ../../../arch/x86/i386/IO-APIC.rst:15
msgid ""
"Linux supports all variants of compliant SMP boards, including ones with "
"multiple IO-APICs. Multiple IO-APICs are used in high-end servers to "
"distribute IRQ load further."
msgstr ""

#: ../../../arch/x86/i386/IO-APIC.rst:19
msgid ""
"There are (a few) known breakages in certain older boards, such bugs are "
"usually worked around by the kernel. If your MP-compliant SMP board does not "
"boot Linux, then consult the linux-smp mailing list archives first."
msgstr ""

#: ../../../arch/x86/i386/IO-APIC.rst:23
msgid ""
"If your box boots fine with enabled IO-APIC IRQs, then your /proc/interrupts "
"will look like this one::"
msgstr ""

#: ../../../arch/x86/i386/IO-APIC.rst:39
msgid ""
"Some interrupts are still listed as 'XT PIC', but this is not a problem; "
"none of those IRQ sources is performance-critical."
msgstr ""

#: ../../../arch/x86/i386/IO-APIC.rst:43
msgid ""
"In the unlikely case that your board does not create a working mp-table, you "
"can use the pirq= boot parameter to 'hand-construct' IRQ entries. This is "
"non-trivial though and cannot be automated. One sample /etc/lilo.conf entry::"
msgstr ""

#: ../../../arch/x86/i386/IO-APIC.rst:50
msgid ""
"The actual numbers depend on your system, on your PCI cards and on their PCI "
"slot position. Usually PCI slots are 'daisy chained' before they are "
"connected to the PCI chipset IRQ routing facility (the incoming PIRQ1-4 "
"lines)::"
msgstr ""

#: ../../../arch/x86/i386/IO-APIC.rst:65
msgid "Every PCI card emits a PCI IRQ, which can be INTA, INTB, INTC or INTD::"
msgstr ""

#: ../../../arch/x86/i386/IO-APIC.rst:77
msgid ""
"These INTA-D PCI IRQs are always 'local to the card', their real meaning "
"depends on which slot they are in. If you look at the daisy chaining "
"diagram, a card in slot4, issuing INTA IRQ, it will end up as a signal on "
"PIRQ4 of the PCI chipset. Most cards issue INTA, this creates optimal "
"distribution between the PIRQ lines. (distributing IRQ sources properly is "
"not a necessity, PCI IRQs can be shared at will, but it's a good for "
"performance to have non shared interrupts). Slot5 should be used for "
"videocards, they do not use interrupts normally, thus they are not daisy "
"chained either."
msgstr ""

#: ../../../arch/x86/i386/IO-APIC.rst:86
msgid ""
"so if you have your SCSI card (IRQ11) in Slot1, Tulip card (IRQ9) in Slot2, "
"then you'll have to specify this pirq= line::"
msgstr ""

#: ../../../arch/x86/i386/IO-APIC.rst:91
msgid ""
"the following script tries to figure out such a default pirq= line from your "
"PCI configuration::"
msgstr ""

#: ../../../arch/x86/i386/IO-APIC.rst:96
msgid ""
"note that this script won't work if you have skipped a few slots or if your "
"board does not do default daisy-chaining. (or the IO-APIC has the PIRQ pins "
"connected in some strange way). E.g. if in the above case you have your SCSI "
"card (IRQ11) in Slot3, and have Slot1 empty::"
msgstr ""

#: ../../../arch/x86/i386/IO-APIC.rst:103
msgid ""
"[value '0' is a generic 'placeholder', reserved for empty (or non-IRQ "
"emitting) slots.]"
msgstr ""

#: ../../../arch/x86/i386/IO-APIC.rst:106
msgid ""
"Generally, it's always possible to find out the correct pirq= settings, just "
"permute all IRQ numbers properly ... it will take some time though. An "
"'incorrect' pirq line will cause the booting process to hang, or a device "
"won't function properly (e.g. if it's inserted as a module)."
msgstr ""

#: ../../../arch/x86/i386/IO-APIC.rst:111
msgid ""
"If you have 2 PCI buses, then you can use up to 8 pirq values, although such "
"boards tend to have a good configuration."
msgstr ""

#: ../../../arch/x86/i386/IO-APIC.rst:114
msgid "Be prepared that it might happen that you need some strange pirq line::"
msgstr ""

#: ../../../arch/x86/i386/IO-APIC.rst:118
msgid ""
"Use smart trial-and-error techniques to find out the correct pirq line ..."
msgstr ""

#: ../../../arch/x86/i386/IO-APIC.rst:120
msgid ""
"Good luck and mail to linux-smp@vger.kernel.org or linux-kernel@vger.kernel."
"org if you have any problems that are not covered by this document."
msgstr ""
