# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../arch/x86/buslock.rst:7
msgid "Bus lock detection and handling"
msgstr ""

#: ../../../arch/x86/buslock.rst:0
msgid "Copyright"
msgstr ""

#: ../../../arch/x86/buslock.rst:9
msgid "|copy| 2021 Intel Corporation"
msgstr ""

#: ../../../arch/x86/buslock.rst:0
msgid "Authors"
msgstr ""

#: ../../../arch/x86/buslock.rst:10
msgid "Fenghua Yu <fenghua.yu@intel.com>"
msgstr ""

#: ../../../arch/x86/buslock.rst:11
msgid "Tony Luck <tony.luck@intel.com>"
msgstr ""

#: ../../../arch/x86/buslock.rst:14
msgid "Problem"
msgstr ""

#: ../../../arch/x86/buslock.rst:16
msgid ""
"A split lock is any atomic operation whose operand crosses two cache lines. "
"Since the operand spans two cache lines and the operation must be atomic, "
"the system locks the bus while the CPU accesses the two cache lines."
msgstr ""

#: ../../../arch/x86/buslock.rst:20
msgid ""
"A bus lock is acquired through either split locked access to writeback (WB) "
"memory or any locked access to non-WB memory. This is typically thousands of "
"cycles slower than an atomic operation within a cache line. It also disrupts "
"performance on other cores and brings the whole system to its knees."
msgstr ""

#: ../../../arch/x86/buslock.rst:26
msgid "Detection"
msgstr ""

#: ../../../arch/x86/buslock.rst:28
msgid ""
"Intel processors may support either or both of the following hardware "
"mechanisms to detect split locks and bus locks. Some AMD processors also "
"support bus lock detect."
msgstr ""

#: ../../../arch/x86/buslock.rst:33
msgid "#AC exception for split lock detection"
msgstr ""

#: ../../../arch/x86/buslock.rst:35
msgid ""
"Beginning with the Tremont Atom CPU split lock operations may raise an "
"Alignment Check (#AC) exception when a split lock operation is attempted."
msgstr ""

#: ../../../arch/x86/buslock.rst:39
msgid "#DB exception for bus lock detection"
msgstr ""

#: ../../../arch/x86/buslock.rst:41
msgid ""
"Some CPUs have the ability to notify the kernel by an #DB trap after a user "
"instruction acquires a bus lock and is executed. This allows the kernel to "
"terminate the application or to enforce throttling."
msgstr ""

#: ../../../arch/x86/buslock.rst:46
msgid "Software handling"
msgstr ""

#: ../../../arch/x86/buslock.rst:48
msgid ""
"The kernel #AC and #DB handlers handle bus lock based on the kernel "
"parameter \"split_lock_detect\". Here is a summary of different options:"
msgstr ""

#: ../../../arch/x86/buslock.rst:52
msgid "split_lock_detect="
msgstr ""

#: ../../../arch/x86/buslock.rst:52
msgid "#AC for split lock"
msgstr ""

#: ../../../arch/x86/buslock.rst:52
msgid "#DB for bus lock"
msgstr ""

#: ../../../arch/x86/buslock.rst:54 ../../../arch/x86/buslock.rst:101
msgid "off"
msgstr ""

#: ../../../arch/x86/buslock.rst:54 ../../../arch/x86/buslock.rst:73
msgid "Do nothing"
msgstr ""

#: ../../../arch/x86/buslock.rst:56
msgid "warn (default)"
msgstr ""

#: ../../../arch/x86/buslock.rst:56
msgid ""
"Kernel OOPs Warn once per task, add a delay, add synchronization to prevent "
"more than one core from executing a split lock in parallel. sysctl "
"split_lock_mitigate can be used to avoid the delay and synchronization When "
"both features are supported, warn in #AC"
msgstr ""

#: ../../../arch/x86/buslock.rst:56
msgid "Warn once per task and and continues to run."
msgstr ""

#: ../../../arch/x86/buslock.rst:68 ../../../arch/x86/buslock.rst:114
msgid "fatal"
msgstr ""

#: ../../../arch/x86/buslock.rst:68
msgid ""
"Kernel OOPs Send SIGBUS to user When both features are supported, fatal in "
"#AC"
msgstr ""

#: ../../../arch/x86/buslock.rst:68
msgid "Send SIGBUS to user."
msgstr ""

#: ../../../arch/x86/buslock.rst:73
msgid "ratelimit:N (0 < N <= 1000)"
msgstr ""

#: ../../../arch/x86/buslock.rst:73
msgid ""
"Limit bus lock rate to N bus locks per second system wide and warn on bus "
"locks."
msgstr ""

#: ../../../arch/x86/buslock.rst:80
msgid "Usages"
msgstr ""

#: ../../../arch/x86/buslock.rst:82
msgid "Detecting and handling bus lock may find usages in various areas:"
msgstr ""

#: ../../../arch/x86/buslock.rst:84
msgid ""
"It is critical for real time system designers who build consolidated real "
"time systems. These systems run hard real time code on some cores and run "
"\"untrusted\" user processes on other cores. The hard real time cannot "
"afford to have any bus lock from the untrusted processes to hurt real time "
"performance. To date the designers have been unable to deploy these "
"solutions as they have no way to prevent the \"untrusted\" user code from "
"generating split lock and bus lock to block the hard real time code to "
"access memory during bus locking."
msgstr ""

#: ../../../arch/x86/buslock.rst:93
msgid ""
"It's also useful for general computing to prevent guests or user "
"applications from slowing down the overall system by executing instructions "
"with bus lock."
msgstr ""

#: ../../../arch/x86/buslock.rst:99
msgid "Guidance"
msgstr ""

#: ../../../arch/x86/buslock.rst:103
msgid ""
"Disable checking for split lock and bus lock. This option can be useful if "
"there are legacy applications that trigger these events at a low rate so "
"that mitigation is not needed."
msgstr ""

#: ../../../arch/x86/buslock.rst:108
msgid "warn"
msgstr ""

#: ../../../arch/x86/buslock.rst:110
msgid ""
"A warning is emitted when a bus lock is detected which allows to identify "
"the offending application. This is the default behavior."
msgstr ""

#: ../../../arch/x86/buslock.rst:116
msgid "In this case, the bus lock is not tolerated and the process is killed."
msgstr ""

#: ../../../arch/x86/buslock.rst:119
msgid "ratelimit"
msgstr ""

#: ../../../arch/x86/buslock.rst:121
msgid ""
"A system wide bus lock rate limit N is specified where 0 < N <= 1000. This "
"allows a bus lock rate up to N bus locks per second. When the bus lock rate "
"is exceeded then any task which is caught via the buslock #DB exception is "
"throttled by enforced sleeps until the rate goes under the limit again."
msgstr ""

#: ../../../arch/x86/buslock.rst:126
msgid ""
"This is an effective mitigation in cases where a minimal impact can be "
"tolerated, but an eventual Denial of Service attack has to be prevented. It "
"allows to identify the offending processes and analyze whether they are "
"malicious or just badly written."
msgstr ""

#: ../../../arch/x86/buslock.rst:131
msgid ""
"Selecting a rate limit of 1000 allows the bus to be locked for up to about "
"seven million cycles each second (assuming 7000 cycles for each bus lock). "
"On a 2 GHz processor that would be about 0.35% system slowdown."
msgstr ""
