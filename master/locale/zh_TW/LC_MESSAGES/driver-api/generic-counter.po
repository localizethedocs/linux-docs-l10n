# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../driver-api/generic-counter.rst:5
msgid "Generic Counter Interface"
msgstr ""

#: ../../../driver-api/generic-counter.rst:8
msgid "Introduction"
msgstr ""

#: ../../../driver-api/generic-counter.rst:10
msgid ""
"Counter devices are prevalent among a diverse spectrum of industries. The "
"ubiquitous presence of these devices necessitates a common interface and "
"standard of interaction and exposure. This driver API attempts to resolve "
"the issue of duplicate code found among existing counter device drivers by "
"introducing a generic counter interface for consumption. The Generic Counter "
"interface enables drivers to support and expose a common set of components "
"and functionality present in counter devices."
msgstr ""

#: ../../../driver-api/generic-counter.rst:19
msgid "Theory"
msgstr ""

#: ../../../driver-api/generic-counter.rst:21
msgid ""
"Counter devices can vary greatly in design, but regardless of whether some "
"devices are quadrature encoder counters or tally counters, all counter "
"devices consist of a core set of components. This core set of components, "
"shared by all counter devices, is what forms the essence of the Generic "
"Counter interface."
msgstr ""

#: ../../../driver-api/generic-counter.rst:27
msgid "There are three core components to a counter:"
msgstr ""

#: ../../../driver-api/generic-counter.rst:29
msgid "Signal: Stream of data to be evaluated by the counter."
msgstr ""

#: ../../../driver-api/generic-counter.rst:32
msgid "Synapse: Association of a Signal, and evaluation trigger, with a Count."
msgstr ""

#: ../../../driver-api/generic-counter.rst:35
msgid "Count: Accumulation of the effects of connected Synapses."
msgstr ""

#: ../../../driver-api/generic-counter.rst:39
msgid "SIGNAL"
msgstr ""

#: ../../../driver-api/generic-counter.rst:40
msgid ""
"A Signal represents a stream of data. This is the input data that is "
"evaluated by the counter to determine the count data; e.g. a quadrature "
"signal output line of a rotary encoder. Not all counter devices provide user "
"access to the Signal data, so exposure is optional for drivers."
msgstr ""

#: ../../../driver-api/generic-counter.rst:45
msgid ""
"When the Signal data is available for user access, the Generic Counter "
"interface provides the following available signal values:"
msgstr ""

#: ../../../driver-api/generic-counter.rst:48
msgid "SIGNAL_LOW: Signal line is in a low state."
msgstr ""

#: ../../../driver-api/generic-counter.rst:51
msgid "SIGNAL_HIGH: Signal line is in a high state."
msgstr ""

#: ../../../driver-api/generic-counter.rst:54
msgid "A Signal may be associated with one or more Counts."
msgstr ""

#: ../../../driver-api/generic-counter.rst:57
msgid "SYNAPSE"
msgstr ""

#: ../../../driver-api/generic-counter.rst:58
msgid ""
"A Synapse represents the association of a Signal with a Count. Signal data "
"affects respective Count data, and the Synapse represents this relationship."
msgstr ""

#: ../../../driver-api/generic-counter.rst:62
msgid ""
"The Synapse action mode specifies the Signal data condition that triggers "
"the respective Count's count function evaluation to update the count data. "
"The Generic Counter interface provides the following available action modes:"
msgstr ""

#: ../../../driver-api/generic-counter.rst:67
msgid ""
"None: Signal does not trigger the count function. In Pulse-Direction count "
"function mode, this Signal is evaluated as Direction."
msgstr ""

#: ../../../driver-api/generic-counter.rst:71
msgid "Rising Edge: Low state transitions to high state."
msgstr ""

#: ../../../driver-api/generic-counter.rst:74
msgid "Falling Edge: High state transitions to low state."
msgstr ""

#: ../../../driver-api/generic-counter.rst:77
msgid "Both Edges: Any state transition."
msgstr ""

#: ../../../driver-api/generic-counter.rst:80
msgid ""
"A counter is defined as a set of input signals associated with count data "
"that are generated by the evaluation of the state of the associated input "
"signals as defined by the respective count functions. Within the context of "
"the Generic Counter interface, a counter consists of Counts each associated "
"with a set of Signals, whose respective Synapse instances represent the "
"count function update conditions for the associated Counts."
msgstr ""

#: ../../../driver-api/generic-counter.rst:88
msgid "A Synapse associates one Signal with one Count."
msgstr ""

#: ../../../driver-api/generic-counter.rst:91
msgid "COUNT"
msgstr ""

#: ../../../driver-api/generic-counter.rst:92
msgid ""
"A Count represents the accumulation of the effects of connected Synapses; i."
"e. the count data for a set of Signals. The Generic Counter interface "
"represents the count data as a natural number."
msgstr ""

#: ../../../driver-api/generic-counter.rst:96
msgid ""
"A Count has a count function mode which represents the update behavior for "
"the count data. The Generic Counter interface provides the following "
"available count function modes:"
msgstr ""

#: ../../../driver-api/generic-counter.rst:100
msgid "Increase: Accumulated count is incremented."
msgstr ""

#: ../../../driver-api/generic-counter.rst:103
msgid "Decrease: Accumulated count is decremented."
msgstr ""

#: ../../../driver-api/generic-counter.rst:106
msgid ""
"Pulse-Direction: Rising edges on signal A updates the respective count. The "
"input level of signal B determines direction."
msgstr ""

#: ../../../driver-api/generic-counter.rst:110
msgid ""
"Quadrature: A pair of quadrature encoding signals are evaluated to determine "
"position and direction. The following Quadrature modes are available:"
msgstr ""

#: ../../../driver-api/generic-counter.rst:114
msgid ""
"x1 A: If direction is forward, rising edges on quadrature pair signal A "
"updates the respective count; if the direction is backward, falling edges on "
"quadrature pair signal A updates the respective count. Quadrature encoding "
"determines the direction."
msgstr ""

#: ../../../driver-api/generic-counter.rst:120
msgid ""
"x1 B: If direction is forward, rising edges on quadrature pair signal B "
"updates the respective count; if the direction is backward, falling edges on "
"quadrature pair signal B updates the respective count. Quadrature encoding "
"determines the direction."
msgstr ""

#: ../../../driver-api/generic-counter.rst:126
msgid ""
"x2 A: Any state transition on quadrature pair signal A updates the "
"respective count. Quadrature encoding determines the direction."
msgstr ""

#: ../../../driver-api/generic-counter.rst:130
msgid ""
"x2 B: Any state transition on quadrature pair signal B updates the "
"respective count. Quadrature encoding determines the direction."
msgstr ""

#: ../../../driver-api/generic-counter.rst:134
msgid ""
"x4: Any state transition on either quadrature pair signals updates the "
"respective count. Quadrature encoding determines the direction."
msgstr ""

#: ../../../driver-api/generic-counter.rst:138
msgid "A Count has a set of one or more associated Synapses."
msgstr ""

#: ../../../driver-api/generic-counter.rst:141
msgid "Paradigm"
msgstr ""

#: ../../../driver-api/generic-counter.rst:143
msgid ""
"The most basic counter device may be expressed as a single Count associated "
"with a single Signal via a single Synapse. Take for example a counter device "
"which simply accumulates a count of rising edges on a source input line::"
msgstr ""

#: ../../../driver-api/generic-counter.rst:156
msgid ""
"In this example, the Signal is a source input line with a pulsing voltage, "
"while the Count is a persistent count value which is repeatedly incremented. "
"The Signal is associated with the respective Count via a Synapse. The "
"increase function is triggered by the Signal data condition specified by the "
"Synapse -- in this case a rising edge condition on the voltage input line. "
"In summary, the counter device existence and behavior is aptly represented "
"by respective Count, Signal, and Synapse components: a rising edge condition "
"triggers an increase function on an accumulating count datum."
msgstr ""

#: ../../../driver-api/generic-counter.rst:166
msgid ""
"A counter device is not limited to a single Signal; in fact, in theory many "
"Signals may be associated with even a single Count. For example, a "
"quadrature encoder counter device can keep track of position based on the "
"states of two input lines::"
msgstr ""

#: ../../../driver-api/generic-counter.rst:183
msgid ""
"In this example, two Signals (quadrature encoder lines A and B) are "
"associated with a single Count: a rising or falling edge on either A or B "
"triggers the \"Quadrature x4\" function which determines the direction of "
"movement and updates the respective position data. The \"Quadrature x4\" "
"function is likely implemented in the hardware of the quadrature encoder "
"counter device; the Count, Signals, and Synapses simply represent this "
"hardware behavior and functionality."
msgstr ""

#: ../../../driver-api/generic-counter.rst:191
msgid ""
"Signals associated with the same Count can have differing Synapse action "
"mode conditions. For example, a quadrature encoder counter device operating "
"in a non-quadrature Pulse-Direction mode could have one input line dedicated "
"for movement and a second input line dedicated for direction::"
msgstr ""

#: ../../../driver-api/generic-counter.rst:209
msgid ""
"Only Signal A triggers the \"Pulse-Direction\" update function, but the "
"instantaneous state of Signal B is still required in order to know the "
"direction so that the position data may be properly updated. Ultimately, "
"both Signals are associated with the same Count via two respective Synapses, "
"but only one Synapse has an active action mode condition which triggers the "
"respective count function while the other is left with a \"None\" condition "
"action mode to indicate its respective Signal's availability for state "
"evaluation despite its non-triggering mode."
msgstr ""

#: ../../../driver-api/generic-counter.rst:218
msgid ""
"Keep in mind that the Signal, Synapse, and Count are abstract "
"representations which do not need to be closely married to their respective "
"physical sources. This allows the user of a counter to divorce themselves "
"from the nuances of physical components (such as whether an input line is "
"differential or single-ended) and instead focus on the core idea of what the "
"data and process represent (e.g. position as interpreted from quadrature "
"encoding data)."
msgstr ""

#: ../../../driver-api/generic-counter.rst:227
msgid "Driver API"
msgstr ""

#: ../../../driver-api/generic-counter.rst:229
msgid ""
"Driver authors may utilize the Generic Counter interface in their code by "
"including the include/linux/counter.h header file. This header file provides "
"several core data structures, function prototypes, and macros for defining a "
"counter device."
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:40
msgid "Counter component node"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:44
#: include/linux/counter.h:232 include/linux/counter.h:247
#: include/linux/counter.h:260 include/linux/counter.h:285
#: include/linux/counter.h:299 include/linux/counter.h:357
msgid "**Definition**::"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:84
#: include/linux/counter.h:241 include/linux/counter.h:255
#: include/linux/counter.h:273 include/linux/counter.h:294
#: include/linux/counter.h:313 include/linux/counter.h:382
msgid "**Members**"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:41
msgid "``type``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:42
msgid "Counter component data type"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:42
#: include/linux/counter.h:230 include/linux/counter.h:258
#: include/linux/counter.h:354
msgid "``name``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:43
msgid "device-specific component name"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:43
msgid "``priv``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:44
msgid "component-relevant data"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:1
msgid "``{unnamed_union}``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:2
msgid "anonymous"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:44
#: include/linux/counter.h:311
msgid "``action_read``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:45
msgid ""
"Synapse action mode read callback. The read value of the respective Synapse "
"action mode should be passed back via the action parameter."
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:47
msgid "``device_u8_read``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:48
msgid ""
"Device u8 component read callback. The read value of the respective Device "
"u8 component should be passed back via the val parameter."
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:50
msgid "``count_u8_read``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:51
msgid ""
"Count u8 component read callback. The read value of the respective Count u8 "
"component should be passed back via the val parameter."
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:53
msgid "``signal_u8_read``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:54
msgid ""
"Signal u8 component read callback. The read value of the respective Signal "
"u8 component should be passed back via the val parameter."
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:56
msgid "``device_u32_read``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:57
msgid ""
"Device u32 component read callback. The read value of the respective Device "
"u32 component should be passed back via the val parameter."
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:59
msgid "``count_u32_read``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:60
msgid ""
"Count u32 component read callback. The read value of the respective Count "
"u32 component should be passed back via the val parameter."
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:62
msgid "``signal_u32_read``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:63
msgid ""
"Signal u32 component read callback. The read value of the respective Signal "
"u32 component should be passed back via the val parameter."
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:65
msgid "``device_u64_read``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:66
msgid ""
"Device u64 component read callback. The read value of the respective Device "
"u64 component should be passed back via the val parameter."
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:68
msgid "``count_u64_read``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:69
msgid ""
"Count u64 component read callback. The read value of the respective Count "
"u64 component should be passed back via the val parameter."
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:71
msgid "``signal_u64_read``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:72
msgid ""
"Signal u64 component read callback. The read value of the respective Signal "
"u64 component should be passed back via the val parameter."
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:74
msgid "``signal_array_u32_read``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:75
msgid ""
"Signal u32 array component read callback. The index of the respective Count "
"u32 array component element is passed via the idx parameter. The read value "
"of the respective Count u32 array component element should be passed back "
"via the val parameter."
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:80
msgid "``device_array_u64_read``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:81
msgid ""
"Device u64 array component read callback. The index of the respective Device "
"u64 array component element is passed via the idx parameter. The read value "
"of the respective Device u64 array component element should be passed back "
"via the val parameter."
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:86
msgid "``count_array_u64_read``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:87
msgid ""
"Count u64 array component read callback. The index of the respective Count "
"u64 array component element is passed via the idx parameter. The read value "
"of the respective Count u64 array component element should be passed back "
"via the val parameter."
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:92
msgid "``signal_array_u64_read``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:93
msgid ""
"Signal u64 array component read callback. The index of the respective Count "
"u64 array component element is passed via the idx parameter. The read value "
"of the respective Count u64 array component element should be passed back "
"via the val parameter."
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:98
#: include/linux/counter.h:314
msgid "``action_write``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:99
msgid ""
"Synapse action mode write callback. The write value of the respective "
"Synapse action mode is passed via the action parameter."
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:101
msgid "``device_u8_write``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:102
msgid ""
"Device u8 component write callback. The write value of the respective Device "
"u8 component is passed via the val parameter."
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:104
msgid "``count_u8_write``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:105
msgid ""
"Count u8 component write callback. The write value of the respective Count "
"u8 component is passed via the val parameter."
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:107
msgid "``signal_u8_write``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:108
msgid ""
"Signal u8 component write callback. The write value of the respective Signal "
"u8 component is passed via the val parameter."
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:110
msgid "``device_u32_write``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:111
msgid ""
"Device u32 component write callback. The write value of the respective "
"Device u32 component is passed via the val parameter."
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:113
msgid "``count_u32_write``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:114
msgid ""
"Count u32 component write callback. The write value of the respective Count "
"u32 component is passed via the val parameter."
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:116
msgid "``signal_u32_write``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:117
msgid ""
"Signal u32 component write callback. The write value of the respective "
"Signal u32 component is passed via the val parameter."
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:119
msgid "``device_u64_write``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:120
msgid ""
"Device u64 component write callback. The write value of the respective "
"Device u64 component is passed via the val parameter."
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:122
msgid "``count_u64_write``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:123
msgid ""
"Count u64 component write callback. The write value of the respective Count "
"u64 component is passed via the val parameter."
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:125
msgid "``signal_u64_write``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:126
msgid ""
"Signal u64 component write callback. The write value of the respective "
"Signal u64 component is passed via the val parameter."
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:128
msgid "``signal_array_u32_write``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:129
msgid ""
"Signal u32 array component write callback. The index of the respective "
"Signal u32 array component element is passed via the idx parameter. The "
"write value of the respective Signal u32 array component element is passed "
"via the val parameter."
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:134
msgid "``device_array_u64_write``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:135
msgid ""
"Device u64 array component write callback. The index of the respective "
"Device u64 array component element is passed via the idx parameter. The "
"write value of the respective Device u64 array component element is passed "
"via the val parameter."
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:140
msgid "``count_array_u64_write``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:141
msgid ""
"Count u64 array component write callback. The index of the respective Count "
"u64 array component element is passed via the idx parameter. The write value "
"of the respective Count u64 array component element is passed via the val "
"parameter."
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:146
msgid "``signal_array_u64_write``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:147
msgid ""
"Signal u64 array component write callback. The index of the respective "
"Signal u64 array component element is passed via the idx parameter. The "
"write value of the respective Signal u64 array component element is passed "
"via the val parameter."
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:228
msgid "Counter Signal node"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:229
#: include/linux/counter.h:257
msgid "``id``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:230
msgid "unique ID used to identify the Signal"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:231
msgid "device-specific Signal name"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:231
#: include/linux/counter.h:263 include/linux/counter.h:361
msgid "``ext``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:232
msgid "optional array of Signal extensions"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:232
#: include/linux/counter.h:264 include/linux/counter.h:362
msgid "``num_ext``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:233
msgid "number of Signal extensions specified in **ext**"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:243
msgid "Counter Synapse node"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:244
msgid "``actions_list``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:245
msgid "array of available action modes"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:245
msgid "``num_actions``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:246
msgid "number of action modes specified in **actions_list**"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:246
msgid "``signal``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:247
msgid "pointer to the associated Signal"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:256
msgid "Counter Count node"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:258
msgid "unique ID used to identify the Count"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:259
msgid "device-specific Count name"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:259
msgid "``functions_list``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:260
msgid "array of available function modes"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:260
msgid "``num_functions``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:261
msgid "number of function modes specified in **functions_list**"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:261
msgid "``synapses``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:262
msgid "array of Synapses for initialization"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:262
msgid "``num_synapses``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:263
msgid "number of Synapses specified in **synapses**"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:264
msgid "optional array of Count extensions"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:265
msgid "number of Count extensions specified in **ext**"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:281
msgid "Counter Event node"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:282
msgid "``l``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:283
#: include/linux/counter.h:366
msgid "list of current watching Counter events"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:283
msgid "``event``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:284
msgid "event that triggers"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:284
msgid "``channel``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:285
#: ../../../driver-api/generic-counter:240:
#: drivers/counter/counter-chrdev.c:629
msgid "event channel"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:285
msgid "``comp_list``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:286
msgid "list of components to watch when event triggers"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:295
msgid "Callbacks from driver"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:296
msgid "``signal_read``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:297
msgid ""
"optional read callback for Signals. The read level of the respective Signal "
"should be passed back via the level parameter."
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:299
msgid "``count_read``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:300
msgid ""
"read callback for Counts. The read value of the respective Count should be "
"passed back via the value parameter."
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:302
msgid "``count_write``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:303
msgid ""
"optional write callback for Counts. The write value for the respective Count "
"is passed in via the value parameter."
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:305
msgid "``function_read``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:306
msgid ""
"read callback the Count function modes. The read function mode of the "
"respective Count should be passed back via the function parameter."
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:308
msgid "``function_write``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:309
msgid ""
"optional write callback for Count function modes. The function mode to write "
"for the respective Count is passed in via the function parameter."
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:312
msgid ""
"optional read callback the Synapse action modes. The read action mode of the "
"respective Synapse should be passed back via the action parameter."
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:315
msgid ""
"optional write callback for Synapse action modes. The action mode to write "
"for the respective Synapse is passed in via the action parameter."
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:317
msgid "``events_configure``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:318
msgid ""
"optional write callback to configure events. The list of struct "
"counter_event_node may be accessed via the events_list member of the counter "
"parameter."
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:320
msgid "``watch_validate``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:321
msgid ""
"optional callback to validate a watch. The Counter component watch "
"configuration is passed in via the watch parameter. A return value of 0 "
"indicates a valid Counter component watch configuration."
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:353
msgid "Counter data structure"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:355
msgid "name of the device"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:355
msgid "``parent``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:356
msgid "optional parent device providing the counters"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:356
msgid "``ops``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:357
msgid "callbacks from driver"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:357
msgid "``signals``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:358
msgid "array of Signals"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:358
msgid "``num_signals``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:359
msgid "number of Signals specified in **signals**"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:359
msgid "``counts``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:360
msgid "array of Counts"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:360
msgid "``num_counts``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:361
msgid "number of Counts specified in **counts**"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:362
msgid "optional array of Counter device extensions"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:363
msgid "number of Counter device extensions specified in **ext**"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:363
msgid "``dev``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:364
msgid "internal device structure"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:364
msgid "``chrdev``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:365
msgid "internal character device structure"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:365
msgid "``events_list``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:366
msgid "``events_list_lock``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:367
msgid "lock to protect Counter events list operations"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:367
msgid "``next_events_list``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:368
msgid "list of next watching Counter events"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:368
msgid "``n_events_list_lock``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:369
msgid "lock to protect Counter next events list operations"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:369
msgid "``events``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:370
msgid "queue of detected Counter events"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:370
msgid "``events_wait``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:371
msgid "wait queue to allow blocking reads of Counter events"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:371
msgid "``events_in_lock``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:372
msgid "lock to protect Counter events queue in operations"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:372
msgid "``events_out_lock``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:373
msgid "lock to protect Counter events queue out operations"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:373
msgid "``ops_exist_lock``"
msgstr ""

#: ../../../driver-api/generic-counter:234: include/linux/counter.h:374
msgid "lock to prevent use during removal"
msgstr ""

#: ../../../driver-api/generic-counter:237: drivers/counter/counter-core.c:65
msgid "access counter device private data"
msgstr ""

#: ../../../driver-api/generic-counter:237: drivers/counter/counter-core.c:69
#: drivers/counter/counter-core.c:84 drivers/counter/counter-core.c:150
#: drivers/counter/counter-core.c:177 drivers/counter/counter-core.c:209
#: drivers/counter/counter-core.c:234 ../../../driver-api/generic-counter:240:
#: drivers/counter/counter-chrdev.c:630
msgid "**Parameters**"
msgstr ""

#: ../../../driver-api/generic-counter:237: drivers/counter/counter-core.c:71
msgid "``const struct counter_device *const counter``"
msgstr ""

#: ../../../driver-api/generic-counter:237: drivers/counter/counter-core.c:66
msgid "counter device"
msgstr ""

#: ../../../driver-api/generic-counter:237: drivers/counter/counter-core.c:68
#: drivers/counter/counter-core.c:83 drivers/counter/counter-core.c:149
#: drivers/counter/counter-core.c:176 drivers/counter/counter-core.c:209
#: drivers/counter/counter-core.c:234
msgid "**Description**"
msgstr ""

#: ../../../driver-api/generic-counter:237: drivers/counter/counter-core.c:67
msgid "Get the counter device private data"
msgstr ""

#: ../../../driver-api/generic-counter:237: drivers/counter/counter-core.c:80
#: drivers/counter/counter-core.c:205
msgid "allocate a counter_device"
msgstr ""

#: ../../../driver-api/generic-counter:237: drivers/counter/counter-core.c:86
#: drivers/counter/counter-core.c:208
msgid "``size_t sizeof_priv``"
msgstr ""

#: ../../../driver-api/generic-counter:237: drivers/counter/counter-core.c:81
#: drivers/counter/counter-core.c:207
msgid "size of the driver private data"
msgstr ""

#: ../../../driver-api/generic-counter:237: drivers/counter/counter-core.c:82
msgid ""
"This is part one of counter registration. The structure is allocated "
"dynamically to ensure the right lifetime for the embedded struct device."
msgstr ""

#: ../../../driver-api/generic-counter:237: drivers/counter/counter-core.c:85
msgid ""
"If this succeeds, call counter_put() to get rid of the counter_device again."
msgstr ""

#: ../../../driver-api/generic-counter:237: drivers/counter/counter-core.c:146
#: drivers/counter/counter-core.c:230
msgid "complete registration of a counter"
msgstr ""

#: ../../../driver-api/generic-counter:237: drivers/counter/counter-core.c:152
msgid "``struct counter_device *counter``"
msgstr ""

#: ../../../driver-api/generic-counter:237: drivers/counter/counter-core.c:147
#: drivers/counter/counter-core.c:232
msgid "the counter to add"
msgstr ""

#: ../../../driver-api/generic-counter:237: drivers/counter/counter-core.c:148
msgid "This is part two of counter registration."
msgstr ""

#: ../../../driver-api/generic-counter:237: drivers/counter/counter-core.c:150
msgid ""
"If this succeeds, call counter_unregister() to get rid of the counter_device "
"again."
msgstr ""

#: ../../../driver-api/generic-counter:237: drivers/counter/counter-core.c:173
msgid "unregister Counter from the system"
msgstr ""

#: ../../../driver-api/generic-counter:237: drivers/counter/counter-core.c:179
#: drivers/counter/counter-core.c:233 ../../../driver-api/generic-counter:240:
#: drivers/counter/counter-chrdev.c:632
msgid "``struct counter_device *const counter``"
msgstr ""

#: ../../../driver-api/generic-counter:237: drivers/counter/counter-core.c:174
msgid "pointer to Counter to unregister"
msgstr ""

#: ../../../driver-api/generic-counter:237: drivers/counter/counter-core.c:175
msgid "The Counter is unregistered from the system."
msgstr ""

#: ../../../driver-api/generic-counter:237: drivers/counter/counter-core.c:211
#: drivers/counter/counter-core.c:236
msgid "``struct device *dev``"
msgstr ""

#: ../../../driver-api/generic-counter:237: drivers/counter/counter-core.c:206
#: drivers/counter/counter-core.c:231
msgid "the device to register the release callback for"
msgstr ""

#: ../../../driver-api/generic-counter:237: drivers/counter/counter-core.c:208
msgid ""
"This is the device managed version of counter_add(). It registers a cleanup "
"callback to care for calling counter_put()."
msgstr ""

#: ../../../driver-api/generic-counter:237: drivers/counter/counter-core.c:233
msgid ""
"This is the device managed version of counter_add(). It registers a cleanup "
"callback to care for calling counter_unregister()."
msgstr ""

#: ../../../driver-api/generic-counter:240:
#: drivers/counter/counter-chrdev.c:626
msgid "queue event for userspace reading"
msgstr ""

#: ../../../driver-api/generic-counter:240:
#: drivers/counter/counter-chrdev.c:627
msgid "pointer to Counter structure"
msgstr ""

#: ../../../driver-api/generic-counter:240:
#: drivers/counter/counter-chrdev.c:629
msgid "``const u8 event``"
msgstr ""

#: ../../../driver-api/generic-counter:240:
#: drivers/counter/counter-chrdev.c:628
msgid "triggered event"
msgstr ""

#: ../../../driver-api/generic-counter:240:
#: drivers/counter/counter-chrdev.c:630
msgid "``const u8 channel``"
msgstr ""

#: ../../../driver-api/generic-counter:240:
#: drivers/counter/counter-chrdev.c:631
msgid "**Note**"
msgstr ""

#: ../../../driver-api/generic-counter:240:
#: drivers/counter/counter-chrdev.c:631
msgid ""
"If no one is watching for the respective event, it is silently discarded."
msgstr ""

#: ../../../driver-api/generic-counter.rst:244
msgid "Driver Implementation"
msgstr ""

#: ../../../driver-api/generic-counter.rst:246
msgid ""
"To support a counter device, a driver must first allocate the available "
"Counter Signals via counter_signal structures. These Signals should be "
"stored as an array and set to the signals array member of an allocated "
"counter_device structure before the Counter is registered to the system."
msgstr ""

#: ../../../driver-api/generic-counter.rst:252
msgid ""
"Counter Counts may be allocated via counter_count structures, and respective "
"Counter Signal associations (Synapses) made via counter_synapse structures. "
"Associated counter_synapse structures are stored as an array and set to the "
"synapses array member of the respective counter_count structure. These "
"counter_count structures are set to the counts array member of an allocated "
"counter_device structure before the Counter is registered to the system."
msgstr ""

#: ../../../driver-api/generic-counter.rst:260
msgid ""
"Driver callbacks must be provided to the counter_device structure in order "
"to communicate with the device: to read and write various Signals and "
"Counts, and to set and get the \"action mode\" and \"function mode\" for "
"various Synapses and Counts respectively."
msgstr ""

#: ../../../driver-api/generic-counter.rst:265
msgid ""
"A counter_device structure is allocated using counter_alloc() and then "
"registered to the system by passing it to the counter_add() function, and "
"unregistered by passing it to the counter_unregister function. There are "
"device managed variants of these functions: devm_counter_alloc() and "
"devm_counter_add()."
msgstr ""

#: ../../../driver-api/generic-counter.rst:271
msgid ""
"The struct counter_comp structure is used to define counter extensions for "
"Signals, Synapses, and Counts."
msgstr ""

#: ../../../driver-api/generic-counter.rst:274
msgid ""
"The \"type\" member specifies the type of high-level data (e.g. BOOL, "
"COUNT_DIRECTION, etc.) handled by this extension. The \"``*_read``\" and "
"\"``*_write``\" members can then be set by the counter device driver with "
"callbacks to handle that data using native C data types (i.e. u8, u64, etc.)."
msgstr ""

#: ../../../driver-api/generic-counter.rst:280
msgid ""
"Convenience macros such as ``COUNTER_COMP_COUNT_U64`` are provided for use "
"by driver authors. In particular, driver authors are expected to use the "
"provided macros for standard Counter subsystem attributes in order to "
"maintain a consistent interface for userspace. For example, a counter device "
"driver may define several standard attributes like so::"
msgstr ""

#: ../../../driver-api/generic-counter.rst:292
msgid ""
"This makes it simple to see, add, and modify the attributes that are "
"supported by this driver (\"direction\", \"enable\", and \"ceiling\") and to "
"maintain this code without getting lost in a web of struct braces."
msgstr ""

#: ../../../driver-api/generic-counter.rst:296
msgid ""
"Callbacks must match the function type expected for the respective component "
"or extension. These function types are defined in the struct counter_comp "
"structure as the \"``*_read``\" and \"``*_write``\" union members."
msgstr ""

#: ../../../driver-api/generic-counter.rst:301
msgid ""
"The corresponding callback prototypes for the extensions mentioned in the "
"previous example above would be::"
msgstr ""

#: ../../../driver-api/generic-counter.rst:316
msgid "Determining the type of extension to create is a matter of scope."
msgstr ""

#: ../../../driver-api/generic-counter.rst:318
msgid ""
"Signal extensions are attributes that expose information/control specific to "
"a Signal. These types of attributes will exist under a Signal's directory in "
"sysfs."
msgstr ""

#: ../../../driver-api/generic-counter.rst:322
msgid ""
"For example, if you have an invert feature for a Signal, you can have a "
"Signal extension called \"invert\" that toggles that feature: /sys/bus/"
"counter/devices/counterX/signalY/invert"
msgstr ""

#: ../../../driver-api/generic-counter.rst:326
msgid ""
"Count extensions are attributes that expose information/control specific to "
"a Count. These type of attributes will exist under a Count's directory in "
"sysfs."
msgstr ""

#: ../../../driver-api/generic-counter.rst:330
msgid ""
"For example, if you want to pause/unpause a Count from updating, you can "
"have a Count extension called \"enable\" that toggles such: /sys/bus/counter/"
"devices/counterX/countY/enable"
msgstr ""

#: ../../../driver-api/generic-counter.rst:334
msgid ""
"Device extensions are attributes that expose information/control non-"
"specific to a particular Count or Signal. This is where you would put your "
"global features or other miscellaneous functionality."
msgstr ""

#: ../../../driver-api/generic-counter.rst:338
msgid ""
"For example, if your device has an overtemp sensor, you can report the chip "
"overheated via a device extension called \"error_overtemp\": /sys/bus/"
"counter/devices/counterX/error_overtemp"
msgstr ""

#: ../../../driver-api/generic-counter.rst:343
msgid "Subsystem Architecture"
msgstr ""

#: ../../../driver-api/generic-counter.rst:345
msgid ""
"Counter drivers pass and take data natively (i.e. ``u8``, ``u64``, etc.) and "
"the shared counter module handles the translation between the sysfs "
"interface. This guarantees a standard userspace interface for all counter "
"drivers, and enables a Generic Counter chrdev interface via a generalized "
"device driver ABI."
msgstr ""

#: ../../../driver-api/generic-counter.rst:351
msgid ""
"A high-level view of how a count value is passed down from a counter driver "
"is exemplified by the following. The driver callbacks are first registered "
"to the Counter core component for use by the Counter userspace interface "
"components::"
msgstr ""

#: ../../../driver-api/generic-counter.rst:392
msgid ""
"Thereafter, data can be transferred directly between the Counter device "
"driver and Counter userspace interface::"
msgstr ""

#: ../../../driver-api/generic-counter.rst:453
msgid "There are four primary components involved:"
msgstr ""

#: ../../../driver-api/generic-counter.rst:456
msgid "Counter device driver"
msgstr ""

#: ../../../driver-api/generic-counter.rst:457
msgid ""
"Communicates with the hardware device to read/write data; e.g. counter "
"drivers for quadrature encoders, timers, etc."
msgstr ""

#: ../../../driver-api/generic-counter.rst:461
msgid "Counter core"
msgstr ""

#: ../../../driver-api/generic-counter.rst:462
msgid ""
"Registers the counter device driver to the system so that the respective "
"callbacks are called during userspace interaction."
msgstr ""

#: ../../../driver-api/generic-counter.rst:466
msgid "Counter sysfs"
msgstr ""

#: ../../../driver-api/generic-counter.rst:467
msgid ""
"Translates counter data to the standard Counter sysfs interface format and "
"vice versa."
msgstr ""

#: ../../../driver-api/generic-counter.rst:470
msgid ""
"Please refer to the Documentation/ABI/testing/sysfs-bus-counter file for a "
"detailed breakdown of the available Generic Counter interface sysfs "
"attributes."
msgstr ""

#: ../../../driver-api/generic-counter.rst:475
msgid "Counter chrdev"
msgstr ""

#: ../../../driver-api/generic-counter.rst:476
msgid ""
"Translates Counter events to the standard Counter character device; data is "
"transferred via standard character device read calls, while Counter events "
"are configured via ioctl calls."
msgstr ""

#: ../../../driver-api/generic-counter.rst:481
msgid "Sysfs Interface"
msgstr ""

#: ../../../driver-api/generic-counter.rst:483
msgid ""
"Several sysfs attributes are generated by the Generic Counter interface, and "
"reside under the ``/sys/bus/counter/devices/counterX`` directory, where "
"``X`` is to the respective counter device id. Please see Documentation/ABI/"
"testing/sysfs-bus-counter for detailed information on each Generic Counter "
"interface sysfs attribute."
msgstr ""

#: ../../../driver-api/generic-counter.rst:489
msgid ""
"Through these sysfs attributes, programs and scripts may interact with the "
"Generic Counter paradigm Counts, Signals, and Synapses of respective counter "
"devices."
msgstr ""

#: ../../../driver-api/generic-counter.rst:494
msgid "Counter Character Device"
msgstr ""

#: ../../../driver-api/generic-counter.rst:496
msgid ""
"Counter character device nodes are created under the ``/dev`` directory as "
"``counterX``, where ``X`` is the respective counter device id. Defines for "
"the standard Counter data types are exposed via the userspace ``include/uapi/"
"linux/counter.h`` file."
msgstr ""

#: ../../../driver-api/generic-counter.rst:502
msgid "Counter events"
msgstr ""

#: ../../../driver-api/generic-counter.rst:503
msgid ""
"Counter device drivers can support Counter events by utilizing the "
"``counter_push_event`` function::"
msgstr ""

#: ../../../driver-api/generic-counter.rst:509
msgid ""
"The event id is specified by the ``event`` parameter; the event channel id "
"is specified by the ``channel`` parameter. When this function is called, the "
"Counter data associated with the respective event is gathered, and a "
"``struct counter_event`` is generated for each datum and pushed to userspace."
msgstr ""

#: ../../../driver-api/generic-counter.rst:515
msgid ""
"Counter events can be configured by users to report various Counter data of "
"interest. This can be conceptualized as a list of Counter component read "
"calls to perform. For example:"
msgstr ""

#: ../../../driver-api/generic-counter.rst:520
msgid "COUNTER_EVENT_OVERFLOW"
msgstr ""

#: ../../../driver-api/generic-counter.rst:520
msgid "COUNTER_EVENT_INDEX"
msgstr ""

#: ../../../driver-api/generic-counter.rst:522
msgid "Channel 0"
msgstr ""

#: ../../../driver-api/generic-counter.rst:524
msgid "Count 0"
msgstr ""

#: ../../../driver-api/generic-counter.rst:525
msgid "Count 1"
msgstr ""

#: ../../../driver-api/generic-counter.rst:526
msgid "Signal 3"
msgstr ""

#: ../../../driver-api/generic-counter.rst:527
msgid "Count 4 Extension 2"
msgstr ""

#: ../../../driver-api/generic-counter.rst:528
msgid "Signal 5 Extension 0"
msgstr ""

#: ../../../driver-api/generic-counter.rst:524
msgid "Signal 0"
msgstr ""

#: ../../../driver-api/generic-counter.rst:525
msgid "Signal 0 Extension 0"
msgstr ""

#: ../../../driver-api/generic-counter.rst:526
msgid "Extension 4"
msgstr ""

#: ../../../driver-api/generic-counter.rst:528
msgid "Channel 1"
msgstr ""

#: ../../../driver-api/generic-counter.rst:530
msgid "Signal 4"
msgstr ""

#: ../../../driver-api/generic-counter.rst:531
msgid "Signal 4 Extension 0"
msgstr ""

#: ../../../driver-api/generic-counter.rst:532
msgid "Count 7"
msgstr ""

#: ../../../driver-api/generic-counter.rst:535
msgid ""
"When ``counter_push_event(counter, COUNTER_EVENT_INDEX, 1)`` is called for "
"example, it will go down the list for the ``COUNTER_EVENT_INDEX`` event "
"channel 1 and execute the read callbacks for Signal 4, Signal 4 Extension 0, "
"and Count 7 -- the data returned for each is pushed to a kfifo as a ``struct "
"counter_event``, which userspace can retrieve via a standard read operation "
"on the respective character device node."
msgstr ""

#: ../../../driver-api/generic-counter.rst:543
msgid "Userspace"
msgstr ""

#: ../../../driver-api/generic-counter.rst:544
msgid ""
"Userspace applications can configure Counter events via ioctl operations on "
"the Counter character device node. There following ioctl codes are supported "
"and provided by the ``linux/counter.h`` userspace header file:"
msgstr ""

#: ../../../driver-api/generic-counter.rst:548
msgid ":c:macro:`COUNTER_ADD_WATCH_IOCTL`"
msgstr ""

#: ../../../driver-api/generic-counter.rst:550
msgid ":c:macro:`COUNTER_ENABLE_EVENTS_IOCTL`"
msgstr ""

#: ../../../driver-api/generic-counter.rst:552
msgid ":c:macro:`COUNTER_DISABLE_EVENTS_IOCTL`"
msgstr ""

#: ../../../driver-api/generic-counter.rst:554
msgid ""
"To configure events to gather Counter data, users first populate a ``struct "
"counter_watch`` with the relevant event id, event channel id, and the "
"information for the desired Counter component from which to read, and then "
"pass it via the ``COUNTER_ADD_WATCH_IOCTL`` ioctl command."
msgstr ""

#: ../../../driver-api/generic-counter.rst:560
msgid ""
"Note that an event can be watched without gathering Counter data by setting "
"the ``component.type`` member equal to ``COUNTER_COMPONENT_NONE``. With this "
"configuration the Counter character device will simply populate the event "
"timestamps for those respective ``struct counter_event`` elements and ignore "
"the component value."
msgstr ""

#: ../../../driver-api/generic-counter.rst:567
msgid ""
"The ``COUNTER_ADD_WATCH_IOCTL`` command will buffer these Counter watches. "
"When ready, the ``COUNTER_ENABLE_EVENTS_IOCTL`` ioctl command may be used to "
"activate these Counter watches."
msgstr ""

#: ../../../driver-api/generic-counter.rst:571
msgid ""
"Userspace applications can then execute a ``read`` operation (optionally "
"calling ``poll`` first) on the Counter character device node to retrieve "
"``struct counter_event`` elements with the desired data."
msgstr ""
