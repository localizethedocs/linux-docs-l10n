# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 08:27+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../driver-api/media/mc-core.rst:4
msgid "Media Controller devices"
msgstr ""

#: ../../../driver-api/media/mc-core.rst:7
msgid "Media Controller"
msgstr ""

#: ../../../driver-api/media/mc-core.rst:9
msgid ""
"The media controller userspace API is documented in :ref:`the Media "
"Controller uAPI book <media_controller>`. This document focus on the kernel-"
"side implementation of the media framework."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:14
msgid "Abstract media device model"
msgstr ""

#: ../../../driver-api/media/mc-core.rst:16
msgid ""
"Discovering a device internal topology, and configuring it at runtime, is "
"one of the goals of the media framework. To achieve this, hardware devices "
"are modelled as an oriented graph of building blocks called entities "
"connected through pads."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:21
msgid ""
"An entity is a basic media hardware building block. It can correspond to a "
"large variety of logical blocks such as physical hardware devices (CMOS "
"sensor for instance), logical hardware devices (a building block in a System-"
"on-Chip image processing pipeline), DMA channels or physical connectors."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:27
msgid ""
"A pad is a connection endpoint through which an entity can interact with "
"other entities. Data (not restricted to video) produced by an entity flows "
"from the entity's output to one or more entity inputs. Pads should not be "
"confused with physical pins at chip boundaries."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:32
msgid ""
"A link is a point-to-point oriented connection between two pads, either on "
"the same entity or on different entities. Data flows from a source pad to a "
"sink pad."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:37
#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:76
msgid "Media device"
msgstr ""

#: ../../../driver-api/media/mc-core.rst:39
msgid ""
"A media device is represented by a struct media_device instance, defined in "
"``include/media/media-device.h``. Allocation of the structure is handled by "
"the media device driver, usually by embedding the :c:type:`media_device` "
"instance in a larger driver-specific structure."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:45
msgid ""
"Drivers initialise media device instances by calling :c:func:"
"`media_device_init()`. After initialising a media device instance, it is "
"registered by calling :c:func:`__media_device_register()` via the macro "
"``media_device_register()`` and unregistered by calling :c:func:"
"`media_device_unregister()`. An initialised media device must be eventually "
"cleaned up by calling :c:func:`media_device_cleanup()`."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:52
msgid ""
"Note that it is not allowed to unregister a media device instance that was "
"not previously registered, or clean up a media device instance that was not "
"previously initialised."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:57
msgid "Entities"
msgstr ""

#: ../../../driver-api/media/mc-core.rst:59
msgid ""
"Entities are represented by a struct media_entity instance, defined in "
"``include/media/media-entity.h``. The structure is usually embedded into a "
"higher-level structure, such as :c:type:`v4l2_subdev` or :c:type:"
"`video_device` instances, although drivers can allocate entities directly."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:65
msgid ""
"Drivers initialize entity pads by calling :c:func:`media_entity_pads_init()`."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:68
msgid ""
"Drivers register entities with a media device by calling :c:func:"
"`media_device_register_entity()` and unregistered by calling :c:func:"
"`media_device_unregister_entity()`."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:74
msgid "Interfaces"
msgstr ""

#: ../../../driver-api/media/mc-core.rst:76
msgid ""
"Interfaces are represented by a struct media_interface instance, defined in "
"``include/media/media-entity.h``. Currently, only one type of interface is "
"defined: a device node. Such interfaces are represented by a struct "
"media_intf_devnode."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:82
msgid ""
"Drivers initialize and create device node interfaces by calling :c:func:"
"`media_devnode_create()` and remove them by calling: :c:func:"
"`media_devnode_remove()`."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:88
msgid "Pads"
msgstr ""

#: ../../../driver-api/media/mc-core.rst:89
msgid ""
"Pads are represented by a struct media_pad instance, defined in ``include/"
"media/media-entity.h``. Each entity stores its pads in a pads array managed "
"by the entity driver. Drivers usually embed the array in a driver-specific "
"structure."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:94
msgid ""
"Pads are identified by their entity and their 0-based index in the pads "
"array."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:97
msgid ""
"Both information are stored in the struct media_pad, making the struct "
"media_pad pointer the canonical way to store and pass link references."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:101
msgid "Pads have flags that describe the pad capabilities and state."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:103
msgid ""
"``MEDIA_PAD_FL_SINK`` indicates that the pad supports sinking data. "
"``MEDIA_PAD_FL_SOURCE`` indicates that the pad supports sourcing data."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:108
msgid ""
"One and only one of ``MEDIA_PAD_FL_SINK`` or ``MEDIA_PAD_FL_SOURCE`` must be "
"set for each pad."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:112
msgid "Links"
msgstr ""

#: ../../../driver-api/media/mc-core.rst:114
msgid ""
"Links are represented by a struct media_link instance, defined in ``include/"
"media/media-entity.h``. There are two types of links:"
msgstr ""

#: ../../../driver-api/media/mc-core.rst:117
msgid "**1. pad to pad links**:"
msgstr ""

#: ../../../driver-api/media/mc-core.rst:119
msgid ""
"Associate two entities via their PADs. Each entity has a list that points to "
"all links originating at or targeting any of its pads. A given link is thus "
"stored twice, once in the source entity and once in the target entity."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:124
msgid ""
"Drivers create pad to pad links by calling: :c:func:"
"`media_create_pad_link()` and remove with :c:func:"
"`media_entity_remove_links()`."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:128
msgid "**2. interface to entity links**:"
msgstr ""

#: ../../../driver-api/media/mc-core.rst:130
msgid "Associate one interface to a Link."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:132
msgid ""
"Drivers create interface to entity links by calling: :c:func:"
"`media_create_intf_link()` and remove with :c:func:"
"`media_remove_intf_links()`."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:138
msgid "Links can only be created after having both ends already created."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:140
msgid ""
"Links have flags that describe the link capabilities and state. The valid "
"values are described at :c:func:`media_create_pad_link()` and :c:func:"
"`media_create_intf_link()`."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:145
msgid "Graph traversal"
msgstr ""

#: ../../../driver-api/media/mc-core.rst:147
msgid ""
"The media framework provides APIs to traverse media graphs, locating "
"connected entities and links."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:150
msgid ""
"To iterate over all entities belonging to a media device, drivers can use "
"the media_device_for_each_entity macro, defined in ``include/media/media-"
"device.h``."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:163
msgid ""
"Helper functions can be used to find a link between two given pads, or a pad "
"connected to another pad through an enabled link (:c:func:"
"`media_entity_find_link()`, :c:func:`media_pad_remote_pad_first()`, :c:func:"
"`media_entity_remote_source_pad_unique()` and :c:func:"
"`media_pad_remote_pad_unique()`)."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:170
msgid "Use count and power handling"
msgstr ""

#: ../../../driver-api/media/mc-core.rst:172
msgid ""
"Due to the wide differences between drivers regarding power management "
"needs, the media controller does not implement power management. However, "
"the struct media_entity includes a ``use_count`` field that media drivers "
"can use to track the number of users of every entity for power management "
"needs."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:179
msgid ""
"The :c:type:`media_entity<media_entity>`.\\ ``use_count`` field is owned by "
"media drivers and must not be touched by entity drivers. Access to the field "
"must be protected by the :c:type:`media_device`.\\ ``graph_mutex`` lock."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:185
msgid "Links setup"
msgstr ""

#: ../../../driver-api/media/mc-core.rst:187
msgid ""
"Link properties can be modified at runtime by calling :c:func:"
"`media_entity_setup_link()`."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:191
msgid "Pipelines and media streams"
msgstr ""

#: ../../../driver-api/media/mc-core.rst:193
msgid ""
"A media stream is a stream of pixels or metadata originating from one or "
"more source devices (such as a sensors) and flowing through media entity "
"pads towards the final sinks. The stream can be modified on the route by the "
"devices (e.g. scaling or pixel format conversions), or it can be split into "
"multiple branches, or multiple branches can be merged."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:199
msgid ""
"A media pipeline is a set of media streams which are interdependent. This "
"interdependency can be caused by the hardware (e.g. configuration of a "
"second stream cannot be changed if the first stream has been enabled) or by "
"the driver due to the software design. Most commonly a media pipeline "
"consists of a single stream which does not branch."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:205
msgid ""
"When starting streaming, drivers must notify all entities in the pipeline to "
"prevent link states from being modified during streaming by calling :c:func:"
"`media_pipeline_start()`."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:209
msgid ""
"The function will mark all the pads which are part of the pipeline as "
"streaming."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:211
msgid ""
"The struct media_pipeline instance pointed to by the pipe argument will be "
"stored in every pad in the pipeline. Drivers should embed the struct "
"media_pipeline in higher-level pipeline structures and can then access the "
"pipeline through the struct media_pad pipe field."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:216
msgid ""
"Calls to :c:func:`media_pipeline_start()` can be nested. The pipeline "
"pointer must be identical for all nested calls to the function."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:219
msgid ""
":c:func:`media_pipeline_start()` may return an error. In that case, it will "
"clean up any of the changes it did by itself."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:222
msgid ""
"When stopping the stream, drivers must notify the entities with :c:func:"
"`media_pipeline_stop()`."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:225
msgid ""
"If multiple calls to :c:func:`media_pipeline_start()` have been made the "
"same number of :c:func:`media_pipeline_stop()` calls are required to stop "
"streaming. The :c:type:`media_entity`.\\ ``pipe`` field is reset to ``NULL`` "
"on the last nested stop call."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:231
msgid ""
"Link configuration will fail with ``-EBUSY`` by default if either end of the "
"link is a streaming entity. Links that can be modified while streaming must "
"be marked with the ``MEDIA_LNK_FL_DYNAMIC`` flag."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:235
msgid ""
"If other operations need to be disallowed on streaming entities (such as "
"changing entities configuration parameters) drivers can explicitly check the "
"media_entity stream_count field to find out if an entity is streaming. This "
"operation must be done with the media_device graph_mutex held."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:241
msgid "Link validation"
msgstr ""

#: ../../../driver-api/media/mc-core.rst:243
msgid ""
"Link validation is performed by :c:func:`media_pipeline_start()` for any "
"entity which has sink pads in the pipeline. The :c:type:`media_entity`.\\ "
"``link_validate()`` callback is used for that purpose. In "
"``link_validate()`` callback, entity driver should check that the properties "
"of the source pad of the connected entity and its own sink pad match. It is "
"up to the type of the entity (and in the end, the properties of the "
"hardware) what matching actually means."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:251
msgid ""
"Subsystems should facilitate link validation by providing subsystem specific "
"helper functions to provide easy access for commonly needed information, and "
"in the end provide a way to use driver-specific callbacks."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:256
msgid "Pipeline traversal"
msgstr ""

#: ../../../driver-api/media/mc-core.rst:258
msgid ""
"Once a pipeline has been constructed with :c:func:`media_pipeline_start()`, "
"drivers can iterate over entities or pads in the pipeline with the :c:macro:"
"´media_pipeline_for_each_entity` and :c:macro:´media_pipeline_for_each_pad` "
"macros. Iterating over pads is straightforward:"
msgstr ""

#: ../../../driver-api/media/mc-core.rst:274
msgid ""
"To iterate over entities, the iterator needs to be initialized and cleaned "
"up as an additional steps:"
msgstr ""

#: ../../../driver-api/media/mc-core.rst:295
msgid "Media Controller Device Allocator API"
msgstr ""

#: ../../../driver-api/media/mc-core.rst:297
msgid ""
"When the media device belongs to more than one driver, the shared media "
"device is allocated with the shared struct device as the key for look ups."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:300
msgid ""
"The shared media device should stay in registered state until the last "
"driver unregisters it. In addition, the media device should be released when "
"all the references are released. Each driver gets a reference to the media "
"device during probe, when it allocates the media device. If media device is "
"already allocated, the allocate API bumps up the refcount and returns the "
"existing media device. The driver puts the reference back in its disconnect "
"routine when it calls :c:func:`media_device_delete()`."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:308
msgid ""
"The media device is unregistered and cleaned up from the kref put handler to "
"ensure that the media device stays in registered state until the last driver "
"unregisters the media device."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:312
msgid "**Driver Usage**"
msgstr ""

#: ../../../driver-api/media/mc-core.rst:314
msgid ""
"Drivers should use the appropriate media-core routines to manage the shared "
"media device life-time handling the two states: 1. allocate -> register -> "
"delete 2. get reference to already registered device -> delete"
msgstr ""

#: ../../../driver-api/media/mc-core.rst:319
msgid ""
"call :c:func:`media_device_delete()` routine to make sure the shared media "
"device delete is handled correctly."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:322
msgid ""
"**driver probe:** Call :c:func:`media_device_usb_allocate()` to allocate or "
"get a reference Call :c:func:`media_device_register()`, if media devnode "
"isn't registered"
msgstr ""

#: ../../../driver-api/media/mc-core.rst:326
msgid ""
"**driver disconnect:** Call :c:func:`media_device_delete()` to free the "
"media_device. Freeing is handled by the kref put handler."
msgstr ""

#: ../../../driver-api/media/mc-core.rst:331
msgid "API Definitions"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:26
msgid "Media Entity Notify"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:30
#: include/media/media-device.h:48 include/media/media-device.h:80
#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:38
#: include/media/media-devnode.h:63 ../../../driver-api/media/mc-core:337:
#: include/media/media-entity.h:52 include/media/media-entity.h:72
#: include/media/media-entity.h:84 include/media/media-entity.h:105
#: include/media/media-entity.h:120 include/media/media-entity.h:138
#: include/media/media-entity.h:147 include/media/media-entity.h:158
#: include/media/media-entity.h:227 include/media/media-entity.h:256
#: include/media/media-entity.h:321 include/media/media-entity.h:393
#: include/media/media-entity.h:416 ../../../driver-api/media/mc-core:339:
#: include/media/media-request.h:54 include/media/media-request.h:244
#: include/media/media-request.h:260
msgid "**Definition**::"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:38
#: include/media/media-device.h:58 include/media/media-device.h:109
#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:51
#: include/media/media-devnode.h:76 ../../../driver-api/media/mc-core:337:
#: include/media/media-entity.h:60 include/media/media-entity.h:79
#: include/media/media-entity.h:95 include/media/media-entity.h:114
#: include/media/media-entity.h:128 include/media/media-entity.h:144
#: include/media/media-entity.h:154 include/media/media-entity.h:178
#: include/media/media-entity.h:239 include/media/media-entity.h:265
#: include/media/media-entity.h:345 include/media/media-entity.h:402
#: include/media/media-entity.h:424 ../../../driver-api/media/mc-core:339:
#: include/media/media-request.h:69 include/media/media-request.h:254
#: include/media/media-request.h:271
msgid "**Members**"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:28
#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:55
#: include/media/media-entity.h:118 include/media/media-entity.h:157
#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:262
msgid "``list``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:29
msgid "List head"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:29
msgid "``notify_data``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:30
msgid "Input data to invoke the callback"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:30
msgid "``notify``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:31
msgid "Callback function pointer"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:34
#: include/media/media-device.h:113 include/media/media-device.h:199
#: include/media/media-device.h:224 include/media/media-device.h:235
#: include/media/media-device.h:279 include/media/media-device.h:289
#: include/media/media-device.h:301 include/media/media-device.h:338
#: include/media/media-device.h:361 include/media/media-device.h:421
#: include/media/media-device.h:488 include/media/media-device.h:502
#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:72
#: include/media/media-devnode.h:104 include/media/media-devnode.h:122
#: include/media/media-devnode.h:135 ../../../driver-api/media/mc-core:337:
#: include/media/media-entity.h:3 include/media/media-entity.h:59
#: include/media/media-entity.h:124 include/media/media-entity.h:275
#: include/media/media-entity.h:305 include/media/media-entity.h:345
#: include/media/media-entity.h:381 include/media/media-entity.h:402
#: include/media/media-entity.h:562 include/media/media-entity.h:580
#: include/media/media-entity.h:675 include/media/media-entity.h:690
#: include/media/media-entity.h:702 include/media/media-entity.h:725
#: include/media/media-entity.h:745 include/media/media-entity.h:767
#: include/media/media-entity.h:808 include/media/media-entity.h:848
#: include/media/media-entity.h:860 include/media/media-entity.h:877
#: include/media/media-entity.h:924 include/media/media-entity.h:936
#: include/media/media-entity.h:955 include/media/media-entity.h:977
#: include/media/media-entity.h:1031 include/media/media-entity.h:1051
#: include/media/media-entity.h:1069 include/media/media-entity.h:1089
#: include/media/media-entity.h:1104 include/media/media-entity.h:1115
#: include/media/media-entity.h:1132 include/media/media-entity.h:1149
#: include/media/media-entity.h:1166 include/media/media-entity.h:1175
#: include/media/media-entity.h:1190 include/media/media-entity.h:1205
#: include/media/media-entity.h:1219 include/media/media-entity.h:1236
#: include/media/media-entity.h:1252 include/media/media-entity.h:1268
#: include/media/media-entity.h:1293 include/media/media-entity.h:1306
#: include/media/media-entity.h:1320 include/media/media-entity.h:1349
#: include/media/media-entity.h:1358 include/media/media-entity.h:1367
#: include/media/media-entity.h:1376 include/media/media-entity.h:1408
#: include/media/media-entity.h:1427 include/media/media-entity.h:1441
#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:82
#: include/media/media-request.h:108 include/media/media-request.h:126
#: include/media/media-request.h:156 include/media/media-request.h:175
#: include/media/media-request.h:187 include/media/media-request.h:198
#: include/media/media-request.h:216 include/media/media-request.h:268
#: include/media/media-request.h:285 include/media/media-request.h:297
#: include/media/media-request.h:309 include/media/media-request.h:327
#: include/media/media-request.h:342 include/media/media-request.h:366
#: include/media/media-request.h:375 ../../../driver-api/media/mc-core:341:
#: include/media/media-dev-allocator.h:32
#: include/media/media-dev-allocator.h:50
msgid "**Description**"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:31
msgid ""
"Drivers may register a callback to take action when new entities get "
"registered with the media device. This handler is intended for creating "
"links between existing entities and should not create entities and register "
"them."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:44
msgid "Media device operations"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:45
msgid "``link_notify``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:46
msgid ""
"Link state change notification callback. This callback is called with the "
"graph_mutex held."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:47
msgid "``req_alloc``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:48
msgid ""
"Allocate a request. Set this if you need to allocate a struct larger then "
"struct media_request. **req_alloc** and **req_free** must either both be set "
"or both be NULL."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:50
msgid "``req_free``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:51
msgid ""
"Free a request. Set this if **req_alloc** was set as well, leave to NULL "
"otherwise."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:52
msgid "``req_validate``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:53
msgid ""
"Validate a request, but do not queue yet. The req_queue_mutex lock is held "
"when this op is called."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:54
msgid "``req_queue``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:55
msgid ""
"Queue a validated request, cannot fail. If something goes wrong when "
"queueing this request then it should be marked as such internally in the "
"driver and any related buffers must eventually return to vb2 with state "
"VB2_BUF_STATE_ERROR. The req_queue_mutex lock is held when this op is "
"called. It is important that vb2 buffer objects are queued last after all "
"other object types are queued: queueing a buffer kickstarts the request "
"processing, so all other objects related to the request (and thus the "
"buffer) must be available to the driver. And once a buffer is queued, then "
"the driver can complete or delete objects from the request before req_queue "
"exits."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:77
#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:62
msgid "``dev``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:78
msgid "Parent device"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:78
msgid "``devnode``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:79
#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:59
msgid "Media device node"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:83
msgid "``model``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:84
msgid "Device model name"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:79
msgid "``driver_name``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:80
msgid ""
"Optional device driver name. If not set, calls to ``MEDIA_IOC_DEVICE_INFO`` "
"will return ``dev->driver->name``. This is needed for USB drivers for "
"example, as otherwise they'll all appear as if the driver name was \"usb\"."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:84
msgid "``serial``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:85
msgid "Device serial number (optional)"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:85
msgid "``bus_info``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:86
msgid "Unique and stable device location identifier"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:86
msgid "``hw_revision``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:87
msgid "Hardware device revision"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:87
msgid "``topology_version``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:88
msgid ""
"Monotonic counter for storing the version of the graph topology. Should be "
"incremented each time the topology changes."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:89
#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:51
msgid "``id``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:90
msgid "Unique ID used on the last registered graph object"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:90
msgid "``entity_internal_idx``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:91
msgid "Unique internal entity ID used by the graph traversal algorithms"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:92
msgid "``entity_internal_idx_max``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:93
msgid "Allocated internal entity indices"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:93
msgid "``entities``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:94
msgid "List of registered entities"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:94
msgid "``interfaces``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:95
msgid "List of registered interfaces"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:95
#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:105
#: include/media/media-entity.h:333
msgid "``pads``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:96
msgid "List of registered pads"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:96
#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:334
#: include/media/media-entity.h:392
msgid "``links``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:97
msgid "List of registered links"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:97
msgid "``entity_notify``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:98
msgid "List of registered entity_notify callbacks"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:98
msgid "``graph_mutex``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:99
msgid "Protects access to struct media_device data"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:99
msgid "``pm_count_walk``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:100
msgid "Graph walk for power state walk. Access serialised using graph_mutex."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:102
msgid "``source_priv``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:103
msgid "Driver Private data for enable/disable source handlers"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:103
msgid "``enable_source``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:104
msgid "Enable Source Handler function pointer"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:104
msgid "``disable_source``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:105
msgid "Disable Source Handler function pointer"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:106
#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:335
#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:259
msgid "``ops``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:107
msgid "Operation handler callbacks"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:107
msgid "``req_queue_mutex``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:108
msgid ""
"Serialise the MEDIA_REQUEST_IOC_QUEUE ioctl w.r.t. other operations that "
"stop or start streaming."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:109
msgid "``request_id``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:110
msgid "Used to generate unique request IDs"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:110
msgid ""
"This structure represents an abstract high-level media device. It allows "
"easy access to entities and provides basic media device-level support. The "
"structure can be allocated directly or embedded in a larger structure."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:114
msgid ""
"The parent **dev** is a physical device. It must be set before registering "
"the media device."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:117
msgid ""
"**model** is a descriptive model name exported through sysfs. It doesn't "
"have to be unique."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:120
msgid ""
"**enable_source** is a handler to find source entity for the sink entity  "
"and activate the link between them if source entity is free. Drivers should "
"call this handler before accessing the source."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:125
msgid ""
"**disable_source** is a handler to find source entity for the sink entity  "
"and deactivate the link between them. Drivers should call this handler to "
"release the source."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:129
msgid ""
"Use-case: find tuner entity connected to the decoder entity and check if it "
"is available, and activate the link between them from **enable_source** and "
"deactivate from **disable_source**."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:136
msgid ""
"Bridge driver is expected to implement and set the handler when :c:type:"
"`media_device` is registered or when bridge driver finds the media_device "
"during probe. Bridge driver sets source_priv with information necessary to "
"run **enable_source** and **disable_source** handlers. Callers should hold "
"graph_mutex to access and call **enable_source** and **disable_source** "
"handlers."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:195
msgid "Initializes a media device element"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:199
#: include/media/media-device.h:224 include/media/media-device.h:234
#: include/media/media-device.h:279 include/media/media-device.h:289
#: include/media/media-device.h:299 include/media/media-device.h:338
#: include/media/media-device.h:359 include/media/media-device.h:375
#: include/media/media-device.h:402 include/media/media-device.h:414
#: include/media/media-device.h:484 include/media/media-device.h:500
#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:102
#: include/media/media-devnode.h:123 include/media/media-devnode.h:136
#: include/media/media-devnode.h:147 include/media/media-devnode.h:157
#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:381
#: include/media/media-entity.h:431 include/media/media-entity.h:441
#: include/media/media-entity.h:451 include/media/media-entity.h:461
#: include/media/media-entity.h:477 include/media/media-entity.h:490
#: include/media/media-entity.h:503 include/media/media-entity.h:514
#: include/media/media-entity.h:521 include/media/media-entity.h:531
#: include/media/media-entity.h:546 include/media/media-entity.h:561
#: include/media/media-entity.h:578 include/media/media-entity.h:597
#: include/media/media-entity.h:609 include/media/media-entity.h:628
#: include/media/media-entity.h:637 include/media/media-entity.h:646
#: include/media/media-entity.h:655 include/media/media-entity.h:664
#: include/media/media-entity.h:673 include/media/media-entity.h:690
#: include/media/media-entity.h:700 include/media/media-entity.h:725
#: include/media/media-entity.h:743 include/media/media-entity.h:761
#: include/media/media-entity.h:793 include/media/media-entity.h:848
#: include/media/media-entity.h:860 include/media/media-entity.h:876
#: include/media/media-entity.h:914 include/media/media-entity.h:925
#: include/media/media-entity.h:937 include/media/media-entity.h:955
#: include/media/media-entity.h:977 include/media/media-entity.h:1001
#: include/media/media-entity.h:1013 include/media/media-entity.h:1032
#: include/media/media-entity.h:1052 include/media/media-entity.h:1065
#: include/media/media-entity.h:1088 include/media/media-entity.h:1104
#: include/media/media-entity.h:1113 include/media/media-entity.h:1133
#: include/media/media-entity.h:1149 include/media/media-entity.h:1165
#: include/media/media-entity.h:1176 include/media/media-entity.h:1190
#: include/media/media-entity.h:1204 include/media/media-entity.h:1219
#: include/media/media-entity.h:1237 include/media/media-entity.h:1251
#: include/media/media-entity.h:1269 include/media/media-entity.h:1282
#: include/media/media-entity.h:1306 include/media/media-entity.h:1316
#: include/media/media-entity.h:1349 include/media/media-entity.h:1358
#: include/media/media-entity.h:1367 include/media/media-entity.h:1376
#: include/media/media-entity.h:1390 include/media/media-entity.h:1406
#: include/media/media-entity.h:1425 include/media/media-entity.h:1440
#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:82
#: include/media/media-request.h:107 include/media/media-request.h:126
#: include/media/media-request.h:155 include/media/media-request.h:175
#: include/media/media-request.h:187 include/media/media-request.h:197
#: include/media/media-request.h:215 include/media/media-request.h:285
#: include/media/media-request.h:297 include/media/media-request.h:307
#: include/media/media-request.h:327 include/media/media-request.h:338
#: include/media/media-request.h:366 include/media/media-request.h:375
#: ../../../driver-api/media/mc-core:341:
#: include/media/media-dev-allocator.h:28
#: include/media/media-dev-allocator.h:46
msgid "**Parameters**"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:201
#: include/media/media-device.h:226 include/media/media-device.h:236
#: include/media/media-device.h:291 include/media/media-device.h:301
#: include/media/media-device.h:361 include/media/media-device.h:377
#: include/media/media-device.h:404 include/media/media-device.h:416
#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:104
#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:503
#: include/media/media-entity.h:675 include/media/media-entity.h:1088
#: include/media/media-entity.h:1284 ../../../driver-api/media/mc-core:339:
#: include/media/media-request.h:199 include/media/media-request.h:217
#: ../../../driver-api/media/mc-core:341:
#: include/media/media-dev-allocator.h:48
msgid "``struct media_device *mdev``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:197
#: include/media/media-device.h:222 include/media/media-device.h:232
#: include/media/media-device.h:277 include/media/media-device.h:287
#: include/media/media-device.h:298 include/media/media-device.h:401
#: include/media/media-device.h:413 include/media/media-device.h:483
#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:61
#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1280
msgid "pointer to struct :c:type:`media_device`"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:198
msgid ""
"This function initializes the media device prior to its registration. The "
"media device initialization and registration is split in two functions to "
"avoid race conditions and make the media device available to user-space "
"before the media graph has been completed."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:203
msgid ""
"So drivers need to first initialize the media device, register any entity "
"within the media device, create pad to pad links and then finally register "
"the media device by calling media_device_register() as a final step."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:207
msgid ""
"The caller is responsible for initializing the media device before "
"registration. The following fields must be set:"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:210
msgid "dev must point to the parent device"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:211
msgid "model must be filled with the device model name"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:213
msgid ""
"The bus_info field is set by media_device_init() for PCI and platform "
"devices if the field begins with '\\0'."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:220
msgid "Cleanups a media device element"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:223
msgid ""
"This function that will destroy the graph_mutex that is initialized in "
"media_device_init()."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:230
#: include/media/media-device.h:275
msgid "Registers a media device element"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:234
#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:103
#: ../../../driver-api/media/mc-core:341:
#: include/media/media-dev-allocator.h:29
#: include/media/media-dev-allocator.h:47
msgid "``struct module *owner``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:233
#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:37
#: include/media/media-devnode.h:102
msgid "should be filled with ``THIS_MODULE``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:234
msgid "Users, should, instead, call the media_device_register() macro."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:236
msgid ""
"The caller is responsible for initializing the :c:type:`media_device` "
"structure before registration. The following fields of :c:type:"
"`media_device` must be set:"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:239
msgid ""
":c:type:`media_device.model <media_device>` must be filled with the device "
"model name as a NUL-terminated UTF-8 string. The device/model revision must "
"not be stored in this field."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:243
msgid "The following fields are optional:"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:245
msgid ""
":c:type:`media_device.serial <media_device>` is a unique serial number "
"stored as a NUL-terminated ASCII string. The field is big enough to store a "
"GUID in text form. If the hardware doesn't provide a unique serial number "
"this field must be left empty."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:250
msgid ""
":c:type:`media_device.bus_info <media_device>` represents the location of "
"the device in the system as a NUL-terminated ASCII string. For PCI/PCIe "
"devices :c:type:`media_device.bus_info <media_device>` must be set to \"PCI:"
"\" (or \"PCIe:\") followed by the value of pci_name(). For USB devices,the "
"usb_make_path() function must be used. This field is used by applications to "
"distinguish between otherwise identical devices that don't provide a serial "
"number."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:257
msgid ""
":c:type:`media_device.hw_revision <media_device>` is the hardware device "
"revision in a driver-specific format. When possible the revision should be "
"formatted with the KERNEL_VERSION() macro."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:263
msgid ""
"Upon successful registration a character device named media[0-9]+ is "
"created. The device major and minor numbers are dynamic. The model name is "
"exported as a sysfs attribute."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:265
msgid ""
"Unregistering a media device that hasn't been registered is **NOT** safe."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:267
#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:476
#: include/media/media-entity.h:489 include/media/media-entity.h:504
#: include/media/media-entity.h:597 include/media/media-entity.h:610
#: include/media/media-entity.h:914 include/media/media-entity.h:926
#: include/media/media-entity.h:945 include/media/media-entity.h:965
#: include/media/media-entity.h:987 include/media/media-entity.h:1000
#: include/media/media-entity.h:1012 include/media/media-entity.h:1041
#: include/media/media-entity.h:1054 include/media/media-entity.h:1076
#: include/media/media-entity.h:1138 include/media/media-entity.h:1226
#: include/media/media-entity.h:1290
msgid "**Return**"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:268
msgid "returns zero on success or a negative error code."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:277
msgid "``media_device_register (mdev)``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:281
#: include/media/media-device.h:486 ../../../driver-api/media/mc-core:337:
#: include/media/media-entity.h:50 include/media/media-entity.h:104
#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:51
msgid "``mdev``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:278
msgid ""
"This macro calls __media_device_register() passing ``THIS_MODULE`` as the "
"__media_device_register() second argument (**owner**)."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:285
msgid "Unregisters a media device element"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:288
msgid ""
"It is safe to call this function on an unregistered (but initialised) media "
"device."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:295
msgid "registers a media entity inside a previously registered media device."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:300
#: include/media/media-device.h:340 ../../../driver-api/media/mc-core:337:
#: include/media/media-entity.h:433 include/media/media-entity.h:479
#: include/media/media-entity.h:492 include/media/media-entity.h:531
#: include/media/media-entity.h:546 include/media/media-entity.h:561
#: include/media/media-entity.h:579 include/media/media-entity.h:702
#: include/media/media-entity.h:727 include/media/media-entity.h:745
#: include/media/media-entity.h:850 include/media/media-entity.h:1034
#: include/media/media-entity.h:1067 include/media/media-entity.h:1114
#: include/media/media-entity.h:1318 include/media/media-entity.h:1427
msgid "``struct media_entity *entity``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:299
msgid "pointer to struct :c:type:`media_entity` to be registered"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:300
msgid ""
"Entities are identified by a unique positive integer ID. The media "
"controller framework will such ID automatically. IDs are not guaranteed to "
"be contiguous, and the ID number can change on newer Kernel versions. So, "
"neither the driver nor userspace should hardcode ID numbers to refer to the "
"entities, but, instead, use the framework to find the ID, when needed."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:307
msgid ""
"The media_entity name, type and flags fields should be initialized before "
"calling media_device_register_entity(). Entities embedded in higher-level "
"standard structures can have some of those fields set by the higher-level "
"framework."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:312
msgid ""
"If the device has pads, media_entity_pads_init() should be called before "
"this function. Otherwise, the :c:type:`media_entity.pad <media_entity>` and :"
"c:type:`media_entity.num_pads <media_entity>` should be zeroed before "
"calling this function."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:316
msgid "Entities have flags that describe the entity capabilities and state:"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:318
msgid "``MEDIA_ENT_FL_DEFAULT``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:319
msgid ""
"indicates the default entity for a given type. This can be used to report "
"the default audio and video devices or the default camera sensor."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:325
msgid ""
"Drivers should set the entity function before calling this function. Please "
"notice that the values ``MEDIA_ENT_F_V4L2_SUBDEV_UNKNOWN`` and "
"``MEDIA_ENT_F_UNKNOWN`` should not be used by the drivers."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:334
msgid "unregisters a media entity."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:336
msgid "pointer to struct :c:type:`media_entity` to be unregistered"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:337
msgid ""
"All links associated with the entity and all PADs are automatically "
"unregistered from the media_device when this function is called."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:340
msgid ""
"Unregistering an entity will not change the IDs of the other entities and "
"the previoully used ID will never be reused for a newly registered entities."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:343
msgid ""
"When a media device is unregistered, all its entities are unregistered "
"automatically. No manual entities unregistration is then required."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:348
msgid ""
"The media_entity instance itself must be freed explicitly by the driver if "
"required."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:355
msgid "Registers a media entity_notify callback"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:358
#: include/media/media-device.h:374
msgid "The media device"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:360
#: include/media/media-device.h:376
msgid "``struct media_entity_notify *nptr``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:359
#: include/media/media-device.h:375
msgid "The media_entity_notify"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:362
msgid ""
"When a new entity is registered, all the registered media_entity_notify "
"callbacks are invoked."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:371
msgid "Unregister a media entity notify callback"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:398
#: include/media/media-device.h:410 include/media/media-device.h:480
msgid ""
"create and initialize a struct :c:type:`media_device` from a PCI device."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:403
msgid "``struct pci_dev *pci_dev``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:402
msgid "pointer to struct pci_dev"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:404
msgid "``const char *name``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:403
msgid ""
"media device name. If ``NULL``, the routine will use the default name for "
"the pci device, given by pci_name() macro."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:415
#: ../../../driver-api/media/mc-core:341:
#: include/media/media-dev-allocator.h:30
msgid "``struct usb_device *udev``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:414
#: include/media/media-device.h:484
msgid "pointer to struct usb_device"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:416
msgid "``const char *board_name``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:415
#: include/media/media-device.h:485
msgid ""
"media device name. If ``NULL``, the routine will use the usb product name, "
"if available."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:418
msgid "``const char *driver_name``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:417
msgid ""
"name of the driver. if ``NULL``, the routine will use the name given by "
"``udev->dev->driver->name``, with is usually the wrong thing to do."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:422
msgid ""
"It is better to call media_device_usb_init() instead, as such macro fills "
"driver_name with ``KBUILD_MODNAME``."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:482
msgid "``media_device_usb_init (mdev, udev, name)``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:485
msgid "``udev``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:486
#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:320
msgid "``name``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:487
msgid ""
"This macro calls media_device_usb_init() passing the media_device_usb_init() "
"**driver_name** parameter filled with ``KBUILD_MODNAME``."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:496
msgid "Set bus_info field"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:502
msgid "``char *bus_info``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:498
msgid "Variable where to write the bus info (char array)"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:500
msgid "``size_t bus_info_size``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:499
msgid "Length of the bus_info"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:501
msgid "``struct device *dev``"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:500
msgid "Related struct device"
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:501
msgid ""
"Sets bus information based on :c:type:`dev`. This is currently done for PCI "
"and platform devices. dev is required to be non-NULL for this to happen."
msgstr ""

#: ../../../driver-api/media/mc-core:333: include/media/media-device.h:504
msgid "This function is not meant to be called from drivers."
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:34
msgid "Media device file operations"
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:36
msgid "``owner``"
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:37
msgid "``read``"
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:38
msgid "pointer to the function that implements read() syscall"
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:38
msgid "``write``"
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:39
msgid "pointer to the function that implements write() syscall"
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:39
msgid "``poll``"
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:40
msgid "pointer to the function that implements poll() syscall"
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:40
msgid "``ioctl``"
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:41
msgid "pointer to the function that implements ioctl() syscall"
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:41
msgid "``compat_ioctl``"
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:42
msgid ""
"pointer to the function that will handle 32 bits userspace calls to the "
"ioctl() syscall on a Kernel compiled with 64 bits."
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:43
msgid "``open``"
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:44
msgid "pointer to the function that implements open() syscall"
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:44
#: include/media/media-devnode.h:67 ../../../driver-api/media/mc-core:339:
#: include/media/media-request.h:245
msgid "``release``"
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:45
msgid ""
"pointer to the function that will release the resources allocated by the "
"**open** function."
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:60
msgid "``media_dev``"
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:61
msgid "``fops``"
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:62
msgid "pointer to struct :c:type:`media_file_operations` with media device ops"
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:63
msgid ""
"pointer to struct :c:type:`device` containing the media controller device"
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:63
msgid "``cdev``"
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:64
msgid "struct cdev pointer character device"
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:64
msgid "``parent``"
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:65
msgid "parent device"
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:65
#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:416
msgid "``minor``"
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:66
msgid "device node minor number"
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:66
#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:173
#: include/media/media-entity.h:230 include/media/media-entity.h:325
#: include/media/media-entity.h:396
msgid "``flags``"
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:67
msgid "flags, combination of the ``MEDIA_FLAG_*`` constants"
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:68
msgid ""
"release callback called at the end of ``media_devnode_release()`` routine at "
"media-device.c."
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:69
msgid "This structure represents a media-related device node."
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:71
msgid ""
"The **parent** is a physical device. It must be set by core or device "
"drivers before registering the node."
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:98
msgid "register a media device node"
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:100
msgid "struct media_device we want to register a device node"
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:102
#: include/media/media-devnode.h:125 include/media/media-devnode.h:138
#: include/media/media-devnode.h:159
msgid "``struct media_devnode *devnode``"
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:101
msgid "media device node structure we want to register"
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:103
msgid ""
"The registration code assigns minor numbers and registers the new device "
"node with the kernel. An error is returned if no free minor number can be "
"found, or if the registration of the device node fails."
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:107
msgid "Zero is returned on success."
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:109
msgid ""
"Note that if the media_devnode_register call fails, the release() callback "
"of the media_devnode structure is *not* called, so the caller is responsible "
"for freeing any data."
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:119
msgid "clear the media device node register bit"
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:120
msgid "the device node to prepare for unregister"
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:121
msgid ""
"This clears the passed device register bit. Future open calls will be met "
"with errors. Should be called before media_devnode_unregister() to avoid "
"races with unregister and device file open calls."
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:125
msgid ""
"This function can safely be called if the device node has never been "
"registered or has already been unregistered."
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:132
msgid "unregister a media device node"
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:133
msgid "the device node to unregister"
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:134
msgid ""
"This unregisters the passed device. Future open calls will be met with "
"errors."
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:137
msgid "Should be called after media_devnode_unregister_prepare()"
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:143
msgid "returns a pointer to the :c:type:`media_devnode`"
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:149
msgid "``struct file *filp``"
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:145
msgid "pointer to struct :c:type:`file`"
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:153
msgid "returns true if :c:type:`media_devnode` is registered; false otherwise."
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:156
msgid "pointer to struct :c:type:`media_devnode`."
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:158
msgid "**Note**"
msgstr ""

#: ../../../driver-api/media/mc-core:335: include/media/media-devnode.h:158
msgid "If mdev is NULL, it also returns false."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:26
msgid "type of a graph object"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:30
#: include/media/media-entity.h:199 include/media/media-entity.h:294
#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:27
msgid "**Constants**"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:32
msgid "``MEDIA_GRAPH_ENTITY``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:33
msgid "Identify a media entity"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:35
msgid "``MEDIA_GRAPH_PAD``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:36
msgid "Identify a media pad"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:38
msgid "``MEDIA_GRAPH_LINK``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:39
msgid "Identify a media link"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:41
msgid "``MEDIA_GRAPH_INTF_DEVNODE``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:42
msgid "Identify a media Kernel API interface via a device node"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:48
msgid "Define a graph object."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:51
msgid "Pointer to the struct :c:type:`media_device` that owns the object"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:52
msgid ""
"Non-zero object ID identifier. The ID should be unique inside a "
"media_device, as it is composed by ``MEDIA_BITS_PER_TYPE`` to store the type "
"plus ``MEDIA_BITS_PER_ID`` to store the ID"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:56
msgid "List entry stored in one of the per-type mdev object lists"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:56
msgid "All objects on the media graph should have this struct embedded"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:68
msgid "An enumeration of media entities."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:70
msgid "``bmap``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:71
msgid ""
"Bit map in which each bit represents one entity at struct media_entity-"
">internal_idx."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:72
msgid "``idx_max``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:73
msgid "Number of bits in bmap"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:80
msgid "Media graph traversal state"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:82
msgid "``stack``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:83
msgid ""
"Graph traversal stack; the stack contains information on the path the media "
"entities to be walked and the links through which they were reached."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:85
msgid "``stack.entity``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:86
msgid "pointer to :c:type:`struct media_entity <media_entity>` at the graph."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:86
msgid "``stack.link``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:87
msgid "pointer to :c:type:`struct list_head <list_head>`."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:87
#: include/media/media-entity.h:145
msgid "``ent_enum``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:88
msgid "Visited entities"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:88
msgid "``top``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:89
msgid "The top of the stack"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:101
msgid "Media pipeline related information"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:103
msgid "``allocated``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:104
msgid "Media pipeline allocated and freed by the framework"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:105
msgid "The media device the pipeline is part of"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:106
msgid "List of media_pipeline_pad"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:106
msgid "``start_count``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:107
msgid "Media pipeline start - stop count"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:116
msgid "A pad part of a media pipeline"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:119
msgid "Entry in the media_pad pads list"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:119
#: include/media/media-entity.h:233 include/media/media-entity.h:1206
#: include/media/media-entity.h:1253
msgid "``pipe``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:120
msgid "The media_pipeline that the pad is part of"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:120
#: include/media/media-entity.h:1204
msgid "``pad``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:121
msgid "The media pad"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:121
msgid ""
"This structure associate a pad with a media pipeline. Instances of "
"media_pipeline_pad are created by media_pipeline_start() when it builds the "
"pipeline, and stored in the :c:type:`media_pad.pads <media_pad>` list. "
"media_pipeline_stop() removes the entries from the list and deletes them."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:134
msgid "Iterator for media_pipeline_for_each_pad"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:136
#: include/media/media-entity.h:146
msgid "``cursor``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:137
#: include/media/media-entity.h:147
msgid "The current element"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:143
msgid "Iterator for media_pipeline_for_each_entity"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:146
msgid "The entity enumeration tracker"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:154
msgid "A link object part of a media graph."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:156
#: include/media/media-entity.h:225 include/media/media-entity.h:319
#: include/media/media-entity.h:391
msgid "``graph_obj``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:157
#: include/media/media-entity.h:226
msgid "Embedded structure containing the media object common data"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:158
msgid ""
"Linked list associated with an entity or an interface that owns the link."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1
msgid "``{unnamed_union}``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:2
msgid "anonymous"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:159
msgid "``gobj0``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:160
msgid ""
"Part of a union. Used to get the pointer for the first graph_object of the "
"link."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:161
msgid "``source``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:162
msgid ""
"Part of a union. Used only if the first object (gobj0) is a pad. In that "
"case, it represents the source pad."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:163
#: include/media/media-entity.h:414 include/media/media-entity.h:666
msgid "``intf``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:164
msgid "Part of a union. Used only if the first object (gobj0) is an interface."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:165
msgid "``gobj1``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:166
msgid ""
"Part of a union. Used to get the pointer for the second graph_object of the "
"link."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:167
msgid "``sink``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:168
msgid ""
"Part of a union. Used only if the second object (gobj1) is a pad. In that "
"case, it represents the sink pad."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:169
#: include/media/media-entity.h:226 include/media/media-entity.h:383
#: include/media/media-entity.h:1251 include/media/media-entity.h:1392
#: include/media/media-entity.h:1442
msgid "``entity``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:170
msgid "Part of a union. Used only if the second object (gobj1) is an entity."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:171
msgid "``reverse``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:172
msgid "Pointer to the link for the reverse direction of a pad to pad link."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:174
msgid "Link flags, as defined in uapi/media.h (MEDIA_LNK_FL_*)"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:174
msgid "``is_backlink``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:175
msgid "Indicate if the link is a backlink."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:195
msgid "type of the signal inside a media pad"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:201
msgid "``PAD_SIGNAL_DEFAULT``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:202
msgid ""
"Default signal. Use this when all inputs or all outputs are uniquely "
"identified by the pad number."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:205
msgid "``PAD_SIGNAL_ANALOG``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:206
msgid ""
"The pad contains an analog signal. It can be Radio Frequency, Intermediate "
"Frequency, a baseband signal or sub-carriers. Tuner inputs, IF-PLL "
"demodulators, composite and s-video signals should use it."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:211
msgid "``PAD_SIGNAL_DV``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:212
msgid ""
"Contains a digital video signal, with can be a bitstream of samples taken "
"from an analog TV video source. On such case, it usually contains the VBI "
"data on it."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:216
msgid "``PAD_SIGNAL_AUDIO``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:217
msgid ""
"Contains an Intermediate Frequency analog signal from an audio sub-carrier "
"or an audio bitstream. IF signals are provided by tuners and consumed by "
"audio AM/FM decoders. Bitstream audio is provided by an audio decoder."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:223
msgid "A media pad graph object."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:227
msgid "Entity this pad belongs to"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:227
msgid "``index``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:228
msgid "Pad index in the entity pads array, numbered from 0 to n"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:228
#: include/media/media-entity.h:329
msgid "``num_links``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:229
msgid "Number of links connected to this pad"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:229
msgid "``sig_type``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:230
msgid "Type of the signal inside a media pad"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:231
msgid ""
"Pad flags, as defined in :ref:`include/uapi/linux/media.h <media_header>` "
"(seek for ``MEDIA_PAD_FL_*``)"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:234
msgid ""
"Pipeline this pad belongs to. Use media_entity_pipeline() to access this "
"field."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:252
msgid "Media entity operations"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:253
msgid "``get_fwnode_pad``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:254
msgid ""
"Return the pad number based on a fwnode endpoint or a negative value on "
"error. This operation can be used to map a fwnode to a media pad number. "
"Optional."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:256
msgid "``link_setup``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:257
msgid ""
"Notify the entity of link changes. The operation can return an error, in "
"which case link setup will be cancelled. Optional."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:259
msgid "``link_validate``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:260
msgid ""
"Return whether a link is valid from the entity point of view. The "
"media_pipeline_start() function validates all links by calling this "
"operation. Optional."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:262
msgid "``has_pad_interdep``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:263
msgid ""
"Return whether two pads of the entity are interdependent. If two pads are "
"interdependent they are part of the same pipeline and enabling one of the "
"pads means that the other pad will become \"locked\" and doesn't allow "
"configuration changes. pad0 and pad1 are guaranteed to not both be sinks or "
"sources. Never call the .has_pad_interdep() operation directly, always use "
"media_entity_has_pad_interdep(). Optional: If the operation isn't "
"implemented all pads will be considered as interdependent."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:274
msgid ""
"Those these callbacks are called with struct :c:type:`media_device."
"graph_mutex <media_device>` mutex held."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:290
msgid "Media entity type"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:296
msgid "``MEDIA_ENTITY_TYPE_BASE``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:297
msgid "The entity isn't embedded in another subsystem structure."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:299
msgid "``MEDIA_ENTITY_TYPE_VIDEO_DEVICE``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:300
msgid "The entity is embedded in a struct video_device instance."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:302
msgid "``MEDIA_ENTITY_TYPE_V4L2_SUBDEV``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:303
msgid "The entity is embedded in a struct v4l2_subdev instance."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:298
msgid ""
"Media entity objects are often not instantiated directly, but the media "
"entity structure is inherited by (through embedding) other subsystem-"
"specific structures. The media entity type identifies the type of the "
"subclass structure that implements a media entity instance."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:303
msgid ""
"This allows runtime type identification of media entities and safe casting "
"to the correct object type. For instance, a media entity structure instance "
"embedded in a v4l2_subdev structure instance will have the type "
"``MEDIA_ENTITY_TYPE_V4L2_SUBDEV`` and can safely be cast to a :c:type:"
"`v4l2_subdev` structure using the container_of() macro."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:317
msgid "A media entity graph object."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:320
msgid "Embedded structure containing the media object common data."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:321
msgid "Entity name."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:321
msgid "``obj_type``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:322
msgid "Type of the object that implements the media_entity."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:322
msgid "``function``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:323
msgid ""
"Entity main function, as defined in :ref:`include/uapi/linux/media.h "
"<media_header>` (seek for ``MEDIA_ENT_F_*``)"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:326
msgid ""
"Entity flags, as defined in :ref:`include/uapi/linux/media.h <media_header>` "
"(seek for ``MEDIA_ENT_FL_*``)"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:328
msgid "``num_pads``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:329
msgid "Number of sink and source pads."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:330
msgid "Total number of links, forward and back, enabled and disabled."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:330
msgid "``num_backlinks``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:331
msgid "Number of backlinks"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:331
msgid "``internal_idx``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:332
msgid ""
"An unique internal entity specific number. The numbers are re-used if "
"entities are unregistered or registered again."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:334
msgid "Pads array with the size defined by **num_pads**."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:335
msgid "List of data links."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:336
msgid "Entity operations."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:336
msgid "``use_count``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:337
msgid "Use count for the entity."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:337
msgid "``info``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:338
msgid "Union with devnode information.  Kept just for backward compatibility."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:339
msgid "``info.dev``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:340
msgid "Contains device major and minor info."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:340
msgid "``info.dev.major``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:341
msgid "device node major, if the device is a devnode."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:341
msgid "``info.dev.minor``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:342
msgid "device node minor, if the device is a devnode."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:344
msgid ""
"The **use_count** reference count must never be negative, but is a signed "
"integer on purpose: a simple ``WARN_ON(<0)`` check can be used to detect "
"reference count bugs that would make it negative."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:379
msgid "``media_entity_for_each_pad (entity, iter)``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:377
msgid "Iterate on all pads in an entity"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:378
msgid "The entity the pads belong to"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:380
#: include/media/media-entity.h:1203 include/media/media-entity.h:1250
msgid "``iter``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:379
#: include/media/media-entity.h:1203
msgid "The iterator pad"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:380
msgid "Iterate on all pads in a media entity."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:389
msgid "A media interface graph object."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:392
msgid "embedded graph object"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:393
msgid "List of links pointing to graph entities"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:393
msgid "``type``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:394
msgid ""
"Type of the interface as defined in :ref:`include/uapi/linux/media.h "
"<media_header>` (seek for ``MEDIA_INTF_T_*``)"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:397
msgid ""
"Interface flags as defined in :ref:`include/uapi/linux/media.h "
"<media_header>` (seek for ``MEDIA_INTF_FL_*``)"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:401
#: include/media/media-entity.h:1294
msgid "Currently, no flags for :c:type:`media_interface` is defined."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:412
msgid "A media interface via a device node."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:415
msgid "embedded interface object"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:415
msgid "``major``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:416
msgid "Major number of a device node"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:417
msgid "Minor number of a device node"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:427
msgid "return the media entity graph object id"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:429
#: include/media/media-entity.h:846
msgid "pointer to :c:type:`media_entity`"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:437
msgid "return the media object type"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:443
#: include/media/media-entity.h:453 include/media/media-entity.h:674
#: include/media/media-entity.h:692
msgid "``struct media_gobj *gobj``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:439
#: include/media/media-entity.h:449 include/media/media-entity.h:627
#: include/media/media-entity.h:636 include/media/media-entity.h:645
#: include/media/media-entity.h:654 include/media/media-entity.h:673
#: include/media/media-entity.h:688
msgid "Pointer to the struct :c:type:`media_gobj` graph object"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:447
msgid "return the media object ID"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:457
msgid "encapsulates type and ID on at the object ID"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:463
#: include/media/media-entity.h:673
msgid "``enum media_gobj_type type``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:459
msgid "object type as define at enum :c:type:`media_gobj_type`."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:461
msgid "``u64 local_id``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:460
msgid "next ID, from struct :c:type:`media_device.id <media_device>`."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:473
msgid "Check if the entity is a video_device"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:474
#: include/media/media-entity.h:487
msgid "pointer to entity"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:476
msgid ""
"``true`` if the entity is an instance of a video_device object and can "
"safely be cast to a struct video_device using the container_of() macro, or "
"``false`` otherwise."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:486
msgid "Check if the entity is a v4l2_subdev"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:489
msgid ""
"``true`` if the entity is an instance of a :c:type:`v4l2_subdev` object and "
"can safely be cast to a struct :c:type:`v4l2_subdev` using the "
"container_of() macro, or ``false`` otherwise."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:499
msgid "Initialise an entity enumeration"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:505
#: include/media/media-entity.h:516 include/media/media-entity.h:523
#: include/media/media-entity.h:533 include/media/media-entity.h:548
#: include/media/media-entity.h:563 include/media/media-entity.h:580
#: include/media/media-entity.h:599
msgid "``struct media_entity_enum *ent_enum``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:501
msgid "Entity enumeration to be initialised"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:502
msgid "The related media device"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:504
msgid "zero on success or a negative error code."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:510
msgid "Release resources of an entity enumeration"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:512
msgid "Entity enumeration to be released"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:517
msgid "Clear the entire enum"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:519
msgid "Entity enumeration to be cleared"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:527
msgid "Mark a single entity in the enum"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:529
#: include/media/media-entity.h:544 include/media/media-entity.h:559
#: include/media/media-entity.h:577 include/media/media-entity.h:595
msgid "Entity enumeration"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:530
msgid "Entity to be marked"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:542
msgid "Unmark a single entity in the enum"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:545
msgid "Entity to be unmarked"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:557
msgid "Test whether the entity is marked"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:560
#: include/media/media-entity.h:578
msgid "Entity to be tested"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:561
msgid "Returns ``true`` if the entity was marked."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:574
msgid "Test whether the entity is marked, and mark it"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:579
msgid "Returns ``true`` if the entity was marked, and mark it before doing so."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:593
msgid "Test whether the entire enum is empty"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:597
msgid "``true`` if the entity was empty."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:605
msgid "Test whether two enums intersect"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:611
msgid "``struct media_entity_enum *ent_enum1``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:607
msgid "First entity enumeration"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:609
msgid "``struct media_entity_enum *ent_enum2``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:608
msgid "Second entity enumeration"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:610
msgid ""
"``true`` if entity enumerations **ent_enum1** and **ent_enum2** intersect, "
"otherwise ``false``."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:626
msgid "``gobj_to_entity (gobj)``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:624
msgid ""
"returns the struct :c:type:`media_entity` pointer from the **gobj** "
"contained on it."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:630
#: include/media/media-entity.h:639 include/media/media-entity.h:648
#: include/media/media-entity.h:657
msgid "``gobj``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:635
msgid "``gobj_to_pad (gobj)``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:633
msgid ""
"returns the struct :c:type:`media_pad` pointer from the **gobj** contained "
"on it."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:644
msgid "``gobj_to_link (gobj)``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:642
msgid ""
"returns the struct :c:type:`media_link` pointer from the **gobj** contained "
"on it."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:653
msgid "``gobj_to_intf (gobj)``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:651
msgid ""
"returns the struct :c:type:`media_interface` pointer from the **gobj** "
"contained on it."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:662
msgid "``intf_to_devnode (intf)``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:660
msgid ""
"returns the struct media_intf_devnode pointer from the **intf** contained on "
"it."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:663
msgid "Pointer to struct :c:type:`media_intf_devnode`"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:669
msgid "Initialize a graph object"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:671
#: include/media/media-entity.h:1087
msgid "Pointer to the :c:type:`media_device` that contains the object"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:672
msgid "Type of the object"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:674
msgid ""
"This routine initializes the embedded struct :c:type:`media_gobj` inside a "
"media graph object. It is called automatically if ``media_*_create`` "
"function calls are used. However, if the object (entity, link, pad, "
"interface) is embedded on some other object, this function should be called "
"before registering the object at the media controller."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:686
msgid "Stop using a graph object on a media device"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:689
msgid ""
"This should be called by all routines like media_device_unregister() that "
"remove/destroy media graph objects."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:696
msgid "Initialize the entity pads"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:698
#: include/media/media-entity.h:723 include/media/media-entity.h:741
msgid "entity where the pads belong"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:700
msgid "``u16 num_pads``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:699
msgid "total number of sink and source pads"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:701
msgid "``struct media_pad *pads``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:700
msgid "Array of **num_pads** pads."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:701
msgid ""
"The pads array is managed by the entity driver and passed to "
"media_entity_pads_init() where its pointer will be stored in the :c:type:"
"`media_entity` structure."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:705
msgid ""
"If no pads are needed, drivers could either directly fill :c:type:"
"`media_entity->num_pads <media_entity>` with 0 and :c:type:`media_entity-"
">pads <media_entity>` with ``NULL`` or call this function that will do the "
"same."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:709
msgid ""
"As the number of pads is known in advance, the pads array is not allocated "
"dynamically but is managed by the entity driver. Most drivers will embed the "
"pads array in a driver-specific structure, avoiding dynamic allocation."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:713
msgid ""
"Drivers must set the direction of every pad in the pads array before calling "
"media_entity_pads_init(). The function will initialize the other pads fields."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:721
msgid "free resources associated with an entity"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:724
msgid ""
"This function must be called during the cleanup phase after unregistering "
"the entity (currently, it does nothing)."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:727
msgid ""
"Calling media_entity_cleanup() on a media_entity whose memory has been "
"zeroed but that has not been initialized with media_entity_pad_init() is "
"valid and is a no-op."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:739
msgid "retrieves a pad index from an entity"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:743
msgid "``u32 pad_type``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:742
msgid "the type of the pad, one of MEDIA_PAD_FL_* pad types"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:744
msgid "``enum media_pad_signal_type sig_type``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:743
msgid "type of signal of the pad to be search"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:744
msgid ""
"This helper function finds the first pad index inside an entity that "
"satisfies both **is_sink** and **sig_type** conditions."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:748
msgid ""
"On success, return the pad number. If the pad was not found or the media "
"entity is a NULL pointer, return -EINVAL."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:757
#: include/media/media-entity.h:789
msgid "creates a link between two entities."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:763
#: include/media/media-entity.h:795
msgid "``struct media_entity *source``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:759
msgid "pointer to :c:type:`media_entity` of the source pad."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:761
msgid "``u16 source_pad``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:760
#: include/media/media-entity.h:796
msgid "number of the source pad in the pads array"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:762
#: include/media/media-entity.h:799
msgid "``struct media_entity *sink``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:761
msgid "pointer to :c:type:`media_entity` of the sink pad."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:763
msgid "``u16 sink_pad``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:762
#: include/media/media-entity.h:800
msgid "number of the sink pad in the pads array."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:764
#: include/media/media-entity.h:802 include/media/media-entity.h:859
#: include/media/media-entity.h:876 include/media/media-entity.h:1285
#: include/media/media-entity.h:1317
msgid "``u32 flags``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:763
#: include/media/media-entity.h:1316
msgid ""
"Link flags, as defined in :ref:`include/uapi/linux/media.h <media_header>` "
"( seek for ``MEDIA_LNK_FL_*``)"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:766
#: include/media/media-entity.h:807 include/media/media-entity.h:1319
msgid "Valid values for flags:"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:768
#: include/media/media-entity.h:1321
msgid "``MEDIA_LNK_FL_ENABLED``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:769
msgid ""
"Indicates that the link is enabled and can be used to transfer media data. "
"When two or more links target a sink pad, only one of them can be enabled at "
"a time."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:773
msgid "``MEDIA_LNK_FL_IMMUTABLE``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:774
msgid ""
"Indicates that the link enabled state can't be modified at runtime. If "
"``MEDIA_LNK_FL_IMMUTABLE`` is set, then ``MEDIA_LNK_FL_ENABLED`` must also "
"be set, since an immutable link is always enabled."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:780
msgid ""
"Before calling this function, media_entity_pads_init() and "
"media_device_register_entity() should be called previously for both ends."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:795
msgid "``const struct media_device *mdev``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:791
msgid "Pointer to the media_device that contains the object"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:793
msgid "``const u32 source_function``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:792
msgid "Function of the source entities. Used only if **source** is NULL."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:794
msgid ""
"pointer to :c:type:`media_entity` of the source pad. If NULL, it will use "
"all entities that matches the **sink_function**."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:797
msgid "``const u16 source_pad``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:798
msgid "``const u32 sink_function``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:797
msgid "Function of the sink entities. Used only if **sink** is NULL."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:798
msgid ""
"pointer to :c:type:`media_entity` of the sink pad. If NULL, it will use all "
"entities that matches the **sink_function**."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:801
msgid "``const u16 sink_pad``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:801
msgid "Link flags, as defined in include/uapi/linux/media.h."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:803
msgid "``const bool allow_both_undefined``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:802
msgid ""
"if ``true``, then both **source** and **sink** can be NULL. In such case, it "
"will create a crossbar between all entities that matches **source_function** "
"to all entities that matches **sink_function**. If ``false``, it will return "
"0 and won't create any link if both **source** and **sink** are NULL."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:809
msgid ""
"A ``MEDIA_LNK_FL_ENABLED`` flag indicates that the link is enabled and can be"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:810
msgid ""
"used to transfer media data. If multiple links are created and this flag is "
"passed as an argument, only the first created link will have this flag."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:814
msgid ""
"A ``MEDIA_LNK_FL_IMMUTABLE`` flag indicates that the link enabled state can't"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:815
msgid ""
"be modified at runtime. If ``MEDIA_LNK_FL_IMMUTABLE`` is set, then "
"``MEDIA_LNK_FL_ENABLED`` must also be set since an immutable link is always "
"enabled."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:819
msgid ""
"It is common for some devices to have multiple source and/or sink entities "
"of the same type that should be linked. While media_create_pad_link() "
"creates link by link, this function is meant to allow 1:n, n:1 and even "
"cross-bar (n:n) links."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:826
msgid ""
"Before calling this function, media_entity_pads_init() and "
"media_device_register_entity() should be called previously for the entities "
"to be linked."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:844
msgid "remove all links associated with an entity"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:849
msgid ""
"This is called automatically when an entity is unregistered via "
"media_device_register_entity()."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:856
msgid "Configure a media link without locking"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:862
#: include/media/media-entity.h:878 include/media/media-entity.h:1351
#: include/media/media-entity.h:1360 include/media/media-entity.h:1425
msgid "``struct media_link *link``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:857
msgid "The link being configured"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:858
msgid "Link configuration flags"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:859
msgid ""
"The bulk of link setup is handled by the two entities connected through the "
"link. This function notifies both entities of the link configuration change."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:862
msgid ""
"If the link is immutable or if the current and new configuration are "
"identical, return immediately."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:865
msgid ""
"The user is expected to hold link->source->parent->mutex. If not, "
"media_entity_setup_link() should be used instead."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:872
msgid "changes the link flags properties in runtime"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:874
msgid "pointer to :c:type:`media_link`"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:875
msgid "the requested new link flags"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:876
msgid ""
"The only configurable property is the ``MEDIA_LNK_FL_ENABLED`` link flag to "
"enable/disable a link. Links marked with the ``MEDIA_LNK_FL_IMMUTABLE`` link "
"flag can not be enabled or disabled."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:880
msgid ""
"When a link is enabled or disabled, the media framework calls the link_setup "
"operation for the two entities at the source and sink of the link, in that "
"order. If the second link_setup call fails, another link_setup call is made "
"on the first entity to restore the original link flags."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:886
msgid ""
"Media device drivers can be notified of link setup operations by setting "
"the :c:type:`media_device.link_notify <media_device>` pointer to a callback "
"function. If provided, the notification callback will be called before "
"enabling and after disabling links."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:891
msgid ""
"Entity drivers must implement the link_setup operation if any of their links "
"is non-immutable. The operation must either configure the hardware or store "
"the configuration information to be applied later."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:895
msgid ""
"Link configuration must not have any side effect on other links. If an "
"enabled link at a sink pad prevents another link at the same pad from being "
"enabled, the link_setup operation must return ``-EBUSY`` and can't "
"implicitly disable the first enabled link."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:902
msgid ""
"The valid values of the flags for the link is the same as described on "
"media_create_pad_link(), for pad to pad links or the same as described on "
"media_create_intf_link(), for interface to entity links."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:910
msgid "Find a link between two pads"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:916
msgid "``struct media_pad *source``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:911
msgid "Source pad"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:913
msgid "``struct media_pad *sink``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:912
msgid "Sink pad"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:914
msgid ""
"returns a pointer to the link between the two entities. If no such link "
"exists, return ``NULL``."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:921
msgid "Find the first pad at the remote end of a link"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:927
#: include/media/media-entity.h:939 include/media/media-entity.h:1003
msgid "``const struct media_pad *pad``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:922
msgid "Pad at the local end of the link"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:923
msgid ""
"Search for a remote pad connected to the given pad by iterating over all "
"links originating or terminating at that pad until an enabled link is found."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:927
msgid ""
"returns a pointer to the pad at the remote end of the first found enabled "
"link, or ``NULL`` if no enabled link has been found."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:933
msgid "Find a remote pad connected to a pad"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:934
#: include/media/media-entity.h:998 include/media/media-entity.h:1049
msgid "The pad"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:935
msgid ""
"Search for and return a remote pad connected to **pad** through an enabled "
"link. If multiple (or no) remote pads are found, an error is returned."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:938
msgid ""
"The uniqueness constraint makes this helper function suitable for entities "
"that support a single active source at a time on a given pad."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:942
#: include/media/media-entity.h:962 include/media/media-entity.h:984
msgid "-ENOTUNIQ - Multiple links are enabled"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:943
#: include/media/media-entity.h:963 include/media/media-entity.h:985
msgid "-ENOLINK - No connected pad found"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:942
#: include/media/media-entity.h:962 include/media/media-entity.h:984
msgid ""
"A pointer to the remote pad, or one of the following error pointers if an "
"error occurs:"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:951
msgid "Find a remote pad connected to an entity"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:957
#: include/media/media-entity.h:979 include/media/media-entity.h:1015
msgid "``const struct media_entity *entity``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:952
#: include/media/media-entity.h:975 include/media/media-entity.h:1010
#: include/media/media-entity.h:1029 include/media/media-entity.h:1063
msgid "The entity"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:954
msgid "``unsigned int type``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:953
msgid "The type of pad to find (MEDIA_PAD_FL_SINK or MEDIA_PAD_FL_SOURCE)"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:954
msgid ""
"Search for and return a remote pad of **type** connected to **entity** "
"through an enabled link. If multiple (or no) remote pads match these "
"criteria, an error is returned."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:958
msgid ""
"The uniqueness constraint makes this helper function suitable for entities "
"that support a single active source or sink at a time."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:973
msgid "Find a remote source pad connected to an entity"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:976
msgid ""
"Search for and return a remote source pad connected to **entity** through an "
"enabled link. If multiple (or no) remote pads match these criteria, an error "
"is returned."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:980
msgid ""
"The uniqueness constraint makes this helper function suitable for entities "
"that support a single active source at a time."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:997
msgid "Test if a pad is part of a streaming pipeline"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1000
msgid ""
"True if the pad is part of a pipeline started with the "
"media_pipeline_start() function, false otherwise."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1009
msgid "Test if an entity is part of a streaming pipeline"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1012
msgid ""
"True if the entity is part of a pipeline started with the "
"media_pipeline_start() function, false otherwise."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1028
msgid "Get the media pipeline an entity is part of"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1030
msgid "DEPRECATED: use media_pad_pipeline() instead."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1032
msgid ""
"This function returns the media pipeline that an entity has been associated "
"with when constructing the pipeline with media_pipeline_start(). The pointer "
"remains valid until media_pipeline_stop() is called."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1036
msgid ""
"In general, entities can be part of multiple pipelines, when carrying "
"multiple streams (either on different pads, or on the same pad using "
"multiplexed streams). This function is to be used only for entities that do "
"not support multiple pipelines."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1042
msgid ""
"The media_pipeline the entity is part of, or NULL if the entity is not part "
"of any pipeline."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1048
msgid "Get the media pipeline a pad is part of"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1054
#: include/media/media-entity.h:1178 include/media/media-entity.h:1192
#: include/media/media-entity.h:1271
msgid "``struct media_pad *pad``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1050
msgid ""
"This function returns the media pipeline that a pad has been associated with "
"when constructing the pipeline with media_pipeline_start(). The pointer "
"remains valid until media_pipeline_stop() is called."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1055
msgid ""
"The media_pipeline the pad is part of, or NULL if the pad is not part of any "
"pipeline."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1061
msgid "Get pad number from fwnode"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1065
msgid "``const struct fwnode_handle *fwnode``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1064
msgid "Pointer to the fwnode_handle which should be used to find the pad"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1066
msgid "``unsigned long direction_flags``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1065
msgid ""
"Expected direction of the pad, as defined in :ref:`include/uapi/linux/media."
"h <media_header>` (seek for ``MEDIA_PAD_FL_*``)"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1068
msgid ""
"This function can be used to resolve the media pad number from a fwnode. "
"This is useful for devices which use more complex mappings of media pads."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1072
msgid ""
"If the entity does not implement the get_fwnode_pad() operation then this "
"function searches the entity for the first pad that matches the "
"**direction_flags**."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1077
msgid "returns the pad number on success or a negative error code."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1084
msgid "Allocate resources used by graph walk."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1090
#: include/media/media-entity.h:1106 include/media/media-entity.h:1115
#: include/media/media-entity.h:1135
msgid "``struct media_graph *graph``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1086
#: include/media/media-entity.h:1102 include/media/media-entity.h:1112
msgid "Media graph structure that will be used to walk the graph"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1088
#: include/media/media-entity.h:1103 include/media/media-entity.h:1114
#: include/media/media-entity.h:1131
msgid "This function is deprecated, use media_pipeline_for_each_pad() instead."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1090
msgid ""
"The caller is required to hold the media_device graph_mutex during the graph "
"walk until the graph state is released."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1093
msgid "Returns zero on success or a negative error code otherwise."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1100
msgid "Release resources used by graph walk."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1109
msgid "Start walking the media graph at a given entity"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1113
msgid "Starting entity"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1116
msgid ""
"Before using this function, media_graph_walk_init() must be used to allocate "
"resources used for walking the graph. This function initializes the graph "
"traversal structure to walk the entities graph starting at the given entity. "
"The traversal structure must not be modified by the caller during graph "
"traversal. After the graph walk, the resources must be released using "
"media_graph_walk_cleanup()."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1129
msgid "Get the next entity in the graph"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1130
msgid "Media graph structure"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1133
msgid "Perform a depth-first traversal of the given media entities graph."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1135
msgid ""
"The graph structure must have been previously initialized with a call to "
"media_graph_walk_start()."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1139
msgid ""
"returns the next entity in the graph or ``NULL`` if the whole graph have "
"been traversed."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1145
#: include/media/media-entity.h:1161 include/media/media-entity.h:1265
msgid "Mark a pipeline as streaming"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1151
#: include/media/media-entity.h:1167
msgid "``struct media_pad *origin``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1146
#: include/media/media-entity.h:1163 include/media/media-entity.h:1173
#: include/media/media-entity.h:1188 include/media/media-entity.h:1266
msgid "Starting pad"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1148
#: include/media/media-entity.h:1165 include/media/media-entity.h:1221
msgid "``struct media_pipeline *pipe``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1147
#: include/media/media-entity.h:1164
msgid "Media pipeline to be assigned to all pads in the pipeline."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1148
msgid ""
"Mark all pads connected to pad **origin** through enabled links, either "
"directly or indirectly, as streaming. The given pipeline object is assigned "
"to every pad in the pipeline and stored in the media_pad pipe field."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1152
msgid ""
"Calls to this function can be nested, in which case the same number of "
"media_pipeline_stop() calls will be required to stop streaming. The pipeline "
"pointer must be identical for all nested calls to media_pipeline_start()."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1165
msgid "..note:: This is the non-locking version of media_pipeline_start()"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1172
#: include/media/media-entity.h:1186
msgid "Mark a pipeline as not streaming"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1174
msgid ""
"Mark all pads connected to a given pad through enabled links, either "
"directly or indirectly, as not streaming. The media_pad pipe field is reset "
"to ``NULL``."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1178
msgid ""
"If multiple calls to media_pipeline_start() have been made, the same number "
"of calls to this function are required to mark the pipeline as not streaming."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1189
msgid "This is the non-locking version of media_pipeline_stop()"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1202
msgid "``media_pipeline_for_each_pad (pipe, iter, pad)``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1200
msgid "Iterate on all pads in a media pipeline"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1201
#: include/media/media-entity.h:1216 include/media/media-entity.h:1248
msgid "The pipeline"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1202
msgid "The iterator (struct media_pipeline_pad_iter)"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1204
msgid ""
"Iterate on all pads in a media pipeline. This is only valid after the "
"pipeline has been built with media_pipeline_start() and before it gets "
"destroyed with media_pipeline_stop()."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1215
msgid "Initialize a pipeline entity iterator"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1218
#: include/media/media-entity.h:1239
msgid "``struct media_pipeline_entity_iter *iter``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1217
#: include/media/media-entity.h:1234
msgid "The iterator"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1218
msgid ""
"This function must be called to initialize the iterator before using it in a "
"media_pipeline_for_each_entity() loop. The iterator must be destroyed by a "
"call to media_pipeline_entity_iter_cleanup after the loop (including in code "
"paths that break from the loop)."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1223
msgid ""
"The same iterator can be used in multiple consecutive loops without being "
"destroyed and reinitialized."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1227
msgid "0 on success or a negative error code otherwise."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1233
msgid "Destroy a pipeline entity iterator"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1235
msgid ""
"This function must be called to destroy iterators initialized with "
"media_pipeline_entity_iter_init()."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1249
msgid "``media_pipeline_for_each_entity (pipe, iter, entity)``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1247
msgid "Iterate on all entities in a media pipeline"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1249
msgid "The iterator (struct media_pipeline_entity_iter)"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1250
msgid "The iterator entity"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1251
msgid ""
"Iterate on all entities in a media pipeline. This is only valid after the "
"pipeline has been built with media_pipeline_start() and before it gets "
"destroyed with media_pipeline_stop(). The iterator must be initialized with "
"media_pipeline_entity_iter_init() before iteration, and destroyed with "
"media_pipeline_entity_iter_cleanup() after (including in code paths that "
"break from the loop)."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1267
msgid ""
"media_pipeline_alloc_start() is similar to media_pipeline_start() but "
"instead of working on a given pipeline the function will use an existing "
"pipeline if the pad is already part of a pipeline, or allocate a new "
"pipeline."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1271
msgid ""
"Calls to media_pipeline_alloc_start() must be matched with "
"media_pipeline_stop()."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1278
msgid "creates and initializes a device node interface"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1282
msgid "``u32 type``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1281
msgid ""
"type of the interface, as given by :ref:`include/uapi/linux/media.h "
"<media_header>` ( seek for ``MEDIA_INTF_T_*``) macros."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1284
msgid ""
"Interface flags, as defined in :ref:`include/uapi/linux/media.h "
"<media_header>` ( seek for ``MEDIA_INTF_FL_*``)"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1288
msgid "``u32 major``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1287
msgid "Device node major number."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1289
msgid "``u32 minor``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1288
msgid "Device node minor number."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1290
msgid ""
"if succeeded, returns a pointer to the newly allocated :c:type:"
"`media_intf_devnode` pointer."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1302
msgid "removes a device node interface"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1308
msgid "``struct media_intf_devnode *devnode``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1304
msgid "pointer to :c:type:`media_intf_devnode` to be freed."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1305
msgid ""
"When a device node interface is removed, all links to it are automatically "
"removed."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1312
msgid "creates a link between an entity and an interface"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1314
msgid "pointer to ``media_entity``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1316
#: include/media/media-entity.h:1369 include/media/media-entity.h:1378
msgid "``struct media_interface *intf``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1315
msgid "pointer to ``media_interface``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1322
msgid ""
"Indicates that the interface is connected to the entity hardware. That's the "
"default value for interfaces. An interface may be disabled if the hardware "
"is busy due to the usage of some other interface that it is currently "
"controlling the hardware."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1327
msgid ""
"A typical example is an hybrid TV device that handle only one type of stream "
"on a given time. So, when the digital TV is streaming, the V4L2 interfaces "
"won't be enabled, as such device is not able to also stream analog TV or "
"radio."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1334
msgid ""
"Before calling this function, media_devnode_create() should be called for "
"the interface and media_device_register_entity() should be called for the "
"interface that will be part of the link."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1345
#: include/media/media-entity.h:1354
msgid "remove a single interface link"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1347
#: include/media/media-entity.h:1356
msgid "pointer to :c:type:`media_link`."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1348
msgid "This is an unlocked version of media_remove_intf_link()"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1357
msgid "Prefer to use this one, instead of __media_remove_intf_link()"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1363
#: include/media/media-entity.h:1372
msgid "remove all links associated with an interface"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1365
#: include/media/media-entity.h:1374
msgid "pointer to :c:type:`media_interface`"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1366
msgid "This is an unlocked version of media_remove_intf_links()."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1377
msgid ""
"This is called automatically when an entity is unregistered via "
"media_device_register_entity() and by media_devnode_remove()."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1380
msgid "Prefer to use this one, instead of __media_remove_intf_links()."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1388
msgid "``media_entity_call (entity, operation, args...)``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1386
msgid "Calls a struct media_entity_operations operation on an entity"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1389
msgid "entity where the **operation** will be called"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1391
msgid "``operation``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1390
msgid ""
"type of the operation. Should be the name of a member of struct :c:type:"
"`media_entity_operations`."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1393
msgid "``args...``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1
msgid "variable arguments"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1392
msgid ""
"This helper function will check if **operation** is not ``NULL``. On such "
"case, it will issue a call to **operation**\\(**entity**, **args**\\)."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1402
msgid ""
"create an ancillary link between two instances of :c:type:`media_entity`"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1408
msgid "``struct media_entity *primary``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1405
msgid "pointer to the primary :c:type:`media_entity`"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1407
msgid "``struct media_entity *ancillary``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1406
msgid "pointer to the ancillary :c:type:`media_entity`"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1407
msgid ""
"Create an ancillary link between two entities, indicating that they "
"represent two connected pieces of hardware that form a single logical unit. "
"A typical example is a camera lens controller being linked to the sensor "
"that it is supporting."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1412
msgid ""
"The function sets both MEDIA_LNK_FL_ENABLED and MEDIA_LNK_FL_IMMUTABLE for "
"the new link."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1421
msgid "Iterate through a :c:type:`media_entity`'s links"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1423
#: include/media/media-entity.h:1438
msgid "pointer to the :c:type:`media_entity`"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1424
#: include/media/media-entity.h:1439
msgid "pointer to a :c:type:`media_link` to hold the iterated values"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1426
msgid "``unsigned long link_type``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1425
msgid "one of the MEDIA_LNK_FL_LINK_TYPE flags"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1426
msgid ""
"Return the next link against an entity matching a specific link type. This "
"allows iteration through an entity's links whilst guaranteeing all of the "
"returned links are of the given type."
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1438
msgid "``for_each_media_entity_data_link (entity, link)``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1436
msgid "Iterate through an entity's data links"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1440
msgid "``link``"
msgstr ""

#: ../../../driver-api/media/mc-core:337: include/media/media-entity.h:1440
msgid "Iterate over a :c:type:`media_entity`'s data links"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:23
msgid "media request state"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:29
msgid "``MEDIA_REQUEST_STATE_IDLE``"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:30
msgid "Idle"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:32
msgid "``MEDIA_REQUEST_STATE_VALIDATING``"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:33
msgid "Validating the request, no state changes allowed"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:36
msgid "``MEDIA_REQUEST_STATE_QUEUED``"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:37
msgid "Queued"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:39
msgid "``MEDIA_REQUEST_STATE_COMPLETE``"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:40
msgid "Completed, the request is done"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:42
msgid "``MEDIA_REQUEST_STATE_CLEANING``"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:43
msgid "Cleaning, the request is being re-inited"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:45
msgid "``MEDIA_REQUEST_STATE_UPDATING``"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:46
msgid ""
"The request is being updated, i.e. request objects are being added, modified "
"or removed"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:50
msgid "``NR_OF_MEDIA_REQUEST_STATE``"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:51
msgid ""
"The number of media request states, used internally for sanity check purposes"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:50
msgid "Media device request"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:52
#: include/media/media-request.h:195 include/media/media-request.h:213
msgid "Media device this request belongs to"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:52
#: include/media/media-request.h:263
msgid "``kref``"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:53
msgid "Reference count"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:53
msgid "``debug_str``"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:54
msgid "Prefix for debug messages (process name:fd)"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:54
msgid "``state``"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:55
msgid "The state of the request"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:55
msgid "``updating_count``"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:56
msgid "count the number of request updates that are in progress"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:56
msgid "``access_count``"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:57
msgid "count the number of request accesses that are in progress"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:57
msgid "``objects``"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:58
msgid "List of **struct** media_request_object request objects"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:58
msgid "``num_incomplete_objects``"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:59
msgid "The number of incomplete objects in the request"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:59
msgid "``poll_wait``"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:60
msgid "Wait queue for poll"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:60
msgid "``lock``"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:61
msgid "Serializes access to this struct"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:78
msgid "Lock the request to access its objects"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:84
#: include/media/media-request.h:109 include/media/media-request.h:128
#: include/media/media-request.h:157 include/media/media-request.h:177
#: include/media/media-request.h:189 include/media/media-request.h:309
#: include/media/media-request.h:340
msgid "``struct media_request *req``"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:80
#: include/media/media-request.h:106 include/media/media-request.h:124
#: include/media/media-request.h:154 include/media/media-request.h:173
#: include/media/media-request.h:185 include/media/media-request.h:305
#: include/media/media-request.h:336
msgid "The media request"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:81
msgid ""
"Use before accessing a completed request. A reference to the request must be "
"held during the access. This usually takes place automatically through a "
"file handle. Use **media_request_unlock_for_access** when done."
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:103
msgid "Unlock a request previously locked for access"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:107
msgid ""
"Unlock a request that has previously been locked using "
"**media_request_lock_for_access**."
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:122
msgid "Lock the request for updating its objects"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:125
msgid ""
"Use before updating a request, i.e. adding, modifying or removing a request "
"object in it. A reference to the request must be held during the update. "
"This usually takes place automatically through a file handle. Use "
"**media_request_unlock_for_update** when done."
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:151
msgid "Unlock a request previously locked for update"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:155
msgid ""
"Unlock a request that has previously been locked using "
"**media_request_lock_for_update**."
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:171
msgid "Get the media request"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:174
msgid "Get the media request."
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:183
msgid "Put the media request"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:186
msgid ""
"Put the media request. The media request will be released when the refcount "
"reaches 0."
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:193
msgid "Get a media request by fd"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:197
msgid "``int request_fd``"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:196
msgid "The file descriptor of the request"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:197
msgid ""
"Get the request represented by **request_fd** that is owned by the media "
"device."
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:200
msgid ""
"Return a -EBADR error pointer if requests are not supported by this driver. "
"Return -EINVAL if the request was not found. Return the pointer to the "
"request if found: the caller will have to call **media_request_put** when it "
"finished using the request."
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:211
msgid "Allocate the media request"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:215
msgid "``int *alloc_fd``"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:214
msgid "Store the request's file descriptor in this int"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:215
msgid "Allocated the media request and put the fd in **alloc_fd**."
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:240
msgid "Media request object operations"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:241
msgid "``prepare``"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:242
msgid "Validate and prepare the request object, optional."
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:242
msgid "``unprepare``"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:243
msgid "Unprepare the request object, optional."
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:243
msgid "``queue``"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:244
msgid "Queue the request object, optional."
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:244
msgid "``unbind``"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:245
msgid "Unbind the request object, optional."
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:246
msgid "Release the request object, required."
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:256
msgid "An opaque object that belongs to a media request"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:260
msgid "object's operations"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:260
msgid "``priv``"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:261
msgid "object's priv pointer"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:261
msgid "``req``"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:262
msgid "the request this object belongs to (can be NULL)"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:263
msgid "List entry of the object for **struct** media_request"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:264
msgid "Reference count of the object, acquire before releasing req->lock"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:264
msgid "``completed``"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:265
msgid "If true, then this object was completed."
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:265
msgid ""
"An object related to the request. This struct is always embedded in another "
"struct that contains the actual data for this request object."
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:281
msgid "Get a media request object"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:287
#: include/media/media-request.h:299 include/media/media-request.h:329
#: include/media/media-request.h:341 include/media/media-request.h:368
#: include/media/media-request.h:377
msgid "``struct media_request_object *obj``"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:283
#: include/media/media-request.h:295 include/media/media-request.h:325
#: include/media/media-request.h:340 include/media/media-request.h:364
#: include/media/media-request.h:373
msgid "The object"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:284
msgid "Get a media request object."
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:293
msgid "Put a media request object"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:296
msgid ""
"Put a media request object. Once all references are gone, the object's "
"memory is released."
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:303
msgid "Find an object in a request"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:307
#: include/media/media-request.h:338
msgid "``const struct media_request_object_ops *ops``"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:306
msgid "Find an object with this ops value"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:308
#: include/media/media-request.h:339
msgid "``void *priv``"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:307
msgid "Find an object with this priv value"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:308
msgid "Both **ops** and **priv** must be non-NULL."
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:310
msgid ""
"Returns the object pointer or NULL if not found. The caller must call "
"media_request_object_put() once it finished using the object."
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:313
msgid ""
"Since this function needs to walk the list of objects it takes the **req-"
">lock** spin lock to make this safe."
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:323
msgid "Initialise a media request object"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:326
msgid ""
"Initialise a media request object. The object will be released using the "
"release callback of the ops once it has no references (this function "
"initialises references to one)."
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:334
msgid "Bind a media request object to a request"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:337
msgid "The object ops for this object"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:338
msgid "A driver-specific priv pointer associated with this object"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:340
msgid "``bool is_buffer``"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:339
msgid "Set to true if the object a buffer object."
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:341
msgid ""
"Bind this object to the request and set the ops and priv values of the "
"object so it can be found later with media_request_object_find()."
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:344
msgid ""
"Every bound object must be unbound or completed by the kernel at some point "
"in time, otherwise the request will never complete. When the request is "
"released all completed objects will be unbound by the request core code."
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:349
msgid ""
"Buffer objects will be added to the end of the request's object list, non-"
"buffer objects will be added to the front of the list. This ensures that all "
"buffer objects are at the end of the list and that all non-buffer objects "
"that they depend on are processed first."
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:362
msgid "Unbind a media request object"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:365
msgid "Unbind the media request object from the request."
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:371
msgid "Mark the media request object as complete"
msgstr ""

#: ../../../driver-api/media/mc-core:339: include/media/media-request.h:374
msgid ""
"Mark the media request object as complete. Only bound objects can be "
"completed."
msgstr ""

#: ../../../driver-api/media/mc-core:341:
#: include/media/media-dev-allocator.h:24
msgid "Allocate and return struct :c:type:`media` device"
msgstr ""

#: ../../../driver-api/media/mc-core:341:
#: include/media/media-dev-allocator.h:26
msgid "struct :c:type:`usb_device` pointer"
msgstr ""

#: ../../../driver-api/media/mc-core:341:
#: include/media/media-dev-allocator.h:28
#: include/media/media-dev-allocator.h:46
msgid "``const char *module_name``"
msgstr ""

#: ../../../driver-api/media/mc-core:341:
#: include/media/media-dev-allocator.h:27
#: include/media/media-dev-allocator.h:45
msgid "should be filled with ``KBUILD_MODNAME``"
msgstr ""

#: ../../../driver-api/media/mc-core:341:
#: include/media/media-dev-allocator.h:28
#: include/media/media-dev-allocator.h:46
msgid ""
"struct module pointer ``THIS_MODULE`` for the driver. ``THIS_MODULE`` is "
"null for a built-in driver. It is safe even when ``THIS_MODULE`` is null."
msgstr ""

#: ../../../driver-api/media/mc-core:341:
#: include/media/media-dev-allocator.h:31
msgid ""
"This interface should be called to allocate a Media Device when multiple "
"drivers share usb_device and the media device. This interface allocates :c:"
"type:`media_device` structure and calls media_device_usb_init() to "
"initialize it."
msgstr ""

#: ../../../driver-api/media/mc-core:341:
#: include/media/media-dev-allocator.h:42
msgid "Release media device. Calls kref_put()."
msgstr ""

#: ../../../driver-api/media/mc-core:341:
#: include/media/media-dev-allocator.h:44
msgid "struct :c:type:`media_device` pointer"
msgstr ""

#: ../../../driver-api/media/mc-core:341:
#: include/media/media-dev-allocator.h:49
msgid "This interface should be called to put Media Device Instance kref."
msgstr ""
