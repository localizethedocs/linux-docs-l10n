# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 08:27+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../driver-api/media/v4l2-mem2mem.rst:4
msgid "V4L2 Memory to Memory functions and data structures"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:19
msgid "mem-to-mem device driver callbacks"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:23
#: include/media/v4l2-mem2mem.h:56 include/media/v4l2-mem2mem.h:79
#: include/media/v4l2-mem2mem.h:137
msgid "**Definition**::"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:31
#: include/media/v4l2-mem2mem.h:66 include/media/v4l2-mem2mem.h:98
#: include/media/v4l2-mem2mem.h:144
msgid "**Members**"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:20
msgid "``device_run``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:21
msgid ""
"required. Begin the actual job (transaction) inside this callback. The job "
"does NOT have to end before this callback returns (and it will be the usual "
"case). When the job finishes, v4l2_m2m_job_finish() or "
"v4l2_m2m_buf_done_and_job_finish() has to be called."
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:26
msgid "``job_ready``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:27
msgid ""
"optional. Should return 0 if the driver does not have a job fully prepared "
"to run yet (i.e. it will not be able to finish a transaction without "
"sleeping). If not provided, it will be assumed that one source and one "
"destination buffer are all that is required for the driver to perform one "
"full transaction. This method may not sleep."
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:32
msgid "``job_abort``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:33
msgid ""
"optional. Informs the driver that it has to abort the currently running "
"transaction as soon as possible (i.e. as soon as it can stop the device "
"safely; e.g. in the next interrupt handler), even if the transaction would "
"not have been finished by then. After the driver performs the necessary "
"steps, it has to call v4l2_m2m_job_finish() or "
"v4l2_m2m_buf_done_and_job_finish() as if the transaction ended normally. "
"This function does not have to (and will usually not) wait until the device "
"enters a state when it can be stopped."
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:52
msgid "represents a queue for buffers ready to be processed"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:55
msgid "``q``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:56
msgid "pointer to struct :c:type:`vb2_queue`"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:56
msgid "``rdy_queue``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:57
msgid "List of V4L2 mem-to-mem queues"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:57
msgid "``rdy_spinlock``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:58
msgid "spin lock to protect the struct usage"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:58
msgid "``num_rdy``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:59
msgid "number of buffers ready to be processed"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:59
msgid "``buffered``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:60
msgid "is the queue buffered?"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:63
#: include/media/v4l2-mem2mem.h:104 include/media/v4l2-mem2mem.h:166
#: include/media/v4l2-mem2mem.h:190 include/media/v4l2-mem2mem.h:210
#: include/media/v4l2-mem2mem.h:269 include/media/v4l2-mem2mem.h:298
#: include/media/v4l2-mem2mem.h:320 include/media/v4l2-mem2mem.h:330
#: include/media/v4l2-mem2mem.h:353 include/media/v4l2-mem2mem.h:480
#: include/media/v4l2-mem2mem.h:495 include/media/v4l2-mem2mem.h:515
#: include/media/v4l2-mem2mem.h:544 include/media/v4l2-mem2mem.h:556
#: include/media/v4l2-mem2mem.h:579 include/media/v4l2-mem2mem.h:589
#: include/media/v4l2-mem2mem.h:848
msgid "**Description**"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:60
msgid ""
"Queue for buffers ready to be processed as soon as this instance receives "
"access to the device."
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:75
msgid "Memory to memory context structure"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:77
msgid "``q_lock``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:78
msgid "struct :c:type:`mutex` lock"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:78
msgid "``new_frame``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:79
msgid ""
"valid in the device_run callback: if true, then this starts a new frame; if "
"false, then this is a new slice for an existing frame. This is always true "
"unless V4L2_BUF_CAP_SUPPORTS_M2M_HOLD_CAPTURE_BUF is set, which indicates "
"slicing support."
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:83
msgid "``is_draining``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:84
msgid "indicates device is in draining phase"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:84
msgid "``last_src_buf``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:85
msgid "indicate the last source buffer for draining"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:85
msgid "``next_buf_last``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:86
msgid "next capture queud buffer will be tagged as last"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:86
msgid "``has_stopped``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:87
msgid "indicate the device has been stopped"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:87
msgid "``ignore_cap_streaming``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:88
msgid ""
"If true, job_ready can be called even if the CAPTURE queue is not streaming. "
"This allows firmware to analyze the bitstream header which arrives on the "
"OUTPUT queue. The driver must implement the job_ready callback correctly to "
"make sure that the requirements for actual decoding are met."
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:93
msgid "``m2m_dev``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:94
#: include/media/v4l2-mem2mem.h:147 include/media/v4l2-mem2mem.h:187
#: include/media/v4l2-mem2mem.h:206 include/media/v4l2-mem2mem.h:318
#: include/media/v4l2-mem2mem.h:328 include/media/v4l2-mem2mem.h:542
#: include/media/v4l2-mem2mem.h:551
msgid "opaque pointer to the internal data to handle M2M context"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:94
msgid "``cap_q_ctx``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:95
msgid "Capture (output to memory) queue context"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:95
msgid "``out_q_ctx``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:96
msgid "Output (input from memory) queue context"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:96
msgid "``queue``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:97
msgid "List of memory to memory contexts"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:97
msgid "``job_flags``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:98
msgid ""
"Job queue flags, used internally by v4l2-mem2mem.c: ``TRANS_QUEUED``, "
"``TRANS_RUNNING`` and ``TRANS_ABORT``."
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:99
msgid "``finished``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:100
msgid "Wait queue used to signalize when a job queue finished."
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:100
msgid "``priv``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:101
msgid "Instance private data"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:101
msgid ""
"The memory to memory context is specific to a file handle, NOT to e.g. a "
"device."
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:133
msgid "Memory to memory buffer"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:135
msgid "``vb``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:136
#: include/media/v4l2-mem2mem.h:587
msgid "pointer to struct :c:type:`vb2_v4l2_buffer`"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:136
msgid "``list``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:137
msgid "list of m2m buffers"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:144
msgid ""
"return driver private data for the currently running instance or NULL if no "
"instance is running"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:148
#: include/media/v4l2-mem2mem.h:156 include/media/v4l2-mem2mem.h:165
#: include/media/v4l2-mem2mem.h:188 include/media/v4l2-mem2mem.h:206
#: include/media/v4l2-mem2mem.h:239 include/media/v4l2-mem2mem.h:252
#: include/media/v4l2-mem2mem.h:265 include/media/v4l2-mem2mem.h:280
#: include/media/v4l2-mem2mem.h:292 include/media/v4l2-mem2mem.h:310
#: include/media/v4l2-mem2mem.h:319 include/media/v4l2-mem2mem.h:330
#: include/media/v4l2-mem2mem.h:341 include/media/v4l2-mem2mem.h:351
#: include/media/v4l2-mem2mem.h:363 include/media/v4l2-mem2mem.h:374
#: include/media/v4l2-mem2mem.h:385 include/media/v4l2-mem2mem.h:396
#: include/media/v4l2-mem2mem.h:407 include/media/v4l2-mem2mem.h:418
#: include/media/v4l2-mem2mem.h:428 include/media/v4l2-mem2mem.h:438
#: include/media/v4l2-mem2mem.h:448 include/media/v4l2-mem2mem.h:458
#: include/media/v4l2-mem2mem.h:468 include/media/v4l2-mem2mem.h:478
#: include/media/v4l2-mem2mem.h:493 include/media/v4l2-mem2mem.h:515
#: include/media/v4l2-mem2mem.h:544 include/media/v4l2-mem2mem.h:553
#: include/media/v4l2-mem2mem.h:579 include/media/v4l2-mem2mem.h:588
#: include/media/v4l2-mem2mem.h:599 include/media/v4l2-mem2mem.h:618
#: include/media/v4l2-mem2mem.h:637 include/media/v4l2-mem2mem.h:644
#: include/media/v4l2-mem2mem.h:656 include/media/v4l2-mem2mem.h:668
#: include/media/v4l2-mem2mem.h:675 include/media/v4l2-mem2mem.h:687
#: include/media/v4l2-mem2mem.h:699 include/media/v4l2-mem2mem.h:709
#: include/media/v4l2-mem2mem.h:718 include/media/v4l2-mem2mem.h:729
#: include/media/v4l2-mem2mem.h:740 include/media/v4l2-mem2mem.h:751
#: include/media/v4l2-mem2mem.h:762 include/media/v4l2-mem2mem.h:770
#: include/media/v4l2-mem2mem.h:782 include/media/v4l2-mem2mem.h:794
#: include/media/v4l2-mem2mem.h:804 include/media/v4l2-mem2mem.h:817
#: include/media/v4l2-mem2mem.h:845
msgid "**Parameters**"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:150
#: include/media/v4l2-mem2mem.h:190 include/media/v4l2-mem2mem.h:208
#: include/media/v4l2-mem2mem.h:321 include/media/v4l2-mem2mem.h:332
#: include/media/v4l2-mem2mem.h:546 include/media/v4l2-mem2mem.h:555
msgid "``struct v4l2_m2m_dev *m2m_dev``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:152
msgid "return vb2_queue for the given type"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:158
#: include/media/v4l2-mem2mem.h:167 include/media/v4l2-mem2mem.h:189
#: include/media/v4l2-mem2mem.h:208 include/media/v4l2-mem2mem.h:241
#: include/media/v4l2-mem2mem.h:254 include/media/v4l2-mem2mem.h:267
#: include/media/v4l2-mem2mem.h:282 include/media/v4l2-mem2mem.h:294
#: include/media/v4l2-mem2mem.h:312 include/media/v4l2-mem2mem.h:341
#: include/media/v4l2-mem2mem.h:351 include/media/v4l2-mem2mem.h:364
#: include/media/v4l2-mem2mem.h:375 include/media/v4l2-mem2mem.h:386
#: include/media/v4l2-mem2mem.h:397 include/media/v4l2-mem2mem.h:408
#: include/media/v4l2-mem2mem.h:418 include/media/v4l2-mem2mem.h:428
#: include/media/v4l2-mem2mem.h:440 include/media/v4l2-mem2mem.h:450
#: include/media/v4l2-mem2mem.h:458 include/media/v4l2-mem2mem.h:468
#: include/media/v4l2-mem2mem.h:478 include/media/v4l2-mem2mem.h:493
#: include/media/v4l2-mem2mem.h:581 include/media/v4l2-mem2mem.h:590
#: include/media/v4l2-mem2mem.h:601 include/media/v4l2-mem2mem.h:620
#: include/media/v4l2-mem2mem.h:646 include/media/v4l2-mem2mem.h:658
#: include/media/v4l2-mem2mem.h:677 include/media/v4l2-mem2mem.h:689
#: include/media/v4l2-mem2mem.h:742 include/media/v4l2-mem2mem.h:753
#: include/media/v4l2-mem2mem.h:772 include/media/v4l2-mem2mem.h:784
#: include/media/v4l2-mem2mem.h:806 include/media/v4l2-mem2mem.h:819
msgid "``struct v4l2_m2m_ctx *m2m_ctx``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:154
#: include/media/v4l2-mem2mem.h:164 include/media/v4l2-mem2mem.h:188
#: include/media/v4l2-mem2mem.h:207 include/media/v4l2-mem2mem.h:237
#: include/media/v4l2-mem2mem.h:250 include/media/v4l2-mem2mem.h:267
#: include/media/v4l2-mem2mem.h:279 include/media/v4l2-mem2mem.h:295
#: include/media/v4l2-mem2mem.h:308 include/media/v4l2-mem2mem.h:340
#: include/media/v4l2-mem2mem.h:350 include/media/v4l2-mem2mem.h:363
#: include/media/v4l2-mem2mem.h:374 include/media/v4l2-mem2mem.h:385
#: include/media/v4l2-mem2mem.h:396 include/media/v4l2-mem2mem.h:407
#: include/media/v4l2-mem2mem.h:417 include/media/v4l2-mem2mem.h:427
#: include/media/v4l2-mem2mem.h:437 include/media/v4l2-mem2mem.h:447
#: include/media/v4l2-mem2mem.h:457 include/media/v4l2-mem2mem.h:467
#: include/media/v4l2-mem2mem.h:477 include/media/v4l2-mem2mem.h:492
#: include/media/v4l2-mem2mem.h:577 include/media/v4l2-mem2mem.h:586
#: include/media/v4l2-mem2mem.h:598 include/media/v4l2-mem2mem.h:617
#: include/media/v4l2-mem2mem.h:643 include/media/v4l2-mem2mem.h:655
#: include/media/v4l2-mem2mem.h:674 include/media/v4l2-mem2mem.h:686
#: include/media/v4l2-mem2mem.h:698 include/media/v4l2-mem2mem.h:707
#: include/media/v4l2-mem2mem.h:717 include/media/v4l2-mem2mem.h:728
#: include/media/v4l2-mem2mem.h:738 include/media/v4l2-mem2mem.h:749
#: include/media/v4l2-mem2mem.h:769 include/media/v4l2-mem2mem.h:781
#: include/media/v4l2-mem2mem.h:803 include/media/v4l2-mem2mem.h:816
msgid ""
"m2m context assigned to the instance given by struct :c:type:`v4l2_m2m_ctx`"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:156
#: include/media/v4l2-mem2mem.h:419 include/media/v4l2-mem2mem.h:429
msgid "``enum v4l2_buf_type type``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:155
#: include/media/v4l2-mem2mem.h:418 include/media/v4l2-mem2mem.h:428
msgid "type of the V4L2 buffer, as defined by enum :c:type:`v4l2_buf_type`"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:161
msgid ""
"check whether an instance is ready to be added to the pending job queue and "
"add it if so."
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:165
msgid ""
"There are three basic requirements an instance has to meet to be able to "
"run: 1) at least one source buffer has to be queued, 2) at least one "
"destination buffer has to be queued, 3) streaming has to be on."
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:170
msgid ""
"If a queue is buffered (for example a decoder hardware ringbuffer that has "
"to be drained before doing streamoff), allow scheduling without v4l2 buffers "
"on that queue."
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:174
msgid ""
"There may also be additional, custom requirements. In such case the driver "
"should supply a custom callback (job_ready in v4l2_m2m_ops) that should "
"return 1 if the instance is ready. An example of the above could be an "
"instance that requires more than one src/dst buffer per transaction."
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:184
msgid "inform the framework that a job has been finished and have it clean up"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:189
msgid ""
"Called by a driver to yield back the device after it has finished with it. "
"Should be called as soon as possible after reaching a state which allows "
"other instances to take control of the device."
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:193
msgid ""
"This function has to be called only after :c:type:`v4l2_m2m_ops->device_run "
"<v4l2_m2m_ops>` callback has been called on the driver. To prevent "
"recursion, it should not be called directly from the :c:type:`v4l2_m2m_ops-"
">device_run <v4l2_m2m_ops>` callback though."
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:202
msgid ""
"return source/destination buffers with state and inform the framework that a "
"job has been finished and have it clean up"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:209
msgid "``enum vb2_buffer_state state``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:208
msgid "vb2 buffer state passed to v4l2_m2m_buf_done()."
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:209
msgid ""
"Drivers that set V4L2_BUF_CAP_SUPPORTS_M2M_HOLD_CAPTURE_BUF must use this "
"function instead of job_finish() to take held buffers into account. It is "
"optional for other drivers."
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:213
msgid ""
"This function removes the source buffer from the ready list and returns it "
"with the given state. The same is done for the destination buffer, unless it "
"is marked 'held'. In that case the buffer is kept on the ready list."
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:217
msgid "After that the job is finished (see job_finish())."
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:219
msgid ""
"This allows for multiple output buffers to be used to fill in a single "
"capture buffer. This is typically used by stateless decoders where multiple "
"e.g. H.264 slices contribute to a single decoded frame."
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:235
msgid "clear encoding/decoding state"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:248
msgid "set current encoding/decoding state as stopped"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:261
msgid ""
"return the current encoding/decoding session draining management state of "
"next queued capture buffer"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:262
msgid ""
"This last capture buffer should be tagged with V4L2_BUF_FLAG_LAST to notify "
"the end of the capture session."
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:276
msgid "return the current encoding/decoding session stopped state"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:288
msgid ""
"return the output buffer draining state in the current encoding/decoding "
"session"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:297
#: include/media/v4l2-mem2mem.h:310 include/media/v4l2-mem2mem.h:588
#: include/media/v4l2-mem2mem.h:795 include/media/v4l2-mem2mem.h:805
#: include/media/v4l2-mem2mem.h:818
msgid "``struct vb2_v4l2_buffer *vbuf``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:296
#: include/media/v4l2-mem2mem.h:309 include/media/v4l2-mem2mem.h:351
#: include/media/v4l2-mem2mem.h:364 include/media/v4l2-mem2mem.h:375
#: include/media/v4l2-mem2mem.h:386
msgid "pointer to struct :c:type:`v4l2_buffer`"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:289
msgid ""
"This will identify the last output buffer queued before a session stop was "
"required, leading to an actual encoding/decoding session stop state in the "
"encoding/decoding process after being processed."
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:306
msgid "marks the buffer with LAST flag and DONE"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:315
msgid "stop new jobs from being run and wait for current job to finish"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:319
msgid ""
"Called by a driver in the suspend hook. Stop new jobs from being run, and "
"wait for current running job to finish."
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:326
msgid "resume job running and try to run a queued job"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:329
msgid ""
"Called by a driver in the resume hook. This reverts the operation of "
"v4l2_m2m_suspend() and allows job to be run. Also try to run a queued job if "
"there is any."
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:337
msgid "multi-queue-aware REQBUFS multiplexer"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:343
#: include/media/v4l2-mem2mem.h:353 include/media/v4l2-mem2mem.h:365
#: include/media/v4l2-mem2mem.h:376 include/media/v4l2-mem2mem.h:387
#: include/media/v4l2-mem2mem.h:398 include/media/v4l2-mem2mem.h:409
#: include/media/v4l2-mem2mem.h:420 include/media/v4l2-mem2mem.h:430
#: include/media/v4l2-mem2mem.h:460 include/media/v4l2-mem2mem.h:470
#: include/media/v4l2-mem2mem.h:480 include/media/v4l2-mem2mem.h:495
msgid "``struct file *file``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:339
#: include/media/v4l2-mem2mem.h:349 include/media/v4l2-mem2mem.h:362
#: include/media/v4l2-mem2mem.h:373 include/media/v4l2-mem2mem.h:384
#: include/media/v4l2-mem2mem.h:395 include/media/v4l2-mem2mem.h:406
#: include/media/v4l2-mem2mem.h:416 include/media/v4l2-mem2mem.h:426
#: include/media/v4l2-mem2mem.h:456 include/media/v4l2-mem2mem.h:466
#: include/media/v4l2-mem2mem.h:476 include/media/v4l2-mem2mem.h:491
msgid "pointer to struct :c:type:`file`"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:342
msgid "``struct v4l2_requestbuffers *reqbufs``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:341
msgid "pointer to struct :c:type:`v4l2_requestbuffers`"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:347
msgid "multi-queue-aware QUERYBUF multiplexer"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:352
#: include/media/v4l2-mem2mem.h:365 include/media/v4l2-mem2mem.h:376
#: include/media/v4l2-mem2mem.h:387
msgid "``struct v4l2_buffer *buf``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:352
msgid "See v4l2_m2m_mmap() documentation for details."
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:359
msgid "enqueue a source or destination buffer, depending on the type"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:370
msgid "dequeue a source or destination buffer, depending on the type"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:381
msgid "prepare a source or destination buffer, depending on the type"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:392
msgid "create a source or destination buffer, depending on the type"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:398
msgid "``struct v4l2_create_buffers *create``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:397
msgid "pointer to struct :c:type:`v4l2_create_buffers`"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:403
msgid "export a source or destination buffer, depending on the type"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:409
msgid "``struct v4l2_exportbuffer *eb``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:408
msgid "pointer to struct :c:type:`v4l2_exportbuffer`"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:414
msgid "turn on streaming for a video queue"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:424
msgid "turn off streaming for a video queue"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:434
msgid ""
"update the encoding/decoding session state when a start of streaming of a "
"video queue is requested"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:439
#: include/media/v4l2-mem2mem.h:449
msgid "``struct vb2_queue *q``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:438
#: include/media/v4l2-mem2mem.h:448
msgid "queue"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:444
msgid ""
"update the encoding/decoding session state when a stop of streaming of a "
"video queue is requested"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:454
msgid "execute an encoder command"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:459
msgid "``struct v4l2_encoder_cmd *ec``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:458
msgid "pointer to the encoder command"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:464
msgid "execute a decoder command"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:469
msgid "``struct v4l2_decoder_cmd *dc``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:468
msgid "pointer to the decoder command"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:474
msgid "poll replacement, for destination buffers only"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:479
msgid "``struct poll_table_struct *wait``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:478
msgid "pointer to struct :c:type:`poll_table_struct`"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:479
msgid ""
"Call from the driver's poll() function. Will poll both queues. If a buffer "
"is available to dequeue (with dqbuf) from the source queue, this will "
"indicate that a non-blocking write can be performed, while read will be "
"returned in case of the destination queue."
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:489
msgid "source and destination queues-aware mmap multiplexer"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:494
msgid "``struct vm_area_struct *vma``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:493
msgid "pointer to struct :c:type:`vm_area_struct`"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:494
msgid ""
"Call from driver's mmap() function. Will handle mmap() for both queues "
"seamlessly for the video buffer, which will receive normal per-queue offsets "
"and proper vb2 queue pointers. The differentiation is made outside vb2 by "
"adding a predefined offset to buffers from one of the queues and subtracting "
"it before passing it back to vb2. Only drivers (and thus applications) "
"receive modified offsets."
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:511
msgid "initialize per-driver m2m data"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:517
msgid "``const struct v4l2_m2m_ops *m2m_ops``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:513
msgid "pointer to struct v4l2_m2m_ops"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:514
msgid "Usually called from driver's ``probe()`` function."
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:516
msgid "**Return**"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:517
msgid "returns an opaque pointer to the internal data to handle M2M context"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:540
msgid "cleans up and frees a m2m_dev structure"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:543
msgid "Usually called from driver's ``remove()`` function."
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:549
msgid "allocate and initialize a m2m context"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:553
msgid "``void *drv_priv``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:552
msgid "driver's instance private data"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:554
msgid ""
"``int (*queue_init)(void *priv, struct vb2_queue *src_vq, struct vb2_queue "
"*dst_vq)``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:553
msgid ""
"a callback for queue type-specific initialization function to be used for "
"initializing vb2_queues"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:555
msgid "Usually called from driver's ``open()`` function."
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:575
msgid "release m2m context"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:578
msgid "Usually called from driver's release() function."
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:584
msgid "add a buffer to the proper ready buffers list."
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:588
msgid "Call from vb2_queue_ops->ops->buf_queue, vb2_queue_ops callback."
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:595
msgid "return the number of source buffers ready for use"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:614
msgid "return the number of destination buffers ready for use"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:633
msgid "return next buffer from the list of ready buffers"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:639
#: include/media/v4l2-mem2mem.h:670 include/media/v4l2-mem2mem.h:764
#: include/media/v4l2-mem2mem.h:796
msgid "``struct v4l2_m2m_queue_ctx *q_ctx``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:635
#: include/media/v4l2-mem2mem.h:666 include/media/v4l2-mem2mem.h:761
#: include/media/v4l2-mem2mem.h:793
msgid "pointer to struct **v4l2_m2m_queue_ctx**"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:640
msgid "return next source buffer from the list of ready buffers"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:652
msgid "return next destination buffer from the list of ready buffers"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:664
msgid "return last buffer from the list of ready buffers"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:671
msgid "return last source buffer from the list of ready buffers"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:683
msgid "return last destination buffer from the list of ready buffers"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:697
msgid "``v4l2_m2m_for_each_dst_buf (m2m_ctx, b)``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:695
msgid "iterate over a list of destination ready buffers"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:701
#: include/media/v4l2-mem2mem.h:711 include/media/v4l2-mem2mem.h:720
#: include/media/v4l2-mem2mem.h:731
msgid "``m2m_ctx``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:700
#: include/media/v4l2-mem2mem.h:709 include/media/v4l2-mem2mem.h:719
#: include/media/v4l2-mem2mem.h:730
msgid "``b``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:699
#: include/media/v4l2-mem2mem.h:708 include/media/v4l2-mem2mem.h:718
#: include/media/v4l2-mem2mem.h:729
msgid "current buffer of type struct v4l2_m2m_buffer"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:707
msgid "``v4l2_m2m_for_each_src_buf (m2m_ctx, b)``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:705
msgid "iterate over a list of source ready buffers"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:716
msgid "``v4l2_m2m_for_each_dst_buf_safe (m2m_ctx, b, n)``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:714
msgid "iterate over a list of destination ready buffers safely"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:720
#: include/media/v4l2-mem2mem.h:731
msgid "``n``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:719
#: include/media/v4l2-mem2mem.h:730
msgid "used as temporary storage"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:727
msgid "``v4l2_m2m_for_each_src_buf_safe (m2m_ctx, b, n)``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:725
msgid "iterate over a list of source ready buffers safely"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:736
msgid "return vb2_queue for source buffers"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:747
msgid "return vb2_queue for destination buffers"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:758
msgid "take off a buffer from the list of ready buffers and return it"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:766
msgid "take off a source buffer from the list of ready buffers and return it"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:778
msgid ""
"take off a destination buffer from the list of ready buffers and return it"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:790
msgid "take off exact buffer from the list of ready buffers"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:794
#: include/media/v4l2-mem2mem.h:804 include/media/v4l2-mem2mem.h:817
msgid "the buffer to be removed"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:800
msgid "take off exact source buffer from the list of ready buffers"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:813
msgid "take off exact destination buffer from the list of ready buffers"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:841
msgid "copy buffer metadata from the output buffer to the capture buffer"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:847
msgid "``const struct vb2_v4l2_buffer *out_vb``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:844
msgid "the output buffer that is the source of the metadata."
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:846
msgid "``struct vb2_v4l2_buffer *cap_vb``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:845
msgid "the capture buffer that will receive the metadata."
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:847
msgid "``bool copy_frame_flags``"
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:846
msgid "copy the KEY/B/PFRAME flags as well."
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:847
msgid ""
"This helper function copies the timestamp, timecode (if the TIMECODE buffer "
"flag was set), field and the TIMECODE, KEYFRAME, BFRAME, PFRAME and "
"TSTAMP_SRC_MASK flags from **out_vb** to **cap_vb**."
msgstr ""

#: ../../../driver-api/media/v4l2-mem2mem:6: include/media/v4l2-mem2mem.h:851
msgid ""
"If **copy_frame_flags** is false, then the KEYFRAME, BFRAME and PFRAME flags "
"are not copied. This is typically needed for encoders that set this bits "
"explicitly."
msgstr ""
