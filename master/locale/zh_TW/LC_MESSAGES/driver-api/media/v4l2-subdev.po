# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../driver-api/media/v4l2-subdev.rst:4
msgid "V4L2 sub-devices"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:6
msgid ""
"Many drivers need to communicate with sub-devices. These devices can do all "
"sort of tasks, but most commonly they handle audio and/or video muxing, "
"encoding or decoding. For webcams common sub-devices are sensors and camera "
"controllers."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:11
msgid ""
"Usually these are I2C devices, but not necessarily. In order to provide the "
"driver with a consistent interface to these sub-devices the :c:type:"
"`v4l2_subdev` struct (v4l2-subdev.h) was created."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:15
msgid ""
"Each sub-device driver must have a :c:type:`v4l2_subdev` struct. This struct "
"can be stand-alone for simple sub-devices or it might be embedded in a "
"larger struct if more state information needs to be stored. Usually there is "
"a low-level device struct (e.g. ``i2c_client``) that contains the device "
"data as setup by the kernel. It is recommended to store that pointer in the "
"private data of :c:type:`v4l2_subdev` using :c:func:`v4l2_set_subdevdata`. "
"That makes it easy to go from a :c:type:`v4l2_subdev` to the actual low-"
"level bus-specific device data."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:24
msgid ""
"You also need a way to go from the low-level struct to :c:type:"
"`v4l2_subdev`. For the common i2c_client struct the i2c_set_clientdata() "
"call is used to store a :c:type:`v4l2_subdev` pointer, for other buses you "
"may have to use other methods."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:29
msgid ""
"Bridges might also need to store per-subdev private data, such as a pointer "
"to bridge-specific per-subdev private data. The :c:type:`v4l2_subdev` "
"structure provides host private data for that purpose that can be accessed "
"with :c:func:`v4l2_get_subdev_hostdata` and :c:func:"
"`v4l2_set_subdev_hostdata`."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:34
msgid ""
"From the bridge driver perspective, you load the sub-device module and "
"somehow obtain the :c:type:`v4l2_subdev` pointer. For i2c devices this is "
"easy: you call ``i2c_get_clientdata()``. For other buses something similar "
"needs to be done. Helper functions exist for sub-devices on an I2C bus that "
"do most of this tricky work for you."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:40
msgid ""
"Each :c:type:`v4l2_subdev` contains function pointers that sub-device "
"drivers can implement (or leave ``NULL`` if it is not applicable). Since sub-"
"devices can do so many different things and you do not want to end up with a "
"huge ops struct of which only a handful of ops are commonly implemented, the "
"function pointers are sorted according to category and each category has its "
"own ops struct."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:46
msgid ""
"The top-level ops struct contains pointers to the category ops structs, "
"which may be NULL if the subdev driver does not support anything from that "
"category."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:49
msgid "It looks like this:"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:83
msgid ""
"The core ops are common to all subdevs, the other categories are implemented "
"depending on the sub-device. E.g. a video device is unlikely to support the "
"audio ops and vice versa."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:87
msgid ""
"This setup limits the number of function pointers while still making it easy "
"to add new ops and categories."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:90
msgid "A sub-device driver initializes the :c:type:`v4l2_subdev` struct using:"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:92
msgid ""
":c:func:`v4l2_subdev_init <v4l2_subdev_init>` (:c:type:`sd <v4l2_subdev>`, "
"&\\ :c:type:`ops <v4l2_subdev_ops>`)."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:96
msgid ""
"Afterwards you need to initialize :c:type:`sd <v4l2_subdev>`->name with a "
"unique name and set the module owner. This is done for you if you use the "
"i2c helper functions."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:100
msgid ""
"If integration with the media framework is needed, you must initialize the :"
"c:type:`media_entity` struct embedded in the :c:type:`v4l2_subdev` struct "
"(entity field) by calling :c:func:`media_entity_pads_init`, if the entity "
"has pads:"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:112
msgid ""
"The pads array must have been previously initialized. There is no need to "
"manually set the struct media_entity function and name fields, but the "
"revision field must be initialized if needed."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:116
msgid ""
"A reference to the entity will be automatically acquired/released when the "
"subdev device node (if any) is opened/closed."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:119
msgid ""
"Don't forget to cleanup the media entity before the sub-device is destroyed:"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:125
msgid ""
"If a sub-device driver implements sink pads, the subdev driver may set the "
"link_validate field in :c:type:`v4l2_subdev_pad_ops` to provide its own link "
"validation function. For every link in the pipeline, the link_validate pad "
"operation of the sink end of the link is called. In both cases the driver is "
"still responsible for validating the correctness of the format configuration "
"between sub-devices and video nodes."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:132
msgid ""
"If link_validate op is not set, the default function :c:func:"
"`v4l2_subdev_link_validate_default` is used instead. This function ensures "
"that width, height and the media bus pixel code are equal on both source and "
"sink of the link. Subdev drivers are also free to use this function to "
"perform the checks mentioned above in addition to their own checks."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:139
msgid "Subdev registration"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:141
msgid ""
"There are currently two ways to register subdevices with the V4L2 core. The "
"first (traditional) possibility is to have subdevices registered by bridge "
"drivers. This can be done when the bridge driver has the complete "
"information about subdevices connected to it and knows exactly when to "
"register them. This is typically the case for internal subdevices, like "
"video data processing units within SoCs or complex PCI(e) boards, camera "
"sensors in USB cameras or connected to SoCs, which pass information about "
"them to bridge drivers, usually in their platform data."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:150
msgid ""
"There are however also situations where subdevices have to be registered "
"asynchronously to bridge devices. An example of such a configuration is a "
"Device Tree based system where information about subdevices is made "
"available to the system independently from the bridge devices, e.g. when "
"subdevices are defined in DT as I2C device nodes. The API used in this "
"second case is described further below."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:157
msgid ""
"Using one or the other registration method only affects the probing process, "
"the run-time bridge-subdevice interaction is in both cases the same."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:161
msgid "Registering synchronous sub-devices"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:163
msgid ""
"In the **synchronous** case a device (bridge) driver needs to register the :"
"c:type:`v4l2_subdev` with the v4l2_device:"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:166
msgid ""
":c:func:`v4l2_device_register_subdev <v4l2_device_register_subdev>` (:c:type:"
"`v4l2_dev <v4l2_device>`, :c:type:`sd <v4l2_subdev>`)."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:169
msgid ""
"This can fail if the subdev module disappeared before it could be "
"registered. After this function was called successfully the subdev->dev "
"field points to the :c:type:`v4l2_device`."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:173
msgid ""
"If the v4l2_device parent device has a non-NULL mdev field, the sub-device "
"entity will be automatically registered with the media device."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:176
msgid "You can unregister a sub-device using:"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:178
msgid ""
":c:func:`v4l2_device_unregister_subdev <v4l2_device_unregister_subdev>` (:c:"
"type:`sd <v4l2_subdev>`)."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:181
msgid ""
"Afterwards the subdev module can be unloaded and :c:type:`sd <v4l2_subdev>`-"
">dev == ``NULL``."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:187
msgid "Registering asynchronous sub-devices"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:189
msgid ""
"In the **asynchronous** case subdevice probing can be invoked independently "
"of the bridge driver availability. The subdevice driver then has to verify "
"whether all the requirements for a successful probing are satisfied. This "
"can include a check for a master clock availability. If any of the "
"conditions aren't satisfied the driver might decide to return ``-"
"EPROBE_DEFER`` to request further reprobing attempts. Once all conditions "
"are met the subdevice shall be registered using the :c:func:"
"`v4l2_async_register_subdev` function. Unregistration is performed using "
"the :c:func:`v4l2_async_unregister_subdev` call. Subdevices registered this "
"way are stored in a global list of subdevices, ready to be picked up by "
"bridge drivers."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:200
msgid ""
"Drivers must complete all initialization of the sub-device before "
"registering it using :c:func:`v4l2_async_register_subdev`, including "
"enabling runtime PM. This is because the sub-device becomes accessible as "
"soon as it gets registered."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:206
msgid "Asynchronous sub-device notifiers"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:208
msgid ""
"Bridge drivers in turn have to register a notifier object. This is performed "
"using the :c:func:`v4l2_async_nf_register` call. To unregister the notifier "
"the driver has to call :c:func:`v4l2_async_nf_unregister`. Before releasing "
"memory of an unregister notifier, it must be cleaned up by calling :c:func:"
"`v4l2_async_nf_cleanup`."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:214
msgid ""
"Before registering the notifier, bridge drivers must do two things: first, "
"the notifier must be initialized using the :c:func:`v4l2_async_nf_init`.  "
"Second, bridge drivers can then begin to form a list of async connection "
"descriptors that the bridge device needs for its operation. :c:func:"
"`v4l2_async_nf_add_fwnode`, :c:func:`v4l2_async_nf_add_fwnode_remote` and :c:"
"func:`v4l2_async_nf_add_i2c`"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:221
msgid ""
"Async connection descriptors describe connections to external sub-devices "
"the drivers for which are not yet probed. Based on an async connection, a "
"media data or ancillary link may be created when the related sub-device "
"becomes available. There may be one or more async connections to a given sub-"
"device but this is not known at the time of adding the connections to the "
"notifier. Async connections are bound as matching async sub-devices are "
"found, one by one."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:229
msgid "Asynchronous sub-device notifier for sub-devices"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:231
msgid ""
"A driver that registers an asynchronous sub-device may also register an "
"asynchronous notifier. This is called an asynchronous sub-device notifier "
"and the process is similar to that of a bridge driver apart from that the "
"notifier is initialised using :c:func:`v4l2_async_subdev_nf_init` instead. A "
"sub-device notifier may complete only after the V4L2 device becomes "
"available, i.e. there's a path via async sub-devices and notifiers to a "
"notifier that is not an asynchronous sub-device notifier."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:240
msgid "Asynchronous sub-device registration helper for camera sensor drivers"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:242
msgid ""
":c:func:`v4l2_async_register_subdev_sensor` is a helper function for sensor "
"drivers registering their own async connection, but it also registers a "
"notifier and further registers async connections for lens and flash devices "
"found in firmware. The notifier for the sub-device is unregistered and "
"cleaned up with the async sub-device, using :c:func:"
"`v4l2_async_unregister_subdev`."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:249
msgid "Asynchronous sub-device notifier example"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:251
msgid ""
"These functions allocate an async connection descriptor which is of type "
"struct :c:type:`v4l2_async_connection` embedded in a driver-specific struct. "
"The &struct :c:type:`v4l2_async_connection` shall be the first member of "
"this struct:"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:275
msgid "Asynchronous sub-device notifier callbacks"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:277
msgid ""
"The V4L2 core will then use these connection descriptors to match "
"asynchronously registered subdevices to them. If a match is detected the ``."
"bound()`` notifier callback is called. After all connections have been bound "
"the .complete() callback is called. When a connection is removed from the "
"system the ``.unbind()`` method is called. All three callbacks are optional."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:283
msgid ""
"Drivers can store any type of custom data in their driver-specific :c:type:"
"`v4l2_async_connection` wrapper. If any of that data requires special "
"handling when the structure is freed, drivers must implement the ``."
"destroy()`` notifier callback. The framework will call it right before "
"freeing the :c:type:`v4l2_async_connection`."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:290
msgid "Calling subdev operations"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:292
msgid ""
"The advantage of using :c:type:`v4l2_subdev` is that it is a generic struct "
"and does not contain any knowledge about the underlying hardware. So a "
"driver might contain several subdevs that use an I2C bus, but also a subdev "
"that is controlled through GPIO pins. This distinction is only relevant when "
"setting up the device, but once the subdev is registered it is completely "
"transparent."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:298
msgid ""
"Once the subdev has been registered you can call an ops function either "
"directly:"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:305
msgid "but it is better and easier to use this macro:"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:311
msgid ""
"The macro will do the right ``NULL`` pointer checks and returns ``-ENODEV`` "
"if :c:type:`sd <v4l2_subdev>` is ``NULL``, ``-ENOIOCTLCMD`` if either :c:"
"type:`sd <v4l2_subdev>`->core or :c:type:`sd <v4l2_subdev>`->core->g_std is "
"``NULL``, or the actual result of the :c:type:`sd <v4l2_subdev>`->ops->core-"
">g_std ops."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:316
msgid "It is also possible to call all or a subset of the sub-devices:"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:322
msgid ""
"Any subdev that does not support this ops is skipped and error results are "
"ignored. If you want to check for errors use this:"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:329
msgid ""
"Any error except ``-ENOIOCTLCMD`` will exit the loop with that error. If no "
"errors (except ``-ENOIOCTLCMD``) occurred, then 0 is returned."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:332
msgid ""
"The second argument to both calls is a group ID. If 0, then all subdevs are "
"called. If non-zero, then only those whose group ID match that value will be "
"called. Before a bridge driver registers a subdev it can set :c:type:`sd "
"<v4l2_subdev>`->grp_id to whatever value it wants (it's 0 by default). This "
"value is owned by the bridge driver and the sub-device driver will never "
"modify or use it."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:339
msgid ""
"The group ID gives the bridge driver more control how callbacks are called. "
"For example, there may be multiple audio chips on a board, each capable of "
"changing the volume. But usually only one will actually be used when the "
"user want to change the volume. You can set the group ID for that subdev to "
"e.g. AUDIO_CONTROLLER and specify that as the group ID value when calling "
"``v4l2_device_call_all()``. That ensures that it will only go to the subdev "
"that needs it."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:347
msgid ""
"If the sub-device needs to notify its v4l2_device parent of an event, then "
"it can call ``v4l2_subdev_notify(sd, notification, arg)``. This macro checks "
"whether there is a ``notify()`` callback defined and returns ``-ENODEV`` if "
"not. Otherwise the result of the ``notify()`` call is returned."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:353
msgid "V4L2 sub-device userspace API"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:355
msgid ""
"Bridge drivers traditionally expose one or multiple video nodes to "
"userspace, and control subdevices through the :c:type:`v4l2_subdev_ops` "
"operations in response to video node operations. This hides the complexity "
"of the underlying hardware from applications. For complex devices, finer-"
"grained control of the device than what the video nodes offer may be "
"required. In those cases, bridge drivers that implement :ref:`the media "
"controller API <media_controller>` may opt for making the subdevice "
"operations directly accessible from userspace."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:363
msgid ""
"Device nodes named ``v4l-subdev``\\ *X* can be created in ``/dev`` to access "
"sub-devices directly. If a sub-device supports direct userspace "
"configuration it must set the ``V4L2_SUBDEV_FL_HAS_DEVNODE`` flag before "
"being registered."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:367
msgid ""
"After registering sub-devices, the :c:type:`v4l2_device` driver can create "
"device nodes for all registered sub-devices marked with "
"``V4L2_SUBDEV_FL_HAS_DEVNODE`` by calling :c:func:"
"`v4l2_device_register_subdev_nodes`. Those device nodes will be "
"automatically removed when sub-devices are unregistered."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:373
msgid "The device node handles a subset of the V4L2 API."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:375
msgid ""
"``VIDIOC_QUERYCTRL``, ``VIDIOC_QUERYMENU``, ``VIDIOC_G_CTRL``, "
"``VIDIOC_S_CTRL``, ``VIDIOC_G_EXT_CTRLS``, ``VIDIOC_S_EXT_CTRLS`` and "
"``VIDIOC_TRY_EXT_CTRLS``:"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:383
msgid ""
"The controls ioctls are identical to the ones defined in V4L2. They behave "
"identically, with the only exception that they deal only with controls "
"implemented in the sub-device. Depending on the driver, those controls can "
"be also be accessed through one (or several) V4L2 device nodes."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:389
msgid ""
"``VIDIOC_DQEVENT``, ``VIDIOC_SUBSCRIBE_EVENT`` and "
"``VIDIOC_UNSUBSCRIBE_EVENT``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:393
msgid ""
"The events ioctls are identical to the ones defined in V4L2. They behave "
"identically, with the only exception that they deal only with events "
"generated by the sub-device. Depending on the driver, those events can also "
"be reported by one (or several) V4L2 device nodes."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:398
msgid ""
"Sub-device drivers that want to use events need to set the "
"``V4L2_SUBDEV_FL_HAS_EVENTS`` :c:type:`v4l2_subdev`.flags before registering "
"the sub-device. After registration events can be queued as usual on the :c:"
"type:`v4l2_subdev`.devnode device node."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:403
msgid ""
"To properly support events, the ``poll()`` file operation is also "
"implemented."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:406
msgid "Private ioctls"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:408
msgid ""
"All ioctls not in the above list are passed directly to the sub-device "
"driver through the core::ioctl operation."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:412
msgid "Read-only sub-device userspace API"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:414
msgid ""
"Bridge drivers that control their connected subdevices through direct calls "
"to the kernel API realized by :c:type:`v4l2_subdev_ops` structure do not "
"usually want userspace to be able to change the same parameters through the "
"subdevice device node and thus do not usually register any."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:419
msgid ""
"It is sometimes useful to report to userspace the current subdevice "
"configuration through a read-only API, that does not permit applications to "
"change to the device parameters but allows interfacing to the subdevice "
"device node to inspect them."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:424
msgid ""
"For instance, to implement cameras based on computational photography, "
"userspace needs to know the detailed camera sensor configuration (in terms "
"of skipping, binning, cropping and scaling) for each supported output "
"resolution. To support such use cases, bridge drivers may expose the "
"subdevice operations to userspace through a read-only API."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:430
msgid ""
"To create a read-only device node for all the subdevices registered with the "
"``V4L2_SUBDEV_FL_HAS_DEVNODE`` set, the :c:type:`v4l2_device` driver should "
"call :c:func:`v4l2_device_register_ro_subdev_nodes`."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:434
msgid ""
"Access to the following ioctls for userspace applications is restricted on "
"sub-device device nodes registered with :c:func:"
"`v4l2_device_register_ro_subdev_nodes`."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:438
msgid ""
"``VIDIOC_SUBDEV_S_FMT``, ``VIDIOC_SUBDEV_S_CROP``, "
"``VIDIOC_SUBDEV_S_SELECTION``:"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:442
msgid ""
"These ioctls are only allowed on a read-only subdevice device node for the :"
"ref:`V4L2_SUBDEV_FORMAT_TRY <v4l2-subdev-format-whence>` formats and "
"selection rectangles."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:446
msgid ""
"``VIDIOC_SUBDEV_S_FRAME_INTERVAL``, ``VIDIOC_SUBDEV_S_DV_TIMINGS``, "
"``VIDIOC_SUBDEV_S_STD``:"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:450
msgid "These ioctls are not allowed on a read-only subdevice node."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:452
msgid ""
"In case the ioctl is not allowed, or the format to modify is set to "
"``V4L2_SUBDEV_FORMAT_ACTIVE``, the core returns a negative error code and "
"the errno variable is set to ``-EPERM``."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:457
msgid "I2C sub-device drivers"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:459
msgid ""
"Since these drivers are so common, special helper functions are available to "
"ease the use of these drivers (``v4l2-common.h``)."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:462
msgid ""
"The recommended method of adding :c:type:`v4l2_subdev` support to an I2C "
"driver is to embed the :c:type:`v4l2_subdev` struct into the state struct "
"that is created for each I2C device instance. Very simple devices have no "
"state struct and in that case you can just create a :c:type:`v4l2_subdev` "
"directly."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:467
msgid ""
"A typical state struct would look like this (where 'chipname' is replaced by "
"the name of the chip):"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:477
msgid "Initialize the :c:type:`v4l2_subdev` struct as follows:"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:483
msgid ""
"This function will fill in all the fields of :c:type:`v4l2_subdev` ensure "
"that the :c:type:`v4l2_subdev` and i2c_client both point to one another."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:486
msgid ""
"You should also add a helper inline function to go from a :c:type:"
"`v4l2_subdev` pointer to a chipname_state struct:"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:496
msgid ""
"Use this to go from the :c:type:`v4l2_subdev` struct to the ``i2c_client`` "
"struct:"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:503
msgid ""
"And this to go from an ``i2c_client`` to a :c:type:`v4l2_subdev` struct:"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:509
msgid ""
"Make sure to call :c:func:`v4l2_device_unregister_subdev`\\ (:c:type:`sd "
"<v4l2_subdev>`) when the ``remove()`` callback is called. This will "
"unregister the sub-device from the bridge driver. It is safe to call this "
"even if the sub-device was never registered."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:515
msgid ""
"You need to do this because when the bridge driver destroys the i2c adapter "
"the ``remove()`` callbacks are called of the i2c devices on that adapter. "
"After that the corresponding v4l2_subdev structures are invalid, so they "
"have to be unregistered first. Calling :c:func:"
"`v4l2_device_unregister_subdev`\\ (:c:type:`sd <v4l2_subdev>`) from the "
"``remove()`` callback ensures that this is always done correctly."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:523
msgid "The bridge driver also has some helper functions it can use:"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:530
msgid ""
"This loads the given module (can be ``NULL`` if no module needs to be "
"loaded) and calls :c:func:`i2c_new_client_device` with the given "
"``i2c_adapter`` and chip/address arguments. If all goes well, then it "
"registers the subdev with the v4l2_device."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:535
msgid ""
"You can also use the last argument of :c:func:`v4l2_i2c_new_subdev` to pass "
"an array of possible I2C addresses that it should probe. These probe "
"addresses are only used if the previous argument is 0. A non-zero argument "
"means that you know the exact i2c address so in that case no probing will "
"take place."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:540
msgid "Both functions return ``NULL`` if something went wrong."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:542
msgid ""
"Note that the chipid you pass to :c:func:`v4l2_i2c_new_subdev` is usually "
"the same as the module name. It allows you to specify a chip variant, e.g. "
"\"saa7114\" or \"saa7115\". In general though the i2c driver autodetects "
"this. The use of chipid is something that needs to be looked at more closely "
"at a later date. It differs between i2c drivers and as such can be "
"confusing. To see which chip variants are supported you can look in the i2c "
"driver code for the i2c_device_id table. This lists all the possibilities."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:550
msgid "There are one more helper function:"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:552
msgid ""
":c:func:`v4l2_i2c_new_subdev_board` uses an :c:type:`i2c_board_info` struct "
"which is passed to the i2c driver and replaces the irq, platform_data and "
"addr arguments."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:556
msgid ""
"If the subdev supports the s_config core ops, then that op is called with "
"the irq and platform_data arguments after the subdev was setup."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:559
msgid ""
"The :c:func:`v4l2_i2c_new_subdev` function will call :c:func:"
"`v4l2_i2c_new_subdev_board`, internally filling a :c:type:`i2c_board_info` "
"structure using the ``client_type`` and the ``addr`` to fill it."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:565
msgid "Centrally managed subdev active state"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:567
msgid ""
"Traditionally V4L2 subdev drivers maintained internal state for the active "
"device configuration. This is often implemented as e.g. an array of struct "
"v4l2_mbus_framefmt, one entry for each pad, and similarly for crop and "
"compose rectangles."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:572
msgid ""
"In addition to the active configuration, each subdev file handle has a "
"struct v4l2_subdev_state, managed by the V4L2 core, which contains the try "
"configuration."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:576
msgid ""
"To simplify the subdev drivers the V4L2 subdev API now optionally supports a "
"centrally managed active configuration represented by :c:type:"
"`v4l2_subdev_state`. One instance of state, which contains the active device "
"configuration, is stored in the sub-device itself as part of the :c:type:"
"`v4l2_subdev` structure, while the core associates a try state to each open "
"file handle, to store the try configuration related to that file handle."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:584
msgid ""
"Sub-device drivers can opt-in and use state to manage their active "
"configuration by initializing the subdevice state with a call to "
"v4l2_subdev_init_finalize() before registering the sub-device. They must "
"also call v4l2_subdev_cleanup() to release all the allocated resources "
"before unregistering the sub-device. The core automatically allocates and "
"initializes a state for each open file handle to store the try "
"configurations and frees it when closing the file handle."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:592
msgid ""
"V4L2 sub-device operations that use both the :ref:`ACTIVE and TRY formats "
"<v4l2-subdev-format-whence>` receive the correct state to operate on through "
"the 'state' parameter. The state must be locked and unlocked by the caller "
"by calling :c:func:`v4l2_subdev_lock_state()` and :c:func:"
"`v4l2_subdev_unlock_state()`. The caller can do so by calling the subdev "
"operation through the :c:func:`v4l2_subdev_call_state_active()` macro."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:599
msgid ""
"Operations that do not receive a state parameter implicitly operate on the "
"subdevice active state, which drivers can exclusively access by calling :c:"
"func:`v4l2_subdev_lock_and_get_active_state()`. The sub-device active state "
"must equally be released by calling :c:func:`v4l2_subdev_unlock_state()`."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:604
msgid ""
"Drivers must never manually access the state stored in the :c:type:"
"`v4l2_subdev` or in the file handle without going through the designated "
"helpers."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:607
msgid ""
"While the V4L2 core passes the correct try or active state to the subdevice "
"operations, many existing device drivers pass a NULL state when calling "
"operations with :c:func:`v4l2_subdev_call()`. This legacy construct causes "
"issues with subdevice drivers that let the V4L2 core manage the active "
"state, as they expect to receive the appropriate state as a parameter. To "
"help the conversion of subdevice drivers to a managed active state without "
"having to convert all callers at the same time, an additional wrapper layer "
"has been added to v4l2_subdev_call(), which handles the NULL case by getting "
"and locking the callee's active state with :c:func:"
"`v4l2_subdev_lock_and_get_active_state()`, and unlocking the state after the "
"call."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:618
msgid ""
"The whole subdev state is in reality split into three parts: the "
"v4l2_subdev_state, subdev controls and subdev driver's internal state. In "
"the future these parts should be combined into a single state. For the time "
"being we need a way to handle the locking for these parts. This can be "
"accomplished by sharing a lock. The v4l2_ctrl_handler already supports this "
"via its 'lock' pointer and the same model is used with states. The driver "
"can do the following before calling v4l2_subdev_init_finalize():"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:631
msgid ""
"This shares the driver's private mutex between the controls and the states."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:634
msgid "Streams, multiplexed media pads and internal routing"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:636
msgid ""
"A subdevice driver can implement support for multiplexed streams by setting "
"the V4L2_SUBDEV_FL_STREAMS subdev flag and implementing support for "
"centrally managed subdev active state, routing and stream based "
"configuration."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev.rst:642
msgid "V4L2 sub-device functions and data structures"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:44
msgid "used to decode_vbi_line"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:48
#: include/media/v4l2-subdev.h:128 include/media/v4l2-subdev.h:146
#: include/media/v4l2-subdev.h:227 include/media/v4l2-subdev.h:291
#: include/media/v4l2-subdev.h:324 include/media/v4l2-subdev.h:350
#: include/media/v4l2-subdev.h:396 include/media/v4l2-subdev.h:418
#: include/media/v4l2-subdev.h:503 include/media/v4l2-subdev.h:548
#: include/media/v4l2-subdev.h:572 include/media/v4l2-subdev.h:621
#: include/media/v4l2-subdev.h:676 include/media/v4l2-subdev.h:691
#: include/media/v4l2-subdev.h:715 include/media/v4l2-subdev.h:726
#: include/media/v4l2-subdev.h:741 include/media/v4l2-subdev.h:765
#: include/media/v4l2-subdev.h:918 include/media/v4l2-subdev.h:941
#: include/media/v4l2-subdev.h:1006 include/media/v4l2-subdev.h:1020
#: include/media/v4l2-subdev.h:1147
msgid "**Definition**::"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:57
#: include/media/v4l2-subdev.h:138 include/media/v4l2-subdev.h:170
#: include/media/v4l2-subdev.h:243 include/media/v4l2-subdev.h:300
#: include/media/v4l2-subdev.h:331 include/media/v4l2-subdev.h:362
#: include/media/v4l2-subdev.h:404 include/media/v4l2-subdev.h:437
#: include/media/v4l2-subdev.h:515 include/media/v4l2-subdev.h:555
#: include/media/v4l2-subdev.h:592 include/media/v4l2-subdev.h:632
#: include/media/v4l2-subdev.h:685 include/media/v4l2-subdev.h:703
#: include/media/v4l2-subdev.h:722 include/media/v4l2-subdev.h:734
#: include/media/v4l2-subdev.h:752 include/media/v4l2-subdev.h:795
#: include/media/v4l2-subdev.h:931 include/media/v4l2-subdev.h:952
#: include/media/v4l2-subdev.h:1014 include/media/v4l2-subdev.h:1053
#: include/media/v4l2-subdev.h:1158
msgid "**Members**"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:46
msgid "``is_second_field``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:47
msgid ""
"Set to 0 for the first (odd) field; set to 1 for the second (even) field."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:48
msgid "``p``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:49
msgid ""
"Pointer to the sliced VBI data from the decoder. On exit, points to the "
"start of the payload."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:50
msgid "``line``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:51
msgid "Line number of the sliced VBI data (1-23)"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:51
#: include/media/v4l2-subdev.h:393
msgid "``type``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:52
msgid "VBI service type (V4L2_SLICED_*). 0 if no service found"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:104
msgid "Subdevice external IO pin configuration bits"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:108
#: include/media/v4l2-subdev.h:335 include/media/v4l2-subdev.h:378
#: include/media/v4l2-subdev.h:408 include/media/v4l2-subdev.h:563
#: include/media/v4l2-subdev.h:1611
msgid "**Constants**"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:110
msgid "``V4L2_SUBDEV_IO_PIN_DISABLE``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:111
msgid "disables a pin config. ENABLE assumed."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:113
msgid "``V4L2_SUBDEV_IO_PIN_OUTPUT``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:114
msgid "set it if pin is an output."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:116
msgid "``V4L2_SUBDEV_IO_PIN_INPUT``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:117
msgid "set it if pin is an input."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:119
msgid "``V4L2_SUBDEV_IO_PIN_SET_VALUE``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:120
msgid ""
"to set the output value via :c:type:`struct v4l2_subdev_io_pin_config "
"<v4l2_subdev_io_pin_config>`->value."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:123
msgid "``V4L2_SUBDEV_IO_PIN_ACTIVE_LOW``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:124
msgid "pin active is bit 0. Otherwise, ACTIVE HIGH is assumed."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:124
msgid "Subdevice external IO pin configuration"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:126
#: include/media/v4l2-subdev.h:348 include/media/v4l2-subdev.h:1023
msgid "``flags``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:127
msgid ""
"bitmask with flags for this pin's config, whose bits are defined by :c:type:"
"`enum v4l2_subdev_io_pin_bits <v4l2_subdev_io_pin_bits>`."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:128
msgid "``pin``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:129
msgid "Chip external IO pin to configure"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:129
msgid "``function``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:130
msgid "Internal signal pad/function to route to IO pin"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:130
msgid "``value``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:131
msgid "Initial value for pin - e.g. GPIO output value"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:131
msgid "``strength``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:132
msgid "Pin drive strength"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:142
msgid "Define core ops callbacks for subdevs"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:144
msgid "``log_status``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:145
msgid "callback for VIDIOC_LOG_STATUS() ioctl handler code."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:146
msgid "``s_io_pin_config``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:147
msgid ""
"configure one or more chip I/O pins for chips that multiplex different "
"internal signal pads out to IO pins.  This function takes a pointer to an "
"array of 'n' pin configuration entries, one for each pin being configured.  "
"This function could be called at times other than just subdevice "
"initialization."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:152
msgid "``init``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:153
msgid ""
"initialize the sensor registers to some sort of reasonable default values. "
"Do not use for new drivers and should be removed in existing drivers."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:156
msgid "``load_fw``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:157
msgid "load firmware."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:158
msgid "``reset``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:159
msgid ""
"generic reset command. The argument selects which subsystems to reset. "
"Passing 0 will always reset the whole chip. Do not use for new drivers "
"without discussing this first on the linux-media mailinglist. There should "
"be no reason normally to reset a device."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:163
msgid "``s_gpio``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:164
msgid ""
"set GPIO pins. Very simple right now, might need to be extended with a "
"direction argument if needed."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:166
msgid "``command``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:167
msgid ""
"called by in-kernel drivers in order to call functions internal to subdev "
"drivers driver that have a separate callback."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:169
msgid "``ioctl``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:170
msgid ""
"called at the end of ioctl() syscall handler at the V4L2 core. used to "
"provide support for private ioctls used on the driver."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:172
msgid "``compat_ioctl32``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:173
msgid ""
"called when a 32 bits application uses a 64 bits Kernel, in order to fix "
"data passed from/to userspace."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:175
msgid "``g_register``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:176
msgid "callback for VIDIOC_DBG_G_REGISTER() ioctl handler code."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:177
msgid "``s_register``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:178
msgid "callback for VIDIOC_DBG_S_REGISTER() ioctl handler code."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:179
msgid "``s_power``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:180
msgid ""
"puts subdevice in power saving mode (on == 0) or normal operation mode (on "
"== 1). DEPRECATED. See Documentation/driver-api/media/camera-sensor.rst . "
"pre_streamon and post_streamoff callbacks can be used for e.g. setting the "
"bus to LP-11 mode before s_stream is called."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:185
msgid "``interrupt_service_routine``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:186
msgid ""
"Called by the bridge chip's interrupt service handler, when an interrupt "
"status has be raised due to this subdev, so that this subdev can handle the "
"details.  It may schedule work to be performed later.  It must not sleep. "
"**Called from an IRQ context**."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:190
msgid "``subscribe_event``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:191
msgid ""
"used by the drivers to request the control framework that for it to be "
"warned when the value of a control changes."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:193
msgid "``unsubscribe_event``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:194
msgid "remove event subscription from the control framework."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:223
msgid "Callbacks used when v4l device was opened in radio mode."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:226
msgid "``standby``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:227
msgid ""
"puts the tuner in standby mode. It will be woken up automatically the next "
"time it is used."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:229
msgid "``s_radio``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:230
msgid ""
"callback that switches the tuner to radio mode. drivers should explicitly "
"call it when a tuner ops should operate on radio mode, before being able to "
"handle it. Used on devices that have both AM/FM radio receiver and TV."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:234
msgid "``s_frequency``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:235
msgid "callback for VIDIOC_S_FREQUENCY() ioctl handler code."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:236
msgid "``g_frequency``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:237
msgid ""
"callback for VIDIOC_G_FREQUENCY() ioctl handler code. freq->type must be "
"filled in. Normally done by video_ioctl2() or the bridge driver."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:240
msgid "``enum_freq_bands``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:241
msgid "callback for VIDIOC_ENUM_FREQ_BANDS() ioctl handler code."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:242
msgid "``g_tuner``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:243
msgid "callback for VIDIOC_G_TUNER() ioctl handler code."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:244
msgid "``s_tuner``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:245
msgid ""
"callback for VIDIOC_S_TUNER() ioctl handler code. **vt->type** must be "
"filled in. Normally done by video_ioctl2 or the bridge driver."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:248
msgid "``g_modulator``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:249
msgid "callback for VIDIOC_G_MODULATOR() ioctl handler code."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:250
msgid "``s_modulator``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:251
msgid "callback for VIDIOC_S_MODULATOR() ioctl handler code."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:252
msgid "``s_type_addr``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:253
msgid "sets tuner type and its I2C addr."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:254
msgid "``s_config``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:255
msgid "sets tda9887 specific stuff, like port1, port2 and qss"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:258
#: include/media/v4l2-subdev.h:482 include/media/v4l2-subdev.h:699
#: include/media/v4l2-subdev.h:730 include/media/v4l2-subdev.h:748
#: include/media/v4l2-subdev.h:848 include/media/v4l2-subdev.h:963
#: include/media/v4l2-subdev.h:1069 include/media/v4l2-subdev.h:1186
#: include/media/v4l2-subdev.h:1209 include/media/v4l2-subdev.h:1225
#: include/media/v4l2-subdev.h:1243 include/media/v4l2-subdev.h:1256
#: include/media/v4l2-subdev.h:1277 include/media/v4l2-subdev.h:1295
#: include/media/v4l2-subdev.h:1308 include/media/v4l2-subdev.h:1316
#: include/media/v4l2-subdev.h:1341 include/media/v4l2-subdev.h:1370
#: include/media/v4l2-subdev.h:1405 include/media/v4l2-subdev.h:1427
#: include/media/v4l2-subdev.h:1449 include/media/v4l2-subdev.h:1473
#: include/media/v4l2-subdev.h:1490 include/media/v4l2-subdev.h:1508
#: include/media/v4l2-subdev.h:1539 include/media/v4l2-subdev.h:1555
#: include/media/v4l2-subdev.h:1574 include/media/v4l2-subdev.h:1591
#: include/media/v4l2-subdev.h:1659 include/media/v4l2-subdev.h:1673
#: include/media/v4l2-subdev.h:1705 include/media/v4l2-subdev.h:1737
#: include/media/v4l2-subdev.h:1756 include/media/v4l2-subdev.h:1769
#: include/media/v4l2-subdev.h:1781 include/media/v4l2-subdev.h:1803
#: include/media/v4l2-subdev.h:1821 include/media/v4l2-subdev.h:1842
#: include/media/v4l2-subdev.h:1862 include/media/v4l2-subdev.h:1929
#: include/media/v4l2-subdev.h:1959 include/media/v4l2-subdev.h:1996
#: include/media/v4l2-subdev.h:2008
msgid "**Description**"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:257
msgid ""
"On devices that have both AM/FM and TV, it is up to the driver to explicitly "
"call s_radio when the tuner should be switched to radio mode, before "
"handling other :c:type:`struct v4l2_subdev_tuner_ops "
"<v4l2_subdev_tuner_ops>` that would require it. An example of such usage is::"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:287
msgid "Callbacks used for audio-related settings"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:289
msgid "``s_clock_freq``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:290
msgid ""
"set the frequency (in Hz) of the audio clock output. Used to slave an audio "
"processor to the video decoder, ensuring that audio and video remain "
"synchronized. Usual values for the frequency are 48000, 44100 or 32000 Hz. "
"If the frequency is not supported, then -EINVAL is returned."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:295
msgid "``s_i2s_clock_freq``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:296
msgid ""
"sets I2S speed in bps. This is used to provide a standard way to select I2S "
"clock used by driving digital audio streams at some board designs. Usual "
"values for the frequency are 1024000 and 2048000. If the frequency is not "
"supported, then ``-EINVAL`` is returned."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:300
#: include/media/v4l2-subdev.h:417
msgid "``s_routing``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:301
msgid ""
"used to define the input and/or output pins of an audio chip, and any "
"additional configuration data. Never attempt to use user-level input IDs (e."
"g. Composite, S-Video, Tuner) at this level. An i2c device shouldn't know "
"about whether an input pin is connected to a Composite connector, become on "
"another board or platform it might be connected to something else entirely. "
"The calling driver is responsible for mapping a user-level input to the "
"right pins on the i2c device."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:309
#: include/media/v4l2-subdev.h:446
msgid "``s_stream``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:310
msgid "used to notify the audio code that stream will start or has stopped."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:322
msgid "``vc``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:323
msgid "CSI-2 virtual channel"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:323
msgid "``dt``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:324
msgid "CSI-2 data type ID"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:331
msgid "media bus frame description flags"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:337
msgid "``V4L2_MBUS_FRAME_DESC_FL_LEN_MAX``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:338
msgid ""
"Indicates that :c:type:`struct v4l2_mbus_frame_desc_entry "
"<v4l2_mbus_frame_desc_entry>`->length field specifies maximum data length."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:341
msgid "``V4L2_MBUS_FRAME_DESC_FL_BLOB``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:342
msgid ""
"Indicates that the format does not have line offsets, i.e. the receiver "
"should use 1D DMA."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:346
msgid "media bus frame description structure"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:349
msgid ""
"bitmask flags, as defined by :c:type:`enum v4l2_mbus_frame_desc_flags "
"<v4l2_mbus_frame_desc_flags>`."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:349
#: include/media/v4l2-subdev.h:690
msgid "``stream``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:350
msgid "stream in routing configuration"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:350
msgid "``pixelcode``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:351
msgid ""
"media bus pixel code, valid if **flags** ``FRAME_DESC_FL_BLOB`` is not set."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:352
msgid "``length``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:353
msgid ""
"number of octets per frame, valid if **flags** "
"``V4L2_MBUS_FRAME_DESC_FL_LEN_MAX`` is set."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:354
msgid "``bus``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:355
msgid "Bus-specific frame descriptor parameters"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:355
msgid "``bus.csi2``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:356
msgid "CSI-2-specific bus configuration"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:374
msgid "media bus frame description type"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:380
msgid "``V4L2_MBUS_FRAME_DESC_TYPE_UNDEFINED``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:381
msgid ""
"Undefined frame desc type. Drivers should not use this, it is for backwards "
"compatibility."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:384
msgid "``V4L2_MBUS_FRAME_DESC_TYPE_PARALLEL``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:385
msgid "Parallel media bus."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:387
msgid "``V4L2_MBUS_FRAME_DESC_TYPE_CSI2``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:388
msgid ""
"CSI-2 media bus. Frame desc parameters must be set in :c:type:`struct "
"v4l2_mbus_frame_desc_entry <v4l2_mbus_frame_desc_entry>`->csi2."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:392
msgid "media bus data frame description"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:394
msgid "type of the bus (enum v4l2_mbus_frame_desc_type)"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:394
msgid "``entry``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:395
msgid "frame descriptors array"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:395
msgid "``num_entries``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:396
msgid "number of entries in **entry** array"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:404
msgid "Flags for pre_streamon subdev core op"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:410
msgid "``V4L2_SUBDEV_PRE_STREAMON_FL_MANUAL_LP``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:411
msgid ""
"Set the transmitter to either LP-11 or LP-111 mode before call to s_stream()."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:414
msgid "Callbacks used when v4l device was opened in video mode."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:418
msgid "see s_routing in audio_ops, except this version is for video devices."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:420
msgid "``s_crystal_freq``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:421
msgid ""
"sets the frequency of the crystal used to generate the clocks in Hz. An "
"extra flags field allows device specific configuration regarding clock "
"frequency dividers, etc. If not used, then set flags to 0. If the frequency "
"is not supported, then -EINVAL is returned."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:425
msgid "``g_std``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:426
msgid "callback for VIDIOC_G_STD() ioctl handler code."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:427
msgid "``s_std``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:428
msgid "callback for VIDIOC_S_STD() ioctl handler code."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:429
msgid "``s_std_output``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:430
msgid ""
"set v4l2_std_id for video OUTPUT devices. This is ignored by video input "
"devices."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:432
msgid "``g_std_output``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:433
msgid ""
"get current standard for video OUTPUT devices. This is ignored by video "
"input devices."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:435
msgid "``querystd``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:436
msgid "callback for VIDIOC_QUERYSTD() ioctl handler code."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:437
msgid "``g_tvnorms``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:438
msgid ""
"get :c:type:`v4l2_std_id` with all standards supported by the video CAPTURE "
"device. This is ignored by video output devices."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:440
msgid "``g_tvnorms_output``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:441
msgid ""
"get v4l2_std_id with all standards supported by the video OUTPUT device. "
"This is ignored by video capture devices."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:443
msgid "``g_input_status``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:444
msgid ""
"get input status. Same as the status field in the :c:type:`struct v4l2_input "
"<v4l2_input>`"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:447
msgid ""
"start (enabled == 1) or stop (enabled == 0) streaming on the sub-device. "
"Failure on stop will remove any resources acquired in streaming start, while "
"the error code is still returned by the driver. The caller shall track the "
"subdev state, and shall not start or stop an already started or stopped "
"subdev. Also see call_s_stream wrapper in v4l2-subdev.c."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:463
msgid "``s_rx_buffer``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:464
msgid ""
"set a host allocated memory buffer for the subdev. The subdev can adjust "
"**size** to a lower value and must not write more data to the buffer "
"starting at **data** than the original value of **size**."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:467
msgid "``pre_streamon``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:468
msgid ""
"May be called before streaming is actually started, to help initialising the "
"bus. Current usage is to set a CSI-2 transmitter to LP-11 or LP-111 mode "
"before streaming. See :c:type:`enum v4l2_subdev_pre_streamon_flags "
"<v4l2_subdev_pre_streamon_flags>`."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:477
msgid "``post_streamoff``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:478
msgid ""
"Called after streaming is stopped, but if and only if pre_streamon was "
"called earlier."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:452
msgid ""
"This callback is DEPRECATED. New drivers should instead implement :c:type:"
"`v4l2_subdev_pad_ops.enable_streams <v4l2_subdev_pad_ops>` and :c:type:"
"`v4l2_subdev_pad_ops.disable_streams <v4l2_subdev_pad_ops>` operations, and "
"use v4l2_subdev_s_stream_helper for the :c:type:`v4l2_subdev_video_ops."
"s_stream <v4l2_subdev_video_ops>` operation to support legacy users."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:458
msgid ""
"Drivers should also not call the .s_stream() subdev operation directly, but "
"use the v4l2_subdev_enable_streams() and v4l2_subdev_disable_streams() "
"helpers."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:463
msgid ""
"pre_streamon shall return error if it cannot perform the operation as "
"indicated by the flags argument. In particular, -EACCES indicates lack of "
"support for the operation. The caller shall call post_streamoff for each "
"successful call of pre_streamon."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:499
msgid ""
"Callbacks used when v4l device was opened in video mode via the vbi device "
"node."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:502
msgid "``decode_vbi_line``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:503
msgid ""
"video decoders that support sliced VBI need to implement this ioctl. Field p "
"of the :c:type:`struct v4l2_decode_vbi_line <v4l2_decode_vbi_line>` is set "
"to the start of the VBI data that was generated by the decoder. The driver "
"then parses the sliced VBI data and sets the other fields in the struct "
"accordingly. The pointer p is updated to point to the start of the payload "
"which can be copied verbatim into the data field of the :c:type:`struct "
"v4l2_sliced_vbi_data <v4l2_sliced_vbi_data>`. If no valid VBI data was "
"found, then the type field is set to 0 on return."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:511
msgid "``s_vbi_data``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:512
msgid ""
"used to generate VBI signals on a video signal. :c:type:`struct "
"v4l2_sliced_vbi_data <v4l2_sliced_vbi_data>` is filled with the data packets "
"that should be output. Note that if you set the line field to 0, then that "
"VBI signal is disabled. If no valid VBI data was found, then the type field "
"is set to 0 on return."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:517
msgid "``g_vbi_data``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:518
msgid ""
"used to obtain the sliced VBI packet from a readback register. Not all video "
"decoders support this. If no data is available because the readback register "
"contains invalid or erroneous data ``-EIO`` is returned. Note that you must "
"fill in the 'id' member and the 'field' member (to determine whether CC data "
"from the first or second field should be obtained)."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:524
msgid "``g_sliced_vbi_cap``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:525
msgid "callback for VIDIOC_G_SLICED_VBI_CAP() ioctl handler code."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:527
msgid "``s_raw_fmt``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:528
msgid "setup the video encoder/decoder for raw VBI."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:529
msgid "``g_sliced_fmt``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:530
msgid "retrieve the current sliced VBI settings."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:531
msgid "``s_sliced_fmt``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:532
msgid "setup the sliced VBI settings."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:544
msgid "v4l2-subdev sensor operations"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:545
msgid "``g_skip_top_lines``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:546
msgid ""
"number of lines at the top of the image to be skipped. This is needed for "
"some sensors, which always corrupt several top lines of the output image, or "
"which send their metadata in them."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:549
msgid "``g_skip_frames``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:550
msgid ""
"number of frames to skip at stream start. This is needed for buggy sensors "
"that generate faulty frames when they are turned on."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:559
msgid "describes the type of IR supported"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:565
msgid "``V4L2_SUBDEV_IR_MODE_PULSE_WIDTH``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:566
msgid "IR uses struct ir_raw_event records"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:568
msgid "Parameters for IR TX or TX"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:570
msgid "``bytes_per_data_element``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:571
msgid "bytes per data element of data in read or write call."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:572
msgid "``mode``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:573
msgid ""
"IR mode as defined by :c:type:`enum v4l2_subdev_ir_mode "
"<v4l2_subdev_ir_mode>`."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:573
msgid "``enable``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:574
msgid "device is active if true"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:574
msgid "``interrupt_enable``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:575
msgid "IR interrupts are enabled if true"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:575
msgid "``shutdown``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:576
msgid "if true: set hardware to low/no power, false: normal mode"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:577
msgid "``modulation``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:578
msgid "if true, it uses carrier, if false: baseband"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:578
msgid "``max_pulse_width``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:579
msgid "maximum pulse width in ns, valid only for baseband signal"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:579
msgid "``carrier_freq``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:580
msgid "carrier frequency in Hz, valid only for modulated signal"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:580
msgid "``duty_cycle``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:581
msgid "duty cycle percentage, valid only for modulated signal"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:581
msgid "``invert_level``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:582
msgid "invert signal level"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:583
msgid "``invert_carrier_sense``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:584
msgid "Send 0/space as a carrier burst. used only in TX."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:585
msgid "``noise_filter_min_width``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:586
msgid "min time of a valid pulse, in ns. Used only for RX."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:586
msgid "``carrier_range_lower``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:587
msgid ""
"Lower carrier range, in Hz, valid only for modulated signal. Used only for "
"RX."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:588
msgid "``carrier_range_upper``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:589
msgid ""
"Upper carrier range, in Hz, valid only for modulated signal. Used only for "
"RX."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:590
msgid "``resolution``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:591
msgid "The receive resolution, in ns . Used only for RX."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:617
msgid "operations for IR subdevices"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:619
msgid "``rx_read``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:620
msgid ""
"Reads received codes or pulse width data. The semantics are similar to a non-"
"blocking read() call."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:621
msgid "``rx_g_parameters``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:622
msgid "Get the current operating parameters and state of the IR receiver."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:623
msgid "``rx_s_parameters``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:624
msgid ""
"Set the current operating parameters and state of the IR receiver.  It is "
"recommended to call [rt]x_g_parameters first to fill out the current state, "
"and only change the fields that need to be changed.  Upon return, the actual "
"device operating parameters and state will be returned.  Note that hardware "
"limitations may prevent the actual settings from matching the requested "
"settings - e.g. an actual carrier setting of 35,904 Hz when 36,000 Hz was "
"requested.  An exception is when the shutdown parameter is true. The last "
"used operational parameters will be returned, but the actual state of the "
"hardware be different to minimize power consumption and processing when "
"shutdown is true."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:635
msgid "``tx_write``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:636
msgid ""
"Writes codes or pulse width data for transmission. The semantics are similar "
"to a non-blocking write() call."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:637
msgid "``tx_g_parameters``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:638
msgid "Get the current operating parameters and state of the IR transmitter."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:639
msgid "``tx_s_parameters``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:640
msgid ""
"Set the current operating parameters and state of the IR transmitter.  It is "
"recommended to call [rt]x_g_parameters first to fill out the current state, "
"and only change the fields that need to be changed.  Upon return, the actual "
"device operating parameters and state will be returned.  Note that hardware "
"limitations may prevent the actual settings from matching the requested "
"settings - e.g. an actual carrier setting of 35,904 Hz when 36,000 Hz was "
"requested.  An exception is when the shutdown parameter is true. The last "
"used operational parameters will be returned, but the actual state of the "
"hardware be different to minimize power consumption and processing when "
"shutdown is true."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:672
msgid "Used for storing subdev pad information."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:674
msgid "``format``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:675
#: include/media/v4l2-subdev.h:693
msgid ":c:type:`struct v4l2_mbus_framefmt <v4l2_mbus_framefmt>`"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:675
#: include/media/v4l2-subdev.h:693
msgid "``crop``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:676
#: include/media/v4l2-subdev.h:694
msgid ":c:type:`struct v4l2_rect <v4l2_rect>` to be used for crop"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:676
#: include/media/v4l2-subdev.h:694
msgid "``compose``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:677
#: include/media/v4l2-subdev.h:695
msgid ":c:type:`struct v4l2_rect <v4l2_rect>` to be used for compose"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:677
#: include/media/v4l2-subdev.h:695
msgid "``interval``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:678
#: include/media/v4l2-subdev.h:696
msgid "frame interval"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:687
msgid "Used for storing stream configuration."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:689
#: include/media/v4l2-subdev.h:923 include/media/v4l2-subdev.h:1368
#: include/media/v4l2-subdev.h:1403 include/media/v4l2-subdev.h:1425
#: include/media/v4l2-subdev.h:1447
msgid "``pad``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:690
msgid "pad number"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:691
msgid "stream number"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:691
msgid "``enabled``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:692
msgid "has the stream been enabled with v4l2_subdev_enable_streams()"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:692
msgid "``fmt``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:696
msgid "This structure stores configuration for a stream."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:711
msgid "A collection of stream configs."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:713
msgid "``num_configs``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:714
msgid "number of entries in **config**."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:714
msgid "``configs``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:715
msgid ""
"an array of :c:type:`struct v4l2_subdev_stream_configs "
"<v4l2_subdev_stream_configs>`."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:722
msgid "subdev routing table"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:724
msgid "``len_routes``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:725
msgid "length of routes array, in routes"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:725
msgid "``num_routes``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:726
msgid "number of routes"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:726
msgid "``routes``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:727
msgid ":c:type:`struct v4l2_subdev_route <v4l2_subdev_route>`"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:727
msgid "This structure contains the routing table for a subdev."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:737
msgid "Used for storing subdev state information."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:739
msgid "``_lock``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:740
msgid "default for 'lock'"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:740
msgid "``lock``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:741
msgid "mutex for the state. May be replaced by the user."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:741
#: include/media/v4l2-subdev.h:1319 include/media/v4l2-subdev.h:1893
#: include/media/v4l2-subdev.h:1923 include/media/v4l2-subdev.h:1953
#: include/media/v4l2-subdev.h:1987
msgid "``sd``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:742
msgid "the sub-device which the state is related to"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:742
msgid "``pads``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:743
msgid ":c:type:`struct v4l2_subdev_pad_config <v4l2_subdev_pad_config>` array"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:743
#: include/media/v4l2-subdev.h:1529
msgid "``routing``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:744
msgid "routing table for the subdev"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:744
msgid "``stream_configs``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:745
msgid "stream configurations (only for V4L2_SUBDEV_FL_STREAMS)"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:745
msgid ""
"This structure only needs to be passed to the pad op if the 'which' field of "
"the main argument is set to ``V4L2_SUBDEV_FORMAT_TRY``. For "
"``V4L2_SUBDEV_FORMAT_ACTIVE`` it is safe to pass ``NULL``."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:761
msgid "v4l2-subdev pad level operations"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:763
msgid "``enum_mbus_code``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:764
msgid "callback for VIDIOC_SUBDEV_ENUM_MBUS_CODE() ioctl handler code."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:765
msgid "``enum_frame_size``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:766
msgid "callback for VIDIOC_SUBDEV_ENUM_FRAME_SIZE() ioctl handler code."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:768
msgid "``enum_frame_interval``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:769
msgid "callback for VIDIOC_SUBDEV_ENUM_FRAME_INTERVAL() ioctl handler code."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:771
msgid "``get_fmt``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:772
msgid "callback for VIDIOC_SUBDEV_G_FMT() ioctl handler code."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:773
msgid "``set_fmt``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:774
msgid "callback for VIDIOC_SUBDEV_S_FMT() ioctl handler code."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:775
msgid "``get_selection``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:776
msgid "callback for VIDIOC_SUBDEV_G_SELECTION() ioctl handler code."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:777
msgid "``set_selection``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:778
msgid "callback for VIDIOC_SUBDEV_S_SELECTION() ioctl handler code."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:779
msgid "``get_frame_interval``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:780
msgid "callback for VIDIOC_SUBDEV_G_FRAME_INTERVAL() ioctl handler code."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:782
msgid "``set_frame_interval``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:783
msgid "callback for VIDIOC_SUBDEV_S_FRAME_INTERVAL() ioctl handler code."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:785
msgid "``get_edid``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:786
msgid "callback for VIDIOC_SUBDEV_G_EDID() ioctl handler code."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:787
msgid "``set_edid``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:788
msgid "callback for VIDIOC_SUBDEV_S_EDID() ioctl handler code."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:789
msgid "``s_dv_timings``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:790
msgid ""
"Set custom dv timings in the sub device. This is used when sub device is "
"capable of setting detailed timing information in the hardware to generate/"
"detect the video signal."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:793
msgid "``g_dv_timings``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:794
msgid "Get custom dv timings in the sub device."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:795
msgid "``query_dv_timings``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:796
msgid "callback for VIDIOC_QUERY_DV_TIMINGS() ioctl handler code."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:797
msgid "``dv_timings_cap``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:798
msgid "callback for VIDIOC_SUBDEV_DV_TIMINGS_CAP() ioctl handler code."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:800
msgid "``enum_dv_timings``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:801
msgid "callback for VIDIOC_SUBDEV_ENUM_DV_TIMINGS() ioctl handler code."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:803
msgid "``link_validate``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:804
msgid ""
"used by the media controller code to check if the links that belongs to a "
"pipeline can be used for stream."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:806
msgid "``get_frame_desc``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:807
msgid "get the current low level media bus frame parameters."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:808
msgid "``set_frame_desc``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:809
msgid ""
"set the low level media bus frame parameters, **fd** array may be adjusted "
"by the subdev driver to device capabilities."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:811
msgid "``get_mbus_config``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:812
msgid ""
"get the media bus configuration of a remote sub-device. The media bus "
"configuration is usually retrieved from the firmware interface at sub-device "
"probe time, immediately applied to the hardware and eventually adjusted by "
"the driver. Remote sub-devices (usually video receivers) shall use this "
"operation to query the transmitting end bus configuration in order to adjust "
"their own one accordingly. Callers should make sure they get the most up-to-"
"date as possible configuration from the remote end, likely calling this "
"operation as close as possible to stream on time. The operation shall fail "
"if the pad index it has been called on is not valid or in case of "
"unrecoverable failures. The config argument has been memset to 0 just before "
"calling the op."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:826
msgid "``set_routing``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:827
msgid ""
"Enable or disable data connection routes described in the subdevice routing "
"table. Subdevs that implement this operation must set the "
"V4L2_SUBDEV_FL_STREAMS flag."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:830
msgid "``enable_streams``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:831
msgid ""
"Enable the streams defined in streams_mask on the given source pad. Subdevs "
"that implement this operation must use the active state management provided "
"by the subdev core (enabled through a call to v4l2_subdev_init_finalize() at "
"initialization time). Do not call directly, use v4l2_subdev_enable_streams() "
"instead."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:840
msgid "``disable_streams``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:841
msgid ""
"Disable the streams defined in streams_mask on the given source pad. Subdevs "
"that implement this operation must use the active state management provided "
"by the subdev core (enabled through a call to v4l2_subdev_init_finalize() at "
"initialization time). Do not call directly, use "
"v4l2_subdev_disable_streams() instead."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:835
#: include/media/v4l2-subdev.h:840
msgid ""
"Drivers that support only a single stream without setting the "
"V4L2_SUBDEV_CAP_STREAMS sub-device capability flag can ignore the mask "
"argument."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:914
msgid "Subdev operations"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:916
msgid "``core``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:917
msgid ""
"pointer to :c:type:`struct v4l2_subdev_core_ops <v4l2_subdev_core_ops>`. Can "
"be ``NULL``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:917
msgid "``tuner``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:918
msgid ""
"pointer to :c:type:`struct v4l2_subdev_tuner_ops <v4l2_subdev_tuner_ops>`. "
"Can be ``NULL``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:918
msgid "``audio``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:919
msgid ""
"pointer to :c:type:`struct v4l2_subdev_audio_ops <v4l2_subdev_audio_ops>`. "
"Can be ``NULL``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:919
msgid "``video``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:920
msgid ""
"pointer to :c:type:`struct v4l2_subdev_video_ops <v4l2_subdev_video_ops>`. "
"Can be ``NULL``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:920
msgid "``vbi``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:921
msgid ""
"pointer to :c:type:`struct v4l2_subdev_vbi_ops <v4l2_subdev_vbi_ops>`. Can "
"be ``NULL``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:921
msgid "``ir``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:922
msgid ""
"pointer to :c:type:`struct v4l2_subdev_ir_ops <v4l2_subdev_ir_ops>`. Can be "
"``NULL``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:922
msgid "``sensor``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:923
msgid ""
"pointer to :c:type:`struct v4l2_subdev_sensor_ops <v4l2_subdev_sensor_ops>`. "
"Can be ``NULL``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:924
msgid ""
"pointer to :c:type:`struct v4l2_subdev_pad_ops <v4l2_subdev_pad_ops>`. Can "
"be ``NULL``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:937
msgid "V4L2 subdev internal ops"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:939
msgid "``init_state``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:940
msgid "initialize the subdev state to default values"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:941
msgid "``registered``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:942
msgid ""
"called when this subdev is registered. When called the v4l2_dev field is set "
"to the correct v4l2_device."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:944
msgid "``unregistered``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:945
msgid ""
"called when this subdev is unregistered. When called the v4l2_dev field is "
"still set to the correct v4l2_device."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:947
msgid "``open``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:948
msgid "called when the subdev device node is opened by an application."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:949
msgid "``close``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:950
msgid ""
"called when the subdev device node is closed. Please note that it is "
"possible for **close** to be called after **unregistered**!"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:952
msgid "``release``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:953
msgid ""
"called when the last user of the subdev device is gone. This happens after "
"the **unregistered** callback and when the last open filehandle to the v4l-"
"subdevX device node was closed. If no device node was created for this sub-"
"device, then the **release** callback is called right after the "
"**unregistered** callback. The **release** callback is typically used to "
"free the memory containing the v4l2_subdev structure. It is almost certainly "
"required for any sub-device that sets the V4L2_SUBDEV_FL_HAS_DEVNODE flag."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:961
msgid ""
"Never call this from drivers, only the v4l2 framework can call these ops."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1002
msgid "regulators config struct"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1004
msgid "``regulators``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1005
msgid "Optional regulators used to power on/off the subdevice"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1005
msgid "``num_regulators``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1006
msgid "Number of regululators"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1006
#: include/media/v4l2-subdev.h:1039
msgid "``host_priv``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1007
msgid "Per-subdevice data, specific for a certain video host device"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1016
msgid "describes a V4L2 sub-device"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1018
msgid "``entity``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1019
#: include/media/v4l2-subdev.h:1273
msgid "pointer to :c:type:`struct media_entity <media_entity>`"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1019
msgid "``list``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1020
msgid "List of sub-devices"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1020
#: include/media/v4l2-subdev.h:1147
msgid "``owner``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1021
msgid ""
"The owner is the same as the driver's :c:type:`struct device <device>` owner."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1021
msgid "``owner_v4l2_dev``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1022
msgid ""
"true if the :c:type:`sd->owner <sd>` matches the owner of **v4l2_dev->dev** "
"owner. Initialized by v4l2_device_register_subdev()."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1024
msgid ""
"subdev flags. Can be: ``V4L2_SUBDEV_FL_IS_I2C`` - Set this flag if this "
"subdev is a i2c device; ``V4L2_SUBDEV_FL_IS_SPI`` - Set this flag if this "
"subdev is a spi device; ``V4L2_SUBDEV_FL_HAS_DEVNODE`` - Set this flag if "
"this subdev needs a device node; ``V4L2_SUBDEV_FL_HAS_EVENTS`` -  Set this "
"flag if this subdev generates events."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1031
msgid "``v4l2_dev``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1032
msgid "pointer to struct :c:type:`v4l2_device`"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1032
msgid "``ops``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1033
msgid "pointer to struct :c:type:`v4l2_subdev_ops`"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1033
msgid "``internal_ops``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1034
msgid ""
"pointer to struct :c:type:`v4l2_subdev_internal_ops`. Never call these "
"internal ops from within a driver!"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1035
msgid "``ctrl_handler``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1036
msgid "The control handler of this subdev. May be NULL."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1036
msgid "``name``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1037
msgid "Name of the sub-device. Please notice that the name must be unique."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1037
msgid "``grp_id``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1038
msgid "can be used to group similar subdevs. Value is driver-specific"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1038
msgid "``dev_priv``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1039
msgid "pointer to private data"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1040
msgid ""
"pointer to private data used by the device where the subdev is attached."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1041
msgid "``devnode``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1042
msgid "subdev device node"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1042
msgid "``dev``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1043
msgid "pointer to the physical device, if any"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1043
msgid "``fwnode``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1044
msgid ""
"The fwnode_handle of the subdev, usually the same as either dev->of_node-"
">fwnode or dev->fwnode (whichever is non-NULL)."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1045
msgid "``async_list``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1046
msgid ""
"Links this subdev to a global subdev_list or **notifier->done_list** list."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1047
msgid "``async_subdev_endpoint_list``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1048
msgid ""
"List entry in async_subdev_endpoint_entry of :c:type:`struct "
"v4l2_async_subdev_endpoint <v4l2_async_subdev_endpoint>`."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1049
msgid "``subdev_notifier``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1050
msgid ""
"A sub-device notifier implicitly registered for the sub- device using "
"v4l2_async_register_subdev_sensor()."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1051
msgid "``asc_list``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1052
msgid ""
"Async connection list, of :c:type:`struct v4l2_async_connection "
"<v4l2_async_connection>`.subdev_entry."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1053
msgid "``pdata``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1054
msgid "common part of subdevice platform data"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1054
msgid "``state_lock``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1055
msgid ""
"A pointer to a lock used for all the subdev's states, set by the driver. "
"This is optional. If NULL, each state instance will get a lock of its own."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1057
msgid "``privacy_led``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1058
msgid "Optional pointer to a LED classdev for the privacy LED for sensors."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1058
msgid "``active_state``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1059
msgid ""
"Active state for the subdev (NULL for subdevs tracking the state "
"internally). Initialized by calling v4l2_subdev_init_finalize()."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1061
msgid "``enabled_pads``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1062
msgid ""
"Bitmask of enabled pads used by v4l2_subdev_enable_streams() and "
"v4l2_subdev_disable_streams() helper functions for fallback cases."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1064
msgid "``s_stream_enabled``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1065
msgid ""
"Tracks whether streaming has been enabled with s_stream. This is only for "
"call_s_stream() internal use."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1066
msgid ""
"Each instance of a subdev driver should create this struct, either stand-"
"alone or embedded in a larger struct."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1069
msgid ""
"This structure should be initialized by v4l2_subdev_init() or one of its "
"variants: v4l2_spi_subdev_init(), v4l2_i2c_subdev_init()."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1121
msgid "``media_entity_to_v4l2_subdev (ent)``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1119
msgid ""
"Returns a :c:type:`struct v4l2_subdev <v4l2_subdev>` from the :c:type:"
"`struct media_entity <media_entity>` embedded in it."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1123
#: include/media/v4l2-subdev.h:1138 include/media/v4l2-subdev.h:1164
#: include/media/v4l2-subdev.h:1175 include/media/v4l2-subdev.h:1186
#: include/media/v4l2-subdev.h:1198 include/media/v4l2-subdev.h:1209
#: include/media/v4l2-subdev.h:1223 include/media/v4l2-subdev.h:1240
#: include/media/v4l2-subdev.h:1256 include/media/v4l2-subdev.h:1275
#: include/media/v4l2-subdev.h:1293 include/media/v4l2-subdev.h:1308
#: include/media/v4l2-subdev.h:1317 include/media/v4l2-subdev.h:1342
#: include/media/v4l2-subdev.h:1369 include/media/v4l2-subdev.h:1404
#: include/media/v4l2-subdev.h:1426 include/media/v4l2-subdev.h:1448
#: include/media/v4l2-subdev.h:1472 include/media/v4l2-subdev.h:1489
#: include/media/v4l2-subdev.h:1507 include/media/v4l2-subdev.h:1527
#: include/media/v4l2-subdev.h:1536 include/media/v4l2-subdev.h:1552
#: include/media/v4l2-subdev.h:1572 include/media/v4l2-subdev.h:1588
#: include/media/v4l2-subdev.h:1657 include/media/v4l2-subdev.h:1672
#: include/media/v4l2-subdev.h:1704 include/media/v4l2-subdev.h:1736
#: include/media/v4l2-subdev.h:1757 include/media/v4l2-subdev.h:1770
#: include/media/v4l2-subdev.h:1781 include/media/v4l2-subdev.h:1803
#: include/media/v4l2-subdev.h:1821 include/media/v4l2-subdev.h:1841
#: include/media/v4l2-subdev.h:1862 include/media/v4l2-subdev.h:1880
#: include/media/v4l2-subdev.h:1891 include/media/v4l2-subdev.h:1921
#: include/media/v4l2-subdev.h:1951 include/media/v4l2-subdev.h:1985
#: include/media/v4l2-subdev.h:1996 include/media/v4l2-subdev.h:2009
msgid "**Parameters**"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1125
msgid "``ent``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1122
msgid "pointer to :c:type:`struct media_entity <media_entity>`."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1136
msgid "``vdev_to_v4l2_subdev (vdev)``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1134
msgid ""
"Returns a :c:type:`struct v4l2_subdev <v4l2_subdev>` from the :c:type:"
"`struct video_device <video_device>` embedded on it."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1140
msgid "``vdev``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1137
msgid "pointer to :c:type:`struct video_device <video_device>`"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1143
msgid "Used for storing subdev information per file handle"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1145
msgid "``vfh``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1146
#: include/media/v4l2-subdev.h:1163
msgid "pointer to :c:type:`struct v4l2_fh <v4l2_fh>`"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1148
msgid "module pointer to the owner of this file handle"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1146
#: include/media/v4l2-subdev.h:1371 include/media/v4l2-subdev.h:1406
#: include/media/v4l2-subdev.h:1428 include/media/v4l2-subdev.h:1450
msgid "``state``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1147
msgid "pointer to :c:type:`struct v4l2_subdev_state <v4l2_subdev_state>`"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1148
msgid "``client_caps``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1149
msgid "bitmask of ``V4L2_SUBDEV_CLIENT_CAP_*``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1162
msgid "``to_v4l2_subdev_fh (fh)``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1160
msgid ""
"Returns a :c:type:`struct v4l2_subdev_fh <v4l2_subdev_fh>` from the :c:type:"
"`struct v4l2_fh <v4l2_fh>` embedded on it."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1166
msgid "``fh``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1171
msgid "Sets V4L2 dev private device data"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1177
#: include/media/v4l2-subdev.h:1200 include/media/v4l2-subdev.h:1242
#: include/media/v4l2-subdev.h:1295 include/media/v4l2-subdev.h:1344
#: include/media/v4l2-subdev.h:1474 include/media/v4l2-subdev.h:1491
#: include/media/v4l2-subdev.h:1509 include/media/v4l2-subdev.h:1538
#: include/media/v4l2-subdev.h:1659 include/media/v4l2-subdev.h:1674
#: include/media/v4l2-subdev.h:1706 include/media/v4l2-subdev.h:1738
#: include/media/v4l2-subdev.h:1823 include/media/v4l2-subdev.h:1843
#: include/media/v4l2-subdev.h:1864 include/media/v4l2-subdev.h:1882
#: include/media/v4l2-subdev.h:1998 include/media/v4l2-subdev.h:2011
msgid "``struct v4l2_subdev *sd``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1173
#: include/media/v4l2-subdev.h:1184 include/media/v4l2-subdev.h:1196
#: include/media/v4l2-subdev.h:1207 include/media/v4l2-subdev.h:1238
msgid "pointer to :c:type:`struct v4l2_subdev <v4l2_subdev>`"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1175
#: include/media/v4l2-subdev.h:1198
msgid "``void *p``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1174
msgid "pointer to the private device data to be stored."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1182
msgid "Gets V4L2 dev private device data"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1188
#: include/media/v4l2-subdev.h:1211
msgid "``const struct v4l2_subdev *sd``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1185
msgid "Returns the pointer to the private device data to be stored."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1194
msgid "Sets V4L2 dev private host data"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1197
msgid "pointer to the private data to be stored."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1205
msgid "Gets V4L2 dev private data"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1208
msgid "Returns the pointer to the private host data to be stored."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1219
msgid "Get pad number from a subdev fwnode endpoint, assuming 1:1 port:pad"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1225
#: include/media/v4l2-subdev.h:1277
msgid "``struct media_entity *entity``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1222
msgid "Pointer to the subdev entity"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1224
msgid "``struct fwnode_endpoint *endpoint``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1223
msgid "Pointer to a parsed fwnode endpoint"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1224
msgid ""
"This function can be used as the .get_fwnode_pad operation for subdevices "
"that map port numbers and pad indexes 1:1. If the endpoint is owned by the "
"subdevice, the function returns the endpoint port number."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1229
msgid "Returns the endpoint port number on success or a negative error code."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1236
#: include/media/v4l2-subdev.h:1252
msgid "validates a media link"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1240
#: include/media/v4l2-subdev.h:1258
msgid "``struct media_link *link``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1239
#: include/media/v4l2-subdev.h:1254
msgid "pointer to :c:type:`struct media_link <media_link>`"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1241
msgid "``struct v4l2_subdev_format *source_fmt``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1240
#: include/media/v4l2-subdev.h:1241 include/media/v4l2-subdev.h:1471
msgid "pointer to :c:type:`struct v4l2_subdev_format <v4l2_subdev_format>`"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1242
msgid "``struct v4l2_subdev_format *sink_fmt``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1242
msgid ""
"This function ensures that width, height and the media bus pixel code are "
"equal on both source and sink of the link."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1255
msgid ""
"This function calls the subdev's link_validate ops to validate if a media "
"link is valid for streaming. It also internally calls "
"v4l2_subdev_link_validate_default() to ensure that width, height and the "
"media bus pixel code are equal on both source and sink of the link."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1261
msgid ""
"The function can be used as a drop-in :c:type:`media_entity_ops."
"link_validate <media_entity_ops>` implementation for v4l2_subdev instances. "
"It supports all links between subdevs, as well as links between subdevs and "
"video devices, provided that the video devices also implement their :c:type:"
"`media_entity_ops.link_validate <media_entity_ops>` operation."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1271
msgid "MC has_pad_interdep implementation for subdevs"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1275
msgid "``unsigned int pad0``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1274
msgid "pad number for the first pad"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1276
msgid "``unsigned int pad1``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1275
msgid "pad number for the second pad"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1276
msgid ""
"This function is an implementation of the media_entity_operations."
"has_pad_interdep operation for subdevs that implement the multiplexed "
"streams API (as indicated by the V4L2_SUBDEV_FL_STREAMS subdev flag)."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1281
msgid ""
"It considers two pads interdependent if there is an active route between "
"pad0 and pad1."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1289
msgid "allocate v4l2_subdev_state"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1291
msgid ""
"pointer to :c:type:`struct v4l2_subdev <v4l2_subdev>` for which the state is "
"being allocated."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1293
msgid "``const char *lock_name``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1292
msgid "name of the state lock"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1294
msgid "``struct lock_class_key *key``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1293
msgid "lock_class_key for the lock"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1294
msgid "Must call __v4l2_subdev_state_free() when state is no longer needed."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1296
#: include/media/v4l2-subdev.h:1307
msgid "Not to be called directly by the drivers."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1304
msgid "free a v4l2_subdev_state"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1310
#: include/media/v4l2-subdev.h:1471 include/media/v4l2-subdev.h:1488
#: include/media/v4l2-subdev.h:1506 include/media/v4l2-subdev.h:1536
#: include/media/v4l2-subdev.h:1574 include/media/v4l2-subdev.h:1759
#: include/media/v4l2-subdev.h:1772
msgid "``struct v4l2_subdev_state *state``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1306
msgid "v4l2_subdev_state to be freed."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1315
msgid "``v4l2_subdev_init_finalize (sd)``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1313
msgid "Finalizes the initialization of the subdevice"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1314
msgid "The subdev"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1315
msgid ""
"This function finalizes the initialization of the subdev, including "
"allocation of the active state for the subdev."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1318
msgid ""
"This function must be called by the subdev drivers that use the centralized "
"active state, after the subdev struct has been initialized and "
"media_entity_pads_init() has been called, but before registering the subdev."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1323
msgid ""
"The user must call v4l2_subdev_cleanup() when the subdev is being removed."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1338
msgid "Releases the resources allocated by the subdevice"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1339
#: include/media/v4l2-subdev.h:1504 include/media/v4l2-subdev.h:1534
#: include/media/v4l2-subdev.h:1655 include/media/v4l2-subdev.h:1669
#: include/media/v4l2-subdev.h:1701 include/media/v4l2-subdev.h:1734
#: include/media/v4l2-subdev.h:1819 include/media/v4l2-subdev.h:1840
#: include/media/v4l2-subdev.h:1860 include/media/v4l2-subdev.h:2006
msgid "The subdevice"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1340
msgid ""
"Clean up a V4L2 async sub-device. Must be called for a sub-device as part of "
"its release if resources have been associated with it using "
"v4l2_async_subdev_endpoint_add() or v4l2_subdev_init_finalize()."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1367
msgid "``v4l2_subdev_state_get_format (state, pad, ...)``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1365
msgid "Get pointer to a stream format"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1366
#: include/media/v4l2-subdev.h:1401 include/media/v4l2-subdev.h:1423
#: include/media/v4l2-subdev.h:1445 include/media/v4l2-subdev.h:1470
#: include/media/v4l2-subdev.h:1487 include/media/v4l2-subdev.h:1570
msgid "subdevice state"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1367
#: include/media/v4l2-subdev.h:1402 include/media/v4l2-subdev.h:1424
#: include/media/v4l2-subdev.h:1446 include/media/v4l2-subdev.h:1550
#: include/media/v4l2-subdev.h:1571
msgid "pad id"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1369
#: include/media/v4l2-subdev.h:1404 include/media/v4l2-subdev.h:1426
#: include/media/v4l2-subdev.h:1448
msgid "``...``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1368
#: include/media/v4l2-subdev.h:1403 include/media/v4l2-subdev.h:1425
#: include/media/v4l2-subdev.h:1447
msgid "stream id (optional argument)"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1369
msgid ""
"This returns a pointer to :c:type:`struct v4l2_mbus_framefmt "
"<v4l2_mbus_framefmt>` for the given pad + stream in the subdev state."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1372
msgid ""
"For stream-unaware drivers the format for the corresponding pad is returned. "
"If the pad does not exist, NULL is returned."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1402
msgid "``v4l2_subdev_state_get_crop (state, pad, ...)``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1400
msgid "Get pointer to a stream crop rectangle"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1404
msgid ""
"This returns a pointer to crop rectangle for the given pad + stream in the "
"subdev state."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1407
msgid ""
"For stream-unaware drivers the crop rectangle for the corresponding pad is "
"returned. If the pad does not exist, NULL is returned."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1424
msgid "``v4l2_subdev_state_get_compose (state, pad, ...)``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1422
msgid "Get pointer to a stream compose rectangle"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1426
msgid ""
"This returns a pointer to compose rectangle for the given pad + stream in "
"the subdev state."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1429
msgid ""
"For stream-unaware drivers the compose rectangle for the corresponding pad "
"is returned. If the pad does not exist, NULL is returned."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1446
msgid "``v4l2_subdev_state_get_interval (state, pad, ...)``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1444
msgid "Get pointer to a stream frame interval"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1448
msgid ""
"This returns a pointer to the frame interval for the given pad + stream in "
"the subdev state."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1451
msgid ""
"For stream-unaware drivers the frame interval for the corresponding pad is "
"returned. If the pad does not exist, NULL is returned."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1468
msgid "Fill format based on state"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1469
#: include/media/v4l2-subdev.h:1486
msgid "subdevice"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1472
msgid "``struct v4l2_subdev_format *format``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1472
msgid ""
"Fill **format->format** field based on the information in the **format** "
"struct."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1474
msgid ""
"This function can be used by the subdev drivers which support active state "
"to implement v4l2_subdev_pad_ops.get_fmt if the subdev driver does not need "
"to do anything special in their get_fmt op."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1478
#: include/media/v4l2-subdev.h:1495 include/media/v4l2-subdev.h:1660
msgid "Returns 0 on success, error value otherwise."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1485
msgid "Fill frame interval based on state"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1489
msgid "``struct v4l2_subdev_frame_interval *fi``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1488
msgid ""
"pointer to :c:type:`struct v4l2_subdev_frame_interval "
"<v4l2_subdev_frame_interval>`"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1489
msgid ""
"Fill **fi->interval** field based on the information in the **fi** struct."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1491
msgid ""
"This function can be used by the subdev drivers which support active state "
"to implement v4l2_subdev_pad_ops.get_frame_interval if the subdev driver "
"does not need to do anything special in their get_frame_interval op."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1503
msgid "Set given routing to subdev state"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1505
#: include/media/v4l2-subdev.h:1535 include/media/v4l2-subdev.h:1754
#: include/media/v4l2-subdev.h:1767
msgid "The subdevice state"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1507
#: include/media/v4l2-subdev.h:1537 include/media/v4l2-subdev.h:1554
#: include/media/v4l2-subdev.h:1657
msgid "``const struct v4l2_subdev_krouting *routing``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1506
#: include/media/v4l2-subdev.h:1536
msgid "Routing that will be copied to subdev state"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1507
msgid ""
"This will release old routing table (if any) from the state, allocate enough "
"space for the given routing, and copy the routing."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1510
msgid ""
"This can be used from the subdev driver's set_routing op, after validating "
"the routing."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1525
msgid "``for_each_active_route (routing, route)``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1523
msgid "iterate on all active routes of a routing table"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1524
msgid "The routing table"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1526
msgid "``route``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1525
msgid "The route iterator"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1532
msgid "Set given routing and format to subdev state"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1538
msgid "``const struct v4l2_mbus_framefmt *fmt``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1537
msgid "Format used to initialize all the streams"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1538
msgid ""
"This is the same as v4l2_subdev_set_routing, but additionally initializes "
"all the streams using the given format."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1548
msgid "Find the opposite stream"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1549
msgid "routing used to find the opposite side"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1551
#: include/media/v4l2-subdev.h:1572 include/media/v4l2-subdev.h:1671
#: include/media/v4l2-subdev.h:1703
msgid "``u32 pad``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1552
#: include/media/v4l2-subdev.h:1573
msgid "``u32 stream``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1551
#: include/media/v4l2-subdev.h:1572
msgid "stream id"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1553
msgid "``u32 *other_pad``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1552
msgid "pointer used to return the opposite pad"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1554
msgid "``u32 *other_stream``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1553
msgid "pointer used to return the opposite stream"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1554
msgid ""
"This function uses the routing table to find the pad + stream which is "
"opposite the given pad + stream."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1557
msgid ""
"**other_pad** and/or **other_stream** can be NULL if the caller does not "
"need the value."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1560
msgid "Returns 0 on success, or -EINVAL if no matching route is found."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1568
msgid "Get pointer to opposite stream format"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1573
msgid ""
"This returns a pointer to :c:type:`struct v4l2_mbus_framefmt "
"<v4l2_mbus_framefmt>` for the pad + stream that is opposite the given pad + "
"stream in the subdev state."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1576
msgid "If the state does not contain the given pad + stream, NULL is returned."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1584
msgid "Translate streams from one pad to another"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1590
msgid "``const struct v4l2_subdev_state *state``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1586
msgid "Subdevice state"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1588
msgid "``u32 pad0``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1587
msgid "The first pad"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1589
msgid "``u32 pad1``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1588
msgid "The second pad"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1590
msgid "``u64 *streams``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1589
msgid "Streams bitmask on the first pad"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1590
msgid ""
"Streams on sink pads of a subdev are routed to source pads as expressed in "
"the subdev state routing table. Stream numbers don't necessarily match on "
"the sink and source side of a route. This function translates stream numbers "
"on **pad0**, expressed as a bitmask in **streams**, to the corresponding "
"streams on **pad1** using the routing table from the **state**. It returns "
"the stream mask on **pad1**, and updates **streams** with the streams that "
"have been found in the routing table."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1598
msgid "**pad0** and **pad1** must be a sink and a source, in any order."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1600
#: include/media/v4l2-subdev.h:1688 include/media/v4l2-subdev.h:1720
#: include/media/v4l2-subdev.h:1743
msgid "**Return**"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1601
msgid ""
"The bitmask of streams of **pad1** that are routed to **streams** on "
"**pad0**."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1607
msgid "Subdevice internal routing restrictions"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1613
msgid "``V4L2_SUBDEV_ROUTING_NO_1_TO_N``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1614
msgid ""
"an input stream shall not be routed to multiple output streams (stream "
"duplication)"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1617
msgid "``V4L2_SUBDEV_ROUTING_NO_N_TO_1``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1618
msgid ""
"multiple input streams shall not be routed to the same output stream (stream "
"merging)"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1621
msgid "``V4L2_SUBDEV_ROUTING_NO_SINK_STREAM_MIX``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1622
msgid "all streams from a sink pad must be routed to a single source pad"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1624
msgid "``V4L2_SUBDEV_ROUTING_NO_SOURCE_STREAM_MIX``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1625
msgid "all streams on a source pad must originate from a single sink pad"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1627
msgid "``V4L2_SUBDEV_ROUTING_NO_SINK_MULTIPLEXING``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1628
msgid "sink pads shall not contain multiplexed streams"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1630
msgid "``V4L2_SUBDEV_ROUTING_NO_SOURCE_MULTIPLEXING``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1631
msgid "source pads shall not contain multiplexed streams"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1633
msgid "``V4L2_SUBDEV_ROUTING_ONLY_1_TO_1``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1634
msgid ""
"only non-overlapping 1-to-1 stream routing is allowed (a combination of "
"**V4L2_SUBDEV_ROUTING_NO_1_TO_N** and **V4L2_SUBDEV_ROUTING_NO_N_TO_1**)"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1637
msgid "``V4L2_SUBDEV_ROUTING_NO_STREAM_MIX``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1638
msgid ""
"all streams from a sink pad must be routed to a single source pad, and that "
"source pad shall not get routes from any other sink pad (a combination of "
"**V4L2_SUBDEV_ROUTING_NO_SINK_STREAM_MIX** and "
"**V4L2_SUBDEV_ROUTING_NO_SOURCE_STREAM_MIX**)"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1643
msgid "``V4L2_SUBDEV_ROUTING_NO_MULTIPLEXING``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1644
msgid "no multiplexed streams allowed on either source or sink sides."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1653
msgid "Verify that routes comply with driver constraints"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1656
msgid "Routing to verify"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1658
msgid "``enum v4l2_subdev_routing_restriction disallow``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1657
msgid "Restrictions on routes"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1658
msgid ""
"This verifies that the given routing complies with the **disallow** "
"constraints."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1668
msgid "Enable streams on a pad"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1670
#: include/media/v4l2-subdev.h:1702
msgid "The pad"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1672
#: include/media/v4l2-subdev.h:1704
msgid "``u64 streams_mask``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1671
msgid "Bitmask of streams to enable"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1672
msgid ""
"This function enables streams on a source **pad** of a subdevice. The pad is "
"identified by its index, while the streams are identified by the "
"**streams_mask** bitmask. This allows enabling multiple streams on a pad at "
"once."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1677
msgid ""
"Enabling a stream that is already enabled isn't allowed. If **streams_mask** "
"contains an already enabled stream, this function returns -EALREADY without "
"performing any operation."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1681
msgid ""
"Per-stream enable is only available for subdevs that implement the ."
"enable_streams() and .disable_streams() operations. For other subdevs, this "
"function implements a best-effort compatibility by calling the .s_stream() "
"operation, limited to subdevs that have a single source pad."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1686
#: include/media/v4l2-subdev.h:1718
msgid ""
"Drivers that are not stream-aware shall set **streams_mask** to BIT_ULL(0)."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1689
#: include/media/v4l2-subdev.h:1721
msgid "0: Success"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1690
msgid "-EALREADY: One of the streams in streams_mask is already enabled"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1691
#: include/media/v4l2-subdev.h:1723
msgid ""
"-EINVAL: The pad index is invalid, or doesn't correspond to a source pad"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1692
#: include/media/v4l2-subdev.h:1724
msgid ""
"-EOPNOTSUPP: Falling back to the legacy .s_stream() operation is impossible "
"because the subdev has multiple source pads"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1700
msgid "Disable streams on a pad"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1703
msgid "Bitmask of streams to disable"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1704
msgid ""
"This function disables streams on a source **pad** of a subdevice. The pad "
"is identified by its index, while the streams are identified by the "
"**streams_mask** bitmask. This allows disabling multiple streams on a pad at "
"once."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1709
msgid ""
"Disabling a streams that is not enabled isn't allowed. If **streams_mask** "
"contains a disabled stream, this function returns -EALREADY without "
"performing any operation."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1713
msgid ""
"Per-stream disable is only available for subdevs that implement the ."
"enable_streams() and .disable_streams() operations. For other subdevs, this "
"function implements a best-effort compatibility by calling the .s_stream() "
"operation, limited to subdevs that have a single source pad."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1722
msgid "-EALREADY: One of the streams in streams_mask is not enabled"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1732
msgid ""
"Helper to implement the subdev s_stream operation using enable_streams and "
"disable_streams"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1736
msgid "``int enable``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1735
msgid "Enable or disable streaming"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1736
msgid ""
"Subdevice drivers that implement the streams-aware :c:type:"
"`v4l2_subdev_pad_ops.enable_streams <v4l2_subdev_pad_ops>` and :c:type:"
"`v4l2_subdev_pad_ops.disable_streams <v4l2_subdev_pad_ops>` operations can "
"use this helper to implement the legacy :c:type:`v4l2_subdev_video_ops."
"s_stream <v4l2_subdev_video_ops>` operation."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1741
msgid "This helper can only be used by subdevs that have a single source pad."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1744
msgid "0 on success, or a negative error code otherwise."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1753
msgid "Locks the subdev state"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1755
msgid "Locks the given subdev state."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1757
#: include/media/v4l2-subdev.h:1864
msgid "The state must be unlocked with v4l2_subdev_unlock_state() after use."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1766
msgid "Unlocks the subdev state"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1768
msgid "Unlocks the given subdev state."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1777
msgid "Lock two sub-device states"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1783
#: include/media/v4l2-subdev.h:1805
msgid "``struct v4l2_subdev_state *state1``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1778
#: include/media/v4l2-subdev.h:1800
msgid "One subdevice state"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1780
#: include/media/v4l2-subdev.h:1802
msgid "``struct v4l2_subdev_state *state2``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1779
#: include/media/v4l2-subdev.h:1801
msgid "The other subdevice state"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1780
msgid "Locks the state of two sub-devices."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1782
msgid "The states must be unlocked with v4l2_subdev_unlock_states() after use."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1784
msgid ""
"This differs from calling v4l2_subdev_lock_state() on both states so that if "
"the states share the same lock, the lock is acquired only once (so no "
"deadlock occurs). The caller is responsible for ensuring the locks will "
"always be acquired in the same order."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1799
msgid "Unlock two sub-device states"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1802
msgid "Unlocks the state of two sub-devices."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1804
msgid ""
"This differs from calling v4l2_subdev_unlock_state() on both states so that "
"if the states share the same lock, the lock is released only once."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1817
msgid "Checks that the active subdev state is unlocked and returns it"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1820
msgid ""
"Returns the active state for the subdevice, or NULL if the subdev does not "
"support active state. If the state is not NULL, calls "
"lockdep_assert_not_held() to issue a warning if the state is locked."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1824
msgid ""
"This function is to be used e.g. when getting the active state for the sole "
"purpose of passing it forward, without accessing the state fields."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1837
msgid "Checks that the active subdev state is locked and returns it"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1841
msgid ""
"Returns the active state for the subdevice, or NULL if the subdev does not "
"support active state. If the state is not NULL, calls lockdep_assert_held() "
"to issue a warning if the state is not locked."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1845
msgid ""
"This function is to be used when the caller knows that the active state is "
"already locked."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1858
msgid "Locks and returns the active subdev state for the subdevice"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1861
msgid ""
"Returns the locked active state for the subdevice, or NULL if the subdev "
"does not support active state."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1876
msgid "initializes the sub-device struct"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1878
msgid ""
"pointer to the :c:type:`struct v4l2_subdev <v4l2_subdev>` to be initialized"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1880
msgid "``const struct v4l2_subdev_ops *ops``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1879
msgid "pointer to :c:type:`struct v4l2_subdev_ops <v4l2_subdev_ops>`."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1889
msgid "``v4l2_subdev_call (sd, o, f, args...)``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1887
msgid "call an operation of a v4l2_subdev."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1889
#: include/media/v4l2-subdev.h:1921 include/media/v4l2-subdev.h:1951
#: include/media/v4l2-subdev.h:1983
msgid "pointer to the :c:type:`struct v4l2_subdev <v4l2_subdev>`"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1891
#: include/media/v4l2-subdev.h:1923 include/media/v4l2-subdev.h:1953
#: include/media/v4l2-subdev.h:1985
msgid "``o``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1890
#: include/media/v4l2-subdev.h:1922 include/media/v4l2-subdev.h:1952
msgid ""
"name of the element at :c:type:`struct v4l2_subdev_ops <v4l2_subdev_ops>` "
"that contains **f**. Each element there groups a set of callbacks functions."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1893
#: include/media/v4l2-subdev.h:1925 include/media/v4l2-subdev.h:1955
#: include/media/v4l2-subdev.h:1987
msgid "``f``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1892
#: include/media/v4l2-subdev.h:1924 include/media/v4l2-subdev.h:1954
msgid ""
"callback function to be called. The callback functions are defined in "
"groups, according to each element at :c:type:`struct v4l2_subdev_ops "
"<v4l2_subdev_ops>`."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1896
#: include/media/v4l2-subdev.h:1928 include/media/v4l2-subdev.h:1958
msgid "``args...``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1895
#: include/media/v4l2-subdev.h:1927 include/media/v4l2-subdev.h:1957
msgid "arguments for **f**."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1897
msgid "**Example**"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1897
msgid "err = v4l2_subdev_call(sd, video, s_std, norm);"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1919
msgid "``v4l2_subdev_call_state_active (sd, o, f, args...)``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1917
msgid ""
"call an operation of a v4l2_subdev which takes state as a parameter, passing "
"the subdev its active state."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1928
msgid ""
"This is similar to v4l2_subdev_call(), except that this version can only be "
"used for ops that take a subdev state as a parameter. The macro will get the "
"active state, lock it before calling the op and unlock it after the call."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1949
msgid "``v4l2_subdev_call_state_try (sd, o, f, args...)``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1947
msgid ""
"call an operation of a v4l2_subdev which takes state as a parameter, passing "
"the subdev a newly allocated try state."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1958
msgid ""
"This is similar to v4l2_subdev_call_state_active(), except that as this "
"version allocates a new state, this is only usable for "
"V4L2_SUBDEV_FORMAT_TRY use cases."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1962
msgid "**Note**"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1963
msgid "only legacy non-MC drivers may need this macro."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1983
msgid "``v4l2_subdev_has_op (sd, o, f)``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1981
msgid "Checks if a subdev defines a certain operation."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1984
msgid ""
"The group of callback functions in :c:type:`struct v4l2_subdev_ops "
"<v4l2_subdev_ops>` which **f** is a part of."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1986
msgid "callback function to be checked for its existence."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1992
msgid "Delivers event notification for subdevice"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1993
msgid "The subdev for which to deliver the event"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1995
msgid "``const struct v4l2_event *ev``"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1994
msgid "The event to deliver"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:1995
msgid ""
"Will deliver the specified event to all userspace event listeners which are "
"subscribed to the v42l subdev event queue as well as to the bridge driver "
"using the notify callback. The notification type for the notify callback "
"will be ``V4L2_DEVICE_NOTIFY_EVENT``."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:2005
msgid "Returns if the subdevice is streaming"
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:2007
msgid ""
"v4l2_subdev_is_streaming() tells if the subdevice is currently streaming. "
"\"Streaming\" here means whether .s_stream() or .enable_streams() has been "
"successfully called, and the streaming has not yet been disabled."
msgstr ""

#: ../../../driver-api/media/v4l2-subdev:644: include/media/v4l2-subdev.h:2011
msgid ""
"If the subdevice implements .enable_streams() this function must be called "
"while holding the active state lock."
msgstr ""
