# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../trace/coresight/coresight.rst:3
msgid "Coresight - HW Assisted Tracing on ARM"
msgstr ""

#: ../../../trace/coresight/coresight.rst:0
msgid "Author"
msgstr ""

#: ../../../trace/coresight/coresight.rst:5
msgid "Mathieu Poirier <mathieu.poirier@linaro.org>"
msgstr ""

#: ../../../trace/coresight/coresight.rst:0
msgid "Date"
msgstr ""

#: ../../../trace/coresight/coresight.rst:6
msgid "September 11th, 2014"
msgstr ""

#: ../../../trace/coresight/coresight.rst:9
msgid "Introduction"
msgstr ""

#: ../../../trace/coresight/coresight.rst:11
msgid ""
"Coresight is an umbrella of technologies allowing for the debugging of ARM "
"based SoC.  It includes solutions for JTAG and HW assisted tracing.  This "
"document is concerned with the latter."
msgstr ""

#: ../../../trace/coresight/coresight.rst:15
msgid ""
"HW assisted tracing is becoming increasingly useful when dealing with "
"systems that have many SoCs and other components like GPU and DMA engines.  "
"ARM has developed a HW assisted tracing solution by means of different "
"components, each being added to a design at synthesis time to cater to "
"specific tracing needs. Components are generally categorised as source, link "
"and sinks and are (usually) discovered using the AMBA bus."
msgstr ""

#: ../../../trace/coresight/coresight.rst:22
msgid ""
"\"Sources\" generate a compressed stream representing the processor "
"instruction path based on tracing scenarios as configured by users.  From "
"there the stream flows through the coresight system (via ATB bus) using "
"links that are connecting the emanating source to a sink(s).  Sinks serve as "
"endpoints to the coresight implementation, either storing the compressed "
"stream in a memory buffer or creating an interface to the outside world "
"where data can be transferred to a host without fear of filling up the "
"onboard coresight memory buffer."
msgstr ""

#: ../../../trace/coresight/coresight.rst:30
msgid "At typical coresight system would look like this::"
msgstr ""

#: ../../../trace/coresight/coresight.rst:83
msgid ""
"While on target configuration of the components is done via the APB bus, all "
"trace data are carried out-of-band on the ATB bus.  The CTM provides a way "
"to aggregate and distribute signals between CoreSight components."
msgstr ""

#: ../../../trace/coresight/coresight.rst:87
msgid ""
"The coresight framework provides a central point to represent, configure and "
"manage coresight devices on a platform.  This first implementation centers "
"on the basic tracing functionality, enabling components such ETM/PTM, "
"funnel, replicator, TMC, TPIU and ETB.  Future work will enable more "
"intricate IP blocks such as STM and CTI."
msgstr ""

#: ../../../trace/coresight/coresight.rst:95
msgid "Acronyms and Classification"
msgstr ""

#: ../../../trace/coresight/coresight.rst:97
msgid "Acronyms:"
msgstr ""

#: ../../../trace/coresight/coresight.rst:99
msgid "PTM:"
msgstr ""

#: ../../../trace/coresight/coresight.rst:100
msgid "Program Trace Macrocell"
msgstr ""

#: ../../../trace/coresight/coresight.rst:101
msgid "ETM:"
msgstr ""

#: ../../../trace/coresight/coresight.rst:102
msgid "Embedded Trace Macrocell"
msgstr ""

#: ../../../trace/coresight/coresight.rst:103
msgid "STM:"
msgstr ""

#: ../../../trace/coresight/coresight.rst:104
msgid "System trace Macrocell"
msgstr ""

#: ../../../trace/coresight/coresight.rst:105
msgid "ETB:"
msgstr ""

#: ../../../trace/coresight/coresight.rst:106
msgid "Embedded Trace Buffer"
msgstr ""

#: ../../../trace/coresight/coresight.rst:107
msgid "ITM:"
msgstr ""

#: ../../../trace/coresight/coresight.rst:108
msgid "Instrumentation Trace Macrocell"
msgstr ""

#: ../../../trace/coresight/coresight.rst:109
msgid "TPIU:"
msgstr ""

#: ../../../trace/coresight/coresight.rst:110
msgid "Trace Port Interface Unit"
msgstr ""

#: ../../../trace/coresight/coresight.rst:111
msgid "TMC-ETR:"
msgstr ""

#: ../../../trace/coresight/coresight.rst:112
msgid "Trace Memory Controller, configured as Embedded Trace Router"
msgstr ""

#: ../../../trace/coresight/coresight.rst:113
msgid "TMC-ETF:"
msgstr ""

#: ../../../trace/coresight/coresight.rst:114
msgid "Trace Memory Controller, configured as Embedded Trace FIFO"
msgstr ""

#: ../../../trace/coresight/coresight.rst:115
msgid "CTI:"
msgstr ""

#: ../../../trace/coresight/coresight.rst:116
msgid "Cross Trigger Interface"
msgstr ""

#: ../../../trace/coresight/coresight.rst:118
msgid "Classification:"
msgstr ""

#: ../../../trace/coresight/coresight.rst:120
msgid "Source:"
msgstr ""

#: ../../../trace/coresight/coresight.rst:121
msgid "ETMv3.x ETMv4, PTMv1.0, PTMv1.1, STM, STM500, ITM"
msgstr ""

#: ../../../trace/coresight/coresight.rst:122
msgid "Link:"
msgstr ""

#: ../../../trace/coresight/coresight.rst:123
msgid "Funnel, replicator (intelligent or not), TMC-ETR"
msgstr ""

#: ../../../trace/coresight/coresight.rst:124
msgid "Sinks:"
msgstr ""

#: ../../../trace/coresight/coresight.rst:125
msgid "ETBv1.0, ETB1.1, TPIU, TMC-ETF"
msgstr ""

#: ../../../trace/coresight/coresight.rst:126
msgid "Misc:"
msgstr ""

#: ../../../trace/coresight/coresight.rst:127
msgid "CTI"
msgstr ""

#: ../../../trace/coresight/coresight.rst:131
msgid "Device Tree Bindings"
msgstr ""

#: ../../../trace/coresight/coresight.rst:133
msgid ""
"See ``Documentation/devicetree/bindings/arm/arm,coresight-*.yaml`` for "
"details."
msgstr ""

#: ../../../trace/coresight/coresight.rst:135
msgid ""
"As of this writing drivers for ITM, STMs and CTIs are not provided but are "
"expected to be added as the solution matures."
msgstr ""

#: ../../../trace/coresight/coresight.rst:140
msgid "Framework and implementation"
msgstr ""

#: ../../../trace/coresight/coresight.rst:142
msgid ""
"The coresight framework provides a central point to represent, configure and "
"manage coresight devices on a platform.  Any coresight compliant device can "
"register with the framework for as long as they use the right APIs:"
msgstr ""

#: ../../../trace/coresight/coresight.rst:149
msgid ""
"The registering function is taking a ``struct coresight_desc *desc`` and "
"register the device with the core framework. The unregister function takes a "
"reference to a ``struct coresight_device *csdev`` obtained at registration "
"time."
msgstr ""

#: ../../../trace/coresight/coresight.rst:153
msgid ""
"If everything goes well during the registration process the new devices will "
"show up under /sys/bus/coresight/devices, as showns here for a TC2 platform::"
msgstr ""

#: ../../../trace/coresight/coresight.rst:161
msgid ""
"The functions take a ``struct coresight_device``, which looks like this::"
msgstr ""

#: ../../../trace/coresight/coresight.rst:173
msgid ""
"The \"coresight_dev_type\" identifies what the device is, i.e, source link "
"or sink while the \"coresight_dev_subtype\" will characterise that type "
"further."
msgstr ""

#: ../../../trace/coresight/coresight.rst:176
msgid ""
"The ``struct coresight_ops`` is mandatory and will tell the framework how to "
"perform base operations related to the components, each component having a "
"different set of requirement. For that ``struct coresight_ops_sink``, "
"``struct coresight_ops_link`` and ``struct coresight_ops_source`` have been "
"provided."
msgstr ""

#: ../../../trace/coresight/coresight.rst:182
msgid ""
"The next field ``struct coresight_platform_data *pdata`` is acquired by "
"calling ``of_get_coresight_platform_data()``, as part of the driver's _probe "
"routine and ``struct device *dev`` gets the device reference embedded in the "
"``amba_device``::"
msgstr ""

#: ../../../trace/coresight/coresight.rst:194
msgid ""
"Specific class of device (source, link, or sink) have generic operations "
"that can be performed on them (see ``struct coresight_ops``). The "
"``**groups`` is a list of sysfs entries pertaining to operations specific to "
"that component only.  \"Implementation defined\" customisations are expected "
"to be accessed and controlled using those entries."
msgstr ""

#: ../../../trace/coresight/coresight.rst:201
msgid "Device Naming scheme"
msgstr ""

#: ../../../trace/coresight/coresight.rst:203
msgid ""
"The devices that appear on the \"coresight\" bus were named the same as "
"their parent devices, i.e, the real devices that appears on AMBA bus or the "
"platform bus. Thus the names were based on the Linux Open Firmware layer "
"naming convention, which follows the base physical address of the device "
"followed by the device type. e.g::"
msgstr ""

#: ../../../trace/coresight/coresight.rst:215
msgid ""
"However, with the introduction of ACPI support, the names of the real "
"devices are a bit cryptic and non-obvious. Thus, a new naming scheme was "
"introduced to use more generic names based on the type of the device. The "
"following rules apply::"
msgstr ""

#: ../../../trace/coresight/coresight.rst:233
msgid "Thus, with the new scheme the devices could appear as ::"
msgstr ""

#: ../../../trace/coresight/coresight.rst:239
msgid ""
"Some of the examples below might refer to old naming scheme and some to the "
"newer scheme, to give a confirmation that what you see on your system is not "
"unexpected. One must use the \"names\" as they appear on the system under "
"specified locations."
msgstr ""

#: ../../../trace/coresight/coresight.rst:245
msgid "Topology Representation"
msgstr ""

#: ../../../trace/coresight/coresight.rst:247
msgid ""
"Each CoreSight component has a ``connections`` directory which will contain "
"links to other CoreSight components. This allows the user to explore the "
"trace topology and for larger systems, determine the most appropriate sink "
"for a given source. The connection information can also be used to establish "
"which CTI devices are connected to a given component. This directory "
"contains a ``nr_links`` attribute detailing the number of links in the "
"directory."
msgstr ""

#: ../../../trace/coresight/coresight.rst:254
msgid ""
"For an ETM source, in this case ``etm0`` on a Juno platform, a typical "
"arrangement will be::"
msgstr ""

#: ../../../trace/coresight/coresight.rst:262
msgid "Following the out port to ``funnel2``::"
msgstr ""

#: ../../../trace/coresight/coresight.rst:272
msgid "And again to ``funnel0``::"
msgstr ""

#: ../../../trace/coresight/coresight.rst:280
msgid ""
"Finding the first sink ``tmc_etf0``. This can be used to collect data as a "
"sink, or as a link to propagate further along the chain::"
msgstr ""

#: ../../../trace/coresight/coresight.rst:289
msgid "via ``funnel4``::"
msgstr ""

#: ../../../trace/coresight/coresight.rst:297
msgid "and a ``replicator0``::"
msgstr ""

#: ../../../trace/coresight/coresight.rst:305
msgid "Arriving at the final sink in the chain, ``tmc_etr0``::"
msgstr ""

#: ../../../trace/coresight/coresight.rst:312
msgid ""
"As described below, when using sysfs it is sufficient to enable a sink and a "
"source for successful trace. The framework will correctly enable all "
"intermediate links as required."
msgstr ""

#: ../../../trace/coresight/coresight.rst:316
msgid ""
"Note: ``cti_sys0`` appears in two of the connections lists above. CTIs can "
"connect to multiple devices and are arranged in a star topology via the CTM. "
"See (Documentation/trace/coresight/coresight-ect.rst) [#fourth]_ for further "
"details. Looking at this device we see 4 connections::"
msgstr ""

#: ../../../trace/coresight/coresight.rst:331
msgid "How to use the tracer modules"
msgstr ""

#: ../../../trace/coresight/coresight.rst:333
msgid "There are two ways to use the Coresight framework:"
msgstr ""

#: ../../../trace/coresight/coresight.rst:335
msgid "using the perf cmd line tools."
msgstr ""

#: ../../../trace/coresight/coresight.rst:336
msgid ""
"interacting directly with the Coresight devices using the sysFS interface."
msgstr ""

#: ../../../trace/coresight/coresight.rst:338
msgid ""
"Preference is given to the former as using the sysFS interface requires a "
"deep understanding of the Coresight HW.  The following sections provide "
"details on using both methods."
msgstr ""

#: ../../../trace/coresight/coresight.rst:343
msgid "Using the sysFS interface"
msgstr ""

#: ../../../trace/coresight/coresight.rst:345
msgid ""
"Before trace collection can start, a coresight sink needs to be identified. "
"There is no limit on the amount of sinks (nor sources) that can be enabled "
"at any given moment.  As a generic operation, all device pertaining to the "
"sink class will have an \"active\" entry in sysfs::"
msgstr ""

#: ../../../trace/coresight/coresight.rst:360
msgid ""
"At boot time the current etm3x driver will configure the first address "
"comparator with \"_stext\" and \"_etext\", essentially tracing any "
"instruction that falls within that range.  As such \"enabling\" a source "
"will immediately trigger a trace capture::"
msgstr ""

#: ../../../trace/coresight/coresight.rst:379
msgid "Trace collection is stopped the same way::"
msgstr ""

#: ../../../trace/coresight/coresight.rst:384
msgid "The content of the ETB buffer can be harvested directly from /dev::"
msgstr ""

#: ../../../trace/coresight/coresight.rst:393
msgid ""
"The file cstrace.bin can be decompressed using \"ptm2human\", DS-5 or "
"Trace32."
msgstr ""

#: ../../../trace/coresight/coresight.rst:395
msgid ""
"Following is a DS-5 output of an experimental loop that increments a "
"variable up to a certain value.  The example is simple and yet provides a "
"glimpse of the wealth of possibilities that coresight provides. ::"
msgstr ""

#: ../../../trace/coresight/coresight.rst:451
msgid "Using perf framework"
msgstr ""

#: ../../../trace/coresight/coresight.rst:453
msgid ""
"Coresight tracers are represented using the Perf framework's Performance "
"Monitoring Unit (PMU) abstraction.  As such the perf framework takes charge "
"of controlling when tracing gets enabled based on when the process of "
"interest is scheduled.  When configured in a system, Coresight PMUs will be "
"listed when queried by the perf command line tool:"
msgstr ""

#: ../../../trace/coresight/coresight.rst:459
msgid "linaro@linaro-nano:~$ ./perf list pmu"
msgstr ""

#: ../../../trace/coresight/coresight.rst:461
msgid "List of pre-defined events (to be used in -e):"
msgstr ""

#: ../../../trace/coresight/coresight.rst:463
msgid "cs_etm//                                    [Kernel PMU event]"
msgstr ""

#: ../../../trace/coresight/coresight.rst:465
msgid ""
"Regardless of the number of tracers available in a system (usually equal to "
"the amount of processor cores), the \"cs_etm\" PMU will be listed only once."
msgstr ""

#: ../../../trace/coresight/coresight.rst:468
msgid ""
"A Coresight PMU works the same way as any other PMU, i.e the name of the PMU "
"is provided along with configuration options within forward slashes '/' (see "
"`Config option formats`_)."
msgstr ""

#: ../../../trace/coresight/coresight.rst:473
msgid "Advanced Perf framework usage"
msgstr ""

#: ../../../trace/coresight/coresight.rst:476
msgid "Sink selection"
msgstr ""

#: ../../../trace/coresight/coresight.rst:478
msgid ""
"An appropriate sink will be selected automatically for use with Perf, but "
"since there will typically be more than one sink, the name of the sink to "
"use may be specified as a special config option prefixed with '@'."
msgstr ""

#: ../../../trace/coresight/coresight.rst:482
msgid ""
"The available sinks are listed in sysFS under ($SYSFS)/bus/event_source/"
"devices/cs_etm/sinks/::"
msgstr ""

#: ../../../trace/coresight/coresight.rst:490
msgid ""
"More information on the above and other example on how to use Coresight with "
"the perf tools can be found in the \"HOWTO.md\" file of the openCSD gitHub "
"repository [#third]_."
msgstr ""

#: ../../../trace/coresight/coresight.rst:495
msgid "AutoFDO analysis using the perf tools"
msgstr ""

#: ../../../trace/coresight/coresight.rst:497
msgid "perf can be used to record and analyze trace of programs."
msgstr ""

#: ../../../trace/coresight/coresight.rst:499
msgid ""
"Execution can be recorded using 'perf record' with the cs_etm event, "
"specifying the name of the sink to record to, e.g::"
msgstr ""

#: ../../../trace/coresight/coresight.rst:504
msgid ""
"The 'perf report' and 'perf script' commands can be used to analyze "
"execution, synthesizing instruction and branch events from the instruction "
"trace. 'perf inject' can be used to replace the trace data with the "
"synthesized events. The --itrace option controls the type and frequency of "
"synthesized events (see perf documentation)."
msgstr ""

#: ../../../trace/coresight/coresight.rst:510
msgid ""
"Note that only 64-bit programs are currently supported - further work is "
"required to support instruction decode of 32-bit Arm programs."
msgstr ""

#: ../../../trace/coresight/coresight.rst:514
msgid "Tracing PID"
msgstr ""

#: ../../../trace/coresight/coresight.rst:516
msgid ""
"The kernel can be built to write the PID value into the PE ContextID "
"registers. For a kernel running at EL1, the PID is stored in "
"CONTEXTIDR_EL1.  A PE may implement Arm Virtualization Host Extensions "
"(VHE), which the kernel can run at EL2 as a virtualisation host; in this "
"case, the PID value is stored in CONTEXTIDR_EL2."
msgstr ""

#: ../../../trace/coresight/coresight.rst:522
msgid ""
"perf provides PMU formats that program the ETM to insert these values into "
"the trace data; the PMU formats are defined as below:"
msgstr ""

#: ../../../trace/coresight/coresight.rst:525
msgid "\"contextid1\": Available on both EL1 kernel and EL2 kernel.  When the"
msgstr ""

#: ../../../trace/coresight/coresight.rst:526
msgid ""
"kernel is running at EL1, \"contextid1\" enables the PID tracing; when the "
"kernel is running at EL2, this enables tracing the PID of guest applications."
msgstr ""

#: ../../../trace/coresight/coresight.rst:530
msgid "\"contextid2\": Only usable when the kernel is running at EL2.  When"
msgstr ""

#: ../../../trace/coresight/coresight.rst:531
msgid "selected, enables PID tracing on EL2 kernel."
msgstr ""

#: ../../../trace/coresight/coresight.rst:533
msgid "\"contextid\":  Will be an alias for the option that enables PID"
msgstr ""

#: ../../../trace/coresight/coresight.rst:534
msgid ""
"tracing.  I.e, contextid == contextid1, on EL1 kernel. contextid == "
"contextid2, on EL2 kernel."
msgstr ""

#: ../../../trace/coresight/coresight.rst:538
msgid ""
"perf will always enable PID tracing at the relevant EL, this is accomplished "
"by automatically enable the \"contextid\" config - but for EL2 it is "
"possible to make specific adjustments using configs \"contextid1\" and "
"\"contextid2\", E.g. if a user wants to trace PIDs for both host and guest, "
"the two configs \"contextid1\" and \"contextid2\" can be set at the same "
"time:"
msgstr ""

#: ../../../trace/coresight/coresight.rst:544
msgid "perf record -e cs_etm/contextid1,contextid2/u -- vm"
msgstr ""

#: ../../../trace/coresight/coresight.rst:548
msgid "Generating coverage files for Feedback Directed Optimization: AutoFDO"
msgstr ""

#: ../../../trace/coresight/coresight.rst:550
msgid ""
"'perf inject' accepts the --itrace option in which case tracing data is "
"removed and replaced with the synthesized events. e.g. ::"
msgstr ""

#: ../../../trace/coresight/coresight.rst:556
msgid ""
"Below is an example of using ARM ETM for autoFDO.  It requires autofdo "
"(https://github.com/google/autofdo) and gcc version 5.  The bubble sort "
"example is from the AutoFDO tutorial (https://gcc.gnu.org/wiki/AutoFDO/"
"Tutorial). ::"
msgstr ""

#: ../../../trace/coresight/coresight.rst:580
msgid "Config option formats"
msgstr ""

#: ../../../trace/coresight/coresight.rst:582
msgid ""
"The following strings can be provided between // on the perf command line to "
"enable various options. They are also listed in the folder /sys/bus/"
"event_source/devices/cs_etm/format/"
msgstr ""

#: ../../../trace/coresight/coresight.rst:588
msgid "Option"
msgstr ""

#: ../../../trace/coresight/coresight.rst:589
msgid "Description"
msgstr "描述"

#: ../../../trace/coresight/coresight.rst:590
msgid "branch_broadcast"
msgstr ""

#: ../../../trace/coresight/coresight.rst:591
msgid ""
"Session local version of the system wide setting: :ref:`ETM_MODE_BB "
"<coresight-branch-broadcast>`"
msgstr ""

#: ../../../trace/coresight/coresight.rst:593
msgid "contextid"
msgstr ""

#: ../../../trace/coresight/coresight.rst:594
#: ../../../trace/coresight/coresight.rst:596
#: ../../../trace/coresight/coresight.rst:598
msgid "See `Tracing PID`_"
msgstr ""

#: ../../../trace/coresight/coresight.rst:595
msgid "contextid1"
msgstr ""

#: ../../../trace/coresight/coresight.rst:597
msgid "contextid2"
msgstr ""

#: ../../../trace/coresight/coresight.rst:599
msgid "configid"
msgstr ""

#: ../../../trace/coresight/coresight.rst:600
msgid ""
"Selection for a custom configuration. This is an implementation detail and "
"not used directly, see :ref:`trace/coresight/coresight-config:Using "
"Configurations in perf`"
msgstr ""

#: ../../../trace/coresight/coresight.rst:602
msgid "preset"
msgstr ""

#: ../../../trace/coresight/coresight.rst:603
msgid ""
"Override for parameters in a custom configuration, see :ref:`trace/coresight/"
"coresight-config:Using Configurations in perf`"
msgstr ""

#: ../../../trace/coresight/coresight.rst:605
msgid "sinkid"
msgstr ""

#: ../../../trace/coresight/coresight.rst:606
msgid ""
"Hashed version of the string to select a sink, automatically set when using "
"the @ notation. This is an internal implementation detail and is not used "
"directly, see `Using perf framework`_."
msgstr ""

#: ../../../trace/coresight/coresight.rst:609
msgid "cycacc"
msgstr ""

#: ../../../trace/coresight/coresight.rst:610
msgid ""
"Session local version of the system wide setting: :ref:`ETMv4_MODE_CYCACC "
"<coresight-cycle-accurate>`"
msgstr ""

#: ../../../trace/coresight/coresight.rst:612
msgid "retstack"
msgstr ""

#: ../../../trace/coresight/coresight.rst:613
msgid ""
"Session local version of the system wide setting: :ref:`ETM_MODE_RETURNSTACK "
"<coresight-return-stack>`"
msgstr ""

#: ../../../trace/coresight/coresight.rst:615
msgid "timestamp"
msgstr ""

#: ../../../trace/coresight/coresight.rst:616
msgid ""
"Session local version of the system wide setting: :ref:`ETMv4_MODE_TIMESTAMP "
"<coresight-timestamp>`"
msgstr ""

#: ../../../trace/coresight/coresight.rst:618
msgid "cc_threshold"
msgstr ""

#: ../../../trace/coresight/coresight.rst:619
msgid ""
"Cycle count threshold value. If nothing is provided here or the provided "
"value is 0, then the default value i.e 0x100 will be used. If provided value "
"is less than minimum cycles threshold value, as indicated via TRCIDR3."
"CCITMIN, then the minimum value will be used instead."
msgstr ""

#: ../../../trace/coresight/coresight.rst:624
msgid "How to use the STM module"
msgstr ""

#: ../../../trace/coresight/coresight.rst:626
msgid ""
"Using the System Trace Macrocell module is the same as the tracers - the "
"only difference is that clients are driving the trace capture rather than "
"the program flow through the code."
msgstr ""

#: ../../../trace/coresight/coresight.rst:630
msgid ""
"As with any other CoreSight component, specifics about the STM tracer can be "
"found in sysfs with more information on each entry being found in [#first]_::"
msgstr ""

#: ../../../trace/coresight/coresight.rst:638
msgid ""
"Like any other source a sink needs to be identified and the STM enabled "
"before being used::"
msgstr ""

#: ../../../trace/coresight/coresight.rst:644
msgid ""
"From there user space applications can request and use channels using the "
"devfs interface provided for that purpose by the generic STM API::"
msgstr ""

#: ../../../trace/coresight/coresight.rst:651
msgid ""
"Details on how to use the generic STM API can be found here: - Documentation/"
"trace/stm.rst [#second]_."
msgstr ""

#: ../../../trace/coresight/coresight.rst:655
msgid "The CTI & CTM Modules"
msgstr ""

#: ../../../trace/coresight/coresight.rst:657
msgid ""
"The CTI (Cross Trigger Interface) provides a set of trigger signals between "
"individual CTIs and components, and can propagate these between all CTIs via "
"channels on the CTM (Cross Trigger Matrix)."
msgstr ""

#: ../../../trace/coresight/coresight.rst:661
msgid ""
"A separate documentation file is provided to explain the use of these "
"devices. (Documentation/trace/coresight/coresight-ect.rst) [#fourth]_."
msgstr ""

#: ../../../trace/coresight/coresight.rst:665
msgid "CoreSight System Configuration"
msgstr ""

#: ../../../trace/coresight/coresight.rst:667
msgid ""
"CoreSight components can be complex devices with many programming options. "
"Furthermore, components can be programmed to interact with each other across "
"the complete system."
msgstr ""

#: ../../../trace/coresight/coresight.rst:671
msgid ""
"A CoreSight System Configuration manager is provided to allow these complex "
"programming configurations to be selected and used easily from perf and "
"sysfs."
msgstr ""

#: ../../../trace/coresight/coresight.rst:674
msgid ""
"See the separate document for further information. (Documentation/trace/"
"coresight/coresight-config.rst) [#fifth]_."
msgstr ""

#: ../../../trace/coresight/coresight.rst:678
msgid "Documentation/ABI/testing/sysfs-bus-coresight-devices-stm"
msgstr ""

#: ../../../trace/coresight/coresight.rst:680
msgid "Documentation/trace/stm.rst"
msgstr ""

#: ../../../trace/coresight/coresight.rst:682
msgid "https://github.com/Linaro/perf-opencsd"
msgstr ""

#: ../../../trace/coresight/coresight.rst:684
msgid "Documentation/trace/coresight/coresight-ect.rst"
msgstr ""

#: ../../../trace/coresight/coresight.rst:686
msgid "Documentation/trace/coresight/coresight-config.rst"
msgstr ""
