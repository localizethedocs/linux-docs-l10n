# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../PCI/endpoint/pci-ntb-function.rst:5
msgid "PCI NTB Function"
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:0
msgid "Author"
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:7
msgid "Kishon Vijay Abraham I <kishon@ti.com>"
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:9
msgid ""
"PCI Non-Transparent Bridges (NTB) allow two host systems to communicate with "
"each other by exposing each host as a device to the other host. NTBs "
"typically support the ability to generate interrupts on the remote machine, "
"expose memory ranges as BARs, and perform DMA.  They also support "
"scratchpads, which are areas of memory within the NTB that are accessible "
"from both machines."
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:16
msgid ""
"PCI NTB Function allows two different systems (or hosts) to communicate with "
"each other by configuring the endpoint instances in such a way that "
"transactions from one system are routed to the other system."
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:20
msgid ""
"In the below diagram, PCI NTB function configures the SoC with multiple PCI "
"Endpoint (EP) instances in such a way that transactions from one EP "
"controller are routed to the other EP controller. Once PCI NTB function "
"configures the SoC with multiple EP instances, HOST1 and HOST2 can "
"communicate with each other using SoC as a bridge."
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:49
msgid "Constructs used for Implementing NTB"
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:51
#: ../../../PCI/endpoint/pci-ntb-function.rst:239
msgid "Config Region"
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:52
msgid "Self Scratchpad Registers"
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:53
msgid "Peer Scratchpad Registers"
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:54
msgid "Doorbell (DB) Registers"
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:55
msgid "Memory Window (MW)"
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:59
msgid "Config Region:"
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:61
msgid ""
"Config Region is a construct that is specific to NTB implemented using NTB "
"Endpoint Function Driver. The host and endpoint side NTB function driver "
"will exchange information with each other using this region. Config Region "
"has Control/Status Registers for configuring the Endpoint Controller. Host "
"can write into this region for configuring the outbound Address Translation "
"Unit (ATU) and to indicate the link status. Endpoint can indicate the status "
"of commands issued by host in this region. Endpoint can also indicate the "
"scratchpad offset and number of memory windows to the host using this region."
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:70
msgid ""
"The format of Config Region is given below. All the fields here are 32 bits."
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:202
msgid "Scratchpad Registers:"
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:204
msgid ""
"Each host has its own register space allocated in the memory of NTB endpoint "
"controller. They are both readable and writable from both sides of the "
"bridge. They are used by applications built over NTB and can be used to pass "
"control and status information between both sides of a device."
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:209
msgid "Scratchpad registers has 2 parts"
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:210
msgid "Self Scratchpad: Host's own register space"
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:211
msgid "Peer Scratchpad: Remote host's register space."
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:214
msgid "Doorbell Registers:"
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:216
msgid "Doorbell Registers are used by the hosts to interrupt each other."
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:219
msgid "Memory Window:"
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:221
msgid ""
"Actual transfer of data between the two hosts will happen using the memory "
"window."
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:225
msgid "Modeling Constructs:"
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:227
msgid ""
"There are 5 or more distinct regions (config, self scratchpad, peer "
"scratchpad, doorbell, one or more memory windows) to be modeled to achieve "
"NTB functionality. At least one memory window is required while more than "
"one is permitted. All these regions should be mapped to BARs for hosts to "
"access these regions."
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:233
msgid ""
"If one 32-bit BAR is allocated for each of these regions, the scheme would "
"look like this:"
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:237
#: ../../../PCI/endpoint/pci-ntb-function.rst:259
msgid "BAR NO"
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:237
#: ../../../PCI/endpoint/pci-ntb-function.rst:259
msgid "CONSTRUCTS USED"
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:239
#: ../../../PCI/endpoint/pci-ntb-function.rst:261
msgid "BAR0"
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:240
#: ../../../PCI/endpoint/pci-ntb-function.rst:262
msgid "BAR1"
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:240
msgid "Self Scratchpad"
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:241
#: ../../../PCI/endpoint/pci-ntb-function.rst:263
msgid "BAR2"
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:241
#: ../../../PCI/endpoint/pci-ntb-function.rst:262
msgid "Peer Scratchpad"
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:242
#: ../../../PCI/endpoint/pci-ntb-function.rst:264
msgid "BAR3"
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:242
msgid "Doorbell"
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:243
#: ../../../PCI/endpoint/pci-ntb-function.rst:265
msgid "BAR4"
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:243
msgid "Memory Window 1"
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:244
#: ../../../PCI/endpoint/pci-ntb-function.rst:266
msgid "BAR5"
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:244
#: ../../../PCI/endpoint/pci-ntb-function.rst:264
msgid "Memory Window 2"
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:247
msgid ""
"However if we allocate a separate BAR for each of the regions, there would "
"not be enough BARs for all the regions in a platform that supports only 64-"
"bit BARs."
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:251
msgid ""
"In order to be supported by most of the platforms, the regions should be "
"packed and mapped to BARs in a way that provides NTB functionality and also "
"makes sure the host doesn't access any region that it is not supposed to."
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:256
msgid "The following scheme is used in EPF NTB Function:"
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:261
msgid "Config Region + Self Scratchpad"
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:263
msgid "Doorbell + Memory Window 1"
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:265
msgid "Memory Window 3"
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:266
msgid "Memory Window 4"
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:269
msgid ""
"With this scheme, for the basic NTB functionality 3 BARs should be "
"sufficient."
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:272
msgid "Modeling Config/Scratchpad Region:"
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:291
msgid ""
"Above diagram shows Config region + Scratchpad region for HOST1 (connected "
"to EP controller 1) allocated in local memory. The HOST1 can access the "
"config region and scratchpad region (self scratchpad) using BAR0 of EP "
"controller 1. The peer host (HOST2 connected to EP controller 2) can also "
"access this scratchpad region (peer scratchpad) using BAR1 of EP controller "
"2. This diagram shows the case where Config region and Scratchpad regions "
"are allocated for HOST1, however the same is applicable for HOST2."
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:300
msgid "Modeling Doorbell/Memory Window 1:"
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:335
msgid ""
"Above diagram shows how the doorbell and memory window 1 is mapped so that "
"HOST1 can raise doorbell interrupt on HOST2 and also how HOST1 can access "
"buffers exposed by HOST2 using memory window1 (MW1). Here doorbell and "
"memory window 1 regions are allocated in EP controller 2 outbound (OB) "
"address space. Allocating and configuring BARs for doorbell and memory "
"window1 is done during the initialization phase of NTB endpoint function "
"driver. Mapping from EP controller 2 OB space to PCI address space is done "
"when HOST2 sends CMD_CONFIGURE_MW/CMD_CONFIGURE_DOORBELL."
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:345
msgid "Modeling Optional Memory Windows:"
msgstr ""

#: ../../../PCI/endpoint/pci-ntb-function.rst:347
msgid ""
"This is modeled the same was as MW1 but each of the additional memory "
"windows is mapped to separate BARs."
msgstr ""
