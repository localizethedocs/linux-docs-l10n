# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../userspace-api/media/mediactl/media-request-ioc-reinit.rst:8
msgid "ioctl MEDIA_REQUEST_IOC_REINIT"
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-reinit.rst:11
msgid "Name"
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-reinit.rst:13
msgid "MEDIA_REQUEST_IOC_REINIT - Re-initialize a request"
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-reinit.rst:16
msgid "Synopsis"
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-reinit.rst:20
msgid "``int ioctl(int request_fd, MEDIA_REQUEST_IOC_REINIT)``"
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-reinit.rst:23
msgid "Arguments"
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-reinit.rst:25
msgid "``request_fd``"
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-reinit.rst:26
msgid "File descriptor returned by :ref:`MEDIA_IOC_REQUEST_ALLOC`."
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-reinit.rst:29
msgid "Description"
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-reinit.rst:31
msgid ""
"If the media device supports :ref:`requests <media-request-api>`, then this "
"request ioctl can be used to re-initialize a previously allocated request."
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-reinit.rst:35
msgid ""
"Re-initializing a request will clear any existing data from the request. "
"This avoids having to :c:func:`close()` a completed request and allocate a "
"new request. Instead the completed request can just be re-initialized and it "
"is ready to be used again."
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-reinit.rst:40
msgid ""
"A request can only be re-initialized if it either has not been queued yet, "
"or if it was queued and completed. Otherwise it will set ``errno`` to "
"``EBUSY``. No other error codes can be returned."
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-reinit.rst:45
msgid "Return Value"
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-reinit.rst:47
msgid ""
"On success 0 is returned, on error -1 and the ``errno`` variable is set "
"appropriately."
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-reinit.rst:50
msgid "EBUSY"
msgstr ""

#: ../../../userspace-api/media/mediactl/media-request-ioc-reinit.rst:51
msgid "The request is queued but not yet completed."
msgstr ""
