# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../rust/testing.rst:4
msgid "Testing"
msgstr ""

#: ../../../rust/testing.rst:6
msgid ""
"This document contains useful information how to test the Rust code in the "
"kernel."
msgstr ""

#: ../../../rust/testing.rst:9
msgid "There are three sorts of tests:"
msgstr ""

#: ../../../rust/testing.rst:11
msgid "The KUnit tests."
msgstr ""

#: ../../../rust/testing.rst:12
msgid "The ``#[test]`` tests."
msgstr ""

#: ../../../rust/testing.rst:13
msgid "The Kselftests."
msgstr ""

#: ../../../rust/testing.rst:16
msgid "The KUnit tests"
msgstr ""

#: ../../../rust/testing.rst:18
msgid ""
"These are the tests that come from the examples in the Rust documentation. "
"They get transformed into KUnit tests."
msgstr ""

#: ../../../rust/testing.rst:22
msgid "Usage"
msgstr ""

#: ../../../rust/testing.rst:24
msgid ""
"These tests can be run via KUnit. For example via ``kunit_tool`` (``kunit."
"py``) on the command line::"
msgstr ""

#: ../../../rust/testing.rst:29
msgid ""
"Alternatively, KUnit can run them as kernel built-in at boot. Refer to "
"Documentation/dev-tools/kunit/index.rst for the general KUnit documentation "
"and Documentation/dev-tools/kunit/architecture.rst for the details of kernel "
"built-in vs. command line testing."
msgstr ""

#: ../../../rust/testing.rst:34
msgid "To use these KUnit doctests, the following must be enabled::"
msgstr ""

#: ../../../rust/testing.rst:41
msgid "in the kernel config system."
msgstr ""

#: ../../../rust/testing.rst:44
msgid "KUnit tests are documentation tests"
msgstr ""

#: ../../../rust/testing.rst:46
msgid ""
"These documentation tests are typically examples of usage of any item (e.g. "
"function, struct, module...)."
msgstr ""

#: ../../../rust/testing.rst:49
msgid ""
"They are very convenient because they are just written alongside the "
"documentation. For instance:"
msgstr ""

#: ../../../rust/testing.rst:63
msgid ""
"In userspace, the tests are collected and run via ``rustdoc``. Using the "
"tool as-is would be useful already, since it allows verifying that examples "
"compile (thus enforcing they are kept in sync with the code they document) "
"and as well as running those that do not depend on in-kernel APIs."
msgstr ""

#: ../../../rust/testing.rst:68
msgid ""
"For the kernel, however, these tests get transformed into KUnit test suites. "
"This means that doctests get compiled as Rust kernel objects, allowing them "
"to run against a built kernel."
msgstr ""

#: ../../../rust/testing.rst:72
msgid ""
"A benefit of this KUnit integration is that Rust doctests get to reuse "
"existing testing facilities. For instance, the kernel log would look like::"
msgstr ""

#: ../../../rust/testing.rst:93
msgid ""
"Tests using the `? <https://doc.rust-lang.org/reference/expressions/operator-"
"expr.html#the-question-mark-operator>`_ operator are also supported as "
"usual, e.g.:"
msgstr ""

#: ../../../rust/testing.rst:104
msgid ""
"The tests are also compiled with Clippy under ``CLIPPY=1``, just like normal "
"code, thus also benefitting from extra linting."
msgstr ""

#: ../../../rust/testing.rst:107
msgid ""
"In order for developers to easily see which line of doctest code caused a "
"failure, a KTAP diagnostic line is printed to the log. This contains the "
"location (file and line) of the original test (i.e. instead of the location "
"in the generated Rust file)::"
msgstr ""

#: ../../../rust/testing.rst:114
msgid ""
"Rust tests appear to assert using the usual ``assert!`` and ``assert_eq!`` "
"macros from the Rust standard library (``core``). We provide a custom "
"version that forwards the call to KUnit instead. Importantly, these macros "
"do not require passing context, unlike those for KUnit testing (i.e. "
"``struct kunit *``). This makes them easier to use, and readers of the "
"documentation do not need to care about which testing framework is used. In "
"addition, it may allow us to test third-party code more easily in the future."
msgstr ""

#: ../../../rust/testing.rst:122
msgid ""
"A current limitation is that KUnit does not support assertions in other "
"tasks. Thus, we presently simply print an error to the kernel log if an "
"assertion actually failed. Additionally, doctests are not run for nonpublic "
"functions."
msgstr ""

#: ../../../rust/testing.rst:126
msgid ""
"Since these tests are examples, i.e. they are part of the documentation, "
"they should generally be written like \"real code\". Thus, for example, "
"instead of using ``unwrap()`` or ``expect()``, use the ``?`` operator. For "
"more background, please see:"
msgstr ""

#: ../../../rust/testing.rst:131
msgid ""
"https://rust.docs.kernel.org/kernel/error/type.Result.html#error-codes-in-c-"
"and-rust"
msgstr ""

#: ../../../rust/testing.rst:134
msgid "The ``#[test]`` tests"
msgstr ""

#: ../../../rust/testing.rst:136
msgid ""
"Additionally, there are the ``#[test]`` tests. Like for documentation tests, "
"these are also fairly similar to what you would expect from userspace, and "
"they are also mapped to KUnit."
msgstr ""

#: ../../../rust/testing.rst:140
msgid ""
"These tests are introduced by the ``kunit_tests`` procedural macro, which "
"takes the name of the test suite as an argument."
msgstr ""

#: ../../../rust/testing.rst:143
msgid ""
"For instance, assume we want to test the function ``f`` from the "
"documentation tests section. We could write, in the same file where we have "
"our function:"
msgstr ""

#: ../../../rust/testing.rst:158
msgid "And if we run it, the kernel log would look like::"
msgstr ""

#: ../../../rust/testing.rst:168
msgid ""
"Like documentation tests, the ``assert!`` and ``assert_eq!`` macros are "
"mapped back to KUnit and do not panic. Similarly, the `? <https://doc.rust-"
"lang.org/reference/expressions/operator-expr.html#the-question-mark-"
"operator>`_ operator is supported, i.e. the test functions may return either "
"nothing (i.e. the unit type ``()``) or ``Result`` (i.e. any ``Result<T, "
"E>``). For instance:"
msgstr ""

#: ../../../rust/testing.rst:188
msgid ""
"If we run the test and the call to ``g`` fails, then the kernel log would "
"show::"
msgstr ""

#: ../../../rust/testing.rst:200
msgid ""
"If a ``#[test]`` test could be useful as an example for the user, then "
"please use a documentation test instead. Even edge cases of an API, e.g. "
"error or boundary cases, can be interesting to show in examples."
msgstr ""

#: ../../../rust/testing.rst:205
msgid "The ``rusttest`` host tests"
msgstr ""

#: ../../../rust/testing.rst:207
msgid ""
"These are userspace tests that can be built and run in the host (i.e. the "
"one that performs the kernel build) using the ``rusttest`` Make target::"
msgstr ""

#: ../../../rust/testing.rst:212
msgid "This requires the kernel ``.config``."
msgstr ""

#: ../../../rust/testing.rst:214
msgid ""
"Currently, they are mostly used for testing the ``macros`` crate's examples."
msgstr ""

#: ../../../rust/testing.rst:217
msgid "The Kselftests"
msgstr ""

#: ../../../rust/testing.rst:219
msgid ""
"Kselftests are also available in the ``tools/testing/selftests/rust`` folder."
msgstr ""

#: ../../../rust/testing.rst:221
msgid ""
"The kernel config options required for the tests are listed in the ``tools/"
"testing/selftests/rust/config`` file and can be included with the aid of the "
"``merge_config.sh`` script::"
msgstr ""

#: ../../../rust/testing.rst:227
msgid ""
"The kselftests are built within the kernel source tree and are intended to "
"be executed on a system that is running the same kernel."
msgstr ""

#: ../../../rust/testing.rst:230
msgid ""
"Once a kernel matching the source tree has been installed and booted, the "
"tests can be compiled and executed using the following command::"
msgstr ""

#: ../../../rust/testing.rst:235
msgid ""
"Refer to Documentation/dev-tools/kselftest.rst for the general Kselftest "
"documentation."
msgstr ""
