# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../rust/coding-guidelines.rst:4
msgid "Coding Guidelines"
msgstr ""

#: ../../../rust/coding-guidelines.rst:6
msgid "This document describes how to write Rust code in the kernel."
msgstr ""

#: ../../../rust/coding-guidelines.rst:10
msgid "Style & formatting"
msgstr ""

#: ../../../rust/coding-guidelines.rst:12
msgid ""
"The code should be formatted using ``rustfmt``. In this way, a person "
"contributing from time to time to the kernel does not need to learn and "
"remember one more style guide. More importantly, reviewers and maintainers "
"do not need to spend time pointing out style issues anymore, and thus less "
"patch roundtrips may be needed to land a change."
msgstr ""

#: ../../../rust/coding-guidelines.rst:18
msgid ""
"Conventions on comments and documentation are not checked by ``rustfmt``. "
"Thus those are still needed to be taken care of."
msgstr ""

#: ../../../rust/coding-guidelines.rst:21
msgid ""
"The default settings of ``rustfmt`` are used. This means the idiomatic Rust "
"style is followed. For instance, 4 spaces are used for indentation rather "
"than tabs."
msgstr ""

#: ../../../rust/coding-guidelines.rst:25
msgid ""
"It is convenient to instruct editors/IDEs to format while typing, when "
"saving or at commit time. However, if for some reason reformatting the "
"entire kernel Rust sources is needed at some point, the following can be "
"run::"
msgstr ""

#: ../../../rust/coding-guidelines.rst:32
msgid ""
"It is also possible to check if everything is formatted (printing a diff "
"otherwise), for instance for a CI, with::"
msgstr ""

#: ../../../rust/coding-guidelines.rst:37
msgid ""
"Like ``clang-format`` for the rest of the kernel, ``rustfmt`` works on "
"individual files, and does not require a kernel configuration. Sometimes it "
"may even work with broken code."
msgstr ""

#: ../../../rust/coding-guidelines.rst:43
msgid "Comments"
msgstr ""

#: ../../../rust/coding-guidelines.rst:45
msgid ""
"\"Normal\" comments (i.e. ``//``, rather than code documentation which "
"starts with ``///`` or ``//!``) are written in Markdown the same way as "
"documentation comments are, even though they will not be rendered. This "
"improves consistency, simplifies the rules and allows to move content "
"between the two kinds of comments more easily. For instance:"
msgstr ""

#: ../../../rust/coding-guidelines.rst:56
msgid ""
"Furthermore, just like documentation, comments are capitalized at the "
"beginning of a sentence and ended with a period (even if it is a single "
"sentence). This includes ``// SAFETY:``, ``// TODO:`` and other \"tagged\" "
"comments, e.g.:"
msgstr ""

#: ../../../rust/coding-guidelines.rst:64
msgid ""
"Comments should not be used for documentation purposes: comments are "
"intended for implementation details, not users. This distinction is useful "
"even if the reader of the source file is both an implementor and a user of "
"an API. In fact, sometimes it is useful to use both comments and "
"documentation at the same time. For instance, for a ``TODO`` list or to "
"comment on the documentation itself. For the latter case, comments can be "
"inserted in the middle; that is, closer to the line of documentation to be "
"commented. For any other case, comments are written after the documentation, "
"e.g.:"
msgstr ""

#: ../../../rust/coding-guidelines.rst:88
msgid ""
"This applies to both public and private items. This increases consistency "
"with public items, allows changes to visibility with less changes involved "
"and will allow us to potentially generate the documentation for private "
"items as well. In other words, if documentation is written for a private "
"item, then ``///`` should still be used. For instance:"
msgstr ""

#: ../../../rust/coding-guidelines.rst:100
msgid ""
"One special kind of comments are the ``// SAFETY:`` comments. These must "
"appear before every ``unsafe`` block, and they explain why the code inside "
"the block is correct/sound, i.e. why it cannot trigger undefined behavior in "
"any case, e.g.:"
msgstr ""

#: ../../../rust/coding-guidelines.rst:109
msgid ""
"``// SAFETY:`` comments are not to be confused with the ``# Safety`` "
"sections in code documentation. ``# Safety`` sections specify the contract "
"that callers (for functions) or implementors (for traits) need to abide by. "
"``// SAFETY:`` comments show why a call (for functions) or implementation "
"(for traits) actually respects the preconditions stated in a ``# Safety`` "
"section or the language reference."
msgstr ""

#: ../../../rust/coding-guidelines.rst:118
msgid "Code documentation"
msgstr ""

#: ../../../rust/coding-guidelines.rst:120
msgid ""
"Rust kernel code is not documented like C kernel code (i.e. via kernel-doc). "
"Instead, the usual system for documenting Rust code is used: the ``rustdoc`` "
"tool, which uses Markdown (a lightweight markup language)."
msgstr ""

#: ../../../rust/coding-guidelines.rst:124
msgid ""
"To learn Markdown, there are many guides available out there. For instance, "
"the one at:"
msgstr ""

#: ../../../rust/coding-guidelines.rst:127
msgid "https://commonmark.org/help/"
msgstr ""

#: ../../../rust/coding-guidelines.rst:129
msgid "This is how a well-documented Rust function may look like:"
msgstr ""

#: ../../../rust/coding-guidelines.rst:157
msgid ""
"This example showcases a few ``rustdoc`` features and some conventions "
"followed in the kernel:"
msgstr ""

#: ../../../rust/coding-guidelines.rst:160
msgid ""
"The first paragraph must be a single sentence briefly describing what the "
"documented item does. Further explanations must go in extra paragraphs."
msgstr ""

#: ../../../rust/coding-guidelines.rst:163
msgid ""
"Unsafe functions must document their safety preconditions under a ``# "
"Safety`` section."
msgstr ""

#: ../../../rust/coding-guidelines.rst:166
msgid ""
"While not shown here, if a function may panic, the conditions under which "
"that happens must be described under a ``# Panics`` section."
msgstr ""

#: ../../../rust/coding-guidelines.rst:169
msgid ""
"Please note that panicking should be very rare and used only with a good "
"reason. In almost all cases, a fallible approach should be used, typically "
"returning a ``Result``."
msgstr ""

#: ../../../rust/coding-guidelines.rst:173
msgid ""
"If providing examples of usage would help readers, they must be written in a "
"section called ``# Examples``."
msgstr ""

#: ../../../rust/coding-guidelines.rst:176
msgid ""
"Rust items (functions, types, constants...) must be linked appropriately "
"(``rustdoc`` will create a link automatically)."
msgstr ""

#: ../../../rust/coding-guidelines.rst:179
msgid ""
"Any ``unsafe`` block must be preceded by a ``// SAFETY:`` comment describing "
"why the code inside is sound."
msgstr ""

#: ../../../rust/coding-guidelines.rst:182
msgid ""
"While sometimes the reason might look trivial and therefore unneeded, "
"writing these comments is not just a good way of documenting what has been "
"taken into account, but most importantly, it provides a way to know that "
"there are no *extra* implicit constraints."
msgstr ""

#: ../../../rust/coding-guidelines.rst:187
msgid ""
"To learn more about how to write documentation for Rust and extra features, "
"please take a look at the ``rustdoc`` book at:"
msgstr ""

#: ../../../rust/coding-guidelines.rst:190
msgid "https://doc.rust-lang.org/rustdoc/how-to-write-documentation.html"
msgstr ""

#: ../../../rust/coding-guidelines.rst:192
msgid ""
"In addition, the kernel supports creating links relative to the source tree "
"by prefixing the link destination with ``srctree/``. For instance:"
msgstr ""

#: ../../../rust/coding-guidelines.rst:199
msgid "or:"
msgstr ""

#: ../../../rust/coding-guidelines.rst:207
msgid "C FFI types"
msgstr ""

#: ../../../rust/coding-guidelines.rst:209
msgid ""
"Rust kernel code refers to C types, such as ``int``, using type aliases such "
"as ``c_int``, which are readily available from the ``kernel`` prelude. "
"Please do not use the aliases from ``core::ffi`` -- they may not map to the "
"correct types."
msgstr ""

#: ../../../rust/coding-guidelines.rst:213
msgid ""
"These aliases should generally be referred directly by their identifier, i."
"e. as a single segment path. For instance:"
msgstr ""

#: ../../../rust/coding-guidelines.rst:224
msgid "Naming"
msgstr ""

#: ../../../rust/coding-guidelines.rst:226
msgid "Rust kernel code follows the usual Rust naming conventions:"
msgstr ""

#: ../../../rust/coding-guidelines.rst:228
msgid "https://rust-lang.github.io/api-guidelines/naming.html"
msgstr ""

#: ../../../rust/coding-guidelines.rst:230
msgid ""
"When existing C concepts (e.g. macros, functions, objects...) are wrapped "
"into a Rust abstraction, a name as close as reasonably possible to the C "
"side should be used in order to avoid confusion and to improve readability "
"when switching back and forth between the C and Rust sides. For instance, "
"macros such as ``pr_info`` from C are named the same in the Rust side."
msgstr ""

#: ../../../rust/coding-guidelines.rst:236
msgid ""
"Having said that, casing should be adjusted to follow the Rust naming "
"conventions, and namespacing introduced by modules and types should not be "
"repeated in the item names. For instance, when wrapping constants like:"
msgstr ""

#: ../../../rust/coding-guidelines.rst:245
msgid "The equivalent in Rust may look like (ignoring documentation):"
msgstr ""

#: ../../../rust/coding-guidelines.rst:256
msgid ""
"That is, the equivalent of ``GPIO_LINE_DIRECTION_IN`` would be referred to "
"as ``gpio::LineDirection::In``. In particular, it should not be named "
"``gpio::gpio_line_direction::GPIO_LINE_DIRECTION_IN``."
msgstr ""

#: ../../../rust/coding-guidelines.rst:262
msgid "Lints"
msgstr ""

#: ../../../rust/coding-guidelines.rst:264
msgid ""
"In Rust, it is possible to ``allow`` particular warnings (diagnostics, "
"lints) locally, making the compiler ignore instances of a given warning "
"within a given function, module, block, etc."
msgstr ""

#: ../../../rust/coding-guidelines.rst:268
msgid ""
"It is similar to ``#pragma GCC diagnostic push`` + ``ignored`` + ``pop`` in "
"C [#]_:"
msgstr ""

#: ../../../rust/coding-guidelines.rst:278
msgid ""
"In this particular case, the kernel's ``__{always,maybe}_unused`` attributes "
"(C23's ``[[maybe_unused]]``) may be used; however, the example is meant to "
"reflect the equivalent lint in Rust discussed afterwards."
msgstr ""

#: ../../../rust/coding-guidelines.rst:282
msgid "But way less verbose:"
msgstr ""

#: ../../../rust/coding-guidelines.rst:289
msgid ""
"By that virtue, it makes it possible to comfortably enable more diagnostics "
"by default (i.e. outside ``W=`` levels). In particular, those that may have "
"some false positives but that are otherwise quite useful to keep enabled to "
"catch potential mistakes."
msgstr ""

#: ../../../rust/coding-guidelines.rst:294
msgid ""
"On top of that, Rust provides the ``expect`` attribute which takes this "
"further. It makes the compiler warn if the warning was not produced. For "
"instance, the following will ensure that, when ``f()`` is called somewhere, "
"we will have to remove the attribute:"
msgstr ""

#: ../../../rust/coding-guidelines.rst:304
msgid "If we do not, we get a warning from the compiler::"
msgstr ""

#: ../../../rust/coding-guidelines.rst:314
msgid ""
"This means that ``expect``\\ s do not get forgotten when they are not "
"needed, which may happen in several situations, e.g.:"
msgstr ""

#: ../../../rust/coding-guidelines.rst:317
msgid "Temporary attributes added while developing."
msgstr ""

#: ../../../rust/coding-guidelines.rst:319
msgid ""
"Improvements in lints in the compiler, Clippy or custom tools which may "
"remove a false positive."
msgstr ""

#: ../../../rust/coding-guidelines.rst:322
msgid ""
"When the lint is not needed anymore because it was expected that it would be "
"removed at some point, such as the ``dead_code`` example above."
msgstr ""

#: ../../../rust/coding-guidelines.rst:325
msgid ""
"It also increases the visibility of the remaining ``allow``\\ s and reduces "
"the chance of misapplying one."
msgstr ""

#: ../../../rust/coding-guidelines.rst:328
msgid "Thus prefer ``expect`` over ``allow`` unless:"
msgstr ""

#: ../../../rust/coding-guidelines.rst:330
msgid ""
"Conditional compilation triggers the warning in some cases but not others."
msgstr ""

#: ../../../rust/coding-guidelines.rst:332
msgid ""
"If there are only a few cases where the warning triggers (or does not "
"trigger) compared to the total number of cases, then one may consider using "
"a conditional ``expect`` (i.e. ``cfg_attr(..., expect(...))``). Otherwise, "
"it is likely simpler to just use ``allow``."
msgstr ""

#: ../../../rust/coding-guidelines.rst:337
msgid ""
"Inside macros, when the different invocations may create expanded code that "
"triggers the warning in some cases but not in others."
msgstr ""

#: ../../../rust/coding-guidelines.rst:340
msgid ""
"When code may trigger a warning for some architectures but not others, such "
"as an ``as`` cast to a C FFI type."
msgstr ""

#: ../../../rust/coding-guidelines.rst:343
msgid "As a more developed example, consider for instance this program:"
msgstr ""

#: ../../../rust/coding-guidelines.rst:354
msgid ""
"Here, function ``g()`` is dead code if ``CONFIG_X`` is not set. Can we use "
"``expect`` here?"
msgstr ""

#: ../../../rust/coding-guidelines.rst:367
msgid ""
"This would emit a lint if ``CONFIG_X`` is set, since it is not dead code in "
"that configuration. Therefore, in cases like this, we cannot use ``expect`` "
"as-is."
msgstr ""

#: ../../../rust/coding-guidelines.rst:370
msgid "A simple possibility is using ``allow``:"
msgstr ""

#: ../../../rust/coding-guidelines.rst:382
msgid "An alternative would be using a conditional ``expect``:"
msgstr ""

#: ../../../rust/coding-guidelines.rst:394
msgid ""
"This would ensure that, if someone introduces another call to ``g()`` "
"somewhere (e.g. unconditionally), then it would be spotted that it is not "
"dead code anymore. However, the ``cfg_attr`` is more complex than a simple "
"``allow``."
msgstr ""

#: ../../../rust/coding-guidelines.rst:398
msgid ""
"Therefore, it is likely that it is not worth using conditional ``expect``\\ "
"s when more than one or two configurations are involved or when the lint may "
"be triggered due to non-local changes (such as ``dead_code``)."
msgstr ""

#: ../../../rust/coding-guidelines.rst:402
msgid "For more information about diagnostics in Rust, please see:"
msgstr ""

#: ../../../rust/coding-guidelines.rst:404
msgid "https://doc.rust-lang.org/stable/reference/attributes/diagnostics.html"
msgstr ""

#: ../../../rust/coding-guidelines.rst:407
msgid "Error handling"
msgstr ""

#: ../../../rust/coding-guidelines.rst:409
msgid ""
"For some background and guidelines about Rust for Linux specific error "
"handling, please see:"
msgstr ""

#: ../../../rust/coding-guidelines.rst:412
msgid ""
"https://rust.docs.kernel.org/kernel/error/type.Result.html#error-codes-in-c-"
"and-rust"
msgstr ""
