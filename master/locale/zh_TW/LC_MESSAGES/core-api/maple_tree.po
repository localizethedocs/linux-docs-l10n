# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-06 15:47+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../core-api/maple_tree.rst:6 ../../../core-api/maple_tree:220:
#: include/linux/maple_tree.h:803 include/linux/maple_tree.h:821
msgid "Maple Tree"
msgstr ""

#: ../../../core-api/maple_tree.rst:0
msgid "Author"
msgstr ""

#: ../../../core-api/maple_tree.rst:8
msgid "Liam R. Howlett"
msgstr ""

#: ../../../core-api/maple_tree.rst:11
msgid "Overview"
msgstr ""

#: ../../../core-api/maple_tree.rst:13
msgid ""
"The Maple Tree is a B-Tree data type which is optimized for storing non-"
"overlapping ranges, including ranges of size 1.  The tree was designed to be "
"simple to use and does not require a user written search method.  It "
"supports iterating over a range of entries and going to the previous or next "
"entry in a cache-efficient manner.  The tree can also be put into an RCU-"
"safe mode of operation which allows reading and writing concurrently.  "
"Writers must synchronize on a lock, which can be the default spinlock, or "
"the user can set the lock to an external lock of a different type."
msgstr ""

#: ../../../core-api/maple_tree.rst:22
msgid ""
"The Maple Tree maintains a small memory footprint and was designed to use "
"modern processor cache efficiently.  The majority of the users will be able "
"to use the normal API.  An :ref:`maple-tree-advanced-api` exists for more "
"complex scenarios.  The most important usage of the Maple Tree is the "
"tracking of the virtual memory areas."
msgstr ""

#: ../../../core-api/maple_tree.rst:28
msgid ""
"The Maple Tree can store values between ``0`` and ``ULONG_MAX``.  The Maple "
"Tree reserves values with the bottom two bits set to '10' which are below "
"4096 (ie 2, 6, 10 .. 4094) for internal use.  If the entries may use "
"reserved entries then the users can convert the entries using xa_mk_value() "
"and convert them back by calling xa_to_value().  If the user needs to use a "
"reserved value, then the user can convert the value when using the :ref:"
"`maple-tree-advanced-api`, but are blocked by the normal API."
msgstr ""

#: ../../../core-api/maple_tree.rst:36
msgid ""
"The Maple Tree can also be configured to support searching for a gap of a "
"given size (or larger)."
msgstr ""

#: ../../../core-api/maple_tree.rst:39
msgid ""
"Pre-allocating of nodes is also supported using the :ref:`maple-tree-"
"advanced-api`.  This is useful for users who must guarantee a successful "
"store operation within a given code segment when allocating cannot be done.  "
"Allocations of nodes are relatively small at around 256 bytes."
msgstr ""

#: ../../../core-api/maple_tree.rst:48
msgid "Normal API"
msgstr ""

#: ../../../core-api/maple_tree.rst:50
msgid ""
"Start by initialising a maple tree, either with DEFINE_MTREE() for "
"statically allocated maple trees or mt_init() for dynamically allocated "
"ones.  A freshly-initialised maple tree contains a ``NULL`` pointer for the "
"range ``0`` - ``ULONG_MAX``.  There are currently two types of maple trees "
"supported: the allocation tree and the regular tree.  The regular tree has a "
"higher branching factor for internal nodes.  The allocation tree has a lower "
"branching factor but allows the user to search for a gap of a given size or "
"larger from either ``0`` upwards or ``ULONG_MAX`` down.  An allocation tree "
"can be used by passing in the ``MT_FLAGS_ALLOC_RANGE`` flag when "
"initialising the tree."
msgstr ""

#: ../../../core-api/maple_tree.rst:60
msgid ""
"You can then set entries using mtree_store() or mtree_store_range(). "
"mtree_store() will overwrite any entry with the new entry and return 0 on "
"success or an error code otherwise.  mtree_store_range() works in the same "
"way but takes a range.  mtree_load() is used to retrieve the entry stored at "
"a given index.  You can use mtree_erase() to erase an entire range by only "
"knowing one value within that range, or mtree_store() call with an entry of "
"NULL may be used to partially erase a range or many ranges at once."
msgstr ""

#: ../../../core-api/maple_tree.rst:68
msgid ""
"If you want to only store a new entry to a range (or index) if that range is "
"currently ``NULL``, you can use mtree_insert_range() or mtree_insert() which "
"return -EEXIST if the range is not empty."
msgstr ""

#: ../../../core-api/maple_tree.rst:72
msgid "You can search for an entry from an index upwards by using mt_find()."
msgstr ""

#: ../../../core-api/maple_tree.rst:74
msgid ""
"You can walk each entry within a range by calling mt_for_each().  You must "
"provide a temporary variable to store a cursor.  If you want to walk each "
"element of the tree then ``0`` and ``ULONG_MAX`` may be used as the range.  "
"If the caller is going to hold the lock for the duration of the walk then it "
"is worth looking at the mas_for_each() API in the :ref:`maple-tree-advanced-"
"api` section."
msgstr ""

#: ../../../core-api/maple_tree.rst:81
msgid ""
"Sometimes it is necessary to ensure the next call to store to a maple tree "
"does not allocate memory, please see :ref:`maple-tree-advanced-api` for this "
"use case."
msgstr ""

#: ../../../core-api/maple_tree.rst:84
msgid ""
"You can use mtree_dup() to duplicate an entire maple tree. It is a more "
"efficient way than inserting all elements one by one into a new tree."
msgstr ""

#: ../../../core-api/maple_tree.rst:87
msgid ""
"Finally, you can remove all entries from a maple tree by calling "
"mtree_destroy().  If the maple tree entries are pointers, you may wish to "
"free the entries first."
msgstr ""

#: ../../../core-api/maple_tree.rst:92
msgid "Allocating Nodes"
msgstr ""

#: ../../../core-api/maple_tree.rst:94
msgid ""
"The allocations are handled by the internal tree code.  See :ref:`maple-tree-"
"advanced-alloc` for other options."
msgstr ""

#: ../../../core-api/maple_tree.rst:98
msgid "Locking"
msgstr ""

#: ../../../core-api/maple_tree.rst:100
msgid ""
"You do not have to worry about locking.  See :ref:`maple-tree-advanced-"
"locks` for other options."
msgstr ""

#: ../../../core-api/maple_tree.rst:103
msgid "The Maple Tree uses RCU and an internal spinlock to synchronise access:"
msgstr ""

#: ../../../core-api/maple_tree.rst:105
msgid "Takes RCU read lock:"
msgstr ""

#: ../../../core-api/maple_tree.rst:106
msgid "mtree_load()"
msgstr ""

#: ../../../core-api/maple_tree.rst:107
msgid "mt_find()"
msgstr ""

#: ../../../core-api/maple_tree.rst:108
msgid "mt_for_each()"
msgstr ""

#: ../../../core-api/maple_tree.rst:109
msgid "mt_next()"
msgstr ""

#: ../../../core-api/maple_tree.rst:110
msgid "mt_prev()"
msgstr ""

#: ../../../core-api/maple_tree.rst:112
msgid "Takes ma_lock internally:"
msgstr ""

#: ../../../core-api/maple_tree.rst:113
msgid "mtree_store()"
msgstr ""

#: ../../../core-api/maple_tree.rst:114
msgid "mtree_store_range()"
msgstr ""

#: ../../../core-api/maple_tree.rst:115
msgid "mtree_insert()"
msgstr ""

#: ../../../core-api/maple_tree.rst:116
msgid "mtree_insert_range()"
msgstr ""

#: ../../../core-api/maple_tree.rst:117
msgid "mtree_erase()"
msgstr ""

#: ../../../core-api/maple_tree.rst:118
msgid "mtree_dup()"
msgstr ""

#: ../../../core-api/maple_tree.rst:119
msgid "mtree_destroy()"
msgstr ""

#: ../../../core-api/maple_tree.rst:120
msgid "mt_set_in_rcu()"
msgstr ""

#: ../../../core-api/maple_tree.rst:121
msgid "mt_clear_in_rcu()"
msgstr ""

#: ../../../core-api/maple_tree.rst:123
msgid ""
"If you want to take advantage of the internal lock to protect the data "
"structures that you are storing in the Maple Tree, you can call mtree_lock() "
"before calling mtree_load(), then take a reference count on the object you "
"have found before calling mtree_unlock().  This will prevent stores from "
"removing the object from the tree between looking up the object and "
"incrementing the refcount.  You can also use RCU to avoid dereferencing "
"freed memory, but an explanation of that is beyond the scope of this "
"document."
msgstr ""

#: ../../../core-api/maple_tree.rst:135
msgid "Advanced API"
msgstr ""

#: ../../../core-api/maple_tree.rst:137
msgid ""
"The advanced API offers more flexibility and better performance at the cost "
"of an interface which can be harder to use and has fewer safeguards. You "
"must take care of your own locking while using the advanced API. You can use "
"the ma_lock, RCU or an external lock for protection. You can mix advanced "
"and normal operations on the same array, as long as the locking is "
"compatible.  The :ref:`maple-tree-normal-api` is implemented in terms of the "
"advanced API."
msgstr ""

#: ../../../core-api/maple_tree.rst:145
msgid ""
"The advanced API is based around the ma_state, this is where the 'mas' "
"prefix originates.  The ma_state struct keeps track of tree operations to "
"make life easier for both internal and external tree users."
msgstr ""

#: ../../../core-api/maple_tree.rst:149
msgid ""
"Initialising the maple tree is the same as in the :ref:`maple-tree-normal-"
"api`. Please see above."
msgstr ""

#: ../../../core-api/maple_tree.rst:152
msgid ""
"The maple state keeps track of the range start and end in mas->index and mas-"
">last, respectively."
msgstr ""

#: ../../../core-api/maple_tree.rst:155
msgid ""
"mas_walk() will walk the tree to the location of mas->index and set the mas-"
">index and mas->last according to the range for the entry."
msgstr ""

#: ../../../core-api/maple_tree.rst:158
msgid ""
"You can set entries using mas_store().  mas_store() will overwrite any entry "
"with the new entry and return the first existing entry that is overwritten. "
"The range is passed in as members of the maple state: index and last."
msgstr ""

#: ../../../core-api/maple_tree.rst:162
msgid ""
"You can use mas_erase() to erase an entire range by setting index and last "
"of the maple state to the desired range to erase.  This will erase the first "
"range that is found in that range, set the maple state index and last as the "
"range that was erased and return the entry that existed at that location."
msgstr ""

#: ../../../core-api/maple_tree.rst:168
msgid ""
"You can walk each entry within a range by using mas_for_each().  If you want "
"to walk each element of the tree then ``0`` and ``ULONG_MAX`` may be used as "
"the range.  If the lock needs to be periodically dropped, see the locking "
"section mas_pause()."
msgstr ""

#: ../../../core-api/maple_tree.rst:173
msgid ""
"Using a maple state allows mas_next() and mas_prev() to function as if the "
"tree was a linked list.  With such a high branching factor the amortized "
"performance penalty is outweighed by cache optimization.  mas_next() will "
"return the next entry which occurs after the entry at index.  mas_prev() "
"will return the previous entry which occurs before the entry at index."
msgstr ""

#: ../../../core-api/maple_tree.rst:179
msgid ""
"mas_find() will find the first entry which exists at or above index on the "
"first call, and the next entry from every subsequent calls."
msgstr ""

#: ../../../core-api/maple_tree.rst:182
msgid ""
"mas_find_rev() will find the first entry which exists at or below the last "
"on the first call, and the previous entry from every subsequent calls."
msgstr ""

#: ../../../core-api/maple_tree.rst:185
msgid ""
"If the user needs to yield the lock during an operation, then the maple "
"state must be paused using mas_pause()."
msgstr ""

#: ../../../core-api/maple_tree.rst:188
msgid ""
"There are a few extra interfaces provided when using an allocation tree. If "
"you wish to search for a gap within a range, then mas_empty_area() or "
"mas_empty_area_rev() can be used.  mas_empty_area() searches for a gap "
"starting at the lowest index given up to the maximum of the range. "
"mas_empty_area_rev() searches for a gap starting at the highest index given "
"and continues downward to the lower bound of the range."
msgstr ""

#: ../../../core-api/maple_tree.rst:198
msgid "Advanced Allocating Nodes"
msgstr ""

#: ../../../core-api/maple_tree.rst:200
msgid ""
"Allocations are usually handled internally to the tree, however if "
"allocations need to occur before a write occurs then calling "
"mas_expected_entries() will allocate the worst-case number of needed nodes "
"to insert the provided number of ranges.  This also causes the tree to enter "
"mass insertion mode.  Once insertions are complete calling mas_destroy() on "
"the maple state will free the unused allocations."
msgstr ""

#: ../../../core-api/maple_tree.rst:210
msgid "Advanced Locking"
msgstr ""

#: ../../../core-api/maple_tree.rst:212
msgid ""
"The maple tree uses a spinlock by default, but external locks can be used "
"for tree updates as well.  To use an external lock, the tree must be "
"initialized with the ``MT_FLAGS_LOCK_EXTERN flag``, this is usually done "
"with the MTREE_INIT_EXT() #define, which takes an external lock as an "
"argument."
msgstr ""

#: ../../../core-api/maple_tree.rst:218
msgid "Functions and structures"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:3
msgid "**Maple tree flags**"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:165
msgid "MT_FLAGS_ALLOC_RANGE       - Track gaps in this tree"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:166
msgid "MT_FLAGS_USE_RCU           - Operate in RCU mode"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:167
msgid ""
"MT_FLAGS_HEIGHT_OFFSET     - The position of the tree height in the flags"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:168
msgid "MT_FLAGS_HEIGHT_MASK       - The mask for the maple tree height value"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:169
msgid "MT_FLAGS_LOCK_MASK         - How the mt_lock is used"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:170
msgid "MT_FLAGS_LOCK_IRQ          - Acquired irq-safe"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:171
msgid "MT_FLAGS_LOCK_BH           - Acquired bh-safe"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:172
msgid "MT_FLAGS_LOCK_EXTERN       - mt_lock is not used"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:174
msgid "MAPLE_HEIGHT_MAX     The largest height that can be stored"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:243
msgid "``MTREE_INIT (name, __flags)``"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:241
msgid "Initialize a maple tree"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:245
#: include/linux/maple_tree.h:257 include/linux/maple_tree.h:359
#: include/linux/maple_tree.h:581 include/linux/maple_tree.h:597
#: include/linux/maple_tree.h:611 include/linux/maple_tree.h:749
#: include/linux/maple_tree.h:769 include/linux/maple_tree.h:786
#: include/linux/maple_tree.h:806 include/linux/maple_tree.h:824
#: include/linux/maple_tree.h:845 include/linux/maple_tree.h:864
#: include/linux/maple_tree.h:894 ../../../core-api/maple_tree:221:
#: lib/maple_tree.c:3832 lib/maple_tree.c:3939 lib/maple_tree.c:3958
#: lib/maple_tree.c:4014 lib/maple_tree.c:4586 lib/maple_tree.c:4879
#: lib/maple_tree.c:4904 lib/maple_tree.c:5057 lib/maple_tree.c:5112
#: lib/maple_tree.c:5148 lib/maple_tree.c:5178 lib/maple_tree.c:5298
#: lib/maple_tree.c:5321 lib/maple_tree.c:5344 lib/maple_tree.c:5429
#: lib/maple_tree.c:5451 lib/maple_tree.c:5474 lib/maple_tree.c:5498
#: lib/maple_tree.c:5518 lib/maple_tree.c:5605 lib/maple_tree.c:5632
#: lib/maple_tree.c:5656 lib/maple_tree.c:5743 lib/maple_tree.c:5769
#: lib/maple_tree.c:5794 lib/maple_tree.c:5838 lib/maple_tree.c:5878
#: lib/maple_tree.c:5916 lib/maple_tree.c:5948 lib/maple_tree.c:5965
#: lib/maple_tree.c:6003 lib/maple_tree.c:6059 lib/maple_tree.c:6141
#: lib/maple_tree.c:6358 lib/maple_tree.c:6396 lib/maple_tree.c:6437
#: lib/maple_tree.c:6455 lib/maple_tree.c:6469 lib/maple_tree.c:6533
msgid "**Parameters**"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:247
#: include/linux/maple_tree.h:259
msgid "``name``"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:242
msgid "The maple tree name"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:244
#: include/linux/maple_tree.h:256
msgid "``__flags``"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:243
#: include/linux/maple_tree.h:255
msgid "The maple tree flags"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:255
msgid "``MTREE_INIT_EXT (name, __flags, __lock)``"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:253
msgid "Initialize a maple tree with an external lock."
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:254
msgid "The tree name"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:257
msgid "``__lock``"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:256
msgid "The external lock"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:355
msgid "Determine if a tree has any present entries."
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:361
msgid "``const struct maple_tree *mt``"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:356
msgid "Maple Tree."
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:358
#: include/linux/maple_tree.h:583 include/linux/maple_tree.h:808
#: include/linux/maple_tree.h:824 ../../../core-api/maple_tree:221:
#: lib/maple_tree.c:6068
msgid "**Context**"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:358
#: include/linux/maple_tree.h:584 include/linux/maple_tree.h:809
#: include/linux/maple_tree.h:825
msgid "Any context."
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:360
#: ../../../core-api/maple_tree:221: lib/maple_tree.c:3833
#: lib/maple_tree.c:3958 lib/maple_tree.c:4019 lib/maple_tree.c:4587
#: lib/maple_tree.c:5058 lib/maple_tree.c:5113 lib/maple_tree.c:5179
#: lib/maple_tree.c:5301 lib/maple_tree.c:5324 lib/maple_tree.c:5348
#: lib/maple_tree.c:5432 lib/maple_tree.c:5455 lib/maple_tree.c:5478
#: lib/maple_tree.c:5519 lib/maple_tree.c:5609 lib/maple_tree.c:5636
#: lib/maple_tree.c:5657 lib/maple_tree.c:5748 lib/maple_tree.c:5774
#: lib/maple_tree.c:5797 lib/maple_tree.c:5839 lib/maple_tree.c:5878
#: lib/maple_tree.c:5919 lib/maple_tree.c:5950 lib/maple_tree.c:5968
#: lib/maple_tree.c:6005 lib/maple_tree.c:6072 lib/maple_tree.c:6143
#: lib/maple_tree.c:6369 lib/maple_tree.c:6406 lib/maple_tree.c:6477
#: lib/maple_tree.c:6537
msgid "**Return**"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:359
msgid "``true`` if the tree contains only NULL pointers."
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:577
msgid "Reset a Maple Tree operation state."
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:583
#: include/linux/maple_tree.h:751 include/linux/maple_tree.h:771
#: include/linux/maple_tree.h:788 ../../../core-api/maple_tree:221:
#: lib/maple_tree.c:3960 lib/maple_tree.c:4016 lib/maple_tree.c:4588
#: lib/maple_tree.c:5059 lib/maple_tree.c:5114 lib/maple_tree.c:5150
#: lib/maple_tree.c:5180 lib/maple_tree.c:5300 lib/maple_tree.c:5323
#: lib/maple_tree.c:5431 lib/maple_tree.c:5453 lib/maple_tree.c:5500
#: lib/maple_tree.c:5520 lib/maple_tree.c:5607 lib/maple_tree.c:5634
#: lib/maple_tree.c:5658 lib/maple_tree.c:5745 lib/maple_tree.c:5771
#: lib/maple_tree.c:5796 lib/maple_tree.c:5840
msgid "``struct ma_state *mas``"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:578
#: include/linux/maple_tree.h:747 include/linux/maple_tree.h:766
#: include/linux/maple_tree.h:783
msgid "Maple Tree operation state."
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:580
#: include/linux/maple_tree.h:598 include/linux/maple_tree.h:612
#: include/linux/maple_tree.h:751 include/linux/maple_tree.h:770
#: include/linux/maple_tree.h:786 include/linux/maple_tree.h:806
#: include/linux/maple_tree.h:823 include/linux/maple_tree.h:896
#: ../../../core-api/maple_tree:221: lib/maple_tree.c:4585
#: lib/maple_tree.c:5057 lib/maple_tree.c:5298 lib/maple_tree.c:5321
#: lib/maple_tree.c:5345 lib/maple_tree.c:5429 lib/maple_tree.c:5451
#: lib/maple_tree.c:5475 lib/maple_tree.c:5497 lib/maple_tree.c:5606
#: lib/maple_tree.c:5633 lib/maple_tree.c:5745 lib/maple_tree.c:5771
#: lib/maple_tree.c:5794 lib/maple_tree.c:6064 lib/maple_tree.c:6141
#: lib/maple_tree.c:6359 lib/maple_tree.c:6397 lib/maple_tree.c:6454
#: lib/maple_tree.c:6470 lib/maple_tree.c:6534
msgid "**Description**"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:579
msgid ""
"Resets the error or walk state of the **mas** so future walks of the array "
"will start from the root.  Use this if you have dropped the lock and want to "
"reuse the ma_state."
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:595
msgid "``mas_for_each (__mas, __entry, __max)``"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:593
msgid "Iterate over a range of the maple tree."
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:599
#: include/linux/maple_tree.h:613
msgid "``__mas``"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:594
#: include/linux/maple_tree.h:608
msgid "Maple Tree operation state (maple_state)"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:596
#: include/linux/maple_tree.h:610 include/linux/maple_tree.h:893
msgid "``__entry``"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:595
#: include/linux/maple_tree.h:609
msgid "Entry retrieved from the tree"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:597
#: include/linux/maple_tree.h:895
msgid "``__max``"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:596
msgid "maximum index to retrieve from the tree"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:597
#: include/linux/maple_tree.h:611
msgid ""
"When returned, mas->index and mas->last will hold the entire range for the "
"entry."
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:600
#: include/linux/maple_tree.h:614 ../../../core-api/maple_tree:221:
#: lib/maple_tree.c:4879 lib/maple_tree.c:4903 lib/maple_tree.c:6436
msgid "**Note**"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:601
#: include/linux/maple_tree.h:615
msgid "may return the zero entry."
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:609
msgid "``mas_for_each_rev (__mas, __entry, __min)``"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:607
msgid "Iterate over a range of the maple tree in reverse order."
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:611
msgid "``__min``"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:610
msgid "minimum index to retrieve from the tree"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:745
msgid ""
"Set up Maple Tree operation state to a sub-range of the current location."
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:749
#: include/linux/maple_tree.h:768
msgid "``unsigned long start``"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:748
#: include/linux/maple_tree.h:767
msgid "New start of range in the Maple Tree."
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:750
#: include/linux/maple_tree.h:769 ../../../core-api/maple_tree:221:
#: lib/maple_tree.c:5916 lib/maple_tree.c:5965
msgid "``unsigned long last``"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:749
#: include/linux/maple_tree.h:768
msgid "New end of range in the Maple Tree."
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:750
msgid ""
"set the internal maple state values to a sub-range. Please use "
"mas_set_range() if you do not know where you are in the tree."
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:765
#: include/linux/maple_tree.h:782
msgid "Set up Maple Tree operation state for a different index."
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:769
msgid ""
"Move the operation state to refer to a different range.  This will have the "
"effect of starting a walk from the top; see mas_next() to move to an "
"adjacent index."
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:785
#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5343
#: lib/maple_tree.c:5473 lib/maple_tree.c:5877 lib/maple_tree.c:5915
#: lib/maple_tree.c:5947 lib/maple_tree.c:6002 lib/maple_tree.c:6140
msgid "``unsigned long index``"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:784
msgid "New index into the Maple Tree."
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:785
msgid ""
"Move the operation state to refer to a different index.  This will have the "
"effect of starting a walk from the top; see mas_next() to move to an "
"adjacent index."
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:802
msgid "Initialise an empty maple tree with flags."
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:808
#: include/linux/maple_tree.h:826 include/linux/maple_tree.h:847
#: include/linux/maple_tree.h:866 ../../../core-api/maple_tree:221:
#: lib/maple_tree.c:5346 lib/maple_tree.c:5476 lib/maple_tree.c:5880
#: lib/maple_tree.c:5918 lib/maple_tree.c:5950 lib/maple_tree.c:5967
#: lib/maple_tree.c:6005 lib/maple_tree.c:6061 lib/maple_tree.c:6143
#: lib/maple_tree.c:6360 lib/maple_tree.c:6398 lib/maple_tree.c:6439
#: lib/maple_tree.c:6457 lib/maple_tree.c:6471 lib/maple_tree.c:6535
msgid "``struct maple_tree *mt``"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:805
msgid "``unsigned int flags``"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:804
msgid "maple tree flags."
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:805
msgid ""
"If you need to initialise a Maple Tree with special flags (eg, an allocation "
"tree), use this function."
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:820
msgid "Initialise an empty maple tree."
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:822
msgid "An empty Maple Tree."
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:841
msgid "Switch the tree to non-RCU mode."
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:842
#: include/linux/maple_tree.h:861 include/linux/maple_tree.h:891
msgid "The Maple Tree"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:860
msgid "Switch the tree to RCU safe mode."
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:892
msgid "``mt_for_each (__tree, __entry, __index, __max)``"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:890
msgid "Iterate over each entry starting at index until max."
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:896
msgid "``__tree``"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:892
msgid "The current entry"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:894
msgid "``__index``"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:893
msgid "The index to start the search from. Subsequently used as iterator."
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:894
msgid "The maximum limit for **index**"
msgstr ""

#: ../../../core-api/maple_tree:220: include/linux/maple_tree.h:895
msgid ""
"This iterator skips all entries, which resolve to a NULL pointer, e.g. "
"entries which has been reserved with XA_ZERO_ENTRY."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:3828
msgid "Calculate number of nodes needed for a given store oepration"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:3834
#: lib/maple_tree.c:3941
msgid "``struct ma_wr_state *wr_mas``"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:3830
#: lib/maple_tree.c:3936
msgid "The maple write state"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:3832
#: lib/maple_tree.c:3938 lib/maple_tree.c:3957 lib/maple_tree.c:4014
#: lib/maple_tree.c:5056 lib/maple_tree.c:5111 lib/maple_tree.c:5148
#: lib/maple_tree.c:5177 lib/maple_tree.c:5917 lib/maple_tree.c:5948
#: lib/maple_tree.c:5966 lib/maple_tree.c:6003 lib/maple_tree.c:6059
msgid "``void *entry``"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:3831
msgid "The entry to store into the tree"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:3833
msgid "Number of nodes required for preallocation."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:3935
#: lib/maple_tree.c:5174
msgid "Preallocate enough nodes for a store operation"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:3937
#: lib/maple_tree.c:5176
msgid "The entry that will be stored"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:3954
msgid "Internal call to insert a value"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:3955
#: lib/maple_tree.c:5109 lib/maple_tree.c:5146 lib/maple_tree.c:5175
#: lib/maple_tree.c:5295 lib/maple_tree.c:5318 lib/maple_tree.c:5426
#: lib/maple_tree.c:5448 lib/maple_tree.c:5515 lib/maple_tree.c:5603
#: lib/maple_tree.c:5630 lib/maple_tree.c:5653 lib/maple_tree.c:5742
#: lib/maple_tree.c:5768 lib/maple_tree.c:5792 lib/maple_tree.c:5836
msgid "The maple state"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:3956
#: lib/maple_tree.c:5110 lib/maple_tree.c:5916 lib/maple_tree.c:5947
#: lib/maple_tree.c:5965 lib/maple_tree.c:6002
msgid "The entry to store"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:3958
msgid ""
"``NULL`` or the contents that already exists at the requested index "
"otherwise.  The maple state needs to be checked for error conditions."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:4010
msgid "Internal call to find somewhere to store an entry"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:4011
#: lib/maple_tree.c:4583 lib/maple_tree.c:5054
msgid "The maple state."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:4013
#: lib/maple_tree.c:6058
msgid "``unsigned long *startp``"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:4012
#: lib/maple_tree.c:6057
msgid "Pointer to ID."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:4015
#: lib/maple_tree.c:5055 lib/maple_tree.c:5147 lib/maple_tree.c:6060
msgid "The entry to store."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:4017
#: lib/maple_tree.c:6062
msgid "``unsigned long range_lo``"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:4013
#: lib/maple_tree.c:6058
msgid "Lower bound of range to search."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:4015
#: lib/maple_tree.c:6060
msgid "``unsigned long range_hi``"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:4014
#: lib/maple_tree.c:6059
msgid "Upper bound of range to search."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:4016
#: lib/maple_tree.c:6061
msgid "``unsigned long *next``"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:4016
#: lib/maple_tree.c:6061
msgid "Pointer to next ID to allocate."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:4018
#: lib/maple_tree.c:5112 lib/maple_tree.c:5178 lib/maple_tree.c:5838
#: lib/maple_tree.c:5918 lib/maple_tree.c:5949 lib/maple_tree.c:5967
#: lib/maple_tree.c:6004 lib/maple_tree.c:6063 lib/maple_tree.c:6358
#: lib/maple_tree.c:6396
msgid "``gfp_t gfp``"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:4017
#: lib/maple_tree.c:5177 lib/maple_tree.c:5966 lib/maple_tree.c:6003
#: lib/maple_tree.c:6062
msgid "The GFP_FLAGS to use for allocations."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:4019
msgid ""
"0 if the allocation succeeded without wrapping, 1 if the allocation "
"succeeded after wrapping, or -EBUSY if there are no free entries."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:4582
msgid "Search for **mas->index** in the tree."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:4584
msgid ""
"mas->index and mas->last will be set to the range if there is a value.  If "
"mas->status is ma_none, reset to ma_start"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:4588
msgid "the entry at the location or ``NULL``."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:4875
msgid "Walk down a dead tree to just before the leaves"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:4881
msgid "``struct maple_enode **enode``"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:4876
msgid "The maple encoded node"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:4878
msgid "``unsigned char offset``"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:4877
msgid "The starting offset"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:4879
#: lib/maple_tree.c:4903
msgid "This can only be used from the RCU callback context."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:4900
msgid "Walk & free a tree in the RCU callback context"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:4906
msgid "``struct rcu_head *head``"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:4901
msgid "The RCU head that's within the node."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5053
msgid "Store an **entry**."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5056
msgid ""
"The **mas->index** and **mas->last** is used to set the range for the "
"**entry**."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5059
msgid "the first entry between mas->index and mas->last or ``NULL``."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5108
msgid "Store a value into the tree."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5111
msgid "The GFP_FLAGS to use for allocations if necessary."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5113
#: lib/maple_tree.c:5919 lib/maple_tree.c:5950
msgid ""
"0 on success, -EINVAL on invalid request, -ENOMEM if memory could not be "
"allocated."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5144
msgid ""
"Store a value into the tree using memory preallocated in the maple state."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5179
msgid "0 on success, -ENOMEM if memory could not be allocated."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5294
msgid "Get the next entry."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5297
#: lib/maple_tree.c:5320 lib/maple_tree.c:5344 lib/maple_tree.c:5517
#: lib/maple_tree.c:5605 lib/maple_tree.c:5632 lib/maple_tree.c:6469
#: lib/maple_tree.c:6533
msgid "``unsigned long max``"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5296
#: lib/maple_tree.c:5319
msgid "The maximum index to check."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5297
msgid ""
"Returns the next entry after **mas->index**. Must hold rcu_read_lock or the "
"write lock. Can return the zero entry."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5302
#: lib/maple_tree.c:5325
msgid "The next entry or ``NULL``"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5317
msgid "Advance the maple state to the next range"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5320
msgid ""
"Sets **mas->index** and **mas->last** to the range. Must hold rcu_read_lock "
"or the write lock. Can return the zero entry."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5340
msgid "get the next value in the maple tree"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5341
#: lib/maple_tree.c:5471 lib/maple_tree.c:5875 lib/maple_tree.c:5913
#: lib/maple_tree.c:5945 lib/maple_tree.c:5962 lib/maple_tree.c:6000
#: lib/maple_tree.c:6138 lib/maple_tree.c:6434 lib/maple_tree.c:6452
#: lib/maple_tree.c:6466 lib/maple_tree.c:6530
msgid "The maple tree"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5342
#: lib/maple_tree.c:5472
msgid "The start index"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5343
msgid "The maximum index to check"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5344
#: lib/maple_tree.c:5474 lib/maple_tree.c:6469
msgid ""
"Takes RCU read lock internally to protect the search, which does not protect "
"the returned pointer after dropping RCU read lock. See also: Documentation/"
"core-api/maple_tree.rst"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5349
msgid "The entry higher than **index** or ``NULL`` if nothing is found."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5425
msgid "Get the previous entry"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5428
#: lib/maple_tree.c:5450 lib/maple_tree.c:5474 lib/maple_tree.c:5655
#: lib/maple_tree.c:5744 lib/maple_tree.c:5770
msgid "``unsigned long min``"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5427
#: lib/maple_tree.c:5449 lib/maple_tree.c:5743 lib/maple_tree.c:5769
msgid "The minimum value to check."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5428
msgid ""
"Must hold rcu_read_lock or the write lock. Will reset mas to ma_start if the "
"status is ma_none.  Will stop on not searchable nodes."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5433
#: lib/maple_tree.c:5456
msgid "the previous value or ``NULL``."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5447
msgid "Advance to the previous range"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5450
msgid ""
"Sets **mas->index** and **mas->last** to the range. Must hold rcu_read_lock "
"or the write lock. Will reset mas to ma_start if the node is ma_none.  Will "
"stop on not searchable nodes."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5470
msgid "get the previous value in the maple tree"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5473
msgid "The minimum index to check"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5479
msgid "The entry before **index** or ``NULL`` if nothing is found."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5494
msgid "Pause a mas_find/mas_for_each to drop the lock."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5495
msgid "The maple state to pause"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5496
msgid ""
"Some users need to pause a walk and drop the lock they're holding in order "
"to yield to a higher priority thread or carry out an operation on an entry.  "
"Those users should call this function before they drop the lock.  It resets "
"the **mas** to be suitable for the next iteration of the loop after the user "
"has reacquired the lock.  If most entries found during a walk require you to "
"call mas_pause(), the mt_for_each() iterator may be more appropriate."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5514
msgid "Internal function to set up mas_find*()."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5516
msgid "The maximum index"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5518
#: lib/maple_tree.c:5656
msgid "``void **entry``"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5517
#: lib/maple_tree.c:5655
msgid "Pointer to the entry"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5519
#: lib/maple_tree.c:5657
msgid "True if entry is the answer, false otherwise."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5601
msgid ""
"On the first call, find the entry at or after mas->index up to ``max``. "
"Otherwise, find the entry after mas->index."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5604
#: lib/maple_tree.c:5631
msgid "The maximum value to check."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5605
#: lib/maple_tree.c:5632
msgid ""
"Must hold rcu_read_lock or the write lock. If an entry exists, last and "
"index are updated accordingly. May set **mas->status** to ma_overflow."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5610
#: lib/maple_tree.c:5637 lib/maple_tree.c:5749 lib/maple_tree.c:5775
msgid "The entry or ``NULL``."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5628
msgid ""
"On the first call, find the entry at or after mas->index up to ``max``. "
"Otherwise, advance to the next slot mas->index."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5652
msgid "Internal function to set up mas_find_*_rev()"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5654
msgid "The minimum index"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5739
msgid ""
"On the first call, find the first non-null entry at or below mas->index down "
"to ``min``. Otherwise find the first non-null entry below mas->index down to "
"``min``."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5744
#: lib/maple_tree.c:5770
msgid ""
"Must hold rcu_read_lock or the write lock. If an entry exists, last and "
"index are updated accordingly. May set **mas->status** to ma_underflow."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5765
msgid ""
"On the first call, find the first non-null entry at or below mas->index down "
"to ``min``. Otherwise advance to the previous slot after mas->index down to "
"``min``."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5790
msgid "Find the range in which index resides and erase the entire range."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5793
msgid ""
"Must hold the write lock. Searches for **mas->index**, sets **mas->index** "
"and **mas->last** to the range and erases that range."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5798
msgid ""
"the entry that was erased or ``NULL``, **mas->index** and **mas->last** are "
"updated."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5834
msgid ""
"Check if there was an error allocating and do the allocation if necessary If "
"there are allocations, then free them."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5837
#: lib/maple_tree.c:5917 lib/maple_tree.c:5948 lib/maple_tree.c:6357
#: lib/maple_tree.c:6395
msgid "The GFP_FLAGS to use for allocations"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5838
msgid "true on allocation, false otherwise."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5874
msgid "Load a value stored in a maple tree"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5876
msgid "The index to load"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5878
msgid "the entry or ``NULL``"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5912
msgid "Store an entry at a given range."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5914
#: lib/maple_tree.c:5963
msgid "The start of the range"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5915
#: lib/maple_tree.c:5964
msgid "The end of the range"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5944
msgid "Store an entry at a given index."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5946
#: lib/maple_tree.c:6001
msgid "The index to store the value"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5961
msgid "Insert an entry at a given range if there is no value."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5964
msgid "``unsigned long first``"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5968
#: lib/maple_tree.c:6005
msgid ""
"0 on success, -EEXISTS if the range is occupied, -EINVAL on invalid request, "
"-ENOMEM if memory could not be allocated."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:5999
msgid "Insert an entry at a given index if there is no value."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:6055
msgid "Find somewhere to store this entry in the tree."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:6056
msgid "The maple tree."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:6063
msgid ""
"Finds an empty entry in **mt** after **next**, stores the new index into the "
"**id** pointer, stores the entry at that index, then updates **next**."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:6066
msgid "**mt** must be initialized with the MT_FLAGS_ALLOC_RANGE flag."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:6069
msgid ""
"Any context.  Takes and releases the mt.lock.  May sleep if the **gfp** "
"flags permit."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:6072
msgid ""
"0 if the allocation succeeded without wrapping, 1 if the allocation "
"succeeded after wrapping, -ENOMEM if memory could not be allocated, -EINVAL "
"if **mt** cannot be used, or -EBUSY if there are no free entries."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:6137
msgid "Find an index and erase the entire range."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:6139
msgid "The index to erase"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:6140
msgid ""
"Erasing is the same as a walk to an entry then a store of a NULL to that "
"ENTIRE range.  In fact, it is implemented as such using the advanced API."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:6144
msgid "The entry stored at the **index** or ``NULL``"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:6354
#: lib/maple_tree.c:6392
msgid "Duplicate an entire maple tree"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:6355
#: lib/maple_tree.c:6393
msgid "The source maple tree"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:6357
#: lib/maple_tree.c:6395
msgid "``struct maple_tree *new``"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:6356
#: lib/maple_tree.c:6394
msgid "The new maple tree"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:6358
msgid ""
"This function duplicates a maple tree in Depth-First Search (DFS) pre-order "
"traversal. It uses memcpy() to copy nodes in the source tree and allocate "
"new child nodes in non-leaf nodes. The new node is exactly the same as the "
"source node except for all the addresses stored in it. It will be faster "
"than traversing all elements in the source tree and inserting them one by "
"one into the new tree. The user needs to ensure that the attributes of the "
"source tree and the new tree are the same, and the new tree needs to be an "
"empty tree, otherwise -EINVAL will be returned. Note that the user needs to "
"manually lock the source tree and the new tree."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:6370
#: lib/maple_tree.c:6407
msgid ""
"0 on success, -ENOMEM if memory could not be allocated, -EINVAL If the "
"attributes of the two trees are different or the new tree is not an empty "
"tree."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:6396
msgid ""
"This function duplicates a maple tree in Depth-First Search (DFS) pre-order "
"traversal. It uses memcpy() to copy nodes in the source tree and allocate "
"new child nodes in non-leaf nodes. The new node is exactly the same as the "
"source node except for all the addresses stored in it. It will be faster "
"than traversing all elements in the source tree and inserting them one by "
"one into the new tree. The user needs to ensure that the attributes of the "
"source tree and the new tree are the same, and the new tree needs to be an "
"empty tree, otherwise -EINVAL will be returned."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:6433
msgid "Walk and free all nodes of a locked maple tree."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:6436
msgid "Does not handle locking."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:6451
msgid "Destroy a maple tree"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:6453
msgid "Frees all resources used by the tree.  Handles locking."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:6465
#: lib/maple_tree.c:6529
msgid "Search from the start up until an entry is found."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:6468
#: lib/maple_tree.c:6532
msgid "``unsigned long *index``"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:6467
#: lib/maple_tree.c:6531
msgid "Pointer which contains the start location of the search"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:6468
msgid "The maximum value of the search range"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:6473
msgid ""
"In case that an entry is found **index** is updated to point to the next "
"possible entry independent whether the found entry is occupying a single "
"index or a range if indices."
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:6478
#: lib/maple_tree.c:6538
msgid "The entry at or after the **index** or ``NULL``"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:6532
msgid "The maximum value to check"
msgstr ""

#: ../../../core-api/maple_tree:221: lib/maple_tree.c:6533
msgid ""
"Same as mt_find() except that it checks **index** for 0 before searching. If "
"**index** == 0, the search is aborted. This covers a wrap around of "
"**index** to 0 in an iterator loop."
msgstr ""
