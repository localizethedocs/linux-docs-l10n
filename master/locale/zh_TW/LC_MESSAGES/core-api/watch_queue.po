# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../core-api/watch_queue.rst:3
msgid "General notification mechanism"
msgstr ""

#: ../../../core-api/watch_queue.rst:5
msgid ""
"The general notification mechanism is built on top of the standard pipe "
"driver whereby it effectively splices notification messages from the kernel "
"into pipes opened by userspace.  This can be used in conjunction with::"
msgstr ""

#: ../../../core-api/watch_queue.rst:12
msgid "The notifications buffers can be enabled by:"
msgstr ""

#: ../../../core-api/watch_queue.rst:14
msgid "\"General setup\"/\"General notification queue\" (CONFIG_WATCH_QUEUE)"
msgstr ""

#: ../../../core-api/watch_queue.rst:17
msgid "This document has the following sections:"
msgstr ""

#: ../../../core-api/watch_queue.rst:23
msgid "Overview"
msgstr ""

#: ../../../core-api/watch_queue.rst:25
msgid ""
"This facility appears as a pipe that is opened in a special mode.  The "
"pipe's internal ring buffer is used to hold messages that are generated by "
"the kernel. These messages are then read out by read().  Splice and similar "
"are disabled on such pipes due to them wanting to, under some circumstances, "
"revert their additions to the ring - which might end up interleaved with "
"notification messages."
msgstr ""

#: ../../../core-api/watch_queue.rst:32
msgid ""
"The owner of the pipe has to tell the kernel which sources it would like to "
"watch through that pipe.  Only sources that have been connected to a pipe "
"will insert messages into it.  Note that a source may be bound to multiple "
"pipes and insert messages into all of them simultaneously."
msgstr ""

#: ../../../core-api/watch_queue.rst:37
msgid ""
"Filters may also be emplaced on a pipe so that certain source types and "
"subevents can be ignored if they're not of interest."
msgstr ""

#: ../../../core-api/watch_queue.rst:40
msgid ""
"A message will be discarded if there isn't a slot available in the ring or "
"if no preallocated message buffer is available.  In both of these cases, "
"read() will insert a WATCH_META_LOSS_NOTIFICATION message into the output "
"buffer after the last message currently in the buffer has been read."
msgstr ""

#: ../../../core-api/watch_queue.rst:45
msgid ""
"Note that when producing a notification, the kernel does not wait for the "
"consumers to collect it, but rather just continues on.  This means that "
"notifications can be generated whilst spinlocks are held and also protects "
"the kernel from being held up indefinitely by a userspace malfunction."
msgstr ""

#: ../../../core-api/watch_queue.rst:52
msgid "Message Structure"
msgstr ""

#: ../../../core-api/watch_queue.rst:54
msgid "Notification messages begin with a short header::"
msgstr ""

#: ../../../core-api/watch_queue.rst:62
msgid ""
"\"type\" indicates the source of the notification record and \"subtype\" "
"indicates the type of record from that source (see the Watch Sources section "
"below).  The type may also be \"WATCH_TYPE_META\".  This is a special record "
"type generated internally by the watch queue itself.  There are two subtypes:"
msgstr ""

#: ../../../core-api/watch_queue.rst:67
msgid "WATCH_META_REMOVAL_NOTIFICATION"
msgstr ""

#: ../../../core-api/watch_queue.rst:68
msgid "WATCH_META_LOSS_NOTIFICATION"
msgstr ""

#: ../../../core-api/watch_queue.rst:70
msgid ""
"The first indicates that an object on which a watch was installed was "
"removed or destroyed and the second indicates that some messages have been "
"lost."
msgstr ""

#: ../../../core-api/watch_queue.rst:73
msgid "\"info\" indicates a bunch of things, including:"
msgstr ""

#: ../../../core-api/watch_queue.rst:75
msgid ""
"The length of the message in bytes, including the header (mask with "
"WATCH_INFO_LENGTH and shift by WATCH_INFO_LENGTH__SHIFT).  This indicates "
"the size of the record, which may be between 8 and 127 bytes."
msgstr ""

#: ../../../core-api/watch_queue.rst:79
msgid ""
"The watch ID (mask with WATCH_INFO_ID and shift by WATCH_INFO_ID__SHIFT). "
"This indicates that caller's ID of the watch, which may be between 0 and "
"255.  Multiple watches may share a queue, and this provides a means to "
"distinguish them."
msgstr ""

#: ../../../core-api/watch_queue.rst:84
msgid ""
"A type-specific field (WATCH_INFO_TYPE_INFO).  This is set by the "
"notification producer to indicate some meaning specific to the type and "
"subtype."
msgstr ""

#: ../../../core-api/watch_queue.rst:88
msgid "Everything in info apart from the length can be used for filtering."
msgstr ""

#: ../../../core-api/watch_queue.rst:90
msgid ""
"The header can be followed by supplementary information.  The format of this "
"is at the discretion is defined by the type and subtype."
msgstr ""

#: ../../../core-api/watch_queue.rst:95
msgid "Watch List (Notification Source) API"
msgstr ""

#: ../../../core-api/watch_queue.rst:97
msgid ""
"A \"watch list\" is a list of watchers that are subscribed to a source of "
"notifications.  A list may be attached to an object (say a key or a "
"superblock) or may be global (say for device events).  From a userspace "
"perspective, a non-global watch list is typically referred to by reference "
"to the object it belongs to (such as using KEYCTL_NOTIFY and giving it a key "
"serial number to watch that specific key)."
msgstr ""

#: ../../../core-api/watch_queue.rst:104
msgid "To manage a watch list, the following functions are provided:"
msgstr ""

#: ../../../core-api/watch_queue.rst:111
msgid ""
"Initialise a watch list.  If ``release_watch`` is not NULL, then this "
"indicates a function that should be called when the watch_list object is "
"destroyed to discard any references the watch list holds on the watched "
"object."
msgstr ""

#: ../../../core-api/watch_queue.rst:116
msgid "``void remove_watch_list(struct watch_list *wlist);``"
msgstr ""

#: ../../../core-api/watch_queue.rst:118
msgid ""
"This removes all of the watches subscribed to a watch_list and frees them "
"and then destroys the watch_list object itself."
msgstr ""

#: ../../../core-api/watch_queue.rst:123
msgid "Watch Queue (Notification Output) API"
msgstr ""

#: ../../../core-api/watch_queue.rst:125
msgid ""
"A \"watch queue\" is the buffer allocated by an application that "
"notification records will be written into.  The workings of this are hidden "
"entirely inside of the pipe device driver, but it is necessary to gain a "
"reference to it to set a watch.  These can be managed with:"
msgstr ""

#: ../../../core-api/watch_queue.rst:130
msgid "``struct watch_queue *get_watch_queue(int fd);``"
msgstr ""

#: ../../../core-api/watch_queue.rst:132
msgid ""
"Since watch queues are indicated to the kernel by the fd of the pipe that "
"implements the buffer, userspace must hand that fd through a system call. "
"This can be used to look up an opaque pointer to the watch queue from the "
"system call."
msgstr ""

#: ../../../core-api/watch_queue.rst:137
msgid "``void put_watch_queue(struct watch_queue *wqueue);``"
msgstr ""

#: ../../../core-api/watch_queue.rst:139
msgid "This discards the reference obtained from ``get_watch_queue()``."
msgstr ""

#: ../../../core-api/watch_queue.rst:143
msgid "Watch Subscription API"
msgstr ""

#: ../../../core-api/watch_queue.rst:145
msgid ""
"A \"watch\" is a subscription on a watch list, indicating the watch queue, "
"and thus the buffer, into which notification records should be written.  The "
"watch queue object may also carry filtering rules for that object, as set by "
"userspace.  Some parts of the watch struct can be set by the driver::"
msgstr ""

#: ../../../core-api/watch_queue.rst:160
msgid ""
"The ``info_id`` value should be an 8-bit number obtained from userspace and "
"shifted by WATCH_INFO_ID__SHIFT.  This is OR'd into the WATCH_INFO_ID field "
"of struct watch_notification::info when and if the notification is written "
"into the associated watch queue buffer."
msgstr ""

#: ../../../core-api/watch_queue.rst:165
msgid ""
"The ``private`` field is the driver's data associated with the watch_list "
"and is cleaned up by the ``watch_list::release_watch()`` method."
msgstr ""

#: ../../../core-api/watch_queue.rst:168
msgid ""
"The ``id`` field is the source's ID.  Notifications that are posted with a "
"different ID are ignored."
msgstr ""

#: ../../../core-api/watch_queue.rst:171
msgid "The following functions are provided to manage watches:"
msgstr ""

#: ../../../core-api/watch_queue.rst:173
msgid "``void init_watch(struct watch *watch, struct watch_queue *wqueue);``"
msgstr ""

#: ../../../core-api/watch_queue.rst:175
msgid ""
"Initialise a watch object, setting its pointer to the watch queue, using "
"appropriate barriering to avoid lockdep complaints."
msgstr ""

#: ../../../core-api/watch_queue.rst:178
msgid ""
"``int add_watch_to_object(struct watch *watch, struct watch_list *wlist);``"
msgstr ""

#: ../../../core-api/watch_queue.rst:180
msgid ""
"Subscribe a watch to a watch list (notification source).  The driver-"
"settable fields in the watch struct must have been set before this is called."
msgstr ""

#: ../../../core-api/watch_queue.rst:190
msgid ""
"Remove a watch from a watch list, where the watch must match the specified "
"watch queue (``wqueue``) and object identifier (``id``).  A notification "
"(``WATCH_META_REMOVAL_NOTIFICATION``) is sent to the watch queue to indicate "
"that the watch got removed."
msgstr ""

#: ../../../core-api/watch_queue.rst:195
msgid ""
"``int remove_watch_from_object(struct watch_list *wlist, NULL, 0, true);``"
msgstr ""

#: ../../../core-api/watch_queue.rst:197
msgid ""
"Remove all the watches from a watch list.  It is expected that this will be "
"called preparatory to destruction and that the watch list will be "
"inaccessible to new watches by this point.  A notification "
"(``WATCH_META_REMOVAL_NOTIFICATION``) is sent to the watch queue of each "
"subscribed watch to indicate that the watch got removed."
msgstr ""

#: ../../../core-api/watch_queue.rst:205
msgid "Notification Posting API"
msgstr ""

#: ../../../core-api/watch_queue.rst:207
msgid ""
"To post a notification to watch list so that the subscribed watches can see "
"it, the following function should be used::"
msgstr ""

#: ../../../core-api/watch_queue.rst:215
msgid ""
"The notification should be preformatted and a pointer to the header (``n``) "
"should be passed in.  The notification may be larger than this and the size "
"in units of buffer slots is noted in ``n->info & WATCH_INFO_LENGTH``."
msgstr ""

#: ../../../core-api/watch_queue.rst:219
msgid ""
"The ``cred`` struct indicates the credentials of the source (subject) and is "
"passed to the LSMs, such as SELinux, to allow or suppress the recording of "
"the note in each individual queue according to the credentials of that queue "
"(object)."
msgstr ""

#: ../../../core-api/watch_queue.rst:224
msgid ""
"The ``id`` is the ID of the source object (such as the serial number on a "
"key). Only watches that have the same ID set in them will see this "
"notification."
msgstr ""

#: ../../../core-api/watch_queue.rst:229
msgid "Watch Sources"
msgstr ""

#: ../../../core-api/watch_queue.rst:231
msgid ""
"Any particular buffer can be fed from multiple sources.  Sources include:"
msgstr ""

#: ../../../core-api/watch_queue.rst:233
msgid "WATCH_TYPE_KEY_NOTIFY"
msgstr ""

#: ../../../core-api/watch_queue.rst:235
msgid ""
"Notifications of this type indicate changes to keys and keyrings, including "
"the changes of keyring contents or the attributes of keys."
msgstr ""

#: ../../../core-api/watch_queue.rst:238
msgid "See Documentation/security/keys/core.rst for more information."
msgstr ""

#: ../../../core-api/watch_queue.rst:242
msgid "Event Filtering"
msgstr ""

#: ../../../core-api/watch_queue.rst:244
msgid ""
"Once a watch queue has been created, a set of filters can be applied to "
"limit the events that are received using::"
msgstr ""

#: ../../../core-api/watch_queue.rst:252
msgid "The filter description is a variable of type::"
msgstr ""

#: ../../../core-api/watch_queue.rst:260
msgid ""
"Where \"nr_filters\" is the number of filters in filters[] and "
"\"__reserved\" should be 0.  The \"filters\" array has elements of the "
"following type::"
msgstr ""

#: ../../../core-api/watch_queue.rst:270
msgid "Where:"
msgstr ""

#: ../../../core-api/watch_queue.rst:272
msgid ""
"``type`` is the event type to filter for and should be something like "
"\"WATCH_TYPE_KEY_NOTIFY\""
msgstr ""

#: ../../../core-api/watch_queue.rst:275
msgid ""
"``info_filter`` and ``info_mask`` act as a filter on the info field of the "
"notification record.  The notification is only written into the buffer if::"
msgstr ""

#: ../../../core-api/watch_queue.rst:280
msgid ""
"This could be used, for example, to ignore events that are not exactly on "
"the watched point in a mount tree."
msgstr ""

#: ../../../core-api/watch_queue.rst:283
msgid ""
"``subtype_filter`` is a bitmask indicating the subtypes that are of "
"interest.  Bit 0 of subtype_filter[0] corresponds to subtype 0, bit 1 to "
"subtype 1, and so on."
msgstr ""

#: ../../../core-api/watch_queue.rst:287
msgid ""
"If the argument to the ioctl() is NULL, then the filters will be removed and "
"all events from the watched sources will come through."
msgstr ""

#: ../../../core-api/watch_queue.rst:292
msgid "Userspace Code Example"
msgstr ""

#: ../../../core-api/watch_queue.rst:294
msgid "A buffer is created with something like the following::"
msgstr ""

#: ../../../core-api/watch_queue.rst:299
msgid "It can then be set to receive keyring change notifications::"
msgstr ""

#: ../../../core-api/watch_queue.rst:303
msgid ""
"The notifications can then be consumed by something like the following::"
msgstr ""
