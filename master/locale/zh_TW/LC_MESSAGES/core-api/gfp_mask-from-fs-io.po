# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-20 11:24+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../core-api/gfp_mask-from-fs-io.rst:5
msgid "GFP masks used from FS/IO context"
msgstr ""

#: ../../../core-api/gfp_mask-from-fs-io.rst:0
msgid "Date"
msgstr ""

#: ../../../core-api/gfp_mask-from-fs-io.rst:7
msgid "May, 2018"
msgstr ""

#: ../../../core-api/gfp_mask-from-fs-io.rst:0
msgid "Author"
msgstr ""

#: ../../../core-api/gfp_mask-from-fs-io.rst:8
msgid "Michal Hocko <mhocko@kernel.org>"
msgstr ""

#: ../../../core-api/gfp_mask-from-fs-io.rst:11
msgid "Introduction"
msgstr ""

#: ../../../core-api/gfp_mask-from-fs-io.rst:13
msgid ""
"Code paths in the filesystem and IO stacks must be careful when allocating "
"memory to prevent recursion deadlocks caused by direct memory reclaim "
"calling back into the FS or IO paths and blocking on already held resources "
"(e.g. locks - most commonly those used for the transaction context)."
msgstr ""

#: ../../../core-api/gfp_mask-from-fs-io.rst:19
msgid ""
"The traditional way to avoid this deadlock problem is to clear __GFP_FS "
"respectively __GFP_IO (note the latter implies clearing the first as well) "
"in the gfp mask when calling an allocator. GFP_NOFS respectively GFP_NOIO "
"can be used as shortcut. It turned out though that above approach has led to "
"abuses when the restricted gfp mask is used \"just in case\" without a "
"deeper consideration which leads to problems because an excessive use of "
"GFP_NOFS/GFP_NOIO can lead to memory over-reclaim or other memory reclaim "
"issues."
msgstr ""

#: ../../../core-api/gfp_mask-from-fs-io.rst:29
msgid "New API"
msgstr ""

#: ../../../core-api/gfp_mask-from-fs-io.rst:31
msgid ""
"Since 4.12 we do have a generic scope API for both NOFS and NOIO context "
"``memalloc_nofs_save``, ``memalloc_nofs_restore`` respectively "
"``memalloc_noio_save``, ``memalloc_noio_restore`` which allow to mark a "
"scope to be a critical section from a filesystem or I/O point of view. Any "
"allocation from that scope will inherently drop __GFP_FS respectively "
"__GFP_IO from the given mask so no memory allocation can recurse back in the "
"FS/IO."
msgstr ""

#: ../../../core-api/gfp_mask-from-fs-io:38: include/linux/sched/mm.h:373
msgid "Marks implicit GFP_NOFS allocation scope."
msgstr ""

#: ../../../core-api/gfp_mask-from-fs-io:38: include/linux/sched/mm.h:377
#: include/linux/sched/mm.h:394 ../../../core-api/gfp_mask-from-fs-io:40:
#: include/linux/sched/mm.h:347 include/linux/sched/mm.h:364
msgid "**Parameters**"
msgstr ""

#: ../../../core-api/gfp_mask-from-fs-io:38: include/linux/sched/mm.h:379
#: ../../../core-api/gfp_mask-from-fs-io:40: include/linux/sched/mm.h:349
msgid "``void``"
msgstr ""

#: ../../../core-api/gfp_mask-from-fs-io:38: include/linux/sched/mm.h:1
#: ../../../core-api/gfp_mask-from-fs-io:40:
msgid "no arguments"
msgstr ""

#: ../../../core-api/gfp_mask-from-fs-io:38: include/linux/sched/mm.h:3
#: include/linux/sched/mm.h:393 ../../../core-api/gfp_mask-from-fs-io:40:
#: include/linux/sched/mm.h:363
msgid "**Description**"
msgstr ""

#: ../../../core-api/gfp_mask-from-fs-io:38: include/linux/sched/mm.h:374
msgid ""
"This functions marks the beginning of the GFP_NOFS allocation scope. All "
"further allocations will implicitly drop __GFP_FS flag and so they are safe "
"for the FS critical section from the allocation recursion point of view. Use "
"memalloc_nofs_restore to end the scope with flags returned by this function."
msgstr ""

#: ../../../core-api/gfp_mask-from-fs-io:38: include/linux/sched/mm.h:380
#: ../../../core-api/gfp_mask-from-fs-io:40: include/linux/sched/mm.h:350
msgid "**Context**"
msgstr ""

#: ../../../core-api/gfp_mask-from-fs-io:38: include/linux/sched/mm.h:381
#: ../../../core-api/gfp_mask-from-fs-io:40: include/linux/sched/mm.h:351
msgid "This function is safe to be used from any context."
msgstr ""

#: ../../../core-api/gfp_mask-from-fs-io:38: include/linux/sched/mm.h:383
#: ../../../core-api/gfp_mask-from-fs-io:40: include/linux/sched/mm.h:353
msgid "**Return**"
msgstr ""

#: ../../../core-api/gfp_mask-from-fs-io:38: include/linux/sched/mm.h:382
msgid "The saved flags to be passed to memalloc_nofs_restore."
msgstr ""

#: ../../../core-api/gfp_mask-from-fs-io:38: include/linux/sched/mm.h:390
msgid "Ends the implicit GFP_NOFS scope."
msgstr ""

#: ../../../core-api/gfp_mask-from-fs-io:38: include/linux/sched/mm.h:396
#: ../../../core-api/gfp_mask-from-fs-io:40: include/linux/sched/mm.h:366
msgid "``unsigned int flags``"
msgstr ""

#: ../../../core-api/gfp_mask-from-fs-io:38: include/linux/sched/mm.h:391
#: ../../../core-api/gfp_mask-from-fs-io:40: include/linux/sched/mm.h:361
msgid "Flags to restore."
msgstr ""

#: ../../../core-api/gfp_mask-from-fs-io:38: include/linux/sched/mm.h:392
msgid ""
"Ends the implicit GFP_NOFS scope started by memalloc_nofs_save function. "
"Always make sure that the given flags is the return value from the pairing "
"memalloc_nofs_save call."
msgstr ""

#: ../../../core-api/gfp_mask-from-fs-io:40: include/linux/sched/mm.h:343
msgid "Marks implicit GFP_NOIO allocation scope."
msgstr ""

#: ../../../core-api/gfp_mask-from-fs-io:40: include/linux/sched/mm.h:344
msgid ""
"This functions marks the beginning of the GFP_NOIO allocation scope. All "
"further allocations will implicitly drop __GFP_IO flag and so they are safe "
"for the IO critical section from the allocation recursion point of view. Use "
"memalloc_noio_restore to end the scope with flags returned by this function."
msgstr ""

#: ../../../core-api/gfp_mask-from-fs-io:40: include/linux/sched/mm.h:352
msgid "The saved flags to be passed to memalloc_noio_restore."
msgstr ""

#: ../../../core-api/gfp_mask-from-fs-io:40: include/linux/sched/mm.h:360
msgid "Ends the implicit GFP_NOIO scope."
msgstr ""

#: ../../../core-api/gfp_mask-from-fs-io:40: include/linux/sched/mm.h:362
msgid ""
"Ends the implicit GFP_NOIO scope started by memalloc_noio_save function. "
"Always make sure that the given flags is the return value from the pairing "
"memalloc_noio_save call."
msgstr ""

#: ../../../core-api/gfp_mask-from-fs-io.rst:43
msgid ""
"FS/IO code then simply calls the appropriate save function before any "
"critical section with respect to the reclaim is started - e.g. lock shared "
"with the reclaim context or when a transaction context nesting would be "
"possible via reclaim. The restore function should be called when the "
"critical section ends. All that ideally along with an explanation what is "
"the reclaim context for easier maintenance."
msgstr ""

#: ../../../core-api/gfp_mask-from-fs-io.rst:50
msgid ""
"Please note that the proper pairing of save/restore functions allows nesting "
"so it is safe to call ``memalloc_noio_save`` or ``memalloc_noio_restore`` "
"respectively from an existing NOIO or NOFS scope."
msgstr ""

#: ../../../core-api/gfp_mask-from-fs-io.rst:56
msgid "What about __vmalloc(GFP_NOFS)"
msgstr ""

#: ../../../core-api/gfp_mask-from-fs-io.rst:58
msgid ""
"Since v5.17, and specifically after the commit 451769ebb7e79 (\"mm/vmalloc: "
"alloc GFP_NO{FS,IO} for vmalloc\"), GFP_NOFS/GFP_NOIO are now supported in "
"``[k]vmalloc`` by implicitly using scope API."
msgstr ""

#: ../../../core-api/gfp_mask-from-fs-io.rst:62
msgid ""
"In earlier kernels ``vmalloc`` didn't support GFP_NOFS semantic because "
"there were hardcoded GFP_KERNEL allocations deep inside the allocator. That "
"means that calling ``vmalloc`` with GFP_NOFS/GFP_NOIO was almost always a "
"bug."
msgstr ""

#: ../../../core-api/gfp_mask-from-fs-io.rst:66
msgid ""
"In the ideal world, upper layers should already mark dangerous contexts and "
"so no special care is required and ``vmalloc`` should be called without any "
"problems. Sometimes if the context is not really clear or there are layering "
"violations then the recommended way around that (on pre-v5.17 kernels) is to "
"wrap ``vmalloc`` by the scope API with a comment explaining the problem."
msgstr ""
