# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-20 11:24+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../gpu/imagination/uapi.rst:3
msgid "UAPI"
msgstr ""

#: ../../../gpu/imagination/uapi.rst:4
msgid "The sources associated with this section can be found in ``pvr_drm.h``."
msgstr ""

#: ../../../gpu/imagination/uapi:6: include/uapi/drm/pvr_drm.h:17
msgid ""
"The PowerVR IOCTL argument structs have a few limitations in place, in "
"addition to the standard kernel restrictions:"
msgstr ""

#: ../../../gpu/imagination/uapi:6: include/uapi/drm/pvr_drm.h:20
msgid "All members must be type-aligned."
msgstr ""

#: ../../../gpu/imagination/uapi:6: include/uapi/drm/pvr_drm.h:21
msgid "The overall struct must be padded to 64-bit alignment."
msgstr ""

#: ../../../gpu/imagination/uapi:6: include/uapi/drm/pvr_drm.h:22
msgid ""
"Explicit padding is almost always required. This takes the form of "
"``_padding_[x]`` members of sufficient size to pad to the next power-of-two "
"alignment, where [x] is the offset into the struct in hexadecimal. Arrays "
"are never used for alignment. Padding fields must be zeroed; this is always "
"checked."
msgstr ""

#: ../../../gpu/imagination/uapi:6: include/uapi/drm/pvr_drm.h:27
msgid "Unions may only appear as the last member of a struct."
msgstr ""

#: ../../../gpu/imagination/uapi:6: include/uapi/drm/pvr_drm.h:28
msgid ""
"Individual union members may grow in the future. The space between the end "
"of a union member and the end of its containing union is considered "
"\"implicit padding\" and must be zeroed. This is always checked."
msgstr ""

#: ../../../gpu/imagination/uapi:6: include/uapi/drm/pvr_drm.h:32
msgid ""
"In addition to the IOCTL argument structs, the PowerVR UAPI makes use of "
"DEV_QUERY argument structs. These are used to fetch information about the "
"device and runtime. These structs are subject to the same rules set out "
"above."
msgstr ""

#: ../../../gpu/imagination/uapi.rst:10
msgid "OBJECT ARRAYS"
msgstr ""

#: ../../../gpu/imagination/uapi:11: include/uapi/drm/pvr_drm.h:41
msgid "Container used to pass arrays of objects"
msgstr ""

#: ../../../gpu/imagination/uapi:106: include/uapi/drm/pvr_drm.h:813
#: ../../../gpu/imagination/uapi:114: include/uapi/drm/pvr_drm.h:831
#: ../../../gpu/imagination/uapi:117: include/uapi/drm/pvr_drm.h:888
#: ../../../gpu/imagination/uapi:11: include/uapi/drm/pvr_drm.h:45
#: ../../../gpu/imagination/uapi:125: include/uapi/drm/pvr_drm.h:945
#: ../../../gpu/imagination/uapi:128: include/uapi/drm/pvr_drm.h:906
#: include/uapi/drm/pvr_drm.h:927 ../../../gpu/imagination/uapi:132:
#: include/uapi/drm/pvr_drm.h:1016 ../../../gpu/imagination/uapi:143:
#: include/uapi/drm/pvr_drm.h:1284 ../../../gpu/imagination/uapi:158:
#: include/uapi/drm/pvr_drm.h:1070 include/uapi/drm/pvr_drm.h:1220
#: include/uapi/drm/pvr_drm.h:1231 ../../../gpu/imagination/uapi:33:
#: include/uapi/drm/pvr_drm.h:486 ../../../gpu/imagination/uapi:36:
#: include/uapi/drm/pvr_drm.h:121 include/uapi/drm/pvr_drm.h:152
#: include/uapi/drm/pvr_drm.h:198 include/uapi/drm/pvr_drm.h:233
#: ../../../gpu/imagination/uapi:43: include/uapi/drm/pvr_drm.h:295
#: include/uapi/drm/pvr_drm.h:314 ../../../gpu/imagination/uapi:48:
#: include/uapi/drm/pvr_drm.h:391 include/uapi/drm/pvr_drm.h:418
#: ../../../gpu/imagination/uapi:58: include/uapi/drm/pvr_drm.h:549
#: ../../../gpu/imagination/uapi:69: include/uapi/drm/pvr_drm.h:581
#: ../../../gpu/imagination/uapi:77: include/uapi/drm/pvr_drm.h:605
#: include/uapi/drm/pvr_drm.h:617 ../../../gpu/imagination/uapi:86:
#: include/uapi/drm/pvr_drm.h:647 include/uapi/drm/pvr_drm.h:696
#: ../../../gpu/imagination/uapi:95: include/uapi/drm/pvr_drm.h:765
msgid "**Definition**::"
msgstr ""

#: ../../../gpu/imagination/uapi:106: include/uapi/drm/pvr_drm.h:820
#: ../../../gpu/imagination/uapi:114: include/uapi/drm/pvr_drm.h:843
#: ../../../gpu/imagination/uapi:117: include/uapi/drm/pvr_drm.h:895
#: ../../../gpu/imagination/uapi:11: include/uapi/drm/pvr_drm.h:53
#: ../../../gpu/imagination/uapi:125: include/uapi/drm/pvr_drm.h:965
#: ../../../gpu/imagination/uapi:128: include/uapi/drm/pvr_drm.h:916
#: include/uapi/drm/pvr_drm.h:935 ../../../gpu/imagination/uapi:132:
#: include/uapi/drm/pvr_drm.h:1023 ../../../gpu/imagination/uapi:143:
#: include/uapi/drm/pvr_drm.h:1290 ../../../gpu/imagination/uapi:158:
#: include/uapi/drm/pvr_drm.h:1078 include/uapi/drm/pvr_drm.h:1227
#: include/uapi/drm/pvr_drm.h:1243 ../../../gpu/imagination/uapi:33:
#: include/uapi/drm/pvr_drm.h:494 ../../../gpu/imagination/uapi:36:
#: include/uapi/drm/pvr_drm.h:129 include/uapi/drm/pvr_drm.h:163
#: include/uapi/drm/pvr_drm.h:207 include/uapi/drm/pvr_drm.h:242
#: ../../../gpu/imagination/uapi:43: include/uapi/drm/pvr_drm.h:304
#: include/uapi/drm/pvr_drm.h:320 ../../../gpu/imagination/uapi:48:
#: include/uapi/drm/pvr_drm.h:400 include/uapi/drm/pvr_drm.h:424
#: ../../../gpu/imagination/uapi:58: include/uapi/drm/pvr_drm.h:558
#: ../../../gpu/imagination/uapi:69: include/uapi/drm/pvr_drm.h:589
#: ../../../gpu/imagination/uapi:77: include/uapi/drm/pvr_drm.h:612
#: include/uapi/drm/pvr_drm.h:624 ../../../gpu/imagination/uapi:86:
#: include/uapi/drm/pvr_drm.h:659 include/uapi/drm/pvr_drm.h:705
#: ../../../gpu/imagination/uapi:95: include/uapi/drm/pvr_drm.h:778
msgid "**Members**"
msgstr ""

#: ../../../gpu/imagination/uapi:11: include/uapi/drm/pvr_drm.h:56
msgid "``stride``"
msgstr ""

#: ../../../gpu/imagination/uapi:11: include/uapi/drm/pvr_drm.h:57
msgid "Stride of object struct. Used for versioning."
msgstr ""

#: ../../../gpu/imagination/uapi:11: include/uapi/drm/pvr_drm.h:59
#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:215
#: include/uapi/drm/pvr_drm.h:247
msgid "``count``"
msgstr ""

#: ../../../gpu/imagination/uapi:11: include/uapi/drm/pvr_drm.h:60
msgid "Number of objects in the array."
msgstr ""

#: ../../../gpu/imagination/uapi:11: include/uapi/drm/pvr_drm.h:62
msgid "``array``"
msgstr ""

#: ../../../gpu/imagination/uapi:11: include/uapi/drm/pvr_drm.h:63
msgid "User pointer to an array of objects."
msgstr ""

#: ../../../gpu/imagination/uapi:114: include/uapi/drm/pvr_drm.h:882
#: ../../../gpu/imagination/uapi:11: include/uapi/drm/pvr_drm.h:66
#: ../../../gpu/imagination/uapi:143: include/uapi/drm/pvr_drm.h:1291
#: ../../../gpu/imagination/uapi:169:
#: drivers/gpu/drm/imagination/pvr_device.h:698
#: drivers/gpu/drm/imagination/pvr_device.h:725
#: drivers/gpu/drm/imagination/pvr_device.h:747
#: ../../../gpu/imagination/uapi:22: include/uapi/drm/pvr_drm.h:86
#: ../../../gpu/imagination/uapi:30: include/uapi/drm/pvr_drm.h:468
#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:147
#: include/uapi/drm/pvr_drm.h:192 include/uapi/drm/pvr_drm.h:228
#: include/uapi/drm/pvr_drm.h:257 ../../../gpu/imagination/uapi:43:
#: include/uapi/drm/pvr_drm.h:289 include/uapi/drm/pvr_drm.h:309
#: include/uapi/drm/pvr_drm.h:328 ../../../gpu/imagination/uapi:48:
#: include/uapi/drm/pvr_drm.h:375 include/uapi/drm/pvr_drm.h:413
#: include/uapi/drm/pvr_drm.h:436 ../../../gpu/imagination/uapi:69:
#: include/uapi/drm/pvr_drm.h:596
msgid "**Description**"
msgstr ""

#: ../../../gpu/imagination/uapi:11: include/uapi/drm/pvr_drm.h:42
msgid ""
"It is not unusual to have to extend objects to pass new parameters, and the "
"DRM ioctl infrastructure is supporting that by padding ioctl arguments with "
"zeros when the data passed by userspace is smaller than the struct defined "
"in the drm_ioctl_desc, thus keeping things backward compatible. This type is "
"just applying the same concepts to indirect objects passed through arrays "
"referenced from the main ioctl arguments structure: the stride basically "
"defines the size of the object passed by userspace, which allows the kernel "
"driver to pad with zeros when it's smaller than the size of the object it "
"expects."
msgstr ""

#: ../../../gpu/imagination/uapi:11: include/uapi/drm/pvr_drm.h:51
msgid ""
"Use ``DRM_PVR_OBJ_ARRAY()`` to fill object array fields, unless you have a "
"very good reason not to."
msgstr ""

#: ../../../gpu/imagination/uapi:14: include/uapi/drm/pvr_drm.h:69
msgid "``DRM_PVR_OBJ_ARRAY (cnt, ptr)``"
msgstr ""

#: ../../../gpu/imagination/uapi:14: include/uapi/drm/pvr_drm.h:67
msgid ""
"Helper macro for filling :c:type:`struct drm_pvr_obj_array "
"<drm_pvr_obj_array>`."
msgstr ""

#: ../../../gpu/imagination/uapi:14: include/uapi/drm/pvr_drm.h:71
#: ../../../gpu/imagination/uapi:169:
#: drivers/gpu/drm/imagination/pvr_device.h:691
#: drivers/gpu/drm/imagination/pvr_device.h:726
#: drivers/gpu/drm/imagination/pvr_device.h:742
#: ../../../gpu/imagination/uapi:22: include/uapi/drm/pvr_drm.h:85
msgid "**Parameters**"
msgstr ""

#: ../../../gpu/imagination/uapi:14: include/uapi/drm/pvr_drm.h:73
msgid "``cnt``"
msgstr ""

#: ../../../gpu/imagination/uapi:14: include/uapi/drm/pvr_drm.h:68
msgid "Number of elements pointed to py **ptr**."
msgstr ""

#: ../../../gpu/imagination/uapi:14: include/uapi/drm/pvr_drm.h:70
msgid "``ptr``"
msgstr ""

#: ../../../gpu/imagination/uapi:14: include/uapi/drm/pvr_drm.h:69
msgid "Pointer to start of a C array."
msgstr ""

#: ../../../gpu/imagination/uapi:14: include/uapi/drm/pvr_drm.h:71
#: ../../../gpu/imagination/uapi:169:
#: drivers/gpu/drm/imagination/pvr_device.h:701
#: drivers/gpu/drm/imagination/pvr_device.h:727
#: drivers/gpu/drm/imagination/pvr_device.h:749
#: ../../../gpu/imagination/uapi:22: include/uapi/drm/pvr_drm.h:91
msgid "**Return**"
msgstr ""

#: ../../../gpu/imagination/uapi:14: include/uapi/drm/pvr_drm.h:71
msgid "Literal of type :c:type:`struct drm_pvr_obj_array <drm_pvr_obj_array>`."
msgstr ""

#: ../../../gpu/imagination/uapi.rst:18
msgid "IOCTLS"
msgstr ""

#: ../../../gpu/imagination/uapi:22: include/uapi/drm/pvr_drm.h:83
msgid "``PVR_IOCTL (_ioctl, _mode, _data)``"
msgstr ""

#: ../../../gpu/imagination/uapi:22: include/uapi/drm/pvr_drm.h:81
msgid "Build a PowerVR IOCTL number"
msgstr ""

#: ../../../gpu/imagination/uapi:22: include/uapi/drm/pvr_drm.h:87
msgid "``_ioctl``"
msgstr ""

#: ../../../gpu/imagination/uapi:22: include/uapi/drm/pvr_drm.h:82
msgid "An incrementing id for this IOCTL. Added to ``DRM_COMMAND_BASE``."
msgstr ""

#: ../../../gpu/imagination/uapi:22: include/uapi/drm/pvr_drm.h:84
msgid "``_mode``"
msgstr ""

#: ../../../gpu/imagination/uapi:22: include/uapi/drm/pvr_drm.h:83
msgid "Must be one of ``DRM_IOR``, ``DRM_IOW`` or ``DRM_IOWR``."
msgstr ""

#: ../../../gpu/imagination/uapi:22: include/uapi/drm/pvr_drm.h:85
msgid "``_data``"
msgstr ""

#: ../../../gpu/imagination/uapi:22: include/uapi/drm/pvr_drm.h:84
msgid "The type of the args struct passed by this IOCTL."
msgstr ""

#: ../../../gpu/imagination/uapi:22: include/uapi/drm/pvr_drm.h:85
msgid ""
"The struct referred to by **_data** must have a ``drm_pvr_ioctl_`` prefix "
"and an ``_args suffix``. They are therefore omitted from **_data**."
msgstr ""

#: ../../../gpu/imagination/uapi:22: include/uapi/drm/pvr_drm.h:88
msgid ""
"This should only be used to build the constants described below; it should "
"never be used to call an IOCTL directly."
msgstr ""

#: ../../../gpu/imagination/uapi:22: include/uapi/drm/pvr_drm.h:92
msgid "An IOCTL number to be passed to ioctl() from userspace."
msgstr ""

#: ../../../gpu/imagination/uapi.rst:26
msgid "DEV_QUERY"
msgstr ""

#: ../../../gpu/imagination/uapi:30: include/uapi/drm/pvr_drm.h:438
msgid ""
"For use with :c:type:`drm_pvr_ioctl_dev_query_args.type "
"<drm_pvr_ioctl_dev_query_args>` to indicate the type of the receiving "
"container."
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1203
#: ../../../gpu/imagination/uapi:30: include/uapi/drm/pvr_drm.h:442
#: ../../../gpu/imagination/uapi:43: include/uapi/drm/pvr_drm.h:262
#: ../../../gpu/imagination/uapi:48: include/uapi/drm/pvr_drm.h:334
#: ../../../gpu/imagination/uapi:98: include/uapi/drm/pvr_drm.h:725
#: include/uapi/drm/pvr_drm.h:743
msgid "**Constants**"
msgstr ""

#: ../../../gpu/imagination/uapi:30: include/uapi/drm/pvr_drm.h:444
msgid "``DRM_PVR_DEV_QUERY_GPU_INFO_GET``"
msgstr ""

#: ../../../gpu/imagination/uapi:30: include/uapi/drm/pvr_drm.h:445
msgid ""
"The dev query args contain a pointer to :c:type:`struct "
"drm_pvr_dev_query_gpu_info <drm_pvr_dev_query_gpu_info>`."
msgstr ""

#: ../../../gpu/imagination/uapi:30: include/uapi/drm/pvr_drm.h:448
msgid "``DRM_PVR_DEV_QUERY_RUNTIME_INFO_GET``"
msgstr ""

#: ../../../gpu/imagination/uapi:30: include/uapi/drm/pvr_drm.h:449
msgid ""
"The dev query args contain a pointer to :c:type:`struct "
"drm_pvr_dev_query_runtime_info <drm_pvr_dev_query_runtime_info>`."
msgstr ""

#: ../../../gpu/imagination/uapi:30: include/uapi/drm/pvr_drm.h:452
msgid "``DRM_PVR_DEV_QUERY_QUIRKS_GET``"
msgstr ""

#: ../../../gpu/imagination/uapi:30: include/uapi/drm/pvr_drm.h:453
msgid ""
"The dev query args contain a pointer to :c:type:`struct "
"drm_pvr_dev_query_quirks <drm_pvr_dev_query_quirks>`."
msgstr ""

#: ../../../gpu/imagination/uapi:30: include/uapi/drm/pvr_drm.h:456
msgid "``DRM_PVR_DEV_QUERY_ENHANCEMENTS_GET``"
msgstr ""

#: ../../../gpu/imagination/uapi:30: include/uapi/drm/pvr_drm.h:457
msgid ""
"The dev query args contain a pointer to :c:type:`struct "
"drm_pvr_dev_query_enhancements <drm_pvr_dev_query_enhancements>`."
msgstr ""

#: ../../../gpu/imagination/uapi:30: include/uapi/drm/pvr_drm.h:460
msgid "``DRM_PVR_DEV_QUERY_HEAP_INFO_GET``"
msgstr ""

#: ../../../gpu/imagination/uapi:30: include/uapi/drm/pvr_drm.h:461
msgid ""
"The dev query args contain a pointer to :c:type:`struct "
"drm_pvr_dev_query_heap_info <drm_pvr_dev_query_heap_info>`."
msgstr ""

#: ../../../gpu/imagination/uapi:30: include/uapi/drm/pvr_drm.h:464
msgid "``DRM_PVR_DEV_QUERY_STATIC_DATA_AREAS_GET``"
msgstr ""

#: ../../../gpu/imagination/uapi:30: include/uapi/drm/pvr_drm.h:465
msgid ""
"The dev query args contain a pointer to :c:type:`struct "
"drm_pvr_dev_query_static_data_areas <drm_pvr_dev_query_static_data_areas>`."
msgstr ""

#: ../../../gpu/imagination/uapi:30: include/uapi/drm/pvr_drm.h:439
msgid "Append only. Do not reorder."
msgstr ""

#: ../../../gpu/imagination/uapi:33: include/uapi/drm/pvr_drm.h:482
msgid "Arguments for ``DRM_IOCTL_PVR_DEV_QUERY``."
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1231
#: ../../../gpu/imagination/uapi:33: include/uapi/drm/pvr_drm.h:486
#: ../../../gpu/imagination/uapi:95: include/uapi/drm/pvr_drm.h:766
msgid "``type``"
msgstr ""

#: ../../../gpu/imagination/uapi:33: include/uapi/drm/pvr_drm.h:487
msgid ""
"Type of query and output struct. See :c:type:`enum drm_pvr_dev_query "
"<drm_pvr_dev_query>`."
msgstr ""

#: ../../../gpu/imagination/uapi:33: include/uapi/drm/pvr_drm.h:491
#: ../../../gpu/imagination/uapi:43: include/uapi/drm/pvr_drm.h:299
#: ../../../gpu/imagination/uapi:48: include/uapi/drm/pvr_drm.h:406
#: ../../../gpu/imagination/uapi:58: include/uapi/drm/pvr_drm.h:549
#: ../../../gpu/imagination/uapi:86: include/uapi/drm/pvr_drm.h:680
#: include/uapi/drm/pvr_drm.h:711
msgid "``size``"
msgstr ""

#: ../../../gpu/imagination/uapi:33: include/uapi/drm/pvr_drm.h:492
msgid "Size of the receiving struct, see **type**."
msgstr ""

#: ../../../gpu/imagination/uapi:33: include/uapi/drm/pvr_drm.h:494
msgid ""
"After a successful call this will be updated to the written byte length. Can "
"also be used to get the minimum byte length (see **pointer**). This allows "
"additional fields to be appended to the structs in future."
msgstr ""

#: ../../../gpu/imagination/uapi:33: include/uapi/drm/pvr_drm.h:502
msgid "``pointer``"
msgstr ""

#: ../../../gpu/imagination/uapi:33: include/uapi/drm/pvr_drm.h:503
msgid "Pointer to struct **type**."
msgstr ""

#: ../../../gpu/imagination/uapi:33: include/uapi/drm/pvr_drm.h:505
msgid ""
"Must be large enough to contain **size** bytes. If pointer is NULL, the "
"expected size will be returned in the **size** field, but no other data will "
"be written."
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:117
msgid "Container used to fetch information about the graphics processor."
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:125
msgid "``gpu_id``"
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:126
msgid "GPU identifier."
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:128
msgid ""
"For all currently supported GPUs this is the BVNC encoded as a 64-bit value "
"as follows:"
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:132
msgid "63..48"
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:132
msgid "47..32"
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:132
msgid "31..16"
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:132
msgid "15..0"
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:134
msgid "B"
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:134
msgid "V"
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:134
msgid "N"
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:134
msgid "C"
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:139
msgid "``num_phantoms``"
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:140
msgid "Number of Phantoms present."
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:143
#: include/uapi/drm/pvr_drm.h:224 include/uapi/drm/pvr_drm.h:253
#: ../../../gpu/imagination/uapi:58: include/uapi/drm/pvr_drm.h:560
msgid "``_padding_c``"
msgstr ""

#: ../../../gpu/imagination/uapi:106: include/uapi/drm/pvr_drm.h:819
#: ../../../gpu/imagination/uapi:117: include/uapi/drm/pvr_drm.h:894
#: ../../../gpu/imagination/uapi:132: include/uapi/drm/pvr_drm.h:1022
#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:144
#: include/uapi/drm/pvr_drm.h:225 include/uapi/drm/pvr_drm.h:251
#: include/uapi/drm/pvr_drm.h:254 ../../../gpu/imagination/uapi:58:
#: include/uapi/drm/pvr_drm.h:561 ../../../gpu/imagination/uapi:69:
#: include/uapi/drm/pvr_drm.h:590 ../../../gpu/imagination/uapi:77:
#: include/uapi/drm/pvr_drm.h:609 include/uapi/drm/pvr_drm.h:623
#: ../../../gpu/imagination/uapi:86: include/uapi/drm/pvr_drm.h:671
#: include/uapi/drm/pvr_drm.h:702
msgid "Reserved. This field must be zeroed."
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:118
msgid ""
"When fetching this type :c:type:`struct drm_pvr_ioctl_dev_query_args "
"<drm_pvr_ioctl_dev_query_args>`.type must be set to "
"``DRM_PVR_DEV_QUERY_GPU_INFO_GET``."
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:148
msgid "Container used to fetch information about the graphics runtime."
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:156
msgid "``free_list_min_pages``"
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:157
msgid "Minimum allowed free list size, in PM physical pages."
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:162
msgid "``free_list_max_pages``"
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:163
msgid "Maximum allowed free list size, in PM physical pages."
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:168
msgid "``common_store_alloc_region_size``"
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:169
msgid ""
"Size of the Allocation Region within the Common Store used for coefficient "
"and shared registers, in dwords."
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:175
msgid "``common_store_partition_space_size``"
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:176
msgid ""
"Size of the Partition Space within the Common Store for output buffers, in "
"dwords."
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:182
msgid "``max_coeffs``"
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:183
msgid "Maximum coefficients, in dwords."
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:187
msgid "``cdm_max_local_mem_size_regs``"
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:188
msgid ""
"Maximum amount of local memory available to a compute kernel, in dwords."
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:149
msgid ""
"When fetching this type :c:type:`struct drm_pvr_ioctl_dev_query_args "
"<drm_pvr_ioctl_dev_query_args>`.type must be set to "
"``DRM_PVR_DEV_QUERY_RUNTIME_INFO_GET``."
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:194
msgid ""
"Container used to fetch information about hardware fixes for which the "
"device may require support in the user mode driver."
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:203
msgid "``quirks``"
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:204
msgid "A userspace address for the hardware quirks __u32 array."
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:206
msgid ""
"The first **musthave_count** items in the list are quirks that the client "
"must support for this device. If userspace does not support all these quirks "
"then functionality is not guaranteed and client initialisation must fail. "
"The remaining quirks in the list affect userspace and the kernel or "
"firmware. They are disabled by default and require userspace to opt-in. The "
"opt-in mechanism depends on the quirk."
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:216
msgid "Length of **quirks** (number of __u32)."
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:219
msgid "``musthave_count``"
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:220
msgid ""
"The number of entries in **quirks** that are mandatory, starting at index 0."
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:195
msgid ""
"When fetching this type :c:type:`struct drm_pvr_ioctl_dev_query_args "
"<drm_pvr_ioctl_dev_query_args>`.type must be set to "
"``DRM_PVR_DEV_QUERY_QUIRKS_GET``."
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:229
msgid ""
"Container used to fetch information about optional enhancements supported by "
"the device that require support in the user mode driver."
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:238
msgid "``enhancements``"
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:239
msgid "A userspace address for the hardware enhancements __u32 array."
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:242
msgid ""
"These enhancements affect userspace and the kernel or firmware. They are "
"disabled by default and require userspace to opt-in. The opt-in mechanism "
"depends on the enhancement."
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:248
msgid "Length of **enhancements** (number of __u32)."
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:250
msgid "``_padding_a``"
msgstr ""

#: ../../../gpu/imagination/uapi:36: include/uapi/drm/pvr_drm.h:230
msgid ""
"When fetching this type :c:type:`struct drm_pvr_ioctl_dev_query_args "
"<drm_pvr_ioctl_dev_query_args>`.type must be set to "
"``DRM_PVR_DEV_ENHANCEMENTS_GET``."
msgstr ""

#: ../../../gpu/imagination/uapi:43: include/uapi/drm/pvr_drm.h:258
msgid ""
"Array index for heap info data returned by "
"``DRM_PVR_DEV_QUERY_HEAP_INFO_GET``."
msgstr ""

#: ../../../gpu/imagination/uapi:43: include/uapi/drm/pvr_drm.h:264
msgid "``DRM_PVR_HEAP_GENERAL``"
msgstr ""

#: ../../../gpu/imagination/uapi:43: include/uapi/drm/pvr_drm.h:265
msgid "General purpose heap."
msgstr ""

#: ../../../gpu/imagination/uapi:43: include/uapi/drm/pvr_drm.h:267
msgid "``DRM_PVR_HEAP_PDS_CODE_DATA``"
msgstr ""

#: ../../../gpu/imagination/uapi:43: include/uapi/drm/pvr_drm.h:268
msgid "PDS code and data heap."
msgstr ""

#: ../../../gpu/imagination/uapi:43: include/uapi/drm/pvr_drm.h:270
msgid "``DRM_PVR_HEAP_USC_CODE``"
msgstr ""

#: ../../../gpu/imagination/uapi:43: include/uapi/drm/pvr_drm.h:271
msgid "USC code heap."
msgstr ""

#: ../../../gpu/imagination/uapi:43: include/uapi/drm/pvr_drm.h:273
msgid "``DRM_PVR_HEAP_RGNHDR``"
msgstr ""

#: ../../../gpu/imagination/uapi:43: include/uapi/drm/pvr_drm.h:274
msgid "Region header heap. Only used if GPU has BRN63142."
msgstr ""

#: ../../../gpu/imagination/uapi:43: include/uapi/drm/pvr_drm.h:276
msgid "``DRM_PVR_HEAP_VIS_TEST``"
msgstr ""

#: ../../../gpu/imagination/uapi:43: include/uapi/drm/pvr_drm.h:277
msgid "Visibility test heap."
msgstr ""

#: ../../../gpu/imagination/uapi:43: include/uapi/drm/pvr_drm.h:279
msgid "``DRM_PVR_HEAP_TRANSFER_FRAG``"
msgstr ""

#: ../../../gpu/imagination/uapi:43: include/uapi/drm/pvr_drm.h:280
msgid "Transfer fragment heap."
msgstr ""

#: ../../../gpu/imagination/uapi:43: include/uapi/drm/pvr_drm.h:282
msgid "``DRM_PVR_HEAP_COUNT``"
msgstr ""

#: ../../../gpu/imagination/uapi:43: include/uapi/drm/pvr_drm.h:283
msgid "The number of heaps returned by ``DRM_PVR_DEV_QUERY_HEAP_INFO_GET``."
msgstr ""

#: ../../../gpu/imagination/uapi:43: include/uapi/drm/pvr_drm.h:286
msgid ""
"More heaps may be added, so this also serves as the copy limit when sent by "
"the caller."
msgstr ""

#: ../../../gpu/imagination/uapi:43: include/uapi/drm/pvr_drm.h:259
msgid ""
"For compatibility reasons all indices will be present in the returned array, "
"however some heaps may not be present. These are indicated where :c:type:"
"`struct drm_pvr_heap <drm_pvr_heap>`.size is set to zero."
msgstr ""

#: ../../../gpu/imagination/uapi:43: include/uapi/drm/pvr_drm.h:291
msgid "Container holding information about a single heap."
msgstr ""

#: ../../../gpu/imagination/uapi:43: include/uapi/drm/pvr_drm.h:296
msgid "``base``"
msgstr ""

#: ../../../gpu/imagination/uapi:43: include/uapi/drm/pvr_drm.h:297
msgid "Base address of heap."
msgstr ""

#: ../../../gpu/imagination/uapi:43: include/uapi/drm/pvr_drm.h:300
msgid "Size of heap, in bytes. Will be 0 if the heap is not present."
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1072
#: include/uapi/drm/pvr_drm.h:1250 ../../../gpu/imagination/uapi:43:
#: include/uapi/drm/pvr_drm.h:302 ../../../gpu/imagination/uapi:58:
#: include/uapi/drm/pvr_drm.h:564 ../../../gpu/imagination/uapi:86:
#: include/uapi/drm/pvr_drm.h:652 ../../../gpu/imagination/uapi:95:
#: include/uapi/drm/pvr_drm.h:772
msgid "``flags``"
msgstr ""

#: ../../../gpu/imagination/uapi:43: include/uapi/drm/pvr_drm.h:303
msgid "Flags for this heap. Currently always 0."
msgstr ""

#: ../../../gpu/imagination/uapi:43: include/uapi/drm/pvr_drm.h:305
msgid "``page_size_log2``"
msgstr ""

#: ../../../gpu/imagination/uapi:43: include/uapi/drm/pvr_drm.h:306
msgid "Log2 of page size."
msgstr ""

#: ../../../gpu/imagination/uapi:43: include/uapi/drm/pvr_drm.h:292
#: ../../../gpu/imagination/uapi:48: include/uapi/drm/pvr_drm.h:388
msgid "This will always be fetched as an array."
msgstr ""

#: ../../../gpu/imagination/uapi:43: include/uapi/drm/pvr_drm.h:310
msgid ""
"Container used to fetch information about heaps supported by the device "
"driver."
msgstr ""

#: ../../../gpu/imagination/uapi:43: include/uapi/drm/pvr_drm.h:322
msgid "``heaps``"
msgstr ""

#: ../../../gpu/imagination/uapi:43: include/uapi/drm/pvr_drm.h:323
msgid ""
"Array of :c:type:`struct drm_pvr_heap <drm_pvr_heap>`. If pointer is NULL, "
"the count and stride will be updated with those known to the driver version, "
"to facilitate allocation by the caller."
msgstr ""

#: ../../../gpu/imagination/uapi:43: include/uapi/drm/pvr_drm.h:311
msgid ""
"Please note all driver-supported heaps will be returned up to :c:type:`heaps."
"count <heaps>`. Some heaps will not be present in all devices, which will be "
"indicated by :c:type:`struct drm_pvr_heap <drm_pvr_heap>`.size being set to "
"zero."
msgstr ""

#: ../../../gpu/imagination/uapi:43: include/uapi/drm/pvr_drm.h:315
msgid ""
"When fetching this type :c:type:`struct drm_pvr_ioctl_dev_query_args "
"<drm_pvr_ioctl_dev_query_args>`.type must be set to "
"``DRM_PVR_DEV_QUERY_HEAP_INFO_GET``."
msgstr ""

#: ../../../gpu/imagination/uapi:48: include/uapi/drm/pvr_drm.h:330
msgid ""
"Array index for static data area info returned by "
"``DRM_PVR_DEV_QUERY_STATIC_DATA_AREAS_GET``."
msgstr ""

#: ../../../gpu/imagination/uapi:48: include/uapi/drm/pvr_drm.h:336
msgid "``DRM_PVR_STATIC_DATA_AREA_EOT``"
msgstr ""

#: ../../../gpu/imagination/uapi:48: include/uapi/drm/pvr_drm.h:337
msgid "End of Tile PDS program code segment."
msgstr ""

#: ../../../gpu/imagination/uapi:48: include/uapi/drm/pvr_drm.h:339
msgid ""
"The End of Tile PDS task runs at completion of a tile during a fragment job, "
"and is responsible for emitting the tile to the Pixel Back End."
msgstr ""

#: ../../../gpu/imagination/uapi:48: include/uapi/drm/pvr_drm.h:342
msgid "``DRM_PVR_STATIC_DATA_AREA_FENCE``"
msgstr ""

#: ../../../gpu/imagination/uapi:48: include/uapi/drm/pvr_drm.h:343
msgid "MCU fence area, used during cache flush and invalidation."
msgstr ""

#: ../../../gpu/imagination/uapi:48: include/uapi/drm/pvr_drm.h:346
msgid ""
"This must point to valid physical memory but the contents otherwise are not "
"used."
msgstr ""

#: ../../../gpu/imagination/uapi:48: include/uapi/drm/pvr_drm.h:348
msgid "``DRM_PVR_STATIC_DATA_AREA_VDM_SYNC``"
msgstr ""

#: ../../../gpu/imagination/uapi:48: include/uapi/drm/pvr_drm.h:349
msgid "VDM sync program."
msgstr ""

#: ../../../gpu/imagination/uapi:48: include/uapi/drm/pvr_drm.h:351
msgid ""
"The VDM sync program is used to synchronise multiple areas of the GPU "
"hardware."
msgstr ""

#: ../../../gpu/imagination/uapi:48: include/uapi/drm/pvr_drm.h:353
msgid "``DRM_PVR_STATIC_DATA_AREA_YUV_CSC``"
msgstr ""

#: ../../../gpu/imagination/uapi:48: include/uapi/drm/pvr_drm.h:354
msgid "YUV coefficients."
msgstr ""

#: ../../../gpu/imagination/uapi:48: include/uapi/drm/pvr_drm.h:356
msgid ""
"Area contains up to 16 slots with stride of 64 bytes. Each is a 3x4 matrix "
"of u16 fixed point numbers, with 1 sign bit, 2 integer bits and 13 "
"fractional bits."
msgstr ""

#: ../../../gpu/imagination/uapi:48: include/uapi/drm/pvr_drm.h:359
msgid ""
"The slots are : 0 = VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR 1 = "
"VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR (full range) 2 = "
"VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR (conformant range) 3 = "
"VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR (full range) 4 = "
"VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR (conformant range) 5 = "
"VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR (full range) 6 = "
"VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR (conformant range) 7 = "
"VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR (full range) 8 = "
"VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR (conformant range) 9 = "
"VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR (conformant range, 10 bit) "
"10 = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR (conformant range, 10 "
"bit) 11 = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR (conformant "
"range, 10 bit) 14 = Identity (biased) 15 = Identity"
msgstr ""

#: ../../../gpu/imagination/uapi:48: include/uapi/drm/pvr_drm.h:331
msgid ""
"For compatibility reasons all indices will be present in the returned array, "
"however some areas may not be present. These are indicated where :c:type:"
"`struct drm_pvr_static_data_area <drm_pvr_static_data_area>`.size is set to "
"zero."
msgstr ""

#: ../../../gpu/imagination/uapi:48: include/uapi/drm/pvr_drm.h:387
msgid "Container holding information about a single static data area."
msgstr ""

#: ../../../gpu/imagination/uapi:48: include/uapi/drm/pvr_drm.h:394
msgid "``area_usage``"
msgstr ""

#: ../../../gpu/imagination/uapi:48: include/uapi/drm/pvr_drm.h:395
msgid ""
"Usage of static data area. See :c:type:`enum drm_pvr_static_data_area_usage "
"<drm_pvr_static_data_area_usage>`."
msgstr ""

#: ../../../gpu/imagination/uapi:48: include/uapi/drm/pvr_drm.h:400
msgid "``location_heap_id``"
msgstr ""

#: ../../../gpu/imagination/uapi:48: include/uapi/drm/pvr_drm.h:401
msgid ""
"Array index of heap where this of static data area is located. This array is "
"fetched using ``DRM_PVR_DEV_QUERY_HEAP_INFO_GET``."
msgstr ""

#: ../../../gpu/imagination/uapi:48: include/uapi/drm/pvr_drm.h:407
msgid "Size of static data area. Not present if set to zero."
msgstr ""

#: ../../../gpu/imagination/uapi:48: include/uapi/drm/pvr_drm.h:409
#: ../../../gpu/imagination/uapi:69: include/uapi/drm/pvr_drm.h:592
#: ../../../gpu/imagination/uapi:86: include/uapi/drm/pvr_drm.h:674
msgid "``offset``"
msgstr ""

#: ../../../gpu/imagination/uapi:48: include/uapi/drm/pvr_drm.h:410
msgid "Offset of static data area from start of heap."
msgstr ""

#: ../../../gpu/imagination/uapi:48: include/uapi/drm/pvr_drm.h:414
msgid ""
"Container used to fetch information about the static data areas in heaps "
"supported by the device driver."
msgstr ""

#: ../../../gpu/imagination/uapi:48: include/uapi/drm/pvr_drm.h:430
msgid "``static_data_areas``"
msgstr ""

#: ../../../gpu/imagination/uapi:48: include/uapi/drm/pvr_drm.h:431
msgid ""
"Array of :c:type:`struct drm_pvr_static_data_area "
"<drm_pvr_static_data_area>`. If pointer is NULL, the count and stride will "
"be updated with those known to the driver version, to facilitate allocation "
"by the caller."
msgstr ""

#: ../../../gpu/imagination/uapi:48: include/uapi/drm/pvr_drm.h:415
msgid ""
"Please note all driver-supported static data areas will be returned up to :c:"
"type:`static_data_areas.count <static_data_areas>`. Some will not be present "
"for all devices which, will be indicated by :c:type:`struct "
"drm_pvr_static_data_area <drm_pvr_static_data_area>`.size being set to zero."
msgstr ""

#: ../../../gpu/imagination/uapi:48: include/uapi/drm/pvr_drm.h:419
msgid ""
"Further, some heaps will not be present either. See :c:type:`struct "
"drm_pvr_dev_query_heap_info <drm_pvr_dev_query_heap_info>`."
msgstr ""

#: ../../../gpu/imagination/uapi:48: include/uapi/drm/pvr_drm.h:422
msgid ""
"When fetching this type :c:type:`struct drm_pvr_ioctl_dev_query_args "
"<drm_pvr_ioctl_dev_query_args>`.type must be set to "
"``DRM_PVR_DEV_QUERY_STATIC_DATA_AREAS_GET``."
msgstr ""

#: ../../../gpu/imagination/uapi.rst:54
msgid "CREATE_BO"
msgstr ""

#: ../../../gpu/imagination/uapi:58: include/uapi/drm/pvr_drm.h:545
msgid "Arguments for ``DRM_IOCTL_PVR_CREATE_BO``"
msgstr ""

#: ../../../gpu/imagination/uapi:58: include/uapi/drm/pvr_drm.h:550
msgid "[IN] Size of buffer object to create. This must be page size aligned."
msgstr ""

#: ../../../gpu/imagination/uapi:106: include/uapi/drm/pvr_drm.h:814
#: ../../../gpu/imagination/uapi:114: include/uapi/drm/pvr_drm.h:878
#: ../../../gpu/imagination/uapi:117: include/uapi/drm/pvr_drm.h:889
#: ../../../gpu/imagination/uapi:125: include/uapi/drm/pvr_drm.h:1006
#: ../../../gpu/imagination/uapi:132: include/uapi/drm/pvr_drm.h:1017
#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1069
#: ../../../gpu/imagination/uapi:58: include/uapi/drm/pvr_drm.h:555
#: ../../../gpu/imagination/uapi:69: include/uapi/drm/pvr_drm.h:586
#: ../../../gpu/imagination/uapi:77: include/uapi/drm/pvr_drm.h:605
#: include/uapi/drm/pvr_drm.h:618 ../../../gpu/imagination/uapi:86:
#: include/uapi/drm/pvr_drm.h:665 ../../../gpu/imagination/uapi:95:
#: include/uapi/drm/pvr_drm.h:782
msgid "``handle``"
msgstr ""

#: ../../../gpu/imagination/uapi:58: include/uapi/drm/pvr_drm.h:556
msgid "[OUT] GEM handle of the new buffer object for use in userspace."
msgstr ""

#: ../../../gpu/imagination/uapi:58: include/uapi/drm/pvr_drm.h:565
msgid ""
"[IN] Options which will affect the behaviour of this creation operation and "
"future mapping operations on the created object. This field must be a valid "
"combination of ``DRM_PVR_BO_*`` values, with all bits marked as reserved set "
"to zero."
msgstr ""

#: ../../../gpu/imagination/uapi:61: include/uapi/drm/pvr_drm.h:516
msgid ""
"We use \"device\" to refer to the GPU here because of the ambiguity between "
"CPU and GPU in some fonts."
msgstr ""

#: ../../../gpu/imagination/uapi:61: include/uapi/drm/pvr_drm.h:519
msgid "Device mapping options"
msgstr ""

#: ../../../gpu/imagination/uapi:61: include/uapi/drm/pvr_drm.h:0
msgid "DRM_PVR_BO_BYPASS_DEVICE_CACHE"
msgstr ""

#: ../../../gpu/imagination/uapi:61: include/uapi/drm/pvr_drm.h:520
msgid ""
"Specify that device accesses to this memory will bypass the cache. This is "
"used for buffers that will either be regularly updated by the CPU (eg free "
"lists) or will be accessed only once and therefore isn't worth caching (eg "
"partial render buffers). By default, the device flushes its memory caches "
"after every job, so this is not normally required for coherency."
msgstr ""

#: ../../../gpu/imagination/uapi:61: include/uapi/drm/pvr_drm.h:0
msgid "DRM_PVR_BO_PM_FW_PROTECT"
msgstr ""

#: ../../../gpu/imagination/uapi:61: include/uapi/drm/pvr_drm.h:526
msgid ""
"Specify that only the Parameter Manager (PM) and/or firmware processor "
"should be allowed to access this memory when mapped to the device. It is not "
"valid to specify this flag with DRM_PVR_BO_ALLOW_CPU_USERSPACE_ACCESS."
msgstr ""

#: ../../../gpu/imagination/uapi:61: include/uapi/drm/pvr_drm.h:530
msgid "CPU mapping options"
msgstr ""

#: ../../../gpu/imagination/uapi:61: include/uapi/drm/pvr_drm.h:0
msgid "DRM_PVR_BO_ALLOW_CPU_USERSPACE_ACCESS"
msgstr ""

#: ../../../gpu/imagination/uapi:61: include/uapi/drm/pvr_drm.h:531
msgid ""
"Allow userspace to map and access the contents of this memory. It is not "
"valid to specify this flag with DRM_PVR_BO_PM_FW_PROTECT."
msgstr ""

#: ../../../gpu/imagination/uapi.rst:65
msgid "GET_BO_MMAP_OFFSET"
msgstr ""

#: ../../../gpu/imagination/uapi:69: include/uapi/drm/pvr_drm.h:577
msgid "Arguments for ``DRM_IOCTL_PVR_GET_BO_MMAP_OFFSET``"
msgstr ""

#: ../../../gpu/imagination/uapi:69: include/uapi/drm/pvr_drm.h:587
msgid "[IN] GEM handle of the buffer object to be mapped."
msgstr ""

#: ../../../gpu/imagination/uapi:106: include/uapi/drm/pvr_drm.h:818
#: ../../../gpu/imagination/uapi:117: include/uapi/drm/pvr_drm.h:893
#: ../../../gpu/imagination/uapi:132: include/uapi/drm/pvr_drm.h:1021
#: ../../../gpu/imagination/uapi:69: include/uapi/drm/pvr_drm.h:589
#: ../../../gpu/imagination/uapi:77: include/uapi/drm/pvr_drm.h:608
#: include/uapi/drm/pvr_drm.h:622 ../../../gpu/imagination/uapi:86:
#: include/uapi/drm/pvr_drm.h:701
msgid "``_padding_4``"
msgstr ""

#: ../../../gpu/imagination/uapi:69: include/uapi/drm/pvr_drm.h:593
msgid "[OUT] Fake offset to use in the real mmap call."
msgstr ""

#: ../../../gpu/imagination/uapi:69: include/uapi/drm/pvr_drm.h:578
msgid ""
"Like other DRM drivers, the \"mmap\" IOCTL doesn't actually map any memory. "
"Instead, it allocates a fake offset which refers to the specified buffer "
"object. This offset can be used with a real mmap call on the DRM device "
"itself."
msgstr ""

#: ../../../gpu/imagination/uapi.rst:73
msgid "CREATE_VM_CONTEXT and DESTROY_VM_CONTEXT"
msgstr ""

#: ../../../gpu/imagination/uapi:77: include/uapi/drm/pvr_drm.h:601
msgid "Arguments for ``DRM_IOCTL_PVR_CREATE_VM_CONTEXT``"
msgstr ""

#: ../../../gpu/imagination/uapi:77: include/uapi/drm/pvr_drm.h:606
msgid "[OUT] Handle for new VM context."
msgstr ""

#: ../../../gpu/imagination/uapi:77: include/uapi/drm/pvr_drm.h:613
msgid "Arguments for ``DRM_IOCTL_PVR_DESTROY_VM_CONTEXT``"
msgstr ""

#: ../../../gpu/imagination/uapi:77: include/uapi/drm/pvr_drm.h:619
msgid "[IN] Handle for VM context to be destroyed."
msgstr ""

#: ../../../gpu/imagination/uapi.rst:82
msgid "VM_MAP and VM_UNMAP"
msgstr ""

#: ../../../gpu/imagination/uapi:83: include/uapi/drm/pvr_drm.h:627
msgid ""
"The VM UAPI allows userspace to create buffer object mappings in GPU virtual "
"address space."
msgstr ""

#: ../../../gpu/imagination/uapi:83: include/uapi/drm/pvr_drm.h:629
msgid ""
"The client is responsible for managing GPU address space. It should allocate "
"mappings within the heaps returned by ``DRM_PVR_DEV_QUERY_HEAP_INFO_GET``."
msgstr ""

#: ../../../gpu/imagination/uapi:83: include/uapi/drm/pvr_drm.h:632
msgid ""
"``DRM_IOCTL_PVR_VM_MAP`` creates a new mapping. The client provides the "
"target virtual address for the mapping. Size and offset within the mapped "
"buffer object can be specified, so the client can partially map a buffer."
msgstr ""

#: ../../../gpu/imagination/uapi:83: include/uapi/drm/pvr_drm.h:636
msgid ""
"``DRM_IOCTL_PVR_VM_UNMAP`` removes a mapping. The entire mapping will be "
"removed from GPU address space only if the size of the mapping matches that "
"known to the driver."
msgstr ""

#: ../../../gpu/imagination/uapi:86: include/uapi/drm/pvr_drm.h:643
msgid "Arguments for ``DRM_IOCTL_PVR_VM_MAP``."
msgstr ""

#: ../../../gpu/imagination/uapi:114: include/uapi/drm/pvr_drm.h:872
#: ../../../gpu/imagination/uapi:86: include/uapi/drm/pvr_drm.h:647
#: include/uapi/drm/pvr_drm.h:696 ../../../gpu/imagination/uapi:95:
#: include/uapi/drm/pvr_drm.h:796
msgid "``vm_context_handle``"
msgstr ""

#: ../../../gpu/imagination/uapi:86: include/uapi/drm/pvr_drm.h:648
msgid "[IN] Handle for VM context for this mapping to exist in."
msgstr ""

#: ../../../gpu/imagination/uapi:86: include/uapi/drm/pvr_drm.h:653
msgid "[IN] Flags which affect this mapping. Currently always 0."
msgstr ""

#: ../../../gpu/imagination/uapi:86: include/uapi/drm/pvr_drm.h:656
#: include/uapi/drm/pvr_drm.h:705
msgid "``device_addr``"
msgstr ""

#: ../../../gpu/imagination/uapi:86: include/uapi/drm/pvr_drm.h:657
msgid ""
"[IN] Requested device-virtual address for the mapping. This must be non-zero "
"and aligned to the device page size for the heap containing the requested "
"address. It is an error to specify an address which is not contained within "
"one of the heaps returned by ``DRM_PVR_DEV_QUERY_HEAP_INFO_GET``."
msgstr ""

#: ../../../gpu/imagination/uapi:86: include/uapi/drm/pvr_drm.h:666
msgid ""
"[IN] Handle of the target buffer object. This must be a valid handle "
"returned by ``DRM_IOCTL_PVR_CREATE_BO``."
msgstr ""

#: ../../../gpu/imagination/uapi:86: include/uapi/drm/pvr_drm.h:670
msgid "``_padding_14``"
msgstr ""

#: ../../../gpu/imagination/uapi:86: include/uapi/drm/pvr_drm.h:675
msgid "[IN] Offset into the target bo from which to begin the mapping."
msgstr ""

#: ../../../gpu/imagination/uapi:86: include/uapi/drm/pvr_drm.h:681
msgid ""
"[IN] Size of the requested mapping. Must be aligned to the device page size "
"for the heap containing the requested address, as well as the host page "
"size. When added to **device_addr**, the result must not overflow the heap "
"which contains **device_addr** (i.e. the range specified by **device_addr** "
"and **size** must be completely contained within a single heap specified by "
"``DRM_PVR_DEV_QUERY_HEAP_INFO_GET``)."
msgstr ""

#: ../../../gpu/imagination/uapi:86: include/uapi/drm/pvr_drm.h:692
msgid "Arguments for ``DRM_IOCTL_PVR_VM_UNMAP``."
msgstr ""

#: ../../../gpu/imagination/uapi:86: include/uapi/drm/pvr_drm.h:697
msgid "[IN] Handle for VM context that this mapping exists in."
msgstr ""

#: ../../../gpu/imagination/uapi:86: include/uapi/drm/pvr_drm.h:706
msgid ""
"[IN] Device-virtual address at the start of the target mapping. This must be "
"non-zero."
msgstr ""

#: ../../../gpu/imagination/uapi:86: include/uapi/drm/pvr_drm.h:712
msgid "Size in bytes of the target mapping. This must be non-zero."
msgstr ""

#: ../../../gpu/imagination/uapi.rst:91
msgid "CREATE_CONTEXT and DESTROY_CONTEXT"
msgstr ""

#: ../../../gpu/imagination/uapi:95: include/uapi/drm/pvr_drm.h:761
msgid "Arguments for ``DRM_IOCTL_PVR_CREATE_CONTEXT``"
msgstr ""

#: ../../../gpu/imagination/uapi:95: include/uapi/drm/pvr_drm.h:767
msgid "[IN] Type of context to create."
msgstr ""

#: ../../../gpu/imagination/uapi:95: include/uapi/drm/pvr_drm.h:769
msgid ""
"This must be one of the values defined by :c:type:`enum drm_pvr_ctx_type "
"<drm_pvr_ctx_type>`."
msgstr ""

#: ../../../gpu/imagination/uapi:95: include/uapi/drm/pvr_drm.h:773
msgid "[IN] Flags for context."
msgstr ""

#: ../../../gpu/imagination/uapi:95: include/uapi/drm/pvr_drm.h:776
msgid "``priority``"
msgstr ""

#: ../../../gpu/imagination/uapi:95: include/uapi/drm/pvr_drm.h:777
msgid "[IN] Priority of new context."
msgstr ""

#: ../../../gpu/imagination/uapi:95: include/uapi/drm/pvr_drm.h:779
msgid ""
"This must be one of the values defined by :c:type:`enum drm_pvr_ctx_priority "
"<drm_pvr_ctx_priority>`."
msgstr ""

#: ../../../gpu/imagination/uapi:95: include/uapi/drm/pvr_drm.h:783
msgid "[OUT] Handle for new context."
msgstr ""

#: ../../../gpu/imagination/uapi:95: include/uapi/drm/pvr_drm.h:786
msgid "``static_context_state``"
msgstr ""

#: ../../../gpu/imagination/uapi:95: include/uapi/drm/pvr_drm.h:787
msgid "[IN] Pointer to static context state stream."
msgstr ""

#: ../../../gpu/imagination/uapi:95: include/uapi/drm/pvr_drm.h:791
msgid "``static_context_state_len``"
msgstr ""

#: ../../../gpu/imagination/uapi:95: include/uapi/drm/pvr_drm.h:792
msgid "[IN] Length of static context state, in bytes."
msgstr ""

#: ../../../gpu/imagination/uapi:95: include/uapi/drm/pvr_drm.h:797
msgid "[IN] Handle for VM context that this context is associated with."
msgstr ""

#: ../../../gpu/imagination/uapi:95: include/uapi/drm/pvr_drm.h:802
msgid "``callstack_addr``"
msgstr ""

#: ../../../gpu/imagination/uapi:95: include/uapi/drm/pvr_drm.h:803
msgid ""
"[IN] Address for initial call stack pointer. Only valid if **type** is "
"``DRM_PVR_CTX_TYPE_RENDER``, otherwise must be 0."
msgstr ""

#: ../../../gpu/imagination/uapi:98: include/uapi/drm/pvr_drm.h:721
msgid ""
"Arguments for :c:type:`drm_pvr_ioctl_create_context_args.priority "
"<drm_pvr_ioctl_create_context_args>`"
msgstr ""

#: ../../../gpu/imagination/uapi:98: include/uapi/drm/pvr_drm.h:727
msgid "``DRM_PVR_CTX_PRIORITY_LOW``"
msgstr ""

#: ../../../gpu/imagination/uapi:98: include/uapi/drm/pvr_drm.h:728
msgid "Priority below normal."
msgstr ""

#: ../../../gpu/imagination/uapi:98: include/uapi/drm/pvr_drm.h:730
msgid "``DRM_PVR_CTX_PRIORITY_NORMAL``"
msgstr ""

#: ../../../gpu/imagination/uapi:98: include/uapi/drm/pvr_drm.h:731
msgid "Normal priority."
msgstr ""

#: ../../../gpu/imagination/uapi:98: include/uapi/drm/pvr_drm.h:733
msgid "``DRM_PVR_CTX_PRIORITY_HIGH``"
msgstr ""

#: ../../../gpu/imagination/uapi:98: include/uapi/drm/pvr_drm.h:734
msgid ""
"Priority above normal. Note this requires ``CAP_SYS_NICE`` or ``DRM_MASTER``."
msgstr ""

#: ../../../gpu/imagination/uapi:98: include/uapi/drm/pvr_drm.h:739
msgid ""
"Arguments for :c:type:`struct drm_pvr_ioctl_create_context_args "
"<drm_pvr_ioctl_create_context_args>`.type"
msgstr ""

#: ../../../gpu/imagination/uapi:98: include/uapi/drm/pvr_drm.h:745
msgid "``DRM_PVR_CTX_TYPE_RENDER``"
msgstr ""

#: ../../../gpu/imagination/uapi:98: include/uapi/drm/pvr_drm.h:746
msgid "Render context."
msgstr ""

#: ../../../gpu/imagination/uapi:98: include/uapi/drm/pvr_drm.h:748
msgid "``DRM_PVR_CTX_TYPE_COMPUTE``"
msgstr ""

#: ../../../gpu/imagination/uapi:98: include/uapi/drm/pvr_drm.h:749
msgid "Compute context."
msgstr ""

#: ../../../gpu/imagination/uapi:98: include/uapi/drm/pvr_drm.h:751
msgid "``DRM_PVR_CTX_TYPE_TRANSFER_FRAG``"
msgstr ""

#: ../../../gpu/imagination/uapi:98: include/uapi/drm/pvr_drm.h:752
msgid "Transfer context for fragment data master."
msgstr ""

#: ../../../gpu/imagination/uapi:106: include/uapi/drm/pvr_drm.h:809
msgid "Arguments for ``DRM_IOCTL_PVR_DESTROY_CONTEXT``"
msgstr ""

#: ../../../gpu/imagination/uapi:106: include/uapi/drm/pvr_drm.h:815
msgid "[IN] Handle for context to be destroyed."
msgstr ""

#: ../../../gpu/imagination/uapi.rst:110
msgid "CREATE_FREE_LIST and DESTROY_FREE_LIST"
msgstr ""

#: ../../../gpu/imagination/uapi:114: include/uapi/drm/pvr_drm.h:827
msgid "Arguments for ``DRM_IOCTL_PVR_CREATE_FREE_LIST``"
msgstr ""

#: ../../../gpu/imagination/uapi:114: include/uapi/drm/pvr_drm.h:844
msgid "``free_list_gpu_addr``"
msgstr ""

#: ../../../gpu/imagination/uapi:114: include/uapi/drm/pvr_drm.h:845
msgid ""
"[IN] Address of GPU mapping of buffer object containing memory to be used by "
"free list."
msgstr ""

#: ../../../gpu/imagination/uapi:114: include/uapi/drm/pvr_drm.h:848
msgid ""
"The mapped region of the buffer object must be at least **max_num_pages** * "
"``sizeof(__u32)``."
msgstr ""

#: ../../../gpu/imagination/uapi:114: include/uapi/drm/pvr_drm.h:851
msgid ""
"The buffer object must have been created with "
"``DRM_PVR_BO_DEVICE_PM_FW_PROTECT`` set and "
"``DRM_PVR_BO_CPU_ALLOW_USERSPACE_ACCESS`` not set."
msgstr ""

#: ../../../gpu/imagination/uapi:114: include/uapi/drm/pvr_drm.h:856
msgid "``initial_num_pages``"
msgstr ""

#: ../../../gpu/imagination/uapi:114: include/uapi/drm/pvr_drm.h:857
msgid "[IN] Pages initially allocated to free list."
msgstr ""

#: ../../../gpu/imagination/uapi:114: include/uapi/drm/pvr_drm.h:859
msgid "``max_num_pages``"
msgstr ""

#: ../../../gpu/imagination/uapi:114: include/uapi/drm/pvr_drm.h:860
msgid "[IN] Maximum number of pages in free list."
msgstr ""

#: ../../../gpu/imagination/uapi:114: include/uapi/drm/pvr_drm.h:862
msgid "``grow_num_pages``"
msgstr ""

#: ../../../gpu/imagination/uapi:114: include/uapi/drm/pvr_drm.h:863
msgid "[IN] Pages to grow free list by per request."
msgstr ""

#: ../../../gpu/imagination/uapi:114: include/uapi/drm/pvr_drm.h:866
msgid "``grow_threshold``"
msgstr ""

#: ../../../gpu/imagination/uapi:114: include/uapi/drm/pvr_drm.h:867
msgid ""
"[IN] Percentage of FL memory used that should trigger a new grow request."
msgstr ""

#: ../../../gpu/imagination/uapi:114: include/uapi/drm/pvr_drm.h:873
msgid ""
"[IN] Handle for VM context that the free list buffer object is mapped in."
msgstr ""

#: ../../../gpu/imagination/uapi:114: include/uapi/drm/pvr_drm.h:879
msgid "[OUT] Handle for created free list."
msgstr ""

#: ../../../gpu/imagination/uapi:114: include/uapi/drm/pvr_drm.h:828
msgid "Free list arguments have the following constraints :"
msgstr ""

#: ../../../gpu/imagination/uapi:114: include/uapi/drm/pvr_drm.h:830
msgid "**max_num_pages** must be greater than zero."
msgstr ""

#: ../../../gpu/imagination/uapi:114: include/uapi/drm/pvr_drm.h:831
msgid "**grow_threshold** must be between 0 and 100."
msgstr ""

#: ../../../gpu/imagination/uapi:114: include/uapi/drm/pvr_drm.h:832
msgid ""
"**grow_num_pages** must be less than or equal to :c:type:`max_num_pages`."
msgstr ""

#: ../../../gpu/imagination/uapi:114: include/uapi/drm/pvr_drm.h:833
msgid ""
"**initial_num_pages**, **max_num_pages** and **grow_num_pages** must be "
"multiples of 4."
msgstr ""

#: ../../../gpu/imagination/uapi:114: include/uapi/drm/pvr_drm.h:835
msgid ""
"When :c:type:`grow_num_pages` is 0, **initial_num_pages** must be equal to "
"**max_num_pages**."
msgstr ""

#: ../../../gpu/imagination/uapi:114: include/uapi/drm/pvr_drm.h:837
msgid ""
"When :c:type:`grow_num_pages` is non-zero, **initial_num_pages** must be "
"less than **max_num_pages**."
msgstr ""

#: ../../../gpu/imagination/uapi:117: include/uapi/drm/pvr_drm.h:884
msgid "Arguments for ``DRM_IOCTL_PVR_DESTROY_FREE_LIST``"
msgstr ""

#: ../../../gpu/imagination/uapi:117: include/uapi/drm/pvr_drm.h:890
msgid "[IN] Handle for free list to be destroyed."
msgstr ""

#: ../../../gpu/imagination/uapi.rst:121
msgid "CREATE_HWRT_DATASET and DESTROY_HWRT_DATASET"
msgstr ""

#: ../../../gpu/imagination/uapi:125: include/uapi/drm/pvr_drm.h:941
msgid "Arguments for ``DRM_IOCTL_PVR_CREATE_HWRT_DATASET``"
msgstr ""

#: ../../../gpu/imagination/uapi:125: include/uapi/drm/pvr_drm.h:945
msgid "``geom_data_args``"
msgstr ""

#: ../../../gpu/imagination/uapi:125: include/uapi/drm/pvr_drm.h:946
msgid "[IN] Geometry data arguments."
msgstr ""

#: ../../../gpu/imagination/uapi:125: include/uapi/drm/pvr_drm.h:949
msgid "``rt_data_args``"
msgstr ""

#: ../../../gpu/imagination/uapi:125: include/uapi/drm/pvr_drm.h:950
msgid "[IN] Array of render target arguments."
msgstr ""

#: ../../../gpu/imagination/uapi:125: include/uapi/drm/pvr_drm.h:952
msgid ""
"Each entry in this array represents a render target in a double buffered "
"setup."
msgstr ""

#: ../../../gpu/imagination/uapi:125: include/uapi/drm/pvr_drm.h:957
msgid "``free_list_handles``"
msgstr ""

#: ../../../gpu/imagination/uapi:125: include/uapi/drm/pvr_drm.h:958
msgid "[IN] Array of free list handles."
msgstr ""

#: ../../../gpu/imagination/uapi:125: include/uapi/drm/pvr_drm.h:960
msgid ""
"free_list_handles[PVR_DRM_HWRT_FREE_LIST_LOCAL] must have initial size of at "
"least that reported by :c:type:`drm_pvr_dev_query_runtime_info."
"free_list_min_pages <drm_pvr_dev_query_runtime_info>`."
msgstr ""

#: ../../../gpu/imagination/uapi:125: include/uapi/drm/pvr_drm.h:965
msgid "``width``"
msgstr ""

#: ../../../gpu/imagination/uapi:125: include/uapi/drm/pvr_drm.h:966
msgid "[IN] Width in pixels."
msgstr ""

#: ../../../gpu/imagination/uapi:125: include/uapi/drm/pvr_drm.h:968
msgid "``height``"
msgstr ""

#: ../../../gpu/imagination/uapi:125: include/uapi/drm/pvr_drm.h:969
msgid "[IN] Height in pixels."
msgstr ""

#: ../../../gpu/imagination/uapi:125: include/uapi/drm/pvr_drm.h:971
msgid "``samples``"
msgstr ""

#: ../../../gpu/imagination/uapi:125: include/uapi/drm/pvr_drm.h:972
msgid "[IN] Number of samples."
msgstr ""

#: ../../../gpu/imagination/uapi:125: include/uapi/drm/pvr_drm.h:974
msgid "``layers``"
msgstr ""

#: ../../../gpu/imagination/uapi:125: include/uapi/drm/pvr_drm.h:975
msgid "[IN] Number of layers."
msgstr ""

#: ../../../gpu/imagination/uapi:125: include/uapi/drm/pvr_drm.h:977
msgid "``isp_merge_lower_x``"
msgstr ""

#: ../../../gpu/imagination/uapi:125: include/uapi/drm/pvr_drm.h:978
msgid "[IN] Lower X coefficient for triangle merging."
msgstr ""

#: ../../../gpu/imagination/uapi:125: include/uapi/drm/pvr_drm.h:980
msgid "``isp_merge_lower_y``"
msgstr ""

#: ../../../gpu/imagination/uapi:125: include/uapi/drm/pvr_drm.h:981
msgid "[IN] Lower Y coefficient for triangle merging."
msgstr ""

#: ../../../gpu/imagination/uapi:125: include/uapi/drm/pvr_drm.h:983
msgid "``isp_merge_scale_x``"
msgstr ""

#: ../../../gpu/imagination/uapi:125: include/uapi/drm/pvr_drm.h:984
msgid "[IN] Scale X coefficient for triangle merging."
msgstr ""

#: ../../../gpu/imagination/uapi:125: include/uapi/drm/pvr_drm.h:986
msgid "``isp_merge_scale_y``"
msgstr ""

#: ../../../gpu/imagination/uapi:125: include/uapi/drm/pvr_drm.h:987
msgid "[IN] Scale Y coefficient for triangle merging."
msgstr ""

#: ../../../gpu/imagination/uapi:125: include/uapi/drm/pvr_drm.h:989
msgid "``isp_merge_upper_x``"
msgstr ""

#: ../../../gpu/imagination/uapi:125: include/uapi/drm/pvr_drm.h:990
msgid "[IN] Upper X coefficient for triangle merging."
msgstr ""

#: ../../../gpu/imagination/uapi:125: include/uapi/drm/pvr_drm.h:992
msgid "``isp_merge_upper_y``"
msgstr ""

#: ../../../gpu/imagination/uapi:125: include/uapi/drm/pvr_drm.h:993
msgid "[IN] Upper Y coefficient for triangle merging."
msgstr ""

#: ../../../gpu/imagination/uapi:125: include/uapi/drm/pvr_drm.h:996
msgid "``region_header_size``"
msgstr ""

#: ../../../gpu/imagination/uapi:125: include/uapi/drm/pvr_drm.h:997
msgid ""
"[IN] Size of region header array. This common field is used by both render "
"targets in this data set."
msgstr ""

#: ../../../gpu/imagination/uapi:125: include/uapi/drm/pvr_drm.h:1000
msgid ""
"The units for this field differ depending on what version of the simple "
"internal parameter format the device uses. If format 2 is in use then this "
"is interpreted as the number of region headers. For other formats it is "
"interpreted as the size in dwords."
msgstr ""

#: ../../../gpu/imagination/uapi:125: include/uapi/drm/pvr_drm.h:1007
msgid "[OUT] Handle for created HWRT dataset."
msgstr ""

#: ../../../gpu/imagination/uapi:128: include/uapi/drm/pvr_drm.h:902
msgid ""
"Geometry data arguments used for :c:type:`struct "
"drm_pvr_ioctl_create_hwrt_dataset_args "
"<drm_pvr_ioctl_create_hwrt_dataset_args>`.geom_data_args."
msgstr ""

#: ../../../gpu/imagination/uapi:128: include/uapi/drm/pvr_drm.h:906
msgid "``tpc_dev_addr``"
msgstr ""

#: ../../../gpu/imagination/uapi:128: include/uapi/drm/pvr_drm.h:907
msgid "[IN] Tail pointer cache GPU virtual address."
msgstr ""

#: ../../../gpu/imagination/uapi:128: include/uapi/drm/pvr_drm.h:909
msgid "``tpc_size``"
msgstr ""

#: ../../../gpu/imagination/uapi:128: include/uapi/drm/pvr_drm.h:910
msgid "[IN] Size of TPC, in bytes."
msgstr ""

#: ../../../gpu/imagination/uapi:128: include/uapi/drm/pvr_drm.h:912
msgid "``tpc_stride``"
msgstr ""

#: ../../../gpu/imagination/uapi:128: include/uapi/drm/pvr_drm.h:913
msgid "[IN] Stride between layers in TPC, in pages"
msgstr ""

#: ../../../gpu/imagination/uapi:128: include/uapi/drm/pvr_drm.h:915
msgid "``vheap_table_dev_addr``"
msgstr ""

#: ../../../gpu/imagination/uapi:128: include/uapi/drm/pvr_drm.h:916
msgid "[IN] VHEAP table GPU virtual address."
msgstr ""

#: ../../../gpu/imagination/uapi:128: include/uapi/drm/pvr_drm.h:918
msgid "``rtc_dev_addr``"
msgstr ""

#: ../../../gpu/imagination/uapi:128: include/uapi/drm/pvr_drm.h:919
msgid "[IN] Render Target Cache virtual address."
msgstr ""

#: ../../../gpu/imagination/uapi:128: include/uapi/drm/pvr_drm.h:923
msgid ""
"Render target arguments used for :c:type:`struct "
"drm_pvr_ioctl_create_hwrt_dataset_args "
"<drm_pvr_ioctl_create_hwrt_dataset_args>`.rt_data_args."
msgstr ""

#: ../../../gpu/imagination/uapi:128: include/uapi/drm/pvr_drm.h:927
msgid "``pm_mlist_dev_addr``"
msgstr ""

#: ../../../gpu/imagination/uapi:128: include/uapi/drm/pvr_drm.h:928
msgid "[IN] PM MLIST GPU virtual address."
msgstr ""

#: ../../../gpu/imagination/uapi:128: include/uapi/drm/pvr_drm.h:930
msgid "``macrotile_array_dev_addr``"
msgstr ""

#: ../../../gpu/imagination/uapi:128: include/uapi/drm/pvr_drm.h:931
msgid "[IN] Macrotile array GPU virtual address."
msgstr ""

#: ../../../gpu/imagination/uapi:128: include/uapi/drm/pvr_drm.h:933
msgid "``region_header_dev_addr``"
msgstr ""

#: ../../../gpu/imagination/uapi:128: include/uapi/drm/pvr_drm.h:934
msgid "[IN] Region header array GPU virtual address."
msgstr ""

#: ../../../gpu/imagination/uapi:132: include/uapi/drm/pvr_drm.h:1012
msgid "Arguments for ``DRM_IOCTL_PVR_DESTROY_HWRT_DATASET``"
msgstr ""

#: ../../../gpu/imagination/uapi:132: include/uapi/drm/pvr_drm.h:1018
msgid "[IN] Handle for HWRT dataset to be destroyed."
msgstr ""

#: ../../../gpu/imagination/uapi.rst:136
msgid "SUBMIT_JOBS"
msgstr ""

#: ../../../gpu/imagination/uapi:140: include/uapi/drm/pvr_drm.h:1032
msgid "Handle type mask for the drm_pvr_sync_op::flags field."
msgstr ""

#: ../../../gpu/imagination/uapi:140: include/uapi/drm/pvr_drm.h:1036
msgid ""
"Indicates the handle passed in drm_pvr_sync_op::handle is a syncobj handle. "
"This is the default type."
msgstr ""

#: ../../../gpu/imagination/uapi:140: include/uapi/drm/pvr_drm.h:1041
msgid ""
"Indicates the handle passed in drm_pvr_sync_op::handle is a timeline syncobj "
"handle."
msgstr ""

#: ../../../gpu/imagination/uapi:140: include/uapi/drm/pvr_drm.h:1045
msgid ""
"Signal operation requested. The out-fence bound to the job will be attached "
"to the syncobj whose handle is passed in drm_pvr_sync_op::handle."
msgstr ""

#: ../../../gpu/imagination/uapi:140: include/uapi/drm/pvr_drm.h:1050
msgid ""
"Wait operation requested. The job will wait for this particular syncobj or "
"syncobj point to be signaled before being started. This is the default "
"operation."
msgstr ""

#: ../../../gpu/imagination/uapi:143: include/uapi/drm/pvr_drm.h:1280
msgid "Arguments for ``DRM_IOCTL_PVR_SUBMIT_JOB``"
msgstr ""

#: ../../../gpu/imagination/uapi:143: include/uapi/drm/pvr_drm.h:1287
msgid "``jobs``"
msgstr ""

#: ../../../gpu/imagination/uapi:143: include/uapi/drm/pvr_drm.h:1288
msgid "[IN] Array of jobs to submit."
msgstr ""

#: ../../../gpu/imagination/uapi:143: include/uapi/drm/pvr_drm.h:1281
msgid ""
"If the syscall returns an error it is important to check the value of **jobs."
"count**. This indicates the index into **jobs.array** where the error "
"occurred."
msgstr ""

#: ../../../gpu/imagination/uapi:146: include/uapi/drm/pvr_drm.h:1082
msgid "Indicates if this the first command to be issued for a render."
msgstr ""

#: ../../../gpu/imagination/uapi:146: include/uapi/drm/pvr_drm.h:1086
msgid "Indicates if this the last command to be issued for a render."
msgstr ""

#: ../../../gpu/imagination/uapi:146: include/uapi/drm/pvr_drm.h:1090
#: ../../../gpu/imagination/uapi:152: include/uapi/drm/pvr_drm.h:1168
msgid "Forces to use single core in a multi core device."
msgstr ""

#: ../../../gpu/imagination/uapi:146: include/uapi/drm/pvr_drm.h:1094
msgid "Logical OR of all the geometry cmd flags."
msgstr ""

#: ../../../gpu/imagination/uapi:149: include/uapi/drm/pvr_drm.h:1109
msgid "Use single core in a multi core setup."
msgstr ""

#: ../../../gpu/imagination/uapi:149: include/uapi/drm/pvr_drm.h:1113
msgid "Indicates whether a depth buffer is present."
msgstr ""

#: ../../../gpu/imagination/uapi:149: include/uapi/drm/pvr_drm.h:1117
msgid "Indicates whether a stencil buffer is present."
msgstr ""

#: ../../../gpu/imagination/uapi:149: include/uapi/drm/pvr_drm.h:1121
msgid "Disallow compute overlapped with this render."
msgstr ""

#: ../../../gpu/imagination/uapi:149: include/uapi/drm/pvr_drm.h:1125
msgid "Indicates whether this render produces visibility results."
msgstr ""

#: ../../../gpu/imagination/uapi:149: include/uapi/drm/pvr_drm.h:1129
msgid ""
"Indicates whether partial renders write to a scratch buffer instead of the "
"final surface. It also forces the full screen copy expected to be present on "
"the last render after all partial renders have completed."
msgstr ""

#: ../../../gpu/imagination/uapi:149: include/uapi/drm/pvr_drm.h:1135
msgid "Disable pixel merging for this render."
msgstr ""

#: ../../../gpu/imagination/uapi:149: include/uapi/drm/pvr_drm.h:1139
msgid "Logical OR of all the fragment cmd flags."
msgstr ""

#: ../../../gpu/imagination/uapi:152: include/uapi/drm/pvr_drm.h:1164
msgid "Disallow other jobs overlapped with this compute."
msgstr ""

#: ../../../gpu/imagination/uapi:152: include/uapi/drm/pvr_drm.h:1172
msgid "Logical OR of all the compute cmd flags."
msgstr ""

#: ../../../gpu/imagination/uapi:155: include/uapi/drm/pvr_drm.h:1185
msgid "Forces job to use a single core in a multi core device."
msgstr ""

#: ../../../gpu/imagination/uapi:155: include/uapi/drm/pvr_drm.h:1189
msgid "Logical OR of all the transfer cmd flags."
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1066
msgid "Object describing a sync operation"
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1070
msgid "Handle of sync object."
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1073
msgid "Combination of ``DRM_PVR_SYNC_OP_FLAG_`` flags."
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1075
msgid "``value``"
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1076
msgid "Timeline value for this drm_syncobj. MBZ for a binary syncobj."
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1199
msgid "Arguments for :c:type:`struct drm_pvr_job <drm_pvr_job>`.job_type"
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1205
msgid "``DRM_PVR_JOB_TYPE_GEOMETRY``"
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1206
msgid "Job type is geometry."
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1208
msgid "``DRM_PVR_JOB_TYPE_FRAGMENT``"
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1209
msgid "Job type is fragment."
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1211
msgid "``DRM_PVR_JOB_TYPE_COMPUTE``"
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1212
msgid "Job type is compute."
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1214
msgid "``DRM_PVR_JOB_TYPE_TRANSFER_FRAG``"
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1215
msgid "Job type is a fragment transfer."
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1216
msgid "Reference HWRT data"
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1219
msgid "``set_handle``"
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1220
msgid "HWRT data set handle."
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1222
msgid "``data_index``"
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1223
msgid "Index of the HWRT data inside the data set."
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1227
msgid "Job arguments passed to the ``DRM_IOCTL_PVR_SUBMIT_JOBS`` ioctl"
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1232
msgid "[IN] Type of job being submitted"
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1234
msgid ""
"This must be one of the values defined by :c:type:`enum drm_pvr_job_type "
"<drm_pvr_job_type>`."
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1238
msgid "``context_handle``"
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1239
msgid "[IN] Context handle."
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1241
msgid ""
"When **job_type** is ``DRM_PVR_JOB_TYPE_RENDER``, "
"``DRM_PVR_JOB_TYPE_COMPUTE`` or ``DRM_PVR_JOB_TYPE_TRANSFER_FRAG``, this "
"must be a valid handle returned by ``DRM_IOCTL_PVR_CREATE_CONTEXT``. The "
"type of context must be compatible with the type of job being submitted."
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1246
msgid "When **job_type** is ``DRM_PVR_JOB_TYPE_NULL``, this must be zero."
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1251
msgid "[IN] Flags for command."
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1253
msgid "Those are job-dependent. See all ``DRM_PVR_SUBMIT_JOB_*``."
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1257
msgid "``cmd_stream_len``"
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1258
msgid "[IN] Length of command stream, in bytes."
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1262
msgid "``cmd_stream``"
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1263
msgid "[IN] Pointer to command stream for command."
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1265
msgid "The command stream must be u64-aligned."
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1268
msgid "``sync_ops``"
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1269
msgid "[IN] Fragment sync operations."
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1272
msgid "``hwrt``"
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1273
msgid "[IN] HWRT data used by render jobs (geometry or fragment)."
msgstr ""

#: ../../../gpu/imagination/uapi:158: include/uapi/drm/pvr_drm.h:1275
msgid "Must be zero for non-render jobs."
msgstr ""

#: ../../../gpu/imagination/uapi.rst:165
msgid "Internal notes"
msgstr ""

#: ../../../gpu/imagination/uapi:166:
#: drivers/gpu/drm/imagination/pvr_device.h:675
msgid ""
"To validate the constraints imposed on IOCTL argument structs, a collection "
"of macros and helper functions exist in ``pvr_device.h``."
msgstr ""

#: ../../../gpu/imagination/uapi:166:
#: drivers/gpu/drm/imagination/pvr_device.h:678
msgid ""
"Of the current helpers, it should only be necessary to call "
"PVR_IOCTL_UNION_PADDING_CHECK() directly. This macro should be used once in "
"every code path which extracts a union member from a struct passed from "
"userspace."
msgstr ""

#: ../../../gpu/imagination/uapi:169:
#: drivers/gpu/drm/imagination/pvr_device.h:687
#: drivers/gpu/drm/imagination/pvr_device.h:738
msgid ""
"Validate that the implicit padding between the end of a union member and the "
"end of the union itself is zeroed."
msgstr ""

#: ../../../gpu/imagination/uapi:169:
#: drivers/gpu/drm/imagination/pvr_device.h:693
msgid "``void *instance``"
msgstr ""

#: ../../../gpu/imagination/uapi:169:
#: drivers/gpu/drm/imagination/pvr_device.h:689
msgid "Pointer to the instance of the struct to validate."
msgstr ""

#: ../../../gpu/imagination/uapi:169:
#: drivers/gpu/drm/imagination/pvr_device.h:691
msgid "``size_t union_offset``"
msgstr ""

#: ../../../gpu/imagination/uapi:169:
#: drivers/gpu/drm/imagination/pvr_device.h:690
msgid ""
"Offset into the type of **instance** of the target union. Must be 64-bit "
"aligned."
msgstr ""

#: ../../../gpu/imagination/uapi:169:
#: drivers/gpu/drm/imagination/pvr_device.h:693
msgid "``size_t union_size``"
msgstr ""

#: ../../../gpu/imagination/uapi:169:
#: drivers/gpu/drm/imagination/pvr_device.h:692
msgid ""
"Size of the target union in the type of **instance**. Must be 64-bit aligned."
msgstr ""

#: ../../../gpu/imagination/uapi:169:
#: drivers/gpu/drm/imagination/pvr_device.h:695
msgid "``size_t member_size``"
msgstr ""

#: ../../../gpu/imagination/uapi:169:
#: drivers/gpu/drm/imagination/pvr_device.h:694
msgid ""
"Size of the target member in the target union specified by **union_offset** "
"and **union_size**. It is assumed that the offset of the target member is "
"zero relative to **union_offset**. Must be 64-bit aligned."
msgstr ""

#: ../../../gpu/imagination/uapi:169:
#: drivers/gpu/drm/imagination/pvr_device.h:697
msgid ""
"You probably want to use PVR_IOCTL_UNION_PADDING_CHECK() instead of calling "
"this function directly, since that macro abstracts away much of the setup, "
"and also provides some static validation. See its docs for details."
msgstr ""

#: ../../../gpu/imagination/uapi:169:
#: drivers/gpu/drm/imagination/pvr_device.h:702
msgid ""
"``true`` if every byte between the end of the used member of the union and "
"the end of that union is zeroed, or"
msgstr ""

#: ../../../gpu/imagination/uapi:169:
#: drivers/gpu/drm/imagination/pvr_device.h:704
#: drivers/gpu/drm/imagination/pvr_device.h:752
msgid "``false`` otherwise."
msgstr ""

#: ../../../gpu/imagination/uapi:169:
#: drivers/gpu/drm/imagination/pvr_device.h:724
msgid "``PVR_STATIC_ASSERT_64BIT_ALIGNED (static_expr_)``"
msgstr ""

#: ../../../gpu/imagination/uapi:169:
#: drivers/gpu/drm/imagination/pvr_device.h:722
msgid "Inline assertion for 64-bit alignment."
msgstr ""

#: ../../../gpu/imagination/uapi:169:
#: drivers/gpu/drm/imagination/pvr_device.h:728
msgid "``static_expr_``"
msgstr ""

#: ../../../gpu/imagination/uapi:169:
#: drivers/gpu/drm/imagination/pvr_device.h:723
msgid "Target expression to evaluate."
msgstr ""

#: ../../../gpu/imagination/uapi:169:
#: drivers/gpu/drm/imagination/pvr_device.h:724
msgid ""
"If **static_expr_** does not evaluate to a constant integer which would be a "
"64-bit aligned address (i.e. a multiple of 8), compilation will fail."
msgstr ""

#: ../../../gpu/imagination/uapi:169:
#: drivers/gpu/drm/imagination/pvr_device.h:728
msgid "The value of **static_expr_**."
msgstr ""

#: ../../../gpu/imagination/uapi:169:
#: drivers/gpu/drm/imagination/pvr_device.h:740
msgid "``PVR_IOCTL_UNION_PADDING_CHECK (struct_instance_, union_, member_)``"
msgstr ""

#: ../../../gpu/imagination/uapi:169:
#: drivers/gpu/drm/imagination/pvr_device.h:744
msgid "``struct_instance_``"
msgstr ""

#: ../../../gpu/imagination/uapi:169:
#: drivers/gpu/drm/imagination/pvr_device.h:740
msgid "An expression which evaluates to a pointer to a UAPI data struct."
msgstr ""

#: ../../../gpu/imagination/uapi:169:
#: drivers/gpu/drm/imagination/pvr_device.h:743
msgid "``union_``"
msgstr ""

#: ../../../gpu/imagination/uapi:169:
#: drivers/gpu/drm/imagination/pvr_device.h:742
msgid ""
"The name of the union member of **struct_instance_** to check. If the union "
"member is nested within the type of **struct_instance_**, this may contain "
"the member access operator (\".\")."
msgstr ""

#: ../../../gpu/imagination/uapi:169:
#: drivers/gpu/drm/imagination/pvr_device.h:746
msgid "``member_``"
msgstr ""

#: ../../../gpu/imagination/uapi:169:
#: drivers/gpu/drm/imagination/pvr_device.h:745
msgid "The name of the member of **union_** to assess."
msgstr ""

#: ../../../gpu/imagination/uapi:169:
#: drivers/gpu/drm/imagination/pvr_device.h:746
msgid ""
"This is a wrapper around pvr_ioctl_union_padding_check() which performs "
"alignment checks and simplifies things for the caller."
msgstr ""

#: ../../../gpu/imagination/uapi:169:
#: drivers/gpu/drm/imagination/pvr_device.h:750
msgid ""
"``true`` if every byte in **struct_instance_** between the end of "
"**member_** and the end of **union_** is zeroed, or"
msgstr ""
