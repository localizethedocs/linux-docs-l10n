# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../dev-tools/checkuapi.rst:5
msgid "UAPI Checker"
msgstr ""

#: ../../../dev-tools/checkuapi.rst:7
msgid ""
"The UAPI checker (``scripts/check-uapi.sh``) is a shell script which checks "
"UAPI header files for userspace backwards-compatibility across the git tree."
msgstr ""

#: ../../../dev-tools/checkuapi.rst:12
msgid "Options"
msgstr ""

#: ../../../dev-tools/checkuapi.rst:14
msgid ""
"This section will describe the options with which ``check-uapi.sh`` can be "
"run."
msgstr ""

#: ../../../dev-tools/checkuapi.rst:17
msgid "Usage::"
msgstr ""

#: ../../../dev-tools/checkuapi.rst:21
msgid "Available options::"
msgstr ""

#: ../../../dev-tools/checkuapi.rst:35
msgid "Environmental args::"
msgstr ""

#: ../../../dev-tools/checkuapi.rst:41
msgid "Exit codes::"
msgstr ""

#: ../../../dev-tools/checkuapi.rst:48
msgid "Examples"
msgstr ""

#: ../../../dev-tools/checkuapi.rst:51
msgid "Basic Usage"
msgstr ""

#: ../../../dev-tools/checkuapi.rst:53
msgid ""
"First, let's try making a change to a UAPI header file that obviously won't "
"break userspace::"
msgstr ""

#: ../../../dev-tools/checkuapi.rst:73
msgid "Now, let's use the script to validate::"
msgstr ""

#: ../../../dev-tools/checkuapi.rst:81
msgid "Let's add another change that *might* break userspace::"
msgstr ""

#: ../../../dev-tools/checkuapi.rst:97
msgid "The script will catch this::"
msgstr ""

#: ../../../dev-tools/checkuapi.rst:116
msgid ""
"In this case, the script is reporting the type change because it could break "
"a userspace program that passes in a negative number. Now, let's say you "
"know that no userspace program could possibly be using a negative value in "
"``imm``, so changing to an unsigned type there shouldn't hurt anything. You "
"can pass the ``-i`` flag to the script to ignore changes in which the "
"userspace backwards compatibility is ambiguous::"
msgstr ""

#: ../../../dev-tools/checkuapi.rst:129
msgid "Now, let's make a similar change that *will* break userspace::"
msgstr ""

#: ../../../dev-tools/checkuapi.rst:146
msgid ""
"Since we're re-ordering an existing struct member, there's no ambiguity, and "
"the script will report the breakage even if you pass ``-i``::"
msgstr ""

#: ../../../dev-tools/checkuapi.rst:163
msgid "Let's commit the breaking change, then commit the innocuous change::"
msgstr ""

#: ../../../dev-tools/checkuapi.rst:172
msgid "Now, let's run the script again with no arguments::"
msgstr ""

#: ../../../dev-tools/checkuapi.rst:180
msgid ""
"It doesn't catch any breaking change because, by default, it only compares "
"``HEAD`` to ``HEAD^1``. The breaking change was committed on ``HEAD~2``. If "
"we wanted the search scope to go back further, we'd have to use the ``-p`` "
"option to pass a different past reference. In this case, let's pass ``-p "
"HEAD~2`` to the script so it checks UAPI changes between ``HEAD~2`` and "
"``HEAD``::"
msgstr ""

#: ../../../dev-tools/checkuapi.rst:201
msgid ""
"Alternatively, we could have also run with ``-b HEAD~``. This would set the "
"base reference to ``HEAD~`` so then the script would compare it to "
"``HEAD~^1``."
msgstr ""

#: ../../../dev-tools/checkuapi.rst:205
msgid "Architecture-specific Headers"
msgstr ""

#: ../../../dev-tools/checkuapi.rst:207 ../../../dev-tools/checkuapi.rst:264
#: ../../../dev-tools/checkuapi.rst:310
msgid "Consider this change::"
msgstr ""

#: ../../../dev-tools/checkuapi.rst:222
msgid ""
"This is a change to an arm64-specific UAPI header file. In this example, I'm "
"running the script from an x86 machine with an x86 compiler, so, by default, "
"the script only checks x86-compatible UAPI header files::"
msgstr ""

#: ../../../dev-tools/checkuapi.rst:231
msgid ""
"With an x86 compiler, we can't check header files in ``arch/arm64``, so the "
"script doesn't even try."
msgstr ""

#: ../../../dev-tools/checkuapi.rst:234
msgid ""
"If we want to check the header file, we'll have to use an arm64 compiler and "
"set ``ARCH`` accordingly::"
msgstr ""

#: ../../../dev-tools/checkuapi.rst:256
msgid ""
"We can see with ``ARCH`` and ``CC`` set properly for the file, the ABI "
"change is reported properly. Also notice that the total number of UAPI "
"header files checked by the script changes. This is because the number of "
"headers installed for arm64 platforms is different than x86."
msgstr ""

#: ../../../dev-tools/checkuapi.rst:262
msgid "Cross-Dependency Breakages"
msgstr ""

#: ../../../dev-tools/checkuapi.rst:280
msgid ""
"Here, we're changing a ``typedef`` in ``types.h``. This doesn't break a UAPI "
"in ``types.h``, but other UAPIs in the tree may break due to this change::"
msgstr ""

#: ../../../dev-tools/checkuapi.rst:303
msgid ""
"Note that the script noticed the failing header file did not change, so it "
"assumes one of its includes must have caused the breakage. Indeed, we can "
"see ``linux/types.h`` is used from ``eventpoll.h``."
msgstr ""

#: ../../../dev-tools/checkuapi.rst:308
msgid "UAPI Header Removals"
msgstr ""

#: ../../../dev-tools/checkuapi.rst:327
msgid ""
"This script removes a UAPI header file from the install list. Let's run the "
"script::"
msgstr ""

#: ../../../dev-tools/checkuapi.rst:338
msgid ""
"Removing a UAPI header is considered a breaking change, and the script will "
"flag it as such."
msgstr ""

#: ../../../dev-tools/checkuapi.rst:342
msgid "Checking Historic UAPI Compatibility"
msgstr ""

#: ../../../dev-tools/checkuapi.rst:344
msgid ""
"You can use the ``-b`` and ``-p`` options to examine different chunks of "
"your git tree. For example, to check all changed UAPI header files between "
"tags v6.0 and v6.1, you'd run::"
msgstr ""

#: ../../../dev-tools/checkuapi.rst:356
msgid ""
"Note: Before v5.3, a header file needed by the script is not present, so the "
"script is unable to check changes before then."
msgstr ""

#: ../../../dev-tools/checkuapi.rst:359
msgid ""
"You'll notice that the script detected many UAPI changes that are not "
"backwards compatible. Knowing that kernel UAPIs are supposed to be stable "
"forever, this is an alarming result. This brings us to the next section: "
"caveats."
msgstr ""

#: ../../../dev-tools/checkuapi.rst:365
msgid "Caveats"
msgstr ""

#: ../../../dev-tools/checkuapi.rst:367
msgid ""
"The UAPI checker makes no assumptions about the author's intention, so some "
"types of changes may be flagged even though they intentionally break UAPI."
msgstr ""

#: ../../../dev-tools/checkuapi.rst:371
msgid "Removals For Refactoring or Deprecation"
msgstr ""

#: ../../../dev-tools/checkuapi.rst:373
msgid ""
"Sometimes drivers for very old hardware are removed, such as in this "
"example::"
msgstr ""

#: ../../../dev-tools/checkuapi.rst:383
msgid "The script will always flag removals (even if they're intentional)."
msgstr ""

#: ../../../dev-tools/checkuapi.rst:386
msgid "Struct Expansions"
msgstr ""

#: ../../../dev-tools/checkuapi.rst:388
msgid ""
"Depending on how a structure is handled in kernelspace, a change which "
"expands a struct could be non-breaking."
msgstr ""

#: ../../../dev-tools/checkuapi.rst:391
msgid ""
"If a struct is used as the argument to an ioctl, then the kernel driver must "
"be able to handle ioctl commands of any size. Beyond that, you need to be "
"careful when copying data from the user. Say, for example, that ``struct "
"foo`` is changed like this::"
msgstr ""

#: ../../../dev-tools/checkuapi.rst:402
msgid ""
"By default, the script will flag this kind of change for further review::"
msgstr ""

#: ../../../dev-tools/checkuapi.rst:410
msgid "However, it is possible that this change was made safely."
msgstr ""

#: ../../../dev-tools/checkuapi.rst:412
msgid ""
"If a userspace program was built with version 1, it will think "
"``sizeof(struct foo)`` is 8. That size will be encoded in the ioctl value "
"that gets sent to the kernel. If the kernel is built with version 2, it will "
"think the ``sizeof(struct foo)`` is 16."
msgstr ""

#: ../../../dev-tools/checkuapi.rst:417
msgid ""
"The kernel can use the ``_IOC_SIZE`` macro to get the size encoded in the "
"ioctl code that the user passed in and then use ``copy_struct_from_user()`` "
"to safely copy the value::"
msgstr ""

#: ../../../dev-tools/checkuapi.rst:430
msgid ""
"``copy_struct_from_user`` will zero the struct in the kernel and then copy "
"only the bytes passed in from the user (leaving new members zeroized). If "
"the user passed in a larger struct, the extra members are ignored."
msgstr ""

#: ../../../dev-tools/checkuapi.rst:434
msgid ""
"If you know this situation is accounted for in the kernel code, you can pass "
"``-i`` to the script, and struct expansions like this will be ignored."
msgstr ""

#: ../../../dev-tools/checkuapi.rst:438
msgid "Flex Array Migration"
msgstr ""

#: ../../../dev-tools/checkuapi.rst:440
msgid ""
"While the script handles expansion into an existing flex array, it does "
"still flag initial migration to flex arrays from 1-element fake flex arrays. "
"For example::"
msgstr ""

#: ../../../dev-tools/checkuapi.rst:450
msgid "This change would be flagged by the script::"
msgstr ""

#: ../../../dev-tools/checkuapi.rst:460
msgid ""
"At this time, there's no way to filter these types of changes, so be aware "
"of this possible false positive."
msgstr ""

#: ../../../dev-tools/checkuapi.rst:464
msgid "Summary"
msgstr ""

#: ../../../dev-tools/checkuapi.rst:466
msgid ""
"While many types of false positives are filtered out by the script, it's "
"possible there are some cases where the script flags a change which does not "
"break UAPI. It's also possible a change which *does* break userspace would "
"not be flagged by this script. While the script has been run on much of the "
"kernel history, there could still be corner cases that are not accounted for."
msgstr ""

#: ../../../dev-tools/checkuapi.rst:473
msgid ""
"The intention is for this script to be used as a quick check for maintainers "
"or automated tooling, not as the end-all authority on patch compatibility. "
"It's best to remember: use your best judgment (and ideally a unit test in "
"userspace) to make sure your UAPI changes are backwards-compatible!"
msgstr ""
