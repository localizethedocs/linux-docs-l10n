# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../bpf/map_sk_storage.rst:6
msgid "BPF_MAP_TYPE_SK_STORAGE"
msgstr ""

#: ../../../bpf/map_sk_storage.rst:9
msgid "``BPF_MAP_TYPE_SK_STORAGE`` was introduced in kernel version 5.2"
msgstr ""

#: ../../../bpf/map_sk_storage.rst:11
msgid ""
"``BPF_MAP_TYPE_SK_STORAGE`` is used to provide socket-local storage for BPF "
"programs. A map of type ``BPF_MAP_TYPE_SK_STORAGE`` declares the type of "
"storage to be provided and acts as the handle for accessing the socket-local "
"storage. The values for maps of type ``BPF_MAP_TYPE_SK_STORAGE`` are stored "
"locally with each socket instead of with the map. The kernel is responsible "
"for allocating storage for a socket when requested and for freeing the "
"storage when either the map or the socket is deleted."
msgstr ""

#: ../../../bpf/map_sk_storage.rst:20
msgid "The key type must be ``int`` and ``max_entries`` must be set to ``0``."
msgstr ""

#: ../../../bpf/map_sk_storage.rst:21
msgid ""
"The ``BPF_F_NO_PREALLOC`` flag must be used when creating a map for socket-"
"local storage."
msgstr ""

#: ../../../bpf/map_sk_storage.rst:25
msgid "Usage"
msgstr ""

#: ../../../bpf/map_sk_storage.rst:28 ../../../bpf/map_sk_storage.rst:115
msgid "Kernel BPF"
msgstr ""

#: ../../../bpf/map_sk_storage.rst:31
msgid "bpf_sk_storage_get()"
msgstr ""

#: ../../../bpf/map_sk_storage.rst:37
msgid ""
"Socket-local storage for ``map`` can be retrieved from socket ``sk`` using "
"the ``bpf_sk_storage_get()`` helper. If the "
"``BPF_LOCAL_STORAGE_GET_F_CREATE`` flag is used then "
"``bpf_sk_storage_get()`` will create the storage for ``sk`` if it does not "
"already exist. ``value`` can be used together with "
"``BPF_LOCAL_STORAGE_GET_F_CREATE`` to initialize the storage value, "
"otherwise it will be zero initialized. Returns a pointer to the storage on "
"success, or ``NULL`` in case of failure."
msgstr ""

#: ../../../bpf/map_sk_storage.rst:46
msgid "``sk`` is a kernel ``struct sock`` pointer for LSM or tracing programs."
msgstr ""

#: ../../../bpf/map_sk_storage.rst:47
msgid "``sk`` is a ``struct bpf_sock`` pointer for other program types."
msgstr ""

#: ../../../bpf/map_sk_storage.rst:50
msgid "bpf_sk_storage_delete()"
msgstr ""

#: ../../../bpf/map_sk_storage.rst:56
msgid ""
"Socket-local storage for ``map`` can be deleted from socket ``sk`` using the "
"``bpf_sk_storage_delete()`` helper. Returns ``0`` on success, or negative "
"error in case of failure."
msgstr ""

#: ../../../bpf/map_sk_storage.rst:61
msgid "User space"
msgstr ""

#: ../../../bpf/map_sk_storage.rst:64
msgid "bpf_map_update_elem()"
msgstr ""

#: ../../../bpf/map_sk_storage.rst:70
msgid ""
"Socket-local storage for map ``map_fd`` can be added or updated locally to a "
"socket using the ``bpf_map_update_elem()`` libbpf function. The socket is "
"identified by a `socket` ``fd`` stored in the pointer ``key``. The pointer "
"``value`` has the data to be added or updated to the socket ``fd``. The type "
"and size of ``value`` should be the same as the value type of the map "
"definition."
msgstr ""

#: ../../../bpf/map_sk_storage.rst:77
msgid "The ``flags`` parameter can be used to control the update behaviour:"
msgstr ""

#: ../../../bpf/map_sk_storage.rst:79
msgid ""
"``BPF_ANY`` will create storage for `socket` ``fd`` or update existing "
"storage."
msgstr ""

#: ../../../bpf/map_sk_storage.rst:80
msgid ""
"``BPF_NOEXIST`` will create storage for `socket` ``fd`` only if it did not "
"already exist, otherwise the call will fail with ``-EEXIST``."
msgstr ""

#: ../../../bpf/map_sk_storage.rst:82
msgid ""
"``BPF_EXIST`` will update existing storage for `socket` ``fd`` if it already "
"exists, otherwise the call will fail with ``-ENOENT``."
msgstr ""

#: ../../../bpf/map_sk_storage.rst:85
msgid "Returns ``0`` on success, or negative error in case of failure."
msgstr ""

#: ../../../bpf/map_sk_storage.rst:88
msgid "bpf_map_lookup_elem()"
msgstr ""

#: ../../../bpf/map_sk_storage.rst:94
msgid ""
"Socket-local storage for map ``map_fd`` can be retrieved from a socket using "
"the ``bpf_map_lookup_elem()`` libbpf function. The storage is retrieved from "
"the socket identified by a `socket` ``fd`` stored in the pointer ``key``. "
"Returns ``0`` on success, or negative error in case of failure."
msgstr ""

#: ../../../bpf/map_sk_storage.rst:100
msgid "bpf_map_delete_elem()"
msgstr ""

#: ../../../bpf/map_sk_storage.rst:106
msgid ""
"Socket-local storage for map ``map_fd`` can be deleted from a socket using "
"the ``bpf_map_delete_elem()`` libbpf function. The storage is deleted from "
"the socket identified by a `socket` ``fd`` stored in the pointer ``key``. "
"Returns ``0`` on success, or negative error in case of failure."
msgstr ""

#: ../../../bpf/map_sk_storage.rst:112
msgid "Examples"
msgstr ""

#: ../../../bpf/map_sk_storage.rst:117
msgid ""
"This snippet shows how to declare socket-local storage in a BPF program:"
msgstr ""

#: ../../../bpf/map_sk_storage.rst:128
msgid ""
"This snippet shows how to retrieve socket-local storage in a BPF program:"
msgstr ""

#: ../../../bpf/map_sk_storage.rst:153
msgid ""
"Please see the ``tools/testing/selftests/bpf`` directory for functional "
"examples."
msgstr ""

#: ../../../bpf/map_sk_storage.rst:157
msgid "References"
msgstr ""

#: ../../../bpf/map_sk_storage.rst:159
msgid "https://lwn.net/ml/netdev/20190426171103.61892-1-kafai@fb.com/"
msgstr ""
