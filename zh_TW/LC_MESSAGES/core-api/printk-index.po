# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../core-api/printk-index.rst:5
msgid "Printk Index"
msgstr ""

#: ../../../core-api/printk-index.rst:7
msgid ""
"There are many ways to monitor the state of the system. One important source "
"of information is the system log. It provides a lot of information, "
"including more or less important warnings and error messages."
msgstr ""

#: ../../../core-api/printk-index.rst:11
msgid ""
"There are monitoring tools that filter and take action based on messages "
"logged."
msgstr ""

#: ../../../core-api/printk-index.rst:14
msgid ""
"The kernel messages are evolving together with the code. As a result, "
"particular kernel messages are not KABI and never will be!"
msgstr ""

#: ../../../core-api/printk-index.rst:17
msgid ""
"It is a huge challenge for maintaining the system log monitors. It requires "
"knowing what messages were updated in a particular kernel version and why. "
"Finding these changes in the sources would require non-trivial parsers. Also "
"it would require matching the sources with the binary kernel which is not "
"always trivial. Various changes might be backported. Various kernel versions "
"might be used on different monitored systems."
msgstr ""

#: ../../../core-api/printk-index.rst:24
msgid ""
"This is where the printk index feature might become useful. It provides a "
"dump of printk formats used all over the source code used for the kernel and "
"modules on the running system. It is accessible at runtime via debugfs."
msgstr ""

#: ../../../core-api/printk-index.rst:28
msgid ""
"The printk index helps to find changes in the message formats. Also it helps "
"to track the strings back to the kernel sources and the related commit."
msgstr ""

#: ../../../core-api/printk-index.rst:33
msgid "User Interface"
msgstr ""

#: ../../../core-api/printk-index.rst:35
msgid ""
"The index of printk formats are split in into separate files. The files are "
"named according to the binaries where the printk formats are built-in. There "
"is always \"vmlinux\" and optionally also modules, for example::"
msgstr ""

#: ../../../core-api/printk-index.rst:43
msgid ""
"Note that only loaded modules are shown. Also printk formats from a module "
"might appear in \"vmlinux\" when the module is built-in."
msgstr ""

#: ../../../core-api/printk-index.rst:46
msgid "The content is inspired by the dynamic debug interface and looks like::"
msgstr ""

#: ../../../core-api/printk-index.rst:56
msgid ", where the meaning is:"
msgstr ""

#: ../../../core-api/printk-index.rst:0
msgid "level"
msgstr ""

#: ../../../core-api/printk-index.rst:58
msgid ""
"log level value: 0-7 for particular severity, -1 as default, 'c' as "
"continuous line without an explicit log level"
msgstr ""

#: ../../../core-api/printk-index.rst:0
msgid "flags"
msgstr ""

#: ../../../core-api/printk-index.rst:60
msgid "optional flags: currently only 'c' for KERN_CONT"
msgstr ""

#: ../../../core-api/printk-index.rst:0
msgid "filename\\:line"
msgstr ""

#: ../../../core-api/printk-index.rst:61
msgid ""
"source filename and line number of the related printk() call. Note that "
"there are many wrappers, for example, pr_warn(), pr_warn_once(), dev_warn()."
msgstr ""

#: ../../../core-api/printk-index.rst:0
msgid "function"
msgstr ""

#: ../../../core-api/printk-index.rst:64
msgid "function name where the printk() call is used."
msgstr ""

#: ../../../core-api/printk-index.rst:0
msgid "format"
msgstr ""

#: ../../../core-api/printk-index.rst:65
msgid "format string"
msgstr ""

#: ../../../core-api/printk-index.rst:67
msgid ""
"The extra information makes it a bit harder to find differences between "
"various kernels. Especially the line number might change very often. On the "
"other hand, it helps a lot to confirm that it is the same string or find the "
"commit that is responsible for eventual changes."
msgstr ""

#: ../../../core-api/printk-index.rst:75
msgid "printk() Is Not a Stable KABI"
msgstr ""

#: ../../../core-api/printk-index.rst:77
msgid ""
"Several developers are afraid that exporting all these implementation "
"details into the user space will transform particular printk() calls into "
"KABI."
msgstr ""

#: ../../../core-api/printk-index.rst:81
msgid ""
"But it is exactly the opposite. printk() calls must _not_ be KABI. And the "
"printk index helps user space tools to deal with this."
msgstr ""

#: ../../../core-api/printk-index.rst:86
msgid "Subsystem specific printk wrappers"
msgstr ""

#: ../../../core-api/printk-index.rst:88
msgid ""
"The printk index is generated using extra metadata that are stored in a "
"dedicated .elf section \".printk_index\". It is achieved using macro "
"wrappers doing __printk_index_emit() together with the real printk() call. "
"The same technique is used also for the metadata used by the dynamic debug "
"feature."
msgstr ""

#: ../../../core-api/printk-index.rst:94
msgid ""
"The metadata are stored for a particular message only when it is printed "
"using these special wrappers. It is implemented for the commonly used "
"printk() calls, including, for example, pr_warn(), or pr_once()."
msgstr ""

#: ../../../core-api/printk-index.rst:98
msgid ""
"Additional changes are necessary for various subsystem specific wrappers "
"that call the original printk() via a common helper function. These needs "
"their own wrappers adding __printk_index_emit()."
msgstr ""

#: ../../../core-api/printk-index.rst:102
msgid ""
"Only few subsystem specific wrappers have been updated so far, for example, "
"dev_printk(). As a result, the printk formats from some subsystems can be "
"missing in the printk index."
msgstr ""

#: ../../../core-api/printk-index.rst:108
msgid "Subsystem specific prefix"
msgstr ""

#: ../../../core-api/printk-index.rst:110
msgid ""
"The macro pr_fmt() macro allows to define a prefix that is printed before "
"the string generated by the related printk() calls."
msgstr ""

#: ../../../core-api/printk-index.rst:113
msgid "Subsystem specific wrappers usually add even more complicated prefixes."
msgstr ""

#: ../../../core-api/printk-index.rst:116
msgid ""
"These prefixes can be stored into the printk index metadata by an optional "
"parameter of __printk_index_emit(). The debugfs interface might then show "
"the printk formats including these prefixes. For example, drivers/acpi/osl.c "
"contains::"
msgstr ""

#: ../../../core-api/printk-index.rst:131
msgid "This results in the following printk index entry::"
msgstr ""

#: ../../../core-api/printk-index.rst:135
msgid ""
"It helps matching messages from the real log with printk index. Then the "
"source file name, line number, and function name can be used to match the "
"string with the source code."
msgstr ""
