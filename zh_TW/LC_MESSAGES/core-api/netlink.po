# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../core-api/netlink.rst:7
msgid "Netlink notes for kernel developers"
msgstr ""

#: ../../../core-api/netlink.rst:10
msgid "General guidance"
msgstr ""

#: ../../../core-api/netlink.rst:13
msgid "Attribute enums"
msgstr ""

#: ../../../core-api/netlink.rst:15
msgid ""
"Older families often define \"null\" attributes and commands with value of "
"``0`` and named ``unspec``. This is supported (``type: unused``) but should "
"be avoided in new families. The ``unspec`` enum values are not used in "
"practice, so just set the value of the first attribute to ``1``."
msgstr ""

#: ../../../core-api/netlink.rst:21
msgid "Message enums"
msgstr ""

#: ../../../core-api/netlink.rst:23
msgid ""
"Use the same command IDs for requests and replies. This makes it easier to "
"match them up, and we have plenty of ID space."
msgstr ""

#: ../../../core-api/netlink.rst:26
msgid ""
"Use separate command IDs for notifications. This makes it easier to sort the "
"notifications from replies (and present them to the user application via a "
"different API than replies)."
msgstr ""

#: ../../../core-api/netlink.rst:31
msgid "Answer requests"
msgstr ""

#: ../../../core-api/netlink.rst:33
msgid ""
"Older families do not reply to all of the commands, especially NEW / ADD "
"commands. User only gets information whether the operation succeeded or not "
"via the ACK. Try to find useful data to return. Once the command is added "
"whether it replies with a full message or only an ACK is uAPI and cannot be "
"changed. It's better to err on the side of replying."
msgstr ""

#: ../../../core-api/netlink.rst:39
msgid ""
"Specifically NEW and ADD commands should reply with information identifying "
"the created object such as the allocated object's ID (without having to "
"resort to using ``NLM_F_ECHO``)."
msgstr ""

#: ../../../core-api/netlink.rst:44
msgid "NLM_F_ECHO"
msgstr ""

#: ../../../core-api/netlink.rst:46
msgid ""
"Make sure to pass the request info to genl_notify() to allow ``NLM_F_ECHO`` "
"to take effect.  This is useful for programs that need precise feedback from "
"the kernel (for example for logging purposes)."
msgstr ""

#: ../../../core-api/netlink.rst:51
msgid "Support dump consistency"
msgstr ""

#: ../../../core-api/netlink.rst:53
msgid ""
"If iterating over objects during dump may skip over objects or repeat them - "
"make sure to report dump inconsistency with ``NLM_F_DUMP_INTR``. This is "
"usually implemented by maintaining a generation id for the structure and "
"recording it in the ``seq`` member of struct netlink_callback."
msgstr ""

#: ../../../core-api/netlink.rst:59
msgid "Netlink specification"
msgstr ""

#: ../../../core-api/netlink.rst:61
msgid ""
"Documentation of the Netlink specification parts which are only relevant to "
"the kernel space."
msgstr ""

#: ../../../core-api/netlink.rst:65
msgid "Globals"
msgstr ""

#: ../../../core-api/netlink.rst:68
msgid "kernel-policy"
msgstr ""

#: ../../../core-api/netlink.rst:70
msgid ""
"Defines whether the kernel validation policy is ``global`` i.e. the same for "
"all operations of the family, defined for each operation individually - "
"``per-op``, or separately for each operation and operation type (do vs dump) "
"- ``split``. New families should use ``per-op`` (default) to be able to "
"narrow down the attributes accepted by a specific command."
msgstr ""

#: ../../../core-api/netlink.rst:77
msgid "checks"
msgstr ""

#: ../../../core-api/netlink.rst:79
msgid "Documentation for the ``checks`` sub-sections of attribute specs."
msgstr ""

#: ../../../core-api/netlink.rst:82
msgid "unterminated-ok"
msgstr ""

#: ../../../core-api/netlink.rst:84
msgid ""
"Accept strings without the null-termination (for legacy families only). "
"Switches from the ``NLA_NUL_STRING`` to ``NLA_STRING`` policy type."
msgstr ""

#: ../../../core-api/netlink.rst:88
msgid "max-len"
msgstr ""

#: ../../../core-api/netlink.rst:90
msgid ""
"Defines max length for a binary or string attribute (corresponding to the "
"``len`` member of struct nla_policy). For string attributes terminating null "
"character is not counted towards ``max-len``."
msgstr ""

#: ../../../core-api/netlink.rst:94
msgid ""
"The field may either be a literal integer value or a name of a defined "
"constant. String types may reduce the constant by one (i.e. specify ``max-"
"len: CONST - 1``) to reserve space for the terminating character so "
"implementations should recognize such pattern."
msgstr ""

#: ../../../core-api/netlink.rst:100
msgid "min-len"
msgstr ""

#: ../../../core-api/netlink.rst:102
msgid "Similar to ``max-len`` but defines minimum length."
msgstr ""
