# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../core-api/min_heap.rst:5
msgid "Min Heap API"
msgstr ""

#: ../../../core-api/min_heap.rst:0
msgid "Author"
msgstr ""

#: ../../../core-api/min_heap.rst:7
msgid "Kuan-Wei Chiu <visitorckw@gmail.com>"
msgstr ""

#: ../../../core-api/min_heap.rst:10
msgid "Introduction"
msgstr ""

#: ../../../core-api/min_heap.rst:12
msgid ""
"The Min Heap API provides a set of functions and macros for managing min-"
"heaps in the Linux kernel. A min-heap is a binary tree structure where the "
"value of each node is less than or equal to the values of its children, "
"ensuring that the smallest element is always at the root."
msgstr ""

#: ../../../core-api/min_heap.rst:17
msgid ""
"This document provides a guide to the Min Heap API, detailing how to define "
"and use min-heaps. Users should not directly call functions with "
"**__min_heap_*()** prefixes, but should instead use the provided macro "
"wrappers."
msgstr ""

#: ../../../core-api/min_heap.rst:21
msgid ""
"In addition to the standard version of the functions, the API also includes "
"a set of inline versions for performance-critical scenarios. These inline "
"functions have the same names as their non-inline counterparts but include "
"an **_inline** suffix. For example, **__min_heap_init_inline** and its "
"corresponding macro wrapper **min_heap_init_inline**. The inline versions "
"allow custom comparison and swap functions to be called directly, rather "
"than through indirect function calls. This can significantly reduce "
"overhead, especially when CONFIG_MITIGATION_RETPOLINE is enabled, as "
"indirect function calls become more expensive. As with the non-inline "
"versions, it is important to use the macro wrappers for inline functions "
"instead of directly calling the functions themselves."
msgstr ""

#: ../../../core-api/min_heap.rst:34
msgid "Data Structures"
msgstr ""

#: ../../../core-api/min_heap.rst:37
msgid "Min-Heap Definition"
msgstr ""

#: ../../../core-api/min_heap.rst:39
msgid ""
"The core data structure for representing a min-heap is defined using the "
"**MIN_HEAP_PREALLOCATED** and **DEFINE_MIN_HEAP** macros. These macros allow "
"you to define a min-heap with a preallocated buffer or dynamically allocated "
"memory."
msgstr ""

#: ../../../core-api/min_heap.rst:44
msgid "Example:"
msgstr ""

#: ../../../core-api/min_heap.rst:58
msgid ""
"A typical heap structure will include a counter for the number of elements "
"(`nr`), the maximum capacity of the heap (`size`), and a pointer to an array "
"of elements (`data`). Optionally, you can specify a static array for "
"preallocated heap storage using **MIN_HEAP_PREALLOCATED**."
msgstr ""

#: ../../../core-api/min_heap.rst:64
msgid "Min Heap Callbacks"
msgstr ""

#: ../../../core-api/min_heap.rst:66
msgid ""
"The **struct min_heap_callbacks** provides customization options for "
"ordering elements in the heap and swapping them. It contains two function "
"pointers:"
msgstr ""

#: ../../../core-api/min_heap.rst:76
msgid ""
"**less** is the comparison function used to establish the order of elements."
msgstr ""

#: ../../../core-api/min_heap.rst:77
msgid ""
"**swp** is a function for swapping elements in the heap. If swp is set to "
"NULL, the default swap function will be used, which swaps the elements based "
"on their size"
msgstr ""

#: ../../../core-api/min_heap.rst:81
msgid "Macro Wrappers"
msgstr ""

#: ../../../core-api/min_heap.rst:83
msgid ""
"The following macro wrappers are provided for interacting with the heap in a "
"user-friendly manner. Each macro corresponds to a function that operates on "
"the heap, and they abstract away direct calls to internal functions."
msgstr ""

#: ../../../core-api/min_heap.rst:87
msgid "Each macro accepts various parameters that are detailed below."
msgstr ""

#: ../../../core-api/min_heap.rst:90
msgid "Heap Initialization"
msgstr ""

#: ../../../core-api/min_heap.rst:96
msgid "**heap**: A pointer to the min-heap structure to be initialized."
msgstr ""

#: ../../../core-api/min_heap.rst:97
msgid ""
"**data**: A pointer to the buffer where the heap elements will be stored. If "
"`NULL`, the preallocated buffer within the heap structure will be used."
msgstr ""

#: ../../../core-api/min_heap.rst:99
msgid "**size**: The maximum number of elements the heap can hold."
msgstr ""

#: ../../../core-api/min_heap.rst:101
msgid ""
"This macro initializes the heap, setting its initial state. If `data` is "
"`NULL`, the preallocated memory inside the heap structure will be used for "
"storage. Otherwise, the user-provided buffer is used. The operation is "
"**O(1)**."
msgstr ""

#: ../../../core-api/min_heap.rst:105
msgid "**Inline Version:** min_heap_init_inline(heap, data, size)"
msgstr ""

#: ../../../core-api/min_heap.rst:108
msgid "Accessing the Top Element"
msgstr ""

#: ../../../core-api/min_heap.rst:114
msgid ""
"**heap**: A pointer to the min-heap from which to retrieve the smallest "
"element."
msgstr ""

#: ../../../core-api/min_heap.rst:117
msgid ""
"This macro returns a pointer to the smallest element (the root) of the heap, "
"or `NULL` if the heap is empty. The operation is **O(1)**."
msgstr ""

#: ../../../core-api/min_heap.rst:120
msgid "**Inline Version:** min_heap_peek_inline(heap)"
msgstr ""

#: ../../../core-api/min_heap.rst:123
msgid "Heap Insertion"
msgstr ""

#: ../../../core-api/min_heap.rst:129
msgid ""
"**heap**: A pointer to the min-heap into which the element should be "
"inserted."
msgstr ""

#: ../../../core-api/min_heap.rst:130
msgid "**element**: A pointer to the element to be inserted into the heap."
msgstr ""

#: ../../../core-api/min_heap.rst:131 ../../../core-api/min_heap.rst:148
#: ../../../core-api/min_heap.rst:169 ../../../core-api/min_heap.rst:185
#: ../../../core-api/min_heap.rst:199 ../../../core-api/min_heap.rst:218
msgid ""
"**callbacks**: A pointer to a `struct min_heap_callbacks` providing the "
"`less` and `swp` functions."
msgstr ""

#: ../../../core-api/min_heap.rst:133 ../../../core-api/min_heap.rst:150
#: ../../../core-api/min_heap.rst:171 ../../../core-api/min_heap.rst:187
#: ../../../core-api/min_heap.rst:201 ../../../core-api/min_heap.rst:220
msgid "**args**: Optional arguments passed to the `less` and `swp` functions."
msgstr ""

#: ../../../core-api/min_heap.rst:135
msgid ""
"This macro inserts an element into the heap. It returns `true` if the "
"insertion was successful and `false` if the heap is full. The operation is "
"**O(log n)**."
msgstr ""

#: ../../../core-api/min_heap.rst:138
msgid ""
"**Inline Version:** min_heap_push_inline(heap, element, callbacks, args)"
msgstr ""

#: ../../../core-api/min_heap.rst:141
msgid "Heap Removal"
msgstr ""

#: ../../../core-api/min_heap.rst:147
msgid ""
"**heap**: A pointer to the min-heap from which to remove the smallest "
"element."
msgstr ""

#: ../../../core-api/min_heap.rst:152
msgid ""
"This macro removes the smallest element (the root) from the heap. It returns "
"`true` if the element was successfully removed, or `false` if the heap is "
"empty. The operation is **O(log n)**."
msgstr ""

#: ../../../core-api/min_heap.rst:156
msgid "**Inline Version:** min_heap_pop_inline(heap, callbacks, args)"
msgstr ""

#: ../../../core-api/min_heap.rst:159
msgid "Heap Maintenance"
msgstr ""

#: ../../../core-api/min_heap.rst:161
msgid "You can use the following macros to maintain the heap's structure:"
msgstr ""

#: ../../../core-api/min_heap.rst:167 ../../../core-api/min_heap.rst:183
#: ../../../core-api/min_heap.rst:198 ../../../core-api/min_heap.rst:216
msgid "**heap**: A pointer to the min-heap."
msgstr ""

#: ../../../core-api/min_heap.rst:168
msgid "**pos**: The index from which to start sifting down."
msgstr ""

#: ../../../core-api/min_heap.rst:173
msgid ""
"This macro restores the heap property by moving the element at the specified "
"index (`pos`) down the heap until it is in the correct position. The "
"operation is **O(log n)**."
msgstr ""

#: ../../../core-api/min_heap.rst:177
msgid ""
"**Inline Version:** min_heap_sift_down_inline(heap, pos, callbacks, args)"
msgstr ""

#: ../../../core-api/min_heap.rst:184
msgid "**idx**: The index of the element to sift up."
msgstr ""

#: ../../../core-api/min_heap.rst:189
msgid ""
"This macro restores the heap property by moving the element at the specified "
"index (`idx`) up the heap. The operation is **O(log n)**."
msgstr ""

#: ../../../core-api/min_heap.rst:192
msgid "**Inline Version:** min_heap_sift_up_inline(heap, idx, callbacks, args)"
msgstr ""

#: ../../../core-api/min_heap.rst:203
msgid ""
"This macro ensures that the entire heap satisfies the heap property. It is "
"called when the heap is built from scratch or after many modifications. The "
"operation is **O(n)**."
msgstr ""

#: ../../../core-api/min_heap.rst:207
msgid "**Inline Version:** min_heapify_all_inline(heap, callbacks, args)"
msgstr ""

#: ../../../core-api/min_heap.rst:210
msgid "Removing Specific Elements"
msgstr ""

#: ../../../core-api/min_heap.rst:217
msgid "**idx**: The index of the element to delete."
msgstr ""

#: ../../../core-api/min_heap.rst:222
msgid ""
"This macro removes an element at the specified index (`idx`) from the heap "
"and restores the heap property. The operation is **O(log n)**."
msgstr ""

#: ../../../core-api/min_heap.rst:225
msgid "**Inline Version:** min_heap_del_inline(heap, idx, callbacks, args)"
msgstr ""

#: ../../../core-api/min_heap.rst:228
msgid "Other Utilities"
msgstr ""

#: ../../../core-api/min_heap.rst:230
msgid ""
"**min_heap_full(heap)**: Checks whether the heap is full. Complexity: "
"**O(1)**."
msgstr ""

#: ../../../core-api/min_heap.rst:237 ../../../core-api/min_heap.rst:250
msgid "`heap`: A pointer to the min-heap to check."
msgstr ""

#: ../../../core-api/min_heap.rst:239
msgid "This macro returns `true` if the heap is full, otherwise `false`."
msgstr ""

#: ../../../core-api/min_heap.rst:241
msgid "**Inline Version:** min_heap_full_inline(heap)"
msgstr ""

#: ../../../core-api/min_heap.rst:243
msgid ""
"**min_heap_empty(heap)**: Checks whether the heap is empty. Complexity: "
"**O(1)**."
msgstr ""

#: ../../../core-api/min_heap.rst:252
msgid "This macro returns `true` if the heap is empty, otherwise `false`."
msgstr ""

#: ../../../core-api/min_heap.rst:254
msgid "**Inline Version:** min_heap_empty_inline(heap)"
msgstr ""

#: ../../../core-api/min_heap.rst:257
msgid "Example Usage"
msgstr ""

#: ../../../core-api/min_heap.rst:259
msgid ""
"An example usage of the min-heap API would involve defining a heap "
"structure, initializing it, and inserting and removing elements as needed."
msgstr ""
