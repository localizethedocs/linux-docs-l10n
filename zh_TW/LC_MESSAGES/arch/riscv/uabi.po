# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../arch/riscv/uabi.rst:4
msgid "RISC-V Linux User ABI"
msgstr ""

#: ../../../arch/riscv/uabi.rst:7
msgid "ISA string ordering in /proc/cpuinfo"
msgstr ""

#: ../../../arch/riscv/uabi.rst:9
msgid ""
"The canonical order of ISA extension names in the ISA string is defined in "
"chapter 27 of the unprivileged specification. The specification uses vague "
"wording, such as should, when it comes to ordering, so for our purposes the "
"following rules apply:"
msgstr ""

#: ../../../arch/riscv/uabi.rst:14
msgid ""
"Single-letter extensions come first, in canonical order. The canonical order "
"is \"IMAFDQLCBKJTPVH\"."
msgstr ""

#: ../../../arch/riscv/uabi.rst:17
msgid ""
"All multi-letter extensions will be separated from other extensions by an "
"underscore."
msgstr ""

#: ../../../arch/riscv/uabi.rst:20
msgid ""
"Additional standard extensions (starting with 'Z') will be sorted after "
"single-letter extensions and before any higher-privileged extensions."
msgstr ""

#: ../../../arch/riscv/uabi.rst:23
msgid ""
"For additional standard extensions, the first letter following the 'Z' "
"conventionally indicates the most closely related alphabetical extension "
"category. If multiple 'Z' extensions are named, they will be ordered first "
"by category, in canonical order, as listed above, then alphabetically within "
"a category."
msgstr ""

#: ../../../arch/riscv/uabi.rst:29
msgid ""
"Standard supervisor-level extensions (starting with 'S') will be listed "
"after standard unprivileged extensions.  If multiple supervisor-level "
"extensions are listed, they will be ordered alphabetically."
msgstr ""

#: ../../../arch/riscv/uabi.rst:33
msgid ""
"Standard machine-level extensions (starting with 'Zxm') will be listed after "
"any lower-privileged, standard extensions. If multiple machine-level "
"extensions are listed, they will be ordered alphabetically."
msgstr ""

#: ../../../arch/riscv/uabi.rst:37
msgid ""
"Non-standard extensions (starting with 'X') will be listed after all "
"standard extensions. If multiple non-standard extensions are listed, they "
"will be ordered alphabetically."
msgstr ""

#: ../../../arch/riscv/uabi.rst:41
msgid "An example string following the order is::"
msgstr ""

#: ../../../arch/riscv/uabi.rst:46
msgid "\"isa\" and \"hart isa\" lines in /proc/cpuinfo"
msgstr ""

#: ../../../arch/riscv/uabi.rst:48
msgid ""
"The \"isa\" line in /proc/cpuinfo describes the lowest common denominator of "
"RISC-V ISA extensions recognized by the kernel and implemented on all harts. "
"The \"hart isa\" line, in contrast, describes the set of extensions "
"recognized by the kernel on the particular hart being described, even if "
"those extensions may not be present on all harts in the system."
msgstr ""

#: ../../../arch/riscv/uabi.rst:54
msgid ""
"In both lines, the presence of an extension guarantees only that the "
"hardware has the described capability. Additional kernel support or policy "
"changes may be required before an extension's capability is fully usable by "
"userspace programs. Similarly, for S-mode extensions, presence in one of "
"these lines does not guarantee that the kernel is taking advantage of the "
"extension, or that the feature will be visible in guest VMs managed by this "
"kernel."
msgstr ""

#: ../../../arch/riscv/uabi.rst:61
msgid ""
"Inversely, the absence of an extension in these lines does not necessarily "
"mean the hardware does not support that feature. The running kernel may not "
"recognize the extension, or may have deliberately removed it from the "
"listing."
msgstr ""

#: ../../../arch/riscv/uabi.rst:66
msgid "Misaligned accesses"
msgstr ""

#: ../../../arch/riscv/uabi.rst:68
msgid ""
"Misaligned scalar accesses are supported in userspace, but they may perform "
"poorly.  Misaligned vector accesses are only supported if the Zicclsm "
"extension is supported."
msgstr ""

#: ../../../arch/riscv/uabi.rst:73
msgid "Pointer masking"
msgstr ""

#: ../../../arch/riscv/uabi.rst:75
msgid ""
"Support for pointer masking in userspace (the Supm extension) is provided "
"via the ``PR_SET_TAGGED_ADDR_CTRL`` and ``PR_GET_TAGGED_ADDR_CTRL`` "
"``prctl()`` operations. Pointer masking is disabled by default. To enable "
"it, userspace must call ``PR_SET_TAGGED_ADDR_CTRL`` with the ``PR_PMLEN`` "
"field set to the number of mask/tag bits needed by the application. "
"``PR_PMLEN`` is interpreted as a lower bound; if the kernel is unable to "
"satisfy the request, the ``PR_SET_TAGGED_ADDR_CTRL`` operation will fail. "
"The actual number of tag bits is returned in ``PR_PMLEN`` by the "
"``PR_GET_TAGGED_ADDR_CTRL`` operation."
msgstr ""

#: ../../../arch/riscv/uabi.rst:84
msgid ""
"Additionally, when pointer masking is enabled (``PR_PMLEN`` is greater than "
"0), a tagged address ABI is supported, with the same interface and behavior "
"as documented for AArch64 (Documentation/arch/arm64/tagged-address-abi.rst)."
msgstr ""
