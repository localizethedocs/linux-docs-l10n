# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../arch/riscv/boot.rst:5
msgid "RISC-V Kernel Boot Requirements and Constraints"
msgstr ""

#: ../../../arch/riscv/boot.rst:0
msgid "Author"
msgstr ""

#: ../../../arch/riscv/boot.rst:7
msgid "Alexandre Ghiti <alexghiti@rivosinc.com>"
msgstr ""

#: ../../../arch/riscv/boot.rst:0
msgid "Date"
msgstr ""

#: ../../../arch/riscv/boot.rst:8
msgid "23 May 2023"
msgstr ""

#: ../../../arch/riscv/boot.rst:10
msgid ""
"This document describes what the RISC-V kernel expects from bootloaders and "
"firmware, and also the constraints that any developer must have in mind when "
"touching the early boot process. For the purposes of this document, the "
"``early boot process`` refers to any code that runs before the final virtual "
"mapping is set up."
msgstr ""

#: ../../../arch/riscv/boot.rst:17
msgid "Pre-kernel Requirements and Constraints"
msgstr ""

#: ../../../arch/riscv/boot.rst:19
msgid ""
"The RISC-V kernel expects the following of bootloaders and platform firmware:"
msgstr ""

#: ../../../arch/riscv/boot.rst:22
msgid "Register state"
msgstr ""

#: ../../../arch/riscv/boot.rst:24 ../../../arch/riscv/boot.rst:32
msgid "The RISC-V kernel expects:"
msgstr ""

#: ../../../arch/riscv/boot.rst:26
msgid "``$a0`` to contain the hartid of the current core."
msgstr ""

#: ../../../arch/riscv/boot.rst:27
msgid "``$a1`` to contain the address of the devicetree in memory."
msgstr ""

#: ../../../arch/riscv/boot.rst:30
msgid "CSR state"
msgstr ""

#: ../../../arch/riscv/boot.rst:34
msgid "``$satp = 0``: the MMU, if present, must be disabled."
msgstr ""

#: ../../../arch/riscv/boot.rst:37
msgid "Reserved memory for resident firmware"
msgstr ""

#: ../../../arch/riscv/boot.rst:39
msgid ""
"The RISC-V kernel must not map any resident memory, or memory protected with "
"PMPs, in the direct mapping, so the firmware must correctly mark those "
"regions as per the devicetreeÂ specification and/or the UEFI specification."
msgstr ""

#: ../../../arch/riscv/boot.rst:44
msgid "Kernel location"
msgstr ""

#: ../../../arch/riscv/boot.rst:46
msgid ""
"The RISC-V kernel expects to be placed at a PMD boundary (2MB aligned for "
"rv64 and 4MB aligned for rv32). Note that the EFI stub will physically "
"relocate the kernel if that's not the case."
msgstr ""

#: ../../../arch/riscv/boot.rst:51
msgid "Hardware description"
msgstr ""

#: ../../../arch/riscv/boot.rst:53
msgid ""
"The firmware can pass either a devicetree or ACPI tables to the RISC-V "
"kernel."
msgstr ""

#: ../../../arch/riscv/boot.rst:55
msgid ""
"The devicetree is either passed directly to the kernel from the previous "
"stage using the ``$a1`` register, or when booting with UEFI, it can be "
"passed using the EFI configuration table."
msgstr ""

#: ../../../arch/riscv/boot.rst:59
msgid ""
"The ACPI tables are passed to the kernel using the EFI configuration table. "
"In this case, a tiny devicetree is still created by the EFI stub. Please "
"refer to \"EFI stub and devicetree\" section below for details about this "
"devicetree."
msgstr ""

#: ../../../arch/riscv/boot.rst:64
msgid "Kernel entry"
msgstr ""

#: ../../../arch/riscv/boot.rst:66
msgid "On SMP systems, there are 2 methods to enter the kernel:"
msgstr ""

#: ../../../arch/riscv/boot.rst:68
msgid ""
"``RISCV_BOOT_SPINWAIT``: the firmware releases all harts in the kernel, one "
"hart wins a lottery and executes the early boot code while the other harts "
"are parked waiting for the initialization to finish. This method is mostly "
"used to support older firmwares without SBI HSM extension and M-mode RISC-V "
"kernel."
msgstr ""

#: ../../../arch/riscv/boot.rst:72
msgid ""
"``Ordered booting``: the firmware releases only one hart that will execute "
"the initialization phase and then will start all other harts using the SBI "
"HSM extension. The ordered booting method is the preferred booting method "
"for booting the RISC-V kernel because it can support CPU hotplug and kexec."
msgstr ""

#: ../../../arch/riscv/boot.rst:78
msgid "UEFI"
msgstr ""

#: ../../../arch/riscv/boot.rst:81
msgid "UEFI memory map"
msgstr ""

#: ../../../arch/riscv/boot.rst:83
msgid ""
"When booting with UEFI, the RISC-V kernel will use only the EFI memory map "
"to populate the system memory."
msgstr ""

#: ../../../arch/riscv/boot.rst:86
msgid ""
"The UEFI firmware must parse the subnodes of the ``/reserved-memory`` "
"devicetree node and abide by the devicetree specification to convert the "
"attributes of those subnodes (``no-map`` and ``reusable``) into their "
"correct EFI equivalent (refer to section \"3.5.4 /reserved-memory and UEFI\" "
"of the devicetree specification v0.4-rc1)."
msgstr ""

#: ../../../arch/riscv/boot.rst:93
msgid "RISCV_EFI_BOOT_PROTOCOL"
msgstr ""

#: ../../../arch/riscv/boot.rst:95
msgid ""
"When booting with UEFI, the EFI stub requires the boot hartid in order to "
"pass it to the RISC-V kernel in ``$a1``. The EFI stub retrieves the boot "
"hartid using one of the following methods:"
msgstr ""

#: ../../../arch/riscv/boot.rst:99
msgid "``RISCV_EFI_BOOT_PROTOCOL`` (**preferred**)."
msgstr ""

#: ../../../arch/riscv/boot.rst:100
msgid "``boot-hartid`` devicetree subnode (**deprecated**)."
msgstr ""

#: ../../../arch/riscv/boot.rst:102
msgid ""
"Any new firmware must implement ``RISCV_EFI_BOOT_PROTOCOL`` as the "
"devicetree based approach is deprecated now."
msgstr ""

#: ../../../arch/riscv/boot.rst:106
msgid "Early Boot Requirements and Constraints"
msgstr ""

#: ../../../arch/riscv/boot.rst:108
msgid ""
"The RISC-V kernel's early boot process operates under the following "
"constraints:"
msgstr ""

#: ../../../arch/riscv/boot.rst:111
msgid "EFI stub and devicetree"
msgstr ""

#: ../../../arch/riscv/boot.rst:113
msgid ""
"When booting with UEFI, the devicetree is supplemented (or created) by the "
"EFI stub with the same parameters as arm64 which are described at the "
"paragraph \"UEFI kernel support on ARM\" in Documentation/arch/arm/uefi.rst."
msgstr ""

#: ../../../arch/riscv/boot.rst:118
msgid "Virtual mapping installation"
msgstr ""

#: ../../../arch/riscv/boot.rst:120
msgid ""
"The installation of the virtual mapping is done in 2 steps in the RISC-V "
"kernel:"
msgstr ""

#: ../../../arch/riscv/boot.rst:122
msgid ""
"``setup_vm()`` installs a temporary kernel mapping in ``early_pg_dir`` which "
"allows discovery of the system memory. Only the kernel text/data are mapped "
"at this point. When establishing this mapping, no allocation can be done "
"(since the system memory is not known yet), so ``early_pg_dir`` page table "
"is statically allocated (using only one table for each level)."
msgstr ""

#: ../../../arch/riscv/boot.rst:128
msgid ""
"``setup_vm_final()`` creates the final kernel mapping in ``swapper_pg_dir`` "
"and takes advantage of the discovered system memory to create the linear "
"mapping. When establishing this mapping, the kernel can allocate memory but "
"cannot access it directly (since the direct mapping is not present yet), so "
"it uses temporary mappings in the fixmap region to be able to access the "
"newly allocated page table levels."
msgstr ""

#: ../../../arch/riscv/boot.rst:135
msgid ""
"For ``virt_to_phys()`` and ``phys_to_virt()`` to be able to correctly "
"convert direct mapping addresses to physical addresses, they need to know "
"the start of the DRAM. This happens after step 1, right before step 2 "
"installs the direct mapping (see ``setup_bootmem()`` function in arch/riscv/"
"mm/init.c). Any usage of those macros before the final virtual mapping is "
"installed must be carefully examined."
msgstr ""

#: ../../../arch/riscv/boot.rst:143
msgid "Devicetree mapping via fixmap"
msgstr ""

#: ../../../arch/riscv/boot.rst:145
msgid ""
"As the ``reserved_mem`` array is initialized with virtual addresses "
"established by ``setup_vm()``, and used with the mapping established by "
"``setup_vm_final()``, the RISC-V kernel uses the fixmap region to map the "
"devicetree. This ensures that the devicetree remains accessible by both "
"virtual mappings."
msgstr ""

#: ../../../arch/riscv/boot.rst:152
msgid "Pre-MMU execution"
msgstr ""

#: ../../../arch/riscv/boot.rst:154
msgid ""
"A few pieces of code need to run before even the first virtual mapping is "
"established. These are the installation of the first virtual mapping itself, "
"patching of early alternatives and the early parsing of the kernel command "
"line. That code must be very carefully compiled as:"
msgstr ""

#: ../../../arch/riscv/boot.rst:159
msgid ""
"``-fno-pie``: This is needed for relocatable kernels which use ``-fPIE``, "
"since otherwise, any access to a global symbol would go through the GOT "
"which is only relocated virtually."
msgstr ""

#: ../../../arch/riscv/boot.rst:162
msgid ""
"``-mcmodel=medany``: Any access to a global symbol must be PC-relative to "
"avoid any relocations to happen before the MMU is setup."
msgstr ""

#: ../../../arch/riscv/boot.rst:164
msgid ""
"*all* instrumentation must also be disabled (that includes KASAN, ftrace and "
"others)."
msgstr ""

#: ../../../arch/riscv/boot.rst:167
msgid ""
"As using a symbol from a different compilation unit requires this unit to be "
"compiled with those flags, we advise, as much as possible, not to use "
"external symbols."
msgstr ""
