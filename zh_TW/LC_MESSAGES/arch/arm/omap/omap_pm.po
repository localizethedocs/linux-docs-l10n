# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../arch/arm/omap/omap_pm.rst:3
msgid "The OMAP PM interface"
msgstr ""

#: ../../../arch/arm/omap/omap_pm.rst:5
msgid ""
"This document describes the temporary OMAP PM interface.  Driver authors use "
"these functions to communicate minimum latency or throughput constraints to "
"the kernel power management code. Over time, the intention is to merge "
"features from the OMAP PM interface into the Linux PM QoS code."
msgstr ""

#: ../../../arch/arm/omap/omap_pm.rst:11
msgid "Drivers need to express PM parameters which:"
msgstr ""

#: ../../../arch/arm/omap/omap_pm.rst:13
msgid "support the range of power management parameters present in the TI SRF;"
msgstr ""

#: ../../../arch/arm/omap/omap_pm.rst:15
msgid ""
"separate the drivers from the underlying PM parameter implementation, "
"whether it is the TI SRF or Linux PM QoS or Linux latency framework or "
"something else;"
msgstr ""

#: ../../../arch/arm/omap/omap_pm.rst:19
msgid ""
"specify PM parameters in terms of fundamental units, such as latency and "
"throughput, rather than units which are specific to OMAP or to particular "
"OMAP variants;"
msgstr ""

#: ../../../arch/arm/omap/omap_pm.rst:23
msgid ""
"allow drivers which are shared with other architectures (e.g., DaVinci) to "
"add these constraints in a way which won't affect non-OMAP systems,"
msgstr ""

#: ../../../arch/arm/omap/omap_pm.rst:27
msgid ""
"can be implemented immediately with minimal disruption of other "
"architectures."
msgstr ""

#: ../../../arch/arm/omap/omap_pm.rst:31
msgid ""
"This document proposes the OMAP PM interface, including the following five "
"power management functions for driver code:"
msgstr ""

#: ../../../arch/arm/omap/omap_pm.rst:34
msgid "Set the maximum MPU wakeup latency::"
msgstr ""

#: ../../../arch/arm/omap/omap_pm.rst:38
msgid "Set the maximum device wakeup latency::"
msgstr ""

#: ../../../arch/arm/omap/omap_pm.rst:42
msgid "Set the maximum system DMA transfer start latency (CORE pwrdm)::"
msgstr ""

#: ../../../arch/arm/omap/omap_pm.rst:46
msgid "Set the minimum bus throughput needed by a device::"
msgstr ""

#: ../../../arch/arm/omap/omap_pm.rst:50
msgid "Return the number of times the device has lost context::"
msgstr ""

#: ../../../arch/arm/omap/omap_pm.rst:55
msgid ""
"Further documentation for all OMAP PM interface functions can be found in "
"arch/arm/plat-omap/include/mach/omap-pm.h."
msgstr ""

#: ../../../arch/arm/omap/omap_pm.rst:60
msgid "The OMAP PM layer is intended to be temporary"
msgstr ""

#: ../../../arch/arm/omap/omap_pm.rst:62
msgid ""
"The intention is that eventually the Linux PM QoS layer should support the "
"range of power management features present in OMAP3.  As this happens, "
"existing drivers using the OMAP PM interface can be modified to use the "
"Linux PM QoS code; and the OMAP PM interface can disappear."
msgstr ""

#: ../../../arch/arm/omap/omap_pm.rst:69
msgid "Driver usage of the OMAP PM functions"
msgstr ""

#: ../../../arch/arm/omap/omap_pm.rst:71
msgid ""
"As the 'pdata' in the above examples indicates, these functions are exposed "
"to drivers through function pointers in driver .platform_data structures.  "
"The function pointers are initialized by the `board-*.c` files to point to "
"the corresponding OMAP PM functions:"
msgstr ""

#: ../../../arch/arm/omap/omap_pm.rst:76
msgid ""
"set_max_dev_wakeup_lat will point to omap_pm_set_max_dev_wakeup_lat(), etc.  "
"Other architectures which do not support these functions should leave these "
"function pointers set to NULL.  Drivers should use the following idiom::"
msgstr ""

#: ../../../arch/arm/omap/omap_pm.rst:84
msgid ""
"The most common usage of these functions will probably be to specify the "
"maximum time from when an interrupt occurs, to when the device becomes "
"accessible.  To accomplish this, driver writers should use the "
"set_max_mpu_wakeup_lat() function to constrain the MPU wakeup latency, and "
"the set_max_dev_wakeup_lat() function to constrain the device wakeup latency "
"(from clk_enable() to accessibility).  For example::"
msgstr ""

#: ../../../arch/arm/omap/omap_pm.rst:102
msgid ""
"The PM parameters can be overwritten by calling the function again with the "
"new value.  The settings can be removed by calling the function with a t "
"argument of -1 (except in the case of set_max_bus_tput(), which should be "
"called with an r argument of 0)."
msgstr ""

#: ../../../arch/arm/omap/omap_pm.rst:107
msgid ""
"The fifth function above, omap_pm_get_dev_context_loss_count(), is intended "
"as an optimization to allow drivers to determine whether the device has lost "
"its internal context.  If context has been lost, the driver must restore its "
"internal context before proceeding."
msgstr ""

#: ../../../arch/arm/omap/omap_pm.rst:114
msgid "Other specialized interface functions"
msgstr ""

#: ../../../arch/arm/omap/omap_pm.rst:116
msgid ""
"The five functions listed above are intended to be usable by any device "
"driver.  DSPBridge and CPUFreq have a few special requirements. DSPBridge "
"expresses target DSP performance levels in terms of OPP IDs. CPUFreq "
"expresses target MPU performance levels in terms of MPU frequency.  The OMAP "
"PM interface contains functions for these specialized cases to convert that "
"input information (OPPs/MPU frequency) into the form that the underlying "
"power management implementation needs:"
msgstr ""

#: ../../../arch/arm/omap/omap_pm.rst:125
msgid "`(*pdata->dsp_get_opp_table)(void)`"
msgstr ""

#: ../../../arch/arm/omap/omap_pm.rst:127
msgid "`(*pdata->dsp_set_min_opp)(u8 opp_id)`"
msgstr ""

#: ../../../arch/arm/omap/omap_pm.rst:129
msgid "`(*pdata->dsp_get_opp)(void)`"
msgstr ""

#: ../../../arch/arm/omap/omap_pm.rst:131
msgid "`(*pdata->cpu_get_freq_table)(void)`"
msgstr ""

#: ../../../arch/arm/omap/omap_pm.rst:133
msgid "`(*pdata->cpu_set_freq)(unsigned long f)`"
msgstr ""

#: ../../../arch/arm/omap/omap_pm.rst:135
msgid "`(*pdata->cpu_get_freq)(void)`"
msgstr ""

#: ../../../arch/arm/omap/omap_pm.rst:138
msgid "Customizing OPP for platform"
msgstr ""

#: ../../../arch/arm/omap/omap_pm.rst:139
msgid ""
"Defining CONFIG_PM should enable OPP layer for the silicon and the "
"registration of OPP table should take place automatically. However, in "
"special cases, the default OPP table may need to be tweaked, for e.g.:"
msgstr ""

#: ../../../arch/arm/omap/omap_pm.rst:144
msgid ""
"enable default OPPs which are disabled by default, but which could be "
"enabled on a platform"
msgstr ""

#: ../../../arch/arm/omap/omap_pm.rst:146
msgid "Disable an unsupported OPP on the platform"
msgstr ""

#: ../../../arch/arm/omap/omap_pm.rst:147
msgid ""
"Define and add a custom opp table entry in these cases, the board file needs "
"to do additional steps as follows:"
msgstr ""

#: ../../../arch/arm/omap/omap_pm.rst:150
msgid "arch/arm/mach-omapx/board-xyz.c::"
msgstr ""

#: ../../../arch/arm/omap/omap_pm.rst:163
msgid "NOTE:"
msgstr ""

#: ../../../arch/arm/omap/omap_pm.rst:164
msgid ""
"omapx_opp_init will be omap3_opp_init or as required based on the omap "
"family."
msgstr ""
