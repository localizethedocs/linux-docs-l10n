# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../arch/arm64/tagged-pointers.rst:3
msgid "Tagged virtual addresses in AArch64 Linux"
msgstr ""

#: ../../../arch/arm64/tagged-pointers.rst:5
msgid "Author: Will Deacon <will.deacon@arm.com>"
msgstr ""

#: ../../../arch/arm64/tagged-pointers.rst:7
msgid "Date  : 12 June 2013"
msgstr ""

#: ../../../arch/arm64/tagged-pointers.rst:9
msgid ""
"This document briefly describes the provision of tagged virtual addresses in "
"the AArch64 translation system and their potential uses in AArch64 Linux."
msgstr ""

#: ../../../arch/arm64/tagged-pointers.rst:13
msgid ""
"The kernel configures the translation tables so that translations made via "
"TTBR0 (i.e. userspace mappings) have the top byte (bits 63:56) of the "
"virtual address ignored by the translation hardware. This frees up this byte "
"for application use."
msgstr ""

#: ../../../arch/arm64/tagged-pointers.rst:20
msgid "Passing tagged addresses to the kernel"
msgstr ""

#: ../../../arch/arm64/tagged-pointers.rst:22
msgid ""
"All interpretation of userspace memory addresses by the kernel assumes an "
"address tag of 0x00, unless the application enables the AArch64 Tagged "
"Address ABI explicitly (Documentation/arch/arm64/tagged-address-abi.rst)."
msgstr ""

#: ../../../arch/arm64/tagged-pointers.rst:27
msgid "This includes, but is not limited to, addresses found in:"
msgstr ""

#: ../../../arch/arm64/tagged-pointers.rst:29
msgid ""
"pointer arguments to system calls, including pointers in structures passed "
"to system calls,"
msgstr ""

#: ../../../arch/arm64/tagged-pointers.rst:32
msgid "the stack pointer (sp), e.g. when interpreting it to deliver a signal,"
msgstr ""

#: ../../../arch/arm64/tagged-pointers.rst:35
msgid ""
"the frame pointer (x29) and frame records, e.g. when interpreting them to "
"generate a backtrace or call graph."
msgstr ""

#: ../../../arch/arm64/tagged-pointers.rst:38
msgid ""
"Using non-zero address tags in any of these locations when the userspace "
"application did not enable the AArch64 Tagged Address ABI may result in an "
"error code being returned, a (fatal) signal being raised, or other modes of "
"failure."
msgstr ""

#: ../../../arch/arm64/tagged-pointers.rst:43
msgid ""
"For these reasons, when the AArch64 Tagged Address ABI is disabled, passing "
"non-zero address tags to the kernel via system calls is forbidden, and using "
"a non-zero address tag for sp is strongly discouraged."
msgstr ""

#: ../../../arch/arm64/tagged-pointers.rst:48
msgid ""
"Programs maintaining a frame pointer and frame records that use non-zero "
"address tags may suffer impaired or inaccurate debug and profiling "
"visibility."
msgstr ""

#: ../../../arch/arm64/tagged-pointers.rst:54
msgid "Preserving tags"
msgstr ""

#: ../../../arch/arm64/tagged-pointers.rst:56
msgid ""
"When delivering signals, non-zero tags are not preserved in siginfo.si_addr "
"unless the flag SA_EXPOSE_TAGBITS was set in sigaction.sa_flags when the "
"signal handler was installed. This means that signal handlers in "
"applications making use of tags cannot rely on the tag information for user "
"virtual addresses being maintained in these fields unless the flag was set."
msgstr ""

#: ../../../arch/arm64/tagged-pointers.rst:63
msgid ""
"If FEAT_MTE_TAGGED_FAR (Armv8.9) is supported, bits 63:60 of the fault "
"address are preserved in response to synchronous tag check faults "
"(SEGV_MTESERR) otherwise not preserved even if SA_EXPOSE_TAGBITS was set. "
"Applications should interpret the values of these bits based on the support "
"for the HWCAP3_MTE_FAR. If the support is not present, the values of these "
"bits should be considered as undefined otherwise valid."
msgstr ""

#: ../../../arch/arm64/tagged-pointers.rst:70
msgid ""
"For signals raised in response to watchpoint debug exceptions, the tag "
"information will be preserved regardless of the SA_EXPOSE_TAGBITS flag "
"setting."
msgstr ""

#: ../../../arch/arm64/tagged-pointers.rst:74
msgid ""
"Non-zero tags are never preserved in sigcontext.fault_address regardless of "
"the SA_EXPOSE_TAGBITS flag setting."
msgstr ""

#: ../../../arch/arm64/tagged-pointers.rst:77
msgid ""
"The architecture prevents the use of a tagged PC, so the upper byte will be "
"set to a sign-extension of bit 55 on exception return."
msgstr ""

#: ../../../arch/arm64/tagged-pointers.rst:80
msgid ""
"This behaviour is maintained when the AArch64 Tagged Address ABI is enabled."
msgstr ""

#: ../../../arch/arm64/tagged-pointers.rst:85
msgid "Other considerations"
msgstr ""

#: ../../../arch/arm64/tagged-pointers.rst:87
msgid ""
"Special care should be taken when using tagged pointers, since it is likely "
"that C compilers will not hazard two virtual addresses differing only in the "
"upper byte."
msgstr ""
