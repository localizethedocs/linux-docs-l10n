# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-20 11:24+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../driver-api/nvmem.rst:5
msgid "NVMEM Subsystem"
msgstr ""

#: ../../../driver-api/nvmem.rst:7
msgid "Srinivas Kandagatla <srinivas.kandagatla@linaro.org>"
msgstr ""

#: ../../../driver-api/nvmem.rst:9
msgid ""
"This document explains the NVMEM Framework along with the APIs provided, and "
"how to use it."
msgstr ""

#: ../../../driver-api/nvmem.rst:13
msgid "1. Introduction"
msgstr ""

#: ../../../driver-api/nvmem.rst:14
msgid ""
"*NVMEM* is the abbreviation for Non Volatile Memory layer. It is used to "
"retrieve configuration of SOC or Device specific data from non volatile "
"memories like eeprom, efuses and so on."
msgstr ""

#: ../../../driver-api/nvmem.rst:18
msgid ""
"Before this framework existed, NVMEM drivers like eeprom were stored in "
"drivers/misc, where they all had to duplicate pretty much the same code to "
"register a sysfs file, allow in-kernel users to access the content of the "
"devices they were driving, etc."
msgstr ""

#: ../../../driver-api/nvmem.rst:23
msgid ""
"This was also a problem as far as other in-kernel users were involved, since "
"the solutions used were pretty much different from one driver to another, "
"there was a rather big abstraction leak."
msgstr ""

#: ../../../driver-api/nvmem.rst:27
msgid ""
"This framework aims at solve these problems. It also introduces DT "
"representation for consumer devices to go get the data they require (MAC "
"Addresses, SoC/Revision ID, part numbers, and so on) from the NVMEMs."
msgstr ""

#: ../../../driver-api/nvmem.rst:32
msgid "NVMEM Providers"
msgstr ""

#: ../../../driver-api/nvmem.rst:34
msgid ""
"NVMEM provider refers to an entity that implements methods to initialize, "
"read and write the non-volatile memory."
msgstr ""

#: ../../../driver-api/nvmem.rst:38
msgid "2. Registering/Unregistering the NVMEM provider"
msgstr ""

#: ../../../driver-api/nvmem.rst:40
msgid ""
"A NVMEM provider can register with NVMEM core by supplying relevant nvmem "
"configuration to nvmem_register(), on success core would return a valid "
"nvmem_device pointer."
msgstr ""

#: ../../../driver-api/nvmem.rst:44
msgid ""
"nvmem_unregister() is used to unregister a previously registered provider."
msgstr ""

#: ../../../driver-api/nvmem.rst:46
msgid "For example, a simple nvram case::"
msgstr ""

#: ../../../driver-api/nvmem.rst:62
msgid ""
"Device drivers can define and register an nvmem cell using the "
"nvmem_cell_info struct::"
msgstr ""

#: ../../../driver-api/nvmem.rst:75
msgid ""
"Additionally it is possible to create nvmem cell lookup entries and register "
"them with the nvmem framework from machine code as shown in the example "
"below::"
msgstr ""

#: ../../../driver-api/nvmem.rst:88
msgid "NVMEM Consumers"
msgstr ""

#: ../../../driver-api/nvmem.rst:90
msgid ""
"NVMEM consumers are the entities which make use of the NVMEM provider to "
"read from and to NVMEM."
msgstr ""

#: ../../../driver-api/nvmem.rst:94
msgid "3. NVMEM cell based consumer APIs"
msgstr ""

#: ../../../driver-api/nvmem.rst:96
msgid ""
"NVMEM cells are the data entries/fields in the NVMEM. The NVMEM framework "
"provides 3 APIs to read/write NVMEM cells::"
msgstr ""

#: ../../../driver-api/nvmem.rst:108
msgid ""
"`*nvmem_cell_get()` apis will get a reference to nvmem cell for a given id, "
"and nvmem_cell_read/write() can then read or write to the cell. Once the "
"usage of the cell is finished the consumer should call `*nvmem_cell_put()` "
"to free all the allocation memory for the cell."
msgstr ""

#: ../../../driver-api/nvmem.rst:114
msgid "4. Direct NVMEM device based consumer APIs"
msgstr ""

#: ../../../driver-api/nvmem.rst:116
msgid ""
"In some instances it is necessary to directly read/write the NVMEM. To "
"facilitate such consumers NVMEM framework provides below apis::"
msgstr ""

#: ../../../driver-api/nvmem.rst:134
msgid ""
"Before the consumers can read/write NVMEM directly, it should get hold of "
"nvmem_controller from one of the `*nvmem_device_get()` api."
msgstr ""

#: ../../../driver-api/nvmem.rst:137
msgid ""
"The difference between these apis and cell based apis is that these apis "
"always take nvmem_device as parameter."
msgstr ""

#: ../../../driver-api/nvmem.rst:141
msgid "5. Releasing a reference to the NVMEM"
msgstr ""

#: ../../../driver-api/nvmem.rst:143
msgid ""
"When a consumer no longer needs the NVMEM, it has to release the reference "
"to the NVMEM it has obtained using the APIs mentioned in the above section. "
"The NVMEM framework provides 2 APIs to release a reference to the NVMEM::"
msgstr ""

#: ../../../driver-api/nvmem.rst:152
msgid ""
"Both these APIs are used to release a reference to the NVMEM and "
"devm_nvmem_cell_put and devm_nvmem_device_put destroys the devres associated "
"with this NVMEM."
msgstr ""

#: ../../../driver-api/nvmem.rst:157
msgid "Userspace"
msgstr ""

#: ../../../driver-api/nvmem.rst:160
msgid "6. Userspace binary interface"
msgstr ""

#: ../../../driver-api/nvmem.rst:162
msgid "Userspace can read/write the raw NVMEM file located at::"
msgstr ""

#: ../../../driver-api/nvmem.rst:166
msgid "ex::"
msgstr ""

#: ../../../driver-api/nvmem.rst:179
msgid "7. DeviceTree Binding"
msgstr ""

#: ../../../driver-api/nvmem.rst:181
msgid "See Documentation/devicetree/bindings/nvmem/nvmem.txt"
msgstr ""

#: ../../../driver-api/nvmem.rst:184
msgid "8. NVMEM layouts"
msgstr ""

#: ../../../driver-api/nvmem.rst:186
msgid ""
"NVMEM layouts are yet another mechanism to create cells. With the device "
"tree binding it is possible to specify simple cells by using an offset and a "
"length. Sometimes, the cells doesn't have a static offset, but the content "
"is still well defined, e.g. tag-length-values. In this case, the NVMEM "
"device content has to be first parsed and the cells need to be added "
"accordingly. Layouts let you read the content of the NVMEM device and let "
"you add cells dynamically."
msgstr ""

#: ../../../driver-api/nvmem.rst:194
msgid ""
"Another use case for layouts is the post processing of cells. With layouts, "
"it is possible to associate a custom post processing hook to a cell. It even "
"possible to add this hook to cells not created by the layout itself."
msgstr ""

#: ../../../driver-api/nvmem.rst:199
msgid "9. Internal kernel API"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:640
msgid "Add one cell information to an nvmem device"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:644
#: drivers/nvmem/core.c:698 drivers/nvmem/core.c:711 drivers/nvmem/core.c:898
#: drivers/nvmem/core.c:1073 drivers/nvmem/core.c:1090
#: drivers/nvmem/core.c:1155 drivers/nvmem/core.c:1185
#: drivers/nvmem/core.c:1210 drivers/nvmem/core.c:1241
#: drivers/nvmem/core.c:1259 drivers/nvmem/core.c:1270
#: drivers/nvmem/core.c:1407 drivers/nvmem/core.c:1498
#: drivers/nvmem/core.c:1533 drivers/nvmem/core.c:1573
#: drivers/nvmem/core.c:1591 drivers/nvmem/core.c:1678
#: drivers/nvmem/core.c:1802 drivers/nvmem/core.c:1846
#: drivers/nvmem/core.c:1861 drivers/nvmem/core.c:1876
#: drivers/nvmem/core.c:1891 drivers/nvmem/core.c:1939
#: drivers/nvmem/core.c:1970 drivers/nvmem/core.c:2001
#: drivers/nvmem/core.c:2033 drivers/nvmem/core.c:2059
#: drivers/nvmem/core.c:2088 drivers/nvmem/core.c:2117
#: drivers/nvmem/core.c:2134 drivers/nvmem/core.c:2152
#: drivers/nvmem/core.c:2165
msgid "**Parameters**"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:646
#: drivers/nvmem/core.c:1075 drivers/nvmem/core.c:1241
#: drivers/nvmem/core.c:1261 drivers/nvmem/core.c:2003
#: drivers/nvmem/core.c:2035 drivers/nvmem/core.c:2061
#: drivers/nvmem/core.c:2090 drivers/nvmem/core.c:2154
#: drivers/nvmem/core.c:2167
msgid "``struct nvmem_device *nvmem``"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:642
msgid "nvmem device to add cells to."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:644
msgid "``const struct nvmem_cell_info *info``"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:643
msgid "nvmem cell info to add to the device"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:645
#: drivers/nvmem/core.c:698 drivers/nvmem/core.c:711 drivers/nvmem/core.c:899
#: drivers/nvmem/core.c:1093 drivers/nvmem/core.c:1156
#: drivers/nvmem/core.c:1186 drivers/nvmem/core.c:1211
#: drivers/nvmem/core.c:1271 drivers/nvmem/core.c:1410
#: drivers/nvmem/core.c:1501 drivers/nvmem/core.c:1534
#: drivers/nvmem/core.c:1680 drivers/nvmem/core.c:1804
#: drivers/nvmem/core.c:1848 drivers/nvmem/core.c:1863
#: drivers/nvmem/core.c:1878 drivers/nvmem/core.c:1893
#: drivers/nvmem/core.c:1941 drivers/nvmem/core.c:1972
#: drivers/nvmem/core.c:2003 drivers/nvmem/core.c:2035
#: drivers/nvmem/core.c:2062 drivers/nvmem/core.c:2091
#: drivers/nvmem/core.c:2152 drivers/nvmem/core.c:2165
msgid "**Return**"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:645
msgid "0 or negative error code on failure."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:694
msgid "Register a notifier block for nvmem events."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:700
#: drivers/nvmem/core.c:713
msgid "``struct notifier_block *nb``"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:696
msgid "notifier block to be called on nvmem events."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:698
#: drivers/nvmem/core.c:711
msgid "0 on success, negative error number on failure."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:707
msgid "Unregister a notifier block for nvmem events."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:709
msgid "notifier block to be unregistered."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:894
msgid ""
"Register a nvmem device for given nvmem_config. Also creates a binary entry "
"in /sys/bus/nvmem/devices/dev-name/nvmem"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:900
#: drivers/nvmem/core.c:1092
msgid "``const struct nvmem_config *config``"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:897
#: drivers/nvmem/core.c:1091
msgid "nvmem device configuration with which nvmem device is created."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:899
#: drivers/nvmem/core.c:1093
msgid ""
"Will be an ERR_PTR() on error or a valid pointer to nvmem_device on success."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1069
msgid "Unregister previously registered nvmem device"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1071
msgid "Pointer to previously registered nvmem device."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1086
msgid ""
"Register a managed nvmem device for given nvmem_config. Also creates a "
"binary entry in /sys/bus/nvmem/devices/dev-name/nvmem"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1092
#: drivers/nvmem/core.c:1187 drivers/nvmem/core.c:1243
#: drivers/nvmem/core.c:1272 drivers/nvmem/core.c:1500
#: drivers/nvmem/core.c:1535 drivers/nvmem/core.c:1575
#: drivers/nvmem/core.c:1848 drivers/nvmem/core.c:1863
#: drivers/nvmem/core.c:1878 drivers/nvmem/core.c:1893
#: drivers/nvmem/core.c:1941 drivers/nvmem/core.c:1972
msgid "``struct device *dev``"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1090
#: drivers/nvmem/core.c:1183 drivers/nvmem/core.c:1239
msgid "Device that uses the nvmem device."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1151
#: drivers/nvmem/core.c:1181
msgid "Get nvmem device from a given id"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1157
#: drivers/nvmem/core.c:1409
msgid "``struct device_node *np``"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1153
msgid "Device tree node that uses the nvmem device."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1155
#: drivers/nvmem/core.c:1270 drivers/nvmem/core.c:1407
#: drivers/nvmem/core.c:1498 drivers/nvmem/core.c:1533
msgid "``const char *id``"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1154
msgid "nvmem name from nvmem-names property."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1156
#: drivers/nvmem/core.c:1186 drivers/nvmem/core.c:1211
msgid ""
"ERR_PTR() on error or a valid pointer to a struct nvmem_device on success."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1185
msgid "``const char *dev_name``"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1184
msgid "name of the requested nvmem device."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1206
msgid "Find nvmem device with matching function"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1212
msgid "``void *data``"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1208
msgid "Data to pass to match function"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1210
msgid "``int (*match)(struct device *dev, const void *data)``"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1209
msgid "Callback function to check device"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1237
#: drivers/nvmem/core.c:1255
msgid "put already got nvmem device"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1240
msgid ""
"pointer to nvmem device allocated by devm_nvmem_cell_get(), that needs to be "
"released."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1257
msgid "pointer to nvmem device that needs to be released."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1266
msgid "Get nvmem device of device from a given id"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1268
msgid "Device that requests the nvmem device."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1269
msgid "name id for the requested nvmem device."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1271
msgid ""
"ERR_PTR() on error or a valid pointer to a struct nvmem_device on success.  "
"The nvmem_device will be freed by the automatically once the device is freed."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1403
msgid "Get a nvmem cell from given device node and cell id"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1405
msgid "Device tree node that uses the nvmem cell."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1406
msgid ""
"nvmem cell name from nvmem-cell-names property, or NULL for the cell at "
"index 0 (the lone cell with no accompanying nvmem-cell-names property)."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1410
#: drivers/nvmem/core.c:1501
msgid ""
"Will be an ERR_PTR() on error or a valid pointer to a struct nvmem_cell.  "
"The nvmem_cell will be freed by the nvmem_cell_put()."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1494
msgid "Get nvmem cell of device from a given cell name"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1496
#: drivers/nvmem/core.c:1531 drivers/nvmem/core.c:1572
#: drivers/nvmem/core.c:1844 drivers/nvmem/core.c:1859
#: drivers/nvmem/core.c:1874 drivers/nvmem/core.c:1889
#: drivers/nvmem/core.c:1937 drivers/nvmem/core.c:1968
msgid "Device that requests the nvmem cell."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1497
msgid ""
"nvmem cell name to get (this corresponds with the name from the nvmem-cell-"
"names property for DT systems and with the con_id from the lookup entry for "
"non-DT systems)."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1529
msgid "Get nvmem cell of device from a given id"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1532
msgid "nvmem cell name id to get."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1534
msgid ""
"Will be an ERR_PTR() on error or a valid pointer to a struct nvmem_cell.  "
"The nvmem_cell will be freed by the automatically once the device is freed."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1569
msgid "Release previously allocated nvmem cell from devm_nvmem_cell_get."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1574
#: drivers/nvmem/core.c:1593 drivers/nvmem/core.c:1680
#: drivers/nvmem/core.c:1804
msgid "``struct nvmem_cell *cell``"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1573
msgid "Previously allocated nvmem cell by devm_nvmem_cell_get()."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1587
msgid "Release previously allocated nvmem cell."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1589
msgid "Previously allocated nvmem cell by nvmem_cell_get()."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1674
msgid "Read a given nvmem cell"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1676
msgid "nvmem cell to be read."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1678
msgid "``size_t *len``"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1677
msgid ""
"pointer to length of cell which will be populated on successful read; can be "
"NULL."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1680
msgid ""
"ERR_PTR() on error or a valid pointer to a buffer on success. The buffer "
"should be freed by the consumer with a kfree()."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1798
msgid "Write to a given nvmem cell"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1800
msgid "nvmem cell to be written."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1802
#: drivers/nvmem/core.c:2002 drivers/nvmem/core.c:2034
#: drivers/nvmem/core.c:2061 drivers/nvmem/core.c:2090
msgid "``void *buf``"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1801
msgid "Buffer to be written."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1803
msgid "``size_t len``"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1802
msgid "length of buffer to be written to nvmem cell."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1804
msgid "length of bytes written or negative on failure."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1842
msgid "Read a cell value as a u8"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1846
#: drivers/nvmem/core.c:1861 drivers/nvmem/core.c:1876
#: drivers/nvmem/core.c:1891 drivers/nvmem/core.c:1939
#: drivers/nvmem/core.c:1970
msgid "``const char *cell_id``"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1845
#: drivers/nvmem/core.c:1860 drivers/nvmem/core.c:1875
#: drivers/nvmem/core.c:1890 drivers/nvmem/core.c:1938
#: drivers/nvmem/core.c:1969
msgid "Name of nvmem cell to read."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1847
msgid "``u8 *val``"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1846
#: drivers/nvmem/core.c:1861 drivers/nvmem/core.c:1876
#: drivers/nvmem/core.c:1891 drivers/nvmem/core.c:1939
#: drivers/nvmem/core.c:1970
msgid "pointer to output value."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1848
#: drivers/nvmem/core.c:1863 drivers/nvmem/core.c:1878
#: drivers/nvmem/core.c:1893 drivers/nvmem/core.c:1941
#: drivers/nvmem/core.c:1972
msgid "0 on success or negative errno."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1857
msgid "Read a cell value as a u16"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1862
msgid "``u16 *val``"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1872
msgid "Read a cell value as a u32"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1877
#: drivers/nvmem/core.c:1940
msgid "``u32 *val``"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1887
msgid "Read a cell value as a u64"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1892
#: drivers/nvmem/core.c:1971
msgid "``u64 *val``"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1935
msgid "Read up to 32-bits of data as a little endian number."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1966
msgid "Read up to 64-bits of data as a little endian number."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1997
msgid "Read a given nvmem device and cell"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:1999
#: drivers/nvmem/core.c:2057
msgid "nvmem device to read from."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:2001
#: drivers/nvmem/core.c:2033
msgid "``struct nvmem_cell_info *info``"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:2000
msgid "nvmem cell info to be read."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:2001
#: drivers/nvmem/core.c:2060
msgid "buffer pointer which will be populated on successful read."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:2003
#: drivers/nvmem/core.c:2062
msgid ""
"length of successful bytes read on success and negative error code on error."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:2029
#: drivers/nvmem/core.c:2084
msgid "Write cell to a given nvmem device"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:2031
#: drivers/nvmem/core.c:2086
msgid "nvmem device to be written to."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:2032
msgid "nvmem cell info to be written."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:2033
msgid "buffer to be written to cell."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:2035
#: drivers/nvmem/core.c:2091
msgid "length of bytes written or negative error code on failure."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:2055
msgid "Read from a given nvmem device"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:2059
#: drivers/nvmem/core.c:2088
msgid "``unsigned int offset``"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:2058
#: drivers/nvmem/core.c:2087
msgid "offset in nvmem device."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:2060
#: drivers/nvmem/core.c:2089
msgid "``size_t bytes``"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:2059
msgid "number of bytes to read."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:2088
msgid "number of bytes to write."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:2089
msgid "buffer to be written."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:2113
msgid "register a list of cell lookup entries"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:2119
#: drivers/nvmem/core.c:2136
msgid "``struct nvmem_cell_lookup *entries``"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:2115
#: drivers/nvmem/core.c:2133
msgid "array of cell lookup entries"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:2117
#: drivers/nvmem/core.c:2135
msgid "``size_t nentries``"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:2116
#: drivers/nvmem/core.c:2134
msgid "number of cell lookup entries in the array"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:2130
msgid "remove a list of previously added cell lookup entries"
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:2148
msgid "Get the name of a given nvmem device."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:2150
#: drivers/nvmem/core.c:2163
msgid "nvmem device."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:2152
msgid "name of the nvmem device."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:2161
msgid "Get the size of a given nvmem device."
msgstr ""

#: ../../../driver-api/nvmem:201: drivers/nvmem/core.c:2165
msgid "size of the nvmem device."
msgstr ""
