# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../driver-api/ipmb.rst:3
msgid "IPMB Driver for a Satellite MC"
msgstr ""

#: ../../../driver-api/ipmb.rst:5
msgid ""
"The Intelligent Platform Management Bus or IPMB, is an I2C bus that provides "
"a standardized interconnection between different boards within a chassis. "
"This interconnection is between the baseboard management (BMC) and chassis "
"electronics. IPMB is also associated with the messaging protocol through the "
"IPMB bus."
msgstr ""

#: ../../../driver-api/ipmb.rst:12
msgid ""
"The devices using the IPMB are usually management controllers that perform "
"management functions such as servicing the front panel interface, monitoring "
"the baseboard, hot-swapping disk drivers in the system chassis, etc..."
msgstr ""

#: ../../../driver-api/ipmb.rst:17
msgid ""
"When an IPMB is implemented in the system, the BMC serves as a controller to "
"give system software access to the IPMB. The BMC sends IPMI requests to a "
"device (usually a Satellite Management Controller or Satellite MC) via IPMB "
"and the device sends a response back to the BMC."
msgstr ""

#: ../../../driver-api/ipmb.rst:23
msgid ""
"For more information on IPMB and the format of an IPMB message, refer to the "
"IPMB and IPMI specifications."
msgstr ""

#: ../../../driver-api/ipmb.rst:27
msgid "IPMB driver for Satellite MC"
msgstr ""

#: ../../../driver-api/ipmb.rst:29
msgid ""
"ipmb-dev-int - This is the driver needed on a Satellite MC to receive IPMB "
"messages from a BMC and send a response back. This driver works with the I2C "
"driver and a userspace program such as OpenIPMI:"
msgstr ""

#: ../../../driver-api/ipmb.rst:34
msgid ""
"It is an I2C slave backend driver. So, it defines a callback function to set "
"the Satellite MC as an I2C slave. This callback function handles the "
"received IPMI requests."
msgstr ""

#: ../../../driver-api/ipmb.rst:38
msgid ""
"It defines the read and write functions to enable a user space program (such "
"as OpenIPMI) to communicate with the kernel."
msgstr ""

#: ../../../driver-api/ipmb.rst:43
msgid "Load the IPMB driver"
msgstr ""

#: ../../../driver-api/ipmb.rst:45
msgid ""
"The driver needs to be loaded at boot time or manually first. First, make "
"sure you have the following in your config file: "
"CONFIG_IPMB_DEVICE_INTERFACE=y"
msgstr ""

#: ../../../driver-api/ipmb.rst:49
msgid "If you want the driver to be loaded at boot time:"
msgstr ""

#: ../../../driver-api/ipmb.rst:51
msgid "Add this entry to your ACPI table, under the appropriate SMBus::"
msgstr ""

#: ../../../driver-api/ipmb.rst:66
msgid "Example for device tree::"
msgstr ""

#: ../../../driver-api/ipmb.rst:78
msgid ""
"If xmit of data to be done using raw i2c block vs smbus then \"i2c-"
"protocol\" needs to be defined as above."
msgstr ""

#: ../../../driver-api/ipmb.rst:81
msgid "Manually from Linux::"
msgstr ""

#: ../../../driver-api/ipmb.rst:87
msgid "Instantiate the device"
msgstr ""

#: ../../../driver-api/ipmb.rst:89
msgid ""
"After loading the driver, you can instantiate the device as described in "
"'Documentation/i2c/instantiating-devices.rst'. If you have multiple BMCs, "
"each connected to your Satellite MC via a different I2C bus, you can "
"instantiate a device for each of those BMCs."
msgstr ""

#: ../../../driver-api/ipmb.rst:95
msgid ""
"The name of the instantiated device contains the I2C bus number associated "
"with it as follows::"
msgstr ""

#: ../../../driver-api/ipmb.rst:102
msgid ""
"For instance, you can instantiate the ipmb-dev-int device from user space at "
"the 7 bit address 0x10 on bus 2::"
msgstr ""

#: ../../../driver-api/ipmb.rst:107
msgid ""
"This will create the device file /dev/ipmb-2, which can be accessed by the "
"user space program. The device needs to be instantiated before running the "
"user space program."
msgstr ""
