# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../bpf/map_queue_stack.rst:6
msgid "BPF_MAP_TYPE_QUEUE and BPF_MAP_TYPE_STACK"
msgstr ""

#: ../../../bpf/map_queue_stack.rst:9
msgid ""
"``BPF_MAP_TYPE_QUEUE`` and ``BPF_MAP_TYPE_STACK`` were introduced in kernel "
"version 4.20"
msgstr ""

#: ../../../bpf/map_queue_stack.rst:12
msgid ""
"``BPF_MAP_TYPE_QUEUE`` provides FIFO storage and ``BPF_MAP_TYPE_STACK`` "
"provides LIFO storage for BPF programs. These maps support peek, pop and "
"push operations that are exposed to BPF programs through the respective "
"helpers. These operations are exposed to userspace applications using the "
"existing ``bpf`` syscall in the following way:"
msgstr ""

#: ../../../bpf/map_queue_stack.rst:18
msgid "``BPF_MAP_LOOKUP_ELEM`` -> peek"
msgstr ""

#: ../../../bpf/map_queue_stack.rst:19
msgid "``BPF_MAP_LOOKUP_AND_DELETE_ELEM`` -> pop"
msgstr ""

#: ../../../bpf/map_queue_stack.rst:20
msgid "``BPF_MAP_UPDATE_ELEM`` -> push"
msgstr ""

#: ../../../bpf/map_queue_stack.rst:22
msgid ""
"``BPF_MAP_TYPE_QUEUE`` and ``BPF_MAP_TYPE_STACK`` do not support "
"``BPF_F_NO_PREALLOC``."
msgstr ""

#: ../../../bpf/map_queue_stack.rst:26
msgid "Usage"
msgstr ""

#: ../../../bpf/map_queue_stack.rst:29 ../../../bpf/map_queue_stack.rst:111
msgid "Kernel BPF"
msgstr ""

#: ../../../bpf/map_queue_stack.rst:32
msgid "bpf_map_push_elem()"
msgstr ""

#: ../../../bpf/map_queue_stack.rst:38
msgid ""
"An element ``value`` can be added to a queue or stack using the "
"``bpf_map_push_elem`` helper. The ``flags`` parameter must be set to "
"``BPF_ANY`` or ``BPF_EXIST``. If ``flags`` is set to ``BPF_EXIST`` then, "
"when the queue or stack is full, the oldest element will be removed to make "
"room for ``value`` to be added. Returns ``0`` on success, or negative error "
"in case of failure."
msgstr ""

#: ../../../bpf/map_queue_stack.rst:46
msgid "bpf_map_peek_elem()"
msgstr ""

#: ../../../bpf/map_queue_stack.rst:52
msgid ""
"This helper fetches an element ``value`` from a queue or stack without "
"removing it. Returns ``0`` on success, or negative error in case of failure."
msgstr ""

#: ../../../bpf/map_queue_stack.rst:57
msgid "bpf_map_pop_elem()"
msgstr ""

#: ../../../bpf/map_queue_stack.rst:63
msgid ""
"This helper removes an element into ``value`` from a queue or stack. Returns "
"``0`` on success, or negative error in case of failure."
msgstr ""

#: ../../../bpf/map_queue_stack.rst:68 ../../../bpf/map_queue_stack.rst:125
msgid "Userspace"
msgstr ""

#: ../../../bpf/map_queue_stack.rst:71
msgid "bpf_map_update_elem()"
msgstr ""

#: ../../../bpf/map_queue_stack.rst:77
msgid ""
"A userspace program can push ``value`` onto a queue or stack using libbpf's "
"``bpf_map_update_elem`` function. The ``key`` parameter must be set to "
"``NULL`` and ``flags`` must be set to ``BPF_ANY`` or ``BPF_EXIST``, with the "
"same semantics as the ``bpf_map_push_elem`` kernel helper. Returns ``0`` on "
"success, or negative error in case of failure."
msgstr ""

#: ../../../bpf/map_queue_stack.rst:84
msgid "bpf_map_lookup_elem()"
msgstr ""

#: ../../../bpf/map_queue_stack.rst:90
msgid ""
"A userspace program can peek at the ``value`` at the head of a queue or "
"stack using the libbpf ``bpf_map_lookup_elem`` function. The ``key`` "
"parameter must be set to ``NULL``.  Returns ``0`` on success, or negative "
"error in case of failure."
msgstr ""

#: ../../../bpf/map_queue_stack.rst:96
msgid "bpf_map_lookup_and_delete_elem()"
msgstr ""

#: ../../../bpf/map_queue_stack.rst:102
msgid ""
"A userspace program can pop a ``value`` from the head of a queue or stack "
"using the libbpf ``bpf_map_lookup_and_delete_elem`` function. The ``key`` "
"parameter must be set to ``NULL``. Returns ``0`` on success, or negative "
"error in case of failure."
msgstr ""

#: ../../../bpf/map_queue_stack.rst:108
msgid "Examples"
msgstr ""

#: ../../../bpf/map_queue_stack.rst:113
msgid "This snippet shows how to declare a queue in a BPF program:"
msgstr ""

#: ../../../bpf/map_queue_stack.rst:127
msgid ""
"This snippet shows how to use libbpf's low-level API to create a queue from "
"userspace:"
msgstr ""

#: ../../../bpf/map_queue_stack.rst:144
msgid "References"
msgstr ""

#: ../../../bpf/map_queue_stack.rst:146
msgid ""
"https://lwn.net/ml/netdev/153986858555.9127.14517764371945179514."
"stgit@kernel/"
msgstr ""
