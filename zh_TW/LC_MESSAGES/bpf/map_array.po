# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../bpf/map_array.rst:6
msgid "BPF_MAP_TYPE_ARRAY and BPF_MAP_TYPE_PERCPU_ARRAY"
msgstr ""

#: ../../../bpf/map_array.rst:9
msgid "``BPF_MAP_TYPE_ARRAY`` was introduced in kernel version 3.19"
msgstr ""

#: ../../../bpf/map_array.rst:10
msgid "``BPF_MAP_TYPE_PERCPU_ARRAY`` was introduced in version 4.6"
msgstr ""

#: ../../../bpf/map_array.rst:12
msgid ""
"``BPF_MAP_TYPE_ARRAY`` and ``BPF_MAP_TYPE_PERCPU_ARRAY`` provide generic "
"array storage. The key type is an unsigned 32-bit integer (4 bytes) and the "
"map is of constant size. The size of the array is defined in ``max_entries`` "
"at creation time. All array elements are pre-allocated and zero initialized "
"when created. ``BPF_MAP_TYPE_PERCPU_ARRAY`` uses a different memory region "
"for each CPU whereas ``BPF_MAP_TYPE_ARRAY`` uses the same memory region. The "
"value stored can be of any size, however, all array elements are aligned to "
"8 bytes."
msgstr ""

#: ../../../bpf/map_array.rst:21
msgid ""
"Since kernel 5.5, memory mapping may be enabled for ``BPF_MAP_TYPE_ARRAY`` "
"by setting the flag ``BPF_F_MMAPABLE``. The map definition is page-aligned "
"and starts on the first page. Sufficient page-sized and page-aligned blocks "
"of memory are allocated to store all array values, starting on the second "
"page, which in some cases will result in over-allocation of memory. The "
"benefit of using this is increased performance and ease of use since "
"userspace programs would not be required to use helper functions to access "
"and mutate data."
msgstr ""

#: ../../../bpf/map_array.rst:30
msgid "Usage"
msgstr ""

#: ../../../bpf/map_array.rst:33 ../../../bpf/map_array.rst:104
msgid "Kernel BPF"
msgstr ""

#: ../../../bpf/map_array.rst:36
msgid "bpf_map_lookup_elem()"
msgstr ""

#: ../../../bpf/map_array.rst:42
msgid ""
"Array elements can be retrieved using the ``bpf_map_lookup_elem()`` helper. "
"This helper returns a pointer into the array element, so to avoid data races "
"with userspace reading the value, the user must use primitives like "
"``__sync_fetch_and_add()`` when updating the value in-place."
msgstr ""

#: ../../../bpf/map_array.rst:48
msgid "bpf_map_update_elem()"
msgstr ""

#: ../../../bpf/map_array.rst:54
msgid ""
"Array elements can be updated using the ``bpf_map_update_elem()`` helper."
msgstr ""

#: ../../../bpf/map_array.rst:56
msgid ""
"``bpf_map_update_elem()`` returns 0 on success, or negative error in case of "
"failure."
msgstr ""

#: ../../../bpf/map_array.rst:59
msgid ""
"Since the array is of constant size, ``bpf_map_delete_elem()`` is not "
"supported. To clear an array element, you may use ``bpf_map_update_elem()`` "
"to insert a zero value to that index."
msgstr ""

#: ../../../bpf/map_array.rst:64
msgid "Per CPU Array"
msgstr ""

#: ../../../bpf/map_array.rst:66
msgid ""
"Values stored in ``BPF_MAP_TYPE_ARRAY`` can be accessed by multiple programs "
"across different CPUs. To restrict storage to a single CPU, you may use a "
"``BPF_MAP_TYPE_PERCPU_ARRAY``."
msgstr ""

#: ../../../bpf/map_array.rst:70
msgid ""
"When using a ``BPF_MAP_TYPE_PERCPU_ARRAY`` the ``bpf_map_update_elem()`` and "
"``bpf_map_lookup_elem()`` helpers automatically access the slot for the "
"current CPU."
msgstr ""

#: ../../../bpf/map_array.rst:75
msgid "bpf_map_lookup_percpu_elem()"
msgstr ""

#: ../../../bpf/map_array.rst:81
msgid ""
"The ``bpf_map_lookup_percpu_elem()`` helper can be used to lookup the array "
"value for a specific CPU. Returns value on success , or ``NULL`` if no entry "
"was found or ``cpu`` is invalid."
msgstr ""

#: ../../../bpf/map_array.rst:86
msgid "Concurrency"
msgstr ""

#: ../../../bpf/map_array.rst:88
msgid ""
"Since kernel version 5.1, the BPF infrastructure provides ``struct "
"bpf_spin_lock`` to synchronize access."
msgstr ""

#: ../../../bpf/map_array.rst:92 ../../../bpf/map_array.rst:140
msgid "Userspace"
msgstr ""

#: ../../../bpf/map_array.rst:94
msgid ""
"Access from userspace uses libbpf APIs with the same names as above, with "
"the map identified by its ``fd``."
msgstr ""

#: ../../../bpf/map_array.rst:98
msgid "Examples"
msgstr ""

#: ../../../bpf/map_array.rst:100
msgid ""
"Please see the ``tools/testing/selftests/bpf`` directory for functional "
"examples. The code samples below demonstrate API usage."
msgstr ""

#: ../../../bpf/map_array.rst:106
msgid "This snippet shows how to declare an array in a BPF program."
msgstr ""

#: ../../../bpf/map_array.rst:118
msgid "This example BPF program shows how to access an array element."
msgstr ""

#: ../../../bpf/map_array.rst:143
msgid "BPF_MAP_TYPE_ARRAY"
msgstr ""

#: ../../../bpf/map_array.rst:145
msgid ""
"This snippet shows how to create an array, using ``bpf_map_create_opts`` to "
"set flags."
msgstr ""

#: ../../../bpf/map_array.rst:167
msgid "This snippet shows how to initialize the elements of an array."
msgstr ""

#: ../../../bpf/map_array.rst:187
msgid "This snippet shows how to retrieve an element value from an array."
msgstr ""

#: ../../../bpf/map_array.rst:208
msgid "BPF_MAP_TYPE_PERCPU_ARRAY"
msgstr ""

#: ../../../bpf/map_array.rst:210
msgid "This snippet shows how to initialize the elements of a per CPU array."
msgstr ""

#: ../../../bpf/map_array.rst:232
msgid ""
"This snippet shows how to access the per CPU elements of an array value."
msgstr ""

#: ../../../bpf/map_array.rst:256
msgid "Semantics"
msgstr ""

#: ../../../bpf/map_array.rst:258
msgid ""
"As shown in the example above, when accessing a "
"``BPF_MAP_TYPE_PERCPU_ARRAY`` in userspace, each value is an array with "
"``ncpus`` elements."
msgstr ""

#: ../../../bpf/map_array.rst:261
msgid ""
"When calling ``bpf_map_update_elem()`` the flag ``BPF_NOEXIST`` can not be "
"used for these maps."
msgstr ""
