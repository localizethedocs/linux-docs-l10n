# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../process/debugging/userspace_debugging_guide.rst:5
msgid "Userspace debugging advice"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:7
msgid ""
"This document provides a brief overview of common tools to debug the Linux "
"Kernel from userspace. For debugging advice aimed at driver developers go :"
"doc:`here </process/debugging/driver_development_debugging_guide>`. For "
"general debugging advice, see :doc:`general advice document </process/"
"debugging/index>`."
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:15
msgid "Contents"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:17
msgid "The following sections show you the available tools."
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:20
msgid "Dynamic debug"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:22
msgid ""
"Mechanism to filter what ends up in the kernel log by dis-/en-abling log "
"messages."
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:25
msgid "Prerequisite: ``CONFIG_DYNAMIC_DEBUG``"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:27
msgid "Dynamic debug is only able to target:"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:29
msgid "pr_debug()"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:30
msgid "dev_dbg()"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:31
msgid "print_hex_dump_debug()"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:32
msgid "print_hex_dump_bytes()"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:34
msgid ""
"Therefore the usability of this tool is, as of now, quite limited as there "
"is no uniform rule for adding debug prints to the codebase, resulting in a "
"variety of ways these prints are implemented."
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:38
msgid ""
"Also, note that most debug statements are implemented as a variation of "
"dprintk(), which have to be activated via a parameter in respective module, "
"dynamic debug is unable to do that step for you."
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:42
msgid ""
"Here is one example, that enables all available pr_debug()'s within the "
"file::"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:52
msgid "**When should you use this over Ftrace ?**"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:54
msgid ""
"When the code contains one of the valid print statements (see above) or when "
"you have added multiple pr_debug() statements during development"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:56
msgid ""
"When timing is not an issue, meaning if multiple pr_debug() statements in "
"the code won't cause delays"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:58
msgid ""
"When you care more about receiving specific log messages than tracing the "
"pattern of how a function is called"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:61
msgid "For the full documentation see :doc:`/admin-guide/dynamic-debug-howto`"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:64
msgid "Ftrace"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:66
msgid "Prerequisite: ``CONFIG_DYNAMIC_FTRACE``"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:68
msgid ""
"This tool uses the tracefs file system for the control files and output "
"files. That file system will be mounted as a ``tracing`` directory, which "
"can be found in either ``/sys/kernel/`` or ``/sys/debug/kernel/``."
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:72
msgid "Some of the most important operations for debugging are:"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:74
msgid ""
"You can perform a function trace by adding a function name to the "
"``set_ftrace_filter`` file (which accepts any function name found within the "
"``available_filter_functions`` file) or you can specifically disable certain "
"functions by adding their names to the ``set_ftrace_notrace`` file (more "
"info at: :ref:`trace/ftrace:dynamic ftrace`)."
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:79
msgid ""
"In order to find out where calls originate from you can activate the "
"``func_stack_trace`` option under ``options/func_stack_trace``."
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:81
msgid ""
"Tracing the children of a function call and showing the return values are "
"possible by adding the desired function in the ``set_graph_function`` file "
"(requires config ``FUNCTION_GRAPH_RETVAL``); more info at :ref:`trace/ftrace:"
"dynamic ftrace with the function graph tracer`."
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:86
msgid "For the full Ftrace documentation see :doc:`/trace/ftrace`"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:88
msgid ""
"Or you could also trace for specific events by :ref:`using event tracing "
"<trace/events:2. using event tracing>`, which can be defined as described "
"here: :ref:`Creating a custom Ftrace tracepoint <process/debugging/"
"driver_development_debugging_guide:ftrace>`."
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:93
msgid ""
"For the full Ftrace event tracing documentation see :doc:`/trace/events`"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:98
msgid "Reading the ftrace log"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:100
msgid ""
"The ``trace`` file can be read just like any other file (``cat``, ``tail``, "
"``head``, ``vim``, etc.), the size of the file is limited by the "
"``buffer_size_kb`` (``echo 1000 > buffer_size_kb``). The :ref:`trace/ftrace:"
"trace_pipe` will behave similarly to the ``trace`` file, but whenever you "
"read from the file the content is consumed."
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:107
msgid "Kernelshark"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:109
msgid ""
"A GUI interface to visualize the traces as a graph and list view from the "
"output of the `trace-cmd <https://git.kernel.org/pub/scm/utils/trace-cmd/"
"trace-cmd.git/>`__ application."
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:113
msgid ""
"For the full documentation see `<https://kernelshark.org/Documentation."
"html>`__"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:116
msgid "Perf & alternatives"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:118
msgid ""
"The tools mentioned above provide ways to inspect kernel code, results, "
"variable values, etc. Sometimes you have to find out first where to look and "
"for those cases, a box of performance tracking tools can help you to frame "
"the issue."
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:124
msgid "Why should you do a performance analysis?"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:126
msgid "A performance analysis is a good first step when among other reasons:"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:128
msgid "you cannot define the issue"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:129
msgid "you do not know where it occurs"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:130
msgid ""
"the running system should not be interrupted or it is a remote system, where "
"you cannot install a new module/kernel"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:134
msgid "How to do a simple analysis with linux tools?"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:136
msgid ""
"For the start of a performance analysis, you can start with the usual tools "
"like:"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:139
msgid ""
"``top`` / ``htop`` / ``atop`` (*get an overview of the system load, see "
"spikes on specific processes*)"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:141
msgid "``mpstat -P ALL`` (*look at the load distribution among CPUs*)"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:142
msgid ""
"``iostat -x`` (*observe input and output devices utilization and "
"performance*)"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:143
msgid "``vmstat`` (*overview of memory usage on the system*)"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:144
msgid ""
"``pidstat`` (*similar to* ``vmstat`` *but per process, to dial it down to "
"the target*)"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:146
msgid ""
"``strace -tp $PID`` (*once you know the process, you can figure out how it "
"communicates with the Kernel*)"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:149
msgid "These should help to narrow down the areas to look at sufficiently."
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:152
msgid "Diving deeper with perf"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:154
msgid ""
"The **perf** tool provides a series of metrics and events to further dial "
"down on issues."
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:157
msgid "Prerequisite: build or install perf on your system"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:159
msgid ""
"Gather statistics data for finding all files starting with ``gcc`` in ``/"
"usr``::"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:186
msgid ""
"The availability of events and metrics depends on the system you are running."
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:188
msgid ""
"For the full documentation see `<https://perf.wiki.kernel.org/index.php/"
"Main_Page>`__"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:192
msgid "Perfetto"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:194
msgid ""
"A set of tools to measure and analyze how well applications and systems "
"perform. You can use it to:"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:197
msgid "identify bottlenecks"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:198
msgid "optimize code"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:199
msgid "make software run faster and more efficiently."
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:201
msgid "**What is the difference between perfetto and perf?**"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:203
msgid ""
"perf is tool as part of and specialized for the Linux Kernel and has CLI "
"user interface."
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:205
msgid ""
"perfetto cross-platform performance analysis stack, has extended "
"functionality into userspace and provides a WEB user interface."
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:208
msgid "For the full documentation see `<https://perfetto.dev/docs/>`__"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:211
msgid "Kernel panic analysis tools"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:213
msgid ""
"To capture the crash dump please use ``Kdump`` & ``Kexec``. Below you can "
"find some advice for analysing the data."
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:216
msgid "For the full documentation see the :doc:`/admin-guide/kdump/kdump`"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:218
msgid ""
"In order to find the corresponding line in the code you can use `faddr2line "
"<https://elixir.bootlin.com/linux/v6.11.6/source/scripts/faddr2line>`__; "
"note that you need to enable ``CONFIG_DEBUG_INFO`` for that to work."
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:222
msgid ""
"An alternative to using ``faddr2line`` is the use of ``objdump`` (and its "
"derivatives for the different platforms like ``aarch64-linux-gnu-objdump``). "
"Take this line as an example:"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:226
msgid "``[  +0.000240]  rkvdec_device_run+0x50/0x138 [rockchip_vdec]``."
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:228
msgid "We can find the corresponding line of code by executing::"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:264
msgid "Meaning, in this line from the crash dump::"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:268
msgid ""
"I can take the ``0x50`` as offset, which I have to add to the base address "
"of the corresponding function, which I find in this line::"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:273
msgid ""
"The result of ``0xac8 + 0x50 = 0xb18`` And when I search for that address "
"within the function I get the following line::"
msgstr ""

#: ../../../process/debugging/userspace_debugging_guide.rst:280
msgid "**Copyright** ©2024 : Collabora"
msgstr ""
