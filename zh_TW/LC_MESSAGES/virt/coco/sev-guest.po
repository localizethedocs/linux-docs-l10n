# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../virt/coco/sev-guest.rst:5
msgid "The Definitive SEV Guest API Documentation"
msgstr ""

#: ../../../virt/coco/sev-guest.rst:8
msgid "1. General description"
msgstr ""

#: ../../../virt/coco/sev-guest.rst:10
msgid ""
"The SEV API is a set of ioctls that are used by the guest or hypervisor to "
"get or set a certain aspect of the SEV virtual machine. The ioctls belong to "
"the following classes:"
msgstr ""

#: ../../../virt/coco/sev-guest.rst:14
msgid ""
"Hypervisor ioctls: These query and set global attributes which affect the "
"whole SEV firmware.  These ioctl are used by platform provisioning tools."
msgstr ""

#: ../../../virt/coco/sev-guest.rst:17
msgid ""
"Guest ioctls: These query and set attributes of the SEV virtual machine."
msgstr ""

#: ../../../virt/coco/sev-guest.rst:20
msgid "2. API description"
msgstr ""

#: ../../../virt/coco/sev-guest.rst:22
msgid ""
"This section describes ioctls that is used for querying the SEV guest report "
"from the SEV firmware. For each ioctl, the following information is provided "
"along with a description:"
msgstr ""

#: ../../../virt/coco/sev-guest.rst:26
msgid "Technology:"
msgstr ""

#: ../../../virt/coco/sev-guest.rst:27
msgid "which SEV technology provides this ioctl. SEV, SEV-ES, SEV-SNP or all."
msgstr ""

#: ../../../virt/coco/sev-guest.rst:29
msgid "Type:"
msgstr ""

#: ../../../virt/coco/sev-guest.rst:30
msgid ""
"hypervisor or guest. The ioctl can be used inside the guest or the "
"hypervisor."
msgstr ""

#: ../../../virt/coco/sev-guest.rst:33
msgid "Parameters:"
msgstr ""

#: ../../../virt/coco/sev-guest.rst:34
msgid "what parameters are accepted by the ioctl."
msgstr ""

#: ../../../virt/coco/sev-guest.rst:36
msgid "Returns:"
msgstr ""

#: ../../../virt/coco/sev-guest.rst:37
msgid ""
"the return value.  General error numbers (-ENOMEM, -EINVAL) are not "
"detailed, but errors with specific meanings are."
msgstr ""

#: ../../../virt/coco/sev-guest.rst:40
msgid ""
"The guest ioctl should be issued on a file descriptor of the /dev/sev-guest "
"device.  The ioctl accepts struct snp_user_guest_request. The input and "
"output structure is specified through the req_data and resp_data field "
"respectively. If the ioctl fails to execute due to a firmware error, then "
"the fw_error code will be set, otherwise fw_error will be set to -1."
msgstr ""

#: ../../../virt/coco/sev-guest.rst:46
msgid ""
"The firmware checks that the message sequence counter is one greater than "
"the guests message sequence counter. If guest driver fails to increment "
"message counter (e.g. counter overflow), then -EIO will be returned."
msgstr ""

#: ../../../virt/coco/sev-guest.rst:70
msgid ""
"The host ioctls are issued to a file descriptor of the /dev/sev device. The "
"ioctl accepts the command ID/input structure documented below."
msgstr ""

#: ../../../virt/coco/sev-guest.rst:88
msgid "2.1 SNP_GET_REPORT"
msgstr ""

#: ../../../virt/coco/sev-guest.rst:0
msgid "Technology"
msgstr ""

#: ../../../virt/coco/sev-guest.rst:90 ../../../virt/coco/sev-guest.rst:105
#: ../../../virt/coco/sev-guest.rst:124 ../../../virt/coco/sev-guest.rst:146
#: ../../../virt/coco/sev-guest.rst:157 ../../../virt/coco/sev-guest.rst:168
#: ../../../virt/coco/sev-guest.rst:181
msgid "sev-snp"
msgstr ""

#: ../../../virt/coco/sev-guest.rst:0
msgid "Type"
msgstr ""

#: ../../../virt/coco/sev-guest.rst:91 ../../../virt/coco/sev-guest.rst:106
#: ../../../virt/coco/sev-guest.rst:125
msgid "guest ioctl"
msgstr ""

#: ../../../virt/coco/sev-guest.rst:0
msgid "Parameters (in)"
msgstr ""

#: ../../../virt/coco/sev-guest.rst:92
msgid "struct snp_report_req"
msgstr ""

#: ../../../virt/coco/sev-guest.rst:0
msgid "Returns (out)"
msgstr ""

#: ../../../virt/coco/sev-guest.rst:93 ../../../virt/coco/sev-guest.rst:127
msgid "struct snp_report_resp on success, -negative on error"
msgstr ""

#: ../../../virt/coco/sev-guest.rst:95
msgid ""
"The SNP_GET_REPORT ioctl can be used to query the attestation report from "
"the SEV-SNP firmware. The ioctl uses the SNP_GUEST_REQUEST (MSG_REPORT_REQ) "
"command provided by the SEV-SNP firmware to query the attestation report."
msgstr ""

#: ../../../virt/coco/sev-guest.rst:99
msgid ""
"On success, the snp_report_resp.data will contains the report. The report "
"contain the format described in the SEV-SNP specification. See the SEV-SNP "
"specification for further details."
msgstr ""

#: ../../../virt/coco/sev-guest.rst:104
msgid "2.2 SNP_GET_DERIVED_KEY"
msgstr ""

#: ../../../virt/coco/sev-guest.rst:107
msgid "struct snp_derived_key_req"
msgstr ""

#: ../../../virt/coco/sev-guest.rst:108
msgid "struct snp_derived_key_resp on success, -negative on error"
msgstr ""

#: ../../../virt/coco/sev-guest.rst:110
msgid ""
"The SNP_GET_DERIVED_KEY ioctl can be used to get a key derive from a root "
"key. The derived key can be used by the guest for any purpose, such as "
"sealing keys or communicating with external entities."
msgstr ""

#: ../../../virt/coco/sev-guest.rst:114
msgid ""
"The ioctl uses the SNP_GUEST_REQUEST (MSG_KEY_REQ) command provided by the "
"SEV-SNP firmware to derive the key. See SEV-SNP specification for further "
"details on the various fields passed in the key derivation request."
msgstr ""

#: ../../../virt/coco/sev-guest.rst:118
msgid ""
"On success, the snp_derived_key_resp.data contains the derived key value. "
"See the SEV-SNP specification for further details."
msgstr ""

#: ../../../virt/coco/sev-guest.rst:123
msgid "2.3 SNP_GET_EXT_REPORT"
msgstr ""

#: ../../../virt/coco/sev-guest.rst:0
msgid "Parameters (in/out)"
msgstr ""

#: ../../../virt/coco/sev-guest.rst:126
msgid "struct snp_ext_report_req"
msgstr ""

#: ../../../virt/coco/sev-guest.rst:129
msgid ""
"The SNP_GET_EXT_REPORT ioctl is similar to the SNP_GET_REPORT. The "
"difference is related to the additional certificate data that is returned "
"with the report. The certificate data returned is being provided by the "
"hypervisor through the SNP_SET_EXT_CONFIG."
msgstr ""

#: ../../../virt/coco/sev-guest.rst:134
msgid ""
"The ioctl uses the SNP_GUEST_REQUEST (MSG_REPORT_REQ) command provided by "
"the SEV-SNP firmware to get the attestation report."
msgstr ""

#: ../../../virt/coco/sev-guest.rst:137
msgid ""
"On success, the snp_ext_report_resp.data will contain the attestation report "
"and snp_ext_report_req.certs_address will contain the certificate blob. If "
"the length of the blob is smaller than expected then snp_ext_report_req."
"certs_len will be updated with the expected value."
msgstr ""

#: ../../../virt/coco/sev-guest.rst:142
msgid ""
"See GHCB specification for further detail on how to parse the certificate "
"blob."
msgstr ""

#: ../../../virt/coco/sev-guest.rst:145
msgid "2.4 SNP_PLATFORM_STATUS"
msgstr ""

#: ../../../virt/coco/sev-guest.rst:147 ../../../virt/coco/sev-guest.rst:158
#: ../../../virt/coco/sev-guest.rst:169 ../../../virt/coco/sev-guest.rst:182
msgid "hypervisor ioctl cmd"
msgstr ""

#: ../../../virt/coco/sev-guest.rst:0
msgid "Parameters (out)"
msgstr ""

#: ../../../virt/coco/sev-guest.rst:148
msgid "struct sev_user_data_snp_status"
msgstr ""

#: ../../../virt/coco/sev-guest.rst:149 ../../../virt/coco/sev-guest.rst:159
#: ../../../virt/coco/sev-guest.rst:171 ../../../virt/coco/sev-guest.rst:184
msgid "0 on success, -negative on error"
msgstr ""

#: ../../../virt/coco/sev-guest.rst:151
msgid ""
"The SNP_PLATFORM_STATUS command is used to query the SNP platform status. "
"The status includes API major, minor version and more. See the SEV-SNP "
"specification for further details."
msgstr ""

#: ../../../virt/coco/sev-guest.rst:156
msgid "2.5 SNP_COMMIT"
msgstr ""

#: ../../../virt/coco/sev-guest.rst:161
msgid ""
"SNP_COMMIT is used to commit the currently installed firmware using the SEV-"
"SNP firmware SNP_COMMIT command. This prevents roll-back to a previously "
"committed firmware version. This will also update the reported TCB to match "
"that of the currently installed firmware."
msgstr ""

#: ../../../virt/coco/sev-guest.rst:167
msgid "2.6 SNP_SET_CONFIG"
msgstr ""

#: ../../../virt/coco/sev-guest.rst:170
msgid "struct sev_user_data_snp_config"
msgstr ""

#: ../../../virt/coco/sev-guest.rst:173
msgid ""
"SNP_SET_CONFIG is used to set the system-wide configuration such as reported "
"TCB version in the attestation report. The command is similar to SNP_CONFIG "
"command defined in the SEV-SNP spec. The current values of the firmware "
"parameters affected by this command can be queried via SNP_PLATFORM_STATUS."
msgstr ""

#: ../../../virt/coco/sev-guest.rst:180
msgid "2.7 SNP_VLEK_LOAD"
msgstr ""

#: ../../../virt/coco/sev-guest.rst:183
msgid "struct sev_user_data_snp_vlek_load"
msgstr ""

#: ../../../virt/coco/sev-guest.rst:186
msgid ""
"When requesting an attestation report a guest is able to specify whether it "
"wants SNP firmware to sign the report using either a Versioned Chip "
"Endorsement Key (VCEK), which is derived from chip-unique secrets, or a "
"Versioned Loaded Endorsement Key (VLEK) which is obtained from an AMD Key "
"Derivation Service (KDS) and derived from seeds allocated to enrolled cloud "
"service providers."
msgstr ""

#: ../../../virt/coco/sev-guest.rst:193
msgid ""
"In the case of VLEK keys, the SNP_VLEK_LOAD SNP command is used to load them "
"into the system after obtaining them from the KDS, and corresponds closely "
"to the SNP_VLEK_LOAD firmware command specified in the SEV-SNP spec."
msgstr ""

#: ../../../virt/coco/sev-guest.rst:199
msgid "3. SEV-SNP CPUID Enforcement"
msgstr ""

#: ../../../virt/coco/sev-guest.rst:201
msgid ""
"SEV-SNP guests can access a special page that contains a table of CPUID "
"values that have been validated by the PSP as part of the SNP_LAUNCH_UPDATE "
"firmware command. It provides the following assurances regarding the "
"validity of CPUID values:"
msgstr ""

#: ../../../virt/coco/sev-guest.rst:206
msgid ""
"Its address is obtained via bootloader/firmware (via CC blob), and those "
"binaries will be measured as part of the SEV-SNP attestation report."
msgstr ""

#: ../../../virt/coco/sev-guest.rst:208
msgid ""
"Its initial state will be encrypted/pvalidated, so attempts to modify it "
"during run-time will result in garbage being written, or #VC exceptions "
"being generated due to changes in validation state if the hypervisor tries "
"to swap the backing page."
msgstr ""

#: ../../../virt/coco/sev-guest.rst:212
msgid ""
"Attempts to bypass PSP checks by the hypervisor by using a normal page, or a "
"non-CPUID encrypted page will change the measurement provided by the SEV-SNP "
"attestation report."
msgstr ""

#: ../../../virt/coco/sev-guest.rst:215
msgid ""
"The CPUID page contents are *not* measured, but attempts to modify the "
"expected contents of a CPUID page as part of guest initialization will be "
"gated by the PSP CPUID enforcement policy checks performed on the page "
"during SNP_LAUNCH_UPDATE, and noticeable later if the guest owner implements "
"their own checks of the CPUID values."
msgstr ""

#: ../../../virt/coco/sev-guest.rst:221
msgid ""
"It is important to note that this last assurance is only useful if the "
"kernel has taken care to make use of the SEV-SNP CPUID throughout all stages "
"of boot. Otherwise, guest owner attestation provides no assurance that the "
"kernel wasn't fed incorrect values at some point during boot."
msgstr ""

#: ../../../virt/coco/sev-guest.rst:227
msgid "4. SEV Guest Driver Communication Key"
msgstr ""

#: ../../../virt/coco/sev-guest.rst:229
msgid ""
"Communication between an SEV guest and the SEV firmware in the AMD Secure "
"Processor (ASP, aka PSP) is protected by a VM Platform Communication Key "
"(VMPCK). By default, the sev-guest driver uses the VMPCK associated with the "
"VM Privilege Level (VMPL) at which the guest is running. Should this key be "
"wiped by the sev-guest driver (see the driver for reasons why a VMPCK can be "
"wiped), a different key can be used by reloading the sev-guest driver and "
"specifying the desired key using the vmpck_id module parameter."
msgstr ""

#: ../../../virt/coco/sev-guest.rst:239
msgid "Reference"
msgstr ""

#: ../../../virt/coco/sev-guest.rst:241
msgid "SEV-SNP and GHCB specification: developer.amd.com/sev"
msgstr ""

#: ../../../virt/coco/sev-guest.rst:243
msgid ""
"The driver is based on SEV-SNP firmware spec 0.9 and GHCB spec version 2.0."
msgstr ""
