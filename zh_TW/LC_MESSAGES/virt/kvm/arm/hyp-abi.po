# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../virt/kvm/arm/hyp-abi.rst:5
msgid "Internal ABI between the kernel and HYP"
msgstr ""

#: ../../../virt/kvm/arm/hyp-abi.rst:7
msgid ""
"This file documents the interaction between the Linux kernel and the "
"hypervisor layer when running Linux as a hypervisor (for example KVM). It "
"doesn't cover the interaction of the kernel with the hypervisor when running "
"as a guest (under Xen, KVM or any other hypervisor), or any hypervisor-"
"specific interaction when the kernel is used as a host."
msgstr ""

#: ../../../virt/kvm/arm/hyp-abi.rst:14
msgid ""
"Note: KVM/arm has been removed from the kernel. The API described here is "
"still valid though, as it allows the kernel to kexec when booted at HYP. It "
"can also be used by a hypervisor other than KVM if necessary."
msgstr ""

#: ../../../virt/kvm/arm/hyp-abi.rst:19
msgid ""
"On arm and arm64 (without VHE), the kernel doesn't run in hypervisor mode, "
"but still needs to interact with it, allowing a built-in hypervisor to be "
"either installed or torn down."
msgstr ""

#: ../../../virt/kvm/arm/hyp-abi.rst:23
msgid ""
"In order to achieve this, the kernel must be booted at HYP (arm) or EL2 "
"(arm64), allowing it to install a set of stubs before dropping to SVC/EL1. "
"These stubs are accessible by using a 'hvc #0' instruction, and only act on "
"individual CPUs."
msgstr ""

#: ../../../virt/kvm/arm/hyp-abi.rst:28
msgid ""
"Unless specified otherwise, any built-in hypervisor must implement these "
"functions (see arch/arm{,64}/include/asm/virt.h):"
msgstr ""

#: ../../../virt/kvm/arm/hyp-abi.rst:36
msgid ""
"Set HVBAR/VBAR_EL2 to 'vectors' to enable a hypervisor. 'vectors' must be a "
"physical address, and respect the alignment requirements of the "
"architecture. Only implemented by the initial stubs, not by Linux "
"hypervisors."
msgstr ""

#: ../../../virt/kvm/arm/hyp-abi.rst:45
msgid ""
"Turn HYP/EL2 MMU off, and reset HVBAR/VBAR_EL2 to the initials stubs' "
"exception vector value. This effectively disables an existing hypervisor."
msgstr ""

#: ../../../virt/kvm/arm/hyp-abi.rst:57
msgid ""
"Mask all exceptions, disable the MMU, clear I+D bits, move the arguments "
"into place (arm64 only), and jump to the restart address while at HYP/EL2. "
"This hypercall is not expected to return to its caller."
msgstr ""

#: ../../../virt/kvm/arm/hyp-abi.rst:65
msgid ""
"Finish configuring EL2 depending on the command-line options, including an "
"attempt to upgrade the kernel's exception level from EL1 to EL2 by enabling "
"the VHE mode. This is conditioned by the CPU supporting VHE, the EL2 MMU "
"being off, and VHE not being disabled by any other means (command line "
"option, for example)."
msgstr ""

#: ../../../virt/kvm/arm/hyp-abi.rst:71
msgid ""
"Any other value of r0/x0 triggers a hypervisor-specific handling, which is "
"not documented here."
msgstr ""

#: ../../../virt/kvm/arm/hyp-abi.rst:74
msgid ""
"The return value of a stub hypercall is held by r0/x0, and is 0 on success, "
"and HVC_STUB_ERR on error. A stub hypercall is allowed to clobber any of the "
"caller-saved registers (x0-x18 on arm64, r0-r3 and ip on arm). It is thus "
"recommended to use a function call to perform the hypercall."
msgstr ""
