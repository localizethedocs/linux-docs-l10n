# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../sound/designs/midi-2.0.rst:3
msgid "MIDI 2.0 on Linux"
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:6
msgid "General"
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:8
msgid ""
"MIDI 2.0 is an extended protocol for providing higher resolutions and more "
"fine controls over the legacy MIDI 1.0.  The fundamental changes introduced "
"for supporting MIDI 2.0 are:"
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:12
msgid "Support of Universal MIDI Packet (UMP)"
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:13
msgid "Support of MIDI 2.0 protocol messages"
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:14
msgid "Transparent conversions between UMP and legacy MIDI 1.0 byte stream"
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:15
msgid "MIDI-CI for property and profile configurations"
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:17
msgid ""
"UMP is a new container format to hold all MIDI protocol 1.0 and MIDI 2.0 "
"protocol messages.  Unlike the former byte stream, it's 32bit aligned, and "
"each message can be put in a single packet.  UMP can send the events up to "
"16 \"UMP Groups\", where each UMP Group contain up to 16 MIDI channels."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:23
msgid ""
"MIDI 2.0 protocol is an extended protocol to achieve the higher resolution "
"and more controls over the old MIDI 1.0 protocol."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:26
msgid ""
"MIDI-CI is a high-level protocol that can talk with the MIDI device for the "
"flexible profiles and configurations.  It's represented in the form of "
"special SysEx."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:30
msgid ""
"For Linux implementations, the kernel supports the UMP transport and the "
"encoding/decoding of MIDI protocols on UMP, while MIDI-CI is supported in "
"user-space over the standard SysEx."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:34
msgid ""
"As of this writing, only USB MIDI device supports the UMP and Linux 2.0 "
"natively.  The UMP support itself is pretty generic, hence it could be used "
"by other transport layers, although it could be implemented differently (e."
"g. as a ALSA sequencer client), too."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:39
msgid ""
"The access to UMP devices are provided in two ways: the access via rawmidi "
"device and the access via ALSA sequencer API."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:42
msgid ""
"ALSA sequencer API was extended to allow the payload of UMP packets. It's "
"allowed to connect freely between MIDI 1.0 and MIDI 2.0 sequencer clients, "
"and the events are converted transparently."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:48
msgid "Kernel Configuration"
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:50
msgid ""
"The following new configs are added for supporting MIDI 2.0: "
"`CONFIG_SND_UMP`, `CONFIG_SND_UMP_LEGACY_RAWMIDI`, `CONFIG_SND_SEQ_UMP`, "
"`CONFIG_SND_SEQ_UMP_CLIENT`, and `CONFIG_SND_USB_AUDIO_MIDI_V2`.  The first "
"visible one is `CONFIG_SND_USB_AUDIO_MIDI_V2`, and when you choose it (to "
"set `=y`), the core support for UMP (`CONFIG_SND_UMP`) and the sequencer "
"binding (`CONFIG_SND_SEQ_UMP_CLIENT`) will be automatically selected."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:58
msgid ""
"Additionally, `CONFIG_SND_UMP_LEGACY_RAWMIDI=y` will enable the support for "
"the legacy raw MIDI device for UMP Endpoints."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:63
msgid "Rawmidi Device with USB MIDI 2.0"
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:65
msgid ""
"When a device supports MIDI 2.0, the USB-audio driver probes and uses the "
"MIDI 2.0 interface (that is found always at the altset 1) as default instead "
"of the MIDI 1.0 interface (at altset 0).  You can switch back to the binding "
"with the old MIDI 1.0 interface by passing `midi2_enable=0` option to snd-"
"usb-audio driver module, too."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:71
msgid ""
"The USB audio driver tries to query the UMP Endpoint and UMP Function Block "
"information that are provided since UMP v1.1, and builds up the topology "
"based on those information.  When the device is older and doesn't respond to "
"the new UMP inquiries, the driver falls back and builds the topology based "
"on Group Terminal Block (GTB) information from the USB descriptor.  Some "
"device might be screwed up by the unexpected UMP command; in such a case, "
"pass `midi2_ump_probe=0` option to snd-usb-audio driver for skipping the UMP "
"v1.1 inquiries."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:80
msgid ""
"When the MIDI 2.0 device is probed, the kernel creates a rawmidi device for "
"each UMP Endpoint of the device.  Its device name is `/dev/snd/umpC*D*` and "
"different from the standard rawmidi device name `/dev/snd/midiC*D*` for MIDI "
"1.0, in order to avoid confusing the legacy applications accessing "
"mistakenly to UMP devices."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:86
msgid ""
"You can read and write UMP packet data directly from/to this UMP rawmidi "
"device.  For example, reading via `hexdump` like below will show the "
"incoming UMP packets of the card 0 device 0 in the hex format::"
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:94
msgid ""
"Unlike the MIDI 1.0 byte stream, UMP is a 32bit packet, and the size for "
"reading or writing the device is also aligned to 32bit (which is 4 bytes)."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:98
msgid ""
"The 32-bit words in the UMP packet payload are always in CPU native "
"endianness.  Transport drivers are responsible to convert UMP words from / "
"to system endianness to required transport endianness / byte order."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:103
msgid ""
"When `CONFIG_SND_UMP_LEGACY_RAWMIDI` is set, the driver creates another "
"standard raw MIDI device additionally as `/dev/snd/midiC*D*`. This contains "
"16 substreams, and each substream corresponds to a (0-based) UMP Group.  "
"Legacy applications can access to the specified group via each substream in "
"MIDI 1.0 byte stream format.  With the ALSA rawmidi API, you can open the "
"arbitrary substream, while just opening `/dev/snd/midiC*D*` will end up with "
"opening the first substream."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:112
msgid ""
"Each UMP Endpoint can provide the additional information, constructed from "
"the information inquired via UMP 1.1 Stream messages or USB MIDI 2.0 "
"descriptors.  And a UMP Endpoint may contain one or more UMP Blocks, where "
"UMP Block is an abstraction introduced in the ALSA UMP implementations to "
"represent the associations among UMP Groups.  UMP Block corresponds to "
"Function Block in UMP 1.1 specification.  When UMP 1.1 Function Block "
"information isn't available, it's filled partially from Group Terminal Block "
"(GTB) as defined in USB MIDI 2.0 specifications."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:122
msgid ""
"The information of UMP Endpoints and UMP Blocks are found in the proc file `/"
"proc/asound/card*/midi*`.  For example::"
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:149
msgid ""
"Note that `Groups` field shown in the proc file above indicates the 1-based "
"UMP Group numbers (from-to)."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:152
msgid ""
"Those additional UMP Endpoint and UMP Block information can be obtained via "
"the new ioctls `SNDRV_UMP_IOCTL_ENDPOINT_INFO` and "
"`SNDRV_UMP_IOCTL_BLOCK_INFO`, respectively."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:156
msgid ""
"The rawmidi name and the UMP Endpoint name are usually identical, and in the "
"case of USB MIDI, it's taken from `iInterface` of the corresponding USB MIDI "
"interface descriptor.  If it's not provided, it's copied from `iProduct` of "
"the USB device descriptor as a fallback."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:162
msgid ""
"The Endpoint Product ID is a string field and supposed to be unique. It's "
"copied from `iSerialNumber` of the device for USB MIDI."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:165
msgid ""
"The protocol capabilities and the actual protocol bits are defined in "
"`asound.h`."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:170
msgid "ALSA Sequencer with USB MIDI 2.0"
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:172
msgid ""
"In addition to the rawmidi interfaces, ALSA sequencer interface supports the "
"new UMP MIDI 2.0 device, too.  Now, each ALSA sequencer client may set its "
"MIDI version (0, 1 or 2) to declare itself being either the legacy, UMP MIDI "
"1.0 or UMP MIDI 2.0 device, respectively. The first, legacy client is the "
"one that sends/receives the old sequencer event as was.  Meanwhile, UMP MIDI "
"1.0 and 2.0 clients send and receive in the extended event record for UMP.  "
"The MIDI version is seen in the new `midi_version` field of "
"`snd_seq_client_info`."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:181
msgid ""
"A UMP packet can be sent/received in a sequencer event embedded by "
"specifying the new event flag bit `SNDRV_SEQ_EVENT_UMP`.  When this flag is "
"set, the event has 16 byte (128 bit) data payload for holding the UMP "
"packet.  Without the `SNDRV_SEQ_EVENT_UMP` bit flag, the event is treated as "
"a legacy event as it was (with max 12 byte data payload)."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:188
msgid ""
"With `SNDRV_SEQ_EVENT_UMP` flag set, the type field of a UMP sequencer event "
"is ignored (but it should be set to 0 as default)."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:191
msgid ""
"The type of each client can be seen in `/proc/asound/seq/clients`. For "
"example::"
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:213
msgid ""
"Here you can find two types of kernel clients, \"Legacy\" for client 14, and "
"\"UMP MIDI1\" for client 20, which is a USB MIDI 2.0 device. A USB MIDI 2.0 "
"client gives always the port 0 as \"MIDI 2.0\" and the rest ports from 1 for "
"each UMP Group (e.g. port 1 for Group 1). In this example, the device has "
"three active groups (Main, Ext IN and Ext OUT), and those are exposed as "
"sequencer ports from 1 to 3. The \"MIDI 2.0\" port is for a UMP Endpoint, "
"and its difference from other UMP Group ports is that UMP Endpoint port "
"sends the events from the all ports on the device (\"catch-all\"), while "
"each UMP Group port sends only the events from the given UMP Group. Also, "
"UMP groupless messages (such as the UMP message type 0x0f) are sent only to "
"the UMP Endpoint port."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:226
msgid ""
"Note that, although each UMP sequencer client usually creates 16 ports, "
"those ports that don't belong to any UMP Blocks (or belonging to inactive "
"UMP Blocks) are marked as inactive, and they don't appear in the proc "
"outputs.  In the example above, the sequencer ports from 4 to 16 are present "
"but not shown there."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:232
msgid ""
"The proc file above shows the UMP Block information, too.  The same entry "
"(but with more detailed information) is found in the rawmidi proc output."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:236
msgid ""
"When clients are connected between different MIDI versions, the events are "
"translated automatically depending on the client's version, not only between "
"the legacy and the UMP MIDI 1.0/2.0 types, but also between UMP MIDI 1.0 and "
"2.0 types, too.  For example, running `aseqdump` program on the ProtoZOA "
"Main port in the legacy mode will give you the output like::"
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:250
msgid ""
"When you run `aseqdump` in MIDI 2.0 mode, it'll receive the high precision "
"data like::"
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:260
msgid "while the data is automatically converted by ALSA sequencer core."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:264
msgid "Rawmidi API Extensions"
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:266
msgid ""
"The additional UMP Endpoint information can be obtained via the new ioctl "
"`SNDRV_UMP_IOCTL_ENDPOINT_INFO`.  It contains the associated card and device "
"numbers, the bit flags, the protocols, the number of UMP Blocks, the name "
"string of the endpoint, etc."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:271
msgid ""
"The protocols are specified in two field, the protocol capabilities and the "
"current protocol.  Both contain the bit flags specifying the MIDI protocol "
"version (`SNDRV_UMP_EP_INFO_PROTO_MIDI1` or `SNDRV_UMP_EP_INFO_PROTO_MIDI2`) "
"in the upper byte and the jitter reduction timestamp "
"(`SNDRV_UMP_EP_INFO_PROTO_JRTS_TX` and `SNDRV_UMP_EP_INFO_PROTO_JRTS_RX`) in "
"the lower byte."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:278
msgid ""
"A UMP Endpoint may contain up to 32 UMP Blocks, and the number of the "
"currently assigned blocks are shown in the Endpoint information."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:281
msgid ""
"Each UMP Block information can be obtained via another new ioctl "
"`SNDRV_UMP_IOCTL_BLOCK_INFO`.  The block ID number (0-based) has to be "
"passed for the block to query.  The received data contains the associated "
"the direction of the block, the first associated group ID (0-based) and the "
"number of groups, the name string of the block, etc."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:288
msgid ""
"The direction is either `SNDRV_UMP_DIR_INPUT`, `SNDRV_UMP_DIR_OUTPUT` or "
"`SNDRV_UMP_DIR_BIDIRECTION`."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:291
msgid ""
"For the device supports UMP v1.1, the UMP MIDI protocol can be switched via "
"\"Stream Configuration Request\" message (UMP type 0x0f, status 0x05).  When "
"UMP core receives such a message, it updates the UMP EP info and the "
"corresponding sequencer clients as well."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:296
msgid ""
"The legacy rawmidi device number is found in the new `tied_device` field of "
"the rawmidi info. On the other hand, the UMP rawmidi device number is found "
"in `tied_device` field of the legacy rawmidi info, too."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:301
msgid ""
"Each substream of the legacy rawmidi may be enabled / disabled dynamically "
"depending on the UMP FB state. When the selected substream is inactive, it's "
"indicated by the bit 0x10 (`SNDRV_RAWMIDI_INFO_STREAM_INACTIVE`) in the "
"`flags` field of the legacy rawmidi info."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:309
msgid "Control API Extensions"
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:311
msgid ""
"The new ioctl `SNDRV_CTL_IOCTL_UMP_NEXT_DEVICE` is introduced for querying "
"the next UMP rawmidi device, while the existing ioctl "
"`SNDRV_CTL_IOCTL_RAWMIDI_NEXT_DEVICE` queries only the legacy rawmidi "
"devices."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:316
msgid ""
"For setting the subdevice (substream number) to be opened, use the ioctl "
"`SNDRV_CTL_IOCTL_RAWMIDI_PREFER_SUBDEVICE` like the normal rawmidi."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:320
msgid ""
"Two new ioctls `SNDRV_CTL_IOCTL_UMP_ENDPOINT_INFO` and "
"`SNDRV_CTL_IOCTL_UMP_BLOCK_INFO` provide the UMP Endpoint and UMP Block "
"information of the specified UMP device via ALSA control API without opening "
"the actual (UMP) rawmidi device. The `card` field is ignored upon inquiry, "
"always tied with the card of the control interface."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:329
msgid "Sequencer API Extensions"
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:331
msgid ""
"`midi_version` field is added to `snd_seq_client_info` to indicate the "
"current MIDI version (either 0, 1 or 2) of each client. When `midi_version` "
"is 1 or 2, the alignment of read from a UMP sequencer client is also changed "
"from the former 28 bytes to 32 bytes for the extended payload.  The "
"alignment size for the write isn't changed, but each event size may differ "
"depending on the new bit flag below."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:339
msgid ""
"`SNDRV_SEQ_EVENT_UMP` flag bit is added for each sequencer event flags.  "
"When this bit flag is set, the sequencer event is extended to have a larger "
"payload of 16 bytes instead of the legacy 12 bytes, and the event contains "
"the UMP packet in the payload."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:344
msgid ""
"The new sequencer port type bit (`SNDRV_SEQ_PORT_TYPE_MIDI_UMP`) indicates "
"the port being UMP-capable."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:347
msgid ""
"The sequencer ports have new capability bits to indicate the inactive ports "
"(`SNDRV_SEQ_PORT_CAP_INACTIVE`) and the UMP Endpoint port "
"(`SNDRV_SEQ_PORT_CAP_UMP_ENDPOINT`)."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:351
msgid ""
"The event conversion of ALSA sequencer clients can be suppressed the new "
"filter bit `SNDRV_SEQ_FILTER_NO_CONVERT` set to the client info. For "
"example, the kernel pass-through client (`snd-seq-dummy`) sets this flag "
"internally."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:356
msgid ""
"The port information gained the new field `direction` to indicate the "
"direction of the port (either `SNDRV_SEQ_PORT_DIR_INPUT`, "
"`SNDRV_SEQ_PORT_DIR_OUTPUT` or `SNDRV_SEQ_PORT_DIR_BIDIRECTION`)."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:360
msgid ""
"Another additional field for the port information is `ump_group` which "
"specifies the associated UMP Group Number (1-based). When it's non-zero, the "
"UMP group field in the UMP packet updated upon delivery to the specified "
"group (corrected to be 0-based). Each sequencer port is supposed to set this "
"field if it's a port to specific to a certain UMP group."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:367
msgid ""
"Each client may set the additional event filter for UMP Groups in "
"`group_filter` bitmap.  The filter consists of bitmap from 1-based Group "
"numbers.  For example, when the bit 1 is set, messages from Group 1 (i.e. "
"the very first group) are filtered and not delivered. The bit 0 is used for "
"filtering UMP groupless messages."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:373
msgid ""
"Two new ioctls are added for UMP-capable clients: "
"`SNDRV_SEQ_IOCTL_GET_CLIENT_UMP_INFO` and "
"`SNDRV_SEQ_IOCTL_SET_CLIENT_UMP_INFO`.  They are used to get and set either "
"`snd_ump_endpoint_info` or `snd_ump_block_info` data associated with the "
"sequencer client.  The USB MIDI driver provides those information from the "
"underlying UMP rawmidi, while a user-space client may provide its own data "
"via `*_SET` ioctl. For an Endpoint data, pass 0 to the `type` field, while "
"for a Block data, pass the block number + 1 to the `type` field. Setting the "
"data for a kernel client shall result in an error."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:384
msgid ""
"With UMP 1.1, Function Block information may be changed dynamically.  When "
"the update of Function Block is received from the device, ALSA sequencer "
"core changes the corresponding sequencer port name and attributes "
"accordingly, and notifies the changes via the announcement to the ALSA "
"sequencer system port, similarly like the normal port change notification."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:391
msgid ""
"There are two extended event types for notifying the UMP Endpoint and "
"Function Block changes via the system announcement port: type 68 "
"(`SNDRV_SEQ_EVENT_UMP_EP_CHANGE`) and type 69 "
"(`SNDRV_SEQ_EVENT_UMP_BLOCK_CHANGE`). They take the new type, "
"`snd_seq_ev_ump_notify` in the payload, indicating the client number and the "
"FB number that are changed."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:400
msgid "MIDI2 USB Gadget Function Driver"
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:402
msgid ""
"The latest kernel contains the support for USB MIDI 2.0 gadget function "
"driver, which can be used for prototyping and debugging MIDI 2.0 features."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:406
msgid ""
"`CONFIG_USB_GADGET`, `CONFIG_USB_CONFIGFS` and `CONFIG_USB_CONFIGFS_F_MIDI2` "
"need to be enabled for the MIDI2 gadget driver."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:410
msgid ""
"In addition, for using a gadget driver, you need a working UDC driver. In "
"the example below, we use `dummy_hcd` driver (enabled via "
"`CONFIG_USB_DUMMY_HCD`) that is available on PC and VM for debugging "
"purpose.  There are other UDC drivers depending on the platform, and those "
"can be used for a real device, instead, too."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:416
msgid "At first, on a system to run the gadget, load `libcomposite` module::"
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:420
msgid ""
"and you'll have `usb_gadget` subdirectory under configfs space (typically `/"
"sys/kernel/config` on modern OS).  Then create a gadget instance and add "
"configurations there, for example::"
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:442
msgid ""
"At this point, there must be a subdirectory `ep.0`, and that is the "
"configuration for a UMP Endpoint.  You can fill the Endpoint information "
"like::"
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:454
msgid "The default MIDI protocol can be set either 1 or 2::"
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:458
msgid ""
"And, you can find a subdirectory `block.0` under this Endpoint "
"subdirectory.  This defines the Function Block information::"
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:465
msgid "Finally, link the configuration and enable it::"
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:470
msgid ""
"where `dummy_udc.0` is an example case and it differs depending on the "
"system.  You can find the UDC instances in `/sys/class/udc` and pass the "
"found name instead::"
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:477
msgid ""
"Now, the MIDI 2.0 gadget device is enabled, and the gadget host creates a "
"new sound card instance containing a UMP rawmidi device by `f_midi2` driver::"
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:486
msgid ""
"And on the connected host, a similar card should appear, too, but with the "
"card and device names given in the configfs above::"
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:494
msgid "You can play a MIDI file on the gadget side::"
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:498
msgid ""
"and this will appear as an input from a MIDI device on the connected host::"
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:503
msgid ""
"Vice versa, a playback on the connected host will work as an input on the "
"gadget, too."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:506
msgid ""
"Each Function Block may have different direction and UI-hint, specified via "
"`direction` and `ui_hint` attributes. Passing `1` is for input-only, `2` for "
"out-only and `3` for bidirectional (the default value).  For example::"
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:514
msgid ""
"When you need more than one Function Blocks, you can create subdirectories "
"`block.1`, `block.2`, etc dynamically, and configure them in the "
"configuration procedure above before linking. For example, to create a "
"second Function Block for a keyboard::"
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:526
msgid ""
"The `block.*` subdirectories can be removed dynamically, too (except for "
"`block.0` which is persistent)."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:529
msgid ""
"For assigning a Function Block for MIDI 1.0 I/O, set up in `is_midi1` "
"attribute.  1 is for MIDI 1.0, and 2 is for MIDI 1.0 with low speed "
"connection::"
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:535
msgid ""
"For disabling the processing of UMP Stream messages in the gadget driver, "
"pass `0` to `process_ump` attribute in the top-level config::"
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:540
msgid ""
"The MIDI 1.0 interface at altset 0 is supported by the gadget driver, too.  "
"When MIDI 1.0 interface is selected by the connected host, the UMP I/O on "
"the gadget is translated from/to USB MIDI 1.0 packets accordingly while the "
"gadget driver keeps communicating with the user-space over UMP rawmidi."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:546
msgid ""
"MIDI 1.0 ports are set up from the config in each Function Block. For "
"example::"
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:552
msgid ""
"The configuration above will enable the Group 1 (the index 0) for MIDI 1.0 "
"interface.  Note that those groups must be in the groups defined for the "
"Function Block itself."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:556
msgid ""
"The gadget driver supports more than one UMP Endpoints, too. Similarly like "
"the Function Blocks, you can create a new subdirectory `ep.1` (but under the "
"card top-level config) to enable a new Endpoint::"
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:562
msgid ""
"and create a new Function Block there.  For example, to create 4 Groups for "
"the Function Block of this new Endpoint::"
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:568
msgid ""
"Now, you'll have 4 rawmidi devices in total: the first two are UMP rawmidi "
"devices for Endpoint 0 and Endpoint 1, and other two for the legacy MIDI 1.0 "
"rawmidi devices corresponding to both EP 0 and EP 1."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:572
msgid ""
"The current altsetting on the gadget can be informed via a control element "
"\"Operation Mode\" with `RAWMIDI` iface.  e.g. you can read it via `amixer` "
"program running on the gadget host like::"
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:580
msgid ""
"The value (shown in the second returned line with `: values=`) indicates 1 "
"for MIDI 1.0 (altset 0), 2 for MIDI 2.0 (altset 1) and 0 for unset."
msgstr ""

#: ../../../sound/designs/midi-2.0.rst:584
msgid "As of now, the configurations can't be changed after binding."
msgstr ""
