# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../sound/designs/channel-mapping-api.rst:3
msgid "ALSA PCM channel-mapping API"
msgstr ""

#: ../../../sound/designs/channel-mapping-api.rst:5
msgid "Takashi Iwai <tiwai@suse.de>"
msgstr ""

#: ../../../sound/designs/channel-mapping-api.rst:8
msgid "General"
msgstr ""

#: ../../../sound/designs/channel-mapping-api.rst:10
msgid ""
"The channel mapping API allows user to query the possible channel maps and "
"the current channel map, also optionally to modify the channel map of the "
"current stream."
msgstr ""

#: ../../../sound/designs/channel-mapping-api.rst:14
msgid ""
"A channel map is an array of position for each PCM channel. Typically, a "
"stereo PCM stream has a channel map of ``{ front_left, front_right }`` while "
"a 4.0 surround PCM stream has a channel map of ``{ front left, front right, "
"rear left, rear right }.``"
msgstr ""

#: ../../../sound/designs/channel-mapping-api.rst:20
msgid ""
"The problem, so far, was that we had no standard channel map explicitly, and "
"applications had no way to know which channel corresponds to which (speaker) "
"position.  Thus, applications applied wrong channels for 5.1 outputs, and "
"you hear suddenly strange sound from rear.  Or, some devices secretly assume "
"that center/LFE is the third/fourth channels while others that C/LFE as "
"5th/6th channels."
msgstr ""

#: ../../../sound/designs/channel-mapping-api.rst:27
msgid ""
"Also, some devices such as HDMI are configurable for different speaker "
"positions even with the same number of total channels.  However, there was "
"no way to specify this because of lack of channel map specification.  These "
"are the main motivations for the new channel mapping API."
msgstr ""

#: ../../../sound/designs/channel-mapping-api.rst:35
msgid "Design"
msgstr ""

#: ../../../sound/designs/channel-mapping-api.rst:37
msgid ""
"Actually, \"the channel mapping API\" doesn't introduce anything new in the "
"kernel/user-space ABI perspective.  It uses only the existing control "
"element features."
msgstr ""

#: ../../../sound/designs/channel-mapping-api.rst:41
msgid ""
"As a ground design, each PCM substream may contain a control element "
"providing the channel mapping information and configuration.  This element "
"is specified by:"
msgstr ""

#: ../../../sound/designs/channel-mapping-api.rst:45
msgid "iface = SNDRV_CTL_ELEM_IFACE_PCM"
msgstr ""

#: ../../../sound/designs/channel-mapping-api.rst:46
msgid "name = \"Playback Channel Map\" or \"Capture Channel Map\""
msgstr ""

#: ../../../sound/designs/channel-mapping-api.rst:47
msgid "device = the same device number for the assigned PCM substream"
msgstr ""

#: ../../../sound/designs/channel-mapping-api.rst:48
msgid "index = the same index number for the assigned PCM substream"
msgstr ""

#: ../../../sound/designs/channel-mapping-api.rst:50
msgid "Note the name is different depending on the PCM substream direction."
msgstr ""

#: ../../../sound/designs/channel-mapping-api.rst:52
msgid ""
"Each control element provides at least the TLV read operation and the read "
"operation.  Optionally, the write operation can be provided to allow user to "
"change the channel map dynamically."
msgstr ""

#: ../../../sound/designs/channel-mapping-api.rst:57
msgid "TLV"
msgstr ""

#: ../../../sound/designs/channel-mapping-api.rst:59
msgid ""
"The TLV operation gives the list of available channel maps.  A list item of "
"a channel map is usually a TLV of ``type data-bytes ch0 ch1 ch2...`` where "
"type is the TLV type value, the second argument is the total bytes (not the "
"numbers) of channel values, and the rest are the position value for each "
"channel."
msgstr ""

#: ../../../sound/designs/channel-mapping-api.rst:66
msgid ""
"As a TLV type, either ``SNDRV_CTL_TLVT_CHMAP_FIXED``, "
"``SNDRV_CTL_TLV_CHMAP_VAR`` or ``SNDRV_CTL_TLVT_CHMAP_PAIRED`` can be used. "
"The ``_FIXED`` type is for a channel map with the fixed channel position "
"while the latter two are for flexible channel positions. ``_VAR`` type is "
"for a channel map where all channels are freely swappable and ``_PAIRED`` "
"type is where pair-wise channels are swappable.  For example, when you have "
"{FL/FR/RL/RR} channel map, ``_PAIRED`` type would allow you to swap only {RL/"
"RR/FL/FR} while ``_VAR`` type would allow even swapping FL and RR."
msgstr ""

#: ../../../sound/designs/channel-mapping-api.rst:76
msgid "These new TLV types are defined in ``sound/tlv.h``."
msgstr ""

#: ../../../sound/designs/channel-mapping-api.rst:78
msgid ""
"The available channel position values are defined in ``sound/asound.h``, "
"here is a cut:"
msgstr ""

#: ../../../sound/designs/channel-mapping-api.rst:118
msgid ""
"When a PCM stream can provide more than one channel map, you can provide "
"multiple channel maps in a TLV container type.  The TLV data to be returned "
"will contain such as: ::"
msgstr ""

#: ../../../sound/designs/channel-mapping-api.rst:129
msgid ""
"The channel position is provided in LSB 16bits.  The upper bits are used for "
"bit flags. ::"
msgstr ""

#: ../../../sound/designs/channel-mapping-api.rst:137
msgid ""
"``SNDRV_CHMAP_PHASE_INVERSE`` indicates the channel is phase inverted, (thus "
"summing left and right channels would result in almost silence). Some "
"digital mic devices have this."
msgstr ""

#: ../../../sound/designs/channel-mapping-api.rst:141
msgid ""
"When ``SNDRV_CHMAP_DRIVER_SPEC`` is set, all the channel position values "
"don't follow the standard definition above but driver-specific."
msgstr ""

#: ../../../sound/designs/channel-mapping-api.rst:145
msgid "Read Operation"
msgstr ""

#: ../../../sound/designs/channel-mapping-api.rst:147
msgid ""
"The control read operation is for providing the current channel map of the "
"given stream.  The control element returns an integer array containing the "
"position of each channel."
msgstr ""

#: ../../../sound/designs/channel-mapping-api.rst:151
msgid ""
"When this is performed before the number of the channel is specified (i.e. "
"hw_params is set), it should return all channels set to ``UNKNOWN``."
msgstr ""

#: ../../../sound/designs/channel-mapping-api.rst:156
msgid "Write Operation"
msgstr ""

#: ../../../sound/designs/channel-mapping-api.rst:158
msgid ""
"The control write operation is optional, and only for devices that can "
"change the channel configuration on the fly, such as HDMI.  User needs to "
"pass an integer value containing the valid channel positions for all "
"channels of the assigned PCM substream."
msgstr ""

#: ../../../sound/designs/channel-mapping-api.rst:163
msgid ""
"This operation is allowed only at PCM PREPARED state.  When called in other "
"states, it shall return an error."
msgstr ""
