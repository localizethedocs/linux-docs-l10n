# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../admin-guide/acpi/ssdt-overlays.rst:5
msgid "SSDT Overlays"
msgstr ""

#: ../../../admin-guide/acpi/ssdt-overlays.rst:7
msgid ""
"In order to support ACPI open-ended hardware configurations (e.g. "
"development boards) we need a way to augment the ACPI configuration provided "
"by the firmware image. A common example is connecting sensors on I2C / SPI "
"buses on development boards."
msgstr ""

#: ../../../admin-guide/acpi/ssdt-overlays.rst:12
msgid ""
"Although this can be accomplished by creating a kernel platform driver or "
"recompiling the firmware image with updated ACPI tables, neither is "
"practical: the former proliferates board specific kernel code while the "
"latter requires access to firmware tools which are often not publicly "
"available."
msgstr ""

#: ../../../admin-guide/acpi/ssdt-overlays.rst:17
msgid ""
"Because ACPI supports external references in AML code a more practical way "
"to augment firmware ACPI configuration is by dynamically loading user "
"defined SSDT tables that contain the board specific information."
msgstr ""

#: ../../../admin-guide/acpi/ssdt-overlays.rst:21
msgid ""
"For example, to enumerate a Bosch BMA222E accelerometer on the I2C bus of "
"the Minnowboard MAX development board exposed via the LSE connector [1], the "
"following ASL code can be used::"
msgstr ""

#: ../../../admin-guide/acpi/ssdt-overlays.rst:54
msgid "which can then be compiled to AML binary format::"
msgstr ""

#: ../../../admin-guide/acpi/ssdt-overlays.rst:65
msgid ""
"[1] https://www.elinux.org/Minnowboard:"
"MinnowMax#Low_Speed_Expansion_.28Top.29"
msgstr ""

#: ../../../admin-guide/acpi/ssdt-overlays.rst:67
msgid ""
"The resulting AML code can then be loaded by the kernel using one of the "
"methods below."
msgstr ""

#: ../../../admin-guide/acpi/ssdt-overlays.rst:71
msgid "Loading ACPI SSDTs from initrd"
msgstr ""

#: ../../../admin-guide/acpi/ssdt-overlays.rst:73
msgid ""
"This option allows loading of user defined SSDTs from initrd and it is "
"useful when the system does not support EFI or when there is not enough EFI "
"storage."
msgstr ""

#: ../../../admin-guide/acpi/ssdt-overlays.rst:76
msgid ""
"It works in a similar way with initrd based ACPI tables override/upgrade: "
"SSDT AML code must be placed in the first, uncompressed, initrd under the "
"\"kernel/firmware/acpi\" path. Multiple files can be used and this will "
"translate in loading multiple tables. Only SSDT and OEM tables are allowed. "
"See initrd_table_override.txt for more details."
msgstr ""

#: ../../../admin-guide/acpi/ssdt-overlays.rst:82
msgid "Here is an example::"
msgstr ""

#: ../../../admin-guide/acpi/ssdt-overlays.rst:99
msgid "Loading ACPI SSDTs from EFI variables"
msgstr ""

#: ../../../admin-guide/acpi/ssdt-overlays.rst:101
msgid ""
"This is the preferred method, when EFI is supported on the platform, because "
"it allows a persistent, OS independent way of storing the user defined "
"SSDTs. There is also work underway to implement EFI support for loading user "
"defined SSDTs and using this method will make it easier to convert to the "
"EFI loading mechanism when that will arrive. To enable it, the "
"CONFIG_EFI_CUSTOM_SSDT_OVERLAYS should be chosen to y."
msgstr ""

#: ../../../admin-guide/acpi/ssdt-overlays.rst:108
msgid ""
"In order to load SSDTs from an EFI variable the ``\"efivar_ssdt=...\"`` "
"kernel command line parameter can be used (the name has a limitation of 16 "
"characters). The argument for the option is the variable name to use. If "
"there are multiple variables with the same name but with different vendor "
"GUIDs, all of them will be loaded."
msgstr ""

#: ../../../admin-guide/acpi/ssdt-overlays.rst:114
msgid ""
"In order to store the AML code in an EFI variable the efivarfs filesystem "
"can be used. It is enabled and mounted by default in /sys/firmware/efi/"
"efivars in all recent distribution."
msgstr ""

#: ../../../admin-guide/acpi/ssdt-overlays.rst:118
msgid ""
"Creating a new file in /sys/firmware/efi/efivars will automatically create a "
"new EFI variable. Updating a file in /sys/firmware/efi/efivars will update "
"the EFI variable. Please note that the file name needs to be specially "
"formatted as \"Name-GUID\" and that the first 4 bytes in the file (little-"
"endian format) represent the attributes of the EFI variable (see "
"EFI_VARIABLE_MASK in include/linux/efi.h). Writing to the file must also be "
"done with one write operation."
msgstr ""

#: ../../../admin-guide/acpi/ssdt-overlays.rst:126
msgid ""
"For example, you can use the following bash script to create/update an EFI "
"variable with the content from a given file::"
msgstr ""

#: ../../../admin-guide/acpi/ssdt-overlays.rst:169
msgid "Loading ACPI SSDTs from configfs"
msgstr ""

#: ../../../admin-guide/acpi/ssdt-overlays.rst:171
msgid ""
"This option allows loading of user defined SSDTs from user space via the "
"configfs interface. The CONFIG_ACPI_CONFIGFS option must be select and "
"configfs must be mounted. In the following examples, we assume that configfs "
"has been mounted in /sys/kernel/config."
msgstr ""

#: ../../../admin-guide/acpi/ssdt-overlays.rst:176
msgid ""
"New tables can be loading by creating new directories in /sys/kernel/config/"
"acpi/table and writing the SSDT AML code in the aml attribute::"
msgstr ""
