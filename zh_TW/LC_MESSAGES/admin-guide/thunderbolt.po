# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../admin-guide/thunderbolt.rst:5
msgid "USB4 and Thunderbolt"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:6
msgid ""
"USB4 is the public specification based on Thunderbolt 3 protocol with some "
"differences at the register level among other things. Connection manager is "
"an entity running on the host router (host controller) responsible for "
"enumerating routers and establishing tunnels. A connection manager can be "
"implemented either in firmware or software. Typically PCs come with a "
"firmware connection manager for Thunderbolt 3 and early USB4 capable "
"systems. Apple systems on the other hand use software connection manager and "
"the later USB4 compliant devices follow the suit."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:16
msgid ""
"The Linux Thunderbolt driver supports both and can detect at runtime which "
"connection manager implementation is to be used. To be on the safe side the "
"software connection manager in Linux also advertises security level ``user`` "
"which means PCIe tunneling is disabled by default. The documentation below "
"applies to both implementations with the exception that the software "
"connection manager only supports ``user`` security level and is expected to "
"be accompanied with an IOMMU based DMA protection."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:25
msgid "Security levels and how to use them"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:26
msgid ""
"The interface presented here is not meant for end users. Instead there "
"should be a userspace tool that handles all the low-level details, keeps a "
"database of the authorized devices and prompts users for new connections."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:30
msgid ""
"More details about the sysfs interface for Thunderbolt devices can be found "
"in Documentation/ABI/testing/sysfs-bus-thunderbolt."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:33
msgid ""
"Those users who just want to connect any device without any sort of manual "
"work can add following line to ``/etc/udev/rules.d/99-local.rules``::"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:39
msgid ""
"This will authorize all devices automatically when they appear. However, "
"keep in mind that this bypasses the security levels and makes the system "
"vulnerable to DMA attacks."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:43
msgid ""
"Starting with Intel Falcon Ridge Thunderbolt controller there are 4 security "
"levels available. Intel Titan Ridge added one more security level (usbonly). "
"The reason for these is the fact that the connected devices can be DMA "
"masters and thus read contents of the host memory without CPU and OS knowing "
"about it. There are ways to prevent this by setting up an IOMMU but it is "
"not always available for various reasons."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:50
msgid ""
"Some USB4 systems have a BIOS setting to disable PCIe tunneling. This is "
"treated as another security level (nopcie)."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:53
msgid "The security levels are as follows:"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:55
msgid "none"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:56
msgid ""
"All devices are automatically connected by the firmware. No user approval is "
"needed. In BIOS settings this is typically called *Legacy mode*."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:60
msgid "user"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:61
msgid ""
"User is asked whether the device is allowed to be connected. Based on the "
"device identification information available through ``/sys/bus/thunderbolt/"
"devices``, the user then can make the decision. In BIOS settings this is "
"typically called *Unique ID*."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:66
msgid "secure"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:67
msgid ""
"User is asked whether the device is allowed to be connected. In addition to "
"UUID the device (if it supports secure connect) is sent a challenge that "
"should match the expected one based on a random key written to the ``key`` "
"sysfs attribute. In BIOS settings this is typically called *One time saved "
"key*."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:73
msgid "dponly"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:74
msgid ""
"The firmware automatically creates tunnels for Display Port and USB. No PCIe "
"tunneling is done. In BIOS settings this is typically called *Display Port "
"Only*."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:78
msgid "usbonly"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:79
msgid ""
"The firmware automatically creates tunnels for the USB controller and "
"Display Port in a dock. All PCIe links downstream of the dock are removed."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:83
msgid "nopcie"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:84
msgid ""
"PCIe tunneling is disabled/forbidden from the BIOS. Available in some USB4 "
"systems."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:87
msgid ""
"The current security level can be read from ``/sys/bus/thunderbolt/devices/"
"domainX/security`` where ``domainX`` is the Thunderbolt domain the host "
"controller manages. There is typically one domain per Thunderbolt host "
"controller."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:92
msgid ""
"If the security level reads as ``user`` or ``secure`` the connected device "
"must be authorized by the user before PCIe tunnels are created (e.g the PCIe "
"device appears)."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:96
msgid ""
"Each Thunderbolt device plugged in will appear in sysfs under ``/sys/bus/"
"thunderbolt/devices``. The device directory carries information that can be "
"used to identify the particular device, including its name and UUID."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:102
msgid "Authorizing devices when security level is ``user`` or ``secure``"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:103
msgid "When a device is plugged in it will appear in sysfs as follows::"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:112
msgid ""
"The ``authorized`` attribute reads 0 which means no PCIe tunnels are created "
"yet. The user can authorize the device by simply entering::"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:117
msgid "This will create the PCIe tunnels and the device is now connected."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:119
msgid ""
"If the device supports secure connect, and the domain security level is set "
"to ``secure``, it has an additional attribute ``key`` which can hold a "
"random 32-byte value used for authorization and challenging the device in "
"future connects::"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:132
msgid "Notice the key is empty by default."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:134
msgid ""
"If the user does not want to use secure connect they can just ``echo 1`` to "
"the ``authorized`` attribute and the PCIe tunnels will be created in the "
"same way as in the ``user`` security level."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:138
msgid ""
"If the user wants to use secure connect, the first time the device is "
"plugged a key needs to be created and sent to the device::"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:145
msgid ""
"Now the device is connected (PCIe tunnels are created) and in addition the "
"key is stored on the device NVM."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:148
msgid ""
"Next time the device is plugged in the user can verify (challenge) the "
"device using the same key::"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:154
msgid ""
"If the challenge the device returns back matches the one we expect based on "
"the key, the device is connected and the PCIe tunnels are created. However, "
"if the challenge fails no tunnels are created and error is returned to the "
"user."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:159
msgid ""
"If the user still wants to connect the device they can either approve the "
"device without a key or write a new key and write 1 to the ``authorized`` "
"file to get the new key stored on the device NVM."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:164
msgid "De-authorizing devices"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:165
msgid ""
"It is possible to de-authorize devices by writing ``0`` to their "
"``authorized`` attribute. This requires support from the connection manager "
"implementation and can be checked by reading domain ``deauthorization`` "
"attribute. If it reads ``1`` then the feature is supported."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:171
msgid ""
"When a device is de-authorized the PCIe tunnel from the parent device PCIe "
"downstream (or root) port to the device PCIe upstream port is torn down. "
"This is essentially the same thing as PCIe hot-remove and the PCIe toplogy "
"in question will not be accessible anymore until the device is authorized "
"again. If there is storage such as NVMe or similar involved, there is a risk "
"for data loss if the filesystem on that storage is not properly shut down. "
"You have been warned!"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:180
msgid "DMA protection utilizing IOMMU"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:181
msgid ""
"Recent systems from 2018 and forward with Thunderbolt ports may natively "
"support IOMMU. This means that Thunderbolt security is handled by an IOMMU "
"so connected devices cannot access memory regions outside of what is "
"allocated for them by drivers. When Linux is running on such system it "
"automatically enables IOMMU if not enabled by the user already. These "
"systems can be identified by reading ``1`` from ``/sys/bus/thunderbolt/"
"devices/domainX/iommu_dma_protection`` attribute."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:189
msgid ""
"The driver does not do anything special in this case but because DMA "
"protection is handled by the IOMMU, security levels (if set) are redundant. "
"For this reason some systems ship with security level set to ``none``. Other "
"systems have security level set to ``user`` in order to support downgrade to "
"older OS, so users who want to automatically authorize devices when IOMMU "
"DMA protection is enabled can use the following ``udev`` rule::"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:200
msgid "Upgrading NVM on Thunderbolt device, host or retimer"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:201
msgid ""
"Since most of the functionality is handled in firmware running on a host "
"controller or a device, it is important that the firmware can be upgraded to "
"the latest where possible bugs in it have been fixed. Typically OEMs provide "
"this firmware from their support site."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:206
msgid ""
"There is also a central site which has links where to download firmware for "
"some machines:"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:209
msgid "`Thunderbolt Updates <https://thunderbolttechnology.net/updates>`_"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:211
msgid ""
"Before you upgrade firmware on a device, host or retimer, please make sure "
"it is a suitable upgrade. Failing to do that may render the device in a "
"state where it cannot be used properly anymore without special tools!"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:216
msgid "Host NVM upgrade on Apple Macs is not supported."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:218
msgid ""
"Once the NVM image has been downloaded, you need to plug in a Thunderbolt "
"device so that the host controller appears. It does not matter which device "
"is connected (unless you are upgrading NVM on a device - then you need to "
"connect that particular device)."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:223
msgid ""
"Note an OEM-specific method to power the controller up (\"force power\") may "
"be available for your system in which case there is no need to plug in a "
"Thunderbolt device."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:227
msgid ""
"After that we can write the firmware to the non-active parts of the NVM of "
"the host or device. As an example here is how Intel NUC6i7KYK (Skull Canyon) "
"Thunderbolt controller NVM is upgraded::"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:233
msgid ""
"Once the operation completes we can trigger NVM authentication and upgrade "
"process as follows::"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:238
msgid ""
"If no errors are returned, the host controller shortly disappears. Once it "
"comes back the driver notices it and initiates a full power cycle. After a "
"while the host controller appears again and this time it should be fully "
"functional."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:243
msgid ""
"We can verify that the new NVM firmware is active by running the following "
"commands::"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:251
msgid ""
"If ``nvm_authenticate`` contains anything other than 0x0 it is the error "
"code from the last authentication cycle, which means the authentication of "
"the NVM image failed."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:255
msgid ""
"Note names of the NVMem devices ``nvm_activeN`` and ``nvm_non_activeN`` "
"depend on the order they are registered in the NVMem subsystem. N in the "
"name is the identifier added by the NVMem subsystem."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:260
msgid "Upgrading on-board retimer NVM when there is no cable connected"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:261
msgid ""
"If the platform supports, it may be possible to upgrade the retimer NVM "
"firmware even when there is nothing connected to the USB4 ports. When this "
"is the case the ``usb4_portX`` devices have two special attributes: "
"``offline`` and ``rescan``. The way to upgrade the firmware is to first put "
"the USB4 port into offline mode::"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:269
msgid ""
"This step makes sure the port does not respond to any hotplug events, and "
"also ensures the retimers are powered on. The next step is to scan for the "
"retimers::"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:275
msgid ""
"This enumerates and adds the on-board retimers. Now retimer NVM can be "
"upgraded in the same way than with cable connected (see previous section). "
"However, the retimer is not disconnected as we are offline mode) so after "
"writing ``1`` to ``nvm_authenticate`` one should wait for 5 or more seconds "
"before running rescan again::"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:283
msgid ""
"This point if everything went fine, the port can be put back to functional "
"state again::"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:289
msgid "Upgrading NVM when host controller is in safe mode"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:290
msgid ""
"If the existing NVM is not properly authenticated (or is missing) the host "
"controller goes into safe mode which means that the only available "
"functionality is flashing a new NVM image. When in this mode, reading "
"``nvm_version`` fails with ``ENODATA`` and the device identification "
"information is missing."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:296
msgid ""
"To recover from this mode, one needs to flash a valid NVM image to the host "
"controller in the same way it is done in the previous chapter."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:300
msgid "Tunneling events"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:301
msgid ""
"The driver sends ``KOBJ_CHANGE`` events to userspace when there is a "
"tunneling change in the ``thunderbolt_domain``. The notification carries "
"following environment variables::"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:308
msgid "Possible values for ``<EVENT>`` are:"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:310
msgid "activated"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:311
msgid "The tunnel was activated (created)."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:313
msgid "changed"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:314
msgid ""
"There is a change in this tunnel. For example bandwidth allocation was "
"changed."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:317
msgid "deactivated"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:318
msgid "The tunnel was torn down."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:320
msgid "low bandwidth"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:321
msgid "The tunnel is not getting optimal bandwidth."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:323
msgid "insufficient bandwidth"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:324
msgid "There is not enough bandwidth for the current tunnel requirements."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:326
msgid ""
"The ``TUNNEL_DETAILS`` is only provided if the tunnel is known. For example, "
"in case of Firmware Connection Manager this is missing or does not provide "
"full tunnel information. In case of Software Connection Manager this "
"includes full tunnel details. The format currently matches what the driver "
"uses when logging. This may change over time."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:333
msgid "Networking over Thunderbolt cable"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:334
msgid ""
"Thunderbolt technology allows software communication between two hosts "
"connected by a Thunderbolt cable."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:337
msgid ""
"It is possible to tunnel any kind of traffic over a Thunderbolt link but "
"currently we only support Apple ThunderboltIP protocol."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:340
msgid ""
"If the other host is running Windows or macOS, the only thing you need to do "
"is to connect a Thunderbolt cable between the two hosts; the ``thunderbolt-"
"net`` driver is loaded automatically. If the other host is also Linux you "
"should load ``thunderbolt-net`` manually on one host (it does not matter "
"which one)::"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:348
msgid ""
"This triggers module load on the other host automatically. If the driver is "
"built-in to the kernel image, there is no need to do anything."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:351
msgid ""
"The driver will create one virtual ethernet interface per Thunderbolt port "
"which are named like ``thunderbolt0`` and so on. From this point you can "
"either use standard userspace tools like ``ifconfig`` to configure the "
"interface or let your GUI handle it automatically."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:357
msgid "Forcing power"
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:358
msgid ""
"Many OEMs include a method that can be used to force the power of a "
"Thunderbolt controller to an \"On\" state even if nothing is connected. If "
"supported by your machine this will be exposed by the WMI bus with a sysfs "
"attribute called \"force_power\", see Documentation/ABI/testing/sysfs-"
"platform-intel-wmi-thunderbolt for details."
msgstr ""

#: ../../../admin-guide/thunderbolt.rst:364
msgid ""
"Note: it's currently not possible to query the force power state of a "
"platform."
msgstr ""
