# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../admin-guide/device-mapper/log-writes.rst:3
msgid "dm-log-writes"
msgstr ""

#: ../../../admin-guide/device-mapper/log-writes.rst:5
msgid ""
"This target takes 2 devices, one to pass all IO to normally, and one to log "
"all of the write operations to.  This is intended for file system developers "
"wishing to verify the integrity of metadata or data as the file system is "
"written to. There is a log_write_entry written for every WRITE request and "
"the target is able to take arbitrary data from userspace to insert into the "
"log.  The data that is in the WRITE requests is copied into the log to make "
"the replay happen exactly as it happened originally."
msgstr ""

#: ../../../admin-guide/device-mapper/log-writes.rst:14
msgid "Log Ordering"
msgstr ""

#: ../../../admin-guide/device-mapper/log-writes.rst:16
msgid ""
"We log things in order of completion once we are sure the write is no longer "
"in cache.  This means that normal WRITE requests are not actually logged "
"until the next REQ_PREFLUSH request.  This is to make it easier for "
"userspace to replay the log in a way that correlates to what is on disk and "
"not what is in cache, to make it easier to detect improper waiting/flushing."
msgstr ""

#: ../../../admin-guide/device-mapper/log-writes.rst:22
msgid ""
"This works by attaching all WRITE requests to a list once the write "
"completes. Once we see a REQ_PREFLUSH request we splice this list onto the "
"request and once the FLUSH request completes we log all of the WRITEs and "
"then the FLUSH.  Only completed WRITEs, at the time the REQ_PREFLUSH is "
"issued, are added in order to simulate the worst case scenario with regard "
"to power failures.  Consider the following example (W means write, C means "
"complete):"
msgstr ""

#: ../../../admin-guide/device-mapper/log-writes.rst:29
msgid "W1,W2,W3,C3,C2,Wflush,C1,Cflush"
msgstr ""

#: ../../../admin-guide/device-mapper/log-writes.rst:31
msgid "The log would show the following:"
msgstr ""

#: ../../../admin-guide/device-mapper/log-writes.rst:33
msgid "W3,W2,flush,W1...."
msgstr ""

#: ../../../admin-guide/device-mapper/log-writes.rst:35
msgid ""
"Again this is to simulate what is actually on disk, this allows us to detect "
"cases where a power failure at a particular point in time would create an "
"inconsistent file system."
msgstr ""

#: ../../../admin-guide/device-mapper/log-writes.rst:39
msgid ""
"Any REQ_FUA requests bypass this flushing mechanism and are logged as soon "
"as they complete as those requests will obviously bypass the device cache."
msgstr ""

#: ../../../admin-guide/device-mapper/log-writes.rst:42
msgid ""
"Any REQ_OP_DISCARD requests are treated like WRITE requests.  Otherwise we "
"would have all the DISCARD requests, and then the WRITE requests and then "
"the FLUSH request.  Consider the following example:"
msgstr ""

#: ../../../admin-guide/device-mapper/log-writes.rst:46
msgid "WRITE block 1, DISCARD block 1, FLUSH"
msgstr ""

#: ../../../admin-guide/device-mapper/log-writes.rst:48
msgid ""
"If we logged DISCARD when it completed, the replay would look like this:"
msgstr ""

#: ../../../admin-guide/device-mapper/log-writes.rst:50
msgid "DISCARD 1, WRITE 1, FLUSH"
msgstr ""

#: ../../../admin-guide/device-mapper/log-writes.rst:52
msgid ""
"which isn't quite what happened and wouldn't be caught during the log replay."
msgstr ""

#: ../../../admin-guide/device-mapper/log-writes.rst:55
msgid "Target interface"
msgstr ""

#: ../../../admin-guide/device-mapper/log-writes.rst:57
msgid "Constructor"
msgstr ""

#: ../../../admin-guide/device-mapper/log-writes.rst:59
msgid "log-writes <dev_path> <log_dev_path>"
msgstr ""

#: ../../../admin-guide/device-mapper/log-writes.rst:62
msgid "dev_path"
msgstr ""

#: ../../../admin-guide/device-mapper/log-writes.rst:62
msgid "Device that all of the IO will go to normally."
msgstr ""

#: ../../../admin-guide/device-mapper/log-writes.rst:63
msgid "log_dev_path"
msgstr ""

#: ../../../admin-guide/device-mapper/log-writes.rst:63
msgid "Device where the log entries are written to."
msgstr ""

#: ../../../admin-guide/device-mapper/log-writes.rst:66
msgid "Status"
msgstr "狀態"

#: ../../../admin-guide/device-mapper/log-writes.rst:68
msgid "<#logged entries> <highest allocated sector>"
msgstr ""

#: ../../../admin-guide/device-mapper/log-writes.rst:71
msgid "#logged entries"
msgstr ""

#: ../../../admin-guide/device-mapper/log-writes.rst:71
msgid "Number of logged entries"
msgstr ""

#: ../../../admin-guide/device-mapper/log-writes.rst:72
msgid "highest allocated sector"
msgstr ""

#: ../../../admin-guide/device-mapper/log-writes.rst:72
msgid "Highest allocated sector"
msgstr ""

#: ../../../admin-guide/device-mapper/log-writes.rst:75
msgid "Messages"
msgstr ""

#: ../../../admin-guide/device-mapper/log-writes.rst:77
msgid "mark <description>"
msgstr ""

#: ../../../admin-guide/device-mapper/log-writes.rst:79
msgid ""
"You can use a dmsetup message to set an arbitrary mark in a log. For example "
"say you want to fsck a file system after every write, but first you need to "
"replay up to the mkfs to make sure we're fsck'ing something reasonable, you "
"would do something like this::"
msgstr ""

#: ../../../admin-guide/device-mapper/log-writes.rst:89
msgid ""
"This would allow you to replay the log up to the mkfs mark and then replay "
"from that point on doing the fsck check in the interval that you want."
msgstr ""

#: ../../../admin-guide/device-mapper/log-writes.rst:93
msgid "Every log has a mark at the end labeled \"dm-log-writes-end\"."
msgstr ""

#: ../../../admin-guide/device-mapper/log-writes.rst:96
msgid "Userspace component"
msgstr ""

#: ../../../admin-guide/device-mapper/log-writes.rst:98
msgid ""
"There is a userspace tool that will replay the log for you in various ways. "
"It can be found here: https://github.com/josefbacik/log-writes"
msgstr ""

#: ../../../admin-guide/device-mapper/log-writes.rst:102
msgid "Example usage"
msgstr ""

#: ../../../admin-guide/device-mapper/log-writes.rst:104
msgid ""
"Say you want to test fsync on your file system.  You would do something like "
"this::"
msgstr ""

#: ../../../admin-guide/device-mapper/log-writes.rst:143
msgid ""
"And that will replay the log until it sees a FUA request, run the fsck "
"command and if the fsck passes it will replay to the next FUA, until it is "
"completed or the fsck command exists abnormally."
msgstr ""
