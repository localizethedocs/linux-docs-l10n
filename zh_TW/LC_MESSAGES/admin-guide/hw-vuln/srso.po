# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../admin-guide/hw-vuln/srso.rst:4
msgid "Speculative Return Stack Overflow (SRSO)"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:6
msgid ""
"This is a mitigation for the speculative return stack overflow (SRSO) "
"vulnerability found on AMD processors. The mechanism is by now the well "
"known scenario of poisoning CPU functional units - the Branch Target Buffer "
"(BTB) and Return Address Predictor (RAP) in this case - and then tricking "
"the elevated privilege domain (the kernel) into leaking sensitive data."
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:13
msgid ""
"AMD CPUs predict RET instructions using a Return Address Predictor (aka "
"Return Address Stack/Return Stack Buffer). In some cases, a non-"
"architectural CALL instruction (i.e., an instruction predicted to be a CALL "
"but is not actually a CALL) can create an entry in the RAP which may be used "
"to predict the target of a subsequent RET instruction."
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:19
msgid ""
"The specific circumstances that lead to this varies by microarchitecture but "
"the concern is that an attacker can mis-train the CPU BTB to predict non-"
"architectural CALL instructions in kernel space and use this to control the "
"speculative target of a subsequent kernel RET, potentially leading to "
"information disclosure via a speculative side-channel."
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:25
msgid "The issue is tracked under CVE-2023-20569."
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:28
msgid "Affected processors"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:30
msgid ""
"AMD Zen, generations 1-4. That is, all families 0x17 and 0x19. Older "
"processors have not been investigated."
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:34
msgid "System information and options"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:36
msgid ""
"First of all, it is required that the latest microcode be loaded for "
"mitigations to be effective."
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:39
msgid "The sysfs file showing SRSO mitigation status is:"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:41
msgid "/sys/devices/system/cpu/vulnerabilities/spec_rstack_overflow"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:43
msgid "The possible values in this file are:"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:45
msgid "'Not affected':"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:47
msgid "The processor is not vulnerable"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:49
msgid "'Vulnerable':"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:51
msgid "The processor is vulnerable and no mitigations have been applied."
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:53
msgid "'Vulnerable: No microcode':"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:55
msgid ""
"The processor is vulnerable, no microcode extending IBPB functionality to "
"address the vulnerability has been applied."
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:58
msgid "'Vulnerable: Safe RET, no microcode':"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:60
msgid ""
"The \"Safe RET\" mitigation (see below) has been applied to protect the "
"kernel, but the IBPB-extending microcode has not been applied.  User space "
"tasks may still be vulnerable."
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:64
msgid "'Vulnerable: Microcode, no safe RET':"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:66
msgid ""
"Extended IBPB functionality microcode patch has been applied. It does not "
"address User->Kernel and Guest->Host transitions protection but it does "
"address User->User and VM->VM attack vectors."
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:70
msgid ""
"Note that User->User mitigation is controlled by how the IBPB aspect in the "
"Spectre v2 mitigation is selected:"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:73
msgid "conditional IBPB:"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:75
msgid ""
"where each process can select whether it needs an IBPB issued around it "
"PR_SPEC_DISABLE/_ENABLE etc, see :doc:`spectre`"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:78
msgid "strict:"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:80
msgid ""
"i.e., always on - by supplying spectre_v2_user=on on the kernel command line"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:83
msgid "(spec_rstack_overflow=microcode)"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:85
msgid "'Mitigation: Safe RET':"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:87
msgid ""
"Combined microcode/software mitigation. It complements the extended IBPB "
"microcode patch functionality by addressing User->Kernel and Guest->Host "
"transitions protection."
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:91
msgid "Selected by default or by spec_rstack_overflow=safe-ret"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:93
msgid "'Mitigation: IBPB':"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:95
msgid ""
"Similar protection as \"safe RET\" above but employs an IBPB barrier on "
"privilege domain crossings (User->Kernel, Guest->Host)."
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:98
msgid "(spec_rstack_overflow=ibpb)"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:100
msgid "'Mitigation: IBPB on VMEXIT':"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:102
msgid ""
"Mitigation addressing the cloud provider scenario - the Guest->Host "
"transitions only."
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:105
msgid "(spec_rstack_overflow=ibpb-vmexit)"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:107
msgid "'Mitigation: Reduced Speculation':"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:109
msgid ""
"This mitigation gets automatically enabled when the above one \"IBPB on "
"VMEXIT\" has been selected and the CPU supports the BpSpecReduce bit."
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:112
msgid ""
"It gets automatically enabled on machines which have the "
"SRSO_USER_KERNEL_NO=1 CPUID bit. In that case, the code logic is to switch "
"to the above =ibpb-vmexit mitigation because the user/kernel boundary is not "
"affected anymore and thus \"safe RET\" is not needed."
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:117
msgid ""
"After enabling the IBPB on VMEXIT mitigation option, the BpSpecReduce bit is "
"detected (functionality present on all such machines) and that practically "
"overrides IBPB on VMEXIT as it has a lot less performance impact and takes "
"care of the guest->host attack vector too."
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:122
msgid "In order to exploit vulnerability, an attacker needs to:"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:124
msgid "gain local access on the machine"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:126
msgid "break kASLR"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:128
msgid "find gadgets in the running kernel in order to use them in the exploit"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:130
msgid ""
"potentially create and pin an additional workload on the sibling thread, "
"depending on the microarchitecture (not necessary on fam 0x19)"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:133
msgid "run the exploit"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:135
msgid ""
"Considering the performance implications of each mitigation type, the "
"default one is 'Mitigation: safe RET' which should take care of most attack "
"vectors, including the local User->Kernel one."
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:139
msgid ""
"As always, the user is advised to keep her/his system up-to-date by applying "
"software updates regularly."
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:142
msgid ""
"The default setting will be reevaluated when needed and especially when new "
"attack vectors appear."
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:145
msgid ""
"As one can surmise, 'Mitigation: safe RET' does come at the cost of some "
"performance depending on the workload. If one trusts her/his userspace and "
"does not want to suffer the performance impact, one can always disable the "
"mitigation with spec_rstack_overflow=off."
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:150
msgid ""
"Similarly, 'Mitigation: IBPB' is another full mitigation type employing an "
"indirect branch prediction barrier after having applied the required "
"microcode patch for one's system. This mitigation comes also at a "
"performance cost."
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:156
msgid "Mitigation: Safe RET"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:158
msgid ""
"The mitigation works by ensuring all RET instructions speculate to a "
"controlled location, similar to how speculation is controlled in the "
"retpoline sequence.  To accomplish this, the __x86_return_thunk forces the "
"CPU to mispredict every function return using a 'safe return' sequence."
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:164
msgid ""
"To ensure the safety of this mitigation, the kernel must ensure that the "
"safe return sequence is itself free from attacker interference.  In Zen3 and "
"Zen4, this is accomplished by creating a BTB alias between the untraining "
"function srso_alias_untrain_ret() and the safe return function "
"srso_alias_safe_ret() which results in evicting a potentially poisoned BTB "
"entry and using that safe one for all function returns."
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:171
msgid ""
"In older Zen1 and Zen2, this is accomplished using a reinterpretation "
"technique similar to Retbleed one: srso_untrain_ret() and srso_safe_ret()."
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:176
msgid "Checking the safe RET mitigation actually works"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:178
msgid ""
"In case one wants to validate whether the SRSO safe RET mitigation works on "
"a kernel, one could use two performance counters"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:181
msgid "PMC_0xc8 - Count of RET/RET lw retired"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:182
msgid "PMC_0xc9 - Count of RET/RET lw retired mispredicted"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:184
msgid ""
"and compare the number of RETs retired properly vs those retired "
"mispredicted, in kernel mode. Another way of specifying those events is::"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:198
msgid "Either the command using the event mnemonics::"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:202
msgid "or using the raw PMC numbers::"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:206
msgid ""
"should give the same amount. I.e., every RET retired should be mispredicted::"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:221
msgid ""
"vs the case when the mitigation is disabled (spec_rstack_overflow=off) or "
"not functioning properly, showing usually a lot smaller number of "
"mispredicted retired RETs vs the overall count of retired RETs during a "
"workload::"
msgstr ""

#: ../../../admin-guide/hw-vuln/srso.rst:238
msgid ""
"Also, there is a selftest which performs the above, go to tools/testing/"
"selftests/x86/ and do::"
msgstr ""
