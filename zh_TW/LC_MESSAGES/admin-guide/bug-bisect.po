# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../admin-guide/bug-bisect.rst:6
msgid "Bisecting a regression"
msgstr ""

#: ../../../admin-guide/bug-bisect.rst:8
msgid ""
"This document describes how to use a ``git bisect`` to find the source code "
"change that broke something -- for example when some functionality stopped "
"working after upgrading from Linux 6.0 to 6.1."
msgstr ""

#: ../../../admin-guide/bug-bisect.rst:12
msgid ""
"The text focuses on the gist of the process. If you are new to bisecting the "
"kernel, better follow Documentation/admin-guide/verify-bugs-and-bisect-"
"regressions.rst instead: it depicts everything from start to finish while "
"covering multiple aspects even kernel developers occasionally forget. This "
"includes detecting situations early where a bisection would be a waste of "
"time, as nobody would care about the result -- for example, because the "
"problem happens after the kernel marked itself as 'tainted', occurs in an "
"abandoned version, was already fixed, or is caused by a .config change you "
"or your Linux distributor performed."
msgstr ""

#: ../../../admin-guide/bug-bisect.rst:22
msgid "Finding the change causing a kernel issue using a bisection"
msgstr ""

#: ../../../admin-guide/bug-bisect.rst:24
msgid ""
"*Note: the following process assumes you prepared everything for a "
"bisection. This includes having a Git clone with the appropriate sources, "
"installing the software required to build and install kernels, as well as a ."
"config file stored in a safe place (the following example assumes '~/"
"prepared_kernel_.config') to use as pristine base at each bisection step; "
"ideally, you have also worked out a fully reliable and straight-forward way "
"to reproduce the regression, too.*"
msgstr ""

#: ../../../admin-guide/bug-bisect.rst:31
msgid ""
"Preparation: start the bisection and tell Git about the points in the "
"history you consider to be working and broken, which Git calls 'good' and "
"'bad'::"
msgstr ""

#: ../../../admin-guide/bug-bisect.rst:38
msgid ""
"Instead of Git tags like 'v6.0' and 'v6.1' you can specify commit-ids, too."
msgstr ""

#: ../../../admin-guide/bug-bisect.rst:40
msgid ""
"Copy your prepared .config into the build directory and adjust it to the "
"needs of the codebase Git checked out for testing::"
msgstr ""

#: ../../../admin-guide/bug-bisect.rst:46
msgid ""
"Now build, install, and boot a kernel. This might fail for unrelated "
"reasons, for example, when a compile error happens at the current stage of "
"the bisection a later change resolves. In such cases run ``git bisect skip`` "
"and go back to step 1."
msgstr ""

#: ../../../admin-guide/bug-bisect.rst:51
msgid ""
"Check if the functionality that regressed works in the kernel you just built."
msgstr ""

#: ../../../admin-guide/bug-bisect.rst:53
msgid "If it works, execute::"
msgstr ""

#: ../../../admin-guide/bug-bisect.rst:57
msgid "If it is broken, run::"
msgstr ""

#: ../../../admin-guide/bug-bisect.rst:61
msgid ""
"Note, getting this wrong just once will send the rest of the bisection "
"totally off course. To prevent having to start anew later you thus want to "
"ensure what you tell Git is correct; it is thus often wise to spend a few "
"minutes more on testing in case your reproducer is unreliable."
msgstr ""

#: ../../../admin-guide/bug-bisect.rst:66
msgid ""
"After issuing one of these two commands, Git will usually check out another "
"bisection point and print something like 'Bisecting: 675 revisions left to "
"test after this (roughly 10 steps)'. In that case go back to step 1."
msgstr ""

#: ../../../admin-guide/bug-bisect.rst:70
msgid ""
"If Git instead prints something like "
"'cafecaca0c0dacafecaca0c0dacafecaca0c0da is the first bad commit', then you "
"have finished the bisection. In that case move to the next point below. "
"Note, right after displaying that line Git will show some details about the "
"culprit including its patch description; this can easily fill your terminal, "
"so you might need to scroll up to see the message mentioning the culprit's "
"commit-id."
msgstr ""

#: ../../../admin-guide/bug-bisect.rst:77
msgid ""
"In case you missed Git's output, you can always run ``git bisect log`` to "
"print the status: it will show how many steps remain or mention the result "
"of the bisection."
msgstr ""

#: ../../../admin-guide/bug-bisect.rst:81
msgid ""
"Recommended complementary task: put the bisection log and the current ."
"config file aside for the bug report; furthermore tell Git to reset the "
"sources to the state before the bisection::"
msgstr ""

#: ../../../admin-guide/bug-bisect.rst:89
msgid ""
"Recommended optional task: try reverting the culprit on top of the latest "
"codebase and check if that fixes your bug; if that is the case, it validates "
"the bisection and enables developers to resolve the regression through a "
"revert."
msgstr ""

#: ../../../admin-guide/bug-bisect.rst:94
msgid ""
"To try this, update your clone and check out latest mainline. Then tell Git "
"to revert the change by specifying its commit-id::"
msgstr ""

#: ../../../admin-guide/bug-bisect.rst:99
msgid ""
"Git might reject this, for example when the bisection landed on a merge "
"commit. In that case, abandon the attempt. Do the same, if Git fails to "
"revert the culprit on its own because later changes depend on it -- at least "
"unless you bisected a stable or longterm kernel series, in which case you "
"want to check out its latest codebase and try a revert there."
msgstr ""

#: ../../../admin-guide/bug-bisect.rst:105
msgid ""
"If a revert succeeds, build and test another kernel to check if reverting "
"resolved your regression."
msgstr ""

#: ../../../admin-guide/bug-bisect.rst:108
msgid ""
"With that the process is complete. Now report the regression as described by "
"Documentation/admin-guide/reporting-issues.rst."
msgstr ""

#: ../../../admin-guide/bug-bisect.rst:112
msgid "Bisecting linux-next"
msgstr ""

#: ../../../admin-guide/bug-bisect.rst:114
msgid ""
"If you face a problem only happening in linux-next, bisect between the linux-"
"next branches 'stable' and 'master'. The following commands will start the "
"process for a linux-next tree you added as a remote called 'next'::"
msgstr ""

#: ../../../admin-guide/bug-bisect.rst:122
msgid ""
"The 'stable' branch refers to the state of linux-mainline that the current "
"linux-next release (found in the 'master' branch) is based on -- the former "
"thus should be free of any problems that show up in -next, but not in Linus' "
"tree."
msgstr ""

#: ../../../admin-guide/bug-bisect.rst:127
msgid ""
"This will bisect across a wide range of changes, some of which you might "
"have used in earlier linux-next releases without problems. Sadly there is no "
"simple way to avoid checking them: bisecting from one linux-next release to "
"a later one (say between 'next-20241020' and 'next-20241021') is impossible, "
"as they share no common history."
msgstr ""

#: ../../../admin-guide/bug-bisect.rst:134
msgid "Additional reading material"
msgstr ""

#: ../../../admin-guide/bug-bisect.rst:136
msgid ""
"The `man page for 'git bisect' <https://git-scm.com/docs/git-bisect>`_ and "
"`fighting regressions with 'git bisect' <https://git-scm.com/docs/git-bisect-"
"lk2009.html>`_ in the Git documentation."
msgstr ""

#: ../../../admin-guide/bug-bisect.rst:139
msgid ""
"`Working with git bisect <https://nathanchance.dev/posts/working-with-git-"
"bisect/>`_ from kernel developer Nathan Chancellor."
msgstr ""

#: ../../../admin-guide/bug-bisect.rst:141
msgid ""
"`Using Git bisect to figure out when brokenness was introduced <http://"
"webchick.net/node/99>`_."
msgstr ""

#: ../../../admin-guide/bug-bisect.rst:142
msgid ""
"`Fully automated bisecting with 'git bisect run' <https://lwn.net/"
"Articles/317154>`_."
msgstr ""
