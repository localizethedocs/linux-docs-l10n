# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../i2c/i2c-protocol.rst:3
msgid "The I2C Protocol"
msgstr ""

#: ../../../i2c/i2c-protocol.rst:5
msgid ""
"This document is an overview of the basic I2C transactions and the kernel "
"APIs to perform them."
msgstr ""

#: ../../../i2c/i2c-protocol.rst:9
msgid "Key to symbols"
msgstr ""

#: ../../../i2c/i2c-protocol.rst:12
msgid "S"
msgstr ""

#: ../../../i2c/i2c-protocol.rst:12
msgid "Start condition"
msgstr ""

#: ../../../i2c/i2c-protocol.rst:13
msgid "P"
msgstr ""

#: ../../../i2c/i2c-protocol.rst:13
msgid "Stop condition"
msgstr ""

#: ../../../i2c/i2c-protocol.rst:14
msgid "Rd/Wr (1 bit)"
msgstr ""

#: ../../../i2c/i2c-protocol.rst:14
msgid "Read/Write bit. Rd equals 1, Wr equals 0."
msgstr ""

#: ../../../i2c/i2c-protocol.rst:15
msgid "A, NA (1 bit)"
msgstr ""

#: ../../../i2c/i2c-protocol.rst:15
msgid "Acknowledge (ACK) and Not Acknowledge (NACK) bit"
msgstr ""

#: ../../../i2c/i2c-protocol.rst:16
msgid "Addr  (7 bits)"
msgstr ""

#: ../../../i2c/i2c-protocol.rst:16
msgid ""
"I2C 7 bit address. Note that this can be expanded to get a 10 bit I2C "
"address."
msgstr ""

#: ../../../i2c/i2c-protocol.rst:18
msgid "Data  (8 bits)"
msgstr ""

#: ../../../i2c/i2c-protocol.rst:18
msgid "A plain data byte."
msgstr ""

#: ../../../i2c/i2c-protocol.rst:20
msgid "[..]"
msgstr ""

#: ../../../i2c/i2c-protocol.rst:20
msgid "Data sent by I2C device, as opposed to data sent by the host adapter."
msgstr ""

#: ../../../i2c/i2c-protocol.rst:26
msgid "Simple send transaction"
msgstr ""

#: ../../../i2c/i2c-protocol.rst:28
msgid "Implemented by i2c_master_send()::"
msgstr ""

#: ../../../i2c/i2c-protocol.rst:34
msgid "Simple receive transaction"
msgstr ""

#: ../../../i2c/i2c-protocol.rst:36
msgid "Implemented by i2c_master_recv()::"
msgstr ""

#: ../../../i2c/i2c-protocol.rst:42
msgid "Combined transactions"
msgstr ""

#: ../../../i2c/i2c-protocol.rst:44
msgid "Implemented by i2c_transfer()."
msgstr ""

#: ../../../i2c/i2c-protocol.rst:46
msgid ""
"They are just like the above transactions, but instead of a stop condition P "
"a start condition S is sent and the transaction continues. An example of a "
"byte read, followed by a byte write::"
msgstr ""

#: ../../../i2c/i2c-protocol.rst:54
msgid "Modified transactions"
msgstr ""

#: ../../../i2c/i2c-protocol.rst:56
msgid ""
"The following modifications to the I2C protocol can also be generated by "
"setting these flags for I2C messages. With the exception of I2C_M_NOSTART, "
"they are usually only needed to work around device issues:"
msgstr ""

#: ../../../i2c/i2c-protocol.rst:60
msgid "I2C_M_IGNORE_NAK:"
msgstr ""

#: ../../../i2c/i2c-protocol.rst:61
msgid ""
"Normally message is interrupted immediately if there is [NA] from the "
"client. Setting this flag treats any [NA] as [A], and all of message is "
"sent. These messages may still fail to SCL lo->hi timeout."
msgstr ""

#: ../../../i2c/i2c-protocol.rst:66
msgid "I2C_M_NO_RD_ACK:"
msgstr ""

#: ../../../i2c/i2c-protocol.rst:67
msgid "In a read message, master A/NA bit is skipped."
msgstr ""

#: ../../../i2c/i2c-protocol.rst:69
msgid "I2C_M_NOSTART:"
msgstr ""

#: ../../../i2c/i2c-protocol.rst:70
msgid ""
"In a combined transaction, no 'S Addr Wr/Rd [A]' is generated at some point. "
"For example, setting I2C_M_NOSTART on the second partial message generates "
"something like::"
msgstr ""

#: ../../../i2c/i2c-protocol.rst:76
msgid ""
"If you set the I2C_M_NOSTART variable for the first partial message, we do "
"not generate Addr, but we do generate the start condition S. This will "
"probably confuse all other clients on your bus, so don't try this."
msgstr ""

#: ../../../i2c/i2c-protocol.rst:81
msgid ""
"This is often used to gather transmits from multiple data buffers in system "
"memory into something that appears as a single transfer to the I2C device "
"but may also be used between direction changes by some rare devices."
msgstr ""

#: ../../../i2c/i2c-protocol.rst:86
msgid "I2C_M_REV_DIR_ADDR:"
msgstr ""

#: ../../../i2c/i2c-protocol.rst:87
msgid ""
"This toggles the Rd/Wr flag. That is, if you want to do a write, but need to "
"emit an Rd instead of a Wr, or vice versa, you set this flag. For example::"
msgstr ""

#: ../../../i2c/i2c-protocol.rst:93
msgid "I2C_M_STOP:"
msgstr ""

#: ../../../i2c/i2c-protocol.rst:94
msgid ""
"Force a stop condition (P) after the message. Some I2C related protocols "
"like SCCB require that. Normally, you really don't want to get interrupted "
"between the messages of one transfer."
msgstr ""
