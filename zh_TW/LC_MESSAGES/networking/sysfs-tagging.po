# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../networking/sysfs-tagging.rst:5
msgid "Sysfs tagging"
msgstr ""

#: ../../../networking/sysfs-tagging.rst:7
msgid ""
"(Taken almost verbatim from Eric Biederman's netns tagging patch commit msg)"
msgstr ""

#: ../../../networking/sysfs-tagging.rst:10
msgid ""
"The problem.  Network devices show up in sysfs and with the network "
"namespace active multiple devices with the same name can show up in the same "
"directory, ouch!"
msgstr ""

#: ../../../networking/sysfs-tagging.rst:14
msgid ""
"To avoid that problem and allow existing applications in network namespaces "
"to see the same interface that is currently presented in sysfs, sysfs now "
"has tagging directory support."
msgstr ""

#: ../../../networking/sysfs-tagging.rst:18
msgid ""
"By using the network namespace pointers as tags to separate out the sysfs "
"directory entries we ensure that we don't have conflicts in the directories "
"and applications only see a limited set of the network devices."
msgstr ""

#: ../../../networking/sysfs-tagging.rst:23
msgid ""
"Each sysfs directory entry may be tagged with a namespace via the ``void *ns "
"member`` of its ``kernfs_node``.  If a directory entry is tagged, then "
"``kernfs_node->flags`` will have a flag between KOBJ_NS_TYPE_NONE and "
"KOBJ_NS_TYPES, and ns will point to the namespace to which it belongs."
msgstr ""

#: ../../../networking/sysfs-tagging.rst:29
msgid ""
"Each sysfs superblock's kernfs_super_info contains an array ``void "
"*ns[KOBJ_NS_TYPES]``.  When a task in a tagging namespace kobj_nstype first "
"mounts sysfs, a new superblock is created.  It will be differentiated from "
"other sysfs mounts by having its ``s_fs_info->ns[kobj_nstype]`` set to the "
"new namespace.  Note that through bind mounting and mounts propagation, a "
"task can easily view the contents of other namespaces' sysfs mounts.  "
"Therefore, when a namespace exits, it will call kobj_ns_exit() to invalidate "
"any kernfs_node->ns pointers pointing to it."
msgstr ""

#: ../../../networking/sysfs-tagging.rst:39
msgid "Users of this interface:"
msgstr ""

#: ../../../networking/sysfs-tagging.rst:41
msgid "define a type in the ``kobj_ns_type`` enumeration."
msgstr ""

#: ../../../networking/sysfs-tagging.rst:42
msgid ""
"call kobj_ns_type_register() with its ``kobj_ns_type_operations`` which has"
msgstr ""

#: ../../../networking/sysfs-tagging.rst:44
msgid "current_ns() which returns current's namespace"
msgstr ""

#: ../../../networking/sysfs-tagging.rst:45
msgid "netlink_ns() which returns a socket's namespace"
msgstr ""

#: ../../../networking/sysfs-tagging.rst:46
msgid "initial_ns() which returns the initial namespace"
msgstr ""

#: ../../../networking/sysfs-tagging.rst:48
msgid "call kobj_ns_exit() when an individual tag is no longer valid"
msgstr ""
