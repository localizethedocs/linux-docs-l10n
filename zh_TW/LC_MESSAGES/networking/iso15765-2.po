# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../networking/iso15765-2.rst:5
msgid "ISO 15765-2 (ISO-TP)"
msgstr ""

#: ../../../networking/iso15765-2.rst:8
msgid "Overview"
msgstr ""

#: ../../../networking/iso15765-2.rst:10
msgid ""
"ISO 15765-2, also known as ISO-TP, is a transport protocol specifically "
"defined for diagnostic communication on CAN. It is widely used in the "
"automotive industry, for example as the transport protocol for UDSonCAN (ISO "
"14229-3) or emission-related diagnostic services (ISO 15031-5)."
msgstr ""

#: ../../../networking/iso15765-2.rst:15
msgid ""
"ISO-TP can be used both on CAN CC (aka Classical CAN) and CAN FD (CAN with "
"Flexible Datarate) based networks. It is also designed to be compatible with "
"a CAN network using SAE J1939 as data link layer (however, this is not a "
"requirement)."
msgstr ""

#: ../../../networking/iso15765-2.rst:21
msgid "Specifications used"
msgstr ""

#: ../../../networking/iso15765-2.rst:23
msgid ""
"ISO 15765-2:2024 : Road vehicles - Diagnostic communication over Controller "
"Area Network (DoCAN). Part 2: Transport protocol and network layer services."
msgstr ""

#: ../../../networking/iso15765-2.rst:27
msgid "Addressing"
msgstr ""

#: ../../../networking/iso15765-2.rst:29
msgid ""
"In its simplest form, ISO-TP is based on two kinds of addressing modes for "
"the nodes connected to the same network:"
msgstr ""

#: ../../../networking/iso15765-2.rst:32
msgid ""
"physical addressing is implemented by two node-specific addresses and is "
"used in 1-to-1 communication."
msgstr ""

#: ../../../networking/iso15765-2.rst:35
msgid ""
"functional addressing is implemented by one node-specific address and is "
"used in 1-to-N communication."
msgstr ""

#: ../../../networking/iso15765-2.rst:38
msgid "Three different addressing formats can be employed:"
msgstr ""

#: ../../../networking/iso15765-2.rst:40
msgid "\"normal\" : each address is represented simply by a CAN ID."
msgstr ""

#: ../../../networking/iso15765-2.rst:42
msgid ""
"\"extended\": each address is represented by a CAN ID plus the first byte of "
"the CAN payload; both the CAN ID and the byte inside the payload shall be "
"different between two addresses."
msgstr ""

#: ../../../networking/iso15765-2.rst:46
msgid ""
"\"mixed\": each address is represented by a CAN ID plus the first byte of "
"the CAN payload; the CAN ID is different between two addresses, but the "
"additional byte is the same."
msgstr ""

#: ../../../networking/iso15765-2.rst:51
msgid "Transport protocol and associated frame types"
msgstr ""

#: ../../../networking/iso15765-2.rst:53
msgid ""
"When transmitting data using the ISO-TP protocol, the payload can either fit "
"inside one single CAN message or not, also considering the overhead the "
"protocol is generating and the optional extended addressing. In the first "
"case, the data is transmitted at once using a so-called Single Frame (SF). "
"In the second case, ISO-TP defines a multi-frame protocol, in which the "
"sender provides (through a First Frame - FF) the PDU length which is to be "
"transmitted and also asks for a Flow Control (FC) frame, which provides the "
"maximum supported size of a macro data block (``blocksize``) and the minimum "
"time between the single CAN messages composing such block (``stmin``). Once "
"this information has been received, the sender starts to send frames "
"containing fragments of the data payload (called Consecutive Frames - CF), "
"stopping after every ``blocksize``-sized block to wait confirmation from the "
"receiver which should then send another Flow Control frame to inform the "
"sender about its availability to receive more data."
msgstr ""

#: ../../../networking/iso15765-2.rst:68
msgid "How to Use ISO-TP"
msgstr ""

#: ../../../networking/iso15765-2.rst:70
msgid ""
"As with others CAN protocols, the ISO-TP stack support is built into the "
"Linux network subsystem for the CAN bus, aka. Linux-CAN or SocketCAN, and "
"thus follows the same socket API."
msgstr ""

#: ../../../networking/iso15765-2.rst:75
msgid "Creation and basic usage of an ISO-TP socket"
msgstr ""

#: ../../../networking/iso15765-2.rst:77
msgid ""
"To use the ISO-TP stack, ``#include <linux/can/isotp.h>`` shall be used. A "
"socket can then be created using the ``PF_CAN`` protocol family, the "
"``SOCK_DGRAM`` type (as the underlying protocol is datagram-based by design) "
"and the ``CAN_ISOTP`` protocol:"
msgstr ""

#: ../../../networking/iso15765-2.rst:86
msgid ""
"After the socket has been successfully created, ``bind(2)`` shall be called "
"to bind the socket to the desired CAN interface; to do so:"
msgstr ""

#: ../../../networking/iso15765-2.rst:89
msgid ""
"a TX CAN ID shall be specified as part of the sockaddr supplied to the call "
"itself."
msgstr ""

#: ../../../networking/iso15765-2.rst:92
msgid ""
"a RX CAN ID shall also be specified, unless broadcast flags have been set "
"through socket option (explained below)."
msgstr ""

#: ../../../networking/iso15765-2.rst:95
msgid ""
"Once bound to an interface, the socket can be read from and written to using "
"the usual ``read(2)`` and ``write(2)`` system calls, as well as ``send(2)``, "
"``sendmsg(2)``, ``recv(2)`` and ``recvmsg(2)``. Unlike the CAN_RAW socket "
"API, only the ISO-TP data field (the actual payload) is sent and received by "
"the userspace application using these calls. The address information and the "
"protocol information are automatically filled by the ISO-TP stack using the "
"configuration supplied during socket creation. In the same way, the stack "
"will use the transport mechanism when required (i.e., when the size of the "
"data payload exceeds the MTU of the underlying CAN bus)."
msgstr ""

#: ../../../networking/iso15765-2.rst:105
msgid ""
"The sockaddr structure used for SocketCAN has extensions for use with ISO-"
"TP, as specified below:"
msgstr ""

#: ../../../networking/iso15765-2.rst:119
msgid ""
"``can_family`` and ``can_ifindex`` serve the same purpose as for other "
"SocketCAN sockets."
msgstr ""

#: ../../../networking/iso15765-2.rst:122
msgid ""
"``can_addr.tp.rx_id`` specifies the receive (RX) CAN ID and will be used as "
"a RX filter."
msgstr ""

#: ../../../networking/iso15765-2.rst:125
msgid "``can_addr.tp.tx_id`` specifies the transmit (TX) CAN ID"
msgstr ""

#: ../../../networking/iso15765-2.rst:128
msgid "ISO-TP socket options"
msgstr ""

#: ../../../networking/iso15765-2.rst:130
msgid ""
"When creating an ISO-TP socket, reasonable defaults are set. Some options "
"can be modified with ``setsockopt(2)`` and/or read back with "
"``getsockopt(2)``."
msgstr ""

#: ../../../networking/iso15765-2.rst:134
msgid "General options"
msgstr ""

#: ../../../networking/iso15765-2.rst:136
msgid ""
"General socket options can be passed using the ``CAN_ISOTP_OPTS`` optname:"
msgstr ""

#: ../../../networking/iso15765-2.rst:143
msgid "where the ``can_isotp_options`` structure has the following contents:"
msgstr ""

#: ../../../networking/iso15765-2.rst:156
msgid ""
"``flags``: modifiers to be applied to the default behaviour of the ISO-TP "
"stack. Following flags are available:"
msgstr ""

#: ../../../networking/iso15765-2.rst:159
msgid ""
"``CAN_ISOTP_LISTEN_MODE``: listen only (do not send FC frames); normally "
"used as a testing feature."
msgstr ""

#: ../../../networking/iso15765-2.rst:162
msgid ""
"``CAN_ISOTP_EXTEND_ADDR``: use the byte specified in ``ext_address`` as an "
"additional address component. This enables the \"mixed\" addressing format "
"if used alone, or the \"extended\" addressing format if used in conjunction "
"with ``CAN_ISOTP_RX_EXT_ADDR``."
msgstr ""

#: ../../../networking/iso15765-2.rst:167
msgid ""
"``CAN_ISOTP_TX_PADDING``: enable padding for transmitted frames, using "
"``txpad_content`` as value for the padding bytes."
msgstr ""

#: ../../../networking/iso15765-2.rst:170
msgid ""
"``CAN_ISOTP_RX_PADDING``: enable padding for the received frames, using "
"``rxpad_content`` as value for the padding bytes."
msgstr ""

#: ../../../networking/iso15765-2.rst:173
msgid ""
"``CAN_ISOTP_CHK_PAD_LEN``: check for correct padding length on the received "
"frames."
msgstr ""

#: ../../../networking/iso15765-2.rst:176
msgid ""
"``CAN_ISOTP_CHK_PAD_DATA``: check padding bytes on the received frames "
"against ``rxpad_content``; if ``CAN_ISOTP_RX_PADDING`` is not specified, "
"this flag is ignored."
msgstr ""

#: ../../../networking/iso15765-2.rst:180
msgid ""
"``CAN_ISOTP_HALF_DUPLEX``: force ISO-TP socket in half duplex mode (that is, "
"transport mechanism can only be incoming or outgoing at the same time, not "
"both)."
msgstr ""

#: ../../../networking/iso15765-2.rst:184
msgid ""
"``CAN_ISOTP_FORCE_TXSTMIN``: ignore stmin from received FC; normally used as "
"a testing feature."
msgstr ""

#: ../../../networking/iso15765-2.rst:187
msgid ""
"``CAN_ISOTP_FORCE_RXSTMIN``: ignore CFs depending on rx stmin; normally used "
"as a testing feature."
msgstr ""

#: ../../../networking/iso15765-2.rst:190
msgid ""
"``CAN_ISOTP_RX_EXT_ADDR``: use ``rx_ext_address`` instead of ``ext_address`` "
"as extended addressing byte on the reception path. If used in conjunction "
"with ``CAN_ISOTP_EXTEND_ADDR``, this flag effectively enables the "
"\"extended\" addressing format."
msgstr ""

#: ../../../networking/iso15765-2.rst:195
msgid ""
"``CAN_ISOTP_WAIT_TX_DONE``: wait until the frame is sent before returning "
"from ``write(2)`` and ``send(2)`` calls (i.e., blocking write operations)."
msgstr ""

#: ../../../networking/iso15765-2.rst:198
msgid ""
"``CAN_ISOTP_SF_BROADCAST``: use 1-to-N functional addressing (cannot be "
"specified alongside ``CAN_ISOTP_CF_BROADCAST``)."
msgstr ""

#: ../../../networking/iso15765-2.rst:201
msgid ""
"``CAN_ISOTP_CF_BROADCAST``: use 1-to-N transmission without flow control "
"(cannot be specified alongside ``CAN_ISOTP_SF_BROADCAST``). NOTE: this is "
"not covered by the ISO 15765-2 standard."
msgstr ""

#: ../../../networking/iso15765-2.rst:205
msgid ""
"``CAN_ISOTP_DYN_FC_PARMS``: enable dynamic update of flow control parameters."
msgstr ""

#: ../../../networking/iso15765-2.rst:208
msgid ""
"``frame_txtime``: frame transmission time (defined as N_As/N_Ar inside the "
"ISO standard); if ``0``, the default (or the last set value) is used. To set "
"the transmission time to ``0``, the ``CAN_ISOTP_FRAME_TXTIME_ZERO`` macro "
"(equal to 0xFFFFFFFF) shall be used."
msgstr ""

#: ../../../networking/iso15765-2.rst:213
msgid ""
"``ext_address``: extended addressing byte, used if the "
"``CAN_ISOTP_EXTEND_ADDR`` flag is specified."
msgstr ""

#: ../../../networking/iso15765-2.rst:216
msgid "``txpad_content``: byte used as padding value for transmitted frames."
msgstr ""

#: ../../../networking/iso15765-2.rst:218
msgid "``rxpad_content``: byte used as padding value for received frames."
msgstr ""

#: ../../../networking/iso15765-2.rst:220
msgid ""
"``rx_ext_address``: extended addressing byte for the reception path, used if "
"the ``CAN_ISOTP_RX_EXT_ADDR`` flag is specified."
msgstr ""

#: ../../../networking/iso15765-2.rst:224
msgid "Flow Control options"
msgstr ""

#: ../../../networking/iso15765-2.rst:226
msgid ""
"Flow Control (FC) options can be passed using the ``CAN_ISOTP_RECV_FC`` "
"optname to provide the communication parameters for receiving ISO-TP PDUs."
msgstr ""

#: ../../../networking/iso15765-2.rst:234
msgid ""
"where the ``can_isotp_fc_options`` structure has the following contents:"
msgstr ""

#: ../../../networking/iso15765-2.rst:244
msgid "``bs``: blocksize provided in flow control frames."
msgstr ""

#: ../../../networking/iso15765-2.rst:246
msgid ""
"``stmin``: minimum separation time provided in flow control frames; can have "
"the following values (others are reserved):"
msgstr ""

#: ../../../networking/iso15765-2.rst:249
msgid "0x00 - 0x7F : 0 - 127 ms"
msgstr ""

#: ../../../networking/iso15765-2.rst:251
msgid "0xF1 - 0xF9 : 100 us - 900 us"
msgstr ""

#: ../../../networking/iso15765-2.rst:253
msgid ""
"``wftmax``: maximum number of wait frames provided in flow control frames."
msgstr ""

#: ../../../networking/iso15765-2.rst:256
msgid "Link Layer options"
msgstr ""

#: ../../../networking/iso15765-2.rst:258
msgid ""
"Link Layer (LL) options can be passed using the ``CAN_ISOTP_LL_OPTS`` "
"optname:"
msgstr ""

#: ../../../networking/iso15765-2.rst:265
msgid ""
"where the ``can_isotp_ll_options`` structure has the following contents:"
msgstr ""

#: ../../../networking/iso15765-2.rst:275
msgid ""
"``mtu``: generated and accepted CAN frame type, can be equal to ``CAN_MTU`` "
"for classical CAN frames or ``CANFD_MTU`` for CAN FD frames."
msgstr ""

#: ../../../networking/iso15765-2.rst:278
msgid ""
"``tx_dl``: maximum payload length for transmitted frames, can have one value "
"among: 8, 12, 16, 20, 24, 32, 48, 64. Values above 8 only apply to CAN FD "
"traffic (i.e.: ``mtu = CANFD_MTU``)."
msgstr ""

#: ../../../networking/iso15765-2.rst:282
msgid ""
"``tx_flags``: flags set into ``struct canfd_frame.flags`` at frame creation. "
"Only applies to CAN FD traffic (i.e.: ``mtu = CANFD_MTU``)."
msgstr ""

#: ../../../networking/iso15765-2.rst:286
msgid "Transmission stmin"
msgstr ""

#: ../../../networking/iso15765-2.rst:288
msgid ""
"The transmission minimum separation time (stmin) can be forced using the "
"``CAN_ISOTP_TX_STMIN`` optname and providing an stmin value in microseconds "
"as a 32bit unsigned integer; this will overwrite the value sent by the "
"receiver in flow control frames:"
msgstr ""

#: ../../../networking/iso15765-2.rst:299
msgid "Reception stmin"
msgstr ""

#: ../../../networking/iso15765-2.rst:301
msgid ""
"The reception minimum separation time (stmin) can be forced using the "
"``CAN_ISOTP_RX_STMIN`` optname and providing an stmin value in microseconds "
"as a 32bit unsigned integer; received Consecutive Frames (CF) which "
"timestamps differ less than this value will be ignored:"
msgstr ""

#: ../../../networking/iso15765-2.rst:312
msgid "Multi-frame transport support"
msgstr ""

#: ../../../networking/iso15765-2.rst:314
msgid ""
"The ISO-TP stack contained inside the Linux kernel supports the multi-frame "
"transport mechanism defined by the standard, with the following constraints:"
msgstr ""

#: ../../../networking/iso15765-2.rst:317
msgid ""
"the maximum size of a PDU is defined by a module parameter, with an hard "
"limit imposed at build time."
msgstr ""

#: ../../../networking/iso15765-2.rst:320
msgid ""
"when a transmission is in progress, subsequent calls to ``write(2)`` will "
"block, while calls to ``send(2)`` will either block or fail depending on the "
"presence of the ``MSG_DONTWAIT`` flag."
msgstr ""

#: ../../../networking/iso15765-2.rst:324
msgid ""
"no support is present for sending \"wait frames\": whether a PDU can be "
"fully received or not is decided when the First Frame is received."
msgstr ""

#: ../../../networking/iso15765-2.rst:328
msgid "Errors"
msgstr ""

#: ../../../networking/iso15765-2.rst:330
msgid "Following errors are reported to userspace:"
msgstr ""

#: ../../../networking/iso15765-2.rst:333
msgid "RX path errors"
msgstr ""

#: ../../../networking/iso15765-2.rst:336
msgid "-ETIMEDOUT"
msgstr ""

#: ../../../networking/iso15765-2.rst:336
msgid "timeout of data reception"
msgstr ""

#: ../../../networking/iso15765-2.rst:337
msgid "-EILSEQ"
msgstr ""

#: ../../../networking/iso15765-2.rst:337
msgid "sequence number mismatch during a multi-frame reception"
msgstr ""

#: ../../../networking/iso15765-2.rst:338
#: ../../../networking/iso15765-2.rst:347
msgid "-EBADMSG"
msgstr ""

#: ../../../networking/iso15765-2.rst:338
msgid "data reception with wrong padding"
msgstr ""

#: ../../../networking/iso15765-2.rst:342
msgid "TX path errors"
msgstr ""

#: ../../../networking/iso15765-2.rst:345
msgid "-ECOMM"
msgstr ""

#: ../../../networking/iso15765-2.rst:345
msgid "flow control reception timeout"
msgstr ""

#: ../../../networking/iso15765-2.rst:346
msgid "-EMSGSIZE"
msgstr ""

#: ../../../networking/iso15765-2.rst:346
msgid "flow control reception overflow"
msgstr ""

#: ../../../networking/iso15765-2.rst:347
msgid "flow control reception with wrong layout/padding"
msgstr ""

#: ../../../networking/iso15765-2.rst:351
msgid "Examples"
msgstr ""

#: ../../../networking/iso15765-2.rst:354
msgid "Basic node example"
msgstr ""

#: ../../../networking/iso15765-2.rst:356
msgid ""
"Following example implements a node using \"normal\" physical addressing, "
"with RX ID equal to 0x18DAF142 and a TX ID equal to 0x18DA42F1. All options "
"are left to their default."
msgstr ""

#: ../../../networking/iso15765-2.rst:382
msgid "Additional examples"
msgstr ""

#: ../../../networking/iso15765-2.rst:384
msgid ""
"More complete (and complex) examples can be found inside the ``isotp*`` "
"userland tools, distributed as part of the ``can-utils`` utilities at: "
"https://github.com/linux-can/can-utils"
msgstr ""
