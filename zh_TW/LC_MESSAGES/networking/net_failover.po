# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../networking/net_failover.rst:5
msgid "NET_FAILOVER"
msgstr ""

#: ../../../networking/net_failover.rst:8
msgid "Overview"
msgstr ""

#: ../../../networking/net_failover.rst:10
msgid ""
"The net_failover driver provides an automated failover mechanism via APIs to "
"create and destroy a failover master netdev and manages a primary and "
"standby slave netdevs that get registered via the generic failover "
"infrastructure."
msgstr ""

#: ../../../networking/net_failover.rst:15
msgid ""
"The failover netdev acts a master device and controls 2 slave devices. The "
"original paravirtual interface is registered as 'standby' slave netdev and a "
"passthru/vf device with the same MAC gets registered as 'primary' slave "
"netdev. Both 'standby' and 'failover' netdevs are associated with the same "
"'pci' device. The user accesses the network interface via 'failover' netdev. "
"The 'failover' netdev chooses 'primary' netdev as default for transmits when "
"it is available with link up and running."
msgstr ""

#: ../../../networking/net_failover.rst:23
msgid ""
"This can be used by paravirtual drivers to enable an alternate low latency "
"datapath. It also enables hypervisor controlled live migration of a VM with "
"direct attached VF by failing over to the paravirtual datapath when the VF "
"is unplugged."
msgstr ""

#: ../../../networking/net_failover.rst:29
msgid "virtio-net accelerated datapath: STANDBY mode"
msgstr ""

#: ../../../networking/net_failover.rst:31
msgid ""
"net_failover enables hypervisor controlled accelerated datapath to virtio-"
"net enabled VMs in a transparent manner with no/minimal guest userspace "
"changes."
msgstr ""

#: ../../../networking/net_failover.rst:34
msgid ""
"To support this, the hypervisor needs to enable VIRTIO_NET_F_STANDBY feature "
"on the virtio-net interface and assign the same MAC address to both virtio-"
"net and VF interfaces."
msgstr ""

#: ../../../networking/net_failover.rst:38
msgid ""
"Here is an example libvirt XML snippet that shows such configuration: ::"
msgstr ""

#: ../../../networking/net_failover.rst:59
msgid ""
"In this configuration, the first device definition is for the virtio-net "
"interface and this acts as the 'persistent' device indicating that this "
"interface will always be plugged in. This is specified by the 'teaming' tag "
"with required attribute type having value 'persistent'. The link state for "
"the virtio-net device is set to 'down' to ensure that the 'failover' netdev "
"prefers the VF passthrough device for normal communication. The virtio-net "
"device will be brought UP during live migration to allow uninterrupted "
"communication."
msgstr ""

#: ../../../networking/net_failover.rst:67
msgid ""
"The second device definition is for the VF passthrough interface. Here the "
"'teaming' tag is provided with type 'transient' indicating that this device "
"may periodically be unplugged. A second attribute - 'persistent' is provided "
"and points to the alias name declared for the virtio-net device."
msgstr ""

#: ../../../networking/net_failover.rst:72
msgid ""
"Booting a VM with the above configuration will result in the following 3 "
"interfaces created in the VM: ::"
msgstr ""

#: ../../../networking/net_failover.rst:87
msgid ""
"Here, ens10 is the 'failover' master interface, ens10nsby is the slave "
"'standby' virtio-net interface, and ens11 is the slave 'primary' VF "
"passthrough interface."
msgstr ""

#: ../../../networking/net_failover.rst:90
msgid ""
"One point to note here is that some user space network configuration daemons "
"like systemd-networkd, ifupdown, etc, do not understand the 'net_failover' "
"device; and on the first boot, the VM might end up with both 'failover' "
"device and VF acquiring IP addresses (either same or different) from the "
"DHCP server. This will result in lack of connectivity to the VM. So some "
"tweaks might be needed to these network configuration daemons to make sure "
"that an IP is received only on the 'failover' device."
msgstr ""

#: ../../../networking/net_failover.rst:98
msgid ""
"Below is the patch snippet used with 'cloud-ifupdown-helper' script found on "
"Debian cloud images:"
msgstr ""

#: ../../../networking/net_failover.rst:101
#: ../../../networking/net_failover.rst:177
msgid "::"
msgstr ""

#: ../../../networking/net_failover.rst:102
msgid "@@ -27,6 +27,8 @@ do_setup() {"
msgstr ""

#: ../../../networking/net_failover.rst:103
msgid ""
"local working=\"$cfgdir/.$INTERFACE\" local final=\"$cfgdir/$INTERFACE\""
msgstr ""

#: ../../../networking/net_failover.rst:106
msgid "if [ -d \"/sys/class/net/${INTERFACE}/master\" ]; then exit 0; fi"
msgstr ""

#: ../../../networking/net_failover.rst:108
msgid "if ifup --no-act \"$INTERFACE\" > /dev/null 2>&1; then"
msgstr ""

#: ../../../networking/net_failover.rst:109
msgid ""
"# interface is already known to ifupdown, no need to generate cfg log "
"\"Skipping configuration generation for $INTERFACE\""
msgstr ""

#: ../../../networking/net_failover.rst:114
msgid "Live Migration of a VM with SR-IOV VF & virtio-net in STANDBY mode"
msgstr ""

#: ../../../networking/net_failover.rst:116
msgid ""
"net_failover also enables hypervisor controlled live migration to be "
"supported with VMs that have direct attached SR-IOV VF devices by automatic "
"failover to the paravirtual datapath when the VF is unplugged."
msgstr ""

#: ../../../networking/net_failover.rst:120
msgid ""
"Here is a sample script that shows the steps to initiate live migration from "
"the source hypervisor. Note: It is assumed that the VM is connected to a "
"software bridge 'br0' which has a single VF attached to it along with the "
"vnet device to the VM. This is not the VF that was passthrough'd to the VM "
"(seen in the vf.xml file). ::"
msgstr ""

#: ../../../networking/net_failover.rst:169
msgid ""
"On the destination hypervisor, a shared bridge 'br0' is created before "
"migration starts, and a VF from the destination PF is added to the bridge. "
"Similarly an appropriate FDB entry is added."
msgstr ""

#: ../../../networking/net_failover.rst:173
msgid ""
"The following script is executed on the destination hypervisor once "
"migration completes, and it reattaches the VF to the VM and brings down the "
"virtio-net interface."
msgstr ""

#: ../../../networking/net_failover.rst:178
msgid "# reattach-vf.sh #!/bin/bash"
msgstr ""

#: ../../../networking/net_failover.rst:181
msgid ""
"bridge fdb del 52:54:00:00:12:53 dev ens36v0 bridge fdb del "
"52:54:00:00:12:53 dev vmtap01 master virsh attach-device --config --live "
"vm01 vf.xml virsh domif-setlink vm01 vmtap01 down"
msgstr ""
