# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../userspace-api/netlink/genetlink-legacy.rst:5
msgid "Netlink specification support for legacy Generic Netlink families"
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:7
msgid ""
"This document describes the many additional quirks and properties required "
"to describe older Generic Netlink families which form the ``genetlink-"
"legacy`` protocol level."
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:12
msgid "Specification"
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:15
msgid "Globals"
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:17
msgid "Attributes listed directly at the root level of the spec file."
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:20
msgid "version"
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:22
msgid "Generic Netlink family version, default is 1."
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:24
msgid ""
"``version`` has historically been used to introduce family changes which may "
"break backwards compatibility. Since compatibility breaking changes are "
"generally not allowed ``version`` is very rarely used."
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:29
msgid "Attribute type nests"
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:31
msgid ""
"New Netlink families should use ``multi-attr`` to define arrays. Older "
"families (e.g. ``genetlink`` control family) attempted to define array types "
"reusing attribute type to carry information."
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:35
msgid "For reference the ``multi-attr`` array may look like this::"
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:47
msgid "where ``ARRAY-ATTR`` is the array entry type."
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:50
msgid "indexed-array"
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:52
msgid ""
"``indexed-array`` wraps the entire array in an extra attribute (hence "
"limiting its size to 64kB). The ``ENTRY`` nests are special and have the "
"index of the entry as their type instead of normal attribute type."
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:56
msgid ""
"A ``sub-type`` is needed to describe what type in the ``ENTRY``. A ``nest`` "
"``sub-type`` means there are nest arrays in the ``ENTRY``, with the "
"structure looks like::"
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:69
msgid ""
"Other ``sub-type`` like ``u32`` means there is only one member as described "
"in ``sub-type`` in the ``ENTRY``. The structure looks like::"
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:78
msgid "type-value"
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:80
msgid ""
"``type-value`` is a construct which uses attribute types to carry "
"information about a single object (often used when array is dumped entry-by-"
"entry)."
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:84
msgid ""
"``type-value`` can have multiple levels of nesting, for example genetlink's "
"policy dumps create the following structures::"
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:92
msgid ""
"Where the first level of nest has the policy index as it's attribute type, "
"it contains a single nest which has the attribute index as its type. Inside "
"the attr-index nest are the policy attributes. Modern Netlink families "
"should have instead defined this as a flat structure, the nesting serves no "
"good purpose here."
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:99
msgid "Operations"
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:102
msgid "Enum (message ID) model"
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:105
msgid "unified"
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:107
msgid ""
"Modern families use the ``unified`` message ID model, which uses a single "
"enumeration for all messages within family. Requests and responses share the "
"same message ID. Notifications have separate IDs from the same space. For "
"example given the following list of operations:"
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:130
msgid ""
"Requests and responses for operation ``a`` will have the ID of 1, the "
"requests and responses of ``b`` - 2 (since there is no explicit ``value`` "
"it's previous operation ``+ 1``). Notification ``c`` will use the ID of 4, "
"operation ``d`` 5 etc."
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:136
msgid "directional"
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:138
msgid ""
"The ``directional`` model splits the ID assignment by the direction of the "
"message. Messages from and to the kernel can't be confused with each other "
"so this conserves the ID space (at the cost of making the programming more "
"cumbersome)."
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:143
msgid ""
"In this case ``value`` attribute should be specified in the ``request`` "
"``reply`` sections of the operations (if an operation has both ``do`` and "
"``dump`` the IDs are shared, ``value`` should be set in ``do``). For "
"notifications the ``value`` is provided at the op level but it only "
"allocates a ``reply`` (i.e. a \"from-kernel\" ID). Let's look at an example:"
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:172
msgid ""
"In this case ``a`` will use 2 when sending the message to the kernel and "
"expects message with ID 1 in response. Notification ``b`` allocates a \"from-"
"kernel\" ID which is 2. ``c`` allocates \"from-kernel\" ID of 7. If "
"operation ``d`` does not set ``values`` explicitly in the spec it will be "
"allocated 3 for the request (``a`` is the previous operation with a request "
"section and the value of 2) and 8 for response (``c`` is the previous "
"operation in the \"from-kernel\" direction)."
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:181
msgid "Other quirks"
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:184
msgid "Structures"
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:186
msgid ""
"Legacy families can define C structures both to be used as the contents of "
"an attribute and as a fixed message header. Structures are defined in "
"``definitions``  and referenced in operations or attributes."
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:191
msgid "members"
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:193
msgid "``name`` - The attribute name of the struct member"
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:194
msgid ""
"``type`` - One of the scalar types ``u8``, ``u16``, ``u32``, ``u64``, "
"``s8``, ``s16``, ``s32``, ``s64``, ``string``, ``binary`` or ``bitfield32``."
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:196
msgid "``byte-order`` - ``big-endian`` or ``little-endian``"
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:197
msgid ""
"``doc``, ``enum``, ``enum-as-flags``, ``display-hint`` - Same as for :ref:"
"`attribute definitions <attribute_properties>`"
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:200
msgid ""
"Note that structures defined in YAML are implicitly packed according to C "
"conventions. For example, the following struct is 4 bytes, not 6 bytes:"
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:211
msgid ""
"Any padding must be explicitly added and C-like languages should infer the "
"need for explicit padding from whether the members are naturally aligned."
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:214
msgid "Here is the struct definition from above, declared in YAML:"
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:234
msgid "Fixed Headers"
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:236
msgid ""
"Fixed message headers can be added to operations using ``fixed-header``. The "
"default ``fixed-header`` can be set in ``operations`` and it can be set or "
"overridden for each operation."
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:251
msgid "Attributes"
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:253
msgid ""
"A ``binary`` attribute can be interpreted as a C structure using a "
"``struct`` property with the name of the structure definition. The "
"``struct`` property implies ``sub-type: struct`` so it is not necessary to "
"specify a sub-type."
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:270
msgid "C Arrays"
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:272
msgid ""
"Legacy families also use ``binary`` attributes to encapsulate C arrays. The "
"``sub-type`` is used to identify the type of scalar to extract."
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:284
msgid "Multi-message DO"
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:286
msgid ""
"New Netlink families should never respond to a DO operation with multiple "
"replies, with ``NLM_F_MULTI`` set. Use a filtered dump instead."
msgstr ""

#: ../../../userspace-api/netlink/genetlink-legacy.rst:289
msgid ""
"At the spec level we can define a ``dumps`` property for the ``do``, perhaps "
"with values of ``combine`` and ``multi-object`` depending on how the parsing "
"should be implemented (parse into a single reply vs list of objects i.e. "
"pretty much a dump)."
msgstr ""
