# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../dev-tools/kunit/faq.rst:5
msgid "Frequently Asked Questions"
msgstr ""

#: ../../../dev-tools/kunit/faq.rst:8
msgid "How is this different from Autotest, kselftest, and so on?"
msgstr ""

#: ../../../dev-tools/kunit/faq.rst:9
msgid ""
"KUnit is a unit testing framework. Autotest, kselftest (and some others) are "
"not."
msgstr ""

#: ../../../dev-tools/kunit/faq.rst:12
msgid ""
"A `unit test <https://martinfowler.com/bliki/UnitTest.html>`_ is supposed to "
"test a single unit of code in isolation and hence the name *unit test*. A "
"unit test should be the finest granularity of testing and should allow all "
"possible code paths to be tested in the code under test. This is only "
"possible if the code under test is small and does not have any external "
"dependencies outside of the test's control like hardware."
msgstr ""

#: ../../../dev-tools/kunit/faq.rst:19
msgid ""
"There are no testing frameworks currently available for the kernel that do "
"not require installing the kernel on a test machine or in a virtual machine. "
"All testing frameworks require tests to be written in userspace and run on "
"the kernel under test. This is true for Autotest, kselftest, and some "
"others, disqualifying any of them from being considered unit testing "
"frameworks."
msgstr ""

#: ../../../dev-tools/kunit/faq.rst:26
msgid "Does KUnit support running on architectures other than UML?"
msgstr ""

#: ../../../dev-tools/kunit/faq.rst:28
msgid "Yes, mostly."
msgstr ""

#: ../../../dev-tools/kunit/faq.rst:30
msgid ""
"For the most part, the KUnit core framework (what we use to write the tests) "
"can compile to any architecture. It compiles like just another part of the "
"kernel and runs when the kernel boots, or when built as a module, when the "
"module is loaded.  However, there is infrastructure, like the KUnit Wrapper "
"(``tools/testing/kunit/kunit.py``) that might not support some architectures "
"(see :ref:`kunit-on-qemu`)."
msgstr ""

#: ../../../dev-tools/kunit/faq.rst:37
msgid ""
"In short, yes, you can run KUnit on other architectures, but it might "
"require more work than using KUnit on UML."
msgstr ""

#: ../../../dev-tools/kunit/faq.rst:40
msgid "For more information, see :ref:`kunit-on-non-uml`."
msgstr ""

#: ../../../dev-tools/kunit/faq.rst:45
msgid "What is the difference between a unit test and other kinds of tests?"
msgstr ""

#: ../../../dev-tools/kunit/faq.rst:46
msgid ""
"Most existing tests for the Linux kernel would be categorized as an "
"integration test, or an end-to-end test."
msgstr ""

#: ../../../dev-tools/kunit/faq.rst:49
msgid ""
"A unit test is supposed to test a single unit of code in isolation. A unit "
"test should be the finest granularity of testing and, as such, allows all "
"possible code paths to be tested in the code under test. This is only "
"possible if the code under test is small and does not have any external "
"dependencies outside of the test's control like hardware."
msgstr ""

#: ../../../dev-tools/kunit/faq.rst:54
msgid ""
"An integration test tests the interaction between a minimal set of "
"components, usually just two or three. For example, someone might write an "
"integration test to test the interaction between a driver and a piece of "
"hardware, or to test the interaction between the userspace libraries the "
"kernel provides and the kernel itself. However, one of these tests would "
"probably not test the entire kernel along with hardware interactions and "
"interactions with the userspace."
msgstr ""

#: ../../../dev-tools/kunit/faq.rst:61
msgid ""
"An end-to-end test usually tests the entire system from the perspective of "
"the code under test. For example, someone might write an end-to-end test for "
"the kernel by installing a production configuration of the kernel on "
"production hardware with a production userspace and then trying to exercise "
"some behavior that depends on interactions between the hardware, the kernel, "
"and userspace."
msgstr ""

#: ../../../dev-tools/kunit/faq.rst:68
msgid "KUnit is not working, what should I do?"
msgstr ""

#: ../../../dev-tools/kunit/faq.rst:70
msgid ""
"Unfortunately, there are a number of things which can break, but here are "
"some things to try."
msgstr ""

#: ../../../dev-tools/kunit/faq.rst:73
msgid ""
"Run ``./tools/testing/kunit/kunit.py run`` with the ``--raw_output`` "
"parameter. This might show details or error messages hidden by the "
"kunit_tool parser."
msgstr ""

#: ../../../dev-tools/kunit/faq.rst:76
msgid ""
"Instead of running ``kunit.py run``, try running ``kunit.py config``, "
"``kunit.py build``, and ``kunit.py exec`` independently. This can help track "
"down where an issue is occurring. (If you think the parser is at fault, you "
"can run it manually against ``stdin`` or a file with ``kunit.py parse``.)"
msgstr ""

#: ../../../dev-tools/kunit/faq.rst:80
msgid ""
"Running the UML kernel directly can often reveal issues or error messages, "
"``kunit_tool`` ignores. This should be as simple as running ``./vmlinux`` "
"after building the UML kernel (for example, by using ``kunit.py build``). "
"Note that UML has some unusual requirements (such as the host having a tmpfs "
"filesystem mounted), and has had issues in the past when built statically "
"and the host has KASLR enabled. (On older host kernels, you may need to run "
"``setarch `uname -m` -R ./vmlinux`` to disable KASLR.)"
msgstr ""

#: ../../../dev-tools/kunit/faq.rst:87
msgid ""
"Make sure the kernel .config has ``CONFIG_KUNIT=y`` and at least one test (e."
"g. ``CONFIG_KUNIT_EXAMPLE_TEST=y``). kunit_tool will keep its .config "
"around, so you can see what config was used after running ``kunit.py run``. "
"It also preserves any config changes you might make, so you can enable/"
"disable things with ``make ARCH=um menuconfig`` or similar, and then re-run "
"kunit_tool."
msgstr ""

#: ../../../dev-tools/kunit/faq.rst:93
msgid ""
"Try to run ``make ARCH=um defconfig`` before running ``kunit.py run``. This "
"may help clean up any residual config items which could be causing problems."
msgstr ""

#: ../../../dev-tools/kunit/faq.rst:95
msgid ""
"Finally, try running KUnit outside UML. KUnit and KUnit tests can be built "
"into any kernel, or can be built as a module and loaded at runtime. Doing so "
"should allow you to determine if UML is causing the issue you're seeing. "
"When tests are built-in, they will execute when the kernel boots, and "
"modules will automatically execute associated tests when loaded. Test "
"results can be collected from ``/sys/kernel/debug/kunit/<test suite>/"
"results``, and can be parsed with ``kunit.py parse``. For more details, see :"
"ref:`kunit-on-qemu`."
msgstr ""

#: ../../../dev-tools/kunit/faq.rst:103
msgid ""
"If none of the above tricks help, you are always welcome to email any issues "
"to kunit-dev@googlegroups.com."
msgstr ""
