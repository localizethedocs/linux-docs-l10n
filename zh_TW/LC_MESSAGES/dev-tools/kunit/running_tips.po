# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../dev-tools/kunit/running_tips.rst:5
msgid "Tips For Running KUnit Tests"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:8
msgid "Using ``kunit.py run`` (\"kunit tool\")"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:11
msgid "Running from any directory"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:13
msgid "It can be handy to create a bash function like:"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:22
msgid ""
"Early versions of ``kunit.py`` (before 5.6) didn't work unless run from the "
"kernel root, hence the use of a subshell and ``cd``."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:26
msgid "Running a subset of tests"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:28
msgid ""
"``kunit.py run`` accepts an optional glob argument to filter tests. The "
"format is ``\"<suite_glob>[.test_glob]\"``."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:31
msgid "Say that we wanted to run the sysctl tests, we could do so via:"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:38
msgid "We can filter down to just the \"write\" tests via:"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:45
msgid ""
"We're paying the cost of building more tests than we need this way, but it's "
"easier than fiddling with ``.kunitconfig`` files or commenting out "
"``kunit_suite``'s."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:49
msgid ""
"However, if we wanted to define a set of tests in a less ad hoc way, the "
"next tip is useful."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:53
msgid "Defining a set of tests"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:55
msgid ""
"``kunit.py run`` (along with ``build``, and ``config``) supports a ``--"
"kunitconfig`` flag. So if you have a set of tests that you want to run on a "
"regular basis (especially if they have other dependencies), you can create a "
"specific ``.kunitconfig`` for them."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:60
msgid "E.g. kunit has one for its tests:"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:66
msgid ""
"Alternatively, if you're following the convention of naming your file ``."
"kunitconfig``, you can just pass in the dir, e.g."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:74
msgid ""
"This is a relatively new feature (5.12+) so we don't have any conventions "
"yet about on what files should be checked in versus just kept around "
"locally. It's up to you and your maintainer to decide if a config is useful "
"enough to submit (and therefore have to maintain)."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:80
msgid ""
"Having ``.kunitconfig`` fragments in a parent and child directory is iffy. "
"There's discussion about adding an \"import\" statement in these files to "
"make it possible to have a top-level config run tests from all child "
"directories. But that would mean ``.kunitconfig`` files are no longer just "
"simple .config fragments."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:86
msgid ""
"One alternative would be to have kunit tool recursively combine configs "
"automagically, but tests could theoretically depend on incompatible options, "
"so handling that would be tricky."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:91
msgid "Setting kernel commandline parameters"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:93
msgid "You can use ``--kernel_args`` to pass arbitrary kernel arguments, e.g."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:101
msgid "Generating code coverage reports under UML"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:104
msgid ""
"TODO(brendanhiggins@google.com): There are various issues with UML and "
"versions of gcc 7 and up. You're likely to run into missing ``.gcda`` files "
"or compile errors."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:108
msgid ""
"This is different from the \"normal\" way of getting coverage information "
"that is documented in Documentation/dev-tools/gcov.rst."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:111
msgid "Instead of enabling ``CONFIG_GCOV_KERNEL=y``, we can set these options:"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:121
msgid "Putting it together into a copy-pastable sequence of commands:"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:135
msgid "If your installed version of gcc doesn't work, you can tweak the steps:"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:142
msgid "Alternatively, LLVM-based toolchains can also be used:"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:155
msgid "Running tests manually"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:157
msgid ""
"Running tests without using ``kunit.py run`` is also an important use case. "
"Currently it's your only option if you want to test on architectures other "
"than UML."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:161
msgid ""
"As running the tests under UML is fairly straightforward (configure and "
"compile the kernel, run the ``./linux`` binary), this section will focus on "
"testing non-UML architectures."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:167
msgid "Running built-in tests"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:169
msgid ""
"When setting tests to ``=y``, the tests will run as part of boot and print "
"results to dmesg in TAP format. So you just need to add your tests to your "
"``.config``, build and boot your kernel as normal."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:173
msgid "So if we compiled our kernel with:"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:180
msgid ""
"Then we'd see output like this in dmesg signaling the test ran and passed:"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:193
msgid "Running tests as modules"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:195
msgid "Depending on the tests, you can build them as loadable modules."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:197
msgid "For example, we'd change the config options from before to"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:204
msgid "Then after booting into our kernel, we can run the test via"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:210
msgid "This will then cause it to print TAP output to stdout."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:213
msgid ""
"The ``modprobe`` will *not* have a non-zero exit code if any test failed (as "
"of 5.13). But ``kunit.py parse`` would, see below."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:217
msgid ""
"You can set ``CONFIG_KUNIT=m`` as well, however, some features will not work "
"and thus some tests might break. Ideally tests would specify they depend on "
"``KUNIT=y`` in their ``Kconfig``'s, but this is an edge case most test "
"authors won't think about. As of 5.13, the only difference is that ``current-"
">kunit_test`` will not exist."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:225
msgid "Pretty-printing results"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:227
msgid ""
"You can use ``kunit.py parse`` to parse dmesg for test output and print out "
"results in the same familiar format that ``kunit.py run`` does."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:236
msgid "Retrieving per suite results"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:238
msgid ""
"Regardless of how you're running your tests, you can enable "
"``CONFIG_KUNIT_DEBUGFS`` to expose per-suite TAP-formatted results:"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:247
msgid ""
"The results for each suite will be exposed under ``/sys/kernel/debug/kunit/"
"<suite>/results``. So using our example config:"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:263
msgid "Generating code coverage reports"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:265
msgid "See Documentation/dev-tools/gcov.rst for details on how to do this."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:267
msgid ""
"The only vaguely KUnit-specific advice here is that you probably want to "
"build your tests as modules. That way you can isolate the coverage from "
"tests from other code executed during boot, e.g."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:279
msgid "Test Attributes and Filtering"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:281
msgid ""
"Test suites and cases can be marked with test attributes, such as speed of "
"test. These attributes will later be printed in test output and can be used "
"to filter test execution."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:286
msgid "Marking Test Attributes"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:288
msgid ""
"Tests are marked with an attribute by including a ``kunit_attributes`` "
"object in the test definition."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:291
msgid ""
"Test cases can be marked using the ``KUNIT_CASE_ATTR(test_name, "
"attributes)`` macro to define the test case instead of "
"``KUNIT_CASE(test_name)``."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:305
msgid ""
"To mark a test case as slow, you can also use "
"``KUNIT_CASE_SLOW(test_name)``. This is a helpful macro as the slow "
"attribute is the most commonly used."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:308
msgid ""
"Test suites can be marked with an attribute by setting the \"attr\" field in "
"the suite definition."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:323
msgid ""
"Not all attributes need to be set in a ``kunit_attributes`` object. Unset "
"attributes will remain uninitialized and act as though the attribute is set "
"to 0 or NULL. Thus, if an attribute is set to 0, it is treated as unset. "
"These unset attributes will not be reported and may act as a default value "
"for filtering purposes."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:330
msgid "Reporting Attributes"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:332
msgid ""
"When a user runs tests, attributes will be present in the raw kernel output "
"(in KTAP format). Note that attributes will be hidden by default in kunit.py "
"output for all passing tests but the raw kernel output can be accessed using "
"the ``--raw_output`` flag. This is an example of how test attributes for "
"test cases will be formatted in kernel output:"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:343
msgid ""
"This is an example of how test attributes for test suites will be formatted "
"in kernel output:"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:355
msgid ""
"Additionally, users can output a full attribute report of tests with their "
"attributes, using the command line flag ``--list_tests_attr``:"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:363
msgid ""
"This report can be accessed when running KUnit manually by passing in the "
"module_param ``kunit.action=list_attr``."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:367
msgid "Filtering"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:369
msgid ""
"Users can filter tests using the ``--filter`` command line flag when running "
"tests. As an example:"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:377
msgid ""
"You can also use the following operations on filters: \"<\", \">\", \"<=\", "
"\">=\", \"!=\", and \"=\". Example:"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:384
msgid ""
"This example will run all tests with speeds faster than slow. Note that the "
"characters < and > are often interpreted by the shell, so they may need to "
"be quoted or escaped, as above."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:388
msgid ""
"Additionally, you can use multiple filters at once. Simply separate filters "
"using commas. Example:"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:396
msgid ""
"You can use this filtering feature when running KUnit manually by passing "
"the filter as a module param: ``kunit.filter=\"speed>slow, speed<=normal\"``."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:399
msgid ""
"Filtered tests will not run or show up in the test output. You can use the "
"``--filter_action=skip`` flag to skip filtered tests instead. These tests "
"will be shown in the test output in the test but will not run. To use this "
"feature when running KUnit manually, use the module param ``kunit."
"filter_action=skip``."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:405
msgid "Rules of Filtering Procedure"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:407
msgid ""
"Since both suites and test cases can have attributes, there may be conflicts "
"between attributes during filtering. The process of filtering follows these "
"rules:"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:411
msgid "Filtering always operates at a per-test level."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:413
msgid "If a test has an attribute set, then the test's value is filtered on."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:415
msgid "Otherwise, the value falls back to the suite's value."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:417
msgid ""
"If neither are set, the attribute has a global \"default\" value, which is "
"used."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:420
msgid "List of Current Attributes"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:422
msgid "``speed``"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:424
msgid ""
"This attribute indicates the speed of a test's execution (how slow or fast "
"the test is)."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:427
msgid ""
"This attribute is saved as an enum with the following categories: "
"\"normal\", \"slow\", or \"very_slow\". The assumed default speed for tests "
"is \"normal\". This indicates that the test takes a relatively trivial "
"amount of time (less than 1 second), regardless of the machine it is running "
"on. Any test slower than this could be marked as \"slow\" or \"very_slow\"."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:433
msgid ""
"The macro ``KUNIT_CASE_SLOW(test_name)`` can be easily used to set the speed "
"of a test case to \"slow\"."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:436
msgid "``module``"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:438
msgid ""
"This attribute indicates the name of the module associated with the test."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:440
msgid ""
"This attribute is automatically saved as a string and is printed for each "
"suite. Tests can also be filtered using this attribute."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:443
msgid "``is_init``"
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:445
msgid "This attribute indicates whether the test uses init data or functions."
msgstr ""

#: ../../../dev-tools/kunit/running_tips.rst:447
msgid ""
"This attribute is automatically saved as a boolean and tests can also be "
"filtered using this attribute."
msgstr ""
