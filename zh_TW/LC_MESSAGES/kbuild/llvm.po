# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../kbuild/llvm.rst:5
msgid "Building Linux with Clang/LLVM"
msgstr ""

#: ../../../kbuild/llvm.rst:7
msgid ""
"This document covers how to build the Linux kernel with Clang and LLVM "
"utilities."
msgstr ""

#: ../../../kbuild/llvm.rst:11
msgid "About"
msgstr ""

#: ../../../kbuild/llvm.rst:13
msgid ""
"The Linux kernel has always traditionally been compiled with GNU toolchains "
"such as GCC and binutils. Ongoing work has allowed for `Clang <https://clang."
"llvm.org/>`_ and `LLVM <https://llvm.org/>`_ utilities to be used as viable "
"substitutes. Distributions such as `Android <https://www.android.com/>`_, "
"`ChromeOS <https://www.chromium.org/chromium-os>`_, `OpenMandriva <https://"
"www.openmandriva.org/>`_, and `Chimera Linux <https://chimera-linux.org/>`_ "
"use Clang built kernels. Google's and Meta's datacenter fleets also run "
"kernels built with Clang."
msgstr ""

#: ../../../kbuild/llvm.rst:23
msgid ""
"`LLVM is a collection of toolchain components implemented in terms of C++ "
"objects <https://www.aosabook.org/en/llvm.html>`_. Clang is a front-end to "
"LLVM that supports C and the GNU C extensions required by the kernel, and is "
"pronounced \"klang,\" not \"see-lang.\""
msgstr ""

#: ../../../kbuild/llvm.rst:29
msgid "Building with LLVM"
msgstr ""

#: ../../../kbuild/llvm.rst:31
msgid "Invoke ``make`` via::"
msgstr ""

#: ../../../kbuild/llvm.rst:35
msgid "to compile for the host target. For cross compiling::"
msgstr ""

#: ../../../kbuild/llvm.rst:40
msgid "The LLVM= argument"
msgstr ""

#: ../../../kbuild/llvm.rst:42
msgid ""
"LLVM has substitutes for GNU binutils utilities. They can be enabled "
"individually. The full list of supported make variables::"
msgstr ""

#: ../../../kbuild/llvm.rst:49
msgid "``LLVM=1`` expands to the above."
msgstr ""

#: ../../../kbuild/llvm.rst:51
msgid ""
"If your LLVM tools are not available in your PATH, you can supply their "
"location using the LLVM variable with a trailing slash::"
msgstr ""

#: ../../../kbuild/llvm.rst:56
msgid ""
"which will use ``/path/to/llvm/clang``, ``/path/to/llvm/ld.lld``, etc. The "
"following may also be used::"
msgstr ""

#: ../../../kbuild/llvm.rst:61
msgid ""
"If your LLVM tools have a version suffix and you want to test with that "
"explicit version rather than the unsuffixed executables like ``LLVM=1``, you "
"can pass the suffix using the ``LLVM`` variable::"
msgstr ""

#: ../../../kbuild/llvm.rst:67
msgid "which will use ``clang-14``, ``ld.lld-14``, etc."
msgstr ""

#: ../../../kbuild/llvm.rst:69
msgid ""
"To support combinations of out of tree paths with version suffixes, we "
"recommend::"
msgstr ""

#: ../../../kbuild/llvm.rst:74
msgid ""
"``LLVM=0`` is not the same as omitting ``LLVM`` altogether, it will behave "
"like ``LLVM=1``. If you only wish to use certain LLVM utilities, use their "
"respective make variables."
msgstr ""

#: ../../../kbuild/llvm.rst:78
msgid ""
"The same value used for ``LLVM=`` should be set for each invocation of "
"``make`` if configuring and building via distinct commands. ``LLVM=`` should "
"also be set as an environment variable when running scripts that will "
"eventually run ``make``."
msgstr ""

#: ../../../kbuild/llvm.rst:84
msgid "Cross Compiling"
msgstr ""

#: ../../../kbuild/llvm.rst:86
msgid ""
"A single Clang compiler binary (and corresponding LLVM utilities) will "
"typically contain all supported back ends, which can help simplify cross "
"compiling especially when ``LLVM=1`` is used. If you use only LLVM tools, "
"``CROSS_COMPILE`` or target-triple-prefixes become unnecessary. Example::"
msgstr ""

#: ../../../kbuild/llvm.rst:93
msgid ""
"As an example of mixing LLVM and GNU utilities, for a target like "
"``ARCH=s390`` which does not yet have ``ld.lld`` or ``llvm-objcopy`` "
"support, you could invoke ``make`` via::"
msgstr ""

#: ../../../kbuild/llvm.rst:100
msgid ""
"This example will invoke ``s390x-linux-gnu-ld.bfd`` as the linker and "
"``s390x-linux-gnu-objcopy``, so ensure those are reachable in your ``$PATH``."
msgstr ""

#: ../../../kbuild/llvm.rst:103
msgid ""
"``CROSS_COMPILE`` is not used to prefix the Clang compiler binary (or "
"corresponding LLVM utilities) as is the case for GNU utilities when "
"``LLVM=1`` is not set."
msgstr ""

#: ../../../kbuild/llvm.rst:108
msgid "The LLVM_IAS= argument"
msgstr ""

#: ../../../kbuild/llvm.rst:110
msgid ""
"Clang can assemble assembler code. You can pass ``LLVM_IAS=0`` to disable "
"this behavior and have Clang invoke the corresponding non-integrated "
"assembler instead. Example::"
msgstr ""

#: ../../../kbuild/llvm.rst:116
msgid ""
"``CROSS_COMPILE`` is necessary when cross compiling and ``LLVM_IAS=0`` is "
"used in order to set ``--prefix=`` for the compiler to find the "
"corresponding non-integrated assembler (typically, you don't want to use the "
"system assembler when targeting another architecture). Example::"
msgstr ""

#: ../../../kbuild/llvm.rst:125
msgid "Ccache"
msgstr ""

#: ../../../kbuild/llvm.rst:127
msgid ""
"``ccache`` can be used with ``clang`` to improve subsequent builds, (though "
"KBUILD_BUILD_TIMESTAMP_ should be set to a deterministic value between "
"builds in order to avoid 100% cache misses, see Reproducible_builds_ for "
"more info)::"
msgstr ""

#: ../../../kbuild/llvm.rst:137
msgid "Supported Architectures"
msgstr ""

#: ../../../kbuild/llvm.rst:139
msgid ""
"LLVM does not target all of the architectures that Linux supports and just "
"because a target is supported in LLVM does not mean that the kernel will "
"build or work without any issues. Below is a general summary of "
"architectures that currently work with ``CC=clang`` or ``LLVM=1``. Level of "
"support corresponds to \"S\" values in the MAINTAINERS files. If an "
"architecture is not present, it either means that LLVM does not target it or "
"there are known issues. Using the latest stable version of LLVM or even the "
"development tree will generally yield the best results. An architecture's "
"``defconfig`` is generally expected to work well, certain configurations may "
"have problems that have not been uncovered yet. Bug reports are always "
"welcome at the issue tracker below!"
msgstr ""

#: ../../../kbuild/llvm.rst:155
msgid "Architecture"
msgstr ""

#: ../../../kbuild/llvm.rst:156
msgid "Level of support"
msgstr ""

#: ../../../kbuild/llvm.rst:157
msgid "``make`` command"
msgstr ""

#: ../../../kbuild/llvm.rst:158
msgid "arm"
msgstr ""

#: ../../../kbuild/llvm.rst:159 ../../../kbuild/llvm.rst:162
#: ../../../kbuild/llvm.rst:177 ../../../kbuild/llvm.rst:189
msgid "Supported"
msgstr ""

#: ../../../kbuild/llvm.rst:160 ../../../kbuild/llvm.rst:163
#: ../../../kbuild/llvm.rst:166 ../../../kbuild/llvm.rst:169
#: ../../../kbuild/llvm.rst:172 ../../../kbuild/llvm.rst:175
#: ../../../kbuild/llvm.rst:178 ../../../kbuild/llvm.rst:187
#: ../../../kbuild/llvm.rst:190
msgid "``LLVM=1``"
msgstr ""

#: ../../../kbuild/llvm.rst:161
msgid "arm64"
msgstr ""

#: ../../../kbuild/llvm.rst:164
msgid "hexagon"
msgstr ""

#: ../../../kbuild/llvm.rst:165 ../../../kbuild/llvm.rst:168
#: ../../../kbuild/llvm.rst:171 ../../../kbuild/llvm.rst:174
#: ../../../kbuild/llvm.rst:180 ../../../kbuild/llvm.rst:183
#: ../../../kbuild/llvm.rst:186
msgid "Maintained"
msgstr ""

#: ../../../kbuild/llvm.rst:167
msgid "loongarch"
msgstr ""

#: ../../../kbuild/llvm.rst:170
msgid "mips"
msgstr ""

#: ../../../kbuild/llvm.rst:173
msgid "powerpc"
msgstr ""

#: ../../../kbuild/llvm.rst:176
msgid "riscv"
msgstr ""

#: ../../../kbuild/llvm.rst:179
msgid "s390"
msgstr ""

#: ../../../kbuild/llvm.rst:181
msgid "``LLVM=1`` (LLVM >= 18.1.0), ``CC=clang`` (LLVM < 18.1.0)"
msgstr ""

#: ../../../kbuild/llvm.rst:182
msgid "sparc (sparc64 only)"
msgstr ""

#: ../../../kbuild/llvm.rst:184
msgid "``CC=clang LLVM_IAS=0`` (LLVM >= 20)"
msgstr ""

#: ../../../kbuild/llvm.rst:185
msgid "um (User Mode)"
msgstr ""

#: ../../../kbuild/llvm.rst:188
msgid "x86"
msgstr ""

#: ../../../kbuild/llvm.rst:193
msgid "Getting Help"
msgstr ""

#: ../../../kbuild/llvm.rst:195
msgid "`Website <https://clangbuiltlinux.github.io/>`_"
msgstr ""

#: ../../../kbuild/llvm.rst:196
msgid "`Mailing List <https://lore.kernel.org/llvm/>`_: <llvm@lists.linux.dev>"
msgstr ""

#: ../../../kbuild/llvm.rst:197
msgid ""
"`Old Mailing List Archives <https://groups.google.com/g/clang-built-linux>`_"
msgstr ""

#: ../../../kbuild/llvm.rst:198
msgid "`Issue Tracker <https://github.com/ClangBuiltLinux/linux/issues>`_"
msgstr ""

#: ../../../kbuild/llvm.rst:199
msgid "IRC: #clangbuiltlinux on irc.libera.chat"
msgstr ""

#: ../../../kbuild/llvm.rst:200
msgid "`Telegram <https://t.me/ClangBuiltLinux>`_: @ClangBuiltLinux"
msgstr ""

#: ../../../kbuild/llvm.rst:201
msgid "`Wiki <https://github.com/ClangBuiltLinux/linux/wiki>`_"
msgstr ""

#: ../../../kbuild/llvm.rst:202
msgid ""
"`Beginner Bugs <https://github.com/ClangBuiltLinux/linux/issues?"
"q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22>`_"
msgstr ""

#: ../../../kbuild/llvm.rst:207
msgid "Getting LLVM"
msgstr ""

#: ../../../kbuild/llvm.rst:209
msgid ""
"We provide prebuilt stable versions of LLVM on `kernel.org <https://kernel."
"org/pub/tools/llvm/>`_. These have been optimized with profile data for "
"building Linux kernels, which should improve kernel build times relative to "
"other distributions of LLVM."
msgstr ""

#: ../../../kbuild/llvm.rst:214
msgid ""
"Below are links that may be useful for building LLVM from source or "
"procuring it through a distribution's package manager."
msgstr ""

#: ../../../kbuild/llvm.rst:217
msgid "https://releases.llvm.org/download.html"
msgstr ""

#: ../../../kbuild/llvm.rst:218
msgid "https://github.com/llvm/llvm-project"
msgstr ""

#: ../../../kbuild/llvm.rst:219
msgid "https://llvm.org/docs/GettingStarted.html"
msgstr ""

#: ../../../kbuild/llvm.rst:220
msgid "https://llvm.org/docs/CMake.html"
msgstr ""

#: ../../../kbuild/llvm.rst:221
msgid "https://apt.llvm.org/"
msgstr ""

#: ../../../kbuild/llvm.rst:222
msgid "https://www.archlinux.org/packages/extra/x86_64/llvm/"
msgstr ""

#: ../../../kbuild/llvm.rst:223
msgid "https://github.com/ClangBuiltLinux/tc-build"
msgstr ""

#: ../../../kbuild/llvm.rst:224
msgid ""
"https://github.com/ClangBuiltLinux/linux/wiki/Building-Clang-from-source"
msgstr ""

#: ../../../kbuild/llvm.rst:225
msgid ""
"https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/"
msgstr ""
