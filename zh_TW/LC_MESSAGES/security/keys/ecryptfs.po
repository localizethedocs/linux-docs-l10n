# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../security/keys/ecryptfs.rst:3
msgid "Encrypted keys for the eCryptfs filesystem"
msgstr ""

#: ../../../security/keys/ecryptfs.rst:5
msgid ""
"ECryptfs is a stacked filesystem which transparently encrypts and decrypts "
"each file using a randomly generated File Encryption Key (FEK)."
msgstr ""

#: ../../../security/keys/ecryptfs.rst:8
msgid ""
"Each FEK is in turn encrypted with a File Encryption Key Encryption Key "
"(FEKEK) either in kernel space or in user space with a daemon called "
"'ecryptfsd'.  In the former case the operation is performed directly by the "
"kernel CryptoAPI using a key, the FEKEK, derived from a user prompted "
"passphrase;  in the latter the FEK is encrypted by 'ecryptfsd' with the help "
"of external libraries in order to support other mechanisms like public key "
"cryptography, PKCS#11 and TPM based operations."
msgstr ""

#: ../../../security/keys/ecryptfs.rst:16
msgid ""
"The data structure defined by eCryptfs to contain information required for "
"the FEK decryption is called authentication token and, currently, can be "
"stored in a kernel key of the 'user' type, inserted in the user's session "
"specific keyring by the userspace utility 'mount.ecryptfs' shipped with the "
"package 'ecryptfs-utils'."
msgstr ""

#: ../../../security/keys/ecryptfs.rst:22
msgid ""
"The 'encrypted' key type has been extended with the introduction of the new "
"format 'ecryptfs' in order to be used in conjunction with the eCryptfs "
"filesystem.  Encrypted keys of the newly introduced format store an "
"authentication token in its payload with a FEKEK randomly generated by the "
"kernel and protected by the parent master key."
msgstr ""

#: ../../../security/keys/ecryptfs.rst:28
msgid ""
"In order to avoid known-plaintext attacks, the datablob obtained through "
"commands 'keyctl print' or 'keyctl pipe' does not contain the overall "
"authentication token, which content is well known, but only the FEKEK in "
"encrypted form."
msgstr ""

#: ../../../security/keys/ecryptfs.rst:33
msgid ""
"The eCryptfs filesystem may really benefit from using encrypted keys in that "
"the required key can be securely generated by an Administrator and provided "
"at boot time after the unsealing of a 'trusted' key in order to perform the "
"mount in a controlled environment.  Another advantage is that the key is not "
"exposed to threats of malicious software, because it is available in clear "
"form only at kernel level."
msgstr ""

#: ../../../security/keys/ecryptfs.rst:40
msgid "Usage::"
msgstr ""

#: ../../../security/keys/ecryptfs.rst:46
msgid "Where::"
msgstr ""

#: ../../../security/keys/ecryptfs.rst:53
msgid "Example of encrypted key usage with the eCryptfs filesystem:"
msgstr ""

#: ../../../security/keys/ecryptfs.rst:55
msgid ""
"Create an encrypted key \"1000100010001000\" of length 64 bytes with format "
"'ecryptfs' and save it using a previously loaded user key \"test\"::"
msgstr ""

#: ../../../security/keys/ecryptfs.rst:69
msgid ""
"Mount an eCryptfs filesystem using the created encrypted key "
"\"1000100010001000\" into the '/secret' directory::"
msgstr ""
