# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../trace/hisi-ptt.rst:5
msgid "HiSilicon PCIe Tune and Trace device"
msgstr ""

#: ../../../trace/hisi-ptt.rst:8
msgid "Introduction"
msgstr ""

#: ../../../trace/hisi-ptt.rst:10
msgid ""
"HiSilicon PCIe tune and trace device (PTT) is a PCIe Root Complex integrated "
"Endpoint (RCiEP) device, providing the capability to dynamically monitor and "
"tune the PCIe link's events (tune), and trace the TLP headers (trace). The "
"two functions are independent, but is recommended to use them together to "
"analyze and enhance the PCIe link's performance."
msgstr ""

#: ../../../trace/hisi-ptt.rst:17
msgid ""
"On Kunpeng 930 SoC, the PCIe Root Complex is composed of several PCIe cores. "
"Each PCIe core includes several Root Ports and a PTT RCiEP, like below. The "
"PTT device is capable of tuning and tracing the links of the PCIe core. ::"
msgstr ""

#: ../../../trace/hisi-ptt.rst:35
msgid ""
"The PTT device driver registers one PMU device for each PTT device. The name "
"of each PTT device is composed of 'hisi_ptt' prefix with the id of the SICL "
"and the Core where it locates. The Kunpeng 930 SoC encapsulates multiple CPU "
"dies (SCCL, Super CPU Cluster) and IO dies (SICL, Super I/O Cluster), where "
"there's one PCIe Root Complex for each SICL. ::"
msgstr ""

#: ../../../trace/hisi-ptt.rst:46
msgid "Tune"
msgstr ""

#: ../../../trace/hisi-ptt.rst:48
msgid ""
"PTT tune is designed for monitoring and adjusting PCIe link parameters "
"(events). Currently we support events in 2 classes. The scope of the events "
"covers the PCIe core to which the PTT device belongs."
msgstr ""

#: ../../../trace/hisi-ptt.rst:52
msgid ""
"Each event is presented as a file under $(PTT PMU dir)/tune, and a simple "
"open/read/write/close cycle will be used to tune the event. ::"
msgstr ""

#: ../../../trace/hisi-ptt.rst:67
msgid ""
"Current value (numerical value) of the event can be simply read from the "
"file, and the desired value written to the file to tune."
msgstr ""

#: ../../../trace/hisi-ptt.rst:71
msgid "1. Tx Path QoS Control"
msgstr ""

#: ../../../trace/hisi-ptt.rst:73
msgid ""
"The following files are provided to tune the QoS of the tx path of the PCIe "
"core."
msgstr ""

#: ../../../trace/hisi-ptt.rst:76
msgid "qos_tx_cpl: weight of Tx completion TLPs"
msgstr ""

#: ../../../trace/hisi-ptt.rst:77
msgid "qos_tx_np: weight of Tx non-posted TLPs"
msgstr ""

#: ../../../trace/hisi-ptt.rst:78
msgid "qos_tx_p: weight of Tx posted TLPs"
msgstr ""

#: ../../../trace/hisi-ptt.rst:80
msgid ""
"The weight influences the proportion of certain packets on the PCIe link. "
"For example, for the storage scenario, increase the proportion of the "
"completion packets on the link to enhance the performance as more "
"completions are consumed."
msgstr ""

#: ../../../trace/hisi-ptt.rst:85
msgid ""
"The available tune data of these events is [0, 1, 2]. Writing a negative "
"value will return an error, and out of range values will be converted to 2. "
"Note that the event value just indicates a probable level, but is not "
"precise."
msgstr ""

#: ../../../trace/hisi-ptt.rst:91
msgid "2. Tx Path Buffer Control"
msgstr ""

#: ../../../trace/hisi-ptt.rst:93
msgid ""
"Following files are provided to tune the buffer of tx path of the PCIe core."
msgstr ""

#: ../../../trace/hisi-ptt.rst:95
msgid "rx_alloc_buf_level: watermark of Rx requested"
msgstr ""

#: ../../../trace/hisi-ptt.rst:96
msgid "tx_alloc_buf_level: watermark of Tx requested"
msgstr ""

#: ../../../trace/hisi-ptt.rst:98
msgid ""
"These events influence the watermark of the buffer allocated for each type. "
"Rx means the inbound while Tx means outbound. The packets will be stored in "
"the buffer first and then transmitted either when the watermark reached or "
"when timed out. For a busy direction, you should increase the related buffer "
"watermark to avoid frequently posting and thus enhance the performance. In "
"most cases just keep the default value."
msgstr ""

#: ../../../trace/hisi-ptt.rst:105
msgid ""
"The available tune data of above events is [0, 1, 2]. Writing a negative "
"value will return an error, and out of range values will be converted to 2. "
"Note that the event value just indicates a probable level, but is not "
"precise."
msgstr ""

#: ../../../trace/hisi-ptt.rst:111
msgid "Trace"
msgstr ""

#: ../../../trace/hisi-ptt.rst:113
msgid ""
"PTT trace is designed for dumping the TLP headers to the memory, which can "
"be used to analyze the transactions and usage condition of the PCIe Link. "
"You can choose to filter the traced headers by either Requester ID, or those "
"downstream of a set of Root Ports on the same core of the PTT device. It's "
"also supported to trace the headers of certain type and of certain direction."
msgstr ""

#: ../../../trace/hisi-ptt.rst:120
msgid ""
"You can use the perf command `perf record` to set the parameters, start "
"trace and get the data. It's also supported to decode the trace data with "
"`perf report`. The control parameters for trace is inputted as event code "
"for each events, which will be further illustrated later. An example usage "
"is like ::"
msgstr ""

#: ../../../trace/hisi-ptt.rst:130
msgid ""
"This will trace the TLP headers downstream root port 0000:00:10.1 (event "
"code for event 'filter' is 0x80001) with type of posted TLP requests, "
"direction of inbound and traced data format of 8DW."
msgstr ""

#: ../../../trace/hisi-ptt.rst:135
msgid "1. Filter"
msgstr ""

#: ../../../trace/hisi-ptt.rst:137
msgid ""
"The TLP headers to trace can be filtered by the Root Ports or the Requester "
"ID of the Endpoint, which are located on the same core of the PTT device. "
"You can set the filter by specifying the `filter` parameter which is "
"required to start the trace. The parameter value is 20 bit. Bit 19 indicates "
"the filter type. 1 for Root Port filter and 0 for Requester filter. "
"Bit[15:0] indicates the filter value. The value for a Root Port is a mask of "
"the core port id which is calculated from its PCI Slot ID as (slotid & 7) * "
"2. The value for a Requester is the Requester ID (Device ID of the PCIe "
"function). Bit[18:16] is currently reserved for extension."
msgstr ""

#: ../../../trace/hisi-ptt.rst:147
msgid ""
"For example, if the desired filter is Endpoint function 0000:01:00.1 the "
"filter value will be 0x00101. If the desired filter is Root Port "
"0000:00:10.0 then then filter value is calculated as 0x80001."
msgstr ""

#: ../../../trace/hisi-ptt.rst:151
msgid ""
"The driver also presents every supported Root Port and Requester filter "
"through sysfs. Each filter will be an individual file with name of its "
"related PCIe device name (domain:bus:device.function). The files of Root "
"Port filters are under $(PTT PMU dir)/root_port_filters and files of "
"Requester filters are under $(PTT PMU dir)/requester_filters."
msgstr ""

#: ../../../trace/hisi-ptt.rst:157
msgid ""
"Note that multiple Root Ports can be specified at one time, but only one "
"Endpoint function can be specified in one trace. Specifying both Root Port "
"and function at the same time is not supported. Driver maintains a list of "
"available filters and will check the invalid inputs."
msgstr ""

#: ../../../trace/hisi-ptt.rst:162
msgid ""
"The available filters will be dynamically updated, which means you will "
"always get correct filter information when hotplug events happen, or when "
"you manually remove/rescan the devices."
msgstr ""

#: ../../../trace/hisi-ptt.rst:167
msgid "2. Type"
msgstr ""

#: ../../../trace/hisi-ptt.rst:169
msgid ""
"You can trace the TLP headers of certain types by specifying the `type` "
"parameter, which is required to start the trace. The parameter value is 8 "
"bit. Current supported types and related values are shown below:"
msgstr ""

#: ../../../trace/hisi-ptt.rst:173
msgid "8'b00000001: posted requests (P)"
msgstr ""

#: ../../../trace/hisi-ptt.rst:174
msgid "8'b00000010: non-posted requests (NP)"
msgstr ""

#: ../../../trace/hisi-ptt.rst:175
msgid "8'b00000100: completions (CPL)"
msgstr ""

#: ../../../trace/hisi-ptt.rst:177
msgid ""
"You can specify multiple types when tracing inbound TLP headers, but can "
"only specify one when tracing outbound TLP headers."
msgstr ""

#: ../../../trace/hisi-ptt.rst:181
msgid "3. Direction"
msgstr ""

#: ../../../trace/hisi-ptt.rst:183
msgid ""
"You can trace the TLP headers from certain direction, which is relative to "
"the Root Port or the PCIe core, by specifying the `direction` parameter. "
"This is optional and the default parameter is inbound. The parameter value "
"is 4 bit. When the desired format is 4DW, directions and related values "
"supported are shown below:"
msgstr ""

#: ../../../trace/hisi-ptt.rst:189
msgid "4'b0000: inbound TLPs (P, NP, CPL)"
msgstr ""

#: ../../../trace/hisi-ptt.rst:190 ../../../trace/hisi-ptt.rst:198
msgid "4'b0001: outbound TLPs (P, NP, CPL)"
msgstr ""

#: ../../../trace/hisi-ptt.rst:191
msgid "4'b0010: outbound TLPs (P, NP, CPL) and inbound TLPs (P, NP, CPL B)"
msgstr ""

#: ../../../trace/hisi-ptt.rst:192
msgid "4'b0011: outbound TLPs (P, NP, CPL) and inbound TLPs (CPL A)"
msgstr ""

#: ../../../trace/hisi-ptt.rst:194
msgid ""
"When the desired format is 8DW, directions and related values supported are "
"shown below:"
msgstr ""

#: ../../../trace/hisi-ptt.rst:197
msgid "4'b0000: reserved"
msgstr ""

#: ../../../trace/hisi-ptt.rst:199
msgid "4'b0010: inbound TLPs (P, NP, CPL B)"
msgstr ""

#: ../../../trace/hisi-ptt.rst:200
msgid "4'b0011: inbound TLPs (CPL A)"
msgstr ""

#: ../../../trace/hisi-ptt.rst:202
msgid "Inbound completions are classified into two types:"
msgstr ""

#: ../../../trace/hisi-ptt.rst:204
msgid ""
"completion A (CPL A): completion of CHI/DMA/Native non-posted requests, "
"except for CPL B"
msgstr ""

#: ../../../trace/hisi-ptt.rst:205
msgid ""
"completion B (CPL B): completion of DMA remote2local and P2P non-posted "
"requests"
msgstr ""

#: ../../../trace/hisi-ptt.rst:208
msgid "4. Format"
msgstr ""

#: ../../../trace/hisi-ptt.rst:210
msgid ""
"You can change the format of the traced TLP headers by specifying the "
"`format` parameter. The default format is 4DW. The parameter value is 4 bit. "
"Current supported formats and related values are shown below:"
msgstr ""

#: ../../../trace/hisi-ptt.rst:214
msgid "4'b0000: 4DW length per TLP header"
msgstr ""

#: ../../../trace/hisi-ptt.rst:215
msgid "4'b0001: 8DW length per TLP header"
msgstr ""

#: ../../../trace/hisi-ptt.rst:217
msgid "The traced TLP header format is different from the PCIe standard."
msgstr ""

#: ../../../trace/hisi-ptt.rst:219
msgid ""
"When using the 8DW data format, the entire TLP header is logged (Header "
"DW0-3 shown below). For example, the TLP header for Memory Reads with 64-bit "
"addresses is shown in PCIe r5.0, Figure 2-17; the header for Configuration "
"Requests is shown in Figure 2.20, etc."
msgstr ""

#: ../../../trace/hisi-ptt.rst:224
msgid ""
"In addition, 8DW trace buffer entries contain a timestamp and possibly a "
"prefix for a PASID TLP prefix (see Figure 6-20, PCIe r5.0). Otherwise this "
"field will be all 0."
msgstr ""

#: ../../../trace/hisi-ptt.rst:228
msgid ""
"The bit[31:11] of DW0 is always 0x1fffff, which can be used to distinguish "
"the data format. 8DW format is like ::"
msgstr ""

#: ../../../trace/hisi-ptt.rst:243
msgid ""
"When using the 4DW data format, DW0 of the trace buffer entry contains "
"selected fields of DW0 of the TLP, together with a timestamp.  DW1-DW3 of "
"the trace buffer entry contain DW1-DW3 directly from the TLP header."
msgstr ""

#: ../../../trace/hisi-ptt.rst:248
msgid "4DW format is like ::"
msgstr ""

#: ../../../trace/hisi-ptt.rst:259
msgid "5. Memory Management"
msgstr ""

#: ../../../trace/hisi-ptt.rst:261
msgid ""
"The traced TLP headers will be written to the memory allocated by the "
"driver. The hardware accepts 4 DMA address with same size, and writes the "
"buffer sequentially like below. If DMA addr 3 is finished and the trace is "
"still on, it will return to addr 0. ::"
msgstr ""

#: ../../../trace/hisi-ptt.rst:270
msgid ""
"Driver will allocate each DMA buffer of 4MiB. The finished buffer will be "
"copied to the perf AUX buffer allocated by the perf core. Once the AUX "
"buffer is full while the trace is still on, driver will commit the AUX "
"buffer first and then apply for a new one with the same size. The size of "
"AUX buffer is default to 16MiB. User can adjust the size by specifying the `-"
"m` parameter of the perf command."
msgstr ""

#: ../../../trace/hisi-ptt.rst:278
msgid "6. Decoding"
msgstr ""

#: ../../../trace/hisi-ptt.rst:280
msgid ""
"You can decode the traced data with `perf report -D` command (currently only "
"support to dump the raw trace data). The traced data will be decoded "
"according to the format described previously (take 8DW as an example): ::"
msgstr ""
