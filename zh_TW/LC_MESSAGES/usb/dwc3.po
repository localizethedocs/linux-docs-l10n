# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../usb/dwc3.rst:3
msgid "DWC3 driver"
msgstr ""

#: ../../../usb/dwc3.rst:7
msgid "TODO"
msgstr ""

#: ../../../usb/dwc3.rst:9
msgid "Please pick something while reading :)"
msgstr ""

#: ../../../usb/dwc3.rst:11
msgid "Convert interrupt handler to per-ep-thread-irq"
msgstr ""

#: ../../../usb/dwc3.rst:13
msgid ""
"As it turns out some DWC3-commands ~1ms to complete. Currently we spin until "
"the command completes which is bad."
msgstr ""

#: ../../../usb/dwc3.rst:16
msgid "Implementation idea:"
msgstr ""

#: ../../../usb/dwc3.rst:18
msgid ""
"dwc core implements a demultiplexing irq chip for interrupts per endpoint. "
"The interrupt numbers are allocated during probe and belong to the device. "
"If MSI provides per-endpoint interrupt this dummy interrupt chip can be "
"replaced with \"real\" interrupts."
msgstr ""

#: ../../../usb/dwc3.rst:22
msgid ""
"interrupts are requested / allocated on usb_ep_enable() and removed on "
"usb_ep_disable(). Worst case are 32 interrupts, the lower limit is two for "
"ep0/1."
msgstr ""

#: ../../../usb/dwc3.rst:25
msgid ""
"dwc3_send_gadget_ep_cmd() will sleep in wait_for_completion_timeout() until "
"the command completes."
msgstr ""

#: ../../../usb/dwc3.rst:27
msgid "the interrupt handler is split into the following pieces:"
msgstr ""

#: ../../../usb/dwc3.rst:29
msgid ""
"primary handler of the device goes through every event and calls "
"generic_handle_irq() for event it. On return from generic_handle_irq() in "
"acknowledges the event counter so interrupt goes away (eventually)."
msgstr ""

#: ../../../usb/dwc3.rst:34
msgid "threaded handler of the device none"
msgstr ""

#: ../../../usb/dwc3.rst:37
msgid ""
"primary handler of the EP-interrupt reads the event and tries to process it. "
"Everything that requires sleeping is handed over to the Thread. The event is "
"saved in an per-endpoint data-structure. We probably have to pay attention "
"not to process events once we handed something to thread so we don't process "
"event X prio Y where X > Y."
msgstr ""

#: ../../../usb/dwc3.rst:45
msgid ""
"threaded handler of the EP-interrupt handles the remaining EP work which "
"might sleep such as waiting for command completion."
msgstr ""

#: ../../../usb/dwc3.rst:49
msgid "Latency:"
msgstr ""

#: ../../../usb/dwc3.rst:51
msgid ""
"There should be no increase in latency since the interrupt-thread has a high "
"priority and will be run before an average task in user land (except the "
"user changed priorities)."
msgstr ""
