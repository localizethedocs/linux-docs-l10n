# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../PCI/tph.rst:6
msgid "TPH Support"
msgstr ""

#: ../../../PCI/tph.rst:0
msgid "Copyright"
msgstr ""

#: ../../../PCI/tph.rst:8
msgid "2024 Advanced Micro Devices, Inc."
msgstr ""

#: ../../../PCI/tph.rst:0
msgid "Authors"
msgstr ""

#: ../../../PCI/tph.rst:9
msgid "Eric van Tassell <eric.vantassell@amd.com>"
msgstr ""

#: ../../../PCI/tph.rst:10
msgid "Wei Huang <wei.huang2@amd.com>"
msgstr ""

#: ../../../PCI/tph.rst:14
msgid "Overview"
msgstr ""

#: ../../../PCI/tph.rst:16
msgid ""
"TPH (TLP Processing Hints) is a PCIe feature that allows endpoint devices to "
"provide optimization hints for requests that target memory space. These "
"hints, in a format called Steering Tags (STs), are embedded in the "
"requester's TLP headers, enabling the system hardware, such as the Root "
"Complex, to better manage platform resources for these requests."
msgstr ""

#: ../../../PCI/tph.rst:22
msgid ""
"For example, on platforms with TPH-based direct data cache injection "
"support, an endpoint device can include appropriate STs in its DMA traffic "
"to specify which cache the data should be written to. This allows the CPU "
"core to have a higher probability of getting data from cache, potentially "
"improving performance and reducing latency in data processing."
msgstr ""

#: ../../../PCI/tph.rst:31
msgid "How to Use TPH"
msgstr ""

#: ../../../PCI/tph.rst:33
msgid ""
"TPH is presented as an optional extended capability in PCIe. The Linux "
"kernel handles TPH discovery during boot, but it is up to the device driver "
"to request TPH enablement if it is to be utilized. Once enabled, the driver "
"uses the provided API to obtain the Steering Tag for the target memory and "
"to program the ST into the device's ST table."
msgstr ""

#: ../../../PCI/tph.rst:40
msgid "Enable TPH support in Linux"
msgstr ""

#: ../../../PCI/tph.rst:42
msgid ""
"To support TPH, the kernel must be built with the CONFIG_PCIE_TPH option "
"enabled."
msgstr ""

#: ../../../PCI/tph.rst:46
msgid "Manage TPH"
msgstr ""

#: ../../../PCI/tph.rst:48
msgid "To enable TPH for a device, use the following function::"
msgstr ""

#: ../../../PCI/tph.rst:52
msgid ""
"This function enables TPH support for device with a specific ST mode. "
"Current supported modes include:"
msgstr ""

#: ../../../PCI/tph.rst:55
msgid "PCI_TPH_ST_NS_MODE - NO ST Mode"
msgstr ""

#: ../../../PCI/tph.rst:56
msgid "PCI_TPH_ST_IV_MODE - Interrupt Vector Mode"
msgstr ""

#: ../../../PCI/tph.rst:57
msgid "PCI_TPH_ST_DS_MODE - Device Specific Mode"
msgstr ""

#: ../../../PCI/tph.rst:59
msgid ""
"`pcie_enable_tph()` checks whether the requested mode is actually supported "
"by the device before enabling. The device driver can figure out which TPH "
"mode is supported and can be properly enabled based on the return value of "
"`pcie_enable_tph()`."
msgstr ""

#: ../../../PCI/tph.rst:64
msgid "To disable TPH, use the following function::"
msgstr ""

#: ../../../PCI/tph.rst:69
msgid "Manage ST"
msgstr ""

#: ../../../PCI/tph.rst:71
msgid ""
"Steering Tags are platform specific. PCIe spec does not specify where STs "
"are from. Instead PCI Firmware Specification defines an ACPI _DSM method "
"(see the `Revised _DSM for Cache Locality TPH Features ECN <https://members."
"pcisig.com/wg/PCI-SIG/document/15470>`_) for retrieving STs for a target "
"memory of various properties. This method is what is supported in this "
"implementation."
msgstr ""

#: ../../../PCI/tph.rst:78
msgid ""
"To retrieve a Steering Tag for a target memory associated with a specific "
"CPU, use the following function::"
msgstr ""

#: ../../../PCI/tph.rst:84
msgid ""
"The `type` argument is used to specify the memory type, either volatile or "
"persistent, of the target memory. The `cpu_uid` argument specifies the CPU "
"where the memory is associated to."
msgstr ""

#: ../../../PCI/tph.rst:88
msgid ""
"After the ST value is retrieved, the device driver can use the following "
"function to write the ST into the device::"
msgstr ""

#: ../../../PCI/tph.rst:94
msgid ""
"The `index` argument is the ST table entry index the ST tag will be written "
"into. `pcie_tph_set_st_entry()` will figure out the proper location of ST "
"table, either in the MSI-X table or in the TPH Extended Capability space, "
"and write the Steering Tag into the ST entry pointed by the `index` argument."
msgstr ""

#: ../../../PCI/tph.rst:100
msgid ""
"It is completely up to the driver to decide how to use these TPH functions. "
"For example a network device driver can use the TPH APIs above to update the "
"Steering Tag when interrupt affinity of a RX/TX queue has been changed. Here "
"is a sample code for IRQ affinity notifier:"
msgstr ""

#: ../../../PCI/tph.rst:129
msgid "Disable TPH system-wide"
msgstr ""

#: ../../../PCI/tph.rst:131
msgid "There is a kernel command line option available to control TPH feature:"
msgstr ""

#: ../../../PCI/tph.rst:132
msgid "\"notph\": TPH will be disabled for all endpoint devices."
msgstr ""
