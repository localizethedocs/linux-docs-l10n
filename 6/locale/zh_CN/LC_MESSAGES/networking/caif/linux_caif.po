# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../networking/caif/linux_caif.rst:6
msgid "Linux CAIF"
msgstr ""

#: ../../../networking/caif/linux_caif.rst:8
msgid "Copyright |copy| ST-Ericsson AB 2010"
msgstr ""

#: ../../../networking/caif/linux_caif.rst:0
msgid "Author"
msgstr ""

#: ../../../networking/caif/linux_caif.rst:10
msgid "Sjur Brendeland/ sjur.brandeland@stericsson.com"
msgstr ""

#: ../../../networking/caif/linux_caif.rst:0
msgid "License terms"
msgstr ""

#: ../../../networking/caif/linux_caif.rst:11
msgid "GNU General Public License (GPL) version 2"
msgstr ""

#: ../../../networking/caif/linux_caif.rst:15
msgid "Introduction"
msgstr ""

#: ../../../networking/caif/linux_caif.rst:17
msgid ""
"CAIF is a MUX protocol used by ST-Ericsson cellular modems for communication "
"between Modem and host. The host processes can open virtual AT channels, "
"initiate GPRS Data connections, Video channels and Utility Channels. The "
"Utility Channels are general purpose pipes between modem and host."
msgstr ""

#: ../../../networking/caif/linux_caif.rst:22
msgid ""
"ST-Ericsson modems support a number of transports between modem and host. "
"Currently, UART and Loopback are available for Linux."
msgstr ""

#: ../../../networking/caif/linux_caif.rst:27
msgid "Architecture"
msgstr ""

#: ../../../networking/caif/linux_caif.rst:29
msgid "The implementation of CAIF is divided into:"
msgstr ""

#: ../../../networking/caif/linux_caif.rst:31
msgid "CAIF Socket Layer and GPRS IP Interface."
msgstr ""

#: ../../../networking/caif/linux_caif.rst:32
msgid "CAIF Core Protocol Implementation"
msgstr ""

#: ../../../networking/caif/linux_caif.rst:33
msgid "CAIF Link Layer, implemented as NET devices."
msgstr ""

#: ../../../networking/caif/linux_caif.rst:60
msgid "Implementation"
msgstr ""

#: ../../../networking/caif/linux_caif.rst:64
msgid "CAIF Core Protocol Layer"
msgstr ""

#: ../../../networking/caif/linux_caif.rst:66
msgid ""
"CAIF Core layer implements the CAIF protocol as defined by ST-Ericsson. It "
"implements the CAIF protocol stack in a layered approach, where each layer "
"described in the specification is implemented as a separate layer. The "
"architecture is inspired by the design patterns \"Protocol Layer\" and "
"\"Protocol Packet\"."
msgstr ""

#: ../../../networking/caif/linux_caif.rst:73
msgid "CAIF structure"
msgstr ""

#: ../../../networking/caif/linux_caif.rst:75
msgid "The Core CAIF implementation contains:"
msgstr ""

#: ../../../networking/caif/linux_caif.rst:77
msgid "Simple implementation of CAIF."
msgstr ""

#: ../../../networking/caif/linux_caif.rst:78
msgid ""
"Layered architecture (a la Streams), each layer in the CAIF specification is "
"implemented in a separate c-file."
msgstr ""

#: ../../../networking/caif/linux_caif.rst:80
msgid "Clients must call configuration function to add PHY layer."
msgstr ""

#: ../../../networking/caif/linux_caif.rst:81
msgid ""
"Clients must implement CAIF layer to consume/produce CAIF payload with "
"receive and transmit functions."
msgstr ""

#: ../../../networking/caif/linux_caif.rst:83
msgid ""
"Clients must call configuration function to add and connect the Client layer."
msgstr ""

#: ../../../networking/caif/linux_caif.rst:85
msgid ""
"When receiving / transmitting CAIF Packets (cfpkt), ownership is passed to "
"the called function (except for framing layers' receive function)"
msgstr ""

#: ../../../networking/caif/linux_caif.rst:89
msgid "Layered Architecture"
msgstr ""

#: ../../../networking/caif/linux_caif.rst:91
msgid ""
"The CAIF protocol can be divided into two parts: Support functions and "
"Protocol Implementation. The support functions include:"
msgstr ""

#: ../../../networking/caif/linux_caif.rst:94
msgid ""
"CFPKT CAIF Packet. Implementation of CAIF Protocol Packet. The CAIF Packet "
"has functions for creating, destroying and adding content and for adding/"
"extracting header and trailers to protocol packets."
msgstr ""

#: ../../../networking/caif/linux_caif.rst:98
msgid "The CAIF Protocol implementation contains:"
msgstr ""

#: ../../../networking/caif/linux_caif.rst:100
msgid ""
"CFCNFG CAIF Configuration layer. Configures the CAIF Protocol Stack and "
"provides a Client interface for adding Link-Layer and Driver interfaces on "
"top of the CAIF Stack."
msgstr ""

#: ../../../networking/caif/linux_caif.rst:104
msgid ""
"CFCTRL CAIF Control layer. Encodes and Decodes control messages such as "
"enumeration and channel setup. Also matches request and response messages."
msgstr ""

#: ../../../networking/caif/linux_caif.rst:108
msgid ""
"CFSERVL General CAIF Service Layer functionality; handles flow control and "
"remote shutdown requests."
msgstr ""

#: ../../../networking/caif/linux_caif.rst:111
msgid ""
"CFVEI CAIF VEI layer. Handles CAIF AT Channels on VEI (Virtual External "
"Interface). This layer encodes/decodes VEI frames."
msgstr ""

#: ../../../networking/caif/linux_caif.rst:114
msgid ""
"CFDGML CAIF Datagram layer. Handles CAIF Datagram layer (IP traffic), "
"encodes/decodes Datagram frames."
msgstr ""

#: ../../../networking/caif/linux_caif.rst:117
msgid ""
"CFMUX CAIF Mux layer. Handles multiplexing between multiple physical bearers "
"and multiple channels such as VEI, Datagram, etc. The MUX keeps track of the "
"existing CAIF Channels and Physical Instances and selects the appropriate "
"instance based on Channel-Id and Physical-ID."
msgstr ""

#: ../../../networking/caif/linux_caif.rst:123
msgid ""
"CFFRML CAIF Framing layer. Handles Framing i.e. Frame length and frame "
"checksum."
msgstr ""

#: ../../../networking/caif/linux_caif.rst:126
msgid ""
"CFSERL CAIF Serial layer. Handles concatenation/split of frames into CAIF "
"Frames with correct length."
msgstr ""

#: ../../../networking/caif/linux_caif.rst:159
msgid "In this layered approach the following \"rules\" apply."
msgstr ""

#: ../../../networking/caif/linux_caif.rst:161
msgid "All layers embed the same structure \"struct cflayer\""
msgstr ""

#: ../../../networking/caif/linux_caif.rst:162
msgid "A layer does not depend on any other layer's private data."
msgstr ""

#: ../../../networking/caif/linux_caif.rst:163
msgid "Layers are stacked by setting the pointers::"
msgstr ""

#: ../../../networking/caif/linux_caif.rst:167
msgid "In order to send data upwards, each layer should do::"
msgstr ""

#: ../../../networking/caif/linux_caif.rst:171
msgid "In order to send data downwards, each layer should do::"
msgstr ""

#: ../../../networking/caif/linux_caif.rst:177
msgid "CAIF Socket and IP interface"
msgstr ""

#: ../../../networking/caif/linux_caif.rst:179
msgid ""
"The IP interface and CAIF socket API are implemented on top of the CAIF Core "
"protocol. The IP Interface and CAIF socket have an instance of 'struct "
"cflayer', just like the CAIF Core protocol stack. Net device and Socket "
"implement the 'receive()' function defined by 'struct cflayer', just like "
"the rest of the CAIF stack. In this way, transmit and receive of packets is "
"handled as by the rest of the layers: the 'dn->transmit()' function is "
"called in order to transmit data."
msgstr ""

#: ../../../networking/caif/linux_caif.rst:188
msgid "Configuration of Link Layer"
msgstr ""

#: ../../../networking/caif/linux_caif.rst:189
msgid ""
"The Link Layer is implemented as Linux network devices (struct net_device). "
"Payload handling and registration is done using standard Linux mechanisms."
msgstr ""

#: ../../../networking/caif/linux_caif.rst:192
msgid ""
"The CAIF Protocol relies on a loss-less link layer without implementing "
"retransmission. This implies that packet drops must not happen. Therefore a "
"flow-control mechanism is implemented where the physical interface can "
"initiate flow stop for all CAIF Channels."
msgstr ""
