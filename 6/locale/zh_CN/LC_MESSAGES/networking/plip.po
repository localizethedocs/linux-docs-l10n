# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../networking/plip.rst:5
msgid "PLIP: The Parallel Line Internet Protocol Device"
msgstr ""

#: ../../../networking/plip.rst:7
msgid ""
"Donald Becker (becker@super.org) I.D.A. Supercomputing Research Center, "
"Bowie MD 20715"
msgstr ""

#: ../../../networking/plip.rst:10
msgid ""
"At some point T. Thorn will probably contribute text, Tommy Thorn "
"(tthorn@daimi.aau.dk)"
msgstr ""

#: ../../../networking/plip.rst:14
msgid "PLIP Introduction"
msgstr ""

#: ../../../networking/plip.rst:16
msgid ""
"This document describes the parallel port packet pusher for Net/LGX. This "
"device interface allows a point-to-point connection between two parallel "
"ports to appear as a IP network interface."
msgstr ""

#: ../../../networking/plip.rst:21
msgid "What is PLIP?"
msgstr ""

#: ../../../networking/plip.rst:23
msgid ""
"PLIP is Parallel Line IP, that is, the transportation of IP packages over a "
"parallel port. In the case of a PC, the obvious choice is the printer port.  "
"PLIP is a non-standard, but [can use] uses the standard LapLink null-printer "
"cable [can also work in turbo mode, with a PLIP cable]. [The protocol used "
"to pack IP packages, is a simple one initiated by Crynwr.]"
msgstr ""

#: ../../../networking/plip.rst:31
msgid "Advantages of PLIP"
msgstr ""

#: ../../../networking/plip.rst:33
msgid "It's cheap, it's available everywhere, and it's easy."
msgstr ""

#: ../../../networking/plip.rst:35
msgid ""
"The PLIP cable is all that's needed to connect two Linux boxes, and it can "
"be built for very few bucks."
msgstr ""

#: ../../../networking/plip.rst:38
msgid ""
"Connecting two Linux boxes takes only a second's decision and a few minutes' "
"work, no need to search for a [supported] netcard. This might even be "
"especially important in the case of notebooks, where netcards are not easily "
"available."
msgstr ""

#: ../../../networking/plip.rst:43
msgid ""
"Not requiring a netcard also means that apart from connecting the cables, "
"everything else is software configuration [which in principle could be made "
"very easy.]"
msgstr ""

#: ../../../networking/plip.rst:48
msgid "Disadvantages of PLIP"
msgstr ""

#: ../../../networking/plip.rst:50
msgid ""
"Doesn't work over a modem, like SLIP and PPP. Limited range, 15 m. Can only "
"be used to connect three (?) Linux boxes. Doesn't connect to an existing "
"Ethernet. Isn't standard (not even de facto standard, like SLIP)."
msgstr ""

#: ../../../networking/plip.rst:56
msgid "Performance"
msgstr ""

#: ../../../networking/plip.rst:58
msgid ""
"PLIP easily outperforms Ethernet cards....(ups, I was dreaming, but it *is* "
"getting late. EOB)"
msgstr ""

#: ../../../networking/plip.rst:62
msgid "PLIP driver details"
msgstr ""

#: ../../../networking/plip.rst:64
msgid ""
"The Linux PLIP driver is an implementation of the original Crynwr protocol, "
"that uses the parallel port subsystem of the kernel in order to properly "
"share parallel ports between PLIP and other services."
msgstr ""

#: ../../../networking/plip.rst:69
msgid "IRQs and trigger timeouts"
msgstr ""

#: ../../../networking/plip.rst:71
msgid ""
"When a parallel port used for a PLIP driver has an IRQ configured to it, the "
"PLIP driver is signaled whenever data is sent to it via the cable, such that "
"when no data is available, the driver isn't being used."
msgstr ""

#: ../../../networking/plip.rst:75
msgid ""
"However, on some machines it is hard, if not impossible, to configure an IRQ "
"to a certain parallel port, mainly because it is used by some other device. "
"On these machines, the PLIP driver can be used in IRQ-less mode, where the "
"PLIP driver would constantly poll the parallel port for data waiting, and if "
"such data is available, process it. This mode is less efficient than the IRQ "
"mode, because the driver has to check the parallel port many times per "
"second, even when no data at all is sent. Some rough measurements indicate "
"that there isn't a noticeable performance drop when using IRQ-less mode as "
"compared to IRQ mode as far as the data transfer speed is involved. There is "
"a performance drop on the machine hosting the driver."
msgstr ""

#: ../../../networking/plip.rst:86
msgid ""
"When the PLIP driver is used in IRQ mode, the timeout used for triggering a "
"data transfer (the maximal time the PLIP driver would allow the other side "
"before announcing a timeout, when trying to handshake a transfer of some "
"data) is, by default, 500usec. As IRQ delivery is more or less immediate, "
"this timeout is quite sufficient."
msgstr ""

#: ../../../networking/plip.rst:92
msgid ""
"When in IRQ-less mode, the PLIP driver polls the parallel port HZ times per "
"second (where HZ is typically 100 on most platforms, and 1024 on an Alpha, "
"as of this writing). Between two such polls, there are 10^6/HZ usecs. On an "
"i386, for example, 10^6/100 = 10000usec. It is easy to see that it is quite "
"possible for the trigger timeout to expire between two such polls, as the "
"timeout is only 500usec long. As a result, it is required to change the "
"trigger timeout on the *other* side of a PLIP connection, to about 10^6/HZ "
"usecs. If both sides of a PLIP connection are used in IRQ-less mode, this "
"timeout is required on both sides."
msgstr ""

#: ../../../networking/plip.rst:102
msgid ""
"It appears that in practice, the trigger timeout can be shorter than in the "
"above calculation. It isn't an important issue, unless the wire is faulty, "
"in which case a long timeout would stall the machine when, for whatever "
"reason, bits are dropped."
msgstr ""

#: ../../../networking/plip.rst:107
msgid ""
"A utility that can perform this change in Linux is plipconfig, which is part "
"of the net-tools package (its location can be found in the Documentation/"
"Changes file). An example command would be 'plipconfig plipX trigger 10000', "
"where plipX is the appropriate PLIP device."
msgstr ""

#: ../../../networking/plip.rst:114
msgid "PLIP hardware interconnection"
msgstr ""

#: ../../../networking/plip.rst:116
msgid ""
"PLIP uses several different data transfer methods.  The first (and the only "
"one implemented in the early version of the code) uses a standard printer "
"\"null\" cable to transfer data four bits at a time using data bit outputs "
"connected to status bit inputs."
msgstr ""

#: ../../../networking/plip.rst:121
msgid ""
"The second data transfer method relies on both machines having bi-"
"directional parallel ports, rather than output-only ``printer`` ports.  This "
"allows byte-wide transfers and avoids reconstructing nibbles into bytes, "
"leading to much faster transfers."
msgstr ""

#: ../../../networking/plip.rst:127
msgid "Parallel Transfer Mode 0 Cable"
msgstr ""

#: ../../../networking/plip.rst:129
msgid ""
"The cable for the first transfer mode is a standard printer \"null\" cable "
"which transfers data four bits at a time using data bit outputs of the first "
"port (machine T) connected to the status bit inputs of the second port "
"(machine R).  There are five status inputs, and they are used as four data "
"inputs and a clock (data strobe) input, arranged so that the data input bits "
"appear as contiguous bits with standard status register implementation."
msgstr ""

#: ../../../networking/plip.rst:137
msgid ""
"A cable that implements this protocol is available commercially as a \"Null "
"Printer\" or \"Turbo Laplink\" cable.  It can be constructed with two DB-25 "
"male connectors symmetrically connected as follows::"
msgstr ""

#: ../../../networking/plip.rst:156
msgid ""
"If the cable you are using has a metallic shield it should be connected to "
"the metallic DB-25 shell at one end only."
msgstr ""

#: ../../../networking/plip.rst:160
msgid "Parallel Transfer Mode 1"
msgstr ""

#: ../../../networking/plip.rst:162
msgid ""
"The second data transfer method relies on both machines having bi-"
"directional parallel ports, rather than output-only ``printer`` ports.  This "
"allows byte-wide transfers, and avoids reconstructing nibbles into bytes.  "
"This cable should not be used on unidirectional ``printer`` (as opposed to "
"``parallel``) ports or when the machine isn't configured for PLIP, as it "
"will result in output driver conflicts and the (unlikely) possibility of "
"damage."
msgstr ""

#: ../../../networking/plip.rst:170
msgid "The cable for this transfer mode should be constructed as follows::"
msgstr ""

#: ../../../networking/plip.rst:190
msgid ""
"Once again, if the cable you are using has a metallic shield it should be "
"connected to the metallic DB-25 shell at one end only."
msgstr ""

#: ../../../networking/plip.rst:194
msgid "PLIP Mode 0 transfer protocol"
msgstr ""

#: ../../../networking/plip.rst:196
msgid ""
"The PLIP driver is compatible with the \"Crynwr\" parallel port transfer "
"standard in Mode 0.  That standard specifies the following protocol::"
msgstr ""

#: ../../../networking/plip.rst:205
msgid "Each octet is sent as::"
msgstr ""

#: ../../../networking/plip.rst:210
msgid ""
"To start a transfer the transmitting machine outputs a nibble 0x08. That "
"raises the ACK line, triggering an interrupt in the receiving machine.  The "
"receiving machine disables interrupts and raises its own ACK line."
msgstr ""

#: ../../../networking/plip.rst:215
msgid "Restated::"
msgstr ""
