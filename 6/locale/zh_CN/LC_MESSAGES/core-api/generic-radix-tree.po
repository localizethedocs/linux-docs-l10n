# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../core-api/generic-radix-tree.rst:3
msgid "Generic radix trees/sparse arrays"
msgstr ""

#: ../../../core-api/generic-radix-tree:5: include/linux/generic-radix-tree.h:5
msgid ""
"Very simple and minimalistic, supporting arbitrary size entries up to "
"GENRADIX_NODE_SIZE."
msgstr ""

#: ../../../core-api/generic-radix-tree:5: include/linux/generic-radix-tree.h:8
msgid "A genradix is defined with the type it will store, like so:"
msgstr ""

#: ../../../core-api/generic-radix-tree:5:
#: include/linux/generic-radix-tree.h:10
msgid "static GENRADIX(struct foo) foo_genradix;"
msgstr ""

#: ../../../core-api/generic-radix-tree:5:
#: include/linux/generic-radix-tree.h:12
msgid "The main operations are:"
msgstr ""

#: ../../../core-api/generic-radix-tree:5:
#: include/linux/generic-radix-tree.h:14
msgid "genradix_init(radix) - initialize an empty genradix"
msgstr ""

#: ../../../core-api/generic-radix-tree:5:
#: include/linux/generic-radix-tree.h:16
msgid ""
"genradix_free(radix) - free all memory owned by the genradix and "
"reinitialize it"
msgstr ""

#: ../../../core-api/generic-radix-tree:5:
#: include/linux/generic-radix-tree.h:19
msgid ""
"genradix_ptr(radix, idx) - gets a pointer to the entry at idx, returning "
"NULL if that entry does not exist"
msgstr ""

#: ../../../core-api/generic-radix-tree:5:
#: include/linux/generic-radix-tree.h:22
msgid ""
"genradix_ptr_alloc(radix, idx, gfp) - gets a pointer to an entry, allocating "
"it if necessary"
msgstr ""

#: ../../../core-api/generic-radix-tree:5:
#: include/linux/generic-radix-tree.h:25
msgid ""
"genradix_for_each(radix, iter, p) - iterate over each entry in a genradix"
msgstr ""

#: ../../../core-api/generic-radix-tree:5:
#: include/linux/generic-radix-tree.h:27
msgid ""
"The radix tree allocates one page of entries at a time, so entries may exist "
"that were never explicitly allocated - they will be initialized to all "
"zeroes."
msgstr ""

#: ../../../core-api/generic-radix-tree:5:
#: include/linux/generic-radix-tree.h:31
msgid ""
"Internally, a genradix is just a radix tree of pages, and indexing works in "
"terms of byte offsets. The wrappers in this header file use sizeof on the "
"type the radix contains to calculate a byte offset from the index - see "
"__idx_to_offset."
msgstr ""

#: ../../../core-api/generic-radix-tree.rst:9
msgid "generic radix tree functions"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:140
msgid "``genradix_init (_radix)``"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:138
msgid "initialize a genradix"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:142
#: include/linux/generic-radix-tree.h:155
#: include/linux/generic-radix-tree.h:216
#: include/linux/generic-radix-tree.h:247
#: include/linux/generic-radix-tree.h:273
#: include/linux/generic-radix-tree.h:286
#: include/linux/generic-radix-tree.h:302
#: include/linux/generic-radix-tree.h:362
#: include/linux/generic-radix-tree.h:377
#: include/linux/generic-radix-tree.h:393
msgid "**Parameters**"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:144
#: include/linux/generic-radix-tree.h:157
#: include/linux/generic-radix-tree.h:218
#: include/linux/generic-radix-tree.h:249
#: include/linux/generic-radix-tree.h:275
#: include/linux/generic-radix-tree.h:286
#: include/linux/generic-radix-tree.h:302
#: include/linux/generic-radix-tree.h:364
#: include/linux/generic-radix-tree.h:379
#: include/linux/generic-radix-tree.h:395
msgid "``_radix``"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:139
msgid "genradix to initialize"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:141
#: include/linux/generic-radix-tree.h:154
#: include/linux/generic-radix-tree.h:216
#: include/linux/generic-radix-tree.h:249
#: include/linux/generic-radix-tree.h:287
#: include/linux/generic-radix-tree.h:303
#: include/linux/generic-radix-tree.h:363
#: include/linux/generic-radix-tree.h:378
#: include/linux/generic-radix-tree.h:394
msgid "**Description**"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:140
msgid "Does not fail"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:153
msgid "``genradix_free (_radix)``"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:151
msgid "free all memory owned by a genradix"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:152
msgid "the genradix to free"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:153
msgid "After freeing, **_radix** will be reinitialized and empty"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:214
msgid "``genradix_ptr (_radix, _idx)``"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:212
msgid "get a pointer to a genradix entry"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:213
#: include/linux/generic-radix-tree.h:245
msgid "genradix to access"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:215
#: include/linux/generic-radix-tree.h:247
#: include/linux/generic-radix-tree.h:272
msgid "``_idx``"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:214
#: include/linux/generic-radix-tree.h:246
msgid "index to fetch"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:215
msgid ""
"Returns a pointer to entry at **_idx**, or NULL if that entry does not exist."
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:245
msgid "``genradix_ptr_alloc (_radix, _idx, _gfp)``"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:243
msgid "get a pointer to a genradix entry, allocating it if necessary"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:248
#: include/linux/generic-radix-tree.h:393
msgid "``_gfp``"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:247
#: include/linux/generic-radix-tree.h:392
msgid "gfp mask"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:248
msgid "Returns a pointer to entry at **_idx**, or NULL on allocation failure"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:271
msgid "``genradix_iter_init (_radix, _idx)``"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:269
msgid "initialize a genradix_iter"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:270
msgid "genradix that will be iterated over"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:271
msgid "index to start iterating from"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:284
msgid "``genradix_iter_peek (_iter, _radix)``"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:282
msgid "get first entry at or above iterator's current position"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:288
#: include/linux/generic-radix-tree.h:304
#: include/linux/generic-radix-tree.h:361
#: include/linux/generic-radix-tree.h:376
msgid "``_iter``"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:284
#: include/linux/generic-radix-tree.h:300
msgid "a genradix_iter"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:285
#: include/linux/generic-radix-tree.h:301
msgid "genradix being iterated over"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:286
msgid ""
"If no more entries exist at or above **_iter**'s current position, returns "
"NULL"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:300
msgid "``genradix_iter_peek_prev (_iter, _radix)``"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:298
msgid "get first entry at or below iterator's current position"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:302
msgid ""
"If no more entries exist at or below **_iter**'s current position, returns "
"NULL"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:360
msgid "``genradix_for_each (_radix, _iter, _p)``"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:358
msgid "iterate over entry in a genradix"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:359
#: include/linux/generic-radix-tree.h:374
msgid "genradix to iterate over"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:360
#: include/linux/generic-radix-tree.h:375
msgid "a genradix_iter to track current position"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:362
#: include/linux/generic-radix-tree.h:377
msgid "``_p``"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:361
#: include/linux/generic-radix-tree.h:376
msgid "pointer to genradix entry type"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:362
#: include/linux/generic-radix-tree.h:377
msgid ""
"On every iteration, **_p** will point to the current entry, and **_iter."
"pos** will be the current entry's index."
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:375
msgid "``genradix_for_each_reverse (_radix, _iter, _p)``"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:373
msgid "iterate over entry in a genradix, reverse order"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:391
msgid "``genradix_prealloc (_radix, _nr, _gfp)``"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:389
msgid "preallocate entries in a generic radix tree"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:390
msgid "genradix to preallocate"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:392
msgid "``_nr``"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:391
msgid "number of entries to preallocate"
msgstr ""

#: ../../../core-api/generic-radix-tree:11:
#: include/linux/generic-radix-tree.h:393
msgid "Returns 0 on success, -ENOMEM on failure"
msgstr ""
