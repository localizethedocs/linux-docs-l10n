# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../core-api/floating-point.rst:4
msgid "Floating-point API"
msgstr ""

#: ../../../core-api/floating-point.rst:6
msgid ""
"Kernel code is normally prohibited from using floating-point (FP) registers "
"or instructions, including the C float and double data types. This rule "
"reduces system call overhead, because the kernel does not need to save and "
"restore the userspace floating-point register state."
msgstr ""

#: ../../../core-api/floating-point.rst:11
msgid ""
"However, occasionally drivers or library functions may need to include FP "
"code. This is supported by isolating the functions containing FP code to a "
"separate translation unit (a separate source file), and saving/restoring the "
"FP register state around calls to those functions. This creates \"critical "
"sections\" of floating-point usage."
msgstr ""

#: ../../../core-api/floating-point.rst:17
msgid ""
"The reason for this isolation is to prevent the compiler from generating "
"code touching the FP registers outside these critical sections. Compilers "
"sometimes use FP registers to optimize inlined ``memcpy`` or variable "
"assignment, as floating-point registers may be wider than general-purpose "
"registers."
msgstr ""

#: ../../../core-api/floating-point.rst:22
msgid ""
"Usability of floating-point code within the kernel is architecture-specific. "
"Additionally, because a single kernel may be configured to support platforms "
"both with and without a floating-point unit, FPU availability must be "
"checked both at build time and at run time."
msgstr ""

#: ../../../core-api/floating-point.rst:27
msgid ""
"Several architectures implement the generic kernel floating-point API from "
"``linux/fpu.h``, as described below. Some other architectures implement "
"their own unique APIs, which are documented separately."
msgstr ""

#: ../../../core-api/floating-point.rst:32
msgid "Build-time API"
msgstr ""

#: ../../../core-api/floating-point.rst:34
msgid ""
"Floating-point code may be built if the option "
"``ARCH_HAS_KERNEL_FPU_SUPPORT`` is enabled. For C code, such code must be "
"placed in a separate file, and that file must have its compilation flags "
"adjusted using the following pattern::"
msgstr ""

#: ../../../core-api/floating-point.rst:41
msgid ""
"Architectures are expected to define one or both of these variables in their "
"top-level Makefile as needed. For example::"
msgstr ""

#: ../../../core-api/floating-point.rst:46
msgid "or::"
msgstr ""

#: ../../../core-api/floating-point.rst:50
msgid ""
"Normal kernel code is assumed to use the equivalent of ``CC_FLAGS_NO_FPU``."
msgstr ""

#: ../../../core-api/floating-point.rst:53
msgid "Runtime API"
msgstr ""

#: ../../../core-api/floating-point.rst:55
msgid ""
"The runtime API is provided in ``linux/fpu.h``. This header cannot be "
"included from files implementing FP code (those with their compilation flags "
"adjusted as above). Instead, it must be included when defining the FP "
"critical sections."
msgstr ""

#: ../../../core-api/floating-point.rst:61
msgid ""
"This function reports if floating-point code can be used on this CPU or "
"platform. The value returned by this function is not expected to change at "
"runtime, so it only needs to be called once, not before every critical "
"section."
msgstr ""

#: ../../../core-api/floating-point.rst:69
msgid ""
"These functions create a floating-point critical section. It is only valid "
"to call ``kernel_fpu_begin()`` after a previous call to "
"``kernel_fpu_available()`` returned ``true``. These functions are only "
"guaranteed to be callable from (preemptible or non-preemptible) process "
"context."
msgstr ""

#: ../../../core-api/floating-point.rst:75
msgid ""
"Preemption may be disabled inside critical sections, so their size should be "
"minimized. They are *not* required to be reentrant. If the caller expects to "
"nest critical sections, it must implement its own reference counting."
msgstr ""
