# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-14 08:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../core-api/kho/concepts.rst:6
msgid "Kexec Handover Concepts"
msgstr ""

#: ../../../core-api/kho/concepts.rst:8
msgid ""
"Kexec HandOver (KHO) is a mechanism that allows Linux to preserve memory "
"regions, which could contain serialized system states, across kexec."
msgstr ""

#: ../../../core-api/kho/concepts.rst:11
msgid "It introduces multiple concepts:"
msgstr ""

#: ../../../core-api/kho/concepts.rst:14
msgid "KHO FDT"
msgstr ""

#: ../../../core-api/kho/concepts.rst:16
msgid ""
"Every KHO kexec carries a KHO specific flattened device tree (FDT) blob that "
"describes preserved memory regions. These regions contain either serialized "
"subsystem states, or in-memory data that shall not be touched across kexec. "
"After KHO, subsystems can retrieve and restore preserved memory regions from "
"KHO FDT."
msgstr ""

#: ../../../core-api/kho/concepts.rst:22
msgid ""
"KHO only uses the FDT container format and libfdt library, but does not "
"adhere to the same property semantics that normal device trees do: "
"Properties are passed in native endianness and standardized properties like "
"``regs`` and ``ranges`` do not exist, hence there are no ``#...-cells`` "
"properties."
msgstr ""

#: ../../../core-api/kho/concepts.rst:27
msgid ""
"KHO is still under development. The FDT schema is unstable and would change "
"in the future."
msgstr ""

#: ../../../core-api/kho/concepts.rst:31
msgid "Scratch Regions"
msgstr ""

#: ../../../core-api/kho/concepts.rst:33
msgid ""
"To boot into kexec, we need to have a physically contiguous memory range "
"that contains no handed over memory. Kexec then places the target kernel and "
"initrd into that region. The new kernel exclusively uses this region for "
"memory allocations before during boot up to the initialization of the page "
"allocator."
msgstr ""

#: ../../../core-api/kho/concepts.rst:38
msgid ""
"We guarantee that we always have such regions through the scratch regions: "
"On first boot KHO allocates several physically contiguous memory regions. "
"Since after kexec these regions will be used by early memory allocations, "
"there is a scratch region per NUMA node plus a scratch region to satisfy "
"allocations requests that do not require particular NUMA node assignment. By "
"default, size of the scratch region is calculated based on amount of memory "
"allocated during boot. The ``kho_scratch`` kernel command line option may be "
"used to explicitly define size of the scratch regions. The scratch regions "
"are declared as CMA when page allocator is initialized so that their memory "
"can be used during system lifetime. CMA gives us the guarantee that no "
"handover pages land in that region, because handover pages must be at a "
"static physical memory location and CMA enforces that only movable pages can "
"be located inside."
msgstr ""

#: ../../../core-api/kho/concepts.rst:52
msgid ""
"After KHO kexec, we ignore the ``kho_scratch`` kernel command line option "
"and instead reuse the exact same region that was originally allocated. This "
"allows us to recursively execute any amount of KHO kexecs. Because we used "
"this region for boot memory allocations and as target memory for kexec "
"blobs, some parts of that memory region may be reserved. These reservations "
"are irrelevant for the next KHO, because kexec can overwrite even the "
"original kernel."
msgstr ""

#: ../../../core-api/kho/concepts.rst:62
msgid "KHO finalization phase"
msgstr ""

#: ../../../core-api/kho/concepts.rst:64
msgid ""
"To enable user space based kexec file loader, the kernel needs to be able to "
"provide the FDT that describes the current kernel's state before performing "
"the actual kexec. The process of generating that FDT is called "
"serialization. When the FDT is generated, some properties of the system may "
"become immutable because they are already written down in the FDT. That "
"state is called the KHO finalization phase."
msgstr ""

#: ../../../core-api/kho/concepts.rst:72
msgid "Public API"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:265
msgid "recreates the folio from the preserved memory."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:269
#: kernel/kexec_handover.c:283 kernel/kexec_handover.c:701
#: kernel/kexec_handover.c:745 kernel/kexec_handover.c:764
#: kernel/kexec_handover.c:897 kernel/kexec_handover.c:963
#: kernel/kexec_handover.c:1270 kernel/kexec_handover.c:1290
msgid "**Parameters**"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:271
#: kernel/kexec_handover.c:285
msgid "``phys_addr_t phys``"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:266
msgid "physical address of the folio."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:268
#: kernel/kexec_handover.c:285 kernel/kexec_handover.c:708
#: kernel/kexec_handover.c:746 kernel/kexec_handover.c:766
#: kernel/kexec_handover.c:905 kernel/kexec_handover.c:965
#: kernel/kexec_handover.c:1277 kernel/kexec_handover.c:1292
msgid "**Return**"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:268
msgid "pointer to the struct folio on success, NULL on failure."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:279
msgid "restore list of contiguous order 0 pages."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:280
msgid "physical address of the first page."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:282
#: kernel/kexec_handover.c:763
msgid "``unsigned int nr_pages``"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:281
#: kernel/kexec_handover.c:762
msgid "number of pages."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:3
#: kernel/kexec_handover.c:283 kernel/kexec_handover.c:702
#: kernel/kexec_handover.c:744 kernel/kexec_handover.c:764
#: kernel/kexec_handover.c:897 kernel/kexec_handover.c:963
#: kernel/kexec_handover.c:1290
msgid "**Description**"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:282
msgid ""
"Restore a contiguous list of order 0 pages that was preserved with "
"kho_preserve_pages()."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:286
#: kernel/kexec_handover.c:709 kernel/kexec_handover.c:747
#: kernel/kexec_handover.c:767 kernel/kexec_handover.c:905
#: kernel/kexec_handover.c:1293
msgid "0 on success, error code on failure"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:697
msgid "record the physical address of a sub FDT in KHO root tree."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:703
msgid "``struct kho_serialization *ser``"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:698
msgid "serialization control object passed by KHO notifiers."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:700
#: kernel/kexec_handover.c:1292
msgid "``const char *name``"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:699
msgid "name of the sub tree."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:701
msgid "``void *fdt``"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:700
msgid "the sub tree blob."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:701
msgid ""
"Creates a new child node named **name** in KHO root FDT and records the "
"physical address of **fdt**. The pages of **fdt** must also be preserved by "
"KHO for the new kernel to retrieve it after kexec."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:705
msgid ""
"A debugfs blob entry is also created at ``/sys/kernel/debug/kho/out/sub_fdts/"
"**name**``."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:741
msgid "preserve a folio across kexec."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:747
msgid "``struct folio *folio``"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:742
msgid "folio to preserve."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:743
msgid ""
"Instructs KHO to preserve the whole folio across kexec. The order will be "
"preserved as well."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:760
msgid "preserve contiguous pages across kexec"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:766
msgid "``struct page *page``"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:761
msgid "first page in the list."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:763
msgid ""
"Preserve a contiguous list of order 0 pages. Must be restored using "
"kho_restore_pages() to ensure the pages are restored properly as order 0."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:893
msgid "preserve memory allocated with vmalloc() across kexec"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:899
msgid "``void *ptr``"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:894
msgid "pointer to the area in vmalloc address space"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:896
msgid "``struct kho_vmalloc *preservation``"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:895
msgid "placeholder for preservation metadata"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:896
msgid ""
"Instructs KHO to preserve the area in vmalloc address space at **ptr**. The "
"physical pages mapped at **ptr** will be preserved and on successful return "
"**preservation** will hold the physical address of a structure that "
"describes the preservation."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:901
msgid "**NOTE**"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:902
msgid ""
"The memory allocated with vmalloc_node() variants cannot be reliably "
"restored on the same node"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:959
msgid ""
"recreates and populates an area in vmalloc address space from the preserved "
"memory."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:965
msgid "``const struct kho_vmalloc *preservation``"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:961
msgid "preservation metadata."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:962
msgid ""
"Recreates an area in vmalloc address space and populates it with memory that "
"was preserved using kho_preserve_vmalloc()."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:966
msgid "pointer to the area in the vmalloc address space, NULL on failure."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:1266
msgid "check if current kernel was booted via KHO-enabled kexec"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:1272
msgid "``void``"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:1
msgid "no arguments"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:1267
msgid ""
"This function checks if the current kernel was loaded through a kexec "
"operation with KHO enabled, by verifying that a valid KHO FDT was passed."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:1271
msgid "**Note**"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:1273
msgid ""
"This function returns reliable results only after kho_populate() has been "
"called during early boot. Before that, it may return false even if KHO data "
"is present."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:1277
msgid "true if booted via KHO-enabled kexec, false otherwise"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:1286
msgid "retrieve a preserved sub FDT by its name."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:1287
msgid "the name of the sub FDT passed to kho_add_subtree()."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:1289
msgid "``phys_addr_t *phys``"
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:1288
msgid "if found, the physical address of the sub FDT is stored in **phys**."
msgstr ""

#: ../../../core-api/kho/concepts:73: kernel/kexec_handover.c:1289
msgid ""
"Retrieve a preserved sub FDT named **name** and store its physical address "
"in **phys**."
msgstr ""
