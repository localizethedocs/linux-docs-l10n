# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../core-api/errseq.rst:3
msgid "The errseq_t datatype"
msgstr ""

#: ../../../core-api/errseq.rst:5
msgid ""
"An errseq_t is a way of recording errors in one place, and allowing any "
"number of \"subscribers\" to tell whether it has changed since a previous "
"point where it was sampled."
msgstr ""

#: ../../../core-api/errseq.rst:9
msgid ""
"The initial use case for this is tracking errors for file synchronization "
"syscalls (fsync, fdatasync, msync and sync_file_range), but it may be usable "
"in other situations."
msgstr ""

#: ../../../core-api/errseq.rst:13
msgid ""
"It's implemented as an unsigned 32-bit value.  The low order bits are "
"designated to hold an error code (between 1 and MAX_ERRNO).  The upper bits "
"are used as a counter.  This is done with atomics instead of locking so that "
"these functions can be called from any context."
msgstr ""

#: ../../../core-api/errseq.rst:18
msgid ""
"Note that there is a risk of collisions if new errors are being recorded "
"frequently, since we have so few bits to use as a counter."
msgstr ""

#: ../../../core-api/errseq.rst:21
msgid ""
"To mitigate this, the bit between the error value and counter is used as a "
"flag to tell whether the value has been sampled since a new value was "
"recorded.  That allows us to avoid bumping the counter if no one has sampled "
"it since the last time an error was recorded."
msgstr ""

#: ../../../core-api/errseq.rst:26
msgid "Thus we end up with a value that looks something like this:"
msgstr ""

#: ../../../core-api/errseq.rst:29
msgid "31..13"
msgstr ""

#: ../../../core-api/errseq.rst:29
msgid "12"
msgstr ""

#: ../../../core-api/errseq.rst:29
msgid "11..0"
msgstr ""

#: ../../../core-api/errseq.rst:31
msgid "counter"
msgstr ""

#: ../../../core-api/errseq.rst:31
msgid "SF"
msgstr ""

#: ../../../core-api/errseq.rst:31
msgid "errno"
msgstr ""

#: ../../../core-api/errseq.rst:34
msgid ""
"The general idea is for \"watchers\" to sample an errseq_t value and keep it "
"as a running cursor.  That value can later be used to tell whether any new "
"errors have occurred since that sampling was done, and atomically record the "
"state at the time that it was checked.  This allows us to record errors in "
"one place, and then have a number of \"watchers\" that can tell whether the "
"value has changed since they last checked it."
msgstr ""

#: ../../../core-api/errseq.rst:41
msgid ""
"A new errseq_t should always be zeroed out.  An errseq_t value of all zeroes "
"is the special (but common) case where there has never been an error. An all "
"zero value thus serves as the \"epoch\" if one wishes to know whether there "
"has ever been an error set since it was first initialized."
msgstr ""

#: ../../../core-api/errseq.rst:47
msgid "API usage"
msgstr ""

#: ../../../core-api/errseq.rst:49
msgid ""
"Let me tell you a story about a worker drone.  Now, he's a good worker "
"overall, but the company is a little...management heavy.  He has to report "
"to 77 supervisors today, and tomorrow the \"big boss\" is coming in from out "
"of town and he's sure to test the poor fellow too."
msgstr ""

#: ../../../core-api/errseq.rst:54
msgid ""
"They're all handing him work to do -- so much he can't keep track of who "
"handed him what, but that's not really a big problem.  The supervisors just "
"want to know when he's finished all of the work they've handed him so far "
"and whether he made any mistakes since they last asked."
msgstr ""

#: ../../../core-api/errseq.rst:59
msgid ""
"He might have made the mistake on work they didn't actually hand him, but he "
"can't keep track of things at that level of detail, all he can remember is "
"the most recent mistake that he made."
msgstr ""

#: ../../../core-api/errseq.rst:63
msgid "Here's our worker_drone representation::"
msgstr ""

#: ../../../core-api/errseq.rst:69
msgid "Every day, the worker_drone starts out with a blank slate::"
msgstr ""

#: ../../../core-api/errseq.rst:75
msgid ""
"The supervisors come in and get an initial read for the day.  They don't "
"care about anything that happened before their watch begins::"
msgstr ""

#: ../../../core-api/errseq.rst:88
msgid ""
"Now they start handing him tasks to do.  Every few minutes they ask him to "
"finish up all of the work they've handed him so far.  Then they ask him "
"whether he made any mistakes on any of it::"
msgstr ""

#: ../../../core-api/errseq.rst:96
msgid "Up to this point, that just keeps returning 0."
msgstr ""

#: ../../../core-api/errseq.rst:98
msgid ""
"Now, the owners of this company are quite miserly and have given him "
"substandard equipment with which to do his job. Occasionally it glitches and "
"he makes a mistake.  He sighs a heavy sigh, and marks it down::"
msgstr ""

#: ../../../core-api/errseq.rst:105
msgid ""
"...and then gets back to work.  The supervisors eventually poll again and "
"they each get the error when they next check.  Subsequent calls will return "
"0, until another error is recorded, at which point it's reported to each of "
"them once."
msgstr ""

#: ../../../core-api/errseq.rst:110
msgid ""
"Note that the supervisors can't tell how many mistakes he made, only whether "
"one was made since they last checked, and the latest value recorded."
msgstr ""

#: ../../../core-api/errseq.rst:114
msgid ""
"Occasionally the big boss comes in for a spot check and asks the worker to "
"do a one-off job for him. He's not really watching the worker full-time like "
"the supervisors, but he does need to know whether a mistake occurred while "
"his job was processing."
msgstr ""

#: ../../../core-api/errseq.rst:119
msgid ""
"He can just sample the current errseq_t in the worker, and then use that to "
"tell whether an error has occurred later::"
msgstr ""

#: ../../../core-api/errseq.rst:126
msgid ""
"Since he's just going to discard \"since\" after that point, he doesn't need "
"to advance it here. He also doesn't need any locking since it's not usable "
"by anyone else."
msgstr ""

#: ../../../core-api/errseq.rst:131
msgid "Serializing errseq_t cursor updates"
msgstr ""

#: ../../../core-api/errseq.rst:133
msgid ""
"Note that the errseq_t API does not protect the errseq_t cursor during a "
"check_and_advance_operation. Only the canonical error code is handled "
"atomically.  In a situation where more than one task might be using the same "
"errseq_t cursor at the same time, it's important to serialize updates to "
"that cursor."
msgstr ""

#: ../../../core-api/errseq.rst:139
msgid ""
"If that's not done, then it's possible for the cursor to go backward in "
"which case the same error could be reported more than once."
msgstr ""

#: ../../../core-api/errseq.rst:142
msgid ""
"Because of this, it's often advantageous to first do an errseq_check to see "
"if anything has changed, and only later do an errseq_check_and_advance after "
"taking the lock. e.g.::"
msgstr ""

#: ../../../core-api/errseq.rst:153
msgid ""
"That avoids the spinlock in the common case where nothing has changed since "
"the last time it was checked."
msgstr ""

#: ../../../core-api/errseq.rst:157
msgid "Functions"
msgstr ""

#: ../../../core-api/errseq:159: lib/errseq.c:49
msgid "set a errseq_t for later reporting"
msgstr ""

#: ../../../core-api/errseq:159: lib/errseq.c:53 lib/errseq.c:117
#: lib/errseq.c:140 lib/errseq.c:161
msgid "**Parameters**"
msgstr ""

#: ../../../core-api/errseq:159: lib/errseq.c:55 lib/errseq.c:119
#: lib/errseq.c:142 lib/errseq.c:163
msgid "``errseq_t *eseq``"
msgstr ""

#: ../../../core-api/errseq:159: lib/errseq.c:50
msgid "errseq_t field that should be set"
msgstr ""

#: ../../../core-api/errseq:159: lib/errseq.c:52
msgid "``int err``"
msgstr ""

#: ../../../core-api/errseq:159: lib/errseq.c:51
msgid "error to set (must be between -1 and -MAX_ERRNO)"
msgstr ""

#: ../../../core-api/errseq:159: lib/errseq.c:53 lib/errseq.c:116
#: lib/errseq.c:140 lib/errseq.c:161
msgid "**Description**"
msgstr ""

#: ../../../core-api/errseq:159: lib/errseq.c:52
msgid ""
"This function sets the error in **eseq**, and increments the sequence "
"counter if the last sequence was sampled at some point in the past."
msgstr ""

#: ../../../core-api/errseq:159: lib/errseq.c:55
msgid "Any error set will always overwrite an existing error."
msgstr ""

#: ../../../core-api/errseq:159: lib/errseq.c:57 lib/errseq.c:123
#: lib/errseq.c:143 lib/errseq.c:172
msgid "**Return**"
msgstr ""

#: ../../../core-api/errseq:159: lib/errseq.c:58
msgid ""
"The previous value, primarily for debugging purposes. The return value "
"should not be used as a previously sampled value in later calls as it will "
"not have the SEEN flag set."
msgstr ""

#: ../../../core-api/errseq:159: lib/errseq.c:113
msgid "Grab current errseq_t value."
msgstr ""

#: ../../../core-api/errseq:159: lib/errseq.c:114
msgid "Pointer to errseq_t to be sampled."
msgstr ""

#: ../../../core-api/errseq:159: lib/errseq.c:115
msgid ""
"This function allows callers to initialise their errseq_t variable. If the "
"error has been \"seen\", new callers will not see an old error. If there is "
"an unseen error in **eseq**, the caller of this function will see it the "
"next time it checks for an error."
msgstr ""

#: ../../../core-api/errseq:159: lib/errseq.c:120
msgid "**Context**"
msgstr ""

#: ../../../core-api/errseq:159: lib/errseq.c:121
msgid "Any context."
msgstr ""

#: ../../../core-api/errseq:159: lib/errseq.c:122
msgid "The current errseq value."
msgstr ""

#: ../../../core-api/errseq:159: lib/errseq.c:136
msgid "Has an error occurred since a particular sample point?"
msgstr ""

#: ../../../core-api/errseq:159: lib/errseq.c:137
msgid "Pointer to errseq_t value to be checked."
msgstr ""

#: ../../../core-api/errseq:159: lib/errseq.c:139
msgid "``errseq_t since``"
msgstr ""

#: ../../../core-api/errseq:159: lib/errseq.c:138
msgid "Previously-sampled errseq_t from which to check."
msgstr ""

#: ../../../core-api/errseq:159: lib/errseq.c:139
msgid ""
"Grab the value that eseq points to, and see if it has changed **since** the "
"given value was sampled. The **since** value is not advanced, so there is no "
"need to mark the value as seen."
msgstr ""

#: ../../../core-api/errseq:159: lib/errseq.c:144
msgid "The latest error set in the errseq_t or 0 if it hasn't changed."
msgstr ""

#: ../../../core-api/errseq:159: lib/errseq.c:157
msgid "Check an errseq_t and advance to current value."
msgstr ""

#: ../../../core-api/errseq:159: lib/errseq.c:158
msgid "Pointer to value being checked and reported."
msgstr ""

#: ../../../core-api/errseq:159: lib/errseq.c:160
msgid "``errseq_t *since``"
msgstr ""

#: ../../../core-api/errseq:159: lib/errseq.c:159
msgid "Pointer to previously-sampled errseq_t to check against and advance."
msgstr ""

#: ../../../core-api/errseq:159: lib/errseq.c:160
msgid ""
"Grab the eseq value, and see whether it matches the value that **since** "
"points to. If it does, then just return 0."
msgstr ""

#: ../../../core-api/errseq:159: lib/errseq.c:163
msgid ""
"If it doesn't, then the value has changed. Set the \"seen\" flag, and try to "
"swap it into place as the new eseq value. Then, set that value as the new "
"\"since\" value, and return whatever the error portion is set to."
msgstr ""

#: ../../../core-api/errseq:159: lib/errseq.c:167
msgid ""
"Note that no locking is provided here for concurrent updates to the "
"\"since\" value. The caller must provide that if necessary. Because of this, "
"callers may want to do a lockless errseq_check before taking the lock and "
"calling this."
msgstr ""

#: ../../../core-api/errseq:159: lib/errseq.c:173
msgid ""
"Negative errno if one has been stored, or 0 if no new error has occurred."
msgstr ""
