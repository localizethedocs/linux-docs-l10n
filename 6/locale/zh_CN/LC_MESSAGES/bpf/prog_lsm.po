# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../bpf/prog_lsm.rst:6
msgid "LSM BPF Programs"
msgstr ""

#: ../../../bpf/prog_lsm.rst:8
msgid ""
"These BPF programs allow runtime instrumentation of the LSM hooks by "
"privileged users to implement system-wide MAC (Mandatory Access Control) and "
"Audit policies using eBPF."
msgstr ""

#: ../../../bpf/prog_lsm.rst:13
msgid "Structure"
msgstr ""

#: ../../../bpf/prog_lsm.rst:15
msgid ""
"The example shows an eBPF program that can be attached to the "
"``file_mprotect`` LSM hook:"
msgstr ""

#: ../../../bpf/prog_lsm.rst:20
msgid ""
"Other LSM hooks which can be instrumented can be found in ``security/"
"security.c``."
msgstr ""

#: ../../../bpf/prog_lsm.rst:23
msgid ""
"eBPF programs that use Documentation/bpf/btf.rst do not need to include "
"kernel headers for accessing information from the attached eBPF program's "
"context. They can simply declare the structures in the eBPF program and only "
"specify the fields that need to be accessed."
msgstr ""

#: ../../../bpf/prog_lsm.rst:41
msgid "The order of the fields is irrelevant."
msgstr ""

#: ../../../bpf/prog_lsm.rst:43
msgid ""
"This can be further simplified (if one has access to the BTF information at "
"build time) by generating the ``vmlinux.h`` with:"
msgstr ""

#: ../../../bpf/prog_lsm.rst:50
msgid ""
"``path-to-btf-vmlinux`` can be ``/sys/kernel/btf/vmlinux`` if the build "
"environment matches the environment the BPF programs are deployed in."
msgstr ""

#: ../../../bpf/prog_lsm.rst:54
msgid ""
"The ``vmlinux.h`` can then simply be included in the BPF programs without "
"requiring the definition of the types."
msgstr ""

#: ../../../bpf/prog_lsm.rst:57
msgid ""
"The eBPF programs can be declared using the``BPF_PROG`` macros defined in "
"`tools/lib/bpf/bpf_tracing.h`_. In this example:"
msgstr ""

#: ../../../bpf/prog_lsm.rst:61
msgid ""
"``\"lsm/file_mprotect\"`` indicates the LSM hook that the program must be "
"attached to"
msgstr ""

#: ../../../bpf/prog_lsm.rst:63
msgid "``mprotect_audit`` is the name of the eBPF program"
msgstr ""

#: ../../../bpf/prog_lsm.rst:89
msgid ""
"The ``__attribute__((preserve_access_index))`` is a clang feature that "
"allows the BPF verifier to update the offsets for the access at runtime "
"using the Documentation/bpf/btf.rst information. Since the BPF verifier is "
"aware of the types, it also validates all the accesses made to the various "
"types in the eBPF program."
msgstr ""

#: ../../../bpf/prog_lsm.rst:96
msgid "Loading"
msgstr ""

#: ../../../bpf/prog_lsm.rst:98
msgid ""
"eBPF programs can be loaded with the :manpage:`bpf(2)` syscall's "
"``BPF_PROG_LOAD`` operation:"
msgstr ""

#: ../../../bpf/prog_lsm.rst:108
msgid ""
"This can be simplified by using a skeleton header generated by ``bpftool``:"
msgstr ""

#: ../../../bpf/prog_lsm.rst:114
msgid ""
"and the program can be loaded by including ``my_prog.skel.h`` and using the "
"generated helper, ``my_prog__open_and_load``."
msgstr ""

#: ../../../bpf/prog_lsm.rst:118
msgid "Attachment to LSM Hooks"
msgstr ""

#: ../../../bpf/prog_lsm.rst:120
msgid ""
"The LSM allows attachment of eBPF programs as LSM hooks using :manpage:"
"`bpf(2)` syscall's ``BPF_RAW_TRACEPOINT_OPEN`` operation or more simply by "
"using the libbpf helper ``bpf_program__attach_lsm``."
msgstr ""

#: ../../../bpf/prog_lsm.rst:124
msgid ""
"The program can be detached from the LSM hook by *destroying* the ``link`` "
"link returned by ``bpf_program__attach_lsm`` using ``bpf_link__destroy``."
msgstr ""

#: ../../../bpf/prog_lsm.rst:127
msgid ""
"One can also use the helpers generated in ``my_prog.skel.h`` i.e. "
"``my_prog__attach`` for attachment and ``my_prog__destroy`` for cleaning up."
msgstr ""

#: ../../../bpf/prog_lsm.rst:131
msgid "Examples"
msgstr ""

#: ../../../bpf/prog_lsm.rst:133
msgid ""
"An example eBPF program can be found in `tools/testing/selftests/bpf/progs/"
"lsm.c`_ and the corresponding userspace code in `tools/testing/selftests/bpf/"
"prog_tests/test_lsm.c`_"
msgstr ""
