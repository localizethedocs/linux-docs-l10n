# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../bpf/linux-notes.rst:0
msgid "Contents"
msgstr ""

#: ../../../bpf/linux-notes.rst:6
msgid "Linux implementation notes"
msgstr ""

#: ../../../bpf/linux-notes.rst:8
msgid ""
"This document provides more details specific to the Linux kernel "
"implementation of the eBPF instruction set."
msgstr ""

#: ../../../bpf/linux-notes.rst:11
msgid "Byte swap instructions"
msgstr ""

#: ../../../bpf/linux-notes.rst:13
msgid ""
"``BPF_FROM_LE`` and ``BPF_FROM_BE`` exist as aliases for ``BPF_TO_LE`` and "
"``BPF_TO_BE`` respectively."
msgstr ""

#: ../../../bpf/linux-notes.rst:16
msgid "Jump instructions"
msgstr ""

#: ../../../bpf/linux-notes.rst:18
msgid ""
"``BPF_CALL | BPF_X | BPF_JMP`` (0x8d), where the helper function integer "
"would be read from a specified register, is not currently supported by the "
"verifier.  Any programs with this instruction will fail to load until such "
"support is added."
msgstr ""

#: ../../../bpf/linux-notes.rst:24
msgid "Maps"
msgstr ""

#: ../../../bpf/linux-notes.rst:26
msgid ""
"Linux only supports the 'map_val(map)' operation on array maps with a single "
"element."
msgstr ""

#: ../../../bpf/linux-notes.rst:28
msgid ""
"Linux uses an fd_array to store maps associated with a BPF program. Thus, "
"map_by_idx(imm) uses the fd at that index in the array."
msgstr ""

#: ../../../bpf/linux-notes.rst:32
msgid "Variables"
msgstr ""

#: ../../../bpf/linux-notes.rst:34
msgid ""
"The following 64-bit immediate instruction specifies that a variable "
"address, which corresponds to some integer stored in the 'imm' field, should "
"be loaded:"
msgstr ""

#: ../../../bpf/linux-notes.rst:38
msgid "opcode construction"
msgstr ""

#: ../../../bpf/linux-notes.rst:38
msgid "opcode"
msgstr ""

#: ../../../bpf/linux-notes.rst:38
msgid "src"
msgstr ""

#: ../../../bpf/linux-notes.rst:38
msgid "pseudocode"
msgstr ""

#: ../../../bpf/linux-notes.rst:38
msgid "imm type"
msgstr ""

#: ../../../bpf/linux-notes.rst:38
msgid "dst type"
msgstr ""

#: ../../../bpf/linux-notes.rst:40
msgid "BPF_IMM | BPF_DW | BPF_LD"
msgstr ""

#: ../../../bpf/linux-notes.rst:40
msgid "0x18"
msgstr ""

#: ../../../bpf/linux-notes.rst:40
msgid "0x3"
msgstr ""

#: ../../../bpf/linux-notes.rst:40
msgid "dst = var_addr(imm)"
msgstr ""

#: ../../../bpf/linux-notes.rst:40
msgid "variable id"
msgstr ""

#: ../../../bpf/linux-notes.rst:40
msgid "data pointer"
msgstr ""

#: ../../../bpf/linux-notes.rst:43
msgid "On Linux, this integer is a BTF ID."
msgstr ""

#: ../../../bpf/linux-notes.rst:46
msgid "Legacy BPF Packet access instructions"
msgstr ""

#: ../../../bpf/linux-notes.rst:48
msgid ""
"As mentioned in the `ISA standard documentation <instruction-set.html#legacy-"
"bpf-packet-access-instructions>`_, Linux has special eBPF instructions for "
"access to packet data that have been carried over from classic BPF to retain "
"the performance of legacy socket filters running in the eBPF interpreter."
msgstr ""

#: ../../../bpf/linux-notes.rst:54
msgid ""
"The instructions come in two forms: ``BPF_ABS | <size> | BPF_LD`` and "
"``BPF_IND | <size> | BPF_LD``."
msgstr ""

#: ../../../bpf/linux-notes.rst:57
msgid ""
"These instructions are used to access packet data and can only be used when "
"the program context is a pointer to a networking packet.  ``BPF_ABS`` "
"accesses packet data at an absolute offset specified by the immediate data "
"and ``BPF_IND`` access packet data at an offset that includes the value of a "
"register in addition to the immediate data."
msgstr ""

#: ../../../bpf/linux-notes.rst:63
msgid "These instructions have seven implicit operands:"
msgstr ""

#: ../../../bpf/linux-notes.rst:65
msgid ""
"Register R6 is an implicit input that must contain a pointer to a struct "
"sk_buff."
msgstr ""

#: ../../../bpf/linux-notes.rst:67
msgid ""
"Register R0 is an implicit output which contains the data fetched from the "
"packet."
msgstr ""

#: ../../../bpf/linux-notes.rst:69
msgid ""
"Registers R1-R5 are scratch registers that are clobbered by the instruction."
msgstr ""

#: ../../../bpf/linux-notes.rst:72
msgid ""
"These instructions have an implicit program exit condition as well. If an "
"eBPF program attempts access data beyond the packet boundary, the program "
"execution will be aborted."
msgstr ""

#: ../../../bpf/linux-notes.rst:76
msgid "``BPF_ABS | BPF_W | BPF_LD`` (0x20) means::"
msgstr ""

#: ../../../bpf/linux-notes.rst:80
msgid ""
"where ``ntohl()`` converts a 32-bit value from network byte order to host "
"byte order."
msgstr ""

#: ../../../bpf/linux-notes.rst:82
msgid "``BPF_IND | BPF_W | BPF_LD`` (0x40) means::"
msgstr ""
