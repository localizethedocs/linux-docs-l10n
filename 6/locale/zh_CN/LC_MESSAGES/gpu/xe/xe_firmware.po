# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-14 08:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../gpu/xe/xe_firmware.rst:5
msgid "Firmware"
msgstr ""

#: ../../../gpu/xe/xe_firmware.rst:8
msgid "Firmware Layout"
msgstr ""

#: ../../../gpu/xe/xe_firmware:10: drivers/gpu/drm/xe/xe_uc_fw_abi.h:13
msgid ""
"The CSS-based firmware structure is used for GuC releases on all platforms "
"and for HuC releases up to DG1. Starting from DG2/MTL the HuC uses the GSC "
"layout instead. The CSS firmware layout looks like this::"
msgstr ""

#: ../../../gpu/xe/xe_firmware:10: drivers/gpu/drm/xe/xe_uc_fw_abi.h:29
msgid ""
"The firmware may or may not have modulus key and exponent data. The header, "
"uCode and RSA signature are must-have components that will be used by "
"driver. Length of each components, which is all in dwords, can be found in "
"header. In the case that modulus and exponent are not present in fw, a.k.a "
"truncated image, the length value still appears in header."
msgstr ""

#: ../../../gpu/xe/xe_firmware:10: drivers/gpu/drm/xe/xe_uc_fw_abi.h:35
msgid ""
"Driver will do some basic fw size validation based on the following rules:"
msgstr ""

#: ../../../gpu/xe/xe_firmware:10: drivers/gpu/drm/xe/xe_uc_fw_abi.h:37
msgid "Header, uCode and RSA are must-have components."
msgstr ""

#: ../../../gpu/xe/xe_firmware:10: drivers/gpu/drm/xe/xe_uc_fw_abi.h:38
msgid ""
"All firmware components, if they present, are in the sequence illustrated in "
"the layout table above."
msgstr ""

#: ../../../gpu/xe/xe_firmware:10: drivers/gpu/drm/xe/xe_uc_fw_abi.h:40
msgid "Length info of each component can be found in header, in dwords."
msgstr ""

#: ../../../gpu/xe/xe_firmware:10: drivers/gpu/drm/xe/xe_uc_fw_abi.h:41
msgid ""
"Modulus and exponent key are not required by driver. They may not appear in "
"fw. So driver will load a truncated firmware in this case."
msgstr ""

#: ../../../gpu/xe/xe_firmware:13: drivers/gpu/drm/xe/xe_uc_fw_abi.h:107
msgid ""
"The GSC-based firmware structure is used for GSC releases on all platforms "
"and for HuC releases starting from DG2/MTL. Older HuC releases use the CSS-"
"based layout instead. Differently from the CSS headers, the GSC headers uses "
"a directory + entries structure (i.e., there is array of addresses pointing "
"to specific header extensions identified by a name). Although the header "
"structures are the same, some of the entries are specific to GSC while "
"others are specific to HuC. The manifest header entry, which includes basic "
"information about the binary (like the version) is always present, but it is "
"named differently based on the binary type."
msgstr ""

#: ../../../gpu/xe/xe_firmware:13: drivers/gpu/drm/xe/xe_uc_fw_abi.h:117
msgid ""
"The HuC binary starts with a Code Partition Directory (CPD) header. The "
"entries we're interested in for use in the driver are:"
msgstr ""

#: ../../../gpu/xe/xe_firmware:13: drivers/gpu/drm/xe/xe_uc_fw_abi.h:120
msgid "\"HUCP.man\": points to the manifest header for the HuC."
msgstr ""

#: ../../../gpu/xe/xe_firmware:13: drivers/gpu/drm/xe/xe_uc_fw_abi.h:121
msgid ""
"\"huc_fw\": points to the FW code. On platforms that support load via DMA "
"and 2-step HuC authentication (i.e. MTL+) this is a full CSS-based binary, "
"while if the GSC is the one doing the load (which only happens on DG2) this "
"section only contains the uCode."
msgstr ""

#: ../../../gpu/xe/xe_firmware:13: drivers/gpu/drm/xe/xe_uc_fw_abi.h:126
msgid "The GSC-based HuC firmware layout looks like this::"
msgstr ""

#: ../../../gpu/xe/xe_firmware:13: drivers/gpu/drm/xe/xe_uc_fw_abi.h:160
msgid ""
"The GSC binary starts instead with a layout header, which contains the "
"locations of the various partitions of the binary. The one we're interested "
"in is the boot1 partition, where we can find a BPDT header followed by "
"entries, one of which points to the RBE sub-section of the partition, which "
"contains the CPD. The GSC blob does not contain a CSS-based binary, so we "
"only need to look for the manifest, which is under the \"RBEP.man\" CPD "
"entry. Note that we have no need to find where the actual FW code is inside "
"the image because the GSC ROM will itself parse the headers to find it and "
"load it. The GSC firmware header layout looks like this::"
msgstr ""

#: ../../../gpu/xe/xe_firmware.rst:17
msgid "Write Once Protected Content Memory (WOPCM) Layout"
msgstr ""

#: ../../../gpu/xe/xe_firmware:19: drivers/gpu/drm/xe/xe_wopcm.c:18
msgid ""
"The layout of the WOPCM will be fixed after writing to GuC WOPCM size and "
"offset registers whose values are calculated and determined by HuC/GuC "
"firmware size and set of hardware requirements/restrictions as shown below:"
msgstr ""

#: ../../../gpu/xe/xe_firmware:19: drivers/gpu/drm/xe/xe_wopcm.c:44
msgid ""
"GuC accessible WOPCM starts at GuC WOPCM base and ends at GuC WOPCM top. The "
"top part of the WOPCM is reserved for hardware contexts (e.g. RC6 context)."
msgstr ""

#: ../../../gpu/xe/xe_firmware.rst:23
msgid "GuC CTB Blob"
msgstr ""

#: ../../../gpu/xe/xe_firmware:25: drivers/gpu/drm/xe/xe_guc_ct.c:136
msgid "We allocate single blob to hold both CTB descriptors and buffers:"
msgstr ""

#: ../../../gpu/xe/xe_firmware:25: drivers/gpu/drm/xe/xe_guc_ct.c:139
msgid "offset"
msgstr ""

#: ../../../gpu/xe/xe_firmware:25: drivers/gpu/drm/xe/xe_guc_ct.c:139
msgid "contents"
msgstr ""

#: ../../../gpu/xe/xe_firmware:25: drivers/gpu/drm/xe/xe_guc_ct.c:139
msgid "size"
msgstr ""

#: ../../../gpu/xe/xe_firmware:25: drivers/gpu/drm/xe/xe_guc_ct.c:141
msgid "0x0000"
msgstr ""

#: ../../../gpu/xe/xe_firmware:25: drivers/gpu/drm/xe/xe_guc_ct.c:141
msgid "H2G CTB Descriptor (send)"
msgstr ""

#: ../../../gpu/xe/xe_firmware:25: drivers/gpu/drm/xe/xe_guc_ct.c:142
msgid "4K"
msgstr ""

#: ../../../gpu/xe/xe_firmware:25: drivers/gpu/drm/xe/xe_guc_ct.c:143
msgid "0x0800"
msgstr ""

#: ../../../gpu/xe/xe_firmware:25: drivers/gpu/drm/xe/xe_guc_ct.c:143
msgid "G2H CTB Descriptor (g2h)"
msgstr ""

#: ../../../gpu/xe/xe_firmware:25: drivers/gpu/drm/xe/xe_guc_ct.c:145
msgid "0x1000"
msgstr ""

#: ../../../gpu/xe/xe_firmware:25: drivers/gpu/drm/xe/xe_guc_ct.c:145
msgid "H2G CT Buffer (send)"
msgstr ""

#: ../../../gpu/xe/xe_firmware:25: drivers/gpu/drm/xe/xe_guc_ct.c:145
msgid "n*4K"
msgstr ""

#: ../../../gpu/xe/xe_firmware:25: drivers/gpu/drm/xe/xe_guc_ct.c:148
msgid "0x1000 + n*4K"
msgstr ""

#: ../../../gpu/xe/xe_firmware:25: drivers/gpu/drm/xe/xe_guc_ct.c:148
msgid "G2H CT Buffer (g2h)"
msgstr ""

#: ../../../gpu/xe/xe_firmware:25: drivers/gpu/drm/xe/xe_guc_ct.c:148
msgid "m*4K"
msgstr ""

#: ../../../gpu/xe/xe_firmware:25: drivers/gpu/drm/xe/xe_guc_ct.c:152
msgid ""
"Size of each ``CT Buffer`` must be multiple of 4K. We don't expect too many "
"messages in flight at any time, unless we are using the GuC submission. In "
"that case each request requires a minimum 2 dwords which gives us a maximum "
"256 queue'd requests. Hopefully this enough space to avoid backpressure on "
"the driver. We increase the size of the receive buffer (relative to the "
"send) to ensure a G2H response CTB has a landing spot."
msgstr ""

#: ../../../gpu/xe/xe_firmware:25: drivers/gpu/drm/xe/xe_guc_ct.c:160
msgid ""
"In addition to submissions, the G2H buffer needs to be able to hold enough "
"space for recoverable page fault notifications. The number of page faults is "
"interrupt driven and can be as much as the number of compute resources "
"available. However, most of the actual work for these is in a separate page "
"fault worker thread. Therefore we only need to make sure the queue has "
"enough space to handle all of the submissions and responses and an extra "
"buffer for incoming page faults."
msgstr ""

#: ../../../gpu/xe/xe_firmware.rst:29
msgid "GuC Power Conservation (PC)"
msgstr ""

#: ../../../gpu/xe/xe_firmware:31: drivers/gpu/drm/xe/xe_guc_pc.c:65
msgid ""
"GuC Power Conservation (PC) supports multiple features for the most "
"efficient and performing use of the GT when GuC submission is enabled, "
"including frequency management, Render-C states management, and various "
"algorithms for power balancing."
msgstr ""

#: ../../../gpu/xe/xe_firmware:31: drivers/gpu/drm/xe/xe_guc_pc.c:70
msgid ""
"Single Loop Power Conservation (SLPC) is the name given to the suite of "
"connected power conservation features in the GuC firmware. The firmware "
"exposes a programming interface to the host for the control of SLPC."
msgstr ""

#: ../../../gpu/xe/xe_firmware.rst:35
msgid "PCIe Gen5 Limitations"
msgstr ""

#: ../../../gpu/xe/xe_firmware:37: drivers/gpu/drm/xe/xe_device_sysfs.c:200
msgid ""
"Default link speed of discrete GPUs is determined by configuration "
"parameters stored in their flash memory, which are subject to override "
"through user initiated firmware updates. It has been observed that devices "
"configured with PCIe Gen5 as their default link speed can come across link "
"quality issues due to host or motherboard limitations and may have to auto-"
"downgrade their link to PCIe Gen4 speed when faced with unstable link at "
"Gen5, which makes firmware updates rather risky on such setups. It is "
"required to ensure that the device is capable of auto-downgrading its link "
"to PCIe Gen4 speed before pushing the firmware image with PCIe Gen5 as "
"default configuration. This can be done by reading "
"``auto_link_downgrade_capable`` sysfs entry, which will denote if the device "
"is capable of auto-downgrading its link to PCIe Gen4 speed with boolean "
"output value of ``0`` or ``1``, meaning `incapable` or `capable` "
"respectively."
msgstr ""

#: ../../../gpu/xe/xe_firmware:37: drivers/gpu/drm/xe/xe_device_sysfs.c:218
msgid ""
"Pushing the firmware image with PCIe Gen5 as default configuration on a auto "
"link downgrade incapable device and facing link instability due to host or "
"motherboard limitations can result in driver failing to bind to the device, "
"making further firmware updates impossible with RMA being the only last "
"resort."
msgstr ""

#: ../../../gpu/xe/xe_firmware:37: drivers/gpu/drm/xe/xe_device_sysfs.c:224
msgid ""
"Link downgrade status of auto link downgrade capable devices is available "
"through ``auto_link_downgrade_status`` sysfs entry with boolean output value "
"of ``0`` or ``1``, where ``0`` means no auto-downgrading was required during "
"link training (which is the optimal scenario) and ``1`` means the device has "
"auto-downgraded its link to PCIe Gen4 speed due to unstable Gen5 link."
msgstr ""

#: ../../../gpu/xe/xe_firmware.rst:41
msgid "Internal API"
msgstr ""

#: ../../../gpu/xe/xe_firmware.rst:43
msgid "TODO"
msgstr ""
