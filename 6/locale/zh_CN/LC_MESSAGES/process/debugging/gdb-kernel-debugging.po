# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../process/debugging/gdb-kernel-debugging.rst:4
msgid "Debugging kernel and modules via gdb"
msgstr ""

#: ../../../process/debugging/gdb-kernel-debugging.rst:6
msgid ""
"The kernel debugger kgdb, hypervisors like QEMU or JTAG-based hardware "
"interfaces allow to debug the Linux kernel and its modules during runtime "
"using gdb. Gdb comes with a powerful scripting interface for python. The "
"kernel provides a collection of helper scripts that can simplify typical "
"kernel debugging steps. This is a short tutorial about how to enable and use "
"them. It focuses on QEMU/KVM virtual machines as target, but the examples "
"can be transferred to the other gdb stubs as well."
msgstr ""

#: ../../../process/debugging/gdb-kernel-debugging.rst:16
msgid "Requirements"
msgstr ""

#: ../../../process/debugging/gdb-kernel-debugging.rst:18
msgid ""
"gdb 7.2+ (recommended: 7.4+) with python support enabled (typically true for "
"distributions)"
msgstr ""

#: ../../../process/debugging/gdb-kernel-debugging.rst:23
msgid "Setup"
msgstr ""

#: ../../../process/debugging/gdb-kernel-debugging.rst:25
msgid ""
"Create a virtual Linux machine for QEMU/KVM (see www.linux-kvm.org and www."
"qemu.org for more details). For cross-development, https://landley.net/"
"aboriginal/bin keeps a pool of machine images and toolchains that can be "
"helpful to start from."
msgstr ""

#: ../../../process/debugging/gdb-kernel-debugging.rst:30
msgid ""
"Build the kernel with CONFIG_GDB_SCRIPTS enabled, but leave "
"CONFIG_DEBUG_INFO_REDUCED off. If your architecture supports "
"CONFIG_FRAME_POINTER, keep it enabled."
msgstr ""

#: ../../../process/debugging/gdb-kernel-debugging.rst:34
msgid ""
"Install that kernel on the guest, turn off KASLR if necessary by adding "
"\"nokaslr\" to the kernel command line. Alternatively, QEMU allows to boot "
"the kernel directly using -kernel, -append, -initrd command line switches. "
"This is generally only useful if you do not depend on modules. See QEMU "
"documentation for more details on this mode. In this case, you should build "
"the kernel with CONFIG_RANDOMIZE_BASE disabled if the architecture supports "
"KASLR."
msgstr ""

#: ../../../process/debugging/gdb-kernel-debugging.rst:42
msgid "Build the gdb scripts (required on kernels v5.1 and above)::"
msgstr ""

#: ../../../process/debugging/gdb-kernel-debugging.rst:46
msgid "Enable the gdb stub of QEMU/KVM, either"
msgstr ""

#: ../../../process/debugging/gdb-kernel-debugging.rst:48
msgid "at VM startup time by appending \"-s\" to the QEMU command line"
msgstr ""

#: ../../../process/debugging/gdb-kernel-debugging.rst:50
msgid "or"
msgstr ""

#: ../../../process/debugging/gdb-kernel-debugging.rst:52
msgid "during runtime by issuing \"gdbserver\" from the QEMU monitor console"
msgstr ""

#: ../../../process/debugging/gdb-kernel-debugging.rst:55
msgid "cd /path/to/linux-build"
msgstr ""

#: ../../../process/debugging/gdb-kernel-debugging.rst:57
msgid "Start gdb: gdb vmlinux"
msgstr ""

#: ../../../process/debugging/gdb-kernel-debugging.rst:59
msgid ""
"Note: Some distros may restrict auto-loading of gdb scripts to known safe "
"directories. In case gdb reports to refuse loading vmlinux-gdb.py, add::"
msgstr ""

#: ../../../process/debugging/gdb-kernel-debugging.rst:64
msgid "to ~/.gdbinit. See gdb help for more details."
msgstr ""

#: ../../../process/debugging/gdb-kernel-debugging.rst:66
msgid "Attach to the booted guest::"
msgstr ""

#: ../../../process/debugging/gdb-kernel-debugging.rst:72
msgid "Examples of using the Linux-provided gdb helpers"
msgstr ""

#: ../../../process/debugging/gdb-kernel-debugging.rst:74
msgid "Load module (and main kernel) symbols::"
msgstr ""

#: ../../../process/debugging/gdb-kernel-debugging.rst:87
msgid "Set a breakpoint on some not yet loaded module function, e.g.::"
msgstr ""

#: ../../../process/debugging/gdb-kernel-debugging.rst:94
msgid "Continue the target::"
msgstr ""

#: ../../../process/debugging/gdb-kernel-debugging.rst:98
msgid ""
"Load the module on the target and watch the symbols being loaded as well as "
"the breakpoint hit::"
msgstr ""

#: ../../../process/debugging/gdb-kernel-debugging.rst:109
msgid "Dump the log buffer of the target kernel::"
msgstr ""

#: ../../../process/debugging/gdb-kernel-debugging.rst:121
msgid ""
"Examine fields of the current task struct(supported by x86 and arm64 only)::"
msgstr ""

#: ../../../process/debugging/gdb-kernel-debugging.rst:128
msgid "Make use of the per-cpu function for the current or a specified CPU::"
msgstr ""

#: ../../../process/debugging/gdb-kernel-debugging.rst:135
msgid "Dig into hrtimers using the container_of helper::"
msgstr ""

#: ../../../process/debugging/gdb-kernel-debugging.rst:159
msgid "List of commands and functions"
msgstr ""

#: ../../../process/debugging/gdb-kernel-debugging.rst:161
msgid ""
"The number of commands and convenience functions may evolve over the time, "
"this is just a snapshot of the initial version::"
msgstr ""

#: ../../../process/debugging/gdb-kernel-debugging.rst:174
msgid ""
"Detailed help can be obtained via \"help <command-name>\" for commands and "
"\"help function <function-name>\" for convenience functions."
msgstr ""
