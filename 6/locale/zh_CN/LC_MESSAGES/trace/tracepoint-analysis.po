# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../trace/tracepoint-analysis.rst:3
msgid "Notes on Analysing Behaviour Using Events and Tracepoints"
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:0
msgid "Author"
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:4
msgid "Mel Gorman (PCL information heavily based on email from Ingo Molnar)"
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:7
msgid "1. Introduction"
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:9
msgid ""
"Tracepoints (see Documentation/trace/tracepoints.rst) can be used without "
"creating custom kernel modules to register probe functions using the event "
"tracing infrastructure."
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:13
msgid ""
"Simplistically, tracepoints represent important events that can be taken in "
"conjunction with other tracepoints to build a \"Big Picture\" of what is "
"going on within the system. There are a large number of methods for "
"gathering and interpreting these events. Lacking any current Best Practises, "
"this document describes some of the methods that can be used."
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:19
msgid ""
"This document assumes that debugfs is mounted on /sys/kernel/debug and that "
"the appropriate tracing options have been configured into the kernel. It is "
"assumed that the PCL tool tools/perf has been installed and is in your path."
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:24
msgid "2. Listing Available Events"
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:27
msgid "2.1 Standard Utilities"
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:29
msgid ""
"All possible events are visible from /sys/kernel/tracing/events. Simply "
"calling::"
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:34
msgid "will give a fair indication of the number of events available."
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:37
msgid "2.2 PCL (Performance Counters for Linux)"
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:39
msgid ""
"Discovery and enumeration of all counters and events, including tracepoints, "
"are available with the perf tool. Getting a list of available events is a "
"simple case of::"
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:53
msgid "3. Enabling Events"
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:56
msgid "3.1 System-Wide Event Enabling"
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:58
msgid ""
"See Documentation/trace/events.rst for a proper description on how events "
"can be enabled system-wide. A short example of enabling all events related "
"to page allocation would look something like::"
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:65
msgid "3.2 System-Wide Event Enabling with SystemTap"
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:67
msgid ""
"In SystemTap, tracepoints are accessible using the kernel.trace() function "
"call. The following is an example that reports every 5 seconds what "
"processes were allocating the pages. ::"
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:91
msgid "3.3 System-Wide Event Enabling with PCL"
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:93
msgid ""
"By specifying the -a switch and analysing sleep, the system-wide events for "
"a duration of time can be examined. ::"
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:109
msgid ""
"Similarly, one could execute a shell and exit it as desired to get a report "
"at that point."
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:113
msgid "3.4 Local Event Enabling"
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:115
msgid ""
"Documentation/trace/ftrace.rst describes how to enable events on a per-"
"thread basis using set_ftrace_pid."
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:119
msgid "3.5 Local Event Enablement with PCL"
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:121
msgid ""
"Events can be activated and tracked for the duration of a process on a local "
"basis using PCL such as follows. ::"
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:138
msgid "4. Event Filtering"
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:140
msgid ""
"Documentation/trace/ftrace.rst covers in-depth how to filter events in "
"ftrace.  Obviously using grep and awk of trace_pipe is an option as well as "
"any script reading trace_pipe."
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:145
msgid "5. Analysing Event Variances with PCL"
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:147
msgid ""
"Any workload can exhibit variances between runs and it can be important to "
"know what the standard deviation is. By and large, this is left to the "
"performance analyst to do it by hand. In the event that the discrete event "
"occurrences are useful to the performance analyst, then perf can be used. ::"
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:169
msgid ""
"In the event that some higher-level event is required that depends on some "
"aggregation of discrete events, then a script would need to be developed."
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:172
msgid ""
"Using --repeat, it is also possible to view how events are fluctuating over "
"time on a system-wide basis using -a and sleep. ::"
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:189
msgid "6. Higher-Level Analysis with Helper Scripts"
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:191
msgid ""
"When events are enabled the events that are triggering can be read from /sys/"
"kernel/tracing/trace_pipe in human-readable format although binary options "
"exist as well. By post-processing the output, further information can be "
"gathered on-line as appropriate. Examples of post-processing might include"
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:196
msgid "Reading information from /proc for the PID that triggered the event"
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:197
msgid "Deriving a higher-level event from a series of lower-level events."
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:198
msgid "Calculating latencies between two events"
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:200
msgid ""
"Documentation/trace/postprocess/trace-pagealloc-postprocess.pl is an example "
"script that can read trace_pipe from STDIN or a copy of a trace. When used "
"on-line, it can be interrupted once to generate a report without exiting and "
"twice to exit."
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:205
msgid ""
"Simplistically, the script just reads STDIN and counts up events but it also "
"can do more such as"
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:208
msgid ""
"Derive high-level events from many low-level events. If a number of pages "
"are freed to the main allocator from the per-CPU lists, it recognises that "
"as one per-CPU drain even though there is no specific tracepoint for that "
"event"
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:212
msgid "It can aggregate based on PID or individual process number"
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:213
msgid ""
"In the event memory is getting externally fragmented, it reports on whether "
"the fragmentation event was severe or moderate."
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:215
msgid ""
"When receiving an event about a PID, it can record who the parent was so "
"that if large numbers of events are coming from very short-lived processes, "
"the parent process responsible for creating all the helpers can be identified"
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:221
msgid "7. Lower-Level Analysis with PCL"
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:223
msgid ""
"There may also be a requirement to identify what functions within a program "
"were generating events within the kernel. To begin this sort of analysis, "
"the data must be recorded. At the time of writing, this required root: ::"
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:235
msgid ""
"Note the use of '-c 1' to set the event period to sample. The default sample "
"period is quite high to minimise overhead but the information collected can "
"be very coarse as a result."
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:239
msgid ""
"This record outputted a file called perf.data which can be analysed using "
"perf report. ::"
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:263
msgid ""
"According to this, the vast majority of events triggered on events within "
"the VDSO. With simple binaries, this will often be the case so let's take a "
"slightly different example. In the course of writing this, it was noticed "
"that X was generating an insane amount of page allocations so let's look at "
"it: ::"
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:275
msgid "This was interrupted after a few seconds and ::"
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:292
msgid ""
"So, almost half of the events are occurring in a library. To get an idea "
"which symbol: ::"
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:310
msgid ""
"To see where within the function pixmanFillsse2 things are going wrong: ::"
msgstr ""

#: ../../../trace/tracepoint-analysis.rst:334
msgid ""
"At a glance, it looks like the time is being spent copying pixmaps to the "
"card.  Further investigation would be needed to determine why pixmaps are "
"being copied around so much but a starting point would be to take an ancient "
"build of libpixmap out of the library path where it was totally forgotten "
"about from months ago!"
msgstr ""
