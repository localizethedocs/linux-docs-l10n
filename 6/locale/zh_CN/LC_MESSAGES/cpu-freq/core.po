# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../cpu-freq/core.rst:5
msgid "General description of the CPUFreq core and CPUFreq notifiers"
msgstr ""

#: ../../../cpu-freq/core.rst:7
msgid "Authors:"
msgstr ""

#: ../../../cpu-freq/core.rst:8
msgid "Dominik Brodowski  <linux@brodo.de>"
msgstr ""

#: ../../../cpu-freq/core.rst:9
msgid "David Kimdon <dwhedon@debian.org>"
msgstr ""

#: ../../../cpu-freq/core.rst:10
msgid "Rafael J. Wysocki <rafael.j.wysocki@intel.com>"
msgstr ""

#: ../../../cpu-freq/core.rst:11
msgid "Viresh Kumar <viresh.kumar@linaro.org>"
msgstr ""

#: ../../../cpu-freq/core.rst:20
msgid "1. General Information"
msgstr ""

#: ../../../cpu-freq/core.rst:22
msgid ""
"The CPUFreq core code is located in drivers/cpufreq/cpufreq.c. This cpufreq "
"code offers a standardized interface for the CPUFreq architecture drivers "
"(those pieces of code that do actual frequency transitions), as well as to "
"\"notifiers\". These are device drivers or other part of the kernel that "
"need to be informed of policy changes (ex. thermal modules like ACPI) or of "
"all frequency changes (ex. timing code) or even need to force certain speed "
"limits (like LCD drivers on ARM architecture). Additionally, the kernel "
"\"constant\" loops_per_jiffy is updated on frequency changes here."
msgstr ""

#: ../../../cpu-freq/core.rst:33
msgid ""
"Reference counting of the cpufreq policies is done by cpufreq_cpu_get and "
"cpufreq_cpu_put, which make sure that the cpufreq driver is correctly "
"registered with the core, and will not be unloaded until cpufreq_put_cpu is "
"called. That also ensures that the respective cpufreq policy doesn't get "
"freed while being used."
msgstr ""

#: ../../../cpu-freq/core.rst:40
msgid "2. CPUFreq notifiers"
msgstr ""

#: ../../../cpu-freq/core.rst:42
msgid ""
"CPUFreq notifiers conform to the standard kernel notifier interface. See "
"linux/include/linux/notifier.h for details on notifiers."
msgstr ""

#: ../../../cpu-freq/core.rst:45
msgid ""
"There are two different CPUFreq notifiers - policy notifiers and transition "
"notifiers."
msgstr ""

#: ../../../cpu-freq/core.rst:50
msgid "2.1 CPUFreq policy notifiers"
msgstr ""

#: ../../../cpu-freq/core.rst:52
msgid "These are notified when a new policy is created or removed."
msgstr ""

#: ../../../cpu-freq/core.rst:54
msgid ""
"The phase is specified in the second argument to the notifier.  The phase is "
"CPUFREQ_CREATE_POLICY when the policy is first created and it is "
"CPUFREQ_REMOVE_POLICY when the policy is removed."
msgstr ""

#: ../../../cpu-freq/core.rst:58
msgid ""
"The third argument, a ``void *pointer``, points to a struct cpufreq_policy "
"consisting of several values, including min, max (the lower and upper "
"frequencies (in kHz) of the new policy)."
msgstr ""

#: ../../../cpu-freq/core.rst:64
msgid "2.2 CPUFreq transition notifiers"
msgstr ""

#: ../../../cpu-freq/core.rst:66
msgid ""
"These are notified twice for each online CPU in the policy, when the CPUfreq "
"driver switches the CPU core frequency and this change has no any external "
"implications."
msgstr ""

#: ../../../cpu-freq/core.rst:70
msgid ""
"The second argument specifies the phase - CPUFREQ_PRECHANGE or "
"CPUFREQ_POSTCHANGE."
msgstr ""

#: ../../../cpu-freq/core.rst:73
msgid "The third argument is a struct cpufreq_freqs with the following values:"
msgstr ""

#: ../../../cpu-freq/core.rst:77
msgid "policy"
msgstr ""

#: ../../../cpu-freq/core.rst:77
msgid "a pointer to the struct cpufreq_policy"
msgstr ""

#: ../../../cpu-freq/core.rst:78
msgid "old"
msgstr ""

#: ../../../cpu-freq/core.rst:78
msgid "old frequency"
msgstr ""

#: ../../../cpu-freq/core.rst:79
msgid "new"
msgstr ""

#: ../../../cpu-freq/core.rst:79
msgid "new frequency"
msgstr ""

#: ../../../cpu-freq/core.rst:80
msgid "flags"
msgstr ""

#: ../../../cpu-freq/core.rst:80
msgid "flags of the cpufreq driver"
msgstr ""

#: ../../../cpu-freq/core.rst:84
msgid "3. CPUFreq Table Generation with Operating Performance Point (OPP)"
msgstr ""

#: ../../../cpu-freq/core.rst:85
msgid "For details about OPP, see Documentation/power/opp.rst"
msgstr ""

#: ../../../cpu-freq/core.rst:87
msgid "dev_pm_opp_init_cpufreq_table -"
msgstr ""

#: ../../../cpu-freq/core.rst:88
msgid ""
"This function provides a ready to use conversion routine to translate the "
"OPP layer's internal information about the available frequencies into a "
"format readily providable to cpufreq."
msgstr ""

#: ../../../cpu-freq/core.rst:94
msgid "Do not use this function in interrupt context."
msgstr ""

#: ../../../cpu-freq/core.rst:96
msgid "Example::"
msgstr ""

#: ../../../cpu-freq/core.rst:109
msgid ""
"This function is available only if CONFIG_CPU_FREQ is enabled in addition to "
"CONFIG_PM_OPP."
msgstr ""

#: ../../../cpu-freq/core.rst:112
msgid "dev_pm_opp_free_cpufreq_table"
msgstr ""

#: ../../../cpu-freq/core.rst:113
msgid "Free up the table allocated by dev_pm_opp_init_cpufreq_table"
msgstr ""
