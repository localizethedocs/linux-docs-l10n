# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../virt/kvm/review-checklist.rst:5
msgid "Review checklist for kvm patches"
msgstr ""

#: ../../../virt/kvm/review-checklist.rst:7
msgid ""
"The patch must follow Documentation/process/coding-style.rst and "
"Documentation/process/submitting-patches.rst."
msgstr ""

#: ../../../virt/kvm/review-checklist.rst:10
msgid "Patches should be against kvm.git master or next branches."
msgstr ""

#: ../../../virt/kvm/review-checklist.rst:12
msgid ""
"If the patch introduces or modifies a new userspace API: - the API must be "
"documented in Documentation/virt/kvm/api.rst - the API must be discoverable "
"using KVM_CHECK_EXTENSION"
msgstr ""

#: ../../../virt/kvm/review-checklist.rst:16
msgid "New state must include support for save/restore."
msgstr ""

#: ../../../virt/kvm/review-checklist.rst:18
msgid ""
"New features must default to off (userspace should explicitly request them). "
"Performance improvements can and should default to on."
msgstr ""

#: ../../../virt/kvm/review-checklist.rst:21
msgid ""
"New cpu features should be exposed via KVM_GET_SUPPORTED_CPUID2, or its "
"equivalent for non-x86 architectures"
msgstr ""

#: ../../../virt/kvm/review-checklist.rst:24
msgid "The feature should be testable (see below)."
msgstr ""

#: ../../../virt/kvm/review-checklist.rst:26
msgid ""
"Changes should be vendor neutral when possible.  Changes to common code are "
"better than duplicating changes to vendor code."
msgstr ""

#: ../../../virt/kvm/review-checklist.rst:29
msgid ""
"Similarly, prefer changes to arch independent code than to arch dependent "
"code."
msgstr ""

#: ../../../virt/kvm/review-checklist.rst:32
msgid ""
"User/kernel interfaces and guest/host interfaces must be 64-bit clean (all "
"variables and sizes naturally aligned on 64-bit; use specific types only - "
"u64 rather than ulong)."
msgstr ""

#: ../../../virt/kvm/review-checklist.rst:36
msgid ""
"New guest visible features must either be documented in a hardware manual or "
"be accompanied by documentation."
msgstr ""

#: ../../../virt/kvm/review-checklist.rst:40
msgid "Testing of KVM code"
msgstr ""

#: ../../../virt/kvm/review-checklist.rst:42
msgid ""
"All features contributed to KVM, and in many cases bugfixes too, should be "
"accompanied by some kind of tests and/or enablement in open source guests "
"and VMMs.  KVM is covered by multiple test suites:"
msgstr ""

#: ../../../virt/kvm/review-checklist.rst:46
msgid "*Selftests*"
msgstr ""

#: ../../../virt/kvm/review-checklist.rst:47
msgid ""
"These are low level tests that allow granular testing of kernel APIs. This "
"includes API failure scenarios, invoking APIs after specific guest "
"instructions, and testing multiple calls to ``KVM_CREATE_VM`` within a "
"single test.  They are included in the kernel tree at ``tools/testing/"
"selftests/kvm``."
msgstr ""

#: ../../../virt/kvm/review-checklist.rst:53
msgid "``kvm-unit-tests``"
msgstr ""

#: ../../../virt/kvm/review-checklist.rst:54
msgid ""
"A collection of small guests that test CPU and emulated device features from "
"a guest's perspective.  They run under QEMU or ``kvmtool``, and are "
"generally not KVM-specific: they can be run with any accelerator that QEMU "
"support or even on bare metal, making it possible to compare behavior across "
"hypervisors and processor families."
msgstr ""

#: ../../../virt/kvm/review-checklist.rst:60
msgid "Functional test suites"
msgstr ""

#: ../../../virt/kvm/review-checklist.rst:61
msgid ""
"Various sets of functional tests exist, such as QEMU's ``tests/functional`` "
"suite and `avocado-vt <https://avocado-vt.readthedocs.io/en/latest/>`__. "
"These typically involve running a full operating system in a virtual machine."
msgstr ""

#: ../../../virt/kvm/review-checklist.rst:66
msgid ""
"The best testing approach depends on the feature's complexity and operation. "
"Here are some examples and guidelines:"
msgstr ""

#: ../../../virt/kvm/review-checklist.rst:69
msgid "New instructions (no new registers or APIs)"
msgstr ""

#: ../../../virt/kvm/review-checklist.rst:70
msgid ""
"The corresponding CPU features (if applicable) should be made available in "
"QEMU.  If the instructions require emulation support or other code in KVM, "
"it is worth adding coverage to ``kvm-unit-tests`` or selftests; the latter "
"can be a better choice if the instructions relate to an API that already has "
"good selftest coverage."
msgstr ""

#: ../../../virt/kvm/review-checklist.rst:76
msgid "New hardware features (new registers, no new APIs)"
msgstr ""

#: ../../../virt/kvm/review-checklist.rst:77
msgid ""
"These should be tested via ``kvm-unit-tests``; this more or less implies "
"supporting them in QEMU and/or ``kvmtool``.  In some cases selftests can be "
"used instead, similar to the previous case, or specifically to test corner "
"cases in guest state save/restore."
msgstr ""

#: ../../../virt/kvm/review-checklist.rst:82
msgid "Bug fixes and performance improvements"
msgstr ""

#: ../../../virt/kvm/review-checklist.rst:83
msgid ""
"These usually do not introduce new APIs, but it's worth sharing any "
"benchmarks and tests that will validate your contribution, ideally in the "
"form of regression tests.  Tests and benchmarks can be included in either "
"``kvm-unit-tests`` or selftests, depending on the specifics of your change.  "
"Selftests are especially useful for regression tests because they are "
"included directly in Linux's tree."
msgstr ""

#: ../../../virt/kvm/review-checklist.rst:90
msgid "Large scale internal changes"
msgstr ""

#: ../../../virt/kvm/review-checklist.rst:91
msgid ""
"While it's difficult to provide a single policy, you should ensure that the "
"changed code is covered by either ``kvm-unit-tests`` or selftests. In some "
"cases the affected code is run for any guests and functional tests suffice.  "
"Explain your testing process in the cover letter, as that can help identify "
"gaps in existing test suites."
msgstr ""

#: ../../../virt/kvm/review-checklist.rst:97
msgid "New APIs"
msgstr ""

#: ../../../virt/kvm/review-checklist.rst:98
msgid ""
"It is important to demonstrate your use case.  This can be as simple as "
"explaining that the feature is already in use on bare metal, or it can be a "
"proof-of-concept implementation in userspace.  The latter need not be open "
"source, though that is of course preferrable for easier testing. Selftests "
"should test corner cases of the APIs, and should also cover basic host and "
"guest operation if no open source VMM uses the feature."
msgstr ""

#: ../../../virt/kvm/review-checklist.rst:105
msgid "Bigger features, usually spanning host and guest"
msgstr ""

#: ../../../virt/kvm/review-checklist.rst:106
msgid ""
"These should be supported by Linux guests, with limited exceptions for Hyper-"
"V features that are testable on Windows guests.  It is strongly suggested "
"that the feature be usable with an open source host VMM, such as at least "
"one of QEMU or crosvm, and guest firmware.  Selftests should test at least "
"API error cases.  Guest operation can be covered by either selftests of "
"``kvm-unit-tests`` (this is especially important for paravirtualized and "
"Windows-only features).  Strong selftest coverage can also be a replacement "
"for implementation in an open source VMM, but this is generally not "
"recommended."
msgstr ""

#: ../../../virt/kvm/review-checklist.rst:116
msgid ""
"Following the above suggestions for testing in selftests and ``kvm-unit-"
"tests`` will make it easier for the maintainers to review and accept your "
"code.  In fact, even before you contribute your changes upstream it will "
"make it easier for you to develop for KVM."
msgstr ""

#: ../../../virt/kvm/review-checklist.rst:121
msgid ""
"Of course, the KVM maintainers reserve the right to require more tests, "
"though they may also waive the requirement from time to time."
msgstr ""
