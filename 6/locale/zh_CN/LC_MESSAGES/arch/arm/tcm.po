# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../arch/arm/tcm.rst:3
msgid "ARM TCM (Tightly-Coupled Memory) handling in Linux"
msgstr ""

#: ../../../arch/arm/tcm.rst:5
msgid "Written by Linus Walleij <linus.walleij@stericsson.com>"
msgstr ""

#: ../../../arch/arm/tcm.rst:7
msgid ""
"Some ARM SoCs have a so-called TCM (Tightly-Coupled Memory). This is usually "
"just a few (4-64) KiB of RAM inside the ARM processor."
msgstr ""

#: ../../../arch/arm/tcm.rst:11
msgid ""
"Due to being embedded inside the CPU, the TCM has a Harvard-architecture, so "
"there is an ITCM (instruction TCM) and a DTCM (data TCM). The DTCM can not "
"contain any instructions, but the ITCM can actually contain data. The size "
"of DTCM or ITCM is minimum 4KiB so the typical minimum configuration is 4KiB "
"ITCM and 4KiB DTCM."
msgstr ""

#: ../../../arch/arm/tcm.rst:18
msgid ""
"ARM CPUs have special registers to read out status, physical location and "
"size of TCM memories. arch/arm/include/asm/cputype.h defines a CPUID_TCM "
"register that you can read out from the system control coprocessor. "
"Documentation from ARM can be found at http://infocenter.arm.com, search for "
"\"TCM Status Register\" to see documents for all CPUs. Reading this register "
"you can determine if ITCM (bits 1-0) and/or DTCM (bit 17-16) is present in "
"the machine."
msgstr ""

#: ../../../arch/arm/tcm.rst:27
msgid ""
"There is further a TCM region register (search for \"TCM Region Registers\" "
"at the ARM site) that can report and modify the location size of TCM "
"memories at runtime. This is used to read out and modify TCM location and "
"size. Notice that this is not a MMU table: you actually move the physical "
"location of the TCM around. At the place you put it, it will mask any "
"underlying RAM from the CPU so it is usually wise not to overlap any "
"physical RAM with the TCM."
msgstr ""

#: ../../../arch/arm/tcm.rst:36
msgid ""
"The TCM memory can then be remapped to another address again using the MMU, "
"but notice that the TCM is often used in situations where the MMU is turned "
"off. To avoid confusion the current Linux implementation will map the TCM 1 "
"to 1 from physical to virtual memory in the location specified by the "
"kernel. Currently Linux will map ITCM to 0xfffe0000 and on, and DTCM to "
"0xfffe8000 and on, supporting a maximum of 32KiB of ITCM and 32KiB of DTCM."
msgstr ""

#: ../../../arch/arm/tcm.rst:44
msgid ""
"Newer versions of the region registers also support dividing these TCMs in "
"two separate banks, so for example an 8KiB ITCM is divided into two 4KiB "
"banks with its own control registers. The idea is to be able to lock and "
"hide one of the banks for use by the secure world (TrustZone)."
msgstr ""

#: ../../../arch/arm/tcm.rst:50
msgid "TCM is used for a few things:"
msgstr ""

#: ../../../arch/arm/tcm.rst:52
msgid ""
"FIQ and other interrupt handlers that need deterministic timing and cannot "
"wait for cache misses."
msgstr ""

#: ../../../arch/arm/tcm.rst:55
msgid ""
"Idle loops where all external RAM is set to self-refresh retention mode, so "
"only on-chip RAM is accessible by the CPU and then we hang inside ITCM "
"waiting for an interrupt."
msgstr ""

#: ../../../arch/arm/tcm.rst:60
msgid ""
"Other operations which implies shutting off or reconfiguring the external "
"RAM controller."
msgstr ""

#: ../../../arch/arm/tcm.rst:63
msgid ""
"There is an interface for using TCM on the ARM architecture in <asm/tcm.h>. "
"Using this interface it is possible to:"
msgstr ""

#: ../../../arch/arm/tcm.rst:66
msgid "Define the physical address and size of ITCM and DTCM."
msgstr ""

#: ../../../arch/arm/tcm.rst:68
msgid "Tag functions to be compiled into ITCM."
msgstr ""

#: ../../../arch/arm/tcm.rst:70
msgid "Tag data and constants to be allocated to DTCM and ITCM."
msgstr ""

#: ../../../arch/arm/tcm.rst:72
msgid ""
"Have the remaining TCM RAM added to a special allocation pool with "
"gen_pool_create() and gen_pool_add() and provide tcm_alloc() and tcm_free() "
"for this memory. Such a heap is great for things like saving device state "
"when shutting off device power domains."
msgstr ""

#: ../../../arch/arm/tcm.rst:78
msgid ""
"A machine that has TCM memory shall select HAVE_TCM from arch/arm/Kconfig "
"for itself. Code that needs to use TCM shall #include <asm/tcm.h>"
msgstr ""

#: ../../../arch/arm/tcm.rst:82
msgid ""
"Functions to go into itcm can be tagged like this: int __tcmfunc foo(int "
"bar);"
msgstr ""

#: ../../../arch/arm/tcm.rst:85
msgid ""
"Since these are marked to become long_calls and you may want to have "
"functions called locally inside the TCM without wasting space, there is also "
"the __tcmlocalfunc prefix that will make the call relative."
msgstr ""

#: ../../../arch/arm/tcm.rst:90
msgid "Variables to go into dtcm can be tagged like this::"
msgstr ""

#: ../../../arch/arm/tcm.rst:94
msgid "Constants can be tagged like this::"
msgstr ""

#: ../../../arch/arm/tcm.rst:98
msgid "To put assembler into TCM just use::"
msgstr ""

#: ../../../arch/arm/tcm.rst:102
msgid "respectively."
msgstr ""

#: ../../../arch/arm/tcm.rst:104
msgid "Example code::"
msgstr ""
