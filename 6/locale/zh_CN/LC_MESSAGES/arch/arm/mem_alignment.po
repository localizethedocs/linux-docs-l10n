# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../arch/arm/mem_alignment.rst:3
msgid "Memory alignment"
msgstr ""

#: ../../../arch/arm/mem_alignment.rst:5
msgid ""
"Too many problems popped up because of unnoticed misaligned memory access in "
"kernel code lately.  Therefore the alignment fixup is now unconditionally "
"configured in for SA11x0 based targets.  According to Alan Cox, this is a "
"bad idea to configure it out, but Russell King has some good reasons for "
"doing so on some f***ed up ARM architectures like the EBSA110.  However this "
"is not the case on many design I'm aware of, like all SA11x0 based ones."
msgstr ""

#: ../../../arch/arm/mem_alignment.rst:13
msgid ""
"Of course this is a bad idea to rely on the alignment trap to perform "
"unaligned memory access in general.  If those access are predictable, you "
"are better to use the macros provided by include/linux/unaligned.h.  The "
"alignment trap can fixup misaligned access for the exception cases, but at a "
"high performance cost.  It better be rare."
msgstr ""

#: ../../../arch/arm/mem_alignment.rst:19
msgid ""
"Now for user space applications, it is possible to configure the alignment "
"trap to SIGBUS any code performing unaligned access (good for debugging bad "
"code), or even fixup the access by software like for kernel code.  The later "
"mode isn't recommended for performance reasons (just think about the "
"floating point emulation that works about the same way).  Fix your code "
"instead!"
msgstr ""

#: ../../../arch/arm/mem_alignment.rst:26
msgid ""
"Please note that randomly changing the behaviour without good thought is "
"real bad - it changes the behaviour of all unaligned instructions in user "
"space, and might cause programs to fail unexpectedly."
msgstr ""

#: ../../../arch/arm/mem_alignment.rst:30
msgid ""
"To change the alignment trap behavior, simply echo a number into /proc/cpu/"
"alignment.  The number is made up from various bits:"
msgstr ""

#: ../../../arch/arm/mem_alignment.rst:34
msgid "bit"
msgstr ""

#: ../../../arch/arm/mem_alignment.rst:34
msgid "behavior when set"
msgstr ""

#: ../../../arch/arm/mem_alignment.rst:36
msgid "0"
msgstr ""

#: ../../../arch/arm/mem_alignment.rst:36
msgid ""
"A user process performing an unaligned memory access will cause the kernel "
"to print a message indicating process name, pid, pc, instruction, address, "
"and the fault code."
msgstr ""

#: ../../../arch/arm/mem_alignment.rst:41
msgid "1"
msgstr ""

#: ../../../arch/arm/mem_alignment.rst:41
msgid ""
"The kernel will attempt to fix up the user process performing the unaligned "
"access.  This is of course slow (think about the floating point emulator) "
"and not recommended for production use."
msgstr ""

#: ../../../arch/arm/mem_alignment.rst:46
msgid "2"
msgstr ""

#: ../../../arch/arm/mem_alignment.rst:46
msgid ""
"The kernel will send a SIGBUS signal to the user process performing the "
"unaligned access."
msgstr ""

#: ../../../arch/arm/mem_alignment.rst:50
msgid ""
"Note that not all combinations are supported - only values 0 through 5. (6 "
"and 7 don't make sense)."
msgstr ""

#: ../../../arch/arm/mem_alignment.rst:53
msgid ""
"For example, the following will turn on the warnings, but without fixing up "
"or sending SIGBUS signals::"
msgstr ""

#: ../../../arch/arm/mem_alignment.rst:58
msgid ""
"You can also read the content of the same file to get statistical "
"information on unaligned access occurrences plus the current mode of "
"operation for user space code."
msgstr ""

#: ../../../arch/arm/mem_alignment.rst:63
msgid "Nicolas Pitre, Mar 13, 2001.  Modified Russell King, Nov 30, 2001."
msgstr ""
