# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../arch/arm/nwfpe/notes.rst:2
msgid "Notes"
msgstr ""

#: ../../../arch/arm/nwfpe/notes.rst:4
msgid ""
"There seems to be a problem with exp(double) and our emulator.  I haven't "
"been able to track it down yet.  This does not occur with the emulator "
"supplied by Russell King."
msgstr ""

#: ../../../arch/arm/nwfpe/notes.rst:8
msgid ""
"I also found one oddity in the emulator.  I don't think it is serious but "
"will point it out.  The ARM calling conventions require floating point "
"registers f4-f7 to be preserved over a function call.  The compiler quite "
"often uses an stfe instruction to save f4 on the stack upon entry to a "
"function, and an ldfe instruction to restore it before returning."
msgstr ""

#: ../../../arch/arm/nwfpe/notes.rst:14
msgid ""
"I was looking at some code, that calculated a double result, stored it in f4 "
"then made a function call. Upon return from the function call the number in "
"f4 had been converted to an extended value in the emulator."
msgstr ""

#: ../../../arch/arm/nwfpe/notes.rst:18
msgid ""
"This is a side effect of the stfe instruction.  The double in f4 had to be "
"converted to extended, then stored.  If an lfm/sfm combination had been "
"used, then no conversion would occur.  This has performance considerations.  "
"The result from the function call and f4 were used in a multiplication.  If "
"the emulator sees a multiply of a double and extended, it promotes the "
"double to extended, then does the multiply in extended precision."
msgstr ""

#: ../../../arch/arm/nwfpe/notes.rst:25
msgid "This code will cause this problem:"
msgstr ""

#: ../../../arch/arm/nwfpe/notes.rst:27
msgid "double x, y, z; z = log(x)/log(y);"
msgstr ""

#: ../../../arch/arm/nwfpe/notes.rst:30
msgid ""
"The result of log(x) (a double) will be calculated, returned in f0, then "
"moved to f4 to preserve it over the log(y) call.  The division will be done "
"in extended precision, due to the stfe instruction used to save f4 in log(y)."
msgstr ""
