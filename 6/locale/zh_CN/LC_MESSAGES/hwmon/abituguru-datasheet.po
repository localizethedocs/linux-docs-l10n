# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../hwmon/abituguru-datasheet.rst:3
msgid "uGuru datasheet"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:5
msgid ""
"First of all, what I know about uGuru is no fact based on any help, hints or "
"datasheet from Abit. The data I have got on uGuru have I assembled through "
"my weak knowledge in \"backwards engineering\". And just for the record, you "
"may have noticed uGuru isn't a chip developed by Abit, as they claim it to "
"be. It's really just a microprocessor (uC) created by Winbond (W83L950D). "
"And no, reading the manual for this specific uC or mailing Winbond for help "
"won't give any useful data about uGuru, as it is the program inside the uC "
"that is responding to calls."
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:14
msgid "Olle Sandberg <ollebull@gmail.com>, 2005-05-25"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:17
msgid ""
"Original version by Olle Sandberg who did the heavy lifting of the initial "
"reverse engineering. This version has been almost fully rewritten for "
"clarity and extended with write support and info on more databanks, the "
"write support is once again reverse engineered by Olle the additional "
"databanks have been reverse engineered by me. I would like to express my "
"thanks to Olle, this document and the Linux driver could not have been "
"written without his efforts."
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:24
msgid ""
"Note: because of the lack of specs only the sensors part of the uGuru is "
"described here and not the CPU / RAM / etc voltage & frequency control."
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:27
msgid "Hans de Goede <j.w.r.degoede@hhs.nl>, 28-01-2006"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:31
msgid "Detection"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:33
msgid ""
"As far as known the uGuru is always placed at and using the (ISA) I/O-ports "
"0xE0 and 0xE4, so we don't have to scan any port-range, just check what the "
"two ports are holding for detection. We will refer to 0xE0 as CMD (command-"
"port) and 0xE4 as DATA because Abit refers to them with these names."
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:38
msgid ""
"If DATA holds 0x00 or 0x08 and CMD holds 0x00 or 0xAC a uGuru could be "
"present. We have to check for two different values at data-port, because "
"after a reboot uGuru will hold 0x00 here, but if the driver is removed and "
"later on attached again data-port will hold 0x08, more about this later."
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:43
msgid ""
"After wider testing of the Linux kernel driver some variants of the uGuru "
"have turned up which will hold 0x00 instead of 0xAC at the CMD port, thus we "
"also have to test CMD for two different values. On these uGuru's DATA will "
"initially hold 0x09 and will only hold 0x08 after reading CMD first, so CMD "
"must be read first!"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:49
msgid ""
"To be really sure a uGuru is present a test read of one or more register "
"sets should be done."
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:54
msgid "Reading / Writing"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:57
msgid "Addressing"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:59
msgid ""
"The uGuru has a number of different addressing levels. The first addressing "
"level we will call banks. A bank holds data for one or more sensors. The "
"data in a bank for a sensor is one or more bytes large."
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:63
msgid ""
"The number of bytes is fixed for a given bank, you should always read or "
"write that many bytes, reading / writing more will fail, the results when "
"writing less then the number of bytes for a given bank are undetermined."
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:67
msgid ""
"See below for all known bank addresses, numbers of sensors in that bank, "
"number of bytes data per sensor and contents/meaning of those bytes."
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:70
msgid ""
"Although both this document and the kernel driver have kept the sensor "
"terminology for the addressing within a bank this is not 100% correct, in "
"bank 0x24 for example the addressing within the bank selects a PWM output "
"not a sensor."
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:75
msgid ""
"Notice that some banks have both a read and a write address this is how the "
"uGuru determines if a read from or a write to the bank is taking place, thus "
"when reading you should always use the read address and when writing the "
"write address. The write address is always one (1) more than the read "
"address."
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:82
msgid "uGuru ready"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:84
msgid ""
"Before you can read from or write to the uGuru you must first put the uGuru "
"in \"ready\" mode."
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:87
msgid ""
"To put the uGuru in ready mode first write 0x00 to DATA and then wait for "
"DATA to hold 0x09, DATA should read 0x09 within 250 read cycles."
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:90
msgid ""
"Next CMD _must_ be read and should hold 0xAC, usually CMD will hold 0xAC the "
"first read but sometimes it takes a while before CMD holds 0xAC and thus it "
"has to be read a number of times (max 50)."
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:94
msgid ""
"After reading CMD, DATA should hold 0x08 which means that the uGuru is ready "
"for input. As above DATA will usually hold 0x08 the first read but not "
"always. This step can be skipped, but it is undetermined what happens if the "
"uGuru has not yet reported 0x08 at DATA and you proceed with writing a bank "
"address."
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:101
msgid "Sending bank and sensor addresses to the uGuru"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:103
msgid ""
"First the uGuru must be in \"ready\" mode as described above, DATA should "
"hold 0x08 indicating that the uGuru wants input, in this case the bank "
"address."
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:106
msgid ""
"Next write the bank address to DATA. After the bank address has been written "
"wait for to DATA to hold 0x08 again indicating that it wants / is ready for "
"more input (max 250 reads)."
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:110
msgid "Once DATA holds 0x08 again write the sensor address to CMD."
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:114
msgid "Reading"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:116
msgid ""
"First send the bank and sensor addresses as described above. Then for each "
"byte of data you want to read wait for DATA to hold 0x01 which indicates "
"that the uGuru is ready to be read (max 250 reads) and once DATA holds 0x01 "
"read the byte from CMD."
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:121
msgid ""
"Once all bytes have been read data will hold 0x09, but there is no reason to "
"test for this. Notice that the number of bytes is bank address dependent see "
"above and below."
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:125
msgid ""
"After completing a successful read it is advised to put the uGuru back in "
"ready mode, so that it is ready for the next read / write cycle. This way if "
"your program / driver is unloaded and later loaded again the detection "
"algorithm described above will still work."
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:133
msgid "Writing"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:135
msgid ""
"First send the bank and sensor addresses as described above. Then for each "
"byte of data you want to write wait for DATA to hold 0x00 which indicates "
"that the uGuru is ready to be written (max 250 reads) and once DATA holds "
"0x00 write the byte to CMD."
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:140
msgid ""
"Once all bytes have been written wait for DATA to hold 0x01 (max 250 reads) "
"don't ask why this is the way it is."
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:143
msgid "Once DATA holds 0x01 read CMD it should hold 0xAC now."
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:145
msgid ""
"After completing a successful write it is advised to put the uGuru back in "
"ready mode, so that it is ready for the next read / write cycle. This way if "
"your program / driver is unloaded and later loaded again the detection "
"algorithm described above will still work."
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:152
msgid "Gotchas"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:154
msgid ""
"After wider testing of the Linux kernel driver some variants of the uGuru "
"have turned up which do not hold 0x08 at DATA within 250 reads after writing "
"the bank address. With these versions this happens quite frequent, using "
"larger timeouts doesn't help, they just go offline for a second or 2, doing "
"some internal calibration or whatever. Your code should be prepared to "
"handle this and in case of no response in this specific case just goto sleep "
"for a while and then retry."
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:164
msgid "Address Map"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:167
msgid "Bank 0x20 Alarms (R)"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:168
msgid ""
"This bank contains 0 sensors, iow the sensor address is ignored (but must be "
"written) just use 0. Bank 0x20 contains 3 bytes:"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:171
#: ../../../hwmon/abituguru-datasheet.rst:196
#: ../../../hwmon/abituguru-datasheet.rst:219
#: ../../../hwmon/abituguru-datasheet.rst:272
#: ../../../hwmon/abituguru-datasheet.rst:301
#: ../../../hwmon/abituguru-datasheet.rst:310
msgid "Byte 0:"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:172
msgid ""
"This byte holds the alarm flags for sensor 0-7 of Sensor Bank1, with bit 0 "
"corresponding to sensor 0, 1 to 1, etc."
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:175
#: ../../../hwmon/abituguru-datasheet.rst:255
#: ../../../hwmon/abituguru-datasheet.rst:276
#: ../../../hwmon/abituguru-datasheet.rst:322
msgid "Byte 1:"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:176
msgid ""
"This byte holds the alarm flags for sensor 8-15 of Sensor Bank1, with bit 0 "
"corresponding to sensor 8, 1 to 9, etc."
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:179
#: ../../../hwmon/abituguru-datasheet.rst:259
#: ../../../hwmon/abituguru-datasheet.rst:280
msgid "Byte 2:"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:180
msgid ""
"This byte holds the alarm flags for sensor 0-5 of Sensor Bank2, with bit 0 "
"corresponding to sensor 0, 1 to 1, etc."
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:185
msgid "Bank 0x21 Sensor Bank1 Values / Readings (R)"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:186
msgid ""
"This bank contains 16 sensors, for each sensor it contains 1 byte. So far "
"the following sensors are known to be available on all motherboards:"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:189
msgid "Sensor  0 CPU temp"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:190
msgid "Sensor  1 SYS temp"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:191
msgid "Sensor  3 CPU core volt"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:192
msgid "Sensor  4 DDR volt"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:193
msgid "Sensor 10 DDR Vtt volt"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:194
msgid "Sensor 15 PWM temp"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:197
msgid ""
"This byte holds the reading from the sensor. Sensors in Bank1 can be both "
"volt and temp sensors, this is motherboard specific. The uGuru however does "
"seem to know (be programmed with) what kindoff sensor is attached see Sensor "
"Bank1 Settings description."
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:202
msgid ""
"Volt sensors use a linear scale, a reading 0 corresponds with 0 volt and a "
"reading of 255 with 3494 mV. The sensors for higher voltages however are "
"connected through a division circuit. The currently known division circuits "
"in use result in ranges of: 0-4361mV, 0-6248mV or 0-14510mV. 3.3 volt "
"sources use the 0-4361mV range, 5 volt the 0-6248mV and 12 volt the "
"0-14510mV ."
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:208
msgid ""
"Temp sensors also use a linear scale, a reading of 0 corresponds with 0 "
"degree Celsius and a reading of 255 with a reading of 255 degrees Celsius."
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:213
msgid ""
"Bank 0x22 Sensor Bank1 Settings (R) and Bank 0x23 Sensor Bank1 Settings (W)"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:215
msgid ""
"Those banks contain 16 sensors, for each sensor it contains 3 bytes. Each "
"set of 3 bytes contains the settings for the sensor with the same sensor "
"address in Bank 0x21 ."
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:220
#: ../../../hwmon/abituguru-datasheet.rst:311
msgid ""
"Alarm behaviour for the selected sensor. A 1 enables the described behaviour."
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:223
#: ../../../hwmon/abituguru-datasheet.rst:313
msgid "Bit 0:"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:224
msgid ""
"Give an alarm if measured temp is over the warning threshold          (RW) "
"[1]_"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:226
msgid "Bit 1:"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:227
msgid ""
"Give an alarm if measured volt is over the max threshold              (RW) "
"[2]_"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:229
msgid "Bit 2:"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:230
msgid ""
"Give an alarm if measured volt is under the min threshold             (RW) "
"[2]_"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:232
#: ../../../hwmon/abituguru-datasheet.rst:316
msgid "Bit 3:"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:233
msgid ""
"Beep if alarm                                                         (RW)"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:235
msgid "Bit 4:"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:236
msgid ""
"1 if alarm cause measured temp is over the warning threshold          (R)"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:238
msgid "Bit 5:"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:239
msgid ""
"1 if alarm cause measured volt is over the max threshold              (R)"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:241
msgid "Bit 6:"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:242
msgid ""
"1 if alarm cause measured volt is under the min threshold             (R)"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:244
#: ../../../hwmon/abituguru-datasheet.rst:319
msgid "Bit 7:"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:245
msgid ""
"Volt sensor: Shutdown if alarm persist for more than 4 seconds      (RW)"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:246
msgid ""
"Temp sensor: Shutdown if temp is over the shutdown threshold        (RW)"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:248
msgid ""
"This bit is only honored/used by the uGuru if a temp sensor is connected"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:250
msgid ""
"This bit is only honored/used by the uGuru if a volt sensor is connected "
"Note with some trickery this can be used to find out what kinda sensor is "
"detected see the Linux kernel driver for an example with many comments on "
"how todo this."
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:256
msgid "Temp sensor: warning threshold  (scale as bank 0x21)"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:257
msgid "Volt sensor: min threshold      (scale as bank 0x21)"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:260
msgid "Temp sensor: shutdown threshold (scale as bank 0x21)"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:261
msgid "Volt sensor: max threshold      (scale as bank 0x21)"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:265
msgid ""
"Bank 0x24 PWM outputs for FAN's (R) and Bank 0x25 PWM outputs for FAN's (W)"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:267
msgid "Those banks contain 3 \"sensors\", for each sensor it contains 5 bytes."
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:268
msgid "Sensor 0 usually controls the CPU fan"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:269
msgid "Sensor 1 usually controls the NB (or chipset for single chip) fan"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:270
msgid "Sensor 2 usually controls the System fan"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:273
msgid ""
"Flag 0x80 to enable control, Fan runs at 100% when disabled. low nibble "
"(temp)sensor address at bank 0x21 used for control."
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:277
msgid ""
"0-255 = 0-12v (linear), specify voltage at which fan will rotate when under "
"low threshold temp (specified in byte 3)"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:281
msgid ""
"0-255 = 0-12v (linear), specify voltage at which fan will rotate when above "
"high threshold temp (specified in byte 4)"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:284
msgid "Byte 3:"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:285
msgid "Low threshold temp  (scale as bank 0x21)"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:287
msgid "byte 4:"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:288
msgid "High threshold temp (scale as bank 0x21)"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:292
msgid "Bank 0x26 Sensors Bank2 Values / Readings (R)"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:294
msgid ""
"This bank contains 6 sensors (AFAIK), for each sensor it contains 1 byte."
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:296
msgid ""
"So far the following sensors are known to be available on all motherboards:"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:297
msgid "Sensor 0: CPU fan speed"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:298
msgid "Sensor 1: NB (or chipset for single chip) fan speed"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:299
msgid "Sensor 2: SYS fan speed"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:302
msgid "This byte holds the reading from the sensor. 0-255 = 0-15300 (linear)"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:306
msgid ""
"Bank 0x27 Sensors Bank2 Settings (R) and Bank 0x28 Sensors Bank2 Settings (W)"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:308
msgid ""
"Those banks contain 6 sensors (AFAIK), for each sensor it contains 2 bytes."
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:314
msgid "Give an alarm if measured rpm is under the min threshold      (RW)"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:317
msgid "Beep if alarm                                                 (RW)"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:320
msgid "Shutdown if alarm persist for more than 4 seconds             (RW)"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:323
msgid "min threshold (scale as bank 0x26)"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:327
msgid "Warning for the adventurous"
msgstr ""

#: ../../../hwmon/abituguru-datasheet.rst:329
msgid ""
"A word of caution to those who want to experiment and see if they can figure "
"the voltage / clock programming out, I tried reading and only reading banks "
"0-0x30 with the reading code used for the sensor banks (0x20-0x28) and this "
"resulted in a _permanent_ reprogramming of the voltages, luckily I had the "
"sensors part configured so that it would shutdown my system on any out of "
"spec voltages which probably safed my computer (after a reboot I managed to "
"immediately enter the bios and reload the defaults). This probably means "
"that the read/write cycle for the non sensor part is different from the "
"sensor part."
msgstr ""
