# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../userspace-api/media/rc/lirc-write.rst:8
msgid "LIRC write()"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-write.rst:11
msgid "Name"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-write.rst:13
msgid "lirc-write - Write to a LIRC device"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-write.rst:16
msgid "Synopsis"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-write.rst:25
msgid "Arguments"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-write.rst:27
msgid "``fd``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-write.rst:28
msgid "File descriptor returned by ``open()``."
msgstr ""

#: ../../../userspace-api/media/rc/lirc-write.rst:30
msgid "``buf``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-write.rst:31
msgid "Buffer with data to be written"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-write.rst:33
msgid "``count``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-write.rst:34
msgid "Number of bytes at the buffer"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-write.rst:37
msgid "Description"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-write.rst:39
msgid ""
":c:func:`write()` writes up to ``count`` bytes to the device referenced by "
"the file descriptor ``fd`` from the buffer starting at ``buf``."
msgstr ""

#: ../../../userspace-api/media/rc/lirc-write.rst:43
msgid ""
"The exact format of the data depends on what mode a driver is in, use :ref:"
"`lirc_get_features` to get the supported modes and use :ref:"
"`lirc_set_send_mode` set the mode."
msgstr ""

#: ../../../userspace-api/media/rc/lirc-write.rst:47
msgid ""
"When in :ref:`LIRC_MODE_PULSE <lirc-mode-PULSE>` mode, the data written to "
"the chardev is a pulse/space sequence of integer values. Pulses and spaces "
"are only marked implicitly by their position. The data must start and end "
"with a pulse, therefore, the data must always include an uneven number of "
"samples. The write function blocks until the data has been transmitted by "
"the hardware. If more data is provided than the hardware can send, the "
"driver returns ``EINVAL``."
msgstr ""

#: ../../../userspace-api/media/rc/lirc-write.rst:55
msgid ""
"When in :ref:`LIRC_MODE_SCANCODE <lirc-mode-scancode>` mode, one ``struct "
"lirc_scancode`` must be written to the chardev at a time, else ``EINVAL`` is "
"returned. Set the desired scancode in the ``scancode`` member, and the :ref:"
"`IR protocol <Remote_controllers_Protocols>` in the :c:type:`rc_proto`: "
"member. All other members must be set to 0, else ``EINVAL`` is returned. If "
"there is no protocol encoder for the protocol or the scancode is not valid "
"for the specified protocol, ``EINVAL`` is returned. The write function "
"blocks until the scancode is transmitted by the hardware."
msgstr ""

#: ../../../userspace-api/media/rc/lirc-write.rst:66
msgid "Return Value"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-write.rst:68
msgid ""
"On success, the number of bytes written is returned. It is not an error if "
"this number is smaller than the number of bytes requested, or the amount of "
"data required for one frame.  On error, -1 is returned, and the ``errno`` "
"variable is set appropriately. The generic error codes are described at the :"
"ref:`Generic Error Codes <gen-errors>` chapter."
msgstr ""
