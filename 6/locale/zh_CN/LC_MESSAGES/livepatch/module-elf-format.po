# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../livepatch/module-elf-format.rst:3
msgid "Livepatch module ELF format"
msgstr ""

#: ../../../livepatch/module-elf-format.rst:5
msgid ""
"This document outlines the ELF format requirements that livepatch modules "
"must follow."
msgstr ""

#: ../../../livepatch/module-elf-format.rst:14
msgid "1. Background and motivation"
msgstr ""

#: ../../../livepatch/module-elf-format.rst:16
msgid ""
"Formerly, livepatch required separate architecture-specific code to write "
"relocations. However, arch-specific code to write relocations already exists "
"in the module loader, so this former approach produced redundant code. So, "
"instead of duplicating code and re-implementing what the module loader can "
"already do, livepatch leverages existing code in the module loader to "
"perform the all the arch-specific relocation work. Specifically, livepatch "
"reuses the apply_relocate_add() function in the module loader to write "
"relocations. The patch module ELF format described in this document enables "
"livepatch to be able to do this. The hope is that this will make livepatch "
"more easily portable to other architectures and reduce the amount of arch-"
"specific code required to port livepatch to a particular architecture."
msgstr ""

#: ../../../livepatch/module-elf-format.rst:29
msgid ""
"Since apply_relocate_add() requires access to a module's section header "
"table, symbol table, and relocation section indices, ELF information is "
"preserved for livepatch modules (see section 5). Livepatch manages its own "
"relocation sections and symbols, which are described in this document. The "
"ELF constants used to mark livepatch symbols and relocation sections were "
"selected from OS-specific ranges according to the definitions from glibc."
msgstr ""

#: ../../../livepatch/module-elf-format.rst:37
msgid "Why does livepatch need to write its own relocations?"
msgstr ""

#: ../../../livepatch/module-elf-format.rst:38
msgid ""
"A typical livepatch module contains patched versions of functions that can "
"reference non-exported global symbols and non-included local symbols. "
"Relocations referencing these types of symbols cannot be left in as-is since "
"the kernel module loader cannot resolve them and will therefore reject the "
"livepatch module. Furthermore, we cannot apply relocations that affect "
"modules not yet loaded at patch module load time (e.g. a patch to a driver "
"that is not loaded). Formerly, livepatch solved this problem by embedding "
"special \"dynrela\" (dynamic rela) sections in the resulting patch module "
"ELF output. Using these dynrela sections, livepatch could resolve symbols "
"while taking into account its scope and what module the symbol belongs to, "
"and then manually apply the dynamic relocations. However this approach "
"required livepatch to supply arch-specific code in order to write these "
"relocations. In the new format, livepatch manages its own SHT_RELA "
"relocation sections in place of dynrela sections, and the symbols that the "
"relas reference are special livepatch symbols (see section 2 and 3). The "
"arch-specific livepatch relocation code is replaced by a call to "
"apply_relocate_add()."
msgstr ""

#: ../../../livepatch/module-elf-format.rst:57
msgid "2. Livepatch modinfo field"
msgstr ""

#: ../../../livepatch/module-elf-format.rst:59
msgid ""
"Livepatch modules are required to have the \"livepatch\" modinfo attribute. "
"See the sample livepatch module in samples/livepatch/ for how this is done."
msgstr ""

#: ../../../livepatch/module-elf-format.rst:62
msgid ""
"Livepatch modules can be identified by users by using the 'modinfo' command "
"and looking for the presence of the \"livepatch\" field. This field is also "
"used by the kernel module loader to identify livepatch modules."
msgstr ""

#: ../../../livepatch/module-elf-format.rst:67
msgid "Example:"
msgstr ""

#: ../../../livepatch/module-elf-format.rst:69
msgid "**Modinfo output:**"
msgstr ""

#: ../../../livepatch/module-elf-format.rst:81
msgid "3. Livepatch relocation sections"
msgstr ""

#: ../../../livepatch/module-elf-format.rst:83
msgid ""
"A livepatch module manages its own ELF relocation sections to apply "
"relocations to modules as well as to the kernel (vmlinux) at the appropriate "
"time. For example, if a patch module patches a driver that is not currently "
"loaded, livepatch will apply the corresponding livepatch relocation "
"section(s) to the driver once it loads."
msgstr ""

#: ../../../livepatch/module-elf-format.rst:89
msgid ""
"Each \"object\" (e.g. vmlinux, or a module) within a patch module may have "
"multiple livepatch relocation sections associated with it (e.g. patches to "
"multiple functions within the same object). There is a 1-1 correspondence "
"between a livepatch relocation section and the target section (usually the "
"text section of a function) to which the relocation(s) apply. It is also "
"possible for a livepatch module to have no livepatch relocation sections, as "
"in the case of the sample livepatch module (see samples/livepatch)."
msgstr ""

#: ../../../livepatch/module-elf-format.rst:98
msgid ""
"Since ELF information is preserved for livepatch modules (see Section 5), a "
"livepatch relocation section can be applied simply by passing in the "
"appropriate section index to apply_relocate_add(), which then uses it to "
"access the relocation section and apply the relocations."
msgstr ""

#: ../../../livepatch/module-elf-format.rst:103
msgid ""
"Every symbol referenced by a rela in a livepatch relocation section is a "
"livepatch symbol. These must be resolved before livepatch can call "
"apply_relocate_add(). See Section 3 for more information."
msgstr ""

#: ../../../livepatch/module-elf-format.rst:108
msgid "3.1 Livepatch relocation section format"
msgstr ""

#: ../../../livepatch/module-elf-format.rst:110
msgid ""
"Livepatch relocation sections must be marked with the SHF_RELA_LIVEPATCH "
"section flag. See include/uapi/linux/elf.h for the definition. The module "
"loader recognizes this flag and will avoid applying those relocation "
"sections at patch module load time. These sections must also be marked with "
"SHF_ALLOC, so that the module loader doesn't discard them on module load (i."
"e. they will be copied into memory along with the other SHF_ALLOC sections)."
msgstr ""

#: ../../../livepatch/module-elf-format.rst:117
msgid ""
"The name of a livepatch relocation section must conform to the following "
"format::"
msgstr ""

#: ../../../livepatch/module-elf-format.rst:125
#: ../../../livepatch/module-elf-format.rst:251
msgid "[A]"
msgstr ""

#: ../../../livepatch/module-elf-format.rst:126
msgid "The relocation section name is prefixed with the string \".klp.rela.\""
msgstr ""

#: ../../../livepatch/module-elf-format.rst:128
#: ../../../livepatch/module-elf-format.rst:254
msgid "[B]"
msgstr ""

#: ../../../livepatch/module-elf-format.rst:129
msgid ""
"The name of the object (i.e. \"vmlinux\" or name of module) to which the "
"relocation section belongs follows immediately after the prefix."
msgstr ""

#: ../../../livepatch/module-elf-format.rst:132
#: ../../../livepatch/module-elf-format.rst:258
msgid "[C]"
msgstr ""

#: ../../../livepatch/module-elf-format.rst:133
msgid ""
"The actual name of the section to which this relocation section applies."
msgstr ""

#: ../../../livepatch/module-elf-format.rst:136
#: ../../../livepatch/module-elf-format.rst:268
msgid "Examples:"
msgstr ""

#: ../../../livepatch/module-elf-format.rst:138
msgid "**Livepatch relocation section names:**"
msgstr ""

#: ../../../livepatch/module-elf-format.rst:145
msgid ""
"**`readelf --sections` output for a patch module that patches vmlinux and "
"modules 9p, btrfs, ext4:**"
msgstr ""

#: ../../../livepatch/module-elf-format.rst:164
#: ../../../livepatch/module-elf-format.rst:184
#: ../../../livepatch/module-elf-format.rst:293
msgid "[*]"
msgstr ""

#: ../../../livepatch/module-elf-format.rst:165
msgid ""
"Livepatch relocation sections are SHT_RELA sections but with a few special "
"characteristics. Notice that they are marked SHF_ALLOC (\"A\") so that they "
"will not be discarded when the module is loaded into memory, as well as with "
"the SHF_RELA_LIVEPATCH flag (\"o\" - for OS-specific)."
msgstr ""

#: ../../../livepatch/module-elf-format.rst:170
msgid "**`readelf --relocs` output for a patch module:**"
msgstr ""

#: ../../../livepatch/module-elf-format.rst:185
msgid "Every symbol referenced by a relocation is a livepatch symbol."
msgstr ""

#: ../../../livepatch/module-elf-format.rst:188
msgid "4. Livepatch symbols"
msgstr ""

#: ../../../livepatch/module-elf-format.rst:190
msgid ""
"Livepatch symbols are symbols referred to by livepatch relocation sections. "
"These are symbols accessed from new versions of functions for patched "
"objects, whose addresses cannot be resolved by the module loader (because "
"they are local or unexported global syms). Since the module loader only "
"resolves exported syms, and not every symbol referenced by the new patched "
"functions is exported, livepatch symbols were introduced. They are used also "
"in cases where we cannot immediately know the address of a symbol when a "
"patch module loads. For example, this is the case when livepatch patches a "
"module that is not loaded yet. In this case, the relevant livepatch symbols "
"are resolved simply when the target module loads. In any case, for any "
"livepatch relocation section, all livepatch symbols referenced by that "
"section must be resolved before livepatch can call apply_relocate_add() for "
"that reloc section."
msgstr ""

#: ../../../livepatch/module-elf-format.rst:204
msgid ""
"Livepatch symbols must be marked with SHN_LIVEPATCH so that the module "
"loader can identify and ignore them. Livepatch modules keep these symbols in "
"their symbol tables, and the symbol table is made accessible through module-"
">symtab."
msgstr ""

#: ../../../livepatch/module-elf-format.rst:210
msgid "4.1 A livepatch module's symbol table"
msgstr ""

#: ../../../livepatch/module-elf-format.rst:211
msgid ""
"Normally, a stripped down copy of a module's symbol table (containing only "
"\"core\" symbols) is made available through module->symtab (See "
"layout_symtab() in kernel/module/kallsyms.c). For livepatch modules, the "
"symbol table copied into memory on module load must be exactly the same as "
"the symbol table produced when the patch module was compiled. This is "
"because the relocations in each livepatch relocation section refer to their "
"respective symbols with their symbol indices, and the original symbol "
"indices (and thus the symtab ordering) must be preserved in order for "
"apply_relocate_add() to find the right symbol."
msgstr ""

#: ../../../livepatch/module-elf-format.rst:220
msgid "For example, take this particular rela from a livepatch module::"
msgstr ""

#: ../../../livepatch/module-elf-format.rst:226
msgid ""
"This rela refers to the symbol '.klp.sym.vmlinux.printk,0', and the symbol "
"index is encoded in 'Info'. Here its symbol index is 0x5e, which is 94 in "
"decimal, which refers to the symbol index 94."
msgstr ""

#: ../../../livepatch/module-elf-format.rst:230
msgid ""
"And in this patch module's corresponding symbol table, symbol index 94 "
"refers to that very symbol::"
msgstr ""

#: ../../../livepatch/module-elf-format.rst:238
msgid "4.2 Livepatch symbol format"
msgstr ""

#: ../../../livepatch/module-elf-format.rst:240
msgid ""
"Livepatch symbols must have their section index marked as SHN_LIVEPATCH, so "
"that the module loader can identify them and not attempt to resolve them. "
"See include/uapi/linux/elf.h for the actual definitions."
msgstr ""

#: ../../../livepatch/module-elf-format.rst:244
msgid "Livepatch symbol names must conform to the following format::"
msgstr ""

#: ../../../livepatch/module-elf-format.rst:252
msgid "The symbol name is prefixed with the string \".klp.sym.\""
msgstr ""

#: ../../../livepatch/module-elf-format.rst:255
msgid ""
"The name of the object (i.e. \"vmlinux\" or name of module) to which the "
"symbol belongs follows immediately after the prefix."
msgstr ""

#: ../../../livepatch/module-elf-format.rst:259
msgid "The actual name of the symbol."
msgstr ""

#: ../../../livepatch/module-elf-format.rst:261
msgid "[D]"
msgstr ""

#: ../../../livepatch/module-elf-format.rst:262
msgid ""
"The position of the symbol in the object (as according to kallsyms) This is "
"used to differentiate duplicate symbols within the same object. The symbol "
"position is expressed numerically (0, 1, 2...). The symbol position of a "
"unique symbol is 0."
msgstr ""

#: ../../../livepatch/module-elf-format.rst:270
msgid "**Livepatch symbol names:**"
msgstr ""

#: ../../../livepatch/module-elf-format.rst:278
msgid "**`readelf --symbols` output for a patch module:**"
msgstr ""

#: ../../../livepatch/module-elf-format.rst:294
msgid ""
"Note that the 'Ndx' (Section index) for these symbols is SHN_LIVEPATCH "
"(0xff20). \"OS\" means OS-specific."
msgstr ""

#: ../../../livepatch/module-elf-format.rst:298
msgid "5. Symbol table and ELF section access"
msgstr ""

#: ../../../livepatch/module-elf-format.rst:299
msgid "A livepatch module's symbol table is accessible through module->symtab."
msgstr ""

#: ../../../livepatch/module-elf-format.rst:301
msgid ""
"Since apply_relocate_add() requires access to a module's section headers, "
"symbol table, and relocation section indices, ELF information is preserved "
"for livepatch modules and is made accessible by the module loader through "
"module->klp_info, which is a :c:type:`klp_modinfo` struct. When a livepatch "
"module loads, this struct is filled in by the module loader."
msgstr ""
