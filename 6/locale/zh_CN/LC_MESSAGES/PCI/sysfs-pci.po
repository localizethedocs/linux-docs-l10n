# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../PCI/sysfs-pci.rst:5
msgid "Accessing PCI device resources through sysfs"
msgstr ""

#: ../../../PCI/sysfs-pci.rst:7
msgid ""
"sysfs, usually mounted at /sys, provides access to PCI resources on "
"platforms that support it.  For example, a given bus might look like this::"
msgstr ""

#: ../../../PCI/sysfs-pci.rst:30
msgid ""
"The topmost element describes the PCI domain and bus number.  In this case, "
"the domain number is 0000 and the bus number is 17 (both values are in hex). "
"This bus contains a single function device in slot 0.  The domain and bus "
"numbers are reproduced for convenience.  Under the device directory are "
"several files, each with their own function."
msgstr ""

#: ../../../PCI/sysfs-pci.rst:37
msgid "file"
msgstr ""

#: ../../../PCI/sysfs-pci.rst:37
msgid "function"
msgstr ""

#: ../../../PCI/sysfs-pci.rst:39
msgid "class"
msgstr ""

#: ../../../PCI/sysfs-pci.rst:39
msgid "PCI class (ascii, ro)"
msgstr ""

#: ../../../PCI/sysfs-pci.rst:40
msgid "config"
msgstr ""

#: ../../../PCI/sysfs-pci.rst:40
msgid "PCI config space (binary, rw)"
msgstr ""

#: ../../../PCI/sysfs-pci.rst:41
msgid "device"
msgstr ""

#: ../../../PCI/sysfs-pci.rst:41
msgid "PCI device (ascii, ro)"
msgstr ""

#: ../../../PCI/sysfs-pci.rst:42
msgid "enable"
msgstr ""

#: ../../../PCI/sysfs-pci.rst:42
msgid "Whether the device is enabled (ascii, rw)"
msgstr ""

#: ../../../PCI/sysfs-pci.rst:43
msgid "irq"
msgstr ""

#: ../../../PCI/sysfs-pci.rst:43
msgid "IRQ number (ascii, ro)"
msgstr ""

#: ../../../PCI/sysfs-pci.rst:44
msgid "local_cpus"
msgstr ""

#: ../../../PCI/sysfs-pci.rst:44
msgid "nearby CPU mask (cpumask, ro)"
msgstr ""

#: ../../../PCI/sysfs-pci.rst:45
msgid "remove"
msgstr ""

#: ../../../PCI/sysfs-pci.rst:45
msgid "remove device from kernel's list (ascii, wo)"
msgstr ""

#: ../../../PCI/sysfs-pci.rst:46
msgid "resource"
msgstr ""

#: ../../../PCI/sysfs-pci.rst:46
msgid "PCI resource host addresses (ascii, ro)"
msgstr ""

#: ../../../PCI/sysfs-pci.rst:47
msgid "resource0..N"
msgstr ""

#: ../../../PCI/sysfs-pci.rst:47
msgid "PCI resource N, if present (binary, mmap, rw\\ [1]_)"
msgstr ""

#: ../../../PCI/sysfs-pci.rst:48
msgid "resource0_wc..N_wc"
msgstr ""

#: ../../../PCI/sysfs-pci.rst:48
msgid "PCI WC map resource N, if prefetchable (binary, mmap)"
msgstr ""

#: ../../../PCI/sysfs-pci.rst:49
msgid "revision"
msgstr ""

#: ../../../PCI/sysfs-pci.rst:49
msgid "PCI revision (ascii, ro)"
msgstr ""

#: ../../../PCI/sysfs-pci.rst:50
msgid "rom"
msgstr ""

#: ../../../PCI/sysfs-pci.rst:50
msgid "PCI ROM resource, if present (binary, ro)"
msgstr ""

#: ../../../PCI/sysfs-pci.rst:51
msgid "subsystem_device"
msgstr ""

#: ../../../PCI/sysfs-pci.rst:51
msgid "PCI subsystem device (ascii, ro)"
msgstr ""

#: ../../../PCI/sysfs-pci.rst:52
msgid "subsystem_vendor"
msgstr ""

#: ../../../PCI/sysfs-pci.rst:52
msgid "PCI subsystem vendor (ascii, ro)"
msgstr ""

#: ../../../PCI/sysfs-pci.rst:53
msgid "vendor"
msgstr ""

#: ../../../PCI/sysfs-pci.rst:53
msgid "PCI vendor (ascii, ro)"
msgstr ""

#: ../../../PCI/sysfs-pci.rst:66
msgid "rw for IORESOURCE_IO (I/O port) regions only"
msgstr ""

#: ../../../PCI/sysfs-pci.rst:68
msgid ""
"The read only files are informational, writes to them will be ignored, with "
"the exception of the 'rom' file.  Writable files can be used to perform "
"actions on the device (e.g. changing config space, detaching a device). "
"mmapable files are available via an mmap of the file at offset 0 and can be "
"used to do actual device programming from userspace.  Note that some "
"platforms don't support mmapping of certain resources, so be sure to check "
"the return value from any attempted mmap.  The most notable of these are I/O "
"port resources, which also provide read/write access."
msgstr ""

#: ../../../PCI/sysfs-pci.rst:77
msgid ""
"The 'enable' file provides a counter that indicates how many times the "
"device has been enabled.  If the 'enable' file currently returns '4', and a "
"'1' is echoed into it, it will then return '5'.  Echoing a '0' into it will "
"decrease the count.  Even when it returns to 0, though, some of the "
"initialisation may not be reversed."
msgstr ""

#: ../../../PCI/sysfs-pci.rst:83
msgid ""
"The 'rom' file is special in that it provides read-only access to the "
"device's ROM file, if available.  It's disabled by default, however, so "
"applications should write the string \"1\" to the file to enable it before "
"attempting a read call, and disable it following the access by writing \"0\" "
"to the file.  Note that the device must be enabled for a rom read to return "
"data successfully. In the event a driver is not bound to the device, it can "
"be enabled using the 'enable' file, documented above."
msgstr ""

#: ../../../PCI/sysfs-pci.rst:91
msgid ""
"The 'remove' file is used to remove the PCI device, by writing a non-zero "
"integer to the file.  This does not involve any kind of hot-plug "
"functionality, e.g. powering off the device.  The device is removed from the "
"kernel's list of PCI devices, the sysfs directory for it is removed, and the "
"device will be removed from any drivers attached to it. Removal of PCI root "
"buses is disallowed."
msgstr ""

#: ../../../PCI/sysfs-pci.rst:99
msgid "Accessing legacy resources through sysfs"
msgstr ""

#: ../../../PCI/sysfs-pci.rst:101
msgid ""
"Legacy I/O port and ISA memory resources are also provided in sysfs if the "
"underlying platform supports them.  They're located in the PCI class "
"hierarchy, e.g.::"
msgstr ""

#: ../../../PCI/sysfs-pci.rst:111
msgid ""
"The legacy_io file is a read/write file that can be used by applications to "
"do legacy port I/O.  The application should open the file, seek to the "
"desired port (e.g. 0x3e8) and do a read or a write of 1, 2 or 4 bytes.  The "
"legacy_mem file should be mmapped with an offset corresponding to the memory "
"offset desired, e.g. 0xa0000 for the VGA frame buffer.  The application can "
"then simply dereference the returned pointer (after checking for errors of "
"course) to access legacy memory space."
msgstr ""

#: ../../../PCI/sysfs-pci.rst:120
msgid "Supporting PCI access on new platforms"
msgstr ""

#: ../../../PCI/sysfs-pci.rst:122
msgid ""
"In order to support PCI resource mapping as described above, Linux platform "
"code should ideally define ARCH_GENERIC_PCI_MMAP_RESOURCE and use the "
"generic implementation of that functionality. To support the historical "
"interface of mmap() through files in /proc/bus/pci, platforms may also set "
"HAVE_PCI_MMAP."
msgstr ""

#: ../../../PCI/sysfs-pci.rst:127
msgid ""
"Alternatively, platforms which set HAVE_PCI_MMAP may provide their own "
"implementation of pci_mmap_resource_range() instead of defining "
"ARCH_GENERIC_PCI_MMAP_RESOURCE."
msgstr ""

#: ../../../PCI/sysfs-pci.rst:131
msgid ""
"Platforms which support write-combining maps of PCI resources must define "
"arch_can_pci_mmap_wc() which shall evaluate to non-zero at runtime when "
"write-combining is permitted. Platforms which support maps of I/O resources "
"define arch_can_pci_mmap_io() similarly."
msgstr ""

#: ../../../PCI/sysfs-pci.rst:136
msgid ""
"Legacy resources are protected by the HAVE_PCI_LEGACY define.  Platforms "
"wishing to support legacy functionality should define it and provide "
"pci_legacy_read, pci_legacy_write and pci_mmap_legacy_page_range functions."
msgstr ""
