# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../dev-tools/kunit/index.rst:7
msgid "Contents:"
msgstr ""

#: ../../../dev-tools/kunit/index.rst:5
msgid "KUnit - Linux Kernel Unit Testing"
msgstr ""

#: ../../../dev-tools/kunit/index.rst:21
msgid "This section details the kernel unit testing framework."
msgstr ""

#: ../../../dev-tools/kunit/index.rst:24
msgid "Introduction"
msgstr ""

#: ../../../dev-tools/kunit/index.rst:26
msgid ""
"KUnit (Kernel unit testing framework) provides a common framework for unit "
"tests within the Linux kernel. Using KUnit, you can define groups of test "
"cases called test suites. The tests either run on kernel boot if built-in, "
"or load as a module. KUnit automatically flags and reports failed test cases "
"in the kernel log. The test results appear in :doc:`KTAP (Kernel - Test "
"Anything Protocol) format</dev-tools/ktap>`. It is inspired by JUnit, "
"Pythonâ€™s unittest.mock, and GoogleTest/GoogleMock (C++ unit testing "
"framework)."
msgstr ""

#: ../../../dev-tools/kunit/index.rst:35
msgid ""
"KUnit tests are part of the kernel, written in the C (programming) language, "
"and test parts of the Kernel implementation (example: a C language "
"function). Excluding build time, from invocation to completion, KUnit can "
"run around 100 tests in less than 10 seconds. KUnit can test any kernel "
"component, for example: file system, system calls, memory management, device "
"drivers and so on."
msgstr ""

#: ../../../dev-tools/kunit/index.rst:42
msgid ""
"KUnit follows the white-box testing approach. The test has access to "
"internal system functionality. KUnit runs in kernel space and is not "
"restricted to things exposed to user-space."
msgstr ""

#: ../../../dev-tools/kunit/index.rst:46
msgid ""
"In addition, KUnit has kunit_tool, a script (``tools/testing/kunit/kunit."
"py``) that configures the Linux kernel, runs KUnit tests under QEMU or UML (:"
"doc:`User Mode Linux </virt/uml/user_mode_linux_howto_v2>`), parses the test "
"results and displays them in a user friendly manner."
msgstr ""

#: ../../../dev-tools/kunit/index.rst:53
msgid "Features"
msgstr ""

#: ../../../dev-tools/kunit/index.rst:55
msgid "Provides a framework for writing unit tests."
msgstr ""

#: ../../../dev-tools/kunit/index.rst:56
msgid "Runs tests on any kernel architecture."
msgstr ""

#: ../../../dev-tools/kunit/index.rst:57
msgid "Runs a test in milliseconds."
msgstr ""

#: ../../../dev-tools/kunit/index.rst:60
msgid "Prerequisites"
msgstr ""

#: ../../../dev-tools/kunit/index.rst:62
msgid "Any Linux kernel compatible hardware."
msgstr ""

#: ../../../dev-tools/kunit/index.rst:63
msgid "For Kernel under test, Linux kernel version 5.5 or greater."
msgstr ""

#: ../../../dev-tools/kunit/index.rst:66
msgid "Unit Testing"
msgstr ""

#: ../../../dev-tools/kunit/index.rst:68
msgid ""
"A unit test tests a single unit of code in isolation. A unit test is the "
"finest granularity of testing and allows all possible code paths to be "
"tested in the code under test. This is possible if the code under test is "
"small and does not have any external dependencies outside of the test's "
"control like hardware."
msgstr ""

#: ../../../dev-tools/kunit/index.rst:75
msgid "Write Unit Tests"
msgstr ""

#: ../../../dev-tools/kunit/index.rst:77
msgid ""
"To write good unit tests, there is a simple but powerful pattern: Arrange-"
"Act-Assert. This is a great way to structure test cases and defines an order "
"of operations."
msgstr ""

#: ../../../dev-tools/kunit/index.rst:81
msgid ""
"Arrange inputs and targets: At the start of the test, arrange the data that "
"allows a function to work. Example: initialize a statement or object."
msgstr ""

#: ../../../dev-tools/kunit/index.rst:84
msgid "Act on the target behavior: Call your function/code under test."
msgstr ""

#: ../../../dev-tools/kunit/index.rst:85
msgid ""
"Assert expected outcome: Verify that the result (or resulting state) is as "
"expected."
msgstr ""

#: ../../../dev-tools/kunit/index.rst:89
msgid "Unit Testing Advantages"
msgstr ""

#: ../../../dev-tools/kunit/index.rst:91
msgid "Increases testing speed and development in the long run."
msgstr ""

#: ../../../dev-tools/kunit/index.rst:92
msgid ""
"Detects bugs at initial stage and therefore decreases bug fix cost compared "
"to acceptance testing."
msgstr ""

#: ../../../dev-tools/kunit/index.rst:94
msgid "Improves code quality."
msgstr ""

#: ../../../dev-tools/kunit/index.rst:95
msgid "Encourages writing testable code."
msgstr ""

#: ../../../dev-tools/kunit/index.rst:97
msgid "Read also :ref:`kinds-of-tests`."
msgstr ""

#: ../../../dev-tools/kunit/index.rst:100
msgid "How do I use it?"
msgstr ""

#: ../../../dev-tools/kunit/index.rst:102
msgid ""
"You can find a step-by-step guide to writing and running KUnit tests in "
"Documentation/dev-tools/kunit/start.rst"
msgstr ""

#: ../../../dev-tools/kunit/index.rst:105
msgid ""
"Alternatively, feel free to look through the rest of the KUnit "
"documentation, or to experiment with tools/testing/kunit/kunit.py and the "
"example test under lib/kunit/kunit-example-test.c"
msgstr ""

#: ../../../dev-tools/kunit/index.rst:109
msgid "Happy testing!"
msgstr ""
