# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../driver-api/media/camera-sensor.rst:6
msgid "Writing camera sensor drivers"
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:8
msgid ""
"This document covers the in-kernel APIs only. For the best practices on "
"userspace API implementation in camera sensor drivers, please see :ref:"
"`media_using_camera_sensor_drivers`."
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:13
msgid "CSI-2, parallel and BT.656 buses"
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:15
msgid "Please see :ref:`transmitter-receiver`."
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:18
msgid "Handling clocks"
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:20
msgid ""
"Camera sensors have an internal clock tree including a PLL and a number of "
"divisors. The clock tree is generally configured by the driver based on a "
"few input parameters that are specific to the hardware: the external clock "
"frequency and the link frequency. The two parameters generally are obtained "
"from system firmware. **No other frequencies should be used in any "
"circumstances.**"
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:26
msgid ""
"The reason why the clock frequencies are so important is that the clock "
"signals come out of the SoC, and in many cases a specific frequency is "
"designed to be used in the system. Using another frequency may cause harmful "
"effects elsewhere. Therefore only the pre-determined frequencies are "
"configurable by the user."
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:33
msgid "ACPI"
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:35
msgid ""
"Read the ``clock-frequency`` _DSD property to denote the frequency. The "
"driver can rely on this frequency being used."
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:39
msgid "Devicetree"
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:41
msgid ""
"The preferred way to achieve this is using ``assigned-clocks``, ``assigned-"
"clock-parents`` and ``assigned-clock-rates`` properties. See the `clock "
"device tree bindings <https://github.com/devicetree-org/dt-schema/blob/main/"
"dtschema/schemas/clock/clock.yaml>`_ for more information. The driver then "
"gets the frequency using ``clk_get_rate()``."
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:48
msgid ""
"This approach has the drawback that there's no guarantee that the frequency "
"hasn't been modified directly or indirectly by another driver, or supported "
"by the board's clock tree to begin with. Changes to the Common Clock "
"Framework API are required to ensure reliability."
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:54
msgid "Power management"
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:56
msgid ""
"Camera sensors are used in conjunction with other devices to form a camera "
"pipeline. They must obey the rules listed herein to ensure coherent power "
"management over the pipeline."
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:60
msgid ""
"Camera sensor drivers are responsible for controlling the power state of the "
"device they otherwise control as well. They shall use runtime PM to manage "
"power states. Runtime PM shall be enabled at probe time and disabled at "
"remove time. Drivers should enable runtime PM autosuspend. Also see :ref:"
"`async sub-device registration <media-registering-async-subdevs>`."
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:66
msgid ""
"The runtime PM handlers shall handle clocks, regulators, GPIOs, and other "
"system resources required to power the sensor up and down. For drivers that "
"don't use any of those resources (such as drivers that support ACPI systems "
"only), the runtime PM handlers may be left unimplemented."
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:71
msgid ""
"In general, the device shall be powered on at least when its registers are "
"being accessed and when it is streaming. Drivers should use "
"``pm_runtime_resume_and_get()`` when starting streaming and "
"``pm_runtime_put()`` or ``pm_runtime_put_autosuspend()`` when stopping "
"streaming. They may power the device up at probe time (for example to read "
"identification registers), but should not keep it powered unconditionally "
"after probe."
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:79
msgid ""
"At system suspend time, the whole camera pipeline must stop streaming, and "
"restart when the system is resumed. This requires coordination between the "
"camera sensor and the rest of the camera pipeline. Bridge drivers are "
"responsible for this coordination, and instruct camera sensors to stop and "
"restart streaming by calling the appropriate subdev operations (``."
"enable_streams()`` or ``.disable_streams()``). Camera sensor drivers shall "
"therefore **not** keep track of the streaming state to stop streaming in the "
"PM suspend handler and restart it in the resume handler. Drivers should in "
"general not implement the system PM handlers."
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:89
msgid ""
"Camera sensor drivers shall **not** implement the subdev ``.s_power()`` "
"operation, as it is deprecated. While this operation is implemented in some "
"existing drivers as they predate the deprecation, new drivers shall use "
"runtime PM instead. If you feel you need to begin calling ``.s_power()`` "
"from an ISP or a bridge driver, instead add runtime PM support to the sensor "
"driver you are using and drop its ``.s_power()`` handler."
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:96
msgid "Please also see :ref:`examples <media-camera-sensor-examples>`."
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:99
msgid "Control framework"
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:101
msgid ""
"``v4l2_ctrl_handler_setup()`` function may not be used in the device's "
"runtime PM ``runtime_resume`` callback, as it has no way to figure out the "
"power state of the device. This is because the power state of the device is "
"only changed after the power state transition has taken place. The "
"``s_ctrl`` callback can be used to obtain device's power state after the "
"power state transition:"
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:109
msgid ""
"The function returns a non-zero value if it succeeded getting the power "
"count or runtime PM was disabled, in either of which cases the driver may "
"proceed to access the device."
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:114
msgid "Rotation, orientation and flipping"
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:116
msgid ""
"Use ``v4l2_fwnode_device_parse()`` to obtain rotation and orientation "
"information from system firmware and ``v4l2_ctrl_new_fwnode_properties()`` "
"to register the appropriate controls."
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:123
msgid "Example drivers"
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:125
msgid ""
"Features implemented by sensor drivers vary, and depending on the set of "
"supported features and other qualities, particular sensor drivers better "
"serve the purpose of an example. The following drivers are known to be good "
"examples:"
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:129
msgid "Example sensor drivers"
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:133
msgid "Driver name"
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:134
msgid "File(s)"
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:135
msgid "Driver type"
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:136
msgid "Example topic"
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:137
msgid "CCS"
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:138
msgid "``drivers/media/i2c/ccs/``"
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:139
msgid "Freely configurable"
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:140
msgid "Power management (ACPI and DT), UAPI"
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:141
msgid "imx219"
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:142
msgid "``drivers/media/i2c/imx219.c``"
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:143
#: ../../../driver-api/media/camera-sensor.rst:147
msgid "Register list based"
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:144
msgid "Power management (DT), UAPI, mode selection"
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:145
msgid "imx319"
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:146
msgid "``drivers/media/i2c/imx319.c``"
msgstr ""

#: ../../../driver-api/media/camera-sensor.rst:148
msgid "Power management (ACPI and DT)"
msgstr ""
