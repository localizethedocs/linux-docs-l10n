# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../driver-api/cxl/allocation/reclaim.rst:5
msgid "Reclaim"
msgstr ""

#: ../../../driver-api/cxl/allocation/reclaim.rst:6
msgid ""
"Another way CXL memory can be utilized *indirectly* is via the reclaim "
"system in :code:`mm/vmscan.c`.  Reclaim is engaged when memory capacity on "
"the system becomes pressured based on global and cgroup-local `watermark` "
"settings."
msgstr ""

#: ../../../driver-api/cxl/allocation/reclaim.rst:10
msgid ""
"In this section we won't discuss the `watermark` configurations, just how "
"CXL memory can be consumed by various pieces of reclaim system."
msgstr ""

#: ../../../driver-api/cxl/allocation/reclaim.rst:14
msgid "Demotion"
msgstr ""

#: ../../../driver-api/cxl/allocation/reclaim.rst:15
msgid ""
"By default, the reclaim system will prefer swap (or zswap) when reclaiming "
"memory.  Enabling :code:`kernel/mm/numa/demotion_enabled` will cause vmscan "
"to opportunistically prefer distant NUMA nodes to swap or zswap, if capacity "
"is available."
msgstr ""

#: ../../../driver-api/cxl/allocation/reclaim.rst:20
msgid ""
"Demotion engages the :code:`mm/memory_tier.c` component to determine the "
"next demotion node.  The next demotion node is based on the :code:`HMAT` or :"
"code:`CDAT` performance data."
msgstr ""

#: ../../../driver-api/cxl/allocation/reclaim.rst:25
msgid "cpusets.mems_allowed quirk"
msgstr ""

#: ../../../driver-api/cxl/allocation/reclaim.rst:26
msgid ""
"In Linux v6.15 and below, demotion does not respect :code:`cpusets."
"mems_allowed` when migrating pages.  As a result, if demotion is enabled, "
"vmscan cannot guarantee isolation of a container's memory from nodes not set "
"in mems_allowed."
msgstr ""

#: ../../../driver-api/cxl/allocation/reclaim.rst:30
msgid ""
"In Linux v6.XX and up, demotion does attempt to respect :code:`cpusets."
"mems_allowed`; however, certain classes of shared memory originally "
"instantiated by another cgroup (such as common libraries - e.g. libc) may "
"still be demoted.  As a result, the mems_allowed interface still cannot "
"provide perfect isolation from the remote nodes."
msgstr ""

#: ../../../driver-api/cxl/allocation/reclaim.rst:37
msgid "ZSwap and Node Preference"
msgstr ""

#: ../../../driver-api/cxl/allocation/reclaim.rst:38
msgid ""
"In Linux v6.15 and below, ZSwap allocates memory from the local node of the "
"processor for the new pages being compressed.  Since pages being compressed "
"are typically cold, the result is a cold page becomes promoted - only to be "
"later demoted as it ages off the LRU."
msgstr ""

#: ../../../driver-api/cxl/allocation/reclaim.rst:43
msgid ""
"In Linux v6.XX, ZSwap tries to prefer the node of the page being compressed "
"as the allocation target for the compression page.  This helps prevent "
"thrashing."
msgstr ""

#: ../../../driver-api/cxl/allocation/reclaim.rst:48
msgid "Demotion with ZSwap"
msgstr ""

#: ../../../driver-api/cxl/allocation/reclaim.rst:49
msgid ""
"When enabling both Demotion and ZSwap, you create a situation where ZSwap "
"will prefer the slowest form of CXL memory by default until that tier of "
"memory is exhausted."
msgstr ""
