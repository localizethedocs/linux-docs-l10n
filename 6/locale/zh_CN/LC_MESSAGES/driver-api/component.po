# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../driver-api/component.rst:5
msgid "Component Helper for Aggregate Drivers"
msgstr ""

#: ../../../driver-api/component:7: drivers/base/component.c:14
msgid ""
"The component helper allows drivers to collect a pile of sub-devices, "
"including their bound drivers, into an aggregate driver. Various subsystems "
"already provide functions to get hold of such components, e.g. "
"of_clk_get_by_name(). The component helper can be used when such a subsystem-"
"specific way to find a device is not available: The component helper fills "
"the niche of aggregate drivers for specific hardware, where further "
"standardization into a subsystem would not be practical. The common example "
"is when a logical device (e.g. a DRM display driver) is spread around the "
"SoC on various components (scanout engines, blending blocks, transcoders for "
"various outputs and so on)."
msgstr ""

#: ../../../driver-api/component:7: drivers/base/component.c:25
msgid ""
"The component helper also doesn't solve runtime dependencies, e.g. for "
"system suspend and resume operations. See also :ref:`device "
"links<device_link>`."
msgstr ""

#: ../../../driver-api/component:7: drivers/base/component.c:28
msgid ""
"Components are registered using component_add() and unregistered with "
"component_del(), usually from the driver's probe and disconnect functions."
msgstr ""

#: ../../../driver-api/component:7: drivers/base/component.c:31
msgid ""
"Aggregate drivers first assemble a component match list of what they need "
"using component_match_add(). This is then registered as an aggregate driver "
"using component_master_add_with_match(), and unregistered using "
"component_master_del()."
msgstr ""

#: ../../../driver-api/component.rst:12
msgid "API"
msgstr ""

#: ../../../driver-api/component:14: include/linux/component.h:11
msgid "callbacks for component drivers"
msgstr ""

#: ../../../driver-api/component:14: include/linux/component.h:15
#: include/linux/component.h:51
msgid "**Definition**::"
msgstr ""

#: ../../../driver-api/component:14: include/linux/component.h:22
#: include/linux/component.h:58
msgid "**Members**"
msgstr ""

#: ../../../driver-api/component:14: include/linux/component.h:18
#: include/linux/component.h:54
msgid "``bind``"
msgstr ""

#: ../../../driver-api/component:14: include/linux/component.h:19
msgid ""
"Called through component_bind_all() when the aggregate driver is ready to "
"bind the overall driver."
msgstr ""

#: ../../../driver-api/component:14: include/linux/component.h:26
#: include/linux/component.h:76
msgid "``unbind``"
msgstr ""

#: ../../../driver-api/component:14: include/linux/component.h:27
msgid ""
"Called through component_unbind_all() when the aggregate driver is ready to "
"bind the overall driver, or when component_bind_all() fails part-ways "
"through and needs to unbind some already bound components."
msgstr ""

#: ../../../driver-api/component:14: include/linux/component.h:32
#: include/linux/component.h:82 include/linux/component.h:115
#: ../../../driver-api/component:17: drivers/base/component.c:292
#: drivers/base/component.c:307 drivers/base/component.c:320
#: drivers/base/component.c:334 drivers/base/component.c:433
#: drivers/base/component.c:462 drivers/base/component.c:506
#: drivers/base/component.c:553 drivers/base/component.c:608
#: drivers/base/component.c:691 drivers/base/component.c:767
#: drivers/base/component.c:795 drivers/base/component.c:816
msgid "**Description**"
msgstr ""

#: ../../../driver-api/component:14: include/linux/component.h:12
msgid ""
"Components are registered with component_add() and unregistered with "
"component_del()."
msgstr ""

#: ../../../driver-api/component:14: include/linux/component.h:47
msgid "callback for the aggregate driver"
msgstr ""

#: ../../../driver-api/component:14: include/linux/component.h:55
msgid ""
"Called when all components or the aggregate driver, as specified in the "
"match list passed to component_master_add_with_match(), are ready. Usually "
"there are 3 steps to bind an aggregate driver:"
msgstr ""

#: ../../../driver-api/component:14: include/linux/component.h:59
msgid "Allocate a structure for the aggregate driver."
msgstr ""

#: ../../../driver-api/component:14: include/linux/component.h:61
msgid ""
"Bind all components to the aggregate driver by calling component_bind_all() "
"with the aggregate driver structure as opaque pointer data."
msgstr ""

#: ../../../driver-api/component:14: include/linux/component.h:65
msgid ""
"Register the aggregate driver with the subsystem to publish its interfaces."
msgstr ""

#: ../../../driver-api/component:14: include/linux/component.h:68
msgid ""
"Note that the lifetime of the aggregate driver does not align with any of "
"the underlying :c:type:`struct device <device>` instances. Therefore devm "
"cannot be used and all resources acquired or allocated in this callback must "
"be explicitly released in the **unbind** callback."
msgstr ""

#: ../../../driver-api/component:14: include/linux/component.h:77
msgid ""
"Called when either the aggregate driver, using component_master_del(), or "
"one of its components, using component_del(), is unregistered."
msgstr ""

#: ../../../driver-api/component:14: include/linux/component.h:48
msgid ""
"Aggregate drivers are registered with component_master_add_with_match() and "
"unregistered with component_master_del()."
msgstr ""

#: ../../../driver-api/component:14: include/linux/component.h:109
msgid "add a component match entry"
msgstr ""

#: ../../../driver-api/component:14: include/linux/component.h:113
#: ../../../driver-api/component:17: drivers/base/component.c:292
#: drivers/base/component.c:307 drivers/base/component.c:320
#: drivers/base/component.c:334 drivers/base/component.c:430
#: drivers/base/component.c:460 drivers/base/component.c:505
#: drivers/base/component.c:553 drivers/base/component.c:608
#: drivers/base/component.c:691 drivers/base/component.c:766
#: drivers/base/component.c:795 drivers/base/component.c:816
msgid "**Parameters**"
msgstr ""

#: ../../../driver-api/component:14: include/linux/component.h:115
#: ../../../driver-api/component:17: drivers/base/component.c:432
#: drivers/base/component.c:462 drivers/base/component.c:507
#: drivers/base/component.c:555 drivers/base/component.c:610
#: drivers/base/component.c:693
msgid "``struct device *parent``"
msgstr ""

#: ../../../driver-api/component:14: include/linux/component.h:110
msgid "device with the aggregate driver"
msgstr ""

#: ../../../driver-api/component:14: include/linux/component.h:112
#: ../../../driver-api/component:17: drivers/base/component.c:429
#: drivers/base/component.c:459
msgid "``struct component_match **matchptr``"
msgstr ""

#: ../../../driver-api/component:14: include/linux/component.h:111
#: ../../../driver-api/component:17: drivers/base/component.c:428
#: drivers/base/component.c:458
msgid "pointer to the list of component matches"
msgstr ""

#: ../../../driver-api/component:14: include/linux/component.h:113
#: ../../../driver-api/component:17: drivers/base/component.c:431
msgid "``int (*compare)(struct device *, void *)``"
msgstr ""

#: ../../../driver-api/component:14: include/linux/component.h:112
#: ../../../driver-api/component:17: drivers/base/component.c:430
msgid "compare function to match against all components"
msgstr ""

#: ../../../driver-api/component:14: include/linux/component.h:114
#: ../../../driver-api/component:17: drivers/base/component.c:432
#: drivers/base/component.c:461
msgid "``void *compare_data``"
msgstr ""

#: ../../../driver-api/component:14: include/linux/component.h:113
#: ../../../driver-api/component:17: drivers/base/component.c:431
#: drivers/base/component.c:460
msgid "opaque pointer passed to the **compare** function"
msgstr ""

#: ../../../driver-api/component:14: include/linux/component.h:114
msgid ""
"Adds a new component match to the list stored in **matchptr**, which the "
"**parent** aggregate driver needs to function. The list of component matches "
"pointed to by **matchptr** must be initialized to NULL before adding the "
"first match. This only matches against components added with component_add()."
msgstr ""

#: ../../../driver-api/component:14: include/linux/component.h:119
#: ../../../driver-api/component:17: drivers/base/component.c:466
msgid ""
"The allocated match list in **matchptr** is automatically released using "
"devm actions."
msgstr ""

#: ../../../driver-api/component:14: include/linux/component.h:122
#: ../../../driver-api/component:17: drivers/base/component.c:469
msgid "See also component_match_add_release() and component_match_add_typed()."
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:288
msgid "A common component compare function for of_node"
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:294
#: drivers/base/component.c:309 drivers/base/component.c:322
#: drivers/base/component.c:336 drivers/base/component.c:768
#: drivers/base/component.c:797 drivers/base/component.c:818
msgid "``struct device *dev``"
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:289
#: drivers/base/component.c:304 drivers/base/component.c:317
#: drivers/base/component.c:331 drivers/base/component.c:763
#: drivers/base/component.c:792 drivers/base/component.c:813
msgid "component device"
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:291
#: drivers/base/component.c:306 drivers/base/component.c:319
#: drivers/base/component.c:333 drivers/base/component.c:607
#: drivers/base/component.c:690
msgid "``void *data``"
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:290
#: drivers/base/component.c:305 drivers/base/component.c:318
#: drivers/base/component.c:332
msgid "**compare_data** from component_match_add_release()"
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:291
msgid ""
"A common compare function when compare_data is device of_node. e.g. "
"component_match_add_release(masterdev, :c:type:`match`, "
"component_release_of, component_compare_of, component_dev_of_node)"
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:303
msgid "A common component release function for of_node"
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:306
msgid "About the example, Please see component_compare_of()."
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:316
msgid "A common component compare function for dev"
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:319
msgid ""
"A common compare function when compare_data is struce device. e.g. "
"component_match_add(masterdev, :c:type:`match`, component_compare_dev, "
"component_dev)"
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:330
msgid "A common component compare function for device name"
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:333
msgid ""
"A common compare function when compare_data is device name string. e.g. "
"component_match_add(masterdev, :c:type:`match`, component_compare_dev_name, "
"\"component_dev_name\")"
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:426
msgid "add a component match entry with release callback"
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:427
#: drivers/base/component.c:457 drivers/base/component.c:502
#: drivers/base/component.c:550 drivers/base/component.c:605
#: drivers/base/component.c:688
msgid "parent device of the aggregate driver"
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:430
msgid "``void (*release)(struct device *, void *)``"
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:429
msgid "release function for **compare_data**"
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:432
msgid ""
"Adds a new component match to the list stored in **matchptr**, which the "
"aggregate driver needs to function. The list of component matches pointed to "
"by **matchptr** must be initialized to NULL before adding the first match. "
"This only matches against components added with component_add()."
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:437
msgid ""
"The allocated match list in **matchptr** is automatically released using "
"devm actions, where upon **release** will be called to free any references "
"held by **compare_data**, e.g. when **compare_data** is a :c:type:"
"`device_node` that must be released with of_node_put()."
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:442
msgid "See also component_match_add() and component_match_add_typed()."
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:456
msgid "add a component match entry for a typed component"
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:460
msgid "``int (*compare_typed)(struct device *, int, void *)``"
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:459
msgid "compare function to match against all typed components"
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:461
msgid ""
"Adds a new component match to the list stored in **matchptr**, which the "
"aggregate driver needs to function. The list of component matches pointed to "
"by **matchptr** must be initialized to NULL before adding the first match. "
"This only matches against components added with component_add_typed()."
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:501
msgid "register an aggregate driver"
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:504
#: drivers/base/component.c:552
msgid "``const struct component_master_ops *ops``"
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:503
#: drivers/base/component.c:551
msgid "callbacks for the aggregate driver"
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:505
msgid "``struct component_match *match``"
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:504
msgid "component match list for the aggregate driver"
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:505
msgid ""
"Registers a new aggregate driver consisting of the components added to "
"**match** by calling one of the component_match_add() functions. Once all "
"components in **match** are available, it will be assembled by calling :c:"
"type:`component_master_ops.bind <component_master_ops>` from **ops**. Must "
"be unregistered by calling component_master_del()."
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:549
msgid "unregister an aggregate driver"
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:552
msgid ""
"Unregisters an aggregate driver registered with "
"component_master_add_with_match(). If necessary the aggregate driver is "
"first disassembled by calling :c:type:`component_master_ops.unbind "
"<component_master_ops>` from **ops**."
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:604
msgid "unbind all components of an aggregate driver"
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:606
#: drivers/base/component.c:689
msgid "opaque pointer, passed to all components"
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:607
msgid ""
"Unbinds all components of the aggregate device by passing **data** to their :"
"c:type:`component_ops.unbind <component_ops>` functions. Should be called "
"from :c:type:`component_master_ops.unbind <component_master_ops>`."
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:687
msgid "bind all components of an aggregate driver"
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:690
msgid ""
"Binds all components of the aggregate **dev** by passing **data** to their :"
"c:type:`component_ops.bind <component_ops>` functions. Should be called "
"from :c:type:`component_master_ops.bind <component_master_ops>`."
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:762
#: drivers/base/component.c:791
msgid "register a component"
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:765
#: drivers/base/component.c:794 drivers/base/component.c:815
msgid "``const struct component_ops *ops``"
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:764
#: drivers/base/component.c:793 drivers/base/component.c:814
msgid "component callbacks"
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:766
msgid "``int subcomponent``"
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:765
msgid "nonzero identifier for subcomponents"
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:766
msgid ""
"Register a new component for **dev**. Functions in **ops** will be call when "
"the aggregate driver is ready to bind the overall driver by calling "
"component_bind_all(). See also :c:type:`struct component_ops "
"<component_ops>`."
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:770
msgid ""
"**subcomponent** must be nonzero and is used to differentiate between "
"multiple components registered on the same device **dev**. These components "
"are match using component_match_add_typed()."
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:774
#: drivers/base/component.c:798
msgid ""
"The component needs to be unregistered at driver unload/disconnect by "
"calling component_del()."
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:777
msgid "See also component_add()."
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:794
msgid ""
"Register a new component for **dev**. Functions in **ops** will be called "
"when the aggregate driver is ready to bind the overall driver by calling "
"component_bind_all(). See also :c:type:`struct component_ops "
"<component_ops>`."
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:801
msgid ""
"See also component_add_typed() for a variant that allows multiple different "
"components on the same device."
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:812
msgid "unregister a component"
msgstr ""

#: ../../../driver-api/component:17: drivers/base/component.c:815
msgid ""
"Unregister a component added with component_add(). If the component is bound "
"into an aggregate driver, this will force the entire aggregate driver, "
"including all its components, to be unbound."
msgstr ""
