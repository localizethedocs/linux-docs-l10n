# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../driver-api/virtio/virtio.rst:7
msgid "Virtio on Linux"
msgstr ""

#: ../../../driver-api/virtio/virtio.rst:10
msgid "Introduction"
msgstr ""

#: ../../../driver-api/virtio/virtio.rst:12
msgid ""
"Virtio is an open standard that defines a protocol for communication between "
"drivers and devices of different types, see Chapter 5 (\"Device Types\") of "
"the virtio spec (`[1]`_). Originally developed as a standard for "
"paravirtualized devices implemented by a hypervisor, it can be used to "
"interface any compliant device (real or emulated) with a driver."
msgstr ""

#: ../../../driver-api/virtio/virtio.rst:18
msgid ""
"For illustrative purposes, this document will focus on the common case of a "
"Linux kernel running in a virtual machine and using paravirtualized devices "
"provided by the hypervisor, which exposes them as virtio devices via "
"standard mechanisms such as PCI."
msgstr ""

#: ../../../driver-api/virtio/virtio.rst:25
msgid "Device - Driver communication: virtqueues"
msgstr ""

#: ../../../driver-api/virtio/virtio.rst:27
msgid ""
"Although the virtio devices are really an abstraction layer in the "
"hypervisor, they're exposed to the guest as if they are physical devices "
"using a specific transport method -- PCI, MMIO or CCW -- that is orthogonal "
"to the device itself. The virtio spec defines these transport methods in "
"detail, including device discovery, capabilities and interrupt handling."
msgstr ""

#: ../../../driver-api/virtio/virtio.rst:34
msgid ""
"The communication between the driver in the guest OS and the device in the "
"hypervisor is done through shared memory (that's what makes virtio devices "
"so efficient) using specialized data structures called virtqueues, which are "
"actually ring buffers [#f1]_ of buffer descriptors similar to the ones used "
"in a network device:"
msgstr ""

#: ../../../driver-api/virtio/virtio:40: include/uapi/linux/virtio_ring.h:97
msgid ""
"Virtio ring descriptors, 16 bytes long. These can chain together via "
"**next**."
msgstr ""

#: ../../../driver-api/virtio/virtio:40: include/uapi/linux/virtio_ring.h:101
#: ../../../driver-api/virtio/virtio:56: include/linux/virtio.h:21
msgid "**Definition**::"
msgstr ""

#: ../../../driver-api/virtio/virtio:40: include/uapi/linux/virtio_ring.h:110
#: ../../../driver-api/virtio/virtio:56: include/linux/virtio.h:35
msgid "**Members**"
msgstr ""

#: ../../../driver-api/virtio/virtio:40: include/uapi/linux/virtio_ring.h:100
msgid "``addr``"
msgstr ""

#: ../../../driver-api/virtio/virtio:40: include/uapi/linux/virtio_ring.h:101
msgid "buffer address (guest-physical)"
msgstr ""

#: ../../../driver-api/virtio/virtio:40: include/uapi/linux/virtio_ring.h:101
msgid "``len``"
msgstr ""

#: ../../../driver-api/virtio/virtio:40: include/uapi/linux/virtio_ring.h:102
msgid "buffer length"
msgstr ""

#: ../../../driver-api/virtio/virtio:40: include/uapi/linux/virtio_ring.h:102
msgid "``flags``"
msgstr ""

#: ../../../driver-api/virtio/virtio:40: include/uapi/linux/virtio_ring.h:103
msgid "descriptor flags"
msgstr ""

#: ../../../driver-api/virtio/virtio:40: include/uapi/linux/virtio_ring.h:103
msgid "``next``"
msgstr ""

#: ../../../driver-api/virtio/virtio:40: include/uapi/linux/virtio_ring.h:104
msgid ""
"index of the next descriptor in the chain, if the VRING_DESC_F_NEXT flag is "
"set. We chain unused descriptors via this, too."
msgstr ""

#: ../../../driver-api/virtio/virtio.rst:43
msgid ""
"All the buffers the descriptors point to are allocated by the guest and used "
"by the host either for reading or for writing but not for both."
msgstr ""

#: ../../../driver-api/virtio/virtio.rst:46
msgid ""
"Refer to Chapter 2.5 (\"Virtqueues\") of the virtio spec (`[1]`_) for the "
"reference definitions of virtqueues and \"Virtqueues and virtio ring: How "
"the data travels\" blog post (`[2]`_) for an illustrated overview of how the "
"host device and the guest driver communicate."
msgstr ""

#: ../../../driver-api/virtio/virtio.rst:51
msgid ""
"The :c:type:`vring_virtqueue` struct models a virtqueue, including the ring "
"buffers and management data. Embedded in this struct is the :c:type:"
"`virtqueue` struct, which is the data structure that's ultimately used by "
"virtio drivers:"
msgstr ""

#: ../../../driver-api/virtio/virtio:56: include/linux/virtio.h:17
msgid "a queue to register buffers for sending or receiving."
msgstr ""

#: ../../../driver-api/virtio/virtio:56: include/linux/virtio.h:18
msgid "``list``"
msgstr ""

#: ../../../driver-api/virtio/virtio:56: include/linux/virtio.h:19
msgid "the chain of virtqueues for this device"
msgstr ""

#: ../../../driver-api/virtio/virtio:56: include/linux/virtio.h:19
msgid "``callback``"
msgstr ""

#: ../../../driver-api/virtio/virtio:56: include/linux/virtio.h:20
msgid "the function to call when buffers are consumed (can be NULL)."
msgstr ""

#: ../../../driver-api/virtio/virtio:56: include/linux/virtio.h:20
msgid "``name``"
msgstr ""

#: ../../../driver-api/virtio/virtio:56: include/linux/virtio.h:21
msgid "the name of this virtqueue (mainly for debugging)"
msgstr ""

#: ../../../driver-api/virtio/virtio:56: include/linux/virtio.h:21
msgid "``vdev``"
msgstr ""

#: ../../../driver-api/virtio/virtio:56: include/linux/virtio.h:22
msgid "the virtio device this queue was created for."
msgstr ""

#: ../../../driver-api/virtio/virtio:56: include/linux/virtio.h:23
msgid "``index``"
msgstr ""

#: ../../../driver-api/virtio/virtio:56: include/linux/virtio.h:24
msgid "the zero-based ordinal number for this queue."
msgstr ""

#: ../../../driver-api/virtio/virtio:56: include/linux/virtio.h:24
msgid "``num_free``"
msgstr ""

#: ../../../driver-api/virtio/virtio:56: include/linux/virtio.h:25
msgid "number of elements we expect to be able to fit."
msgstr ""

#: ../../../driver-api/virtio/virtio:56: include/linux/virtio.h:25
msgid "``num_max``"
msgstr ""

#: ../../../driver-api/virtio/virtio:56: include/linux/virtio.h:26
msgid "the maximum number of elements supported by the device."
msgstr ""

#: ../../../driver-api/virtio/virtio:56: include/linux/virtio.h:26
msgid "``reset``"
msgstr ""

#: ../../../driver-api/virtio/virtio:56: include/linux/virtio.h:27
msgid "vq is in reset state or not."
msgstr ""

#: ../../../driver-api/virtio/virtio:56: include/linux/virtio.h:22
msgid "``priv``"
msgstr ""

#: ../../../driver-api/virtio/virtio:56: include/linux/virtio.h:23
msgid "a pointer for the virtqueue implementation to use."
msgstr ""

#: ../../../driver-api/virtio/virtio:56: include/linux/virtio.h:26
#: ../../../driver-api/virtio/virtio:65: drivers/virtio/virtio_ring.c:2691
msgid "**Description**"
msgstr ""

#: ../../../driver-api/virtio/virtio:56: include/linux/virtio.h:27
msgid ""
"A note on **num_free**: with indirect buffers, each buffer needs one element "
"in the queue, otherwise a buffer will need one element per sg element."
msgstr ""

#: ../../../driver-api/virtio/virtio.rst:59
msgid ""
"The callback function pointed by this struct is triggered when the device "
"has consumed the buffers provided by the driver. More specifically, the "
"trigger will be an interrupt issued by the hypervisor (see "
"vring_interrupt()). Interrupt request handlers are registered for a "
"virtqueue during the virtqueue setup process (transport-specific)."
msgstr ""

#: ../../../driver-api/virtio/virtio:65: drivers/virtio/virtio_ring.c:2687
msgid "notify a virtqueue on an interrupt"
msgstr ""

#: ../../../driver-api/virtio/virtio:65: drivers/virtio/virtio_ring.c:2691
msgid "**Parameters**"
msgstr ""

#: ../../../driver-api/virtio/virtio:65: drivers/virtio/virtio_ring.c:2693
msgid "``int irq``"
msgstr ""

#: ../../../driver-api/virtio/virtio:65: drivers/virtio/virtio_ring.c:2688
msgid "the IRQ number (ignored)"
msgstr ""

#: ../../../driver-api/virtio/virtio:65: drivers/virtio/virtio_ring.c:2690
msgid "``void *_vq``"
msgstr ""

#: ../../../driver-api/virtio/virtio:65: drivers/virtio/virtio_ring.c:2689
msgid "the struct virtqueue to notify"
msgstr ""

#: ../../../driver-api/virtio/virtio:65: drivers/virtio/virtio_ring.c:2690
msgid ""
"Calls the callback function of **_vq** to process the virtqueue notification."
msgstr ""

#: ../../../driver-api/virtio/virtio.rst:70
msgid "Device discovery and probing"
msgstr ""

#: ../../../driver-api/virtio/virtio.rst:72
msgid ""
"In the kernel, the virtio core contains the virtio bus driver and transport-"
"specific drivers like `virtio-pci` and `virtio-mmio`. Then there are "
"individual virtio drivers for specific device types that are registered to "
"the virtio bus driver."
msgstr ""

#: ../../../driver-api/virtio/virtio.rst:77
msgid ""
"How a virtio device is found and configured by the kernel depends on how the "
"hypervisor defines it. Taking the `QEMU virtio-console <https://gitlab.com/"
"qemu-project/qemu/-/blob/master/hw/char/virtio-console.c>`__ device as an "
"example. When using PCI as a transport method, the device will present "
"itself on the PCI bus with vendor 0x1af4 (Red Hat, Inc.) and device id "
"0x1003 (virtio console), as defined in the spec, so the kernel will detect "
"it as it would do with any other PCI device."
msgstr ""

#: ../../../driver-api/virtio/virtio.rst:85
msgid ""
"During the PCI enumeration process, if a device is found to match the virtio-"
"pci driver (according to the virtio-pci device table, any PCI device with "
"vendor id = 0x1af4)::"
msgstr ""

#: ../../../driver-api/virtio/virtio.rst:95
msgid ""
"then the virtio-pci driver is probed and, if the probing goes well, the "
"device is registered to the virtio bus::"
msgstr ""

#: ../../../driver-api/virtio/virtio.rst:122
msgid ""
"When the device is registered to the virtio bus the kernel will look for a "
"driver in the bus that can handle the device and call that driver's "
"``probe`` method."
msgstr ""

#: ../../../driver-api/virtio/virtio.rst:126
msgid ""
"At this point, the virtqueues will be allocated and configured by calling "
"the appropriate ``virtio_find`` helper function, such as "
"virtio_find_single_vq() or virtio_find_vqs(), which will end up calling a "
"transport-specific ``find_vqs`` method."
msgstr ""

#: ../../../driver-api/virtio/virtio.rst:133
msgid "References"
msgstr ""

#: ../../../driver-api/virtio/virtio.rst:135
msgid ""
"_`[1]` Virtio Spec v1.2: https://docs.oasis-open.org/virtio/virtio/v1.2/"
"virtio-v1.2.html"
msgstr ""

#: ../../../driver-api/virtio/virtio.rst:140
msgid ""
"_`[2]` Virtqueues and virtio ring: How the data travels https://www.redhat."
"com/en/blog/virtqueues-and-virtio-ring-how-data-travels"
msgstr ""

#: ../../../driver-api/virtio/virtio.rst:144
msgid "Footnotes"
msgstr ""

#: ../../../driver-api/virtio/virtio.rst:145
msgid "that's why they may be also referred to as virtrings."
msgstr ""
