# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../driver-api/virtio/writing_virtio_drivers.rst:7
msgid "Writing Virtio Drivers"
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers.rst:10
msgid "Introduction"
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers.rst:12
msgid ""
"This document serves as a basic guideline for driver programmers that need "
"to hack a new virtio driver or understand the essentials of the existing "
"ones. See :ref:`Virtio on Linux <virtio>` for a general overview of virtio."
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers.rst:19
msgid "Driver boilerplate"
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers.rst:21
msgid ""
"As a bare minimum, a virtio driver needs to register in the virtio bus and "
"configure the virtqueues for the device according to its spec, the "
"configuration of the virtqueues in the driver side must match the virtqueue "
"definitions in the device. A basic driver skeleton could look like this::"
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers.rst:110
msgid ""
"The device id ``VIRTIO_ID_DUMMY`` here is a placeholder, virtio drivers "
"should be added only for devices that are defined in the spec, see include/"
"uapi/linux/virtio_ids.h. Device ids need to be at least reserved in the "
"virtio spec before being added to that file."
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers.rst:115
msgid ""
"If your driver doesn't have to do anything special in its ``init`` and "
"``exit`` methods, you can use the module_virtio_driver() helper to reduce "
"the amount of boilerplate code."
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers.rst:119
msgid ""
"The ``probe`` method does the minimum driver setup in this case (memory "
"allocation for the device data) and initializes the virtqueue. "
"virtio_device_ready() is used to enable the virtqueue and to notify the "
"device that the driver is ready to manage the device (\"DRIVER_OK\"). The "
"virtqueues are anyway enabled automatically by the core after ``probe`` "
"returns."
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:126:
#: include/linux/virtio_config.h:263
msgid "enable vq use in probe function"
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:126:
#: include/linux/virtio_config.h:267
#: ../../../driver-api/virtio/writing_virtio_drivers:157:
#: drivers/virtio/virtio_ring.c:2375
#: ../../../driver-api/virtio/writing_virtio_drivers:160:
#: drivers/virtio/virtio_ring.c:2330
#: ../../../driver-api/virtio/writing_virtio_drivers:163:
#: drivers/virtio/virtio_ring.c:2291
#: ../../../driver-api/virtio/writing_virtio_drivers:172:
#: drivers/virtio/virtio_ring.c:2527
#: ../../../driver-api/virtio/writing_virtio_drivers:179:
#: drivers/virtio/virtio_ring.c:2559
#: ../../../driver-api/virtio/writing_virtio_drivers:182:
#: drivers/virtio/virtio_ring.c:2625
msgid "**Parameters**"
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:126:
#: include/linux/virtio_config.h:269
msgid "``struct virtio_device *dev``"
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:126:
#: include/linux/virtio_config.h:264
msgid "the virtio device"
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:126:
#: include/linux/virtio_config.h:266
#: ../../../driver-api/virtio/writing_virtio_drivers:157:
#: drivers/virtio/virtio_ring.c:2378
#: ../../../driver-api/virtio/writing_virtio_drivers:160:
#: drivers/virtio/virtio_ring.c:2333
#: ../../../driver-api/virtio/writing_virtio_drivers:163:
#: drivers/virtio/virtio_ring.c:2295
#: ../../../driver-api/virtio/writing_virtio_drivers:172:
#: drivers/virtio/virtio_ring.c:2528
#: ../../../driver-api/virtio/writing_virtio_drivers:179:
#: drivers/virtio/virtio_ring.c:2558
#: ../../../driver-api/virtio/writing_virtio_drivers:182:
#: drivers/virtio/virtio_ring.c:2624
msgid "**Description**"
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:126:
#: include/linux/virtio_config.h:265
msgid "Driver must call this to use vqs in the probe function."
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:126:
#: include/linux/virtio_config.h:267
msgid "**Note**"
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:126:
#: include/linux/virtio_config.h:268
msgid "vqs are enabled automatically after probe returns."
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers.rst:129
msgid ""
"In any case, the virtqueues need to be enabled before adding buffers to them."
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers.rst:133
msgid "Sending and receiving data"
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers.rst:135
msgid ""
"The virtio_dummy_recv_cb() callback in the code above will be triggered when "
"the device notifies the driver after it finishes processing a descriptor or "
"descriptor chain, either for reading or writing. However, that's only the "
"second half of the virtio device-driver communication process, as the "
"communication is always started by the driver regardless of the direction of "
"the data transfer."
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers.rst:142
msgid ""
"To configure a buffer transfer from the driver to the device, first you have "
"to add the buffers -- packed as `scatterlists` -- to the appropriate "
"virtqueue using any of the virtqueue_add_inbuf(), virtqueue_add_outbuf() or "
"virtqueue_add_sgs(), depending on whether you need to add one input "
"`scatterlist` (for the device to fill in), one output `scatterlist` (for the "
"device to consume) or multiple `scatterlists`, respectively. Then, once the "
"virtqueue is set up, a call to virtqueue_kick() sends a notification that "
"will be serviced by the hypervisor that implements the device::"
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:157:
#: drivers/virtio/virtio_ring.c:2371
msgid "expose input buffers to other end"
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:157:
#: drivers/virtio/virtio_ring.c:2377
#: ../../../driver-api/virtio/writing_virtio_drivers:160:
#: drivers/virtio/virtio_ring.c:2332
msgid "``struct virtqueue *vq``"
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:157:
#: drivers/virtio/virtio_ring.c:2372
#: ../../../driver-api/virtio/writing_virtio_drivers:160:
#: drivers/virtio/virtio_ring.c:2327
#: ../../../driver-api/virtio/writing_virtio_drivers:163:
#: drivers/virtio/virtio_ring.c:2288
#: ../../../driver-api/virtio/writing_virtio_drivers:172:
#: drivers/virtio/virtio_ring.c:2524
#: ../../../driver-api/virtio/writing_virtio_drivers:179:
#: drivers/virtio/virtio_ring.c:2556
#: ../../../driver-api/virtio/writing_virtio_drivers:182:
#: drivers/virtio/virtio_ring.c:2622
msgid "the struct virtqueue we're talking about."
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:157:
#: drivers/virtio/virtio_ring.c:2374
#: ../../../driver-api/virtio/writing_virtio_drivers:160:
#: drivers/virtio/virtio_ring.c:2329
msgid "``struct scatterlist *sg``"
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:157:
#: drivers/virtio/virtio_ring.c:2373
#: ../../../driver-api/virtio/writing_virtio_drivers:160:
#: drivers/virtio/virtio_ring.c:2328
msgid "scatterlist (must be well-formed and terminated!)"
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:157:
#: drivers/virtio/virtio_ring.c:2375
#: ../../../driver-api/virtio/writing_virtio_drivers:160:
#: drivers/virtio/virtio_ring.c:2330
msgid "``unsigned int num``"
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:157:
#: drivers/virtio/virtio_ring.c:2374
msgid "the number of entries in **sg** writable by other side"
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:157:
#: drivers/virtio/virtio_ring.c:2376
#: ../../../driver-api/virtio/writing_virtio_drivers:160:
#: drivers/virtio/virtio_ring.c:2331
#: ../../../driver-api/virtio/writing_virtio_drivers:163:
#: drivers/virtio/virtio_ring.c:2293
msgid "``void *data``"
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:157:
#: drivers/virtio/virtio_ring.c:2375
#: ../../../driver-api/virtio/writing_virtio_drivers:160:
#: drivers/virtio/virtio_ring.c:2330
#: ../../../driver-api/virtio/writing_virtio_drivers:163:
#: drivers/virtio/virtio_ring.c:2292
msgid "the token identifying the buffer."
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:157:
#: drivers/virtio/virtio_ring.c:2377
#: ../../../driver-api/virtio/writing_virtio_drivers:160:
#: drivers/virtio/virtio_ring.c:2332
#: ../../../driver-api/virtio/writing_virtio_drivers:163:
#: drivers/virtio/virtio_ring.c:2294
msgid "``gfp_t gfp``"
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:157:
#: drivers/virtio/virtio_ring.c:2376
#: ../../../driver-api/virtio/writing_virtio_drivers:160:
#: drivers/virtio/virtio_ring.c:2331
#: ../../../driver-api/virtio/writing_virtio_drivers:163:
#: drivers/virtio/virtio_ring.c:2293
msgid "how to do memory allocations (if necessary)."
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:157:
#: drivers/virtio/virtio_ring.c:2377
#: ../../../driver-api/virtio/writing_virtio_drivers:160:
#: drivers/virtio/virtio_ring.c:2332
#: ../../../driver-api/virtio/writing_virtio_drivers:163:
#: drivers/virtio/virtio_ring.c:2294
#: ../../../driver-api/virtio/writing_virtio_drivers:172:
#: drivers/virtio/virtio_ring.c:2532
#: ../../../driver-api/virtio/writing_virtio_drivers:182:
#: drivers/virtio/virtio_ring.c:2627
msgid ""
"Caller must ensure we don't call this with other virtqueue operations at the "
"same time (except where noted)."
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:157:
#: drivers/virtio/virtio_ring.c:2380
#: ../../../driver-api/virtio/writing_virtio_drivers:160:
#: drivers/virtio/virtio_ring.c:2335
#: ../../../driver-api/virtio/writing_virtio_drivers:163:
#: drivers/virtio/virtio_ring.c:2297
msgid "Returns zero or a negative error (ie. ENOSPC, ENOMEM, EIO)."
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:160:
#: drivers/virtio/virtio_ring.c:2326
msgid "expose output buffers to other end"
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:160:
#: drivers/virtio/virtio_ring.c:2329
msgid "the number of entries in **sg** readable by other side"
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:163:
#: drivers/virtio/virtio_ring.c:2287
msgid "expose buffers to other end"
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:163:
#: drivers/virtio/virtio_ring.c:2293
#: ../../../driver-api/virtio/writing_virtio_drivers:172:
#: drivers/virtio/virtio_ring.c:2529
#: ../../../driver-api/virtio/writing_virtio_drivers:179:
#: drivers/virtio/virtio_ring.c:2561
#: ../../../driver-api/virtio/writing_virtio_drivers:182:
#: drivers/virtio/virtio_ring.c:2627
msgid "``struct virtqueue *_vq``"
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:163:
#: drivers/virtio/virtio_ring.c:2290
msgid "``struct scatterlist *sgs[]``"
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:163:
#: drivers/virtio/virtio_ring.c:2289
msgid "array of terminated scatterlists."
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:163:
#: drivers/virtio/virtio_ring.c:2291
msgid "``unsigned int out_sgs``"
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:163:
#: drivers/virtio/virtio_ring.c:2290
msgid "the number of scatterlists readable by other side"
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:163:
#: drivers/virtio/virtio_ring.c:2292
msgid "``unsigned int in_sgs``"
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:163:
#: drivers/virtio/virtio_ring.c:2291
msgid "the number of scatterlists which are writable (after readable ones)"
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:163:
#: drivers/virtio/virtio_ring.c:2299
msgid ""
"NB: ENOSPC is a special code that is only returned on an attempt to add a "
"buffer to a full VQ. It indicates that some buffers are outstanding and that "
"the operation can be retried after some buffers have been used."
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers.rst:166
msgid ""
"Then, after the device has read or written the buffers prepared by the "
"driver and notifies it back, the driver can call virtqueue_get_buf() to read "
"the data produced by the device (if the virtqueue was set up with input "
"buffers) or simply to reclaim the buffers if they were already consumed by "
"the device:"
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:172:
#: drivers/virtio/virtio_ring.c:2523
msgid "get the next used buffer"
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:172:
#: drivers/virtio/virtio_ring.c:2526
msgid "``unsigned int *len``"
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:172:
#: drivers/virtio/virtio_ring.c:2525
msgid "the length written into the buffer"
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:172:
#: drivers/virtio/virtio_ring.c:2527
msgid "``void **ctx``"
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:172:
#: drivers/virtio/virtio_ring.c:2526
msgid "extra context for the token"
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:172:
#: drivers/virtio/virtio_ring.c:2527
msgid ""
"If the device wrote data into the buffer, **len** will be set to the amount "
"written.  This means you don't need to clear the buffer beforehand to ensure "
"there's no data leakage in the case of short writes."
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:172:
#: drivers/virtio/virtio_ring.c:2535
msgid ""
"Returns NULL if there are no used buffers, or the \"data\" token handed to "
"virtqueue_add_*()."
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers.rst:175
msgid ""
"The virtqueue callbacks can be disabled and re-enabled using the "
"virtqueue_disable_cb() and the family of virtqueue_enable_cb() functions "
"respectively. See drivers/virtio/virtio_ring.c for more details:"
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:179:
#: drivers/virtio/virtio_ring.c:2555
msgid "disable callbacks"
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:179:
#: drivers/virtio/virtio_ring.c:2557
msgid ""
"Note that this is not necessarily synchronous, hence unreliable and only "
"useful as an optimization."
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:179:
#: drivers/virtio/virtio_ring.c:2560
msgid "Unlike other operations, this need not be serialized."
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:182:
#: drivers/virtio/virtio_ring.c:2621
msgid "restart callbacks after disable_cb."
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers:182:
#: drivers/virtio/virtio_ring.c:2623
msgid ""
"This re-enables callbacks; it returns \"false\" if there are pending buffers "
"in the queue, to detect a possible race between the driver checking for more "
"work, and enabling callbacks."
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers.rst:185
msgid ""
"But note that some spurious callbacks can still be triggered under certain "
"scenarios. The way to disable callbacks reliably is to reset the device or "
"the virtqueue (virtio_reset_device())."
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers.rst:191
msgid "References"
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers.rst:193
msgid ""
"_`[1]` Virtio Spec v1.2: https://docs.oasis-open.org/virtio/virtio/v1.2/"
"virtio-v1.2.html"
msgstr ""

#: ../../../driver-api/virtio/writing_virtio_drivers.rst:196
msgid "Check for later versions of the spec as well."
msgstr ""
