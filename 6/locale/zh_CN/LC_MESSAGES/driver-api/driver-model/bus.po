# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../driver-api/driver-model/bus.rst:3
msgid "Bus Types"
msgstr ""

#: ../../../driver-api/driver-model/bus.rst:6
msgid "Definition"
msgstr ""

#: ../../../driver-api/driver-model/bus.rst:7
msgid "See the kerneldoc for the struct bus_type."
msgstr ""

#: ../../../driver-api/driver-model/bus.rst:9
msgid "int bus_register(struct bus_type * bus);"
msgstr ""

#: ../../../driver-api/driver-model/bus.rst:13
msgid "Declaration"
msgstr ""

#: ../../../driver-api/driver-model/bus.rst:15
msgid ""
"Each bus type in the kernel (PCI, USB, etc) should declare one static object "
"of this type. They must initialize the name field, and may optionally "
"initialize the match callback::"
msgstr ""

#: ../../../driver-api/driver-model/bus.rst:24
msgid "The structure should be exported to drivers in a header file:"
msgstr ""

#: ../../../driver-api/driver-model/bus.rst:26
msgid "extern struct bus_type pci_bus_type;"
msgstr ""

#: ../../../driver-api/driver-model/bus.rst:30
msgid "Registration"
msgstr ""

#: ../../../driver-api/driver-model/bus.rst:32
msgid ""
"When a bus driver is initialized, it calls bus_register. This initializes "
"the rest of the fields in the bus object and inserts it into a global list "
"of bus types. Once the bus object is registered, the fields in it are usable "
"by the bus driver."
msgstr ""

#: ../../../driver-api/driver-model/bus.rst:39
msgid "Callbacks"
msgstr ""

#: ../../../driver-api/driver-model/bus.rst:42
msgid "match(): Attaching Drivers to Devices"
msgstr ""

#: ../../../driver-api/driver-model/bus.rst:44
msgid ""
"The format of device ID structures and the semantics for comparing them are "
"inherently bus-specific. Drivers typically declare an array of device IDs of "
"devices they support that reside in a bus-specific driver structure."
msgstr ""

#: ../../../driver-api/driver-model/bus.rst:49
msgid ""
"The purpose of the match callback is to give the bus an opportunity to "
"determine if a particular driver supports a particular device by comparing "
"the device IDs the driver supports with the device ID of a particular "
"device, without sacrificing bus-specific functionality or type-safety."
msgstr ""

#: ../../../driver-api/driver-model/bus.rst:55
msgid ""
"When a driver is registered with the bus, the bus's list of devices is "
"iterated over, and the match callback is called for each device that does "
"not have a driver associated with it."
msgstr ""

#: ../../../driver-api/driver-model/bus.rst:62
msgid "Device and Driver Lists"
msgstr ""

#: ../../../driver-api/driver-model/bus.rst:64
msgid ""
"The lists of devices and drivers are intended to replace the local lists "
"that many buses keep. They are lists of struct devices and struct "
"device_drivers, respectively. Bus drivers are free to use the lists as they "
"please, but conversion to the bus-specific type may be necessary."
msgstr ""

#: ../../../driver-api/driver-model/bus.rst:70
msgid "The LDM core provides helper functions for iterating over each list::"
msgstr ""

#: ../../../driver-api/driver-model/bus.rst:79
msgid ""
"These helpers iterate over the respective list, and call the callback for "
"each device or driver in the list. All list accesses are synchronized by "
"taking the bus's lock (read currently). The reference count on each object "
"in the list is incremented before the callback is called; it is decremented "
"after the next object has been obtained. The lock is not held when calling "
"the callback."
msgstr ""

#: ../../../driver-api/driver-model/bus.rst:88
msgid "sysfs"
msgstr ""

#: ../../../driver-api/driver-model/bus.rst:89
msgid "There is a top-level directory named 'bus'."
msgstr ""

#: ../../../driver-api/driver-model/bus.rst:91
msgid ""
"Each bus gets a directory in the bus directory, along with two default "
"directories::"
msgstr ""

#: ../../../driver-api/driver-model/bus.rst:98
msgid ""
"Drivers registered with the bus get a directory in the bus's drivers "
"directory::"
msgstr ""

#: ../../../driver-api/driver-model/bus.rst:109
msgid ""
"Each device that is discovered on a bus of that type gets a symlink in the "
"bus's devices directory to the device's directory in the physical hierarchy::"
msgstr ""

#: ../../../driver-api/driver-model/bus.rst:122
msgid "Exporting Attributes"
msgstr ""

#: ../../../driver-api/driver-model/bus.rst:132
msgid ""
"Bus drivers can export attributes using the BUS_ATTR_RW macro that works "
"similarly to the DEVICE_ATTR_RW macro for devices. For example, a definition "
"like this::"
msgstr ""

#: ../../../driver-api/driver-model/bus.rst:138
msgid "is equivalent to declaring::"
msgstr ""

#: ../../../driver-api/driver-model/bus.rst:142
msgid ""
"This can then be used to add and remove the attribute from the bus's sysfs "
"directory using::"
msgstr ""
