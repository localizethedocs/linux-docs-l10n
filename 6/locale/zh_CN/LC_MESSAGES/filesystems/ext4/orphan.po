# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../filesystems/ext4/orphan.rst:4
msgid "Orphan file"
msgstr ""

#: ../../../filesystems/ext4/orphan.rst:6
msgid ""
"In unix there can inodes that are unlinked from directory hierarchy but that "
"are still alive because they are open. In case of crash the filesystem has "
"to clean up these inodes as otherwise they (and the blocks referenced from "
"them) would leak. Similarly if we truncate or extend the file, we need not "
"be able to perform the operation in a single journalling transaction. In "
"such case we track the inode as orphan so that in case of crash extra blocks "
"allocated to the file get truncated."
msgstr ""

#: ../../../filesystems/ext4/orphan.rst:14
msgid ""
"Traditionally ext4 tracks orphan inodes in a form of single linked list "
"where superblock contains the inode number of the last orphan inode "
"(s_last_orphan field) and then each inode contains inode number of the "
"previously orphaned inode (we overload i_dtime inode field for this). "
"However this filesystem global single linked list is a scalability "
"bottleneck for workloads that result in heavy creation of orphan inodes. "
"When orphan file feature (COMPAT_ORPHAN_FILE) is enabled, the filesystem has "
"a special inode (referenced from the superblock through s_orphan_file_inum) "
"with several blocks. Each of these blocks has a structure:"
msgstr ""

#: ../../../filesystems/ext4/orphan.rst:25
msgid "Offset"
msgstr ""

#: ../../../filesystems/ext4/orphan.rst:25
msgid "Type"
msgstr ""

#: ../../../filesystems/ext4/orphan.rst:25
msgid "Name"
msgstr ""

#: ../../../filesystems/ext4/orphan.rst:25
msgid "Description"
msgstr ""

#: ../../../filesystems/ext4/orphan.rst:27
msgid "0x0"
msgstr ""

#: ../../../filesystems/ext4/orphan.rst:27
msgid "Array of __le32 entries"
msgstr ""

#: ../../../filesystems/ext4/orphan.rst:27
msgid "Orphan inode entries"
msgstr ""

#: ../../../filesystems/ext4/orphan.rst:27
msgid ""
"Each __le32 entry is either empty (0) or it contains inode number of an "
"orphan inode."
msgstr ""

#: ../../../filesystems/ext4/orphan.rst:31
msgid "blocksize-8"
msgstr ""

#: ../../../filesystems/ext4/orphan.rst:31
#: ../../../filesystems/ext4/orphan.rst:33
msgid "__le32"
msgstr ""

#: ../../../filesystems/ext4/orphan.rst:31
msgid "ob_magic"
msgstr ""

#: ../../../filesystems/ext4/orphan.rst:31
msgid "Magic value stored in orphan block tail (0x0b10ca04)"
msgstr ""

#: ../../../filesystems/ext4/orphan.rst:33
msgid "blocksize-4"
msgstr ""

#: ../../../filesystems/ext4/orphan.rst:33
msgid "ob_checksum"
msgstr ""

#: ../../../filesystems/ext4/orphan.rst:33
msgid "Checksum of the orphan block."
msgstr ""

#: ../../../filesystems/ext4/orphan.rst:36
msgid ""
"When a filesystem with orphan file feature is writeably mounted, we set "
"RO_COMPAT_ORPHAN_PRESENT feature in the superblock to indicate there may be "
"valid orphan entries. In case we see this feature when mounting the "
"filesystem, we read the whole orphan file and process all orphan inodes "
"found there as usual. When cleanly unmounting the filesystem we remove the "
"RO_COMPAT_ORPHAN_PRESENT feature to avoid unnecessary scanning of the orphan "
"file and also make the filesystem fully compatible with older kernels."
msgstr ""
