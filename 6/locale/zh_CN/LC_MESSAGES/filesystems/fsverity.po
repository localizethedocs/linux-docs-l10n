# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../filesystems/fsverity.rst:7
msgid "fs-verity: read-only file-based authenticity protection"
msgstr ""

#: ../../../filesystems/fsverity.rst:10
msgid "Introduction"
msgstr ""

#: ../../../filesystems/fsverity.rst:12
msgid ""
"fs-verity (``fs/verity/``) is a support layer that filesystems can hook into "
"to support transparent integrity and authenticity protection of read-only "
"files.  Currently, it is supported by the ext4, f2fs, and btrfs "
"filesystems.  Like fscrypt, not too much filesystem-specific code is needed "
"to support fs-verity."
msgstr ""

#: ../../../filesystems/fsverity.rst:18
msgid ""
"fs-verity is similar to `dm-verity <https://www.kernel.org/doc/Documentation/"
"admin-guide/device-mapper/verity.rst>`_ but works on files rather than block "
"devices.  On regular files on filesystems supporting fs-verity, userspace "
"can execute an ioctl that causes the filesystem to build a Merkle tree for "
"the file and persist it to a filesystem-specific location associated with "
"the file."
msgstr ""

#: ../../../filesystems/fsverity.rst:25
msgid ""
"After this, the file is made readonly, and all reads from the file are "
"automatically verified against the file's Merkle tree.  Reads of any "
"corrupted data, including mmap reads, will fail."
msgstr ""

#: ../../../filesystems/fsverity.rst:29
msgid ""
"Userspace can use another ioctl to retrieve the root hash (actually the \"fs-"
"verity file digest\", which is a hash that includes the Merkle tree root "
"hash) that fs-verity is enforcing for the file.  This ioctl executes in "
"constant time, regardless of the file size."
msgstr ""

#: ../../../filesystems/fsverity.rst:34
msgid ""
"fs-verity is essentially a way to hash a file in constant time, subject to "
"the caveat that reads which would violate the hash will fail at runtime."
msgstr ""

#: ../../../filesystems/fsverity.rst:39
msgid "Use cases"
msgstr ""

#: ../../../filesystems/fsverity.rst:41
msgid ""
"By itself, fs-verity only provides integrity protection, i.e. detection of "
"accidental (non-malicious) corruption."
msgstr ""

#: ../../../filesystems/fsverity.rst:44
msgid ""
"However, because fs-verity makes retrieving the file hash extremely "
"efficient, it's primarily meant to be used as a tool to support "
"authentication (detection of malicious modifications) or auditing (logging "
"file hashes before use)."
msgstr ""

#: ../../../filesystems/fsverity.rst:49
msgid ""
"A standard file hash could be used instead of fs-verity.  However, this is "
"inefficient if the file is large and only a small portion may be accessed.  "
"This is often the case for Android application package (APK) files, for "
"example.  These typically contain many translations, classes, and other "
"resources that are infrequently or even never accessed on a particular "
"device.  It would be slow and wasteful to read and hash the entire file "
"before starting the application."
msgstr ""

#: ../../../filesystems/fsverity.rst:57
msgid ""
"Unlike an ahead-of-time hash, fs-verity also re-verifies data each time it's "
"paged in.  This ensures that malicious disk firmware can't undetectably "
"change the contents of the file at runtime."
msgstr ""

#: ../../../filesystems/fsverity.rst:61
msgid ""
"fs-verity does not replace or obsolete dm-verity.  dm-verity should still be "
"used on read-only filesystems.  fs-verity is for files that must live on a "
"read-write filesystem because they are independently updated and potentially "
"user-installed, so dm-verity cannot be used."
msgstr ""

#: ../../../filesystems/fsverity.rst:66
msgid ""
"fs-verity does not mandate a particular scheme for authenticating its file "
"hashes.  (Similarly, dm-verity does not mandate a particular scheme for "
"authenticating its block device root hashes.)  Options for authenticating fs-"
"verity file hashes include:"
msgstr ""

#: ../../../filesystems/fsverity.rst:71
msgid ""
"Trusted userspace code.  Often, the userspace code that accesses files can "
"be trusted to authenticate them.  Consider e.g. an application that wants to "
"authenticate data files before using them, or an application loader that is "
"part of the operating system (which is already authenticated in a different "
"way, such as by being loaded from a read-only partition that uses dm-verity) "
"and that wants to authenticate applications before loading them.  In these "
"cases, this trusted userspace code can authenticate a file's contents by "
"retrieving its fs-verity digest using `FS_IOC_MEASURE_VERITY`_, then "
"verifying a signature of it using any userspace cryptographic library that "
"supports digital signatures."
msgstr ""

#: ../../../filesystems/fsverity.rst:83
msgid ""
"Integrity Measurement Architecture (IMA).  IMA supports fs-verity file "
"digests as an alternative to its traditional full file digests. \"IMA "
"appraisal\" enforces that files contain a valid, matching signature in their "
"\"security.ima\" extended attribute, as controlled by the IMA policy.  For "
"more information, see the IMA documentation."
msgstr ""

#: ../../../filesystems/fsverity.rst:89
msgid ""
"Integrity Policy Enforcement (IPE).  IPE supports enforcing access control "
"decisions based on immutable security properties of files, including those "
"protected by fs-verity's built-in signatures. \"IPE policy\" specifically "
"allows for the authorization of fs-verity files using properties "
"``fsverity_digest`` for identifying files by their verity digest, and "
"``fsverity_signature`` to authorize files with a verified fs-verity's built-"
"in signature. For details on configuring IPE policies and understanding its "
"operational modes, please refer to :doc:`IPE admin guide </admin-guide/LSM/"
"ipe>`."
msgstr ""

#: ../../../filesystems/fsverity.rst:99
msgid ""
"Trusted userspace code in combination with `Built-in signature "
"verification`_.  This approach should be used only with great care."
msgstr ""

#: ../../../filesystems/fsverity.rst:103
msgid "User API"
msgstr ""

#: ../../../filesystems/fsverity.rst:106
msgid "FS_IOC_ENABLE_VERITY"
msgstr ""

#: ../../../filesystems/fsverity.rst:108
msgid ""
"The FS_IOC_ENABLE_VERITY ioctl enables fs-verity on a file.  It takes in a "
"pointer to a struct fsverity_enable_arg, defined as follows::"
msgstr ""

#: ../../../filesystems/fsverity.rst:124
msgid ""
"This structure contains the parameters of the Merkle tree to build for the "
"file.  It must be initialized as follows:"
msgstr ""

#: ../../../filesystems/fsverity.rst:127
msgid "``version`` must be 1."
msgstr ""

#: ../../../filesystems/fsverity.rst:128
msgid ""
"``hash_algorithm`` must be the identifier for the hash algorithm to use for "
"the Merkle tree, such as FS_VERITY_HASH_ALG_SHA256.  See ``include/uapi/"
"linux/fsverity.h`` for the list of possible values."
msgstr ""

#: ../../../filesystems/fsverity.rst:131
msgid ""
"``block_size`` is the Merkle tree block size, in bytes.  In Linux v6.3 and "
"later, this can be any power of 2 between (inclusively) 1024 and the minimum "
"of the system page size and the filesystem block size.  In earlier versions, "
"the page size was the only allowed value."
msgstr ""

#: ../../../filesystems/fsverity.rst:136
msgid ""
"``salt_size`` is the size of the salt in bytes, or 0 if no salt is "
"provided.  The salt is a value that is prepended to every hashed block; it "
"can be used to personalize the hashing for a particular file or device.  "
"Currently the maximum salt size is 32 bytes."
msgstr ""

#: ../../../filesystems/fsverity.rst:140
msgid ""
"``salt_ptr`` is the pointer to the salt, or NULL if no salt is provided."
msgstr ""

#: ../../../filesystems/fsverity.rst:142
msgid ""
"``sig_size`` is the size of the builtin signature in bytes, or 0 if no "
"builtin signature is provided.  Currently the builtin signature is (somewhat "
"arbitrarily) limited to 16128 bytes."
msgstr ""

#: ../../../filesystems/fsverity.rst:145
msgid ""
"``sig_ptr``  is the pointer to the builtin signature, or NULL if no builtin "
"signature is provided.  A builtin signature is only needed if the `Built-in "
"signature verification`_ feature is being used.  It is not needed for IMA "
"appraisal, and it is not needed if the file signature is being handled "
"entirely in userspace."
msgstr ""

#: ../../../filesystems/fsverity.rst:150
msgid "All reserved fields must be zeroed."
msgstr ""

#: ../../../filesystems/fsverity.rst:152
msgid ""
"FS_IOC_ENABLE_VERITY causes the filesystem to build a Merkle tree for the "
"file and persist it to a filesystem-specific location associated with the "
"file, then mark the file as a verity file.  This ioctl may take a long time "
"to execute on large files, and it is interruptible by fatal signals."
msgstr ""

#: ../../../filesystems/fsverity.rst:158
msgid ""
"FS_IOC_ENABLE_VERITY checks for write access to the inode.  However, it must "
"be executed on an O_RDONLY file descriptor and no processes can have the "
"file open for writing.  Attempts to open the file for writing while this "
"ioctl is executing will fail with ETXTBSY.  (This is necessary to guarantee "
"that no writable file descriptors will exist after verity is enabled, and to "
"guarantee that the file's contents are stable while the Merkle tree is being "
"built over it.)"
msgstr ""

#: ../../../filesystems/fsverity.rst:166
msgid ""
"On success, FS_IOC_ENABLE_VERITY returns 0, and the file becomes a verity "
"file.  On failure (including the case of interruption by a fatal signal), no "
"changes are made to the file."
msgstr ""

#: ../../../filesystems/fsverity.rst:170
msgid "FS_IOC_ENABLE_VERITY can fail with the following errors:"
msgstr ""

#: ../../../filesystems/fsverity.rst:172
msgid "``EACCES``: the process does not have write access to the file"
msgstr ""

#: ../../../filesystems/fsverity.rst:173
msgid "``EBADMSG``: the builtin signature is malformed"
msgstr ""

#: ../../../filesystems/fsverity.rst:174
msgid "``EBUSY``: this ioctl is already running on the file"
msgstr ""

#: ../../../filesystems/fsverity.rst:175
msgid "``EEXIST``: the file already has verity enabled"
msgstr ""

#: ../../../filesystems/fsverity.rst:176 ../../../filesystems/fsverity.rst:235
#: ../../../filesystems/fsverity.rst:313
msgid "``EFAULT``: the caller provided inaccessible memory"
msgstr ""

#: ../../../filesystems/fsverity.rst:177
msgid "``EFBIG``: the file is too large to enable verity on"
msgstr ""

#: ../../../filesystems/fsverity.rst:178
msgid "``EINTR``: the operation was interrupted by a fatal signal"
msgstr ""

#: ../../../filesystems/fsverity.rst:179
msgid ""
"``EINVAL``: unsupported version, hash algorithm, or block size; or reserved "
"bits are set; or the file descriptor refers to neither a regular file nor a "
"directory."
msgstr ""

#: ../../../filesystems/fsverity.rst:182
msgid "``EISDIR``: the file descriptor refers to a directory"
msgstr ""

#: ../../../filesystems/fsverity.rst:183
msgid "``EKEYREJECTED``: the builtin signature doesn't match the file"
msgstr ""

#: ../../../filesystems/fsverity.rst:184
msgid "``EMSGSIZE``: the salt or builtin signature is too long"
msgstr ""

#: ../../../filesystems/fsverity.rst:185
msgid ""
"``ENOKEY``: the \".fs-verity\" keyring doesn't contain the certificate "
"needed to verify the builtin signature"
msgstr ""

#: ../../../filesystems/fsverity.rst:187
msgid ""
"``ENOPKG``: fs-verity recognizes the hash algorithm, but it's not available "
"in the kernel as currently configured"
msgstr ""

#: ../../../filesystems/fsverity.rst:189 ../../../filesystems/fsverity.rst:237
msgid "``ENOTTY``: this type of filesystem does not implement fs-verity"
msgstr ""

#: ../../../filesystems/fsverity.rst:190
msgid ""
"``EOPNOTSUPP``: the kernel was not configured with fs-verity support; or the "
"filesystem superblock has not had the 'verity' feature enabled on it; or the "
"filesystem does not support fs-verity on this file.  (See `Filesystem "
"support`_.)"
msgstr ""

#: ../../../filesystems/fsverity.rst:194
msgid ""
"``EPERM``: the file is append-only; or, a builtin signature is required and "
"one was not provided."
msgstr ""

#: ../../../filesystems/fsverity.rst:196
msgid "``EROFS``: the filesystem is read-only"
msgstr ""

#: ../../../filesystems/fsverity.rst:197
msgid ""
"``ETXTBSY``: someone has the file open for writing.  This can be the "
"caller's file descriptor, another open file descriptor, or the file "
"reference held by a writable memory map."
msgstr ""

#: ../../../filesystems/fsverity.rst:202
msgid "FS_IOC_MEASURE_VERITY"
msgstr ""

#: ../../../filesystems/fsverity.rst:204
msgid ""
"The FS_IOC_MEASURE_VERITY ioctl retrieves the digest of a verity file. The "
"fs-verity file digest is a cryptographic digest that identifies the file "
"contents that are being enforced on reads; it is computed via a Merkle tree "
"and is different from a traditional full-file digest."
msgstr ""

#: ../../../filesystems/fsverity.rst:209
msgid "This ioctl takes in a pointer to a variable-length structure::"
msgstr ""

#: ../../../filesystems/fsverity.rst:217
msgid ""
"``digest_size`` is an input/output field.  On input, it must be initialized "
"to the number of bytes allocated for the variable-length ``digest`` field."
msgstr ""

#: ../../../filesystems/fsverity.rst:221
msgid ""
"On success, 0 is returned and the kernel fills in the structure as follows:"
msgstr ""

#: ../../../filesystems/fsverity.rst:224
msgid ""
"``digest_algorithm`` will be the hash algorithm used for the file digest.  "
"It will match ``fsverity_enable_arg::hash_algorithm``."
msgstr ""

#: ../../../filesystems/fsverity.rst:226
msgid ""
"``digest_size`` will be the size of the digest in bytes, e.g. 32 for "
"SHA-256.  (This can be redundant with ``digest_algorithm``.)"
msgstr ""

#: ../../../filesystems/fsverity.rst:228
msgid "``digest`` will be the actual bytes of the digest."
msgstr ""

#: ../../../filesystems/fsverity.rst:230
msgid ""
"FS_IOC_MEASURE_VERITY is guaranteed to execute in constant time, regardless "
"of the size of the file."
msgstr ""

#: ../../../filesystems/fsverity.rst:233
msgid "FS_IOC_MEASURE_VERITY can fail with the following errors:"
msgstr ""

#: ../../../filesystems/fsverity.rst:236
msgid "``ENODATA``: the file is not a verity file"
msgstr ""

#: ../../../filesystems/fsverity.rst:238 ../../../filesystems/fsverity.rst:322
msgid ""
"``EOPNOTSUPP``: the kernel was not configured with fs-verity support, or the "
"filesystem superblock has not had the 'verity' feature enabled on it.  (See "
"`Filesystem support`_.)"
msgstr ""

#: ../../../filesystems/fsverity.rst:241
msgid ""
"``EOVERFLOW``: the digest is longer than the specified ``digest_size`` "
"bytes.  Try providing a larger buffer."
msgstr ""

#: ../../../filesystems/fsverity.rst:245
msgid "FS_IOC_READ_VERITY_METADATA"
msgstr ""

#: ../../../filesystems/fsverity.rst:247
msgid ""
"The FS_IOC_READ_VERITY_METADATA ioctl reads verity metadata from a verity "
"file.  This ioctl is available since Linux v5.12."
msgstr ""

#: ../../../filesystems/fsverity.rst:250
msgid ""
"This ioctl is useful for cases where the verity verification should be "
"performed somewhere other than the currently running kernel."
msgstr ""

#: ../../../filesystems/fsverity.rst:253
msgid ""
"One example is a server program that takes a verity file and serves it to a "
"client program, such that the client can do its own fs-verity compatible "
"verification of the file.  This only makes sense if the client doesn't trust "
"the server and if the server needs to provide the storage for the client."
msgstr ""

#: ../../../filesystems/fsverity.rst:259
msgid ""
"Another example is copying verity metadata when creating filesystem images "
"in userspace (such as with ``mkfs.ext4 -d``)."
msgstr ""

#: ../../../filesystems/fsverity.rst:262
msgid ""
"This is a fairly specialized use case, and most fs-verity users won't need "
"this ioctl."
msgstr ""

#: ../../../filesystems/fsverity.rst:265
msgid "This ioctl takes in a pointer to the following structure::"
msgstr ""

#: ../../../filesystems/fsverity.rst:279
msgid "``metadata_type`` specifies the type of metadata to read:"
msgstr ""

#: ../../../filesystems/fsverity.rst:281
msgid ""
"``FS_VERITY_METADATA_TYPE_MERKLE_TREE`` reads the blocks of the Merkle "
"tree.  The blocks are returned in order from the root level to the leaf "
"level.  Within each level, the blocks are returned in the same order that "
"their hashes are themselves hashed. See `Merkle tree`_ for more information."
msgstr ""

#: ../../../filesystems/fsverity.rst:287
msgid ""
"``FS_VERITY_METADATA_TYPE_DESCRIPTOR`` reads the fs-verity descriptor.  See "
"`fs-verity descriptor`_."
msgstr ""

#: ../../../filesystems/fsverity.rst:290
msgid ""
"``FS_VERITY_METADATA_TYPE_SIGNATURE`` reads the builtin signature which was "
"passed to FS_IOC_ENABLE_VERITY, if any.  See `Built-in signature "
"verification`_."
msgstr ""

#: ../../../filesystems/fsverity.rst:294
msgid ""
"The semantics are similar to those of ``pread()``.  ``offset`` specifies the "
"offset in bytes into the metadata item to read from, and ``length`` "
"specifies the maximum number of bytes to read from the metadata item.  "
"``buf_ptr`` is the pointer to the buffer to read into, cast to a 64-bit "
"integer.  ``__reserved`` must be 0.  On success, the number of bytes read is "
"returned.  0 is returned at the end of the metadata item.  The returned "
"length may be less than ``length``, for example if the ioctl is interrupted."
msgstr ""

#: ../../../filesystems/fsverity.rst:303
msgid ""
"The metadata returned by FS_IOC_READ_VERITY_METADATA isn't guaranteed to be "
"authenticated against the file digest that would be returned by "
"`FS_IOC_MEASURE_VERITY`_, as the metadata is expected to be used to "
"implement fs-verity compatible verification anyway (though absent a "
"malicious disk, the metadata will indeed match).  E.g. to implement this "
"ioctl, the filesystem is allowed to just read the Merkle tree blocks from "
"disk without actually verifying the path to the root node."
msgstr ""

#: ../../../filesystems/fsverity.rst:311
msgid "FS_IOC_READ_VERITY_METADATA can fail with the following errors:"
msgstr ""

#: ../../../filesystems/fsverity.rst:314
msgid "``EINTR``: the ioctl was interrupted before any data was read"
msgstr ""

#: ../../../filesystems/fsverity.rst:315
msgid "``EINVAL``: reserved fields were set, or ``offset + length`` overflowed"
msgstr ""

#: ../../../filesystems/fsverity.rst:317
msgid ""
"``ENODATA``: the file is not a verity file, or "
"FS_VERITY_METADATA_TYPE_SIGNATURE was requested but the file doesn't have a "
"builtin signature"
msgstr ""

#: ../../../filesystems/fsverity.rst:320
msgid ""
"``ENOTTY``: this type of filesystem does not implement fs-verity, or this "
"ioctl is not yet implemented on it"
msgstr ""

#: ../../../filesystems/fsverity.rst:327
msgid "FS_IOC_GETFLAGS"
msgstr ""

#: ../../../filesystems/fsverity.rst:329
msgid ""
"The existing ioctl FS_IOC_GETFLAGS (which isn't specific to fs-verity) can "
"also be used to check whether a file has fs-verity enabled or not. To do so, "
"check for FS_VERITY_FL (0x00100000) in the returned flags."
msgstr ""

#: ../../../filesystems/fsverity.rst:333
msgid ""
"The verity flag is not settable via FS_IOC_SETFLAGS.  You must use "
"FS_IOC_ENABLE_VERITY instead, since parameters must be provided."
msgstr ""

#: ../../../filesystems/fsverity.rst:337
msgid "statx"
msgstr ""

#: ../../../filesystems/fsverity.rst:339
msgid ""
"Since Linux v5.5, the statx() system call sets STATX_ATTR_VERITY if the file "
"has fs-verity enabled.  This can perform better than FS_IOC_GETFLAGS and "
"FS_IOC_MEASURE_VERITY because it doesn't require opening the file, and "
"opening verity files can be expensive."
msgstr ""

#: ../../../filesystems/fsverity.rst:347
msgid "Accessing verity files"
msgstr ""

#: ../../../filesystems/fsverity.rst:349
msgid ""
"Applications can transparently access a verity file just like a non-verity "
"one, with the following exceptions:"
msgstr ""

#: ../../../filesystems/fsverity.rst:352
msgid ""
"Verity files are readonly.  They cannot be opened for writing or "
"truncate()d, even if the file mode bits allow it.  Attempts to do one of "
"these things will fail with EPERM.  However, changes to metadata such as "
"owner, mode, timestamps, and xattrs are still allowed, since these are not "
"measured by fs-verity.  Verity files can also still be renamed, deleted, and "
"linked to."
msgstr ""

#: ../../../filesystems/fsverity.rst:359
msgid ""
"Direct I/O is not supported on verity files.  Attempts to use direct I/O on "
"such files will fall back to buffered I/O."
msgstr ""

#: ../../../filesystems/fsverity.rst:362
msgid ""
"DAX (Direct Access) is not supported on verity files, because this would "
"circumvent the data verification."
msgstr ""

#: ../../../filesystems/fsverity.rst:365
msgid ""
"Reads of data that doesn't match the verity Merkle tree will fail with EIO "
"(for read()) or SIGBUS (for mmap() reads)."
msgstr ""

#: ../../../filesystems/fsverity.rst:368
msgid ""
"If the sysctl \"fs.verity.require_signatures\" is set to 1 and the file is "
"not signed by a key in the \".fs-verity\" keyring, then opening the file "
"will fail.  See `Built-in signature verification`_."
msgstr ""

#: ../../../filesystems/fsverity.rst:372
msgid ""
"Direct access to the Merkle tree is not supported.  Therefore, if a verity "
"file is copied, or is backed up and restored, then it will lose its "
"\"verity\"-ness.  fs-verity is primarily meant for files like executables "
"that are managed by a package manager."
msgstr ""

#: ../../../filesystems/fsverity.rst:378
msgid "File digest computation"
msgstr ""

#: ../../../filesystems/fsverity.rst:380
msgid ""
"This section describes how fs-verity hashes the file contents using a Merkle "
"tree to produce the digest which cryptographically identifies the file "
"contents.  This algorithm is the same for all filesystems that support fs-"
"verity."
msgstr ""

#: ../../../filesystems/fsverity.rst:385
msgid ""
"Userspace only needs to be aware of this algorithm if it needs to compute fs-"
"verity file digests itself, e.g. in order to sign files."
msgstr ""

#: ../../../filesystems/fsverity.rst:391
msgid "Merkle tree"
msgstr ""

#: ../../../filesystems/fsverity.rst:393
msgid ""
"The file contents is divided into blocks, where the block size is "
"configurable but is usually 4096 bytes.  The end of the last block is zero-"
"padded if needed.  Each block is then hashed, producing the first level of "
"hashes.  Then, the hashes in this first level are grouped into 'blocksize'-"
"byte blocks (zero-padding the ends as needed) and these blocks are hashed, "
"producing the second level of hashes.  This proceeds up the tree until only "
"a single block remains.  The hash of this block is the \"Merkle tree root "
"hash\"."
msgstr ""

#: ../../../filesystems/fsverity.rst:402
msgid ""
"If the file fits in one block and is nonempty, then the \"Merkle tree root "
"hash\" is simply the hash of the single data block.  If the file is empty, "
"then the \"Merkle tree root hash\" is all zeroes."
msgstr ""

#: ../../../filesystems/fsverity.rst:406
msgid ""
"The \"blocks\" here are not necessarily the same as \"filesystem blocks\"."
msgstr ""

#: ../../../filesystems/fsverity.rst:408
msgid ""
"If a salt was specified, then it's zero-padded to the closest multiple of "
"the input size of the hash algorithm's compression function, e.g. 64 bytes "
"for SHA-256 or 128 bytes for SHA-512.  The padded salt is prepended to every "
"data or Merkle tree block that is hashed."
msgstr ""

#: ../../../filesystems/fsverity.rst:413
msgid ""
"The purpose of the block padding is to cause every hash to be taken over the "
"same amount of data, which simplifies the implementation and keeps open more "
"possibilities for hardware acceleration.  The purpose of the salt padding is "
"to make the salting \"free\" when the salted hash state is precomputed, then "
"imported for each hash."
msgstr ""

#: ../../../filesystems/fsverity.rst:419
msgid ""
"Example: in the recommended configuration of SHA-256 and 4K blocks, 128 hash "
"values fit in each block.  Thus, each level of the Merkle tree is "
"approximately 128 times smaller than the previous, and for large files the "
"Merkle tree's size converges to approximately 1/127 of the original file "
"size.  However, for small files, the padding is significant, making the "
"space overhead proportionally more."
msgstr ""

#: ../../../filesystems/fsverity.rst:429
msgid "fs-verity descriptor"
msgstr ""

#: ../../../filesystems/fsverity.rst:431
msgid ""
"By itself, the Merkle tree root hash is ambiguous.  For example, it can't a "
"distinguish a large file from a small second file whose data is exactly the "
"top-level hash block of the first file.  Ambiguities also arise from the "
"convention of padding to the next block boundary."
msgstr ""

#: ../../../filesystems/fsverity.rst:436
msgid ""
"To solve this problem, the fs-verity file digest is actually computed as a "
"hash of the following structure, which contains the Merkle tree root hash as "
"well as other fields such as the file size::"
msgstr ""

#: ../../../filesystems/fsverity.rst:453
msgid "Built-in signature verification"
msgstr ""

#: ../../../filesystems/fsverity.rst:455
msgid ""
"CONFIG_FS_VERITY_BUILTIN_SIGNATURES=y adds supports for in-kernel "
"verification of fs-verity builtin signatures."
msgstr ""

#: ../../../filesystems/fsverity.rst:458
msgid ""
"**IMPORTANT**!  Please take great care before using this feature. It is not "
"the only way to do signatures with fs-verity, and the alternatives (such as "
"userspace signature verification, and IMA appraisal) can be much better.  "
"It's also easy to fall into a trap of thinking this feature solves more "
"problems than it actually does."
msgstr ""

#: ../../../filesystems/fsverity.rst:464
msgid "Enabling this option adds the following:"
msgstr ""

#: ../../../filesystems/fsverity.rst:466
msgid ""
"At boot time, the kernel creates a keyring named \".fs-verity\".  The root "
"user can add trusted X.509 certificates to this keyring using the add_key() "
"system call."
msgstr ""

#: ../../../filesystems/fsverity.rst:470
msgid ""
"`FS_IOC_ENABLE_VERITY`_ accepts a pointer to a PKCS#7 formatted detached "
"signature in DER format of the file's fs-verity digest. On success, the "
"ioctl persists the signature alongside the Merkle tree.  Then, any time the "
"file is opened, the kernel verifies the file's actual digest against this "
"signature, using the certificates in the \".fs-verity\" keyring. This "
"verification happens as long as the file's signature exists, regardless of "
"the state of the sysctl variable \"fs.verity.require_signatures\" described "
"in the next item. The IPE LSM relies on this behavior to recognize and label "
"fsverity files that contain a verified built-in fsverity signature."
msgstr ""

#: ../../../filesystems/fsverity.rst:481
msgid ""
"A new sysctl \"fs.verity.require_signatures\" is made available. When set to "
"1, the kernel requires that all verity files have a correctly signed digest "
"as described in (2)."
msgstr ""

#: ../../../filesystems/fsverity.rst:485
msgid ""
"The data that the signature as described in (2) must be a signature of is "
"the fs-verity file digest in the following format::"
msgstr ""

#: ../../../filesystems/fsverity.rst:495
msgid ""
"That's it.  It should be emphasized again that fs-verity builtin signatures "
"are not the only way to do signatures with fs-verity.  See `Use cases`_ for "
"an overview of ways in which fs-verity can be used. fs-verity builtin "
"signatures have some major limitations that should be carefully considered "
"before using them:"
msgstr ""

#: ../../../filesystems/fsverity.rst:501
msgid ""
"Builtin signature verification does *not* make the kernel enforce that any "
"files actually have fs-verity enabled.  Thus, it is not a complete "
"authentication policy.  Currently, if it is used, one way to complete the "
"authentication policy is for trusted userspace code to explicitly check "
"whether files have fs-verity enabled with a signature before they are "
"accessed.  (With fs.verity.require_signatures=1, just checking whether fs-"
"verity is enabled suffices.)  But, in this case the trusted userspace code "
"could just store the signature alongside the file and verify it itself using "
"a cryptographic library, instead of using this feature."
msgstr ""

#: ../../../filesystems/fsverity.rst:512
msgid ""
"Another approach is to utilize fs-verity builtin signature verification in "
"conjunction with the IPE LSM, which supports defining a kernel-enforced, "
"system-wide authentication policy that allows only files with a verified fs-"
"verity builtin signature to perform certain operations, such as execution. "
"Note that IPE doesn't require fs.verity.require_signatures=1. Please refer "
"to :doc:`IPE admin guide </admin-guide/LSM/ipe>` for more details."
msgstr ""

#: ../../../filesystems/fsverity.rst:521
msgid ""
"A file's builtin signature can only be set at the same time that fs-verity "
"is being enabled on the file.  Changing or deleting the builtin signature "
"later requires re-creating the file."
msgstr ""

#: ../../../filesystems/fsverity.rst:525
msgid ""
"Builtin signature verification uses the same set of public keys for all fs-"
"verity enabled files on the system.  Different keys cannot be trusted for "
"different files; each key is all or nothing."
msgstr ""

#: ../../../filesystems/fsverity.rst:529
msgid ""
"The sysctl fs.verity.require_signatures applies system-wide. Setting it to 1 "
"only works when all users of fs-verity on the system agree that it should be "
"set to 1.  This limitation can prevent fs-verity from being used in cases "
"where it would be helpful."
msgstr ""

#: ../../../filesystems/fsverity.rst:534
msgid ""
"Builtin signature verification can only use signature algorithms that are "
"supported by the kernel.  For example, the kernel does not yet support "
"Ed25519, even though this is often the signature algorithm that is "
"recommended for new cryptographic designs."
msgstr ""

#: ../../../filesystems/fsverity.rst:539
msgid ""
"fs-verity builtin signatures are in PKCS#7 format, and the public keys are "
"in X.509 format.  These formats are commonly used, including by some other "
"kernel features (which is why the fs-verity builtin signatures use them), "
"and are very feature rich. Unfortunately, history has shown that code that "
"parses and handles these formats (which are from the 1990s and are based on "
"ASN.1) often has vulnerabilities as a result of their complexity.  This "
"complexity is not inherent to the cryptography itself."
msgstr ""

#: ../../../filesystems/fsverity.rst:548
msgid ""
"fs-verity users who do not need advanced features of X.509 and PKCS#7 should "
"strongly consider using simpler formats, such as plain Ed25519 keys and "
"signatures, and verifying signatures in userspace."
msgstr ""

#: ../../../filesystems/fsverity.rst:552
msgid ""
"fs-verity users who choose to use X.509 and PKCS#7 anyway should still "
"consider that verifying those signatures in userspace is more flexible (for "
"other reasons mentioned earlier in this document) and eliminates the need to "
"enable CONFIG_FS_VERITY_BUILTIN_SIGNATURES and its associated increase in "
"kernel attack surface.  In some cases it can even be necessary, since "
"advanced X.509 and PKCS#7 features do not always work as intended with the "
"kernel.  For example, the kernel does not check X.509 certificate validity "
"times."
msgstr ""

#: ../../../filesystems/fsverity.rst:561
msgid ""
"Note: IMA appraisal, which supports fs-verity, does not use PKCS#7 for its "
"signatures, so it partially avoids the issues discussed here.  IMA appraisal "
"does use X.509."
msgstr ""

#: ../../../filesystems/fsverity.rst:566
msgid "Filesystem support"
msgstr ""

#: ../../../filesystems/fsverity.rst:568
msgid ""
"fs-verity is supported by several filesystems, described below.  The "
"CONFIG_FS_VERITY kconfig option must be enabled to use fs-verity on any of "
"these filesystems."
msgstr ""

#: ../../../filesystems/fsverity.rst:572
msgid ""
"``include/linux/fsverity.h`` declares the interface between the ``fs/verity/"
"`` support layer and filesystems.  Briefly, filesystems must provide an "
"``fsverity_operations`` structure that provides methods to read and write "
"the verity metadata to a filesystem-specific location, including the Merkle "
"tree blocks and ``fsverity_descriptor``.  Filesystems must also call "
"functions in ``fs/verity/`` at certain times, such as when a file is opened "
"or when pages have been read into the pagecache.  (See `Verifying data`_.)"
msgstr ""

#: ../../../filesystems/fsverity.rst:582
msgid "ext4"
msgstr ""

#: ../../../filesystems/fsverity.rst:584
msgid "ext4 supports fs-verity since Linux v5.4 and e2fsprogs v1.45.2."
msgstr ""

#: ../../../filesystems/fsverity.rst:586
msgid ""
"To create verity files on an ext4 filesystem, the filesystem must have been "
"formatted with ``-O verity`` or had ``tune2fs -O verity`` run on it.  "
"\"verity\" is an RO_COMPAT filesystem feature, so once set, old kernels will "
"only be able to mount the filesystem readonly, and old versions of e2fsck "
"will be unable to check the filesystem."
msgstr ""

#: ../../../filesystems/fsverity.rst:592
msgid ""
"Originally, an ext4 filesystem with the \"verity\" feature could only be "
"mounted when its block size was equal to the system page size (typically "
"4096 bytes).  In Linux v6.3, this limitation was removed."
msgstr ""

#: ../../../filesystems/fsverity.rst:596
msgid ""
"ext4 sets the EXT4_VERITY_FL on-disk inode flag on verity files.  It can "
"only be set by `FS_IOC_ENABLE_VERITY`_, and it cannot be cleared."
msgstr ""

#: ../../../filesystems/fsverity.rst:599
msgid ""
"ext4 also supports encryption, which can be used simultaneously with fs-"
"verity.  In this case, the plaintext data is verified rather than the "
"ciphertext.  This is necessary in order to make the fs-verity file digest "
"meaningful, since every file is encrypted differently."
msgstr ""

#: ../../../filesystems/fsverity.rst:604
msgid ""
"ext4 stores the verity metadata (Merkle tree and fsverity_descriptor) past "
"the end of the file, starting at the first 64K boundary beyond i_size.  This "
"approach works because (a) verity files are readonly, and (b) pages fully "
"beyond i_size aren't visible to userspace but can be read/written internally "
"by ext4 with only some relatively small changes to ext4.  This approach "
"avoids having to depend on the EA_INODE feature and on rearchitecturing "
"ext4's xattr support to support paging multi-gigabyte xattrs into memory, "
"and to support encrypting xattrs.  Note that the verity metadata *must* be "
"encrypted when the file is, since it contains hashes of the plaintext data."
msgstr ""

#: ../../../filesystems/fsverity.rst:615
msgid "ext4 only allows verity on extent-based files."
msgstr ""

#: ../../../filesystems/fsverity.rst:618
msgid "f2fs"
msgstr ""

#: ../../../filesystems/fsverity.rst:620
msgid "f2fs supports fs-verity since Linux v5.4 and f2fs-tools v1.11.0."
msgstr ""

#: ../../../filesystems/fsverity.rst:622
msgid ""
"To create verity files on an f2fs filesystem, the filesystem must have been "
"formatted with ``-O verity``."
msgstr ""

#: ../../../filesystems/fsverity.rst:625
msgid ""
"f2fs sets the FADVISE_VERITY_BIT on-disk inode flag on verity files. It can "
"only be set by `FS_IOC_ENABLE_VERITY`_, and it cannot be cleared."
msgstr ""

#: ../../../filesystems/fsverity.rst:629
msgid ""
"Like ext4, f2fs stores the verity metadata (Merkle tree and "
"fsverity_descriptor) past the end of the file, starting at the first 64K "
"boundary beyond i_size.  See explanation for ext4 above. Moreover, f2fs "
"supports at most 4096 bytes of xattr entries per inode which usually "
"wouldn't be enough for even a single Merkle tree block."
msgstr ""

#: ../../../filesystems/fsverity.rst:635
msgid ""
"f2fs doesn't support enabling verity on files that currently have atomic or "
"volatile writes pending."
msgstr ""

#: ../../../filesystems/fsverity.rst:639
msgid "btrfs"
msgstr ""

#: ../../../filesystems/fsverity.rst:641
msgid ""
"btrfs supports fs-verity since Linux v5.15.  Verity-enabled inodes are "
"marked with a RO_COMPAT inode flag, and the verity metadata is stored in "
"separate btree items."
msgstr ""

#: ../../../filesystems/fsverity.rst:646
msgid "Implementation details"
msgstr ""

#: ../../../filesystems/fsverity.rst:649
msgid "Verifying data"
msgstr ""

#: ../../../filesystems/fsverity.rst:651
msgid ""
"fs-verity ensures that all reads of a verity file's data are verified, "
"regardless of which syscall is used to do the read (e.g. mmap(), read(), "
"pread()) and regardless of whether it's the first read or a later read "
"(unless the later read can return cached data that was already verified).  "
"Below, we describe how filesystems implement this."
msgstr ""

#: ../../../filesystems/fsverity.rst:658
msgid "Pagecache"
msgstr ""

#: ../../../filesystems/fsverity.rst:660
msgid ""
"For filesystems using Linux's pagecache, the ``->read_folio()`` and ``-"
">readahead()`` methods must be modified to verify folios before they are "
"marked Uptodate.  Merely hooking ``->read_iter()`` would be insufficient, "
"since ``->read_iter()`` is not used for memory maps."
msgstr ""

#: ../../../filesystems/fsverity.rst:665
msgid ""
"Therefore, fs/verity/ provides the function fsverity_verify_blocks() which "
"verifies data that has been read into the pagecache of a verity inode.  The "
"containing folio must still be locked and not Uptodate, so it's not yet "
"readable by userspace.  As needed to do the verification, "
"fsverity_verify_blocks() will call back into the filesystem to read hash "
"blocks via fsverity_operations::read_merkle_tree_page()."
msgstr ""

#: ../../../filesystems/fsverity.rst:672
msgid ""
"fsverity_verify_blocks() returns false if verification failed; in this case, "
"the filesystem must not set the folio Uptodate.  Following this, as per the "
"usual Linux pagecache behavior, attempts by userspace to read() from the "
"part of the file containing the folio will fail with EIO, and accesses to "
"the folio within a memory map will raise SIGBUS."
msgstr ""

#: ../../../filesystems/fsverity.rst:678
msgid ""
"In principle, verifying a data block requires verifying the entire path in "
"the Merkle tree from the data block to the root hash. However, for "
"efficiency the filesystem may cache the hash blocks. Therefore, "
"fsverity_verify_blocks() only ascends the tree reading hash blocks until an "
"already-verified hash block is seen.  It then verifies the path to that "
"block."
msgstr ""

#: ../../../filesystems/fsverity.rst:685
msgid ""
"This optimization, which is also used by dm-verity, results in excellent "
"sequential read performance.  This is because usually (e.g. 127 in 128 times "
"for 4K blocks and SHA-256) the hash block from the bottom level of the tree "
"will already be cached and checked from reading a previous data block.  "
"However, random reads perform worse."
msgstr ""

#: ../../../filesystems/fsverity.rst:692
msgid "Block device based filesystems"
msgstr ""

#: ../../../filesystems/fsverity.rst:694
msgid ""
"Block device based filesystems (e.g. ext4 and f2fs) in Linux also use the "
"pagecache, so the above subsection applies too.  However, they also usually "
"read many data blocks from a file at once, grouped into a structure called a "
"\"bio\".  To make it easier for these types of filesystems to support fs-"
"verity, fs/verity/ also provides a function fsverity_verify_bio() which "
"verifies all data blocks in a bio."
msgstr ""

#: ../../../filesystems/fsverity.rst:701
msgid ""
"ext4 and f2fs also support encryption.  If a verity file is also encrypted, "
"the data must be decrypted before being verified.  To support this, these "
"filesystems allocate a \"post-read context\" for each bio and store it in ``-"
">bi_private``::"
msgstr ""

#: ../../../filesystems/fsverity.rst:713
msgid ""
"``enabled_steps`` is a bitmask that specifies whether decryption, verity, or "
"both is enabled.  After the bio completes, for each needed postprocessing "
"step the filesystem enqueues the bio_post_read_ctx on a workqueue, and then "
"the workqueue work does the decryption or verification.  Finally, folios "
"where no decryption or verity error occurred are marked Uptodate, and the "
"folios are unlocked."
msgstr ""

#: ../../../filesystems/fsverity.rst:720
msgid ""
"On many filesystems, files can contain holes.  Normally, ``->readahead()`` "
"simply zeroes hole blocks and considers the corresponding data to be up-to-"
"date; no bios are issued.  To prevent this case from bypassing fs-verity, "
"filesystems use fsverity_verify_blocks() to verify hole blocks."
msgstr ""

#: ../../../filesystems/fsverity.rst:726
msgid ""
"Filesystems also disable direct I/O on verity files, since otherwise direct "
"I/O would bypass fs-verity."
msgstr ""

#: ../../../filesystems/fsverity.rst:730
msgid "Userspace utility"
msgstr ""

#: ../../../filesystems/fsverity.rst:732
msgid ""
"This document focuses on the kernel, but a userspace utility for fs-verity "
"can be found at:"
msgstr ""

#: ../../../filesystems/fsverity.rst:735
msgid "https://git.kernel.org/pub/scm/fs/fsverity/fsverity-utils.git"
msgstr ""

#: ../../../filesystems/fsverity.rst:737
msgid ""
"See the README.md file in the fsverity-utils source tree for details, "
"including examples of setting up fs-verity protected files."
msgstr ""

#: ../../../filesystems/fsverity.rst:741
msgid "Tests"
msgstr ""

#: ../../../filesystems/fsverity.rst:743
msgid ""
"To test fs-verity, use xfstests.  For example, using `kvm-xfstests <https://"
"github.com/tytso/xfstests-bld/blob/master/Documentation/kvm-quickstart."
"md>`_::"
msgstr ""

#: ../../../filesystems/fsverity.rst:749
msgid "FAQ"
msgstr ""

#: ../../../filesystems/fsverity.rst:751
msgid ""
"This section answers frequently asked questions about fs-verity that weren't "
"already directly answered in other parts of this document."
msgstr ""

#: ../../../filesystems/fsverity.rst:0
msgid "Q"
msgstr ""

#: ../../../filesystems/fsverity.rst:754
msgid "Why isn't fs-verity part of IMA?"
msgstr ""

#: ../../../filesystems/fsverity.rst:0
msgid "A"
msgstr ""

#: ../../../filesystems/fsverity.rst:755
msgid ""
"fs-verity and IMA (Integrity Measurement Architecture) have different "
"focuses.  fs-verity is a filesystem-level mechanism for hashing individual "
"files using a Merkle tree.  In contrast, IMA specifies a system-wide policy "
"that specifies which files are hashed and what to do with those hashes, such "
"as log them, authenticate them, or add them to a measurement list."
msgstr ""

#: ../../../filesystems/fsverity.rst:762
msgid ""
"IMA supports the fs-verity hashing mechanism as an alternative to full file "
"hashes, for those who want the performance and security benefits of the "
"Merkle tree based hash.  However, it doesn't make sense to force all uses of "
"fs-verity to be through IMA.  fs-verity already meets many users' needs even "
"as a standalone filesystem feature, and it's testable like other filesystem "
"features e.g. with xfstests."
msgstr ""

#: ../../../filesystems/fsverity.rst:770
msgid ""
"Isn't fs-verity useless because the attacker can just modify the hashes in "
"the Merkle tree, which is stored on-disk?"
msgstr ""

#: ../../../filesystems/fsverity.rst:772
msgid ""
"To verify the authenticity of an fs-verity file you must verify the "
"authenticity of the \"fs-verity file digest\", which incorporates the root "
"hash of the Merkle tree.  See `Use cases`_."
msgstr ""

#: ../../../filesystems/fsverity.rst:776
msgid ""
"Isn't fs-verity useless because the attacker can just replace a verity file "
"with a non-verity one?"
msgstr ""

#: ../../../filesystems/fsverity.rst:778
msgid ""
"See `Use cases`_.  In the initial use case, it's really trusted userspace "
"code that authenticates the files; fs-verity is just a tool to do this job "
"efficiently and securely.  The trusted userspace code will consider non-"
"verity files to be inauthentic."
msgstr ""

#: ../../../filesystems/fsverity.rst:783
msgid ""
"Why does the Merkle tree need to be stored on-disk?  Couldn't you store just "
"the root hash?"
msgstr ""

#: ../../../filesystems/fsverity.rst:785
msgid ""
"If the Merkle tree wasn't stored on-disk, then you'd have to compute the "
"entire tree when the file is first accessed, even if just one byte is being "
"read.  This is a fundamental consequence of how Merkle tree hashing works.  "
"To verify a leaf node, you need to verify the whole path to the root hash, "
"including the root node (the thing which the root hash is a hash of).  But "
"if the root node isn't stored on-disk, you have to compute it by hashing its "
"children, and so on until you've actually hashed the entire file."
msgstr ""

#: ../../../filesystems/fsverity.rst:794
msgid ""
"That defeats most of the point of doing a Merkle tree-based hash, since if "
"you have to hash the whole file ahead of time anyway, then you could simply "
"do sha256(file) instead.  That would be much simpler, and a bit faster too."
msgstr ""

#: ../../../filesystems/fsverity.rst:799
msgid ""
"It's true that an in-memory Merkle tree could still provide the advantage of "
"verification on every read rather than just on the first read.  However, it "
"would be inefficient because every time a hash page gets evicted (you can't "
"pin the entire Merkle tree into memory, since it may be very large), in "
"order to restore it you again need to hash everything below it in the tree.  "
"This again defeats most of the point of doing a Merkle tree-based hash, "
"since a single block read could trigger re-hashing gigabytes of data."
msgstr ""

#: ../../../filesystems/fsverity.rst:808
msgid "But couldn't you store just the leaf nodes and compute the rest?"
msgstr ""

#: ../../../filesystems/fsverity.rst:809
msgid ""
"See previous answer; this really just moves up one level, since one could "
"alternatively interpret the data blocks as being the leaf nodes of the "
"Merkle tree.  It's true that the tree can be computed much faster if the "
"leaf level is stored rather than just the data, but that's only because each "
"level is less than 1% the size of the level below (assuming the recommended "
"settings of SHA-256 and 4K blocks).  For the exact same reason, by storing "
"\"just the leaf nodes\" you'd already be storing over 99% of the tree, so "
"you might as well simply store the whole tree."
msgstr ""

#: ../../../filesystems/fsverity.rst:819
msgid ""
"Can the Merkle tree be built ahead of time, e.g. distributed as part of a "
"package that is installed to many computers?"
msgstr ""

#: ../../../filesystems/fsverity.rst:821
msgid ""
"This isn't currently supported.  It was part of the original design, but was "
"removed to simplify the kernel UAPI and because it wasn't a critical use "
"case.  Files are usually installed once and used many times, and "
"cryptographic hashing is somewhat fast on most modern processors."
msgstr ""

#: ../../../filesystems/fsverity.rst:827
msgid "Why doesn't fs-verity support writes?"
msgstr ""

#: ../../../filesystems/fsverity.rst:828
msgid ""
"Write support would be very difficult and would require a completely "
"different design, so it's well outside the scope of fs-verity.  Write "
"support would require:"
msgstr ""

#: ../../../filesystems/fsverity.rst:832
msgid ""
"A way to maintain consistency between the data and hashes, including all "
"levels of hashes, since corruption after a crash (especially of potentially "
"the entire file!) is unacceptable. The main options for solving this are "
"data journalling, copy-on-write, and log-structured volume.  But it's very "
"hard to retrofit existing filesystems with new consistency mechanisms. Data "
"journalling is available on ext4, but is very slow."
msgstr ""

#: ../../../filesystems/fsverity.rst:840
msgid ""
"Rebuilding the Merkle tree after every write, which would be extremely "
"inefficient.  Alternatively, a different authenticated dictionary structure "
"such as an \"authenticated skiplist\" could be used.  However, this would be "
"far more complex."
msgstr ""

#: ../../../filesystems/fsverity.rst:845
msgid ""
"Compare it to dm-verity vs. dm-integrity.  dm-verity is very simple: the "
"kernel just verifies read-only data against a read-only Merkle tree.  In "
"contrast, dm-integrity supports writes but is slow, is much more complex, "
"and doesn't actually support full-device authentication since it "
"authenticates each sector independently, i.e. there is no \"root hash\".  It "
"doesn't really make sense for the same device-mapper target to support these "
"two very different cases; the same applies to fs-verity."
msgstr ""

#: ../../../filesystems/fsverity.rst:854
msgid "Since verity files are immutable, why isn't the immutable bit set?"
msgstr ""

#: ../../../filesystems/fsverity.rst:855
msgid ""
"The existing \"immutable\" bit (FS_IMMUTABLE_FL) already has a specific set "
"of semantics which not only make the file contents read-only, but also "
"prevent the file from being deleted, renamed, linked to, or having its owner "
"or mode changed.  These extra properties are unwanted for fs-verity, so "
"reusing the immutable bit isn't appropriate."
msgstr ""

#: ../../../filesystems/fsverity.rst:862
msgid "Why does the API use ioctls instead of setxattr() and getxattr()?"
msgstr ""

#: ../../../filesystems/fsverity.rst:863
msgid ""
"Abusing the xattr interface for basically arbitrary syscalls is heavily "
"frowned upon by most of the Linux filesystem developers. An xattr should "
"really just be an xattr on-disk, not an API to e.g. magically trigger "
"construction of a Merkle tree."
msgstr ""

#: ../../../filesystems/fsverity.rst:868
msgid "Does fs-verity support remote filesystems?"
msgstr ""

#: ../../../filesystems/fsverity.rst:869
msgid ""
"So far all filesystems that have implemented fs-verity support are local "
"filesystems, but in principle any filesystem that can store per-file verity "
"metadata can support fs-verity, regardless of whether it's local or remote.  "
"Some filesystems may have fewer options of where to store the verity "
"metadata; one possibility is to store it past the end of the file and "
"\"hide\" it from userspace by manipulating i_size.  The data verification "
"functions provided by ``fs/verity/`` also assume that the filesystem uses "
"the Linux pagecache, but both local and remote filesystems normally do so."
msgstr ""

#: ../../../filesystems/fsverity.rst:879
msgid ""
"Why is anything filesystem-specific at all?  Shouldn't fs-verity be "
"implemented entirely at the VFS level?"
msgstr ""

#: ../../../filesystems/fsverity.rst:881
msgid ""
"There are many reasons why this is not possible or would be very difficult, "
"including the following:"
msgstr ""

#: ../../../filesystems/fsverity.rst:884
msgid ""
"To prevent bypassing verification, folios must not be marked Uptodate until "
"they've been verified.  Currently, each filesystem is responsible for "
"marking folios Uptodate via ``->readahead()``.  Therefore, currently it's "
"not possible for the VFS to do the verification on its own.  Changing this "
"would require significant changes to the VFS and all filesystems."
msgstr ""

#: ../../../filesystems/fsverity.rst:891
msgid ""
"It would require defining a filesystem-independent way to store the verity "
"metadata.  Extended attributes don't work for this because (a) the Merkle "
"tree may be gigabytes, but many filesystems assume that all xattrs fit into "
"a single 4K filesystem block, and (b) ext4 and f2fs encryption doesn't "
"encrypt xattrs, yet the Merkle tree *must* be encrypted when the file "
"contents are, because it stores hashes of the plaintext file contents."
msgstr ""

#: ../../../filesystems/fsverity.rst:900
msgid ""
"So the verity metadata would have to be stored in an actual file.  Using a "
"separate file would be very ugly, since the metadata is fundamentally part "
"of the file to be protected, and it could cause problems where users could "
"delete the real file but not the metadata file or vice versa.  On the other "
"hand, having it be in the same file would break applications unless "
"filesystems' notion of i_size were divorced from the VFS's, which would be "
"complex and require changes to all filesystems."
msgstr ""

#: ../../../filesystems/fsverity.rst:909
msgid ""
"It's desirable that FS_IOC_ENABLE_VERITY uses the filesystem's transaction "
"mechanism so that either the file ends up with verity enabled, or no changes "
"were made.  Allowing intermediate states to occur after a crash may cause "
"problems."
msgstr ""
