# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../filesystems/sysfs.rst:5
msgid "sysfs - _The_ filesystem for exporting kernel objects"
msgstr ""

#: ../../../filesystems/sysfs.rst:7
msgid "Patrick Mochel  <mochel@osdl.org>"
msgstr ""

#: ../../../filesystems/sysfs.rst:9
msgid "Mike Murphy <mamurph@cs.clemson.edu>"
msgstr ""

#: ../../../filesystems/sysfs.rst:0
msgid "Revised"
msgstr ""

#: ../../../filesystems/sysfs.rst:11
msgid "16 August 2011"
msgstr ""

#: ../../../filesystems/sysfs.rst:0
msgid "Original"
msgstr ""

#: ../../../filesystems/sysfs.rst:12
msgid "10 January 2003"
msgstr ""

#: ../../../filesystems/sysfs.rst:16
msgid "What it is"
msgstr ""

#: ../../../filesystems/sysfs.rst:18
msgid ""
"sysfs is a RAM-based filesystem initially based on ramfs. It provides a "
"means to export kernel data structures, their attributes, and the linkages "
"between them to userspace."
msgstr ""

#: ../../../filesystems/sysfs.rst:22
msgid ""
"sysfs is tied inherently to the kobject infrastructure. Please read "
"Documentation/core-api/kobject.rst for more information concerning the "
"kobject interface."
msgstr ""

#: ../../../filesystems/sysfs.rst:28
msgid "Using sysfs"
msgstr ""

#: ../../../filesystems/sysfs.rst:30
msgid ""
"sysfs is always compiled in if CONFIG_SYSFS is defined. You can access it by "
"doing::"
msgstr ""

#: ../../../filesystems/sysfs.rst:37
msgid "Directory Creation"
msgstr ""

#: ../../../filesystems/sysfs.rst:39
msgid ""
"For every kobject that is registered with the system, a directory is created "
"for it in sysfs. That directory is created as a subdirectory of the "
"kobject's parent, expressing internal object hierarchies to userspace. Top-"
"level directories in sysfs represent the common ancestors of object "
"hierarchies; i.e. the subsystems the objects belong to."
msgstr ""

#: ../../../filesystems/sysfs.rst:46
msgid ""
"sysfs internally stores a pointer to the kobject that implements a directory "
"in the kernfs_node object associated with the directory. In the past this "
"kobject pointer has been used by sysfs to do reference counting directly on "
"the kobject whenever the file is opened or closed. With the current sysfs "
"implementation the kobject reference count is only modified directly by the "
"function sysfs_schedule_callback()."
msgstr ""

#: ../../../filesystems/sysfs.rst:55
msgid "Attributes"
msgstr ""

#: ../../../filesystems/sysfs.rst:57
msgid ""
"Attributes can be exported for kobjects in the form of regular files in the "
"filesystem. sysfs forwards file I/O operations to methods defined for the "
"attributes, providing a means to read and write kernel attributes."
msgstr ""

#: ../../../filesystems/sysfs.rst:62
msgid ""
"Attributes should be ASCII text files, preferably with only one value per "
"file. It is noted that it may not be efficient to contain only one value per "
"file, so it is socially acceptable to express an array of values of the same "
"type."
msgstr ""

#: ../../../filesystems/sysfs.rst:67
msgid ""
"Mixing types, expressing multiple lines of data, and doing fancy formatting "
"of data is heavily frowned upon. Doing these things may get you publicly "
"humiliated and your code rewritten without notice."
msgstr ""

#: ../../../filesystems/sysfs.rst:72
msgid "An attribute definition is simply::"
msgstr ""

#: ../../../filesystems/sysfs.rst:85
msgid ""
"A bare attribute contains no means to read or write the value of the "
"attribute. Subsystems are encouraged to define their own attribute structure "
"and wrapper functions for adding and removing attributes for a specific "
"object type."
msgstr ""

#: ../../../filesystems/sysfs.rst:90
msgid "For example, the driver model defines struct device_attribute like::"
msgstr ""

#: ../../../filesystems/sysfs.rst:103
msgid "It also defines this helper for defining device attributes::"
msgstr ""

#: ../../../filesystems/sysfs.rst:108
msgid "For example, declaring::"
msgstr ""

#: ../../../filesystems/sysfs.rst:112
msgid "is equivalent to doing::"
msgstr ""

#: ../../../filesystems/sysfs.rst:123
msgid ""
"Note as stated in include/linux/kernel.h \"OTHER_WRITABLE?  Generally "
"considered a bad idea.\" so trying to set a sysfs file writable for everyone "
"will fail reverting to RO mode for \"Others\"."
msgstr ""

#: ../../../filesystems/sysfs.rst:127
msgid ""
"For the common cases sysfs.h provides convenience macros to make defining "
"attributes easier as well as making code more concise and readable. The "
"above case could be shortened to:"
msgstr ""

#: ../../../filesystems/sysfs.rst:131
msgid "static struct device_attribute dev_attr_foo = __ATTR_RW(foo);"
msgstr ""

#: ../../../filesystems/sysfs.rst:133
msgid "the list of helpers available to define your wrapper function is:"
msgstr ""

#: ../../../filesystems/sysfs.rst:135
msgid "__ATTR_RO(name):"
msgstr ""

#: ../../../filesystems/sysfs.rst:136
msgid "assumes default name_show and mode 0444"
msgstr ""

#: ../../../filesystems/sysfs.rst:137
msgid "__ATTR_WO(name):"
msgstr ""

#: ../../../filesystems/sysfs.rst:138
msgid ""
"assumes a name_store only and is restricted to mode 0200 that is root write "
"access only."
msgstr ""

#: ../../../filesystems/sysfs.rst:140
msgid "__ATTR_RO_MODE(name, mode):"
msgstr ""

#: ../../../filesystems/sysfs.rst:141
msgid ""
"for more restrictive RO access; currently only use case is the EFI System "
"Resource Table (see drivers/firmware/efi/esrt.c)"
msgstr ""

#: ../../../filesystems/sysfs.rst:144
msgid "__ATTR_RW(name):"
msgstr ""

#: ../../../filesystems/sysfs.rst:145
msgid "assumes default name_show, name_store and setting mode to 0644."
msgstr ""

#: ../../../filesystems/sysfs.rst:147
msgid "__ATTR_NULL:"
msgstr ""

#: ../../../filesystems/sysfs.rst:148
msgid ""
"which sets the name to NULL and is used as end of list indicator (see: "
"kernel/workqueue.c)"
msgstr ""

#: ../../../filesystems/sysfs.rst:152
msgid "Subsystem-Specific Callbacks"
msgstr ""

#: ../../../filesystems/sysfs.rst:154
msgid ""
"When a subsystem defines a new attribute type, it must implement a set of "
"sysfs operations for forwarding read and write calls to the show and store "
"methods of the attribute owners::"
msgstr ""

#: ../../../filesystems/sysfs.rst:163
msgid ""
"[ Subsystems should have already defined a struct kobj_type as a descriptor "
"for this type, which is where the sysfs_ops pointer is stored. See the "
"kobject documentation for more information. ]"
msgstr ""

#: ../../../filesystems/sysfs.rst:167
msgid ""
"When a file is read or written, sysfs calls the appropriate method for the "
"type. The method then translates the generic struct kobject and struct "
"attribute pointers to the appropriate pointer types, and calls the "
"associated methods."
msgstr ""

#: ../../../filesystems/sysfs.rst:173
msgid "To illustrate::"
msgstr ""

#: ../../../filesystems/sysfs.rst:196
msgid "Reading/Writing Attribute Data"
msgstr ""

#: ../../../filesystems/sysfs.rst:198
msgid ""
"To read or write attributes, show() or store() methods must be specified "
"when declaring the attribute. The method types should be as simple as those "
"defined for device attributes::"
msgstr ""

#: ../../../filesystems/sysfs.rst:206
msgid ""
"IOW, they should take only an object, an attribute, and a buffer as "
"parameters."
msgstr ""

#: ../../../filesystems/sysfs.rst:209
msgid ""
"sysfs allocates a buffer of size (PAGE_SIZE) and passes it to the method. "
"sysfs will call the method exactly once for each read or write. This forces "
"the following behavior on the method implementations:"
msgstr ""

#: ../../../filesystems/sysfs.rst:214
msgid ""
"On read(2), the show() method should fill the entire buffer. Recall that an "
"attribute should only be exporting one value, or an array of similar values, "
"so this shouldn't be that expensive."
msgstr ""

#: ../../../filesystems/sysfs.rst:218
msgid ""
"This allows userspace to do partial reads and forward seeks arbitrarily over "
"the entire file at will. If userspace seeks back to zero or does a pread(2) "
"with an offset of '0' the show() method will be called again, rearmed, to "
"fill the buffer."
msgstr ""

#: ../../../filesystems/sysfs.rst:223
msgid ""
"On write(2), sysfs expects the entire buffer to be passed during the first "
"write. sysfs then passes the entire buffer to the store() method. A "
"terminating null is added after the data on stores. This makes functions "
"like sysfs_streq() safe to use."
msgstr ""

#: ../../../filesystems/sysfs.rst:228
msgid ""
"When writing sysfs files, userspace processes should first read the entire "
"file, modify the values it wishes to change, then write the entire buffer "
"back."
msgstr ""

#: ../../../filesystems/sysfs.rst:232
msgid ""
"Attribute method implementations should operate on an identical buffer when "
"reading and writing values."
msgstr ""

#: ../../../filesystems/sysfs.rst:235
msgid "Other notes:"
msgstr ""

#: ../../../filesystems/sysfs.rst:237
msgid ""
"Writing causes the show() method to be rearmed regardless of current file "
"position."
msgstr ""

#: ../../../filesystems/sysfs.rst:240
msgid ""
"The buffer will always be PAGE_SIZE bytes in length. On x86, this is 4096."
msgstr ""

#: ../../../filesystems/sysfs.rst:243
msgid ""
"show() methods should return the number of bytes printed into the buffer."
msgstr ""

#: ../../../filesystems/sysfs.rst:246
msgid ""
"show() should only use sysfs_emit() or sysfs_emit_at() when formatting the "
"value to be returned to user space."
msgstr ""

#: ../../../filesystems/sysfs.rst:249
msgid ""
"store() should return the number of bytes used from the buffer. If the "
"entire buffer has been used, just return the count argument."
msgstr ""

#: ../../../filesystems/sysfs.rst:252
msgid ""
"show() or store() can always return errors. If a bad value comes through, be "
"sure to return an error."
msgstr ""

#: ../../../filesystems/sysfs.rst:255
msgid ""
"The object passed to the methods will be pinned in memory via sysfs "
"reference counting its embedded object. However, the physical entity (e.g. "
"device) the object represents may not be present. Be sure to have a way to "
"check this, if necessary."
msgstr ""

#: ../../../filesystems/sysfs.rst:261
msgid "A very simple (and naive) implementation of a device attribute is::"
msgstr ""

#: ../../../filesystems/sysfs.rst:280
msgid ""
"(Note that the real implementation doesn't allow userspace to set the name "
"for a device.)"
msgstr ""

#: ../../../filesystems/sysfs.rst:285
msgid "Top Level Directory Layout"
msgstr ""

#: ../../../filesystems/sysfs.rst:287
msgid ""
"The sysfs directory arrangement exposes the relationship of kernel data "
"structures."
msgstr ""

#: ../../../filesystems/sysfs.rst:290
msgid "The top level sysfs directory looks like::"
msgstr ""

#: ../../../filesystems/sysfs.rst:305
msgid ""
"devices/ contains a filesystem representation of the device tree. It maps "
"directly to the internal kernel device tree, which is a hierarchy of struct "
"device."
msgstr ""

#: ../../../filesystems/sysfs.rst:309
msgid ""
"bus/ contains flat directory layout of the various bus types in the kernel. "
"Each bus's directory contains two subdirectories::"
msgstr ""

#: ../../../filesystems/sysfs.rst:315
msgid ""
"devices/ contains symlinks for each device discovered in the system that "
"point to the device's directory under root/."
msgstr ""

#: ../../../filesystems/sysfs.rst:318
msgid ""
"drivers/ contains a directory for each device driver that is loaded for "
"devices on that particular bus (this assumes that drivers do not span "
"multiple bus types)."
msgstr ""

#: ../../../filesystems/sysfs.rst:322
msgid ""
"fs/ contains a directory for some filesystems.  Currently each filesystem "
"wanting to export attributes must create its own hierarchy below fs/ (see ./"
"fuse.rst for an example)."
msgstr ""

#: ../../../filesystems/sysfs.rst:326
msgid ""
"module/ contains parameter values and state information for all loaded "
"system modules, for both builtin and loadable modules."
msgstr ""

#: ../../../filesystems/sysfs.rst:329
msgid ""
"dev/ contains two directories: char/ and block/. Inside these two "
"directories there are symlinks named <major>:<minor>.  These symlinks point "
"to the sysfs directory for the given device.  /sys/dev provides a quick way "
"to lookup the sysfs interface for a device from the result of a stat(2) "
"operation."
msgstr ""

#: ../../../filesystems/sysfs.rst:335
msgid ""
"More information on driver-model specific features can be found in "
"Documentation/driver-api/driver-model/."
msgstr ""

#: ../../../filesystems/sysfs.rst:339
msgid "TODO: Finish this section."
msgstr ""

#: ../../../filesystems/sysfs.rst:343
msgid "Current Interfaces"
msgstr ""

#: ../../../filesystems/sysfs.rst:345
msgid "The following interface layers currently exist in sysfs."
msgstr ""

#: ../../../filesystems/sysfs.rst:349
msgid "devices (include/linux/device.h)"
msgstr ""

#: ../../../filesystems/sysfs.rst:350 ../../../filesystems/sysfs.rst:372
#: ../../../filesystems/sysfs.rst:395
msgid "Structure::"
msgstr ""

#: ../../../filesystems/sysfs.rst:360 ../../../filesystems/sysfs.rst:380
#: ../../../filesystems/sysfs.rst:404
msgid "Declaring::"
msgstr ""

#: ../../../filesystems/sysfs.rst:364 ../../../filesystems/sysfs.rst:386
#: ../../../filesystems/sysfs.rst:409
msgid "Creation/Removal::"
msgstr ""

#: ../../../filesystems/sysfs.rst:371
msgid "bus drivers (include/linux/device.h)"
msgstr ""

#: ../../../filesystems/sysfs.rst:393
msgid "device drivers (include/linux/device.h)"
msgstr ""

#: ../../../filesystems/sysfs.rst:416
msgid "Documentation"
msgstr ""

#: ../../../filesystems/sysfs.rst:418
msgid ""
"The sysfs directory structure and the attributes in each directory define an "
"ABI between the kernel and user space. As for any ABI, it is important that "
"this ABI is stable and properly documented. All new sysfs attributes must be "
"documented in Documentation/ABI. See also Documentation/ABI/README for more "
"information."
msgstr ""
