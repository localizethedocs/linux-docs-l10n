# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../admin-guide/ramoops.rst:2
msgid "Ramoops oops/panic logger"
msgstr ""

#: ../../../admin-guide/ramoops.rst:4
msgid "Sergiu Iordache <sergiu@chromium.org>"
msgstr ""

#: ../../../admin-guide/ramoops.rst:6
msgid "Updated: 10 Feb 2021"
msgstr ""

#: ../../../admin-guide/ramoops.rst:9
msgid "Introduction"
msgstr ""

#: ../../../admin-guide/ramoops.rst:11
msgid ""
"Ramoops is an oops/panic logger that writes its logs to RAM before the "
"system crashes. It works by logging oopses and panics in a circular buffer. "
"Ramoops needs a system with persistent RAM so that the content of that area "
"can survive after a restart."
msgstr ""

#: ../../../admin-guide/ramoops.rst:17
msgid "Ramoops concepts"
msgstr ""

#: ../../../admin-guide/ramoops.rst:19
msgid ""
"Ramoops uses a predefined memory area to store the dump. The start and size "
"and type of the memory area are set using three variables:"
msgstr ""

#: ../../../admin-guide/ramoops.rst:22
msgid "``mem_address`` for the start"
msgstr ""

#: ../../../admin-guide/ramoops.rst:23
msgid ""
"``mem_size`` for the size. The memory size will be rounded down to a power "
"of two."
msgstr ""

#: ../../../admin-guide/ramoops.rst:25
msgid ""
"``mem_type`` to specify if the memory type (default is pgprot_writecombine)."
msgstr ""

#: ../../../admin-guide/ramoops.rst:26
msgid ""
"``mem_name`` to specify a memory region defined by ``reserve_mem`` command "
"line parameter."
msgstr ""

#: ../../../admin-guide/ramoops.rst:29
msgid ""
"Typically the default value of ``mem_type=0`` should be used as that sets "
"the pstore mapping to pgprot_writecombine. Setting ``mem_type=1`` attempts "
"to use ``pgprot_noncached``, which only works on some platforms. This is "
"because pstore depends on atomic operations. At least on ARM, "
"pgprot_noncached causes the memory to be mapped strongly ordered, and atomic "
"operations on strongly ordered memory are implementation defined, and won't "
"work on many ARMs such as omaps. Setting ``mem_type=2`` attempts to treat "
"the memory region as normal memory, which enables full cache on it. This can "
"improve the performance."
msgstr ""

#: ../../../admin-guide/ramoops.rst:38
msgid ""
"The memory area is divided into ``record_size`` chunks (also rounded down to "
"power of two) and each kmesg dump writes a ``record_size`` chunk of "
"information."
msgstr ""

#: ../../../admin-guide/ramoops.rst:42
msgid ""
"Limiting which kinds of kmsg dumps are stored can be controlled via the "
"``max_reason`` value, as defined in include/linux/kmsg_dump.h's ``enum "
"kmsg_dump_reason``. For example, to store both Oopses and Panics, "
"``max_reason`` should be set to 2 (KMSG_DUMP_OOPS), to store only Panics "
"``max_reason`` should be set to 1 (KMSG_DUMP_PANIC). Setting this to 0 "
"(KMSG_DUMP_UNDEF), means the reason filtering will be controlled by the "
"``printk.always_kmsg_dump`` boot param: if unset, it'll be KMSG_DUMP_OOPS, "
"otherwise KMSG_DUMP_MAX."
msgstr ""

#: ../../../admin-guide/ramoops.rst:51
msgid ""
"The module uses a counter to record multiple dumps but the counter gets "
"reset on restart (i.e. new dumps after the restart will overwrite old ones)."
msgstr ""

#: ../../../admin-guide/ramoops.rst:54
msgid ""
"Ramoops also supports software ECC protection of persistent memory regions. "
"This might be useful when a hardware reset was used to bring the machine "
"back to life (i.e. a watchdog triggered). In such cases, RAM may be somewhat "
"corrupt, but usually it is restorable."
msgstr ""

#: ../../../admin-guide/ramoops.rst:60
msgid "Setting the parameters"
msgstr ""

#: ../../../admin-guide/ramoops.rst:62
msgid ""
"Setting the ramoops parameters can be done in several different manners:"
msgstr ""

#: ../../../admin-guide/ramoops.rst:64
msgid ""
"A. Use the module parameters (which have the names of the variables "
"described as before). For quick debugging, you can also reserve parts of "
"memory during boot and then use the reserved memory for ramoops. For "
"example, assuming a machine with > 128 MB of memory, the following kernel "
"command line will tell the kernel to use only the first 128 MB of memory, "
"and place ECC-protected ramoops region at 128 MB boundary::"
msgstr ""

#: ../../../admin-guide/ramoops.rst:73
msgid ""
"B. Use Device Tree bindings, as described in ``Documentation/devicetree/"
"bindings/reserved-memory/ramoops.yaml``. For example::"
msgstr ""

#: ../../../admin-guide/ramoops.rst:90
msgid ""
"C. Use a platform device and set the platform data. The parameters can then "
"be set through that platform data. An example of doing that is:"
msgstr ""

#: ../../../admin-guide/ramoops.rst:123
msgid ""
"Using a region of memory reserved via ``reserve_mem`` command line "
"parameter. The address and size will be defined by the ``reserve_mem`` "
"parameter. Note, that ``reserve_mem`` may not always allocate memory in the "
"same location, and cannot be relied upon. Testing will need to be done, and "
"it may not work on every machine, nor every kernel. Consider this a \"best "
"effort\" approach. The ``reserve_mem`` option takes a size, alignment and "
"name as arguments. The name is used to map the memory to a label that can be "
"retrieved by ramoops."
msgstr ""

#: ../../../admin-guide/ramoops.rst:132
msgid "reserve_mem=2M:4096:oops  ramoops.mem_name=oops"
msgstr ""

#: ../../../admin-guide/ramoops.rst:134
msgid ""
"You can specify either RAM memory or peripheral devices' memory. However, "
"when specifying RAM, be sure to reserve the memory by issuing "
"memblock_reserve() very early in the architecture code, e.g.::"
msgstr ""

#: ../../../admin-guide/ramoops.rst:143
msgid "Dump format"
msgstr ""

#: ../../../admin-guide/ramoops.rst:145
msgid ""
"The data dump begins with a header, currently defined as ``====`` followed "
"by a timestamp and a new line. The dump then continues with the actual data."
msgstr ""

#: ../../../admin-guide/ramoops.rst:149
msgid "Reading the data"
msgstr ""

#: ../../../admin-guide/ramoops.rst:151
msgid ""
"The dump data can be read from the pstore filesystem. The format for these "
"files is ``dmesg-ramoops-N``, where N is the record number in memory. To "
"delete a stored record from RAM, simply unlink the respective pstore file."
msgstr ""

#: ../../../admin-guide/ramoops.rst:156
msgid "Persistent function tracing"
msgstr ""

#: ../../../admin-guide/ramoops.rst:158
msgid ""
"Persistent function tracing might be useful for debugging software or "
"hardware related hangs. The functions call chain log is stored in a ``ftrace-"
"ramoops`` file. Here is an example of usage::"
msgstr ""
