# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../usb/gadget_hid.rst:3
msgid "Linux USB HID gadget driver"
msgstr ""

#: ../../../usb/gadget_hid.rst:6
msgid "Introduction"
msgstr ""

#: ../../../usb/gadget_hid.rst:8
msgid ""
"The HID Gadget driver provides emulation of USB Human Interface Devices "
"(HID). The basic HID handling is done in the kernel, and HID reports can be "
"sent/received through I/O on the /dev/hidgX character devices."
msgstr ""

#: ../../../usb/gadget_hid.rst:13
msgid ""
"For more details about HID, see the developer page on https://www.usb.org/"
"developers/hidpage/"
msgstr ""

#: ../../../usb/gadget_hid.rst:17
msgid "Configuration"
msgstr ""

#: ../../../usb/gadget_hid.rst:19
msgid ""
"g_hid is a platform driver, so to use it you need to add struct "
"platform_device(s) to your platform code defining the HID function "
"descriptors you want to use - E.G. something like::"
msgstr ""

#: ../../../usb/gadget_hid.rst:77
msgid ""
"You can add as many HID functions as you want, only limited by the amount of "
"interrupt endpoints your gadget driver supports."
msgstr ""

#: ../../../usb/gadget_hid.rst:81
msgid "Configuration with configfs"
msgstr ""

#: ../../../usb/gadget_hid.rst:83
msgid ""
"Instead of adding fake platform devices and drivers in order to pass some "
"data to the kernel, if HID is a part of a gadget composed with configfs the "
"hidg_func_descriptor.report_desc is passed to the kernel by writing the "
"appropriate stream of bytes to a configfs attribute."
msgstr ""

#: ../../../usb/gadget_hid.rst:89
msgid "Send and receive HID reports"
msgstr ""

#: ../../../usb/gadget_hid.rst:91
msgid ""
"HID reports can be sent/received using read/write on the /dev/hidgX "
"character devices. See below for an example program to do this."
msgstr ""

#: ../../../usb/gadget_hid.rst:95
msgid ""
"hid_gadget_test is a small interactive program to test the HID gadget "
"driver. To use, point it at a hidg device and set the device type "
"(keyboard / mouse / joystick) - E.G.::"
msgstr ""

#: ../../../usb/gadget_hid.rst:101
msgid ""
"You are now in the prompt of hid_gadget_test. You can type any combination "
"of options and values. Available options and values are listed at program "
"start. In keyboard mode you can send up to six values."
msgstr ""

#: ../../../usb/gadget_hid.rst:106
msgid "For example type: g i s t r --left-shift"
msgstr ""

#: ../../../usb/gadget_hid.rst:108
msgid "Hit return and the corresponding report will be sent by the HID gadget."
msgstr ""

#: ../../../usb/gadget_hid.rst:111
msgid ""
"Another interesting example is the caps lock test. Type --caps-lock and hit "
"return. A report is then sent by the gadget and you should receive the host "
"answer, corresponding to the caps lock LED status::"
msgstr ""

#: ../../../usb/gadget_hid.rst:119
msgid "With this command::"
msgstr ""

#: ../../../usb/gadget_hid.rst:123
msgid "You can test the mouse emulation. Values are two signed numbers."
msgstr ""

#: ../../../usb/gadget_hid.rst:126
msgid "Sample code::"
msgstr ""
