# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../i2c/smbus-protocol.rst:3
msgid "The SMBus Protocol"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:5
msgid ""
"The following is a summary of the SMBus protocol. It applies to all "
"revisions of the protocol (1.0, 1.1, and 2.0). Certain protocol features "
"which are not supported by this package are briefly described at the end of "
"this document."
msgstr ""

#: ../../../i2c/smbus-protocol.rst:10
msgid ""
"Some adapters understand only the SMBus (System Management Bus) protocol, "
"which is a subset from the I2C protocol. Fortunately, many devices use only "
"the same subset, which makes it possible to put them on an SMBus."
msgstr ""

#: ../../../i2c/smbus-protocol.rst:14
msgid ""
"If you write a driver for some I2C device, please try to use the SMBus "
"commands if at all possible (if the device uses only that subset of the I2C "
"protocol). This makes it possible to use the device driver on both SMBus "
"adapters and I2C adapters (the SMBus command set is automatically translated "
"to I2C on I2C adapters, but plain I2C commands can not be handled at all on "
"most pure SMBus adapters)."
msgstr ""

#: ../../../i2c/smbus-protocol.rst:21
msgid ""
"Below is a list of SMBus protocol operations, and the functions executing "
"them.  Note that the names used in the SMBus protocol specifications usually "
"don't match these function names.  For some of the operations which pass a "
"single data byte, the functions using SMBus protocol operation names execute "
"a different protocol operation entirely."
msgstr ""

#: ../../../i2c/smbus-protocol.rst:27
msgid ""
"Each transaction type corresponds to a functionality flag. Before calling a "
"transaction function, a device driver should always check (just once) for "
"the corresponding functionality flag to ensure that the underlying I2C "
"adapter supports the transaction in question. See Documentation/i2c/"
"functionality.rst for the details."
msgstr ""

#: ../../../i2c/smbus-protocol.rst:35
msgid "Key to symbols"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:38
msgid "S"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:38
msgid "Start condition"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:39
msgid "Sr"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:39
msgid "Repeated start condition, used to switch from write to read mode."
msgstr ""

#: ../../../i2c/smbus-protocol.rst:41
msgid "P"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:41
msgid "Stop condition"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:42
msgid "Rd/Wr (1 bit)"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:42
msgid "Read/Write bit. Rd equals 1, Wr equals 0."
msgstr ""

#: ../../../i2c/smbus-protocol.rst:43
msgid "A, NA (1 bit)"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:43
msgid "Acknowledge (ACK) and Not Acknowledge (NACK) bit"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:44
msgid "Addr  (7 bits)"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:44
msgid ""
"I2C 7 bit address. Note that this can be expanded to get a 10 bit I2C "
"address."
msgstr ""

#: ../../../i2c/smbus-protocol.rst:46
msgid "Comm  (8 bits)"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:46
msgid "Command byte, a data byte which often selects a register on the device."
msgstr ""

#: ../../../i2c/smbus-protocol.rst:48
msgid "Data  (8 bits)"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:48
msgid ""
"A plain data byte. DataLow and DataHigh represent the low and high byte of a "
"16 bit word."
msgstr ""

#: ../../../i2c/smbus-protocol.rst:50
msgid "Count (8 bits)"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:50
msgid "A data byte containing the length of a block operation."
msgstr ""

#: ../../../i2c/smbus-protocol.rst:52
msgid "[..]"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:52
msgid "Data sent by I2C device, as opposed to data sent by the host adapter."
msgstr ""

#: ../../../i2c/smbus-protocol.rst:58
msgid "SMBus Quick Command"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:60
msgid "This sends a single bit to the device, at the place of the Rd/Wr bit::"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:64
msgid "Functionality flag: I2C_FUNC_SMBUS_QUICK"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:68
msgid "SMBus Receive Byte"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:70
msgid "Implemented by i2c_smbus_read_byte()"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:72
msgid ""
"This reads a single byte from a device, without specifying a device "
"register. Some devices are so simple that this interface is enough; for "
"others, it is a shorthand if you want to read the same register as in the "
"previous SMBus command::"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:79
msgid "Functionality flag: I2C_FUNC_SMBUS_READ_BYTE"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:83
msgid "SMBus Send Byte"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:85
msgid "Implemented by i2c_smbus_write_byte()"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:87
msgid ""
"This operation is the reverse of Receive Byte: it sends a single byte to a "
"device.  See Receive Byte for more information."
msgstr ""

#: ../../../i2c/smbus-protocol.rst:94
msgid "Functionality flag: I2C_FUNC_SMBUS_WRITE_BYTE"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:98
msgid "SMBus Read Byte"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:100
msgid "Implemented by i2c_smbus_read_byte_data()"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:102
msgid ""
"This reads a single byte from a device, from a designated register. The "
"register is specified through the Comm byte::"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:107
msgid "Functionality flag: I2C_FUNC_SMBUS_READ_BYTE_DATA"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:111
msgid "SMBus Read Word"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:113
msgid "Implemented by i2c_smbus_read_word_data()"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:115
msgid ""
"This operation is very like Read Byte; again, data is read from a device, "
"from a designated register that is specified through the Comm byte. But this "
"time, the data is a complete word (16 bits)::"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:121
msgid "Functionality flag: I2C_FUNC_SMBUS_READ_WORD_DATA"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:123
msgid ""
"Note the convenience function i2c_smbus_read_word_swapped() is available for "
"reads where the two data bytes are the other way around (not SMBus "
"compliant, but very popular.)"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:129
msgid "SMBus Write Byte"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:131
msgid "Implemented by i2c_smbus_write_byte_data()"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:133
msgid ""
"This writes a single byte to a device, to a designated register. The "
"register is specified through the Comm byte. This is the opposite of the "
"Read Byte operation."
msgstr ""

#: ../../../i2c/smbus-protocol.rst:141
msgid "Functionality flag: I2C_FUNC_SMBUS_WRITE_BYTE_DATA"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:145
msgid "SMBus Write Word"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:147
msgid "Implemented by i2c_smbus_write_word_data()"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:149
msgid ""
"This is the opposite of the Read Word operation. 16 bits of data are written "
"to a device, to the designated register that is specified through the Comm "
"byte::"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:155
msgid "Functionality flag: I2C_FUNC_SMBUS_WRITE_WORD_DATA"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:157
msgid ""
"Note the convenience function i2c_smbus_write_word_swapped() is available "
"for writes where the two data bytes are the other way around (not SMBus "
"compliant, but very popular.)"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:163
msgid "SMBus Process Call"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:165
msgid ""
"This command selects a device register (through the Comm byte), sends 16 "
"bits of data to it, and reads 16 bits of data in return::"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:171
msgid "Functionality flag: I2C_FUNC_SMBUS_PROC_CALL"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:175
msgid "SMBus Block Read"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:177
msgid "Implemented by i2c_smbus_read_block_data()"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:179
msgid ""
"This command reads a block of up to 32 bytes from a device, from a "
"designated register that is specified through the Comm byte. The amount of "
"data is specified by the device in the Count byte."
msgstr ""

#: ../../../i2c/smbus-protocol.rst:188
msgid "Functionality flag: I2C_FUNC_SMBUS_READ_BLOCK_DATA"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:192
msgid "SMBus Block Write"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:194
msgid "Implemented by i2c_smbus_write_block_data()"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:196
msgid ""
"The opposite of the Block Read command, this writes up to 32 bytes to a "
"device, to a designated register that is specified through the Comm byte. "
"The amount of data is specified in the Count byte."
msgstr ""

#: ../../../i2c/smbus-protocol.rst:204
msgid "Functionality flag: I2C_FUNC_SMBUS_WRITE_BLOCK_DATA"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:208
msgid "SMBus Block Write - Block Read Process Call"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:210
msgid ""
"SMBus Block Write - Block Read Process Call was introduced in Revision 2.0 "
"of the specification."
msgstr ""

#: ../../../i2c/smbus-protocol.rst:213
msgid ""
"This command selects a device register (through the Comm byte), sends 1 to "
"31 bytes of data to it, and reads 1 to 31 bytes of data in return::"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:219
msgid "Functionality flag: I2C_FUNC_SMBUS_BLOCK_PROC_CALL"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:223
msgid "SMBus Host Notify"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:225
msgid ""
"This command is sent from a SMBus device acting as a master to the SMBus "
"host acting as a slave. It is the same form as Write Word, with the command "
"code replaced by the alerting device's address."
msgstr ""

#: ../../../i2c/smbus-protocol.rst:234
msgid "This is implemented in the following way in the Linux kernel:"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:236
msgid ""
"I2C bus drivers which support SMBus Host Notify should report "
"I2C_FUNC_SMBUS_HOST_NOTIFY."
msgstr ""

#: ../../../i2c/smbus-protocol.rst:238
msgid ""
"I2C bus drivers trigger SMBus Host Notify by a call to "
"i2c_handle_smbus_host_notify()."
msgstr ""

#: ../../../i2c/smbus-protocol.rst:240
msgid ""
"I2C drivers for devices which can trigger SMBus Host Notify will have client-"
">irq assigned to a Host Notify IRQ if no one else specified another."
msgstr ""

#: ../../../i2c/smbus-protocol.rst:243
msgid ""
"There is currently no way to retrieve the data parameter from the client."
msgstr ""

#: ../../../i2c/smbus-protocol.rst:247
msgid "Packet Error Checking (PEC)"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:249
msgid ""
"Packet Error Checking was introduced in Revision 1.1 of the specification."
msgstr ""

#: ../../../i2c/smbus-protocol.rst:251
msgid ""
"PEC adds a CRC-8 error-checking byte to transfers using it, immediately "
"before the terminating STOP."
msgstr ""

#: ../../../i2c/smbus-protocol.rst:256
msgid "Address Resolution Protocol (ARP)"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:258
msgid ""
"The Address Resolution Protocol was introduced in Revision 2.0 of the "
"specification. It is a higher-layer protocol which uses the messages above."
msgstr ""

#: ../../../i2c/smbus-protocol.rst:262
msgid ""
"ARP adds device enumeration and dynamic address assignment to the protocol. "
"All ARP communications use slave address 0x61 and require PEC checksums."
msgstr ""

#: ../../../i2c/smbus-protocol.rst:268
msgid "SMBus Alert"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:270
msgid "SMBus Alert was introduced in Revision 1.0 of the specification."
msgstr ""

#: ../../../i2c/smbus-protocol.rst:272
msgid ""
"The SMBus alert protocol allows several SMBus slave devices to share a "
"single interrupt pin on the SMBus master, while still allowing the master to "
"know which slave triggered the interrupt."
msgstr ""

#: ../../../i2c/smbus-protocol.rst:276
msgid "This is implemented the following way in the Linux kernel:"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:278
msgid ""
"I2C bus drivers which support SMBus alert should call "
"i2c_new_smbus_alert_device() to install SMBus alert support."
msgstr ""

#: ../../../i2c/smbus-protocol.rst:280
msgid ""
"I2C drivers for devices which can trigger SMBus alerts should implement the "
"optional alert() callback."
msgstr ""

#: ../../../i2c/smbus-protocol.rst:285
msgid "I2C Block Transactions"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:287
msgid ""
"The following I2C block transactions are similar to the SMBus Block Read and "
"Write operations, except these do not have a Count byte. They are supported "
"by the SMBus layer and are described here for completeness, but they are "
"*NOT* defined by the SMBus specification."
msgstr ""

#: ../../../i2c/smbus-protocol.rst:292
msgid ""
"I2C block transactions do not limit the number of bytes transferred but the "
"SMBus layer places a limit of 32 bytes."
msgstr ""

#: ../../../i2c/smbus-protocol.rst:297
msgid "I2C Block Read"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:299
msgid "Implemented by i2c_smbus_read_i2c_block_data()"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:301
msgid ""
"This command reads a block of bytes from a device, from a designated "
"register that is specified through the Comm byte::"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:307
msgid "Functionality flag: I2C_FUNC_SMBUS_READ_I2C_BLOCK"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:311
msgid "I2C Block Write"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:313
msgid "Implemented by i2c_smbus_write_i2c_block_data()"
msgstr ""

#: ../../../i2c/smbus-protocol.rst:315
msgid ""
"The opposite of the Block Read command, this writes bytes to a device, to a "
"designated register that is specified through the Comm byte. Note that "
"command lengths of 0, 2, or more bytes are supported as they are "
"indistinguishable from data."
msgstr ""

#: ../../../i2c/smbus-protocol.rst:324
msgid "Functionality flag: I2C_FUNC_SMBUS_WRITE_I2C_BLOCK"
msgstr ""
