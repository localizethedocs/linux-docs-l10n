# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../crypto/devel-algos.rst:2
msgid "Developing Cipher Algorithms"
msgstr ""

#: ../../../crypto/devel-algos.rst:5
msgid "Registering And Unregistering Transformation"
msgstr ""

#: ../../../crypto/devel-algos.rst:7
msgid ""
"There are three distinct types of registration functions in the Crypto API. "
"One is used to register a generic cryptographic transformation, while the "
"other two are specific to HASH transformations and COMPRESSion. We will "
"discuss the latter two in a separate chapter, here we will only look at the "
"generic ones."
msgstr ""

#: ../../../crypto/devel-algos.rst:13
msgid ""
"Before discussing the register functions, the data structure to be filled "
"with each, struct crypto_alg, must be considered -- see below for a "
"description of this data structure."
msgstr ""

#: ../../../crypto/devel-algos.rst:17
msgid ""
"The generic registration functions can be found in include/linux/crypto.h "
"and their definition can be seen below. The former function registers a "
"single transformation, while the latter works on an array of transformation "
"descriptions. The latter is useful when registering transformations in bulk, "
"for example when a driver implements multiple transformations."
msgstr ""

#: ../../../crypto/devel-algos.rst:30
msgid "The counterparts to those functions are listed below."
msgstr ""

#: ../../../crypto/devel-algos.rst:38
msgid ""
"The registration functions return 0 on success, or a negative errno value on "
"failure.  crypto_register_algs() succeeds only if it successfully registered "
"all the given algorithms; if it fails partway through, then any changes are "
"rolled back."
msgstr ""

#: ../../../crypto/devel-algos.rst:43
msgid ""
"The unregistration functions always succeed, so they don't have a return "
"value.  Don't try to unregister algorithms that aren't currently registered."
msgstr ""

#: ../../../crypto/devel-algos.rst:48
msgid "Single-Block Symmetric Ciphers [CIPHER]"
msgstr ""

#: ../../../crypto/devel-algos.rst:50
msgid "Example of transformations: aes, serpent, ..."
msgstr ""

#: ../../../crypto/devel-algos.rst:52
msgid ""
"This section describes the simplest of all transformation implementations, "
"that being the CIPHER type used for symmetric ciphers. The CIPHER type is "
"used for transformations which operate on exactly one block at a time and "
"there are no dependencies between blocks at all."
msgstr ""

#: ../../../crypto/devel-algos.rst:58
msgid "Registration specifics"
msgstr ""

#: ../../../crypto/devel-algos.rst:60
msgid ""
"The registration of [CIPHER] algorithm is specific in that struct crypto_alg "
"field .cra_type is empty. The .cra_u.cipher has to be filled in with proper "
"callbacks to implement this transformation."
msgstr ""

#: ../../../crypto/devel-algos.rst:64
msgid "See struct cipher_alg below."
msgstr ""

#: ../../../crypto/devel-algos.rst:67
msgid "Cipher Definition With struct cipher_alg"
msgstr ""

#: ../../../crypto/devel-algos.rst:69
msgid "Struct cipher_alg defines a single block cipher."
msgstr ""

#: ../../../crypto/devel-algos.rst:71
msgid ""
"Here are schematics of how these functions are called when operated from "
"other part of the kernel. Note that the .cia_setkey() call might happen "
"before or after any of these schematics happen, but must not happen during "
"any of these are in-flight."
msgstr ""

#: ../../../crypto/devel-algos.rst:85
msgid ""
"Please note that a pattern where .cia_setkey() is called multiple times is "
"also valid:"
msgstr ""

#: ../../../crypto/devel-algos.rst:99
msgid "Multi-Block Ciphers"
msgstr ""

#: ../../../crypto/devel-algos.rst:101
msgid "Example of transformations: cbc(aes), chacha20, ..."
msgstr ""

#: ../../../crypto/devel-algos.rst:103
msgid ""
"This section describes the multi-block cipher transformation "
"implementations. The multi-block ciphers are used for transformations which "
"operate on scatterlists of data supplied to the transformation functions. "
"They output the result into a scatterlist of data as well."
msgstr ""

#: ../../../crypto/devel-algos.rst:109
msgid "Registration Specifics"
msgstr ""

#: ../../../crypto/devel-algos.rst:111
msgid ""
"The registration of multi-block cipher algorithms is one of the most "
"standard procedures throughout the crypto API."
msgstr ""

#: ../../../crypto/devel-algos.rst:114
msgid ""
"Note, if a cipher implementation requires a proper alignment of data, the "
"caller should use the functions of crypto_skcipher_alignmask() to identify a "
"memory alignment mask. The kernel crypto API is able to process requests "
"that are unaligned. This implies, however, additional overhead as the kernel "
"crypto API needs to perform the realignment of the data which may imply "
"moving of data."
msgstr ""

#: ../../../crypto/devel-algos.rst:122
msgid "Cipher Definition With struct skcipher_alg"
msgstr ""

#: ../../../crypto/devel-algos.rst:124
msgid ""
"Struct skcipher_alg defines a multi-block cipher, or more generally, a "
"length-preserving symmetric cipher algorithm."
msgstr ""

#: ../../../crypto/devel-algos.rst:128
msgid "Scatterlist handling"
msgstr ""

#: ../../../crypto/devel-algos.rst:130
msgid ""
"Some drivers will want to use the Generic ScatterWalk in case the hardware "
"needs to be fed separate chunks of the scatterlist which contains the "
"plaintext and will contain the ciphertext. Please refer to the ScatterWalk "
"interface offered by the Linux kernel scatter / gather list implementation."
msgstr ""

#: ../../../crypto/devel-algos.rst:137
msgid "Hashing [HASH]"
msgstr ""

#: ../../../crypto/devel-algos.rst:139
msgid "Example of transformations: crc32, md5, sha1, sha256,..."
msgstr ""

#: ../../../crypto/devel-algos.rst:142
msgid "Registering And Unregistering The Transformation"
msgstr ""

#: ../../../crypto/devel-algos.rst:144
msgid ""
"There are multiple ways to register a HASH transformation, depending on "
"whether the transformation is synchronous [SHASH] or asynchronous [AHASH] "
"and the amount of HASH transformations we are registering. You can find the "
"prototypes defined in include/crypto/internal/hash.h:"
msgstr ""

#: ../../../crypto/devel-algos.rst:157
msgid ""
"The respective counterparts for unregistering the HASH transformation are as "
"follows:"
msgstr ""

#: ../../../crypto/devel-algos.rst:169
msgid "Cipher Definition With struct shash_alg and ahash_alg"
msgstr ""

#: ../../../crypto/devel-algos.rst:171
msgid ""
"Here are schematics of how these functions are called when operated from "
"other part of the kernel. Note that the .setkey() call might happen before "
"or after any of these schematics happen, but must not happen during any of "
"these are in-flight. Please note that calling .init() followed immediately "
"by .final() is also a perfectly valid transformation."
msgstr ""

#: ../../../crypto/devel-algos.rst:199
msgid ""
"Here is a schematic of how the .export()/.import() functions are called when "
"used from another part of the kernel."
msgstr ""

#: ../../../crypto/devel-algos.rst:224
msgid ""
"Note that it is perfectly legal to \"abandon\" a request object: - call ."
"init() and then (as many times) .update() - _not_ call any of .final(), ."
"finup() or .export() at any point in future"
msgstr ""

#: ../../../crypto/devel-algos.rst:228
msgid ""
"In other words implementations should mind the resource allocation and clean-"
"up. No resources related to request objects should remain allocated after a "
"call to .init() or .update(), since there might be no chance to free them."
msgstr ""

#: ../../../crypto/devel-algos.rst:234
msgid "Specifics Of Asynchronous HASH Transformation"
msgstr ""

#: ../../../crypto/devel-algos.rst:236
msgid ""
"Some of the drivers will want to use the Generic ScatterWalk in case the "
"implementation needs to be fed separate chunks of the scatterlist which "
"contains the input data."
msgstr ""
