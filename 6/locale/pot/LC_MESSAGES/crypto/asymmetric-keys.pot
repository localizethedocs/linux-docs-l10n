# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../crypto/asymmetric-keys.rst:5
msgid "Asymmetric / Public-key Cryptography Key Type"
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:19
msgid "Overview"
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:21
msgid ""
"The \"asymmetric\" key type is designed to be a container for the keys used "
"in public-key cryptography, without imposing any particular restrictions on "
"the form or mechanism of the cryptography or form of the key."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:25
msgid ""
"The asymmetric key is given a subtype that defines what sort of data is "
"associated with the key and provides operations to describe and destroy it. "
"However, no requirement is made that the key data actually be stored in the "
"key."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:30
msgid ""
"A completely in-kernel key retention and operation subtype can be defined, "
"but it would also be possible to provide access to cryptographic hardware "
"(such as a TPM) that might be used to both retain the relevant key and "
"perform operations using that key.  In such a case, the asymmetric key would "
"then merely be an interface to the TPM driver."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:36
msgid ""
"Also provided is the concept of a data parser.  Data parsers are responsible "
"for extracting information from the blobs of data passed to the "
"instantiation function.  The first data parser that recognises the blob gets "
"to set the subtype of the key and define the operations that can be done on "
"that key."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:41
msgid ""
"A data parser may interpret the data blob as containing the bits "
"representing a key, or it may interpret it as a reference to a key held "
"somewhere else in the system (for example, a TPM)."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:47
msgid "Key Identification"
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:49
msgid ""
"If a key is added with an empty name, the instantiation data parsers are "
"given the opportunity to pre-parse a key and to determine the description "
"the key should be given from the content of the key."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:53
msgid ""
"This can then be used to refer to the key, either by complete match or by "
"partial match.  The key type may also use other criteria to refer to a key."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:56
msgid ""
"The asymmetric key type's match function can then perform a wider range of "
"comparisons than just the straightforward comparison of the description with "
"the criterion string:"
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:60
msgid ""
"If the criterion string is of the form \"id:<hexdigits>\" then the match "
"function will examine a key's fingerprint to see if the hex digits given "
"after the \"id:\" match the tail.  For instance::"
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:66
msgid "will match a key with fingerprint::"
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:70
msgid ""
"If the criterion string is of the form \"<subtype>:<hexdigits>\" then the "
"match will match the ID as in (1), but with the added restriction that only "
"keys of the specified subtype (e.g. tpm) will be matched.  For instance::"
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:77
msgid ""
"Looking in /proc/keys, the last 8 hex digits of the key fingerprint are "
"displayed, along with the subtype::"
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:84
msgid "Accessing Asymmetric Keys"
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:86
msgid ""
"For general access to asymmetric keys from within the kernel, the following "
"inclusion is required::"
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:91
msgid ""
"This gives access to functions for dealing with asymmetric / public keys. "
"Three enums are defined there for representing public-key cryptography "
"algorithms::"
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:97
msgid "digest algorithms used by those::"
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:101
msgid "and key identifier representations::"
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:105
msgid ""
"Note that the key type representation types are required because key "
"identifiers from different standards aren't necessarily compatible.  For "
"instance, PGP generates key identifiers by hashing the key data plus some "
"PGP-specific metadata, whereas X.509 has arbitrary certificate identifiers."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:110
msgid "The operations defined upon a key are:"
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:112
msgid "Signature verification."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:114
msgid ""
"Other operations are possible (such as encryption) with the same key data "
"required for verification, but not currently supported, and others (eg. "
"decryption and signature generation) require extra key data."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:120
msgid "Signature Verification"
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:122
msgid ""
"An operation is provided to perform cryptographic signature verification, "
"using an asymmetric key to provide or to provide access to the public key::"
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:128
msgid ""
"The caller must have already obtained the key from some source and can then "
"use it to check the signature.  The caller must have parsed the signature "
"and transferred the relevant bits to the structure pointed to by sig::"
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:143
msgid ""
"The algorithm used must be noted in sig->pkey_hash_algo, and all the MPIs "
"that make up the actual signature must be stored in sig->mpi[] and the count "
"of MPIs placed in sig->nr_mpi."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:147
msgid ""
"In addition, the data must have been digested by the caller and the "
"resulting hash must be pointed to by sig->digest and the size of the hash be "
"placed in sig->digest_size."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:151
msgid ""
"The function will return 0 upon success or -EKEYREJECTED if the signature "
"doesn't match."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:154
msgid ""
"The function may also return -ENOTSUPP if an unsupported public-key "
"algorithm or public-key/hash algorithm combination is specified or the key "
"doesn't support the operation; -EBADMSG or -ERANGE if some of the parameters "
"have weird data; or -ENOMEM if an allocation can't be performed.  -EINVAL "
"can be returned if the key argument is the wrong type or is incompletely set "
"up."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:162
msgid "Asymmetric Key Subtypes"
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:164
msgid ""
"Asymmetric keys have a subtype that defines the set of operations that can "
"be performed on that key and that determines what data is attached as the "
"key payload.  The payload format is entirely at the whim of the subtype."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:168
msgid ""
"The subtype is selected by the key data parser and the parser must "
"initialise the data required for it.  The asymmetric key retains a reference "
"on the subtype module."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:172
msgid "The subtype definition structure can be found in::"
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:176
#: ../../../crypto/asymmetric-keys.rst:257
msgid "and looks like the following::"
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:192
msgid "Asymmetric keys point to this with their payload[asym_subtype] member."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:194
msgid ""
"The owner and name fields should be set to the owning module and the name of "
"the subtype.  Currently, the name is only used for print statements."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:197
msgid "There are a number of operations defined by the subtype:"
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:199
msgid "describe()."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:201
msgid ""
"Mandatory.  This allows the subtype to display something in /proc/keys "
"against the key.  For instance the name of the public key algorithm type "
"could be displayed.  The key type will display the tail of the key identity "
"string after this."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:206
msgid "destroy()."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:208
msgid ""
"Mandatory.  This should free the memory associated with the key.  The "
"asymmetric key will look after freeing the fingerprint and releasing the "
"reference on the subtype module."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:212
msgid "query()."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:214
msgid "Mandatory.  This is a function for querying the capabilities of a key."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:216
msgid "eds_op()."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:218
msgid ""
"Optional.  This is the entry point for the encryption, decryption and "
"signature creation operations (which are distinguished by the operation ID "
"in the parameter struct).  The subtype may do anything it likes to implement "
"an operation, including offloading to hardware."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:223
msgid "verify_signature()."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:225
msgid ""
"Optional.  This is the entry point for signature verification.  The subtype "
"may do anything it likes to implement an operation, including offloading to "
"hardware."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:230
msgid "Instantiation Data Parsers"
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:232
msgid ""
"The asymmetric key type doesn't generally want to store or to deal with a "
"raw blob of data that holds the key data.  It would have to parse it and "
"error check it each time it wanted to use it.  Further, the contents of the "
"blob may have various checks that can be performed on it (eg. self-"
"signatures, validity dates) and may contain useful data about the key "
"(identifiers, capabilities)."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:238
msgid ""
"Also, the blob may represent a pointer to some hardware containing the key "
"rather than the key itself."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:241
msgid ""
"Examples of blob formats for which parsers could be implemented include:"
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:243
msgid "OpenPGP packet stream [RFC 4880]."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:244
msgid "X.509 ASN.1 stream."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:245
msgid "Pointer to TPM key."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:246
msgid "Pointer to UEFI key."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:247
msgid "PKCS#8 private key [RFC 5208]."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:248
msgid "PKCS#5 encrypted private key [RFC 2898]."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:250
msgid ""
"During key instantiation each parser in the list is tried until one doesn't "
"return -EBADMSG."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:253
msgid "The parser definition structure can be found in::"
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:266
msgid ""
"The owner and name fields should be set to the owning module and the name of "
"the parser."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:269
msgid ""
"There is currently only a single operation defined by the parser, and it is "
"mandatory:"
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:272
msgid "parse()."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:274
msgid ""
"This is called to preparse the key from the key creation and update paths. "
"In particular, it is called during the key creation _before_ a key is "
"allocated, and as such, is permitted to provide the key's description in the "
"case that the caller declines to do so."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:279
msgid ""
"The caller passes a pointer to the following struct with all of the fields "
"cleared, except for data, datalen and quotalen [see Documentation/security/"
"keys/core.rst]::"
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:291
msgid ""
"The instantiation data is in a blob pointed to by data and is datalen in "
"size.  The parse() function is not permitted to change these two values at "
"all, and shouldn't change any of the other values _unless_ they are "
"recognise the blob format and will not return -EBADMSG to indicate it is not "
"theirs."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:297
msgid ""
"If the parser is happy with the blob, it should propose a description for "
"the key and attach it to ->description, ->payload[asym_subtype] should be "
"set to point to the subtype to be used, ->payload[asym_crypto] should be set "
"to point to the initialised data for that subtype, ->payload[asym_key_ids] "
"should point to one or more hex fingerprints and quotalen should be updated "
"to indicate how much quota this key should account for."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:305
msgid ""
"When clearing up, the data attached to ->payload[asym_key_ids] and -"
">description will be kfree()'d and the data attached to -"
">payload[asm_crypto] will be passed to the subtype's ->destroy() method to "
"be disposed of.  A module reference for the subtype pointed to by -"
">payload[asym_subtype] will be put."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:312
msgid ""
"If the data format is not recognised, -EBADMSG should be returned.  If it is "
"recognised, but the key cannot for some reason be set up, some other "
"negative error code should be returned.  On success, 0 should be returned."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:316
msgid ""
"The key's fingerprint string may be partially matched upon.  For a public-"
"key algorithm such as RSA and DSA this will likely be a printable hex "
"version of the key's fingerprint."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:320
msgid "Functions are provided to register and unregister parsers::"
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:325
msgid ""
"Parsers may not have the same name.  The names are otherwise only used for "
"displaying in debugging messages."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:330
msgid "Keyring Link Restrictions"
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:332
msgid ""
"Keyrings created from userspace using add_key can be configured to check the "
"signature of the key being linked.  Keys without a valid signature are not "
"allowed to link."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:336
msgid "Several restriction methods are available:"
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:338
msgid "Restrict using the kernel builtin trusted keyring"
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:340
msgid "Option string used with KEYCTL_RESTRICT_KEYRING: - \"builtin_trusted\""
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:343
msgid ""
"The kernel builtin trusted keyring will be searched for the signing key. If "
"the builtin trusted keyring is not configured, all links will be rejected.  "
"The ca_keys kernel parameter also affects which keys are used for signature "
"verification."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:348
msgid "Restrict using the kernel builtin and secondary trusted keyrings"
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:350
msgid ""
"Option string used with KEYCTL_RESTRICT_KEYRING: - "
"\"builtin_and_secondary_trusted\""
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:353
msgid ""
"The kernel builtin and secondary trusted keyrings will be searched for the "
"signing key.  If the secondary trusted keyring is not configured, this "
"restriction will behave like the \"builtin_trusted\" option.  The ca_keys "
"kernel parameter also affects which keys are used for signature verification."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:359
msgid "Restrict using a separate key or keyring"
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:361
msgid ""
"Option string used with KEYCTL_RESTRICT_KEYRING: - \"key_or_keyring:<key or "
"keyring serial number>[:chain]\""
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:364
msgid ""
"Whenever a key link is requested, the link will only succeed if the key "
"being linked is signed by one of the designated keys.  This key may be "
"specified directly by providing a serial number for one asymmetric key, or a "
"group of keys may be searched for the signing key by providing the serial "
"number for a keyring."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:370
msgid ""
"When the \"chain\" option is provided at the end of the string, the keys "
"within the destination keyring will also be searched for signing keys. This "
"allows for verification of certificate chains by adding each certificate in "
"order (starting closest to the root) to a keyring.  For instance, one "
"keyring can be populated with links to a set of root certificates, with a "
"separate, restricted keyring set up for each certificate chain to be "
"validated::"
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:393
msgid ""
"If the final end-entity certificate is successfully added to the \"chain\" "
"keyring, we can be certain that it has a valid signing chain going back to "
"one of the root certificates."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:397
msgid ""
"A single keyring can be used to verify a chain of signatures by restricting "
"the keyring after linking the root certificate::"
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:414
msgid ""
"If the final end-entity certificate is successfully added to the \"chain2\" "
"keyring, we can be certain that there is a valid signing chain going back to "
"the root certificate that was added before the keyring was restricted."
msgstr ""

#: ../../../crypto/asymmetric-keys.rst:419
msgid ""
"In all of these cases, if the signing key is found the signature of the key "
"to be linked will be verified using the signing key.  The requested key is "
"added to the keyring only if the signature is successfully verified.  -"
"ENOKEY is returned if the parent certificate could not be found, or -"
"EKEYREJECTED is returned if the signature check fails or the key is "
"blacklisted.  Other errors may be returned if the signature check could not "
"be performed."
msgstr ""
