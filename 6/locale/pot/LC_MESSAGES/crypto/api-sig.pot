# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-21 08:55+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../crypto/api-sig.rst:2
msgid "Asymmetric Signature"
msgstr ""

#: ../../../crypto/api-sig.rst:5
msgid "Asymmetric Signature Algorithm Definitions"
msgstr ""

#: ../../../crypto/api-sig:7: include/crypto/sig.h:23
msgid "generic public key signature algorithm"
msgstr ""

#: ../../../crypto/api-sig:7: include/crypto/sig.h:27
msgid "**Definition**::"
msgstr ""

#: ../../../crypto/api-sig:7: include/crypto/sig.h:42
msgid "**Members**"
msgstr ""

#: ../../../crypto/api-sig:7: include/crypto/sig.h:25
msgid "``sign``"
msgstr ""

#: ../../../crypto/api-sig:7: include/crypto/sig.h:26
msgid ""
"Function performs a sign operation as defined by public key algorithm. On "
"success, the signature size is returned. Optional."
msgstr ""

#: ../../../crypto/api-sig:7: include/crypto/sig.h:28
msgid "``verify``"
msgstr ""

#: ../../../crypto/api-sig:7: include/crypto/sig.h:29
msgid ""
"Function performs a complete verify operation as defined by public key "
"algorithm, returning verification status. Optional."
msgstr ""

#: ../../../crypto/api-sig:7: include/crypto/sig.h:30
msgid "``set_pub_key``"
msgstr ""

#: ../../../crypto/api-sig:7: include/crypto/sig.h:31
msgid ""
"Function invokes the algorithm specific set public key function, which knows "
"how to decode and interpret the BER encoded public key and parameters. "
"Mandatory."
msgstr ""

#: ../../../crypto/api-sig:7: include/crypto/sig.h:33
msgid "``set_priv_key``"
msgstr ""

#: ../../../crypto/api-sig:7: include/crypto/sig.h:34
msgid ""
"Function invokes the algorithm specific set private key function, which "
"knows how to decode and interpret the BER encoded private key and "
"parameters. Optional."
msgstr ""

#: ../../../crypto/api-sig:7: include/crypto/sig.h:36
msgid "``key_size``"
msgstr ""

#: ../../../crypto/api-sig:7: include/crypto/sig.h:37
msgid "Function returns key size. Mandatory."
msgstr ""

#: ../../../crypto/api-sig:7: include/crypto/sig.h:37
msgid "``digest_size``"
msgstr ""

#: ../../../crypto/api-sig:7: include/crypto/sig.h:38
msgid "Function returns maximum digest size. Optional."
msgstr ""

#: ../../../crypto/api-sig:7: include/crypto/sig.h:38
msgid "``max_size``"
msgstr ""

#: ../../../crypto/api-sig:7: include/crypto/sig.h:39
msgid "Function returns maximum signature size. Optional."
msgstr ""

#: ../../../crypto/api-sig:7: include/crypto/sig.h:39
msgid "``init``"
msgstr ""

#: ../../../crypto/api-sig:7: include/crypto/sig.h:40
msgid ""
"Initialize the cryptographic transformation object. This function is used to "
"initialize the cryptographic transformation object. This function is called "
"only once at the instantiation time, right after the transformation context "
"was allocated. In case the cryptographic hardware has some special "
"requirements which need to be handled by software, this function shall check "
"for the precise requirement of the transformation and put any software "
"fallbacks in place."
msgstr ""

#: ../../../crypto/api-sig:7: include/crypto/sig.h:47
msgid "``exit``"
msgstr ""

#: ../../../crypto/api-sig:7: include/crypto/sig.h:48
msgid ""
"Deinitialize the cryptographic transformation object. This is a counterpart "
"to **init**, used to remove various changes set in **init**."
msgstr ""

#: ../../../crypto/api-sig:7: include/crypto/sig.h:51
msgid "``base``"
msgstr ""

#: ../../../crypto/api-sig:7: include/crypto/sig.h:52
msgid "Common crypto API algorithm data structure"
msgstr ""

#: ../../../crypto/api-sig.rst:11
msgid "Asymmetric Signature API"
msgstr ""

#: ../../../crypto/api-sig:13: include/crypto/sig.h:74
msgid ""
"The Public Key Signature API is used with the algorithms of type "
"CRYPTO_ALG_TYPE_SIG (listed as type \"sig\" in /proc/crypto)"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:81
msgid "allocate signature tfm handle"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:85 include/crypto/sig.h:121
#: include/crypto/sig.h:133 include/crypto/sig.h:150 include/crypto/sig.h:167
#: include/crypto/sig.h:184 include/crypto/sig.h:206 include/crypto/sig.h:229
#: include/crypto/sig.h:250
msgid "**Parameters**"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:87
msgid "``const char *alg_name``"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:82
msgid ""
"is the cra_name / name or cra_driver_name / driver name of the signing "
"algorithm e.g. \"ecdsa\""
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:85
msgid "``u32 type``"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:84
msgid "specifies the type of the algorithm"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:86
msgid "``u32 mask``"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:85
msgid "specifies the mask for the algorithm"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:87 include/crypto/sig.h:121
#: include/crypto/sig.h:138 include/crypto/sig.h:155 include/crypto/sig.h:172
#: include/crypto/sig.h:190 include/crypto/sig.h:213 include/crypto/sig.h:235
#: include/crypto/sig.h:256
msgid "**Description**"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:86
msgid ""
"Allocate a handle for public key signature algorithm. The returned struct "
"crypto_sig is the handle that is required for any subsequent API invocation "
"for signature operations."
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:90 include/crypto/sig.h:183
#: include/crypto/sig.h:206 include/crypto/sig.h:229 include/crypto/sig.h:250
msgid "**Return**"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:91
msgid ""
"allocated handle in case of success; IS_ERR() is true in case of an error, "
"PTR_ERR() returns the error code."
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:117
msgid "free signature tfm handle"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:123
#: include/crypto/sig.h:135 include/crypto/sig.h:152 include/crypto/sig.h:169
#: include/crypto/sig.h:186 include/crypto/sig.h:208 include/crypto/sig.h:231
#: include/crypto/sig.h:252
msgid "``struct crypto_sig *tfm``"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:119
#: include/crypto/sig.h:136 include/crypto/sig.h:153 include/crypto/sig.h:170
#: include/crypto/sig.h:184 include/crypto/sig.h:207
msgid "signature tfm handle allocated with crypto_alloc_sig()"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:120
msgid "If **tfm** is a NULL or error pointer, this function does nothing."
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:129
msgid "Get key size"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:130
msgid ""
"Function returns the key size in bits. Function assumes that the key is "
"already set in the transformation. If this function is called without a "
"setkey or with a failed setkey, you may end up in a NULL dereference."
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:146
msgid "Get maximum digest size"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:147
msgid ""
"Function returns the maximum digest size in bytes. Function assumes that the "
"key is already set in the transformation. If this function is called without "
"a setkey or with a failed setkey, you may end up in a NULL dereference."
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:163
msgid "Get maximum signature size"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:164
msgid ""
"Function returns the maximum signature size in bytes. Function assumes that "
"the key is already set in the transformation. If this function is called "
"without a setkey or with a failed setkey, you may end up in a NULL "
"dereference."
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:180
msgid "Invoke signing operation"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:186
#: include/crypto/sig.h:209
msgid "``const void *src``"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:185
#: include/crypto/sig.h:208
msgid "source buffer"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:187
#: include/crypto/sig.h:210
msgid "``unsigned int slen``"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:186
#: include/crypto/sig.h:209
msgid "source length"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:188
msgid "``void *dst``"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:187
msgid "destination obuffer"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:189
#: include/crypto/sig.h:212
msgid "``unsigned int dlen``"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:188
msgid "destination length"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:181
msgid "Function invokes the specific signing operation for a given algorithm"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:190
msgid "signature size on success; error code in case of error"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:202
msgid "Invoke signature verification"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:211
msgid "``const void *digest``"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:210
msgid "digest"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:211
msgid "digest length"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:203
msgid ""
"Function invokes the specific signature verification operation for a given "
"algorithm."
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:213
msgid "zero on verification success; error code in case of error."
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:225
msgid "Invoke set public key operation"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:230
#: include/crypto/sig.h:251
msgid "tfm handle"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:232
#: include/crypto/sig.h:253
msgid "``const void *key``"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:231
msgid "BER encoded public key, algo OID, paramlen, BER encoded parameters"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:234
#: include/crypto/sig.h:255
msgid "``unsigned int keylen``"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:233
#: include/crypto/sig.h:254
msgid "length of the key (not including other data)"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:226
#: include/crypto/sig.h:247
msgid ""
"Function invokes the algorithm specific set key function, which knows how to "
"decode and interpret the encoded key and parameters"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:235
#: include/crypto/sig.h:256
msgid "zero on success; error code in case of error"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:246
msgid "Invoke set private key operation"
msgstr ""

#: ../../../crypto/api-sig:16: include/crypto/sig.h:252
msgid "BER encoded private key, algo OID, paramlen, BER encoded parameters"
msgstr ""
