# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../fb/udlfb.rst:3
msgid "What is udlfb?"
msgstr ""

#: ../../../fb/udlfb.rst:5
msgid "This is a driver for DisplayLink USB 2.0 era graphics chips."
msgstr ""

#: ../../../fb/udlfb.rst:7
msgid ""
"DisplayLink chips provide simple hline/blit operations with some "
"compression, pairing that with a hardware framebuffer (16MB) on the other "
"end of the USB wire.  That hardware framebuffer is able to drive the VGA, "
"DVI, or HDMI monitor with no CPU involvement until a pixel has to change."
msgstr ""

#: ../../../fb/udlfb.rst:12
msgid ""
"The CPU or other local resource does all the rendering; optionally compares "
"the result with a local shadow of the remote hardware framebuffer to "
"identify the minimal set of pixels that have changed; and compresses and "
"sends those pixels line-by-line via USB bulk transfers."
msgstr ""

#: ../../../fb/udlfb.rst:17
msgid ""
"Because of the efficiency of bulk transfers and a protocol on top that does "
"not require any acks - the effect is very low latency that can support "
"surprisingly high resolutions with good performance for non-gaming and non-"
"video applications."
msgstr ""

#: ../../../fb/udlfb.rst:22
msgid ""
"Mode setting, EDID read, etc are other bulk or control transfers. Mode "
"setting is very flexible - able to set nearly arbitrary modes from any "
"timing."
msgstr ""

#: ../../../fb/udlfb.rst:25
msgid "Advantages of USB graphics in general:"
msgstr ""

#: ../../../fb/udlfb.rst:27
msgid ""
"Ability to add a nearly arbitrary number of displays to any USB 2.0 capable "
"system. On Linux, number of displays is limited by fbdev interface (FB_MAX "
"is currently 32). Of course, all USB devices on the same host controller "
"share the same 480Mbs USB 2.0 interface."
msgstr ""

#: ../../../fb/udlfb.rst:32
msgid ""
"Advantages of supporting DisplayLink chips with kernel framebuffer interface:"
msgstr ""

#: ../../../fb/udlfb.rst:34
msgid ""
"The actual hardware functionality of DisplayLink chips matches nearly one-to-"
"one with the fbdev interface, making the driver quite small and tight "
"relative to the functionality it provides."
msgstr ""

#: ../../../fb/udlfb.rst:37
msgid ""
"X servers and other applications can use the standard fbdev interface from "
"user mode to talk to the device, without needing to know anything about USB "
"or DisplayLink's protocol at all. A \"displaylink\" X driver and a slightly "
"modified \"fbdev\" X driver are among those that already do."
msgstr ""

#: ../../../fb/udlfb.rst:42
msgid "Disadvantages:"
msgstr ""

#: ../../../fb/udlfb.rst:44
msgid ""
"Fbdev's mmap interface assumes a real hardware framebuffer is mapped. In the "
"case of USB graphics, it is just an allocated (virtual) buffer. Writes need "
"to be detected and encoded into USB bulk transfers by the CPU. Accurate "
"damage/changed area notifications work around this problem. In the future, "
"hopefully fbdev will be enhanced with an small standard interface to allow "
"mmap clients to report damage, for the benefit of virtual or remote "
"framebuffers."
msgstr ""

#: ../../../fb/udlfb.rst:51
msgid "Fbdev does not arbitrate client ownership of the framebuffer well."
msgstr ""

#: ../../../fb/udlfb.rst:52
msgid ""
"Fbcon assumes the first framebuffer it finds should be consumed for console."
msgstr ""

#: ../../../fb/udlfb.rst:53
msgid "It's not clear what the future of fbdev is, given the rise of KMS/DRM."
msgstr ""

#: ../../../fb/udlfb.rst:56
msgid "How to use it?"
msgstr ""

#: ../../../fb/udlfb.rst:58
msgid ""
"Udlfb, when loaded as a module, will match against all USB 2.0 generation "
"DisplayLink chips (Alex and Ollie family). It will then attempt to read the "
"EDID of the monitor, and set the best common mode between the DisplayLink "
"device and the monitor's capabilities."
msgstr ""

#: ../../../fb/udlfb.rst:63
msgid ""
"If the DisplayLink device is successful, it will paint a \"green screen\" "
"which means that from a hardware and fbdev software perspective, everything "
"is good."
msgstr ""

#: ../../../fb/udlfb.rst:66
msgid ""
"At that point, a /dev/fb? interface will be present for user-mode "
"applications to open and begin writing to the framebuffer of the DisplayLink "
"device using standard fbdev calls.  Note that if mmap() is used, by default "
"the user mode application must send down damage notifications to trigger "
"repaints of the changed regions.  Alternatively, udlfb can be recompiled "
"with experimental defio support enabled, to support a page-fault based "
"detection mechanism that can work without explicit notification."
msgstr ""

#: ../../../fb/udlfb.rst:74
msgid ""
"The most common client of udlfb is xf86-video-displaylink or a modified xf86-"
"video-fbdev X server. These servers have no real DisplayLink specific code. "
"They write to the standard framebuffer interface and rely on udlfb to do its "
"thing.  The one extra feature they have is the ability to report rectangles "
"from the X DAMAGE protocol extension down to udlfb via udlfb's damage "
"interface (which will hopefully be standardized for all virtual framebuffers "
"that need damage info). These damage notifications allow udlfb to "
"efficiently process the changed pixels."
msgstr ""

#: ../../../fb/udlfb.rst:84
msgid "Module Options"
msgstr ""

#: ../../../fb/udlfb.rst:86
msgid ""
"Special configuration for udlfb is usually unnecessary. There are a few "
"options, however."
msgstr ""

#: ../../../fb/udlfb.rst:89
msgid "From the command line, pass options to modprobe::"
msgstr ""

#: ../../../fb/udlfb.rst:93
msgid ""
"Or change options on the fly by editing /sys/module/udlfb/parameters/"
"PARAMETER_NAME ::"
msgstr ""

#: ../../../fb/udlfb.rst:101
msgid "Unplug/replug USB device to apply with new settings."
msgstr ""

#: ../../../fb/udlfb.rst:103
msgid ""
"Or to apply options permanently, create a modprobe configuration file like /"
"etc/modprobe.d/udlfb.conf with text::"
msgstr ""

#: ../../../fb/udlfb.rst:108
msgid "Accepted boolean options:"
msgstr ""

#: ../../../fb/udlfb.rst:111
msgid "fb_defio"
msgstr ""

#: ../../../fb/udlfb.rst:111
msgid ""
"Make use of the fb_defio (CONFIG_FB_DEFERRED_IO) kernel module to track "
"changed areas of the framebuffer by page faults. Standard fbdev applications "
"that use mmap but that do not report damage, should be able to work with "
"this enabled. Disable when running with X server that supports reporting "
"changed regions via ioctl, as this method is simpler, more stable, and "
"higher performance. default: fb_defio=1"
msgstr ""

#: ../../../fb/udlfb.rst:120
msgid "console"
msgstr ""

#: ../../../fb/udlfb.rst:120
msgid ""
"Allow fbcon to attach to udlfb provided framebuffers. Can be disabled if "
"fbcon and other clients (e.g. X with --shared-vt) are in conflict. default: "
"console=1"
msgstr ""

#: ../../../fb/udlfb.rst:125
msgid "shadow"
msgstr ""

#: ../../../fb/udlfb.rst:125
msgid ""
"Allocate a 2nd framebuffer to shadow what's currently across the USB bus in "
"device memory. If any pixels are unchanged, do not transmit. Spends host "
"memory to save USB transfers. Enabled by default. Only disable on very low "
"memory systems. default: shadow=1"
msgstr ""

#: ../../../fb/udlfb.rst:133
msgid "Sysfs Attributes"
msgstr ""

#: ../../../fb/udlfb.rst:135
msgid ""
"Udlfb creates several files in /sys/class/graphics/fb? Where ? is the "
"sequential framebuffer id of the particular DisplayLink device"
msgstr ""

#: ../../../fb/udlfb.rst:139
msgid "edid"
msgstr ""

#: ../../../fb/udlfb.rst:139
msgid ""
"If a valid EDID blob is written to this file (typically by a udev rule), "
"then udlfb will use this EDID as a backup in case reading the actual EDID of "
"the monitor attached to the DisplayLink device fails. This is especially "
"useful for fixed panels, etc. that cannot communicate their capabilities via "
"EDID. Reading this file returns the current EDID of the attached monitor (or "
"last backup value written). This is useful to get the EDID of the attached "
"monitor, which can be passed to utilities like parse-edid."
msgstr ""

#: ../../../fb/udlfb.rst:150
msgid "metrics_bytes_rendered"
msgstr ""

#: ../../../fb/udlfb.rst:150
msgid "32-bit count of pixel bytes rendered"
msgstr ""

#: ../../../fb/udlfb.rst:152
msgid "metrics_bytes_identical"
msgstr ""

#: ../../../fb/udlfb.rst:152
msgid ""
"32-bit count of how many of those bytes were found to be unchanged, based on "
"a shadow framebuffer check"
msgstr ""

#: ../../../fb/udlfb.rst:155
msgid "metrics_bytes_sent"
msgstr ""

#: ../../../fb/udlfb.rst:155
msgid ""
"32-bit count of how many bytes were transferred over USB to communicate the "
"resulting changed pixels to the hardware. Includes compression and protocol "
"overhead"
msgstr ""

#: ../../../fb/udlfb.rst:159
msgid "metrics_cpu_kcycles_used"
msgstr ""

#: ../../../fb/udlfb.rst:159
msgid ""
"32-bit count of CPU cycles used in processing the above pixels (in thousands "
"of cycles)."
msgstr ""

#: ../../../fb/udlfb.rst:162
msgid "metrics_reset"
msgstr ""

#: ../../../fb/udlfb.rst:162
msgid ""
"Write-only. Any write to this file resets all metrics above to zero.  Note "
"that the 32-bit counters above roll over very quickly. To get reliable "
"results, design performance tests to start and finish in a very short period "
"of time (one minute or less is safe)."
msgstr ""

#: ../../../fb/udlfb.rst:169
msgid "Bernie Thompson <bernie@plugable.com>"
msgstr ""
