# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../kbuild/reproducible-builds.rst:3
msgid "Reproducible builds"
msgstr ""

#: ../../../kbuild/reproducible-builds.rst:5
msgid ""
"It is generally desirable that building the same source code with the same "
"set of tools is reproducible, i.e. the output is always exactly the same.  "
"This makes it possible to verify that the build infrastructure for a binary "
"distribution or embedded system has not been subverted.  This can also make "
"it easier to verify that a source or tool change does not make any "
"difference to the resulting binaries."
msgstr ""

#: ../../../kbuild/reproducible-builds.rst:12
msgid ""
"The `Reproducible Builds project`_ has more information about this general "
"topic.  This document covers the various reasons why building the kernel may "
"be unreproducible, and how to avoid them."
msgstr ""

#: ../../../kbuild/reproducible-builds.rst:17
msgid "Timestamps"
msgstr ""

#: ../../../kbuild/reproducible-builds.rst:19
msgid "The kernel embeds timestamps in three places:"
msgstr ""

#: ../../../kbuild/reproducible-builds.rst:21
msgid ""
"The version string exposed by ``uname()`` and included in ``/proc/version``"
msgstr ""

#: ../../../kbuild/reproducible-builds.rst:24
msgid "File timestamps in the embedded initramfs"
msgstr ""

#: ../../../kbuild/reproducible-builds.rst:26
msgid ""
"If enabled via ``CONFIG_IKHEADERS``, file timestamps of kernel headers "
"embedded in the kernel or respective module, exposed via ``/sys/kernel/"
"kheaders.tar.xz``"
msgstr ""

#: ../../../kbuild/reproducible-builds.rst:30
msgid ""
"By default the timestamp is the current time and in the case of ``kheaders`` "
"the various files' modification times. This must be overridden using the "
"`KBUILD_BUILD_TIMESTAMP`_ variable. If you are building from a git commit, "
"you could use its commit date."
msgstr ""

#: ../../../kbuild/reproducible-builds.rst:35
msgid ""
"The kernel does *not* use the ``__DATE__`` and ``__TIME__`` macros, and "
"enables warnings if they are used.  If you incorporate external code that "
"does use these, you must override the timestamp they correspond to by "
"setting the `SOURCE_DATE_EPOCH`_ environment variable."
msgstr ""

#: ../../../kbuild/reproducible-builds.rst:42
msgid "User, host"
msgstr ""

#: ../../../kbuild/reproducible-builds.rst:44
msgid ""
"The kernel embeds the building user and host names in ``/proc/version``.  "
"These must be overridden using the `KBUILD_BUILD_USER and "
"KBUILD_BUILD_HOST`_ variables.  If you are building from a git commit, you "
"could use its committer address."
msgstr ""

#: ../../../kbuild/reproducible-builds.rst:50
msgid "Absolute filenames"
msgstr ""

#: ../../../kbuild/reproducible-builds.rst:52
msgid ""
"When the kernel is built out-of-tree, debug information may include absolute "
"filenames for the source files.  This must be overridden by including the ``-"
"fdebug-prefix-map`` option in the `KCFLAGS`_ variable."
msgstr ""

#: ../../../kbuild/reproducible-builds.rst:56
msgid ""
"Depending on the compiler used, the ``__FILE__`` macro may also expand to an "
"absolute filename in an out-of-tree build.  Kbuild automatically uses the ``-"
"fmacro-prefix-map`` option to prevent this, if it is supported."
msgstr ""

#: ../../../kbuild/reproducible-builds.rst:61
msgid ""
"The Reproducible Builds web site has more information about these `prefix-"
"map options`_."
msgstr ""

#: ../../../kbuild/reproducible-builds.rst:65
msgid "Generated files in source packages"
msgstr ""

#: ../../../kbuild/reproducible-builds.rst:67
msgid ""
"The build processes for some programs under the ``tools/`` subdirectory do "
"not completely support out-of-tree builds.  This may cause a later source "
"package build using e.g. ``make rpm-pkg`` to include generated files.  You "
"should ensure the source tree is pristine by running ``make mrproper`` or "
"``git clean -d -f -x`` before building a source package."
msgstr ""

#: ../../../kbuild/reproducible-builds.rst:75
msgid "Module signing"
msgstr ""

#: ../../../kbuild/reproducible-builds.rst:77
msgid ""
"If you enable ``CONFIG_MODULE_SIG_ALL``, the default behaviour is to "
"generate a different temporary key for each build, resulting in the modules "
"being unreproducible.  However, including a signing key with your source "
"would presumably defeat the purpose of signing modules."
msgstr ""

#: ../../../kbuild/reproducible-builds.rst:82
msgid ""
"One approach to this is to divide up the build process so that the "
"unreproducible parts can be treated as sources:"
msgstr ""

#: ../../../kbuild/reproducible-builds.rst:85
msgid ""
"Generate a persistent signing key.  Add the certificate for the key to the "
"kernel source."
msgstr ""

#: ../../../kbuild/reproducible-builds.rst:88
msgid ""
"Set the ``CONFIG_SYSTEM_TRUSTED_KEYS`` symbol to include the signing key's "
"certificate, set ``CONFIG_MODULE_SIG_KEY`` to an empty string, and disable "
"``CONFIG_MODULE_SIG_ALL``. Build the kernel and modules."
msgstr ""

#: ../../../kbuild/reproducible-builds.rst:93
msgid ""
"Create detached signatures for the modules, and publish them as sources."
msgstr ""

#: ../../../kbuild/reproducible-builds.rst:96
msgid ""
"Perform a second build that attaches the module signatures.  It can either "
"rebuild the modules or use the output of step 2."
msgstr ""

#: ../../../kbuild/reproducible-builds.rst:100
msgid "Structure randomisation"
msgstr ""

#: ../../../kbuild/reproducible-builds.rst:102
msgid ""
"If you enable ``CONFIG_RANDSTRUCT``, you will need to pre-generate the "
"random seed in ``scripts/basic/randstruct.seed`` so the same value is used "
"by each build. See ``scripts/gen-randstruct-seed.sh`` for details."
msgstr ""

#: ../../../kbuild/reproducible-builds.rst:108
msgid "Debug info conflicts"
msgstr ""

#: ../../../kbuild/reproducible-builds.rst:110
msgid ""
"This is not a problem of unreproducibility, but of generated files being "
"*too* reproducible."
msgstr ""

#: ../../../kbuild/reproducible-builds.rst:113
msgid ""
"Once you set all the necessary variables for a reproducible build, a vDSO's "
"debug information may be identical even for different kernel versions.  This "
"can result in file conflicts between debug information packages for the "
"different kernel versions."
msgstr ""

#: ../../../kbuild/reproducible-builds.rst:118
msgid ""
"To avoid this, you can make the vDSO different for different kernel versions "
"by including an arbitrary string of \"salt\" in it. This is specified by the "
"Kconfig symbol ``CONFIG_BUILD_SALT``."
msgstr ""

#: ../../../kbuild/reproducible-builds.rst:123
msgid "Git"
msgstr ""

#: ../../../kbuild/reproducible-builds.rst:125
msgid ""
"Uncommitted changes or different commit ids in git can also lead to "
"different compilation results. For example, after executing ``git reset "
"HEAD^``, even if the code is the same, the ``include/config/kernel.release`` "
"generated during compilation will be different, which will eventually lead "
"to binary differences. See ``scripts/setlocalversion`` for details."
msgstr ""
