# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-14 08:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../PCI/endpoint/pci-endpoint-cfs.rst:5
msgid "Configuring PCI Endpoint Using CONFIGFS"
msgstr ""

#: ../../../PCI/endpoint/pci-endpoint-cfs.rst:0
msgid "Author"
msgstr ""

#: ../../../PCI/endpoint/pci-endpoint-cfs.rst:7
msgid "Kishon Vijay Abraham I <kishon@ti.com>"
msgstr ""

#: ../../../PCI/endpoint/pci-endpoint-cfs.rst:9
msgid ""
"The PCI Endpoint Core exposes configfs entry (pci_ep) to configure the PCI "
"endpoint function and to bind the endpoint function with the endpoint "
"controller. (For introducing other mechanisms to configure the PCI Endpoint "
"Function refer to [1])."
msgstr ""

#: ../../../PCI/endpoint/pci-endpoint-cfs.rst:15
msgid "Mounting configfs"
msgstr ""

#: ../../../PCI/endpoint/pci-endpoint-cfs.rst:17
msgid ""
"The PCI Endpoint Core layer creates pci_ep directory in the mounted configfs "
"directory. configfs can be mounted using the following command::"
msgstr ""

#: ../../../PCI/endpoint/pci-endpoint-cfs.rst:23
msgid "Directory Structure"
msgstr ""

#: ../../../PCI/endpoint/pci-endpoint-cfs.rst:25
msgid ""
"The pci_ep configfs has two directories at its root: controllers and "
"functions. Every EPC device present in the system will have an entry in the "
"*controllers* directory and every EPF driver present in the system will have "
"an entry in the *functions* directory. ::"
msgstr ""

#: ../../../PCI/endpoint/pci-endpoint-cfs.rst:36
msgid "Creating EPF Device"
msgstr ""

#: ../../../PCI/endpoint/pci-endpoint-cfs.rst:38
msgid ""
"Every registered EPF driver will be listed in controllers directory. The "
"entries corresponding to EPF driver will be created by the EPF core. ::"
msgstr ""

#: ../../../PCI/endpoint/pci-endpoint-cfs.rst:51
msgid ""
"In order to create a <EPF device> of the type probed by <EPF Driver>, the "
"user has to create a directory inside <EPF DriverN>."
msgstr ""

#: ../../../PCI/endpoint/pci-endpoint-cfs.rst:54
msgid ""
"Every <EPF device> directory consists of the following entries that can be "
"used to configure the standard configuration header of the endpoint "
"function. (These entries are created by the framework when any new <EPF "
"Device> is created) ::"
msgstr ""

#: ../../../PCI/endpoint/pci-endpoint-cfs.rst:78
msgid ""
"If an EPF device has to be associated with 2 EPCs (like in the case of Non-"
"transparent bridge), symlink of endpoint controller connected to primary "
"interface should be added in 'primary' directory and symlink of endpoint "
"controller connected to secondary interface should be added in 'secondary' "
"directory."
msgstr ""

#: ../../../PCI/endpoint/pci-endpoint-cfs.rst:84
msgid ""
"The <EPF Device> directory can have a list of symbolic links (<Symlink EPF "
"Device 31>) to other <EPF Device>. These symbolic links should be created by "
"the user to represent the virtual functions that are bound to the physical "
"function. In the above directory structure <EPF Device 11> is a physical "
"function and <EPF Device 31> is a virtual function. An EPF device once it's "
"linked to another EPF device, cannot be linked to an EPC device."
msgstr ""

#: ../../../PCI/endpoint/pci-endpoint-cfs.rst:92
msgid "EPC Device"
msgstr ""

#: ../../../PCI/endpoint/pci-endpoint-cfs.rst:94
msgid ""
"Every registered EPC device will be listed in controllers directory. The "
"entries corresponding to EPC device will be created by the EPC core. ::"
msgstr ""

#: ../../../PCI/endpoint/pci-endpoint-cfs.rst:108
msgid ""
"The <EPC Device> directory will have a list of symbolic links to <EPF "
"Device>. These symbolic links should be created by the user to represent the "
"functions present in the endpoint device. Only <EPF Device> that represents "
"a physical function can be linked to an EPC device."
msgstr ""

#: ../../../PCI/endpoint/pci-endpoint-cfs.rst:113
msgid ""
"The <EPC Device> directory will also have a *start* field. Once \"1\" is "
"written to this field, the endpoint device will be ready to establish the "
"link with the host. This is usually done after all the EPF devices are "
"created and linked with the EPC device. ::"
msgstr ""

#: ../../../PCI/endpoint/pci-endpoint-cfs.rst:138
msgid "[1] Documentation/PCI/endpoint/pci-endpoint.rst"
msgstr ""
