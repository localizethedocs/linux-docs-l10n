# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../gpu/afbc.rst:5
msgid "Arm Framebuffer Compression (AFBC)"
msgstr ""

#: ../../../gpu/afbc.rst:7
msgid ""
"AFBC is a proprietary lossless image compression protocol and format. It "
"provides fine-grained random access and minimizes the amount of data "
"transferred between IP blocks."
msgstr ""

#: ../../../gpu/afbc.rst:11
msgid ""
"AFBC can be enabled on drivers which support it via use of the AFBC format "
"modifiers defined in drm_fourcc.h. See DRM_FORMAT_MOD_ARM_AFBC(*)."
msgstr ""

#: ../../../gpu/afbc.rst:14
msgid ""
"All users of the AFBC modifiers must follow the usage guidelines laid out in "
"this document, to ensure compatibility across different AFBC producers and "
"consumers."
msgstr ""

#: ../../../gpu/afbc.rst:19
msgid "Components and Ordering"
msgstr ""

#: ../../../gpu/afbc.rst:21
msgid ""
"AFBC streams can contain several components - where a component corresponds "
"to a color channel (i.e. R, G, B, X, A, Y, Cb, Cr). The assignment of input/"
"output color channels must be consistent between the encoder and the decoder "
"for correct operation, otherwise the consumer will interpret the decoded "
"data incorrectly."
msgstr ""

#: ../../../gpu/afbc.rst:27
msgid ""
"Furthermore, when the lossless colorspace transform is used "
"(AFBC_FORMAT_MOD_YTR, which should be enabled for RGB buffers for maximum "
"compression efficiency), the component order must be:"
msgstr ""

#: ../../../gpu/afbc.rst:31
msgid "Component 0: R"
msgstr ""

#: ../../../gpu/afbc.rst:32
msgid "Component 1: G"
msgstr ""

#: ../../../gpu/afbc.rst:33
msgid "Component 2: B"
msgstr ""

#: ../../../gpu/afbc.rst:35
msgid ""
"The component ordering is communicated via the fourcc code in the fourcc:"
"modifier pair. In general, component '0' is considered to reside in the "
"least-significant bits of the corresponding linear format. For example, "
"COMP(bits):"
msgstr ""

#: ../../../gpu/afbc.rst:40 ../../../gpu/afbc.rst:133
msgid "DRM_FORMAT_ABGR8888"
msgstr ""

#: ../../../gpu/afbc.rst:42 ../../../gpu/afbc.rst:49 ../../../gpu/afbc.rst:65
#: ../../../gpu/afbc.rst:136 ../../../gpu/afbc.rst:144
msgid "Component 0: R(8)"
msgstr ""

#: ../../../gpu/afbc.rst:43 ../../../gpu/afbc.rst:50 ../../../gpu/afbc.rst:66
#: ../../../gpu/afbc.rst:137 ../../../gpu/afbc.rst:145
msgid "Component 1: G(8)"
msgstr ""

#: ../../../gpu/afbc.rst:44 ../../../gpu/afbc.rst:51 ../../../gpu/afbc.rst:67
#: ../../../gpu/afbc.rst:138 ../../../gpu/afbc.rst:146
msgid "Component 2: B(8)"
msgstr ""

#: ../../../gpu/afbc.rst:45 ../../../gpu/afbc.rst:139
msgid "Component 3: A(8)"
msgstr ""

#: ../../../gpu/afbc.rst:47 ../../../gpu/afbc.rst:141
msgid "DRM_FORMAT_BGR888"
msgstr ""

#: ../../../gpu/afbc.rst:53 ../../../gpu/afbc.rst:177
msgid "DRM_FORMAT_YUYV"
msgstr ""

#: ../../../gpu/afbc.rst:55 ../../../gpu/afbc.rst:96 ../../../gpu/afbc.rst:104
#: ../../../gpu/afbc.rst:166 ../../../gpu/afbc.rst:180
#: ../../../gpu/afbc.rst:187 ../../../gpu/afbc.rst:210
#: ../../../gpu/afbc.rst:224
msgid "Component 0: Y(8)"
msgstr ""

#: ../../../gpu/afbc.rst:56 ../../../gpu/afbc.rst:97 ../../../gpu/afbc.rst:181
msgid "Component 1: Cb(8, 2x1 subsampled)"
msgstr ""

#: ../../../gpu/afbc.rst:57 ../../../gpu/afbc.rst:98 ../../../gpu/afbc.rst:182
msgid "Component 2: Cr(8, 2x1 subsampled)"
msgstr ""

#: ../../../gpu/afbc.rst:59
msgid ""
"In AFBC, 'X' components are not treated any differently from any other "
"component. Therefore, an AFBC buffer with fourcc DRM_FORMAT_XBGR8888 encodes "
"with 4 components, like so:"
msgstr ""

#: ../../../gpu/afbc.rst:63
msgid "DRM_FORMAT_XBGR8888"
msgstr ""

#: ../../../gpu/afbc.rst:68
msgid "Component 3: X(8)"
msgstr ""

#: ../../../gpu/afbc.rst:70
msgid ""
"Please note, however, that the inclusion of a \"wasted\" 'X' channel is bad "
"for compression efficiency, and so it's recommended to avoid formats "
"containing 'X' bits. If a fourth component is required/expected by the "
"encoder/decoder, then it is recommended to instead use an equivalent format "
"with alpha, setting all alpha bits to '1'. If there is no requirement for a "
"fourth component, then a format which doesn't include alpha can be used, e."
"g. DRM_FORMAT_BGR888."
msgstr ""

#: ../../../gpu/afbc.rst:79
msgid "Number of Planes"
msgstr ""

#: ../../../gpu/afbc.rst:81
msgid ""
"Formats which are typically multi-planar in linear layouts (e.g. YUV 420), "
"can be encoded into one, or multiple, AFBC planes. As with component order, "
"the encoder and decoder must agree about the number of planes in order to "
"correctly decode the buffer. The fourcc code is used to determine the number "
"of encoded planes in an AFBC buffer, matching the number of planes for the "
"linear (unmodified) format. Within each plane, the component ordering also "
"follows the fourcc code:"
msgstr ""

#: ../../../gpu/afbc.rst:90
msgid "For example:"
msgstr ""

#: ../../../gpu/afbc.rst:92
msgid "DRM_FORMAT_YUYV: nplanes = 1"
msgstr ""

#: ../../../gpu/afbc.rst:94 ../../../gpu/afbc.rst:102
msgid "Plane 0:"
msgstr ""

#: ../../../gpu/afbc.rst:100
msgid "DRM_FORMAT_NV12: nplanes = 2"
msgstr ""

#: ../../../gpu/afbc.rst:106
msgid "Plane 1:"
msgstr ""

#: ../../../gpu/afbc.rst:108 ../../../gpu/afbc.rst:189
msgid "Component 0: Cb(8, 2x1 subsampled)"
msgstr ""

#: ../../../gpu/afbc.rst:109 ../../../gpu/afbc.rst:190
msgid "Component 1: Cr(8, 2x1 subsampled)"
msgstr ""

#: ../../../gpu/afbc.rst:112
msgid "Cross-device interoperability"
msgstr ""

#: ../../../gpu/afbc.rst:114
msgid ""
"For maximum compatibility across devices, the table below defines canonical "
"formats for use between AFBC-enabled devices. Formats which are listed here "
"must be used exactly as specified when using the AFBC modifiers. Formats "
"which are not listed should be avoided."
msgstr ""

#: ../../../gpu/afbc.rst:119
msgid "AFBC formats"
msgstr ""

#: ../../../gpu/afbc.rst:121
msgid "Fourcc code"
msgstr ""

#: ../../../gpu/afbc.rst:122
msgid "Description"
msgstr ""

#: ../../../gpu/afbc.rst:123
msgid "Planes/Components"
msgstr ""

#: ../../../gpu/afbc.rst:125
msgid "DRM_FORMAT_ABGR2101010"
msgstr ""

#: ../../../gpu/afbc.rst:126
msgid "10-bit per component RGB, with 2-bit alpha"
msgstr ""

#: ../../../gpu/afbc.rst:127 ../../../gpu/afbc.rst:135
#: ../../../gpu/afbc.rst:157
msgid "Plane 0: 4 components"
msgstr ""

#: ../../../gpu/afbc.rst:128
msgid "Component 0: R(10)"
msgstr ""

#: ../../../gpu/afbc.rst:129
msgid "Component 1: G(10)"
msgstr ""

#: ../../../gpu/afbc.rst:130
msgid "Component 2: B(10)"
msgstr ""

#: ../../../gpu/afbc.rst:131
msgid "Component 3: A(2)"
msgstr ""

#: ../../../gpu/afbc.rst:134
msgid "8-bit per component RGB, with 8-bit alpha"
msgstr ""

#: ../../../gpu/afbc.rst:142
msgid "8-bit per component RGB"
msgstr ""

#: ../../../gpu/afbc.rst:143 ../../../gpu/afbc.rst:150
#: ../../../gpu/afbc.rst:165 ../../../gpu/afbc.rst:172
#: ../../../gpu/afbc.rst:179 ../../../gpu/afbc.rst:194
#: ../../../gpu/afbc.rst:209 ../../../gpu/afbc.rst:216
msgid "Plane 0: 3 components"
msgstr ""

#: ../../../gpu/afbc.rst:148
msgid "DRM_FORMAT_BGR565"
msgstr ""

#: ../../../gpu/afbc.rst:149
msgid "5/6-bit per component RGB"
msgstr ""

#: ../../../gpu/afbc.rst:151 ../../../gpu/afbc.rst:158
msgid "Component 0: R(5)"
msgstr ""

#: ../../../gpu/afbc.rst:152
msgid "Component 1: G(6)"
msgstr ""

#: ../../../gpu/afbc.rst:153 ../../../gpu/afbc.rst:160
msgid "Component 2: B(5)"
msgstr ""

#: ../../../gpu/afbc.rst:155
msgid "DRM_FORMAT_ABGR1555"
msgstr ""

#: ../../../gpu/afbc.rst:156
msgid "5-bit per component RGB, with 1-bit alpha"
msgstr ""

#: ../../../gpu/afbc.rst:159
msgid "Component 1: G(5)"
msgstr ""

#: ../../../gpu/afbc.rst:161
msgid "Component 3: A(1)"
msgstr ""

#: ../../../gpu/afbc.rst:163
msgid "DRM_FORMAT_VUY888"
msgstr ""

#: ../../../gpu/afbc.rst:164
msgid "8-bit per component YCbCr 444, single plane"
msgstr ""

#: ../../../gpu/afbc.rst:167
msgid "Component 1: Cb(8)"
msgstr ""

#: ../../../gpu/afbc.rst:168
msgid "Component 2: Cr(8)"
msgstr ""

#: ../../../gpu/afbc.rst:170
msgid "DRM_FORMAT_VUY101010"
msgstr ""

#: ../../../gpu/afbc.rst:171
msgid "10-bit per component YCbCr 444, single plane"
msgstr ""

#: ../../../gpu/afbc.rst:173 ../../../gpu/afbc.rst:195
#: ../../../gpu/afbc.rst:202 ../../../gpu/afbc.rst:217
#: ../../../gpu/afbc.rst:232
msgid "Component 0: Y(10)"
msgstr ""

#: ../../../gpu/afbc.rst:174
msgid "Component 1: Cb(10)"
msgstr ""

#: ../../../gpu/afbc.rst:175
msgid "Component 2: Cr(10)"
msgstr ""

#: ../../../gpu/afbc.rst:178
msgid "8-bit per component YCbCr 422, single plane"
msgstr ""

#: ../../../gpu/afbc.rst:184
msgid "DRM_FORMAT_NV16"
msgstr ""

#: ../../../gpu/afbc.rst:185
msgid "8-bit per component YCbCr 422, two plane"
msgstr ""

#: ../../../gpu/afbc.rst:186 ../../../gpu/afbc.rst:201
#: ../../../gpu/afbc.rst:223 ../../../gpu/afbc.rst:231
msgid "Plane 0: 1 component"
msgstr ""

#: ../../../gpu/afbc.rst:188 ../../../gpu/afbc.rst:203
#: ../../../gpu/afbc.rst:225 ../../../gpu/afbc.rst:233
msgid "Plane 1: 2 components"
msgstr ""

#: ../../../gpu/afbc.rst:192
msgid "DRM_FORMAT_Y210"
msgstr ""

#: ../../../gpu/afbc.rst:193
msgid "10-bit per component YCbCr 422, single plane"
msgstr ""

#: ../../../gpu/afbc.rst:196
msgid "Component 1: Cb(10, 2x1 subsampled)"
msgstr ""

#: ../../../gpu/afbc.rst:197
msgid "Component 2: Cr(10, 2x1 subsampled)"
msgstr ""

#: ../../../gpu/afbc.rst:199
msgid "DRM_FORMAT_P210"
msgstr ""

#: ../../../gpu/afbc.rst:200
msgid "10-bit per component YCbCr 422, two plane"
msgstr ""

#: ../../../gpu/afbc.rst:204
msgid "Component 0: Cb(10, 2x1 subsampled)"
msgstr ""

#: ../../../gpu/afbc.rst:205
msgid "Component 1: Cr(10, 2x1 subsampled)"
msgstr ""

#: ../../../gpu/afbc.rst:207
msgid "DRM_FORMAT_YUV420_8BIT"
msgstr ""

#: ../../../gpu/afbc.rst:208
msgid "8-bit per component YCbCr 420, single plane"
msgstr ""

#: ../../../gpu/afbc.rst:211
msgid "Component 1: Cb(8, 2x2 subsampled)"
msgstr ""

#: ../../../gpu/afbc.rst:212
msgid "Component 2: Cr(8, 2x2 subsampled)"
msgstr ""

#: ../../../gpu/afbc.rst:214
msgid "DRM_FORMAT_YUV420_10BIT"
msgstr ""

#: ../../../gpu/afbc.rst:215
msgid "10-bit per component YCbCr 420, single plane"
msgstr ""

#: ../../../gpu/afbc.rst:218
msgid "Component 1: Cb(10, 2x2 subsampled)"
msgstr ""

#: ../../../gpu/afbc.rst:219
msgid "Component 2: Cr(10, 2x2 subsampled)"
msgstr ""

#: ../../../gpu/afbc.rst:221
msgid "DRM_FORMAT_NV12"
msgstr ""

#: ../../../gpu/afbc.rst:222
msgid "8-bit per component YCbCr 420, two plane"
msgstr ""

#: ../../../gpu/afbc.rst:226
msgid "Component 0: Cb(8, 2x2 subsampled)"
msgstr ""

#: ../../../gpu/afbc.rst:227
msgid "Component 1: Cr(8, 2x2 subsampled)"
msgstr ""

#: ../../../gpu/afbc.rst:229
msgid "DRM_FORMAT_P010"
msgstr ""

#: ../../../gpu/afbc.rst:230
msgid "10-bit per component YCbCr 420, two plane"
msgstr ""

#: ../../../gpu/afbc.rst:234
msgid "Component 0: Cb(10, 2x2 subsampled)"
msgstr ""

#: ../../../gpu/afbc.rst:235
msgid "Component 1: Cr(10, 2x2 subsampled)"
msgstr ""
