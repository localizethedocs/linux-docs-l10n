# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-21 08:55+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../gpu/vga-switcheroo.rst:5
msgid "VGA Switcheroo"
msgstr ""

#: ../../../gpu/vga-switcheroo:7: drivers/gpu/vga/vga_switcheroo.c:49
msgid ""
"vga_switcheroo is the Linux subsystem for laptop hybrid graphics. These come "
"in two flavors:"
msgstr ""

#: ../../../gpu/vga-switcheroo:7: drivers/gpu/vga/vga_switcheroo.c:52
msgid ""
"muxed: Dual GPUs with a multiplexer chip to switch outputs between GPUs."
msgstr ""

#: ../../../gpu/vga-switcheroo:7: drivers/gpu/vga/vga_switcheroo.c:53
msgid ""
"muxless: Dual GPUs but only one of them is connected to outputs. The other "
"one is merely used to offload rendering, its results are copied over PCIe "
"into the framebuffer. On Linux this is supported with DRI PRIME."
msgstr ""

#: ../../../gpu/vga-switcheroo:7: drivers/gpu/vga/vga_switcheroo.c:58
msgid ""
"Hybrid graphics started to appear in the late Naughties and were initially "
"all muxed. Newer laptops moved to a muxless architecture for cost reasons. A "
"notable exception is the MacBook Pro which continues to use a mux. Muxes "
"come with varying capabilities: Some switch only the panel, others can also "
"switch external displays. Some switch all display pins at once while others "
"can switch just the DDC lines. (To allow EDID probing for the inactive GPU.) "
"Also, muxes are often used to cut power to the discrete GPU while it is not "
"used."
msgstr ""

#: ../../../gpu/vga-switcheroo:7: drivers/gpu/vga/vga_switcheroo.c:67
msgid ""
"DRM drivers register GPUs with vga_switcheroo, these are henceforth called "
"clients. The mux is called the handler. Muxless machines also register a "
"handler to control the power state of the discrete GPU, its ->switchto "
"callback is a no-op for obvious reasons. The discrete GPU is often equipped "
"with an HDA controller for the HDMI/DP audio signal, this will also register "
"as a client so that vga_switcheroo can take care of the correct suspend/"
"resume order when changing the discrete GPU's power state. In total there "
"can thus be up to three clients: Two vga clients (GPUs) and one audio client "
"(on the discrete GPU). The code is mostly prepared to support machines with "
"more than two GPUs should they become available."
msgstr ""

#: ../../../gpu/vga-switcheroo:7: drivers/gpu/vga/vga_switcheroo.c:78
msgid ""
"The GPU to which the outputs are currently switched is called the active "
"client in vga_switcheroo parlance. The GPU not in use is the inactive "
"client. When the inactive client's DRM driver is loaded, it will be unable "
"to probe the panel's EDID and hence depends on VBIOS to provide its display "
"modes. If the VBIOS modes are bogus or if there is no VBIOS at all (which is "
"common on the MacBook Pro), a client may alternatively request that the DDC "
"lines are temporarily switched to it, provided that the handler supports "
"this. Switching only the DDC lines and not the entire output avoids "
"unnecessary flickering."
msgstr ""

#: ../../../gpu/vga-switcheroo.rst:11
msgid "Modes of Use"
msgstr ""

#: ../../../gpu/vga-switcheroo.rst:14
msgid "Manual switching and manual power control"
msgstr ""

#: ../../../gpu/vga-switcheroo:16: drivers/gpu/vga/vga_switcheroo.c:611
msgid ""
"In this mode of use, the file /sys/kernel/debug/vgaswitcheroo/switch can be "
"read to retrieve the current vga_switcheroo state and commands can be "
"written to it to change the state. The file appears as soon as two GPU "
"drivers and one handler have registered with vga_switcheroo. The following "
"commands are understood:"
msgstr ""

#: ../../../gpu/vga-switcheroo:16: drivers/gpu/vga/vga_switcheroo.c:617
msgid "OFF: Power off the device not in use."
msgstr ""

#: ../../../gpu/vga-switcheroo:16: drivers/gpu/vga/vga_switcheroo.c:618
msgid "ON: Power on the device not in use."
msgstr ""

#: ../../../gpu/vga-switcheroo:16: drivers/gpu/vga/vga_switcheroo.c:619
msgid ""
"IGD: Switch to the integrated graphics device. Power on the integrated GPU "
"if necessary, power off the discrete GPU. Prerequisite is that no user space "
"processes (e.g. Xorg, alsactl) have opened device files of the GPUs or the "
"audio client. If the switch fails, the user may invoke lsof(8) or fuser(1) "
"on /dev/dri/ and /dev/snd/controlC1 to identify processes blocking the "
"switch."
msgstr ""

#: ../../../gpu/vga-switcheroo:16: drivers/gpu/vga/vga_switcheroo.c:625
msgid "DIS: Switch to the discrete graphics device."
msgstr ""

#: ../../../gpu/vga-switcheroo:16: drivers/gpu/vga/vga_switcheroo.c:626
msgid ""
"DIGD: Delayed switch to the integrated graphics device. This will perform "
"the switch once the last user space process has closed the device files of "
"the GPUs and the audio client."
msgstr ""

#: ../../../gpu/vga-switcheroo:16: drivers/gpu/vga/vga_switcheroo.c:629
msgid "DDIS: Delayed switch to the discrete graphics device."
msgstr ""

#: ../../../gpu/vga-switcheroo:16: drivers/gpu/vga/vga_switcheroo.c:630
msgid ""
"MIGD: Mux-only switch to the integrated graphics device. Does not remap "
"console or change the power state of either gpu. If the integrated GPU is "
"currently off, the screen will turn black. If it is on, the screen will show "
"whatever happens to be in VRAM. Either way, the user has to blindly enter "
"the command to switch back."
msgstr ""

#: ../../../gpu/vga-switcheroo:16: drivers/gpu/vga/vga_switcheroo.c:635
msgid "MDIS: Mux-only switch to the discrete graphics device."
msgstr ""

#: ../../../gpu/vga-switcheroo:16: drivers/gpu/vga/vga_switcheroo.c:637
msgid ""
"For GPUs whose power state is controlled by the driver's runtime pm, the ON "
"and OFF commands are a no-op (see next section)."
msgstr ""

#: ../../../gpu/vga-switcheroo:16: drivers/gpu/vga/vga_switcheroo.c:640
msgid ""
"For muxless machines, the IGD/DIS, DIGD/DDIS and MIGD/MDIS commands should "
"not be used."
msgstr ""

#: ../../../gpu/vga-switcheroo.rst:20
msgid "Driver power control"
msgstr ""

#: ../../../gpu/vga-switcheroo:22: drivers/gpu/vga/vga_switcheroo.c:966
msgid ""
"In this mode of use, the discrete GPU automatically powers up and down at "
"the discretion of the driver's runtime pm. On muxed machines, the user may "
"still influence the muxer state by way of the debugfs interface, however the "
"ON and OFF commands become a no-op for the discrete GPU."
msgstr ""

#: ../../../gpu/vga-switcheroo:22: drivers/gpu/vga/vga_switcheroo.c:971
msgid ""
"This mode is the default on Nvidia HybridPower/Optimus and ATI PowerXpress. "
"Specifying nouveau.runpm=0, radeon.runpm=0 or amdgpu.runpm=0 on the kernel "
"command line disables it."
msgstr ""

#: ../../../gpu/vga-switcheroo:22: drivers/gpu/vga/vga_switcheroo.c:975
msgid ""
"After the GPU has been suspended, the handler needs to be called to cut "
"power to the GPU. Likewise it needs to reinstate power before the GPU can "
"resume. This is achieved by vga_switcheroo_init_domain_pm_ops(), which "
"augments the GPU's suspend/resume functions by the requisite calls to the "
"handler."
msgstr ""

#: ../../../gpu/vga-switcheroo:22: drivers/gpu/vga/vga_switcheroo.c:981
msgid ""
"When the audio device resumes, the GPU needs to be woken. This is achieved "
"by a PCI quirk which calls device_link_add() to declare a dependency on the "
"GPU. That way, the GPU is kept awake whenever and as long as the audio "
"device is in use."
msgstr ""

#: ../../../gpu/vga-switcheroo:22: drivers/gpu/vga/vga_switcheroo.c:986
msgid ""
"On muxed machines, if the mux is initially switched to the discrete GPU, the "
"user ends up with a black screen when the GPU powers down after boot. As a "
"workaround, the mux is forced to the integrated GPU on runtime suspend, cf. "
"https://bugs.freedesktop.org/show_bug.cgi?id=75917"
msgstr ""

#: ../../../gpu/vga-switcheroo.rst:26
msgid "API"
msgstr ""

#: ../../../gpu/vga-switcheroo.rst:29 ../../../gpu/vga-switcheroo.rst:95
msgid "Public functions"
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:226
msgid "register handler"
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:230
#: drivers/gpu/vga/vga_switcheroo.c:261 drivers/gpu/vga/vga_switcheroo.c:282
#: drivers/gpu/vga/vga_switcheroo.c:330 drivers/gpu/vga/vga_switcheroo.c:354
#: drivers/gpu/vga/vga_switcheroo.c:432 drivers/gpu/vga/vga_switcheroo.c:472
#: drivers/gpu/vga/vga_switcheroo.c:497 drivers/gpu/vga/vga_switcheroo.c:524
#: drivers/gpu/vga/vga_switcheroo.c:545 drivers/gpu/vga/vga_switcheroo.c:580
#: drivers/gpu/vga/vga_switcheroo.c:931 drivers/gpu/vga/vga_switcheroo.c:1049
#: ../../../gpu/vga-switcheroo:97: include/linux/apple-gmux.h:90
#: include/linux/apple-gmux.h:157
msgid "**Parameters**"
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:232
msgid "``const struct vga_switcheroo_handler *handler``"
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:227
#: ../../../gpu/vga-switcheroo:37: include/linux/vga_switcheroo.h:94
msgid "handler callbacks"
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:229
msgid "``enum vga_switcheroo_handler_flags_t handler_flags``"
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:228
msgid "handler flags"
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:3
#: drivers/gpu/vga/vga_switcheroo.c:230 drivers/gpu/vga/vga_switcheroo.c:332
#: drivers/gpu/vga/vga_switcheroo.c:355 drivers/gpu/vga/vga_switcheroo.c:431
#: drivers/gpu/vga/vga_switcheroo.c:471 drivers/gpu/vga/vga_switcheroo.c:496
#: drivers/gpu/vga/vga_switcheroo.c:524 drivers/gpu/vga/vga_switcheroo.c:544
#: drivers/gpu/vga/vga_switcheroo.c:579 drivers/gpu/vga/vga_switcheroo.c:1049
#: ../../../gpu/vga-switcheroo:37: include/linux/vga_switcheroo.h:115
#: ../../../gpu/vga-switcheroo:40: include/linux/vga_switcheroo.h:140
#: ../../../gpu/vga-switcheroo:46: include/linux/vga_switcheroo.h:58
#: ../../../gpu/vga-switcheroo:49: include/linux/vga_switcheroo.h:96
#: ../../../gpu/vga-switcheroo:52: include/linux/vga_switcheroo.h:76
#: ../../../gpu/vga-switcheroo:58: drivers/gpu/vga/vga_switcheroo.c:148
#: ../../../gpu/vga-switcheroo:61: drivers/gpu/vga/vga_switcheroo.c:111
#: ../../../gpu/vga-switcheroo:97: include/linux/apple-gmux.h:3
#: include/linux/apple-gmux.h:91
msgid "**Description**"
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:229
msgid ""
"Register handler. Enable vga_switcheroo if two vga clients have already "
"registered."
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:232
#: drivers/gpu/vga/vga_switcheroo.c:281 drivers/gpu/vga/vga_switcheroo.c:336
#: drivers/gpu/vga/vga_switcheroo.c:358 drivers/gpu/vga/vga_switcheroo.c:435
#: drivers/gpu/vga/vga_switcheroo.c:473 drivers/gpu/vga/vga_switcheroo.c:549
#: drivers/gpu/vga/vga_switcheroo.c:582 drivers/gpu/vga/vga_switcheroo.c:930
#: ../../../gpu/vga-switcheroo:97: include/linux/apple-gmux.h:94
#: include/linux/apple-gmux.h:157
msgid "**Return**"
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:233
msgid "0 on success, -EINVAL if a handler was already registered."
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:257
msgid "unregister handler"
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:263
#: drivers/gpu/vga/vga_switcheroo.c:284 drivers/gpu/vga/vga_switcheroo.c:933
#: ../../../gpu/vga-switcheroo:97: include/linux/apple-gmux.h:159
msgid "``void``"
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:1
#: ../../../gpu/vga-switcheroo:97: include/linux/apple-gmux.h:1
msgid "no arguments"
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:258
msgid "Unregister handler. Disable vga_switcheroo."
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:278
msgid "obtain handler flags"
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:279
msgid "Helper for clients to obtain the handler flags bitmask."
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:282
msgid ""
"Handler flags. A value of 0 means that no handler is registered or that the "
"handler has no special capabilities."
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:326
msgid "register vga client"
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:332
#: drivers/gpu/vga/vga_switcheroo.c:356 drivers/gpu/vga/vga_switcheroo.c:434
#: drivers/gpu/vga/vga_switcheroo.c:474 drivers/gpu/vga/vga_switcheroo.c:499
#: drivers/gpu/vga/vga_switcheroo.c:526 drivers/gpu/vga/vga_switcheroo.c:547
#: drivers/gpu/vga/vga_switcheroo.c:582
msgid "``struct pci_dev *pdev``"
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:327
#: drivers/gpu/vga/vga_switcheroo.c:351 drivers/gpu/vga/vga_switcheroo.c:429
#: drivers/gpu/vga/vga_switcheroo.c:469 drivers/gpu/vga/vga_switcheroo.c:494
#: drivers/gpu/vga/vga_switcheroo.c:521 drivers/gpu/vga/vga_switcheroo.c:542
#: drivers/gpu/vga/vga_switcheroo.c:577 ../../../gpu/vga-switcheroo:61:
#: drivers/gpu/vga/vga_switcheroo.c:95
msgid "client pci device"
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:329
#: drivers/gpu/vga/vga_switcheroo.c:353
msgid "``const struct vga_switcheroo_client_ops *ops``"
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:328
#: drivers/gpu/vga/vga_switcheroo.c:352 ../../../gpu/vga-switcheroo:40:
#: include/linux/vga_switcheroo.h:126 ../../../gpu/vga-switcheroo:61:
#: drivers/gpu/vga/vga_switcheroo.c:99
msgid "client callbacks"
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:330
msgid "``bool driver_power_control``"
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:329
msgid "whether power state is controlled by the driver's runtime pm"
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:331
msgid ""
"Register vga client (GPU). Enable vga_switcheroo if another GPU and a "
"handler have already registered. The power state of the client is assumed to "
"be ON. Beforehand, vga_switcheroo_client_probe_defer() shall be called to "
"ensure that all prerequisites are met."
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:337
msgid "0 on success, -ENOMEM on memory allocation error."
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:350
msgid "register audio client"
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:354
msgid "``struct pci_dev *vga_dev``"
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:353
msgid "pci device which is bound to current audio client"
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:354
msgid ""
"Register audio client (audio device on a GPU). The client is assumed to use "
"runtime PM. Beforehand, vga_switcheroo_client_probe_defer() shall be called "
"to ensure that all prerequisites are met."
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:359
msgid ""
"0 on success, -ENOMEM on memory allocation error, -EINVAL on getting client "
"id error."
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:428
msgid "whether to defer probing a given client"
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:430
msgid ""
"Determine whether any prerequisites are not fulfilled to probe a given "
"client. Drivers shall invoke this early on in their ->probe callback and "
"return ``-EPROBE_DEFER`` if it evaluates to ``true``. Thou shalt not "
"register the client ere thou hast called this."
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:436
msgid "``true`` if probing should be deferred, otherwise ``false``."
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:468
msgid "obtain power state of a given client"
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:470
msgid ""
"Obtain power state of a given client as seen from vga_switcheroo. The "
"function is only called from hda_intel.c."
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:474
msgid "Power state."
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:493
msgid "unregister client"
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:495
msgid ""
"Unregister client. Disable vga_switcheroo if this is a vga client (GPU)."
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:520
msgid "set framebuffer of a given client"
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:523
msgid "``struct fb_info *info``"
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:522
msgid "framebuffer"
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:523
msgid ""
"Set framebuffer of a given client. The console will be remapped to this on "
"switching."
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:541
msgid "temporarily switch DDC lines to a given client"
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:543
msgid ""
"Temporarily switch DDC lines to the client identified by **pdev** (but leave "
"the outputs otherwise switched to where they are). This allows the inactive "
"client to probe EDID. The DDC lines must afterwards be switched back by "
"calling vga_switcheroo_unlock_ddc(), even if this function returns an error."
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:550
msgid ""
"Previous DDC owner on success or a negative int on error. Specifically, ``-"
"ENODEV`` if no handler has registered or if the handler does not support "
"switching the DDC lines. Also, a negative value returned by the handler is "
"propagated back to the caller. The return value has merely an informational "
"purpose for any caller which might be interested in it. It is acceptable to "
"ignore the return value and simply rely on the result of the subsequent EDID "
"probe, which will be ``NULL`` if DDC switching failed."
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:576
msgid "switch DDC lines back to previous owner"
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:578
msgid ""
"Switch DDC lines back to the previous owner after calling "
"vga_switcheroo_lock_ddc(). This must be called even if "
"vga_switcheroo_lock_ddc() returned an error."
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:583
msgid ""
"Previous DDC owner on success (i.e. the client identifier of **pdev**) or a "
"negative int on error. Specifically, ``-ENODEV`` if no handler has "
"registered or if the handler does not support switching the DDC lines. Also, "
"a negative value returned by the handler is propagated back to the caller. "
"Finally, invoking this function without calling vga_switcheroo_lock_ddc() "
"first is not allowed and will result in ``-EINVAL``."
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:927
msgid "helper for delayed switching"
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:928
msgid "Process a delayed switch if one is pending."
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:931
msgid ""
"0 on success. -EINVAL if no delayed switch is pending, if the client has "
"unregistered in the meantime or if there are other clients blocking the "
"switch. If the actual switch fails, an error is reported and 0 is returned."
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:1045
msgid "helper for driver power control"
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:1051
msgid "``struct device *dev``"
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:1046
msgid "vga client device"
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:1048
msgid "``struct dev_pm_domain *domain``"
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:1047
msgid "power domain"
msgstr ""

#: ../../../gpu/vga-switcheroo:31: drivers/gpu/vga/vga_switcheroo.c:1048
msgid ""
"Helper for GPUs whose power state is controlled by the driver's runtime pm. "
"After the GPU has been suspended, the handler needs to be called to cut "
"power to the GPU. Likewise it needs to reinstate power before the GPU can "
"resume. To this end, this helper augments the suspend/resume functions by "
"the requisite calls to the handler. It needs only be called on platforms "
"where the power switch is separate to the device being powered down."
msgstr ""

#: ../../../gpu/vga-switcheroo.rst:35
msgid "Public structures"
msgstr ""

#: ../../../gpu/vga-switcheroo:37: include/linux/vga_switcheroo.h:98
#: ../../../gpu/vga-switcheroo:40: include/linux/vga_switcheroo.h:130
#: ../../../gpu/vga-switcheroo:58: drivers/gpu/vga/vga_switcheroo.c:135
#: ../../../gpu/vga-switcheroo:61: drivers/gpu/vga/vga_switcheroo.c:97
msgid "**Definition**::"
msgstr ""

#: ../../../gpu/vga-switcheroo:37: include/linux/vga_switcheroo.h:108
#: ../../../gpu/vga-switcheroo:40: include/linux/vga_switcheroo.h:139
#: ../../../gpu/vga-switcheroo:58: drivers/gpu/vga/vga_switcheroo.c:150
#: ../../../gpu/vga-switcheroo:61: drivers/gpu/vga/vga_switcheroo.c:111
msgid "**Members**"
msgstr ""

#: ../../../gpu/vga-switcheroo:37: include/linux/vga_switcheroo.h:95
msgid "``init``"
msgstr ""

#: ../../../gpu/vga-switcheroo:37: include/linux/vga_switcheroo.h:96
msgid ""
"initialize handler. Optional. This gets called when vga_switcheroo is "
"enabled, i.e. when two vga clients have registered. It allows the handler to "
"perform some delayed initialization that depends on the existence of the vga "
"clients. Currently only the radeon and amdgpu drivers use this. The return "
"value is ignored"
msgstr ""

#: ../../../gpu/vga-switcheroo:37: include/linux/vga_switcheroo.h:101
msgid "``switchto``"
msgstr ""

#: ../../../gpu/vga-switcheroo:37: include/linux/vga_switcheroo.h:102
msgid ""
"switch outputs to given client. Mandatory. For muxless machines this should "
"be a no-op. Returning 0 denotes success, anything else failure (in which "
"case the switch is aborted)"
msgstr ""

#: ../../../gpu/vga-switcheroo:37: include/linux/vga_switcheroo.h:105
msgid "``switch_ddc``"
msgstr ""

#: ../../../gpu/vga-switcheroo:37: include/linux/vga_switcheroo.h:106
msgid ""
"switch DDC lines to given client. Optional. Should return the previous DDC "
"owner on success or a negative int on failure"
msgstr ""

#: ../../../gpu/vga-switcheroo:37: include/linux/vga_switcheroo.h:108
msgid "``power_state``"
msgstr ""

#: ../../../gpu/vga-switcheroo:37: include/linux/vga_switcheroo.h:109
msgid ""
"cut or reinstate power of given client. Optional. The return value is ignored"
msgstr ""

#: ../../../gpu/vga-switcheroo:37: include/linux/vga_switcheroo.h:110
msgid "``get_client_id``"
msgstr ""

#: ../../../gpu/vga-switcheroo:37: include/linux/vga_switcheroo.h:111
msgid "determine if given pci device is integrated or discrete GPU. Mandatory"
msgstr ""

#: ../../../gpu/vga-switcheroo:37: include/linux/vga_switcheroo.h:112
msgid ""
"Handler callbacks. The multiplexer itself. The **switchto** and "
"**get_client_id** methods are mandatory, all others may be set to NULL."
msgstr ""

#: ../../../gpu/vga-switcheroo:40: include/linux/vga_switcheroo.h:127
msgid "``set_gpu_state``"
msgstr ""

#: ../../../gpu/vga-switcheroo:40: include/linux/vga_switcheroo.h:128
msgid ""
"do the equivalent of suspend/resume for the card. Mandatory. This should not "
"cut power to the discrete GPU, which is the job of the handler"
msgstr ""

#: ../../../gpu/vga-switcheroo:40: include/linux/vga_switcheroo.h:130
msgid "``reprobe``"
msgstr ""

#: ../../../gpu/vga-switcheroo:40: include/linux/vga_switcheroo.h:131
msgid ""
"poll outputs. Optional. This gets called after waking the GPU and switching "
"the outputs to it"
msgstr ""

#: ../../../gpu/vga-switcheroo:40: include/linux/vga_switcheroo.h:133
msgid "``can_switch``"
msgstr ""

#: ../../../gpu/vga-switcheroo:40: include/linux/vga_switcheroo.h:134
msgid ""
"check if the device is in a position to switch now. Mandatory. The client "
"should return false if a user space process has one of its device files open"
msgstr ""

#: ../../../gpu/vga-switcheroo:40: include/linux/vga_switcheroo.h:136
msgid "``gpu_bound``"
msgstr ""

#: ../../../gpu/vga-switcheroo:40: include/linux/vga_switcheroo.h:137
msgid "notify the client id to audio client when the GPU is bound."
msgstr ""

#: ../../../gpu/vga-switcheroo:40: include/linux/vga_switcheroo.h:137
msgid ""
"Client callbacks. A client can be either a GPU or an audio device on a GPU. "
"The **set_gpu_state** and **can_switch** methods are mandatory, **reprobe** "
"may be set to NULL. For audio clients, the **reprobe** member is bogus. "
"OTOH, **gpu_bound** is only for audio clients, and not used for GPU clients."
msgstr ""

#: ../../../gpu/vga-switcheroo.rst:44
msgid "Public constants"
msgstr ""

#: ../../../gpu/vga-switcheroo:46: include/linux/vga_switcheroo.h:39
msgid "handler flags bitmask"
msgstr ""

#: ../../../gpu/vga-switcheroo:46: include/linux/vga_switcheroo.h:43
#: ../../../gpu/vga-switcheroo:49: include/linux/vga_switcheroo.h:80
#: ../../../gpu/vga-switcheroo:52: include/linux/vga_switcheroo.h:63
msgid "**Constants**"
msgstr ""

#: ../../../gpu/vga-switcheroo:46: include/linux/vga_switcheroo.h:45
msgid "``VGA_SWITCHEROO_CAN_SWITCH_DDC``"
msgstr ""

#: ../../../gpu/vga-switcheroo:46: include/linux/vga_switcheroo.h:46
msgid ""
"whether the handler is able to switch the DDC lines separately. This signals "
"to clients that they should call drm_get_edid_switcheroo() to probe the EDID"
msgstr ""

#: ../../../gpu/vga-switcheroo:46: include/linux/vga_switcheroo.h:50
msgid "``VGA_SWITCHEROO_NEEDS_EDP_CONFIG``"
msgstr ""

#: ../../../gpu/vga-switcheroo:46: include/linux/vga_switcheroo.h:51
msgid ""
"whether the handler is unable to switch the AUX channel separately. This "
"signals to clients that the active GPU needs to train the link and "
"communicate the link parameters to the inactive GPU (mediated by "
"vga_switcheroo). The inactive GPU may then skip the AUX handshake and set up "
"its output with these pre-calibrated values (DisplayPort specification "
"v1.1a, section 2.5.3.3)"
msgstr ""

#: ../../../gpu/vga-switcheroo:46: include/linux/vga_switcheroo.h:49
msgid ""
"Handler flags bitmask. Used by handlers to declare their capabilities upon "
"registering with vga_switcheroo."
msgstr ""

#: ../../../gpu/vga-switcheroo:49: include/linux/vga_switcheroo.h:76
msgid "client identifier"
msgstr ""

#: ../../../gpu/vga-switcheroo:49: include/linux/vga_switcheroo.h:82
msgid "``VGA_SWITCHEROO_UNKNOWN_ID``"
msgstr ""

#: ../../../gpu/vga-switcheroo:49: include/linux/vga_switcheroo.h:83
msgid ""
"initial identifier assigned to vga clients. Determining the id requires the "
"handler, so GPUs are given their true id in a delayed fashion in "
"vga_switcheroo_enable()"
msgstr ""

#: ../../../gpu/vga-switcheroo:49: include/linux/vga_switcheroo.h:87
msgid "``VGA_SWITCHEROO_IGD``"
msgstr ""

#: ../../../gpu/vga-switcheroo:49: include/linux/vga_switcheroo.h:88
msgid "integrated graphics device"
msgstr ""

#: ../../../gpu/vga-switcheroo:49: include/linux/vga_switcheroo.h:90
msgid "``VGA_SWITCHEROO_DIS``"
msgstr ""

#: ../../../gpu/vga-switcheroo:49: include/linux/vga_switcheroo.h:91
msgid "discrete graphics device"
msgstr ""

#: ../../../gpu/vga-switcheroo:49: include/linux/vga_switcheroo.h:93
msgid "``VGA_SWITCHEROO_MAX_CLIENTS``"
msgstr ""

#: ../../../gpu/vga-switcheroo:49: include/linux/vga_switcheroo.h:94
msgid "currently no more than two GPUs are supported"
msgstr ""

#: ../../../gpu/vga-switcheroo:49: include/linux/vga_switcheroo.h:83
msgid "Client identifier. Audio clients use the same identifier & 0x100."
msgstr ""

#: ../../../gpu/vga-switcheroo:52: include/linux/vga_switcheroo.h:59
msgid "client power state"
msgstr ""

#: ../../../gpu/vga-switcheroo:52: include/linux/vga_switcheroo.h:65
msgid "``VGA_SWITCHEROO_OFF``"
msgstr ""

#: ../../../gpu/vga-switcheroo:52: include/linux/vga_switcheroo.h:66
msgid "off"
msgstr ""

#: ../../../gpu/vga-switcheroo:52: include/linux/vga_switcheroo.h:68
msgid "``VGA_SWITCHEROO_ON``"
msgstr ""

#: ../../../gpu/vga-switcheroo:52: include/linux/vga_switcheroo.h:69
msgid "on"
msgstr ""

#: ../../../gpu/vga-switcheroo:52: include/linux/vga_switcheroo.h:71
msgid "``VGA_SWITCHEROO_NOT_FOUND``"
msgstr ""

#: ../../../gpu/vga-switcheroo:52: include/linux/vga_switcheroo.h:72
msgid ""
"client has not registered with vga_switcheroo. Only used in "
"vga_switcheroo_get_client_state() which in turn is only called from "
"hda_intel.c"
msgstr ""

#: ../../../gpu/vga-switcheroo:52: include/linux/vga_switcheroo.h:65
msgid "Client power state."
msgstr ""

#: ../../../gpu/vga-switcheroo.rst:56
msgid "Private structures"
msgstr ""

#: ../../../gpu/vga-switcheroo:58: drivers/gpu/vga/vga_switcheroo.c:131
msgid "vga_switcheroo private data"
msgstr ""

#: ../../../gpu/vga-switcheroo:58: drivers/gpu/vga/vga_switcheroo.c:132
#: ../../../gpu/vga-switcheroo:61: drivers/gpu/vga/vga_switcheroo.c:102
msgid "``active``"
msgstr ""

#: ../../../gpu/vga-switcheroo:58: drivers/gpu/vga/vga_switcheroo.c:133
msgid ""
"whether vga_switcheroo is enabled. Prerequisite is the registration of two "
"GPUs and a handler"
msgstr ""

#: ../../../gpu/vga-switcheroo:58: drivers/gpu/vga/vga_switcheroo.c:134
msgid "``delayed_switch_active``"
msgstr ""

#: ../../../gpu/vga-switcheroo:58: drivers/gpu/vga/vga_switcheroo.c:135
msgid "whether a delayed switch is pending"
msgstr ""

#: ../../../gpu/vga-switcheroo:58: drivers/gpu/vga/vga_switcheroo.c:135
msgid "``delayed_client_id``"
msgstr ""

#: ../../../gpu/vga-switcheroo:58: drivers/gpu/vga/vga_switcheroo.c:136
msgid "client to which a delayed switch is pending"
msgstr ""

#: ../../../gpu/vga-switcheroo:58: drivers/gpu/vga/vga_switcheroo.c:136
msgid "``debugfs_root``"
msgstr ""

#: ../../../gpu/vga-switcheroo:58: drivers/gpu/vga/vga_switcheroo.c:137
msgid "directory for vga_switcheroo debugfs interface"
msgstr ""

#: ../../../gpu/vga-switcheroo:58: drivers/gpu/vga/vga_switcheroo.c:137
msgid "``registered_clients``"
msgstr ""

#: ../../../gpu/vga-switcheroo:58: drivers/gpu/vga/vga_switcheroo.c:138
msgid ""
"number of registered GPUs (counting only vga clients, not audio clients)"
msgstr ""

#: ../../../gpu/vga-switcheroo:58: drivers/gpu/vga/vga_switcheroo.c:139
msgid "``clients``"
msgstr ""

#: ../../../gpu/vga-switcheroo:58: drivers/gpu/vga/vga_switcheroo.c:140
msgid "list of registered clients"
msgstr ""

#: ../../../gpu/vga-switcheroo:58: drivers/gpu/vga/vga_switcheroo.c:140
msgid "``handler``"
msgstr ""

#: ../../../gpu/vga-switcheroo:58: drivers/gpu/vga/vga_switcheroo.c:141
msgid "registered handler"
msgstr ""

#: ../../../gpu/vga-switcheroo:58: drivers/gpu/vga/vga_switcheroo.c:141
msgid "``handler_flags``"
msgstr ""

#: ../../../gpu/vga-switcheroo:58: drivers/gpu/vga/vga_switcheroo.c:142
msgid "flags of registered handler"
msgstr ""

#: ../../../gpu/vga-switcheroo:58: drivers/gpu/vga/vga_switcheroo.c:142
msgid "``mux_hw_lock``"
msgstr ""

#: ../../../gpu/vga-switcheroo:58: drivers/gpu/vga/vga_switcheroo.c:143
msgid ""
"protects mux state (in particular while DDC lines are temporarily switched)"
msgstr ""

#: ../../../gpu/vga-switcheroo:58: drivers/gpu/vga/vga_switcheroo.c:144
msgid "``old_ddc_owner``"
msgstr ""

#: ../../../gpu/vga-switcheroo:58: drivers/gpu/vga/vga_switcheroo.c:145
msgid "client to which DDC lines will be switched back on unlock"
msgstr ""

#: ../../../gpu/vga-switcheroo:58: drivers/gpu/vga/vga_switcheroo.c:145
msgid ""
"vga_switcheroo private data. Currently only one vga_switcheroo instance per "
"system is supported."
msgstr ""

#: ../../../gpu/vga-switcheroo:61: drivers/gpu/vga/vga_switcheroo.c:93
msgid "registered client"
msgstr ""

#: ../../../gpu/vga-switcheroo:61: drivers/gpu/vga/vga_switcheroo.c:94
msgid "``pdev``"
msgstr ""

#: ../../../gpu/vga-switcheroo:61: drivers/gpu/vga/vga_switcheroo.c:95
msgid "``fb_info``"
msgstr ""

#: ../../../gpu/vga-switcheroo:61: drivers/gpu/vga/vga_switcheroo.c:96
msgid "framebuffer to which console is remapped on switching"
msgstr ""

#: ../../../gpu/vga-switcheroo:61: drivers/gpu/vga/vga_switcheroo.c:96
msgid "``pwr_state``"
msgstr ""

#: ../../../gpu/vga-switcheroo:61: drivers/gpu/vga/vga_switcheroo.c:97
msgid ""
"current power state if manual power control is used. For driver power "
"control, call vga_switcheroo_pwr_state()."
msgstr ""

#: ../../../gpu/vga-switcheroo:61: drivers/gpu/vga/vga_switcheroo.c:98
msgid "``ops``"
msgstr ""

#: ../../../gpu/vga-switcheroo:61: drivers/gpu/vga/vga_switcheroo.c:99
msgid "``id``"
msgstr ""

#: ../../../gpu/vga-switcheroo:61: drivers/gpu/vga/vga_switcheroo.c:100
msgid ""
"client identifier. Determining the id requires the handler, so gpus are "
"initially assigned VGA_SWITCHEROO_UNKNOWN_ID and later given their true id "
"in vga_switcheroo_enable()"
msgstr ""

#: ../../../gpu/vga-switcheroo:61: drivers/gpu/vga/vga_switcheroo.c:103
msgid "whether the outputs are currently switched to this client"
msgstr ""

#: ../../../gpu/vga-switcheroo:61: drivers/gpu/vga/vga_switcheroo.c:103
msgid "``driver_power_control``"
msgstr ""

#: ../../../gpu/vga-switcheroo:61: drivers/gpu/vga/vga_switcheroo.c:104
msgid ""
"whether power state is controlled by the driver's runtime pm. If true, "
"writing ON and OFF to the vga_switcheroo debugfs interface is a no-op so as "
"not to interfere with runtime pm"
msgstr ""

#: ../../../gpu/vga-switcheroo:61: drivers/gpu/vga/vga_switcheroo.c:106
msgid "``list``"
msgstr ""

#: ../../../gpu/vga-switcheroo:61: drivers/gpu/vga/vga_switcheroo.c:107
msgid "client list"
msgstr ""

#: ../../../gpu/vga-switcheroo:61: drivers/gpu/vga/vga_switcheroo.c:107
msgid "``vga_dev``"
msgstr ""

#: ../../../gpu/vga-switcheroo:61: drivers/gpu/vga/vga_switcheroo.c:108
msgid "pci device, indicate which GPU is bound to current audio client"
msgstr ""

#: ../../../gpu/vga-switcheroo:61: drivers/gpu/vga/vga_switcheroo.c:108
msgid ""
"Registered client. A client can be either a GPU or an audio device on a GPU. "
"For audio clients, the **fb_info** and **active** members are bogus. For GPU "
"clients, the **vga_dev** is bogus."
msgstr ""

#: ../../../gpu/vga-switcheroo.rst:65
msgid "Handlers"
msgstr ""

#: ../../../gpu/vga-switcheroo.rst:68
msgid "apple-gmux Handler"
msgstr ""

#: ../../../gpu/vga-switcheroo:70: drivers/platform/x86/apple-gmux.c:29
msgid ""
"gmux is a microcontroller built into the MacBook Pro to support dual GPUs: A "
"`Lattice XP2`_ on pre-retinas, a `Renesas R4F2113`_ on pre-T2 retinas."
msgstr ""

#: ../../../gpu/vga-switcheroo:70: drivers/platform/x86/apple-gmux.c:32
msgid ""
"On T2 Macbooks, the gmux is part of the T2 Coprocessor's SMC. The SMC has an "
"I2C connection to a `NXP PCAL6524` GPIO expander, which enables/disables the "
"voltage regulators of the discrete GPU, drives the display panel power, and "
"has a GPIO to switch the eDP mux. The Intel CPU can interact with gmux "
"through MMIO, similar to how the main SMC interface is controlled."
msgstr ""

#: ../../../gpu/vga-switcheroo:70: drivers/platform/x86/apple-gmux.c:38
msgid ""
"(The MacPro6,1 2013 also has a gmux, however it is unclear why since it has "
"dual GPUs but no built-in display.)"
msgstr ""

#: ../../../gpu/vga-switcheroo:70: drivers/platform/x86/apple-gmux.c:41
msgid ""
"gmux is connected to the LPC bus of the southbridge. Its I/O ports are "
"accessed differently depending on the microcontroller: Driver functions to "
"access a pre-retina gmux are infixed ``_pio_``, those for a pre-T2 retina "
"gmux are infixed ``_index_``, and those on T2 Macs are infixed with "
"``_mmio_``."
msgstr ""

#: ../../../gpu/vga-switcheroo:73: drivers/platform/x86/apple-gmux.c:610
msgid ""
"gmux is also connected to a GPIO pin of the southbridge and thereby is able "
"to trigger an ACPI GPE. ACPI name GMGP holds this GPIO pin's number. On the "
"MBP5 2008/09 it's GPIO pin 22 of the Nvidia MCP79, on following generations "
"it's GPIO pin 6 of the Intel PCH, on MMIO gmux's it's pin 21."
msgstr ""

#: ../../../gpu/vga-switcheroo:73: drivers/platform/x86/apple-gmux.c:615
msgid ""
"The GPE merely signals that an interrupt occurred, the actual type of event "
"is identified by reading a gmux register."
msgstr ""

#: ../../../gpu/vga-switcheroo:73: drivers/platform/x86/apple-gmux.c:618
msgid ""
"In addition to the GMGP name, gmux's ACPI device also has two methods GMSP "
"and GMLV. GMLV likely means \"GMUX Level\", and reads the value of the GPIO, "
"while GMSP likely means \"GMUX Set Polarity\", and seems to write to the "
"GPIO's value. On newer Macbooks (This was introduced with or sometime before "
"the MacBookPro14,3), the ACPI GPE method differentiates between the OS type: "
"On Darwin, only a notification is signaled, whereas on other OSes, the "
"GPIO's value is read and then inverted."
msgstr ""

#: ../../../gpu/vga-switcheroo:73: drivers/platform/x86/apple-gmux.c:626
msgid ""
"Because Linux masquerades as Darwin, it ends up in the notification-only "
"code path. On MMIO gmux's, this seems to lead to us being unable to clear "
"interrupts, unless we call GMSP(0). Without this, there is a flood of "
"status=0 interrupts that can't be cleared. This issue seems to be unique to "
"MMIO gmux's."
msgstr ""

#: ../../../gpu/vga-switcheroo.rst:77
msgid "Graphics mux"
msgstr ""

#: ../../../gpu/vga-switcheroo:79: drivers/platform/x86/apple-gmux.c:360
msgid ""
"On pre-retinas, the LVDS outputs of both GPUs feed into gmux which muxes "
"either of them to the panel. One of the tricks gmux has up its sleeve is to "
"lengthen the blanking interval of its output during a switch to synchronize "
"it with the GPU switched to. This allows for a flicker-free switch that is "
"imperceptible by the user (`US 8,687,007 B2`_)."
msgstr ""

#: ../../../gpu/vga-switcheroo:79: drivers/platform/x86/apple-gmux.c:366
msgid ""
"On retinas, muxing is no longer done by gmux itself, but by a separate chip "
"which is controlled by gmux. The chip is triple sourced, it is either an "
"`NXP CBTL06142`_, `TI HD3SS212`_ or `Pericom PI3VDP12412`_. The panel is "
"driven with eDP instead of LVDS since the pixel clock required for retina "
"resolution exceeds LVDS' limits."
msgstr ""

#: ../../../gpu/vga-switcheroo:79: drivers/platform/x86/apple-gmux.c:372
msgid ""
"Pre-retinas are able to switch the panel's DDC pins separately. This is "
"handled by a `TI SN74LV4066A`_ which is controlled by gmux. The inactive GPU "
"can thus probe the panel's EDID without switching over the entire panel. "
"Retinas lack this functionality as the chips used for eDP muxing are "
"incapable of switching the AUX channel separately (see the linked data "
"sheets, Pericom would be capable but this is unused). However the retina "
"panel has the NO_AUX_HANDSHAKE_LINK_TRAINING bit set in its DPCD, allowing "
"the inactive GPU to skip the AUX handshake and set up the output with link "
"parameters pre-calibrated by the active GPU."
msgstr ""

#: ../../../gpu/vga-switcheroo:79: drivers/platform/x86/apple-gmux.c:382
msgid ""
"The external DP port is only fully switchable on the first two unibody "
"MacBook Pro generations, MBP5 2008/09 and MBP6 2010. This is done by an `NXP "
"CBTL06141`_ which is controlled by gmux. It's the predecessor of the eDP mux "
"on retinas, the difference being support for 2.7 versus 5.4 Gbit/s."
msgstr ""

#: ../../../gpu/vga-switcheroo:79: drivers/platform/x86/apple-gmux.c:387
msgid ""
"The following MacBook Pro generations replaced the external DP port with a "
"combined DP/Thunderbolt port and lost the ability to switch it between GPUs, "
"connecting it either to the discrete GPU or the Thunderbolt controller. "
"Oddly enough, while the full port is no longer switchable, AUX and HPD are "
"still switchable by way of an `NXP CBTL03062`_ (on pre-retinas MBP8 2011 and "
"MBP9 2012) or two `TI TS3DS10224`_ (on pre-t2 retinas) under the control of "
"gmux. Since the integrated GPU is missing the main link, external displays "
"appear to it as phantoms which fail to link-train."
msgstr ""

#: ../../../gpu/vga-switcheroo:79: drivers/platform/x86/apple-gmux.c:396
msgid ""
"gmux receives the HPD signal of all display connectors and sends an "
"interrupt on hotplug. On generations which cannot switch external ports, the "
"discrete GPU can then be woken to drive the newly connected display. The "
"ability to switch AUX on these generations could be used to improve "
"reliability of hotplug detection by having the integrated GPU poll the ports "
"while the discrete GPU is asleep, but currently we do not make use of this "
"feature."
msgstr ""

#: ../../../gpu/vga-switcheroo:79: drivers/platform/x86/apple-gmux.c:404
msgid ""
"Our switching policy for the external port is that on those generations "
"which are able to switch it fully, the port is switched together with the "
"panel when IGD / DIS commands are issued to vga_switcheroo. It is thus "
"possible to drive e.g. a beamer on battery power with the integrated GPU. "
"The user may manually switch to the discrete GPU if more performance is "
"needed."
msgstr ""

#: ../../../gpu/vga-switcheroo:79: drivers/platform/x86/apple-gmux.c:411
msgid ""
"On all newer generations, the external port can only be driven by the "
"discrete GPU. If a display is plugged in while the panel is switched to the "
"integrated GPU, *both* GPUs will be in use for maximum performance. To "
"decrease power consumption, the user may manually switch to the discrete "
"GPU, thereby suspending the integrated GPU."
msgstr ""

#: ../../../gpu/vga-switcheroo:79: drivers/platform/x86/apple-gmux.c:417
msgid ""
"gmux' initial switch state on bootup is user configurable via the EFI "
"variable ``gpu-power-prefs-fa4ce28d-b62f-4c99-9cc3-6815686e30f9`` (5th byte, "
"1 = IGD, 0 = DIS). Based on this setting, the EFI firmware tells gmux to "
"switch the panel and the external DP connector and allocates a framebuffer "
"for the selected GPU."
msgstr ""

#: ../../../gpu/vga-switcheroo.rst:83
msgid "Power control"
msgstr ""

#: ../../../gpu/vga-switcheroo:85: drivers/platform/x86/apple-gmux.c:503
msgid ""
"gmux is able to cut power to the discrete GPU. It automatically takes care "
"of the correct sequence to tear down and bring up the power rails for core "
"voltage, VRAM and PCIe."
msgstr ""

#: ../../../gpu/vga-switcheroo.rst:89
msgid "Backlight control"
msgstr ""

#: ../../../gpu/vga-switcheroo:91: drivers/platform/x86/apple-gmux.c:323
msgid ""
"On single GPU MacBooks, the PWM signal for the backlight is generated by the "
"GPU. On dual GPU MacBook Pros by contrast, either GPU may be suspended to "
"conserve energy. Hence the PWM signal needs to be generated by a separate "
"backlight driver which is controlled by gmux. The earliest generation MBP5 "
"2008/09 uses a `TI LP8543`_ backlight driver. Newer models use a `TI "
"LP8545`_ or a TI LP8548."
msgstr ""

#: ../../../gpu/vga-switcheroo:97: include/linux/apple-gmux.h:86
msgid "detect if gmux is built into the machine"
msgstr ""

#: ../../../gpu/vga-switcheroo:97: include/linux/apple-gmux.h:92
msgid "``struct pnp_dev *pnp_dev``"
msgstr ""

#: ../../../gpu/vga-switcheroo:97: include/linux/apple-gmux.h:88
msgid "Device to probe or NULL to use the first matching device"
msgstr ""

#: ../../../gpu/vga-switcheroo:97: include/linux/apple-gmux.h:90
msgid "``enum apple_gmux_type *type_ret``"
msgstr ""

#: ../../../gpu/vga-switcheroo:97: include/linux/apple-gmux.h:89
msgid "Returns (by reference) the apple_gmux_type of the device"
msgstr ""

#: ../../../gpu/vga-switcheroo:97: include/linux/apple-gmux.h:90
msgid ""
"Detect if a supported gmux device is present by actually probing it. This "
"avoids the false positives returned on some models by apple_gmux_present()."
msgstr ""

#: ../../../gpu/vga-switcheroo:97: include/linux/apple-gmux.h:95
msgid ""
"``true`` if a supported gmux ACPI device is detected and the kernel was "
"configured with CONFIG_APPLE_GMUX, ``false`` otherwise."
msgstr ""

#: ../../../gpu/vga-switcheroo:97: include/linux/apple-gmux.h:153
msgid "check if gmux ACPI device is present"
msgstr ""

#: ../../../gpu/vga-switcheroo:97: include/linux/apple-gmux.h:154
msgid ""
"Drivers may use this to activate quirks specific to dual GPU MacBook Pros "
"and Mac Pros, e.g. for deferred probing, runtime pm and backlight."
msgstr ""

#: ../../../gpu/vga-switcheroo:97: include/linux/apple-gmux.h:158
msgid ""
"``true`` if gmux ACPI device is present and the kernel was configured with "
"CONFIG_APPLE_GMUX, ``false`` otherwise."
msgstr ""
