# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../gpu/xe/xe_wa.rst:5
msgid "Hardware workarounds"
msgstr ""

#: ../../../gpu/xe/xe_wa:7: drivers/gpu/drm/xe/xe_wa.c:30
msgid ""
"Hardware workarounds are register programming documented to be executed in "
"the driver that fall outside of the normal programming sequences for a "
"platform. There are some basic categories of workarounds, depending on how/"
"when they are applied:"
msgstr ""

#: ../../../gpu/xe/xe_wa:7: drivers/gpu/drm/xe/xe_wa.c:35
msgid ""
"LRC workarounds: workarounds that touch registers that are saved/restored to/"
"from the HW context image. The list is emitted (via Load Register Immediate "
"commands) once when initializing the device and saved in the default "
"context. That default context is then used on every context creation to have "
"a \"primed golden context\", i.e. a context image that already contains the "
"changes needed to all the registers."
msgstr ""

#: ../../../gpu/xe/xe_wa:7: drivers/gpu/drm/xe/xe_wa.c:42
msgid ""
"Engine workarounds: the list of these WAs is applied whenever the specific "
"engine is reset. It's also possible that a set of engine classes share a "
"common power domain and they are reset together. This happens on some "
"platforms with render and compute engines. In this case (at least) one of "
"them need to keeep the workaround programming: the approach taken in the "
"driver is to tie those workarounds to the first compute/render engine that "
"is registered.  When executing with GuC submission, engine resets are "
"outside of kernel driver control, hence the list of registers involved in "
"written once, on engine initialization, and then passed to GuC, that saves/"
"restores their values before/after the reset takes place. See ``drivers/gpu/"
"drm/xe/xe_guc_ads.c`` for reference."
msgstr ""

#: ../../../gpu/xe/xe_wa:7: drivers/gpu/drm/xe/xe_wa.c:54
msgid ""
"GT workarounds: the list of these WAs is applied whenever these registers "
"revert to their default values: on GPU reset, suspend/resume [1]_, etc."
msgstr ""

#: ../../../gpu/xe/xe_wa:7: drivers/gpu/drm/xe/xe_wa.c:57
msgid ""
"Register whitelist: some workarounds need to be implemented in userspace, "
"but need to touch privileged registers. The whitelist in the kernel "
"instructs the hardware to allow the access to happen. From the kernel side, "
"this is just a special case of a MMIO workaround (as we write the list of "
"these to/be-whitelisted registers to some special HW registers)."
msgstr ""

#: ../../../gpu/xe/xe_wa:7: drivers/gpu/drm/xe/xe_wa.c:63
msgid ""
"Workaround batchbuffers: buffers that get executed automatically by the "
"hardware on every HW context restore. These buffers are created and "
"programmed in the default context so the hardware always go through those "
"programming sequences when switching contexts. The support for workaround "
"batchbuffers is enabled these hardware mechanisms:"
msgstr ""

#: ../../../gpu/xe/xe_wa:7: drivers/gpu/drm/xe/xe_wa.c:69
msgid ""
"INDIRECT_CTX: A batchbuffer and an offset are provided in the default "
"context, pointing the hardware to jump to that location when that offset is "
"reached in the context restore. Workaround batchbuffer in the driver "
"currently uses this mechanism for all platforms."
msgstr ""

#: ../../../gpu/xe/xe_wa:7: drivers/gpu/drm/xe/xe_wa.c:74
msgid ""
"BB_PER_CTX_PTR: A batchbuffer is provided in the default context, pointing "
"the hardware to a buffer to continue executing after the engine registers "
"are restored in a context restore sequence. This is currently not used in "
"the driver."
msgstr ""

#: ../../../gpu/xe/xe_wa:7: drivers/gpu/drm/xe/xe_wa.c:79
msgid ""
"Other/OOB:  There are WAs that, due to their nature, cannot be applied from "
"a central place. Those are peppered around the rest of the code, as needed. "
"Workarounds related to the display IP are the main example."
msgstr ""

#: ../../../gpu/xe/xe_wa:7: drivers/gpu/drm/xe/xe_wa.c:83
msgid ""
"Technically, some registers are powercontext saved & restored, so they "
"survive a suspend/resume. In practice, writing them again is not too costly "
"and simplifies things, so it's the approach taken in the driver."
msgstr ""

#: ../../../gpu/xe/xe_wa:7: drivers/gpu/drm/xe/xe_wa.c:88
msgid ""
"Hardware workarounds in xe work the same way as in i915, with the difference "
"of how they are maintained in the code. In xe it uses the xe_rtp "
"infrastructure so the workarounds can be kept in tables, following a more "
"declarative approach rather than procedural."
msgstr ""

#: ../../../gpu/xe/xe_wa.rst:11
msgid "Internal API"
msgstr ""

#: ../../../gpu/xe/xe_wa:13: drivers/gpu/drm/xe/xe_wa.c:890
#: drivers/gpu/drm/xe/xe_wa.c:908
msgid "process OOB workaround table"
msgstr ""

#: ../../../gpu/xe/xe_wa:13: drivers/gpu/drm/xe/xe_wa.c:894
#: drivers/gpu/drm/xe/xe_wa.c:912 drivers/gpu/drm/xe/xe_wa.c:929
#: drivers/gpu/drm/xe/xe_wa.c:946 drivers/gpu/drm/xe/xe_wa.c:963
#: drivers/gpu/drm/xe/xe_wa.c:980 drivers/gpu/drm/xe/xe_wa.c:1002
msgid "**Parameters**"
msgstr ""

#: ../../../gpu/xe/xe_wa:13: drivers/gpu/drm/xe/xe_wa.c:896
#: drivers/gpu/drm/xe/xe_wa.c:982
msgid "``struct xe_device *xe``"
msgstr ""

#: ../../../gpu/xe/xe_wa:13: drivers/gpu/drm/xe/xe_wa.c:891
msgid "device instance to process workarounds for"
msgstr ""

#: ../../../gpu/xe/xe_wa:13: drivers/gpu/drm/xe/xe_wa.c:893
#: drivers/gpu/drm/xe/xe_wa.c:911 drivers/gpu/drm/xe/xe_wa.c:928
#: drivers/gpu/drm/xe/xe_wa.c:945 drivers/gpu/drm/xe/xe_wa.c:962
#: drivers/gpu/drm/xe/xe_wa.c:979 drivers/gpu/drm/xe/xe_wa.c:1001
msgid "**Description**"
msgstr ""

#: ../../../gpu/xe/xe_wa:13: drivers/gpu/drm/xe/xe_wa.c:892
msgid ""
"process OOB workaround table for this device, marking in **xe** the "
"workarounds that are active."
msgstr ""

#: ../../../gpu/xe/xe_wa:13: drivers/gpu/drm/xe/xe_wa.c:914
#: drivers/gpu/drm/xe/xe_wa.c:931 drivers/gpu/drm/xe/xe_wa.c:1004
msgid "``struct xe_gt *gt``"
msgstr ""

#: ../../../gpu/xe/xe_wa:13: drivers/gpu/drm/xe/xe_wa.c:909
#: drivers/gpu/drm/xe/xe_wa.c:926
msgid "GT instance to process workarounds for"
msgstr ""

#: ../../../gpu/xe/xe_wa:13: drivers/gpu/drm/xe/xe_wa.c:910
msgid ""
"Process OOB workaround table for this platform, marking in **gt** the "
"workarounds that are active."
msgstr ""

#: ../../../gpu/xe/xe_wa:13: drivers/gpu/drm/xe/xe_wa.c:925
msgid "process GT workaround table"
msgstr ""

#: ../../../gpu/xe/xe_wa:13: drivers/gpu/drm/xe/xe_wa.c:927
msgid ""
"Process GT workaround table for this platform, saving in **gt** all the "
"workarounds that need to be applied at the GT level."
msgstr ""

#: ../../../gpu/xe/xe_wa:13: drivers/gpu/drm/xe/xe_wa.c:942
msgid "process engine workaround table"
msgstr ""

#: ../../../gpu/xe/xe_wa:13: drivers/gpu/drm/xe/xe_wa.c:948
#: drivers/gpu/drm/xe/xe_wa.c:965
msgid "``struct xe_hw_engine *hwe``"
msgstr ""

#: ../../../gpu/xe/xe_wa:13: drivers/gpu/drm/xe/xe_wa.c:943
#: drivers/gpu/drm/xe/xe_wa.c:960
msgid "engine instance to process workarounds for"
msgstr ""

#: ../../../gpu/xe/xe_wa:13: drivers/gpu/drm/xe/xe_wa.c:944
msgid ""
"Process engine workaround table for this platform, saving in **hwe** all the "
"workarounds that need to be applied at the engine level that match this "
"engine."
msgstr ""

#: ../../../gpu/xe/xe_wa:13: drivers/gpu/drm/xe/xe_wa.c:959
msgid "process context workaround table"
msgstr ""

#: ../../../gpu/xe/xe_wa:13: drivers/gpu/drm/xe/xe_wa.c:961
msgid ""
"Process context workaround table for this platform, saving in **hwe** all "
"the workarounds that need to be applied on context restore. These are "
"workarounds touching registers that are part of the HW context image."
msgstr ""

#: ../../../gpu/xe/xe_wa:13: drivers/gpu/drm/xe/xe_wa.c:976
msgid "initialize device with workaround oob bookkeeping"
msgstr ""

#: ../../../gpu/xe/xe_wa:13: drivers/gpu/drm/xe/xe_wa.c:977
msgid "Xe device instance to initialize"
msgstr ""

#: ../../../gpu/xe/xe_wa:13: drivers/gpu/drm/xe/xe_wa.c:978
msgid "Returns 0 for success, negative with error code otherwise"
msgstr ""

#: ../../../gpu/xe/xe_wa:13: drivers/gpu/drm/xe/xe_wa.c:998
msgid "initialize gt with workaround bookkeeping"
msgstr ""

#: ../../../gpu/xe/xe_wa:13: drivers/gpu/drm/xe/xe_wa.c:999
msgid "GT instance to initialize"
msgstr ""

#: ../../../gpu/xe/xe_wa:13: drivers/gpu/drm/xe/xe_wa.c:1000
msgid "Returns 0 for success, negative error code otherwise."
msgstr ""
