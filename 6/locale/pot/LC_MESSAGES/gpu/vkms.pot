# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-28 09:03+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../gpu/vkms.rst:5
msgid "drm/vkms Virtual Kernel Modesetting"
msgstr ""

#: ../../../gpu/vkms:7: drivers/gpu/drm/vkms/vkms_drv.c:4
msgid ""
"VKMS is a software-only model of a KMS driver that is useful for testing and "
"for running X (or similar) on headless machines. VKMS aims to enable a "
"virtual display with no need of a hardware display capability, releasing the "
"GPU in DRM API tests."
msgstr ""

#: ../../../gpu/vkms.rst:11
msgid "Setup"
msgstr ""

#: ../../../gpu/vkms.rst:13
msgid "The VKMS driver can be setup with the following steps:"
msgstr ""

#: ../../../gpu/vkms.rst:15
msgid "To check if VKMS is loaded, run::"
msgstr ""

#: ../../../gpu/vkms.rst:19
msgid ""
"This should list the VKMS driver. If no output is obtained, then you need to "
"enable and/or load the VKMS driver. Ensure that the VKMS driver has been set "
"as a loadable module in your kernel config file. Do::"
msgstr ""

#: ../../../gpu/vkms.rst:30
msgid ""
"Compile and build the kernel for the changes to get reflected. Now, to load "
"the driver, use::"
msgstr ""

#: ../../../gpu/vkms.rst:35
msgid ""
"On running the lsmod command now, the VKMS driver will appear listed. You "
"can also observe the driver being loaded in the dmesg logs."
msgstr ""

#: ../../../gpu/vkms.rst:38
msgid ""
"The VKMS driver has optional features to simulate different kinds of "
"hardware, which are exposed as module options. You can use the `modinfo` "
"command to see the module options for vkms::"
msgstr ""

#: ../../../gpu/vkms.rst:44
msgid ""
"Module options are helpful when testing, and enabling modules can be done "
"while loading vkms. For example, to load vkms with cursor enabled, use::"
msgstr ""

#: ../../../gpu/vkms.rst:50
msgid "To disable the driver, use ::"
msgstr ""

#: ../../../gpu/vkms.rst:55
msgid "Testing With IGT"
msgstr ""

#: ../../../gpu/vkms.rst:57
msgid ""
"The IGT GPU Tools is a test suite used specifically for debugging and "
"development of the DRM drivers. The IGT Tools can be installed from `here "
"<https://gitlab.freedesktop.org/drm/igt-gpu-tools>`_ ."
msgstr ""

#: ../../../gpu/vkms.rst:62
msgid ""
"The tests need to be run without a compositor, so you need to switch to text "
"only mode. You can do this by::"
msgstr ""

#: ../../../gpu/vkms.rst:67
msgid "To return to graphical mode, do::"
msgstr ""

#: ../../../gpu/vkms.rst:71
msgid ""
"Once you are in text only mode, you can run tests using the --device switch "
"or IGT_DEVICE variable to specify the device filter for the driver we want "
"to test. IGT_DEVICE can also be used with the run-test.sh script to run the "
"tests for a specific driver::"
msgstr ""

#: ../../../gpu/vkms.rst:80
msgid ""
"For example, to test the functionality of the writeback library, we can run "
"the kms_writeback test::"
msgstr ""

#: ../../../gpu/vkms.rst:87
msgid "You can also run subtests if you do not want to run the entire test::"
msgstr ""

#: ../../../gpu/vkms.rst:93
msgid "Testing With KUnit"
msgstr ""

#: ../../../gpu/vkms.rst:95
msgid ""
"KUnit (Kernel unit testing framework) provides a common framework for unit "
"tests within the Linux kernel. More information in ../dev-tools/kunit/index."
"rst ."
msgstr ""

#: ../../../gpu/vkms.rst:99
msgid "To run the VKMS KUnit tests::"
msgstr ""

#: ../../../gpu/vkms.rst:104
msgid "TODO"
msgstr ""

#: ../../../gpu/vkms.rst:106
msgid ""
"If you want to do any of the items listed below, please share your interest "
"with VKMS maintainers."
msgstr ""

#: ../../../gpu/vkms.rst:110
msgid "IGT better support"
msgstr ""

#: ../../../gpu/vkms.rst:112
msgid "Debugging:"
msgstr ""

#: ../../../gpu/vkms.rst:114
msgid "kms_plane: some test cases are failing due to timeout on capturing CRC;"
msgstr ""

#: ../../../gpu/vkms.rst:116
msgid "Virtual hardware (vblank-less) mode:"
msgstr ""

#: ../../../gpu/vkms.rst:118
msgid ""
"VKMS already has support for vblanks simulated via hrtimers, which can be "
"tested with kms_flip test; in some way, we can say that VKMS already mimics "
"the real hardware vblank. However, we also have virtual hardware that does "
"not support vblank interrupt and completes page_flip events right away; in "
"this case, compositor developers may end up creating a busy loop on virtual "
"hardware. It would be useful to support Virtual Hardware behavior in VKMS "
"because this can help compositor developers to test their features in "
"multiple scenarios."
msgstr ""

#: ../../../gpu/vkms.rst:128
msgid "Add Plane Features"
msgstr ""

#: ../../../gpu/vkms.rst:130
msgid "There's lots of plane features we could add support for:"
msgstr ""

#: ../../../gpu/vkms.rst:132
msgid "Add background color KMS property[Good to get started]."
msgstr ""

#: ../../../gpu/vkms.rst:134
msgid "Scaling."
msgstr ""

#: ../../../gpu/vkms.rst:136
msgid ""
"Additional buffer formats. Low/high bpp RGB formats would be interesting "
"[Good to get started]."
msgstr ""

#: ../../../gpu/vkms.rst:139
msgid ""
"Async updates (currently only possible on cursor plane using the legacy "
"cursor api)."
msgstr ""

#: ../../../gpu/vkms.rst:142
msgid ""
"For all of these, we also want to review the igt test coverage and make sure "
"all relevant igt testcases work on vkms. They are good options for "
"internship project."
msgstr ""

#: ../../../gpu/vkms.rst:147
msgid "Runtime Configuration"
msgstr ""

#: ../../../gpu/vkms.rst:149
msgid ""
"We want to be able to reconfigure vkms instance without having to reload the "
"module. Use/Test-cases:"
msgstr ""

#: ../../../gpu/vkms.rst:152
msgid ""
"Hotplug/hotremove connectors on the fly (to be able to test DP MST handling "
"of compositors)."
msgstr ""

#: ../../../gpu/vkms.rst:155
msgid ""
"Configure planes/crtcs/connectors (we'd need some code to have more than 1 "
"of them first)."
msgstr ""

#: ../../../gpu/vkms.rst:158
msgid ""
"Change output configuration: Plug/unplug screens, change EDID, allow "
"changing the refresh rate."
msgstr ""

#: ../../../gpu/vkms.rst:161
msgid ""
"The currently proposed solution is to expose vkms configuration through "
"configfs. All existing module options should be supported through configfs "
"too."
msgstr ""

#: ../../../gpu/vkms.rst:166
msgid "Writeback support"
msgstr ""

#: ../../../gpu/vkms.rst:168
msgid ""
"The writeback and CRC capture operations share the use of composer_enabled "
"boolean to ensure vblanks. Probably, when these operations work together, "
"composer_enabled needs to refcounting the composer state to proper work. "
"[Good to get started]"
msgstr ""

#: ../../../gpu/vkms.rst:173
msgid ""
"Add support for cloned writeback outputs and related test cases using a "
"cloned output in the IGT kms_writeback."
msgstr ""

#: ../../../gpu/vkms.rst:176
msgid ""
"As a v4l device. This is useful for debugging compositors on special vkms "
"configurations, so that developers see what's really going on."
msgstr ""

#: ../../../gpu/vkms.rst:180
msgid "Output Features"
msgstr ""

#: ../../../gpu/vkms.rst:182
msgid ""
"Variable refresh rate/freesync support. This probably needs prime buffer "
"sharing support, so that we can use vgem fences to simulate rendering in "
"testing. Also needs support to specify the EDID."
msgstr ""

#: ../../../gpu/vkms.rst:186
msgid ""
"Add support for link status, so that compositors can validate their runtime "
"fallbacks when e.g. a Display Port link goes bad."
msgstr ""

#: ../../../gpu/vkms.rst:190
msgid "CRC API Improvements"
msgstr ""

#: ../../../gpu/vkms.rst:192
msgid ""
"Optimize CRC computation ``compute_crc()`` and plane blending ``blend()``"
msgstr ""

#: ../../../gpu/vkms.rst:195
msgid "Atomic Check using eBPF"
msgstr ""

#: ../../../gpu/vkms.rst:197
msgid ""
"Atomic drivers have lots of restrictions which are not exposed to userspace "
"in any explicit form through e.g. possible property values. Userspace can "
"only inquiry about these limits through the atomic IOCTL, possibly using the "
"TEST_ONLY flag. Trying to add configurable code for all these limits, to "
"allow compositors to be tested against them, would be rather futile "
"exercise. Instead we could add support for eBPF to validate any kind of "
"atomic state, and implement a library of different restrictions."
msgstr ""

#: ../../../gpu/vkms.rst:205
msgid ""
"This needs a bunch of features (plane compositing, multiple outputs, ...) "
"enabled already to make sense."
msgstr ""
