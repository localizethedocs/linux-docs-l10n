# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../i2c/functionality.rst:3
msgid "I2C/SMBus Functionality"
msgstr ""

#: ../../../i2c/functionality.rst:6
msgid "INTRODUCTION"
msgstr ""

#: ../../../i2c/functionality.rst:8
msgid ""
"Because not every I2C or SMBus adapter implements everything in the I2C "
"specifications, a client can not trust that everything it needs is "
"implemented when it is given the option to attach to an adapter: the client "
"needs some way to check whether an adapter has the needed functionality."
msgstr ""

#: ../../../i2c/functionality.rst:16
msgid "FUNCTIONALITY CONSTANTS"
msgstr ""

#: ../../../i2c/functionality.rst:18
msgid ""
"For the most up-to-date list of functionality constants, please check <uapi/"
"linux/i2c.h>!"
msgstr ""

#: ../../../i2c/functionality.rst:22
msgid "I2C_FUNC_I2C"
msgstr ""

#: ../../../i2c/functionality.rst:22
msgid ""
"Plain i2c-level commands (Pure SMBus adapters typically can not do these)"
msgstr ""

#: ../../../i2c/functionality.rst:24
msgid "I2C_FUNC_10BIT_ADDR"
msgstr ""

#: ../../../i2c/functionality.rst:24
msgid "Handles the 10-bit address extensions"
msgstr ""

#: ../../../i2c/functionality.rst:25
msgid "I2C_FUNC_PROTOCOL_MANGLING"
msgstr ""

#: ../../../i2c/functionality.rst:25
msgid ""
"Knows about the I2C_M_IGNORE_NAK, I2C_M_REV_DIR_ADDR and I2C_M_NO_RD_ACK "
"flags (which modify the I2C protocol!)"
msgstr ""

#: ../../../i2c/functionality.rst:28
msgid "I2C_FUNC_NOSTART"
msgstr ""

#: ../../../i2c/functionality.rst:28
msgid "Can skip repeated start sequence"
msgstr ""

#: ../../../i2c/functionality.rst:29
msgid "I2C_FUNC_SMBUS_QUICK"
msgstr ""

#: ../../../i2c/functionality.rst:29
msgid "Handles the SMBus write_quick command"
msgstr ""

#: ../../../i2c/functionality.rst:30
msgid "I2C_FUNC_SMBUS_READ_BYTE"
msgstr ""

#: ../../../i2c/functionality.rst:30
msgid "Handles the SMBus read_byte command"
msgstr ""

#: ../../../i2c/functionality.rst:31
msgid "I2C_FUNC_SMBUS_WRITE_BYTE"
msgstr ""

#: ../../../i2c/functionality.rst:31
msgid "Handles the SMBus write_byte command"
msgstr ""

#: ../../../i2c/functionality.rst:32
msgid "I2C_FUNC_SMBUS_READ_BYTE_DATA"
msgstr ""

#: ../../../i2c/functionality.rst:32
msgid "Handles the SMBus read_byte_data command"
msgstr ""

#: ../../../i2c/functionality.rst:33
msgid "I2C_FUNC_SMBUS_WRITE_BYTE_DATA"
msgstr ""

#: ../../../i2c/functionality.rst:33 ../../../i2c/functionality.rst:35
msgid "Handles the SMBus write_byte_data command"
msgstr ""

#: ../../../i2c/functionality.rst:34
msgid "I2C_FUNC_SMBUS_READ_WORD_DATA"
msgstr ""

#: ../../../i2c/functionality.rst:34
msgid "Handles the SMBus read_word_data command"
msgstr ""

#: ../../../i2c/functionality.rst:35
msgid "I2C_FUNC_SMBUS_WRITE_WORD_DATA"
msgstr ""

#: ../../../i2c/functionality.rst:36
msgid "I2C_FUNC_SMBUS_PROC_CALL"
msgstr ""

#: ../../../i2c/functionality.rst:36
msgid "Handles the SMBus process_call command"
msgstr ""

#: ../../../i2c/functionality.rst:37
msgid "I2C_FUNC_SMBUS_READ_BLOCK_DATA"
msgstr ""

#: ../../../i2c/functionality.rst:37
msgid "Handles the SMBus read_block_data command"
msgstr ""

#: ../../../i2c/functionality.rst:38
msgid "I2C_FUNC_SMBUS_WRITE_BLOCK_DATA"
msgstr ""

#: ../../../i2c/functionality.rst:38
msgid "Handles the SMBus write_block_data command"
msgstr ""

#: ../../../i2c/functionality.rst:39
msgid "I2C_FUNC_SMBUS_READ_I2C_BLOCK"
msgstr ""

#: ../../../i2c/functionality.rst:39
msgid "Handles the SMBus read_i2c_block_data command"
msgstr ""

#: ../../../i2c/functionality.rst:40
msgid "I2C_FUNC_SMBUS_WRITE_I2C_BLOCK"
msgstr ""

#: ../../../i2c/functionality.rst:40
msgid "Handles the SMBus write_i2c_block_data command"
msgstr ""

#: ../../../i2c/functionality.rst:43
msgid ""
"A few combinations of the above flags are also defined for your convenience:"
msgstr ""

#: ../../../i2c/functionality.rst:46
msgid "I2C_FUNC_SMBUS_BYTE"
msgstr ""

#: ../../../i2c/functionality.rst:46
msgid "Handles the SMBus read_byte and write_byte commands"
msgstr ""

#: ../../../i2c/functionality.rst:48
msgid "I2C_FUNC_SMBUS_BYTE_DATA"
msgstr ""

#: ../../../i2c/functionality.rst:48
msgid "Handles the SMBus read_byte_data and write_byte_data commands"
msgstr ""

#: ../../../i2c/functionality.rst:50
msgid "I2C_FUNC_SMBUS_WORD_DATA"
msgstr ""

#: ../../../i2c/functionality.rst:50
msgid "Handles the SMBus read_word_data and write_word_data commands"
msgstr ""

#: ../../../i2c/functionality.rst:52
msgid "I2C_FUNC_SMBUS_BLOCK_DATA"
msgstr ""

#: ../../../i2c/functionality.rst:52
msgid "Handles the SMBus read_block_data and write_block_data commands"
msgstr ""

#: ../../../i2c/functionality.rst:54
msgid "I2C_FUNC_SMBUS_I2C_BLOCK"
msgstr ""

#: ../../../i2c/functionality.rst:54
msgid "Handles the SMBus read_i2c_block_data and write_i2c_block_data commands"
msgstr ""

#: ../../../i2c/functionality.rst:56
msgid "I2C_FUNC_SMBUS_EMUL"
msgstr ""

#: ../../../i2c/functionality.rst:56
msgid ""
"Handles all SMBus commands that can be emulated by a real I2C adapter (using "
"the transparent emulation layer)"
msgstr ""

#: ../../../i2c/functionality.rst:61
msgid ""
"In kernel versions prior to 3.5 I2C_FUNC_NOSTART was implemented as part of "
"I2C_FUNC_PROTOCOL_MANGLING."
msgstr ""

#: ../../../i2c/functionality.rst:66
msgid "ADAPTER IMPLEMENTATION"
msgstr ""

#: ../../../i2c/functionality.rst:68
msgid ""
"When you write a new adapter driver, you will have to implement a function "
"callback ``functionality``. Typical implementations are given below."
msgstr ""

#: ../../../i2c/functionality.rst:72
msgid ""
"A typical SMBus-only adapter would list all the SMBus transactions it "
"supports. This example comes from the i2c-piix4 driver::"
msgstr ""

#: ../../../i2c/functionality.rst:82
msgid ""
"A typical full-I2C adapter would use the following (from the i2c-pxa "
"driver)::"
msgstr ""

#: ../../../i2c/functionality.rst:90
msgid ""
"I2C_FUNC_SMBUS_EMUL includes all the SMBus transactions (with the addition "
"of I2C block transactions) which i2c-core can emulate using I2C_FUNC_I2C "
"without any help from the adapter driver. The idea is to let the client "
"drivers check for the support of SMBus functions without having to care "
"whether the said functions are implemented in hardware by the adapter, or "
"emulated in software by i2c-core on top of an I2C adapter."
msgstr ""

#: ../../../i2c/functionality.rst:100
msgid "CLIENT CHECKING"
msgstr ""

#: ../../../i2c/functionality.rst:102
msgid ""
"Before a client tries to attach to an adapter, or even do tests to check "
"whether one of the devices it supports is present on an adapter, it should "
"check whether the needed functionality is present. The typical way to do "
"this is (from the lm75 driver)::"
msgstr ""

#: ../../../i2c/functionality.rst:116
msgid ""
"Here, the lm75 driver checks if the adapter can do both SMBus byte data and "
"SMBus word data transactions. If not, then the driver won't work on this "
"adapter and there's no point in going on. If the check above is successful, "
"then the driver knows that it can call the following functions: "
"i2c_smbus_read_byte_data(), i2c_smbus_write_byte_data(), "
"i2c_smbus_read_word_data() and i2c_smbus_write_word_data(). As a rule of "
"thumb, the functionality constants you test for with "
"i2c_check_functionality() should match exactly the i2c_smbus_* functions "
"which you driver is calling."
msgstr ""

#: ../../../i2c/functionality.rst:126
msgid ""
"Note that the check above doesn't tell whether the functionalities are "
"implemented in hardware by the underlying adapter or emulated in software by "
"i2c-core. Client drivers don't have to care about this, as i2c-core will "
"transparently implement SMBus transactions on top of I2C adapters."
msgstr ""

#: ../../../i2c/functionality.rst:134
msgid "CHECKING THROUGH /DEV"
msgstr ""

#: ../../../i2c/functionality.rst:136
msgid ""
"If you try to access an adapter from a userspace program, you will have to "
"use the /dev interface. You will still have to check whether the "
"functionality you need is supported, of course. This is done using the "
"I2C_FUNCS ioctl. An example, adapted from the i2cdetect program, is below::"
msgstr ""
