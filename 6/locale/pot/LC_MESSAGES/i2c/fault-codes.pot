# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../i2c/fault-codes.rst:3
msgid "I2C/SMBUS Fault Codes"
msgstr ""

#: ../../../i2c/fault-codes.rst:5
msgid ""
"This is a summary of the most important conventions for use of fault codes "
"in the I2C/SMBus stack."
msgstr ""

#: ../../../i2c/fault-codes.rst:10
msgid "A \"Fault\" is not always an \"Error\""
msgstr ""

#: ../../../i2c/fault-codes.rst:11
msgid ""
"Not all fault reports imply errors; \"page faults\" should be a familiar "
"example.  Software often retries idempotent operations after transient "
"faults.  There may be fancier recovery schemes that are appropriate in some "
"cases, such as re-initializing (and maybe resetting).  After such recovery, "
"triggered by a fault report, there is no error."
msgstr ""

#: ../../../i2c/fault-codes.rst:17
msgid ""
"In a similar way, sometimes a \"fault\" code just reports one defined result "
"for an operation ... it doesn't indicate that anything is wrong at all, just "
"that the outcome wasn't on the \"golden path\"."
msgstr ""

#: ../../../i2c/fault-codes.rst:21
msgid ""
"In short, your I2C driver code may need to know these codes in order to "
"respond correctly.  Other code may need to rely on YOUR code reporting the "
"right fault code, so that it can (in turn) behave correctly."
msgstr ""

#: ../../../i2c/fault-codes.rst:27
msgid "I2C and SMBus fault codes"
msgstr ""

#: ../../../i2c/fault-codes.rst:28
msgid ""
"These are returned as negative numbers from most calls, with zero or some "
"positive number indicating a non-fault return.  The specific numbers "
"associated with these symbols differ between architectures, though most "
"Linux systems use <asm-generic/errno*.h> numbering."
msgstr ""

#: ../../../i2c/fault-codes.rst:33
msgid ""
"Note that the descriptions here are not exhaustive.  There are other codes "
"that may be returned, and other cases where these codes should be returned.  "
"However, drivers should not return other codes for these cases (unless the "
"hardware doesn't provide unique fault reports)."
msgstr ""

#: ../../../i2c/fault-codes.rst:38
msgid ""
"Also, codes returned by adapter probe methods follow rules which are "
"specific to their host bus (such as PCI, or the platform bus)."
msgstr ""

#: ../../../i2c/fault-codes.rst:42
msgid "EAFNOSUPPORT"
msgstr ""

#: ../../../i2c/fault-codes.rst:43
msgid ""
"Returned by I2C adapters not supporting 10 bit addresses when they are "
"requested to use such an address."
msgstr ""

#: ../../../i2c/fault-codes.rst:46
msgid "EAGAIN"
msgstr ""

#: ../../../i2c/fault-codes.rst:47
msgid ""
"Returned by I2C adapters when they lose arbitration in master transmit "
"mode:  some other master was transmitting different data at the same time."
msgstr ""

#: ../../../i2c/fault-codes.rst:51
msgid ""
"Also returned when trying to invoke an I2C operation in an atomic context, "
"when some task is already using that I2C bus to execute some other operation."
msgstr ""

#: ../../../i2c/fault-codes.rst:55
msgid "EBADMSG"
msgstr ""

#: ../../../i2c/fault-codes.rst:56
msgid ""
"Returned by SMBus logic when an invalid Packet Error Code byte is received.  "
"This code is a CRC covering all bytes in the transaction, and is sent before "
"the terminating STOP.  This fault is only reported on read transactions; the "
"SMBus slave may have a way to report PEC mismatches on writes from the "
"host.  Note that even if PECs are in use, you should not rely on these as "
"the only way to detect incorrect data transfers."
msgstr ""

#: ../../../i2c/fault-codes.rst:64
msgid "EBUSY"
msgstr ""

#: ../../../i2c/fault-codes.rst:65
msgid ""
"Returned by SMBus adapters when the bus was busy for longer than allowed.  "
"This usually indicates some device (maybe the SMBus adapter) needs some "
"fault recovery (such as resetting), or that the reset was attempted but "
"failed."
msgstr ""

#: ../../../i2c/fault-codes.rst:70
msgid "EINVAL"
msgstr ""

#: ../../../i2c/fault-codes.rst:71
msgid ""
"This rather vague error means an invalid parameter has been detected before "
"any I/O operation was started.  Use a more specific fault code when you can."
msgstr ""

#: ../../../i2c/fault-codes.rst:75
msgid "EIO"
msgstr ""

#: ../../../i2c/fault-codes.rst:76
msgid ""
"This rather vague error means something went wrong when performing an I/O "
"operation.  Use a more specific fault code when you can."
msgstr ""

#: ../../../i2c/fault-codes.rst:80
msgid "ENODEV"
msgstr ""

#: ../../../i2c/fault-codes.rst:81
msgid ""
"Returned by driver probe() methods.  This is a bit more specific than ENXIO, "
"implying the problem isn't with the address, but with the device found "
"there.  Driver probes may verify the device returns *correct* responses, and "
"return this as appropriate.  (The driver core will warn about probe faults "
"other than ENXIO and ENODEV.)"
msgstr ""

#: ../../../i2c/fault-codes.rst:88
msgid "ENOMEM"
msgstr ""

#: ../../../i2c/fault-codes.rst:89
msgid ""
"Returned by any component that can't allocate memory when it needs to do so."
msgstr ""

#: ../../../i2c/fault-codes.rst:92
msgid "ENXIO"
msgstr ""

#: ../../../i2c/fault-codes.rst:93
msgid ""
"Returned by I2C adapters to indicate that the address phase of a transfer "
"didn't get an ACK.  While it might just mean an I2C device was temporarily "
"not responding, usually it means there's nothing listening at that address."
msgstr ""

#: ../../../i2c/fault-codes.rst:98
msgid ""
"Returned by driver probe() methods to indicate that they found no device to "
"bind to.  (ENODEV may also be used.)"
msgstr ""

#: ../../../i2c/fault-codes.rst:101
msgid "EOPNOTSUPP"
msgstr ""

#: ../../../i2c/fault-codes.rst:102
msgid ""
"Returned by an adapter when asked to perform an operation that it doesn't, "
"or can't, support."
msgstr ""

#: ../../../i2c/fault-codes.rst:105
msgid ""
"For example, this would be returned when an adapter that doesn't support "
"SMBus block transfers is asked to execute one.  In that case, the driver "
"making that request should have verified that functionality was supported "
"before it made that block transfer request."
msgstr ""

#: ../../../i2c/fault-codes.rst:111
msgid ""
"Similarly, if an I2C adapter can't execute all legal I2C messages, it should "
"return this when asked to perform a transaction it can't.  (These "
"limitations can't be seen in the adapter's functionality mask, since the "
"assumption is that if an adapter supports I2C it supports all of I2C.)"
msgstr ""

#: ../../../i2c/fault-codes.rst:117
msgid "EPROTO"
msgstr ""

#: ../../../i2c/fault-codes.rst:118
msgid ""
"Returned when slave does not conform to the relevant I2C or SMBus (or chip-"
"specific) protocol specifications.  One case is when the length of an SMBus "
"block data response (from the SMBus slave) is outside the range 1-32 bytes."
msgstr ""

#: ../../../i2c/fault-codes.rst:123
msgid "ESHUTDOWN"
msgstr ""

#: ../../../i2c/fault-codes.rst:124
msgid ""
"Returned when a transfer was requested using an adapter which is already "
"suspended."
msgstr ""

#: ../../../i2c/fault-codes.rst:127
msgid "ETIMEDOUT"
msgstr ""

#: ../../../i2c/fault-codes.rst:128
msgid ""
"This is returned by drivers when an operation took too much time, and was "
"aborted before it completed."
msgstr ""

#: ../../../i2c/fault-codes.rst:131
msgid ""
"SMBus adapters may return it when an operation took more time than allowed "
"by the SMBus specification; for example, when a slave stretches clocks too "
"far.  I2C has no such timeouts, but it's normal for I2C adapters to impose "
"some arbitrary limits (much longer than SMBus!) too."
msgstr ""
