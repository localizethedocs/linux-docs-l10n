# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../dev-tools/kasan.rst:5
msgid "Kernel Address Sanitizer (KASAN)"
msgstr ""

#: ../../../dev-tools/kasan.rst:8
msgid "Overview"
msgstr ""

#: ../../../dev-tools/kasan.rst:10
msgid ""
"Kernel Address Sanitizer (KASAN) is a dynamic memory safety error detector "
"designed to find out-of-bounds and use-after-free bugs."
msgstr ""

#: ../../../dev-tools/kasan.rst:13
msgid "KASAN has three modes:"
msgstr ""

#: ../../../dev-tools/kasan.rst:15 ../../../dev-tools/kasan.rst:305
msgid "Generic KASAN"
msgstr ""

#: ../../../dev-tools/kasan.rst:16 ../../../dev-tools/kasan.rst:340
msgid "Software Tag-Based KASAN"
msgstr ""

#: ../../../dev-tools/kasan.rst:17 ../../../dev-tools/kasan.rst:372
msgid "Hardware Tag-Based KASAN"
msgstr ""

#: ../../../dev-tools/kasan.rst:19
msgid ""
"Generic KASAN, enabled with CONFIG_KASAN_GENERIC, is the mode intended for "
"debugging, similar to userspace ASan. This mode is supported on many CPU "
"architectures, but it has significant performance and memory overheads."
msgstr ""

#: ../../../dev-tools/kasan.rst:23
msgid ""
"Software Tag-Based KASAN or SW_TAGS KASAN, enabled with "
"CONFIG_KASAN_SW_TAGS, can be used for both debugging and dogfood testing, "
"similar to userspace HWASan. This mode is only supported for arm64, but its "
"moderate memory overhead allows using it for testing on memory-restricted "
"devices with real workloads."
msgstr ""

#: ../../../dev-tools/kasan.rst:28
msgid ""
"Hardware Tag-Based KASAN or HW_TAGS KASAN, enabled with "
"CONFIG_KASAN_HW_TAGS, is the mode intended to be used as an in-field memory "
"bug detector or as a security mitigation. This mode only works on arm64 CPUs "
"that support MTE (Memory Tagging Extension), but it has low memory and "
"performance overheads and thus can be used in production."
msgstr ""

#: ../../../dev-tools/kasan.rst:34
msgid ""
"For details about the memory and performance impact of each KASAN mode, see "
"the descriptions of the corresponding Kconfig options."
msgstr ""

#: ../../../dev-tools/kasan.rst:37
msgid ""
"The Generic and the Software Tag-Based modes are commonly referred to as the "
"software modes. The Software Tag-Based and the Hardware Tag-Based modes are "
"referred to as the tag-based modes."
msgstr ""

#: ../../../dev-tools/kasan.rst:42
msgid "Support"
msgstr ""

#: ../../../dev-tools/kasan.rst:45
msgid "Architectures"
msgstr ""

#: ../../../dev-tools/kasan.rst:47
msgid ""
"Generic KASAN is supported on x86_64, arm, arm64, powerpc, riscv, s390, "
"xtensa, and loongarch, and the tag-based KASAN modes are supported only on "
"arm64."
msgstr ""

#: ../../../dev-tools/kasan.rst:51
msgid "Compilers"
msgstr ""

#: ../../../dev-tools/kasan.rst:53
msgid ""
"Software KASAN modes use compile-time instrumentation to insert validity "
"checks before every memory access and thus require a compiler version that "
"provides support for that. The Hardware Tag-Based mode relies on hardware to "
"perform these checks but still requires a compiler version that supports the "
"memory tagging instructions."
msgstr ""

#: ../../../dev-tools/kasan.rst:59
msgid ""
"Generic KASAN requires GCC version 8.3.0 or later or any Clang version "
"supported by the kernel."
msgstr ""

#: ../../../dev-tools/kasan.rst:62
msgid ""
"Software Tag-Based KASAN requires GCC 11+ or any Clang version supported by "
"the kernel."
msgstr ""

#: ../../../dev-tools/kasan.rst:65
msgid "Hardware Tag-Based KASAN requires GCC 10+ or Clang 12+."
msgstr ""

#: ../../../dev-tools/kasan.rst:68
msgid "Memory types"
msgstr ""

#: ../../../dev-tools/kasan.rst:70
msgid ""
"Generic KASAN supports finding bugs in all of slab, page_alloc, vmap, "
"vmalloc, stack, and global memory."
msgstr ""

#: ../../../dev-tools/kasan.rst:73
msgid ""
"Software Tag-Based KASAN supports slab, page_alloc, vmalloc, and stack "
"memory."
msgstr ""

#: ../../../dev-tools/kasan.rst:75
msgid ""
"Hardware Tag-Based KASAN supports slab, page_alloc, and non-executable "
"vmalloc memory."
msgstr ""

#: ../../../dev-tools/kasan.rst:78
msgid ""
"For slab, both software KASAN modes support SLUB and SLAB allocators, while "
"Hardware Tag-Based KASAN only supports SLUB."
msgstr ""

#: ../../../dev-tools/kasan.rst:82
msgid "Usage"
msgstr ""

#: ../../../dev-tools/kasan.rst:84
msgid "To enable KASAN, configure the kernel with::"
msgstr ""

#: ../../../dev-tools/kasan.rst:88
msgid ""
"and choose between ``CONFIG_KASAN_GENERIC`` (to enable Generic KASAN), "
"``CONFIG_KASAN_SW_TAGS`` (to enable Software Tag-Based KASAN), and "
"``CONFIG_KASAN_HW_TAGS`` (to enable Hardware Tag-Based KASAN)."
msgstr ""

#: ../../../dev-tools/kasan.rst:92
msgid ""
"For the software modes, also choose between ``CONFIG_KASAN_OUTLINE`` and "
"``CONFIG_KASAN_INLINE``. Outline and inline are compiler instrumentation "
"types. The former produces a smaller binary while the latter is up to 2 "
"times faster."
msgstr ""

#: ../../../dev-tools/kasan.rst:96
msgid ""
"To include alloc and free stack traces of affected slab objects into "
"reports, enable ``CONFIG_STACKTRACE``. To include alloc and free stack "
"traces of affected physical pages, enable ``CONFIG_PAGE_OWNER`` and boot "
"with ``page_owner=on``."
msgstr ""

#: ../../../dev-tools/kasan.rst:101
msgid "Boot parameters"
msgstr ""

#: ../../../dev-tools/kasan.rst:103
msgid ""
"KASAN is affected by the generic ``panic_on_warn`` command line parameter. "
"When it is enabled, KASAN panics the kernel after printing a bug report."
msgstr ""

#: ../../../dev-tools/kasan.rst:106
msgid ""
"By default, KASAN prints a bug report only for the first invalid memory "
"access. With ``kasan_multi_shot``, KASAN prints a report on every invalid "
"access. This effectively disables ``panic_on_warn`` for KASAN reports."
msgstr ""

#: ../../../dev-tools/kasan.rst:110
msgid ""
"Alternatively, independent of ``panic_on_warn``, the ``kasan.fault=`` boot "
"parameter can be used to control panic and reporting behaviour:"
msgstr ""

#: ../../../dev-tools/kasan.rst:113
msgid ""
"``kasan.fault=report``, ``=panic``, or ``=panic_on_write`` controls whether "
"to only print a KASAN report, panic the kernel, or panic the kernel on "
"invalid writes only (default: ``report``). The panic happens even if "
"``kasan_multi_shot`` is enabled. Note that when using asynchronous mode of "
"Hardware Tag-Based KASAN, ``kasan.fault=panic_on_write`` always panics on "
"asynchronously checked accesses (including reads)."
msgstr ""

#: ../../../dev-tools/kasan.rst:120
msgid ""
"Software and Hardware Tag-Based KASAN modes (see the section about various "
"modes below) support altering stack trace collection behavior:"
msgstr ""

#: ../../../dev-tools/kasan.rst:123
msgid ""
"``kasan.stacktrace=off`` or ``=on`` disables or enables alloc and free stack "
"traces collection (default: ``on``)."
msgstr ""

#: ../../../dev-tools/kasan.rst:125
msgid ""
"``kasan.stack_ring_size=<number of entries>`` specifies the number of "
"entries in the stack ring (default: ``32768``)."
msgstr ""

#: ../../../dev-tools/kasan.rst:128
msgid ""
"Hardware Tag-Based KASAN mode is intended for use in production as a "
"security mitigation. Therefore, it supports additional boot parameters that "
"allow disabling KASAN altogether or controlling its features:"
msgstr ""

#: ../../../dev-tools/kasan.rst:132
msgid ""
"``kasan=off`` or ``=on`` controls whether KASAN is enabled (default: ``on``)."
msgstr ""

#: ../../../dev-tools/kasan.rst:134
msgid ""
"``kasan.mode=sync``, ``=async`` or ``=asymm`` controls whether KASAN is "
"configured in synchronous, asynchronous or asymmetric mode of execution "
"(default: ``sync``). Synchronous mode: a bad access is detected immediately "
"when a tag check fault occurs. Asynchronous mode: a bad access detection is "
"delayed. When a tag check fault occurs, the information is stored in "
"hardware (in the TFSR_EL1 register for arm64). The kernel periodically "
"checks the hardware and only reports tag faults during these checks. "
"Asymmetric mode: a bad access is detected synchronously on reads and "
"asynchronously on writes."
msgstr ""

#: ../../../dev-tools/kasan.rst:146
msgid ""
"``kasan.vmalloc=off`` or ``=on`` disables or enables tagging of vmalloc "
"allocations (default: ``on``)."
msgstr ""

#: ../../../dev-tools/kasan.rst:149
msgid ""
"``kasan.page_alloc.sample=<sampling interval>`` makes KASAN tag only every "
"Nth page_alloc allocation with the order equal or greater than ``kasan."
"page_alloc.sample.order``, where N is the value of the ``sample`` parameter "
"(default: ``1``, or tag every such allocation). This parameter is intended "
"to mitigate the performance overhead introduced by KASAN. Note that enabling "
"this parameter makes Hardware Tag-Based KASAN skip checks of allocations "
"chosen by sampling and thus miss bad accesses to these allocations. Use the "
"default value for accurate bug detection."
msgstr ""

#: ../../../dev-tools/kasan.rst:159
msgid ""
"``kasan.page_alloc.sample.order=<minimum page order>`` specifies the minimum "
"order of allocations that are affected by sampling (default: ``3``). Only "
"applies when ``kasan.page_alloc.sample`` is set to a value greater than "
"``1``. This parameter is intended to allow sampling only large page_alloc "
"allocations, which is the biggest source of the performance overhead."
msgstr ""

#: ../../../dev-tools/kasan.rst:167
msgid "Error reports"
msgstr ""

#: ../../../dev-tools/kasan.rst:169
msgid "A typical KASAN report looks like this::"
msgstr ""

#: ../../../dev-tools/kasan.rst:242
msgid ""
"The report header summarizes what kind of bug happened and what kind of "
"access caused it. It is followed by a stack trace of the bad access, a stack "
"trace of where the accessed memory was allocated (in case a slab object was "
"accessed), and a stack trace of where the object was freed (in case of a use-"
"after-free bug report). Next comes a description of the accessed slab object "
"and the information about the accessed memory page."
msgstr ""

#: ../../../dev-tools/kasan.rst:249
msgid ""
"In the end, the report shows the memory state around the accessed address. "
"Internally, KASAN tracks memory state separately for each memory granule, "
"which is either 8 or 16 aligned bytes depending on KASAN mode. Each number "
"in the memory state section of the report shows the state of one of the "
"memory granules that surround the accessed address."
msgstr ""

#: ../../../dev-tools/kasan.rst:255
msgid ""
"For Generic KASAN, the size of each memory granule is 8. The state of each "
"granule is encoded in one shadow byte. Those 8 bytes can be accessible, "
"partially accessible, freed, or be a part of a redzone. KASAN uses the "
"following encoding for each shadow byte: 00 means that all 8 bytes of the "
"corresponding memory region are accessible; number N (1 <= N <= 7) means "
"that the first N bytes are accessible, and other (8 - N) bytes are not; any "
"negative value indicates that the entire 8-byte word is inaccessible. KASAN "
"uses different negative values to distinguish between different kinds of "
"inaccessible memory like redzones or freed memory (see mm/kasan/kasan.h)."
msgstr ""

#: ../../../dev-tools/kasan.rst:265
msgid ""
"In the report above, the arrow points to the shadow byte ``03``, which means "
"that the accessed address is partially accessible."
msgstr ""

#: ../../../dev-tools/kasan.rst:268
msgid ""
"For tag-based KASAN modes, this last report section shows the memory tags "
"around the accessed address (see the `Implementation details`_ section)."
msgstr ""

#: ../../../dev-tools/kasan.rst:271
msgid ""
"Note that KASAN bug titles (like ``slab-out-of-bounds`` or ``use-after-"
"free``) are best-effort: KASAN prints the most probable bug type based on "
"the limited information it has. The actual type of the bug might be "
"different."
msgstr ""

#: ../../../dev-tools/kasan.rst:275
msgid ""
"Generic KASAN also reports up to two auxiliary call stack traces. These "
"stack traces point to places in code that interacted with the object but "
"that are not directly present in the bad access stack trace. Currently, this "
"includes call_rcu() and workqueue queuing."
msgstr ""

#: ../../../dev-tools/kasan.rst:281
msgid "CONFIG_KASAN_EXTRA_INFO"
msgstr ""

#: ../../../dev-tools/kasan.rst:283
msgid ""
"Enabling CONFIG_KASAN_EXTRA_INFO allows KASAN to record and report more "
"information. The extra information currently supported is the CPU number and "
"timestamp at allocation and free. More information can help find the cause "
"of the bug and correlate the error with other system events, at the cost of "
"using extra memory to record more information (more cost details in the help "
"text of CONFIG_KASAN_EXTRA_INFO)."
msgstr ""

#: ../../../dev-tools/kasan.rst:290
msgid ""
"Here is the report with CONFIG_KASAN_EXTRA_INFO enabled (only the different "
"parts are shown)::"
msgstr ""

#: ../../../dev-tools/kasan.rst:302
msgid "Implementation details"
msgstr ""

#: ../../../dev-tools/kasan.rst:307
msgid ""
"Software KASAN modes use shadow memory to record whether each byte of memory "
"is safe to access and use compile-time instrumentation to insert shadow "
"memory checks before each memory access."
msgstr ""

#: ../../../dev-tools/kasan.rst:311
msgid ""
"Generic KASAN dedicates 1/8th of kernel memory to its shadow memory (16TB to "
"cover 128TB on x86_64) and uses direct mapping with a scale and offset to "
"translate a memory address to its corresponding shadow address."
msgstr ""

#: ../../../dev-tools/kasan.rst:315
msgid ""
"Here is the function which translates an address to its corresponding shadow "
"address::"
msgstr ""

#: ../../../dev-tools/kasan.rst:324
msgid "where ``KASAN_SHADOW_SCALE_SHIFT = 3``."
msgstr ""

#: ../../../dev-tools/kasan.rst:326
msgid ""
"Compile-time instrumentation is used to insert memory access checks. "
"Compiler inserts function calls (``__asan_load*(addr)``, "
"``__asan_store*(addr)``) before each memory access of size 1, 2, 4, 8, or "
"16. These functions check whether memory accesses are valid or not by "
"checking corresponding shadow memory."
msgstr ""

#: ../../../dev-tools/kasan.rst:331
msgid ""
"With inline instrumentation, instead of making function calls, the compiler "
"directly inserts the code to check shadow memory. This option significantly "
"enlarges the kernel, but it gives an x1.1-x2 performance boost over the "
"outline-instrumented kernel."
msgstr ""

#: ../../../dev-tools/kasan.rst:336
msgid ""
"Generic KASAN is the only mode that delays the reuse of freed objects via "
"quarantine (see mm/kasan/quarantine.c for implementation)."
msgstr ""

#: ../../../dev-tools/kasan.rst:342
msgid ""
"Software Tag-Based KASAN uses a software memory tagging approach to checking "
"access validity. It is currently only implemented for the arm64 architecture."
msgstr ""

#: ../../../dev-tools/kasan.rst:345
msgid ""
"Software Tag-Based KASAN uses the Top Byte Ignore (TBI) feature of arm64 "
"CPUs to store a pointer tag in the top byte of kernel pointers. It uses "
"shadow memory to store memory tags associated with each 16-byte memory cell "
"(therefore, it dedicates 1/16th of the kernel memory for shadow memory)."
msgstr ""

#: ../../../dev-tools/kasan.rst:350
msgid ""
"On each memory allocation, Software Tag-Based KASAN generates a random tag, "
"tags the allocated memory with this tag, and embeds the same tag into the "
"returned pointer."
msgstr ""

#: ../../../dev-tools/kasan.rst:354
msgid ""
"Software Tag-Based KASAN uses compile-time instrumentation to insert checks "
"before each memory access. These checks make sure that the tag of the memory "
"that is being accessed is equal to the tag of the pointer that is used to "
"access this memory. In case of a tag mismatch, Software Tag-Based KASAN "
"prints a bug report."
msgstr ""

#: ../../../dev-tools/kasan.rst:360
msgid ""
"Software Tag-Based KASAN also has two instrumentation modes (outline, which "
"emits callbacks to check memory accesses; and inline, which performs the "
"shadow memory checks inline). With outline instrumentation mode, a bug "
"report is printed from the function that performs the access check. With "
"inline instrumentation, a ``brk`` instruction is emitted by the compiler, "
"and a dedicated ``brk`` handler is used to print bug reports."
msgstr ""

#: ../../../dev-tools/kasan.rst:367
msgid ""
"Software Tag-Based KASAN uses 0xFF as a match-all pointer tag (accesses "
"through pointers with the 0xFF pointer tag are not checked). The value 0xFE "
"is currently reserved to tag freed memory regions."
msgstr ""

#: ../../../dev-tools/kasan.rst:374
msgid ""
"Hardware Tag-Based KASAN is similar to the software mode in concept but uses "
"hardware memory tagging support instead of compiler instrumentation and "
"shadow memory."
msgstr ""

#: ../../../dev-tools/kasan.rst:378
msgid ""
"Hardware Tag-Based KASAN is currently only implemented for arm64 "
"architecture and based on both arm64 Memory Tagging Extension (MTE) "
"introduced in ARMv8.5 Instruction Set Architecture and Top Byte Ignore (TBI)."
msgstr ""

#: ../../../dev-tools/kasan.rst:382
msgid ""
"Special arm64 instructions are used to assign memory tags for each "
"allocation. Same tags are assigned to pointers to those allocations. On "
"every memory access, hardware makes sure that the tag of the memory that is "
"being accessed is equal to the tag of the pointer that is used to access "
"this memory. In case of a tag mismatch, a fault is generated, and a report "
"is printed."
msgstr ""

#: ../../../dev-tools/kasan.rst:388
msgid ""
"Hardware Tag-Based KASAN uses 0xFF as a match-all pointer tag (accesses "
"through pointers with the 0xFF pointer tag are not checked). The value 0xFE "
"is currently reserved to tag freed memory regions."
msgstr ""

#: ../../../dev-tools/kasan.rst:392
msgid ""
"If the hardware does not support MTE (pre ARMv8.5), Hardware Tag-Based KASAN "
"will not be enabled. In this case, all KASAN boot parameters are ignored."
msgstr ""

#: ../../../dev-tools/kasan.rst:395
msgid ""
"Note that enabling CONFIG_KASAN_HW_TAGS always results in in-kernel TBI "
"being enabled. Even when ``kasan.mode=off`` is provided or when the hardware "
"does not support MTE (but supports TBI)."
msgstr ""

#: ../../../dev-tools/kasan.rst:399
msgid ""
"Hardware Tag-Based KASAN only reports the first found bug. After that, MTE "
"tag checking gets disabled."
msgstr ""

#: ../../../dev-tools/kasan.rst:403
msgid "Shadow memory"
msgstr ""

#: ../../../dev-tools/kasan.rst:405
msgid ""
"The contents of this section are only applicable to software KASAN modes."
msgstr ""

#: ../../../dev-tools/kasan.rst:407
msgid ""
"The kernel maps memory in several different parts of the address space. The "
"range of kernel virtual addresses is large: there is not enough real memory "
"to support a real shadow region for every address that could be accessed by "
"the kernel. Therefore, KASAN only maps real shadow for certain parts of the "
"address space."
msgstr ""

#: ../../../dev-tools/kasan.rst:414
msgid "Default behaviour"
msgstr ""

#: ../../../dev-tools/kasan.rst:416
msgid ""
"By default, architectures only map real memory over the shadow region for "
"the linear mapping (and potentially other small areas). For all other areas "
"- such as vmalloc and vmemmap space - a single read-only page is mapped over "
"the shadow area. This read-only shadow page declares all memory accesses as "
"permitted."
msgstr ""

#: ../../../dev-tools/kasan.rst:422
msgid ""
"This presents a problem for modules: they do not live in the linear mapping "
"but in a dedicated module space. By hooking into the module allocator, KASAN "
"temporarily maps real shadow memory to cover them. This allows detection of "
"invalid accesses to module globals, for example."
msgstr ""

#: ../../../dev-tools/kasan.rst:427
msgid ""
"This also creates an incompatibility with ``VMAP_STACK``: if the stack lives "
"in vmalloc space, it will be shadowed by the read-only page, and the kernel "
"will fault when trying to set up the shadow data for stack variables."
msgstr ""

#: ../../../dev-tools/kasan.rst:433
msgid "CONFIG_KASAN_VMALLOC"
msgstr ""

#: ../../../dev-tools/kasan.rst:435
msgid ""
"With ``CONFIG_KASAN_VMALLOC``, KASAN can cover vmalloc space at the cost of "
"greater memory usage. Currently, this is supported on x86, arm64, riscv, "
"s390, and powerpc."
msgstr ""

#: ../../../dev-tools/kasan.rst:439
msgid ""
"This works by hooking into vmalloc and vmap and dynamically allocating real "
"shadow memory to back the mappings."
msgstr ""

#: ../../../dev-tools/kasan.rst:442
msgid ""
"Most mappings in vmalloc space are small, requiring less than a full page of "
"shadow space. Allocating a full shadow page per mapping would therefore be "
"wasteful. Furthermore, to ensure that different mappings use different "
"shadow pages, mappings would have to be aligned to ``KASAN_GRANULE_SIZE * "
"PAGE_SIZE``."
msgstr ""

#: ../../../dev-tools/kasan.rst:448
msgid ""
"Instead, KASAN shares backing space across multiple mappings. It allocates a "
"backing page when a mapping in vmalloc space uses a particular page of the "
"shadow region. This page can be shared by other vmalloc mappings later on."
msgstr ""

#: ../../../dev-tools/kasan.rst:453
msgid ""
"KASAN hooks into the vmap infrastructure to lazily clean up unused shadow "
"memory."
msgstr ""

#: ../../../dev-tools/kasan.rst:456
msgid ""
"To avoid the difficulties around swapping mappings around, KASAN expects "
"that the part of the shadow region that covers the vmalloc space will not be "
"covered by the early shadow page but will be left unmapped. This will "
"require changes in arch-specific code."
msgstr ""

#: ../../../dev-tools/kasan.rst:461
msgid ""
"This allows ``VMAP_STACK`` support on x86 and can simplify support of "
"architectures that do not have a fixed module region."
msgstr ""

#: ../../../dev-tools/kasan.rst:465
msgid "For developers"
msgstr ""

#: ../../../dev-tools/kasan.rst:468
msgid "Ignoring accesses"
msgstr ""

#: ../../../dev-tools/kasan.rst:470
msgid ""
"Software KASAN modes use compiler instrumentation to insert validity checks. "
"Such instrumentation might be incompatible with some parts of the kernel, "
"and therefore needs to be disabled."
msgstr ""

#: ../../../dev-tools/kasan.rst:474
msgid ""
"Other parts of the kernel might access metadata for allocated objects. "
"Normally, KASAN detects and reports such accesses, but in some cases (e.g., "
"in memory allocators), these accesses are valid."
msgstr ""

#: ../../../dev-tools/kasan.rst:478
msgid ""
"For software KASAN modes, to disable instrumentation for a specific file or "
"directory, add a ``KASAN_SANITIZE`` annotation to the respective kernel "
"Makefile:"
msgstr ""

#: ../../../dev-tools/kasan.rst:482
msgid "For a single file (e.g., main.o)::"
msgstr ""

#: ../../../dev-tools/kasan.rst:486
msgid "For all files in one directory::"
msgstr ""

#: ../../../dev-tools/kasan.rst:490
msgid ""
"For software KASAN modes, to disable instrumentation on a per-function "
"basis, use the KASAN-specific ``__no_sanitize_address`` function attribute "
"or the generic ``noinstr`` one."
msgstr ""

#: ../../../dev-tools/kasan.rst:494
msgid ""
"Note that disabling compiler instrumentation (either on a per-file or a per-"
"function basis) makes KASAN ignore the accesses that happen directly in that "
"code for software KASAN modes. It does not help when the accesses happen "
"indirectly (through calls to instrumented functions) or with Hardware Tag-"
"Based KASAN, which does not use compiler instrumentation."
msgstr ""

#: ../../../dev-tools/kasan.rst:500
msgid ""
"For software KASAN modes, to disable KASAN reports in a part of the kernel "
"code for the current task, annotate this part of the code with a "
"``kasan_disable_current()``/``kasan_enable_current()`` section. This also "
"disables the reports for indirect accesses that happen through function "
"calls."
msgstr ""

#: ../../../dev-tools/kasan.rst:505
msgid ""
"For tag-based KASAN modes, to disable access checking, use "
"``kasan_reset_tag()`` or ``page_kasan_tag_reset()``. Note that temporarily "
"disabling access checking via ``page_kasan_tag_reset()`` requires saving and "
"restoring the per-page KASAN tag via ``page_kasan_tag``/"
"``page_kasan_tag_set``."
msgstr ""

#: ../../../dev-tools/kasan.rst:511
msgid "Tests"
msgstr ""

#: ../../../dev-tools/kasan.rst:513
msgid ""
"There are KASAN tests that allow verifying that KASAN works and can detect "
"certain types of memory corruptions."
msgstr ""

#: ../../../dev-tools/kasan.rst:516
msgid ""
"All KASAN tests are integrated with the KUnit Test Framework and can be "
"enabled via ``CONFIG_KASAN_KUNIT_TEST``. The tests can be run and partially "
"verified automatically in a few different ways; see the instructions below."
msgstr ""

#: ../../../dev-tools/kasan.rst:520
msgid ""
"Each KASAN test prints one of multiple KASAN reports if an error is "
"detected. Then the test prints its number and status."
msgstr ""

#: ../../../dev-tools/kasan.rst:523
msgid "When a test passes::"
msgstr ""

#: ../../../dev-tools/kasan.rst:527
msgid "When a test fails due to a failed ``kmalloc``::"
msgstr ""

#: ../../../dev-tools/kasan.rst:533
msgid "When a test fails due to a missing KASAN report::"
msgstr ""

#: ../../../dev-tools/kasan.rst:540
msgid ""
"At the end the cumulative status of all KASAN tests is printed. On success::"
msgstr ""

#: ../../../dev-tools/kasan.rst:544
msgid "Or, if one of the tests failed::"
msgstr ""

#: ../../../dev-tools/kasan.rst:548
msgid "There are a few ways to run the KASAN tests."
msgstr ""

#: ../../../dev-tools/kasan.rst:550
msgid "Loadable module"
msgstr ""

#: ../../../dev-tools/kasan.rst:552
msgid ""
"With ``CONFIG_KUNIT`` enabled, the tests can be built as a loadable module "
"and run by loading ``kasan_test.ko`` with ``insmod`` or ``modprobe``."
msgstr ""

#: ../../../dev-tools/kasan.rst:555
msgid "Built-In"
msgstr ""

#: ../../../dev-tools/kasan.rst:557
msgid ""
"With ``CONFIG_KUNIT`` built-in, the tests can be built-in as well. In this "
"case, the tests will run at boot as a late-init call."
msgstr ""

#: ../../../dev-tools/kasan.rst:560
msgid "Using kunit_tool"
msgstr ""

#: ../../../dev-tools/kasan.rst:562
msgid ""
"With ``CONFIG_KUNIT`` and ``CONFIG_KASAN_KUNIT_TEST`` built-in, it is also "
"possible to use ``kunit_tool`` to see the results of KUnit tests in a more "
"readable way. This will not print the KASAN reports of the tests that "
"passed. See `KUnit documentation <https://www.kernel.org/doc/html/latest/dev-"
"tools/kunit/index.html>`_ for more up-to-date information on ``kunit_tool``."
msgstr ""
