# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../dev-tools/kunit/architecture.rst:5
msgid "KUnit Architecture"
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:7
msgid "The KUnit architecture is divided into two parts:"
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:9
msgid "`In-Kernel Testing Framework`_"
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:10
msgid "`kunit_tool (Command-line Test Harness)`_"
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:13
msgid "In-Kernel Testing Framework"
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:15
msgid ""
"The kernel testing library supports KUnit tests written in C using KUnit. "
"These KUnit tests are kernel code. KUnit performs the following tasks:"
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:19
msgid "Organizes tests"
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:20
msgid "Reports test results"
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:21
msgid "Provides test utilities"
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:24
msgid "Test Cases"
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:26
msgid ""
"The test case is the fundamental unit in KUnit. KUnit test cases are "
"organised into suites. A KUnit test case is a function with type signature "
"``void (*)(struct kunit *test)``. These test case functions are wrapped in a "
"struct called struct kunit_case."
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:34
msgid ""
"Each KUnit test case receives a ``struct kunit`` context object that tracks "
"a running test. The KUnit assertion macros and other KUnit utilities use the "
"``struct kunit`` context object. As an exception, there are two fields:"
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:38
msgid ""
"``->priv``: The setup functions can use it to store arbitrary test user data."
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:41
msgid ""
"``->param_value``: It contains the parameter value which can be retrieved in "
"the parameterized tests."
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:45
msgid "Test Suites"
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:47
msgid ""
"A KUnit suite includes a collection of test cases. The KUnit suites are "
"represented by the ``struct kunit_suite``. For example:"
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:67
msgid ""
"In the above example, the test suite ``example_test_suite``, runs the test "
"cases ``example_test_foo``, ``example_test_bar``, and ``example_test_baz``. "
"Before running the test, the ``example_test_init`` is called and after "
"running the test, ``example_test_exit`` is called. The "
"``kunit_test_suite(example_test_suite)`` registers the test suite with the "
"KUnit test framework."
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:75
msgid "Executor"
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:77
msgid ""
"The KUnit executor can list and run built-in KUnit tests on boot. The Test "
"suites are stored in a linker section called ``.kunit_test_suites``. For the "
"code, see ``KUNIT_TABLE()`` macro definition in `include/asm-generic/vmlinux."
"lds.h <https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/"
"tree/include/asm-generic/vmlinux.lds.h?h=v6.0#n950>`_. The linker section "
"consists of an array of pointers to ``struct kunit_suite``, and is populated "
"by the ``kunit_test_suites()`` macro. The KUnit executor iterates over the "
"linker section array in order to run all the tests that are compiled into "
"the kernel."
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:87
msgid "KUnit Suite Memory"
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:90
msgid "KUnit Suite Memory Diagram"
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:92
msgid ""
"On the kernel boot, the KUnit executor uses the start and end addresses of "
"this section to iterate over and run all tests. For the implementation of "
"the executor, see `lib/kunit/executor.c <https://git.kernel.org/pub/scm/"
"linux/kernel/git/torvalds/linux.git/tree/lib/kunit/executor.c>`_. When built "
"as a module, the ``kunit_test_suites()`` macro defines a ``module_init()`` "
"function, which runs all the tests in the compilation unit instead of "
"utilizing the executor."
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:100
msgid ""
"In KUnit tests, some error classes do not affect other tests or parts of the "
"kernel, each KUnit case executes in a separate thread context. See the "
"``kunit_try_catch_run()`` function in `lib/kunit/try-catch.c <https://git."
"kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/lib/kunit/try-"
"catch.c?h=v5.15#n58>`_."
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:106
msgid "Assertion Macros"
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:108
msgid ""
"KUnit tests verify state using expectations/assertions. All expectations/"
"assertions are formatted as: ``KUNIT_{EXPECT|ASSERT}_<op>[_MSG](kunit, "
"property[, message])``"
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:112
msgid ""
"``{EXPECT|ASSERT}`` determines whether the check is an assertion or an "
"expectation. In the event of a failure, the testing flow differs as follows:"
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:116
msgid ""
"For expectations, the test is marked as failed and the failure is logged."
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:118
msgid ""
"Failing assertions, on the other hand, result in the test case being "
"terminated immediately."
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:121
msgid ""
"Assertions call the function: ``void __noreturn __kunit_abort(struct kunit "
"*)``."
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:124
msgid ""
"``__kunit_abort`` calls the function: ``void __noreturn "
"kunit_try_catch_throw(struct kunit_try_catch *try_catch)``."
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:127
msgid ""
"``kunit_try_catch_throw`` calls the function: ``void "
"kthread_complete_and_exit(struct completion *, long) __noreturn;`` and "
"terminates the special thread context."
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:131
msgid ""
"``<op>`` denotes a check with options: ``TRUE`` (supplied property has the "
"boolean value \"true\"), ``EQ`` (two supplied properties are equal), "
"``NOT_ERR_OR_NULL`` (supplied pointer is not null and does not contain an "
"\"err\" value)."
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:136
msgid "``[_MSG]`` prints a custom message on failure."
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:139
msgid "Test Result Reporting"
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:140
msgid ""
"KUnit prints the test results in KTAP format. KTAP is based on TAP14, see "
"Documentation/dev-tools/ktap.rst. KTAP works with KUnit and Kselftest. The "
"KUnit executor prints KTAP results to dmesg, and debugfs (if configured)."
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:146
msgid "Parameterized Tests"
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:148
msgid ""
"Each KUnit parameterized test is associated with a collection of parameters. "
"The test is invoked multiple times, once for each parameter value and the "
"parameter is stored in the ``param_value`` field. The test case includes a "
"KUNIT_CASE_PARAM() macro that accepts a generator function. The generator "
"function is passed the previous parameter and returns the next parameter. It "
"also includes a macro for generating array-based common-case generators."
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:157
msgid "kunit_tool (Command-line Test Harness)"
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:159
msgid ""
"``kunit_tool`` is a Python script, found in ``tools/testing/kunit/kunit."
"py``. It is used to configure, build, execute, parse test results and run "
"all of the previous commands in correct order (i.e., configure, build, "
"execute and parse). You have two options for running KUnit tests: either "
"build the kernel with KUnit enabled and manually parse the results (see "
"Documentation/dev-tools/kunit/run_manual.rst) or use ``kunit_tool`` (see "
"Documentation/dev-tools/kunit/run_wrapper.rst)."
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:167
msgid ""
"``configure`` command generates the kernel ``.config`` from a ``."
"kunitconfig`` file (and any architecture-specific options). The Python "
"scripts available in ``qemu_configs`` folder (for example, ``tools/testing/"
"kunit/qemu configs/powerpc.py``) contains additional configuration options "
"for specific architectures. It parses both the existing ``.config`` and the "
"``.kunitconfig`` files to ensure that ``.config`` is a superset of ``."
"kunitconfig``. If not, it will combine the two and run ``make olddefconfig`` "
"to regenerate the ``.config`` file. It then checks to see if ``.config`` has "
"become a superset. This verifies that all the Kconfig dependencies are "
"correctly specified in the file ``.kunitconfig``. The ``kunit_config.py`` "
"script contains the code for parsing Kconfigs. The code which runs ``make "
"olddefconfig`` is part of the ``kunit_kernel.py`` script. You can invoke "
"this command through: ``./tools/testing/kunit/kunit.py config`` and generate "
"a ``.config`` file."
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:182
msgid ""
"``build`` runs ``make`` on the kernel tree with required options (depends on "
"the architecture and some options, for example: build_dir) and reports any "
"errors. To build a KUnit kernel from the current ``.config``, you can use "
"the ``build`` argument: ``./tools/testing/kunit/kunit.py build``."
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:187
msgid ""
"``exec`` command executes kernel results either directly (using User-mode "
"Linux configuration), or through an emulator such as QEMU. It reads results "
"from the log using standard output (stdout), and passes them to ``parse`` to "
"be parsed. If you already have built a kernel with built-in KUnit tests, you "
"can run the kernel and display the test results with the ``exec`` argument: "
"``./tools/testing/kunit/kunit.py exec``."
msgstr ""

#: ../../../dev-tools/kunit/architecture.rst:194
msgid ""
"``parse`` extracts the KTAP output from a kernel log, parses the test "
"results, and prints a summary. For failed tests, any diagnostic output will "
"be included."
msgstr ""
