# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../dev-tools/propeller.rst:5
msgid "Using Propeller with the Linux kernel"
msgstr ""

#: ../../../dev-tools/propeller.rst:7
msgid ""
"This enables Propeller build support for the kernel when using Clang "
"compiler. Propeller is a profile-guided optimization (PGO) method used to "
"optimize binary executables. Like AutoFDO, it utilizes hardware sampling to "
"gather information about the frequency of execution of different code paths "
"within a binary. Unlike AutoFDO, this information is then used right before "
"linking phase to optimize (among others) block layout within and across "
"functions."
msgstr ""

#: ../../../dev-tools/propeller.rst:15
msgid "A few important notes about adopting Propeller optimization:"
msgstr ""

#: ../../../dev-tools/propeller.rst:17
msgid ""
"Although it can be used as a standalone optimization step, it is strongly "
"recommended to apply Propeller on top of AutoFDO, AutoFDO+ThinLTO or "
"Instrument FDO. The rest of this document assumes this paradigm."
msgstr ""

#: ../../../dev-tools/propeller.rst:22
msgid ""
"Propeller uses another round of profiling on top of AutoFDO/AutoFDO+ThinLTO/"
"iFDO. The whole build process involves \"build-afdo - train-afdo - build-"
"propeller - train-propeller - build-optimized\"."
msgstr ""

#: ../../../dev-tools/propeller.rst:27
msgid ""
"Propeller requires LLVM 19 release or later for Clang/Clang++ and the "
"linker(ld.lld)."
msgstr ""

#: ../../../dev-tools/propeller.rst:30
msgid ""
"In addition to LLVM toolchain, Propeller requires a profiling conversion "
"tool: https://github.com/google/autofdo with a release after v0.30.1: "
"https://github.com/google/autofdo/releases/tag/v0.30.1."
msgstr ""

#: ../../../dev-tools/propeller.rst:34
msgid "The Propeller optimization process involves the following steps:"
msgstr ""

#: ../../../dev-tools/propeller.rst:36
msgid ""
"Initial building: Build the AutoFDO or AutoFDO+ThinLTO binary as you would "
"normally do, but with a set of compile-time / link-time flags, so that a "
"special metadata section is created within the kernel binary. The special "
"section is only intend to be used by the profiling tool, it is not part of "
"the runtime image, nor does it change kernel run time text sections."
msgstr ""

#: ../../../dev-tools/propeller.rst:43
msgid ""
"Profiling: The above kernel is then run with a representative workload to "
"gather execution frequency data. This data is collected using hardware "
"sampling, via perf. Propeller is most effective on platforms supporting "
"advanced PMU features like LBR on Intel machines. This step is the same as "
"profiling the kernel for AutoFDO (the exact perf parameters can be "
"different)."
msgstr ""

#: ../../../dev-tools/propeller.rst:50
msgid ""
"Propeller profile generation: Perf output file is converted to a pair of "
"Propeller profiles via an offline tool."
msgstr ""

#: ../../../dev-tools/propeller.rst:53
msgid ""
"Optimized build: Build the AutoFDO or AutoFDO+ThinLTO optimized binary as "
"you would normally do, but with a compile-time / link-time flag to pick up "
"the Propeller compile time and link time profiles. This build step uses 3 "
"profiles - the AutoFDO profile, the Propeller compile-time profile and the "
"Propeller link-time profile."
msgstr ""

#: ../../../dev-tools/propeller.rst:60
msgid ""
"Deployment: The optimized kernel binary is deployed and used in production "
"environments, providing improved performance and reduced latency."
msgstr ""

#: ../../../dev-tools/propeller.rst:65
msgid "Preparation"
msgstr ""

#: ../../../dev-tools/propeller.rst:67
msgid "Configure the kernel with::"
msgstr ""

#: ../../../dev-tools/propeller.rst:73
msgid "Customization"
msgstr ""

#: ../../../dev-tools/propeller.rst:75
msgid ""
"The default CONFIG_PROPELLER_CLANG setting covers kernel space objects for "
"Propeller builds. One can, however, enable or disable Propeller build for "
"individual files and directories by adding a line similar to the following "
"to the respective kernel Makefile:"
msgstr ""

#: ../../../dev-tools/propeller.rst:80
msgid "For enabling a single file (e.g. foo.o)::"
msgstr ""

#: ../../../dev-tools/propeller.rst:84
msgid "For enabling all files in one directory::"
msgstr ""

#: ../../../dev-tools/propeller.rst:88
msgid "For disabling one file::"
msgstr ""

#: ../../../dev-tools/propeller.rst:92
msgid "For disabling all files in one directory::"
msgstr ""

#: ../../../dev-tools/propeller.rst:98
msgid "Workflow"
msgstr ""

#: ../../../dev-tools/propeller.rst:100
msgid "Here is an example workflow for building an AutoFDO+Propeller kernel:"
msgstr ""

#: ../../../dev-tools/propeller.rst:102
msgid ""
"Assuming an AutoFDO profile is already collected following instructions in "
"the AutoFDO document, build the kernel on the host machine, with AutoFDO and "
"Propeller build configs ::"
msgstr ""

#: ../../../dev-tools/propeller.rst:109 ../../../dev-tools/propeller.rst:160
msgid "and ::"
msgstr ""

#: ../../../dev-tools/propeller.rst:113
msgid "Install the kernel on the test machine."
msgstr ""

#: ../../../dev-tools/propeller.rst:115
msgid ""
"Run the load tests. The '-c' option in perf specifies the sample event "
"period. We suggest using a suitable prime number, like 500009, for this "
"purpose."
msgstr ""

#: ../../../dev-tools/propeller.rst:119
msgid "For Intel platforms::"
msgstr ""

#: ../../../dev-tools/propeller.rst:123
msgid "For AMD platforms::"
msgstr ""

#: ../../../dev-tools/propeller.rst:127
msgid "Note you can repeat the above steps to collect multiple <perf_file>s."
msgstr ""

#: ../../../dev-tools/propeller.rst:129
msgid "(Optional) Download the raw perf file(s) to the host machine."
msgstr ""

#: ../../../dev-tools/propeller.rst:131
msgid ""
"Use the create_llvm_prof tool (https://github.com/google/autofdo) to "
"generate Propeller profile. ::"
msgstr ""

#: ../../../dev-tools/propeller.rst:139
msgid ""
"\"<propeller_profile_prefix>\" can be something like \"/home/user/dir/"
"any_string\"."
msgstr ""

#: ../../../dev-tools/propeller.rst:141
msgid ""
"This command generates a pair of Propeller profiles: "
"\"<propeller_profile_prefix>_cc_profile.txt\" and "
"\"<propeller_profile_prefix>_ld_profile.txt\"."
msgstr ""

#: ../../../dev-tools/propeller.rst:145
msgid ""
"If there are more than 1 perf_file collected in the previous step, you can "
"create a temp list file \"<perf_file_list>\" with each line containing one "
"perf file name and run::"
msgstr ""

#: ../../../dev-tools/propeller.rst:154
msgid "Rebuild the kernel using the AutoFDO and Propeller profiles. ::"
msgstr ""
