# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../dev-tools/sparse.rst:6
msgid "Sparse"
msgstr ""

#: ../../../dev-tools/sparse.rst:8
msgid ""
"Sparse is a semantic checker for C programs; it can be used to find a number "
"of potential problems with kernel code.  See https://lwn.net/"
"Articles/689907/ for an overview of sparse; this document contains some "
"kernel-specific sparse information. More information on sparse, mainly about "
"its internals, can be found in its official pages at https://sparse.docs."
"kernel.org."
msgstr ""

#: ../../../dev-tools/sparse.rst:17
msgid "Using sparse for typechecking"
msgstr ""

#: ../../../dev-tools/sparse.rst:19
msgid ""
"\"__bitwise\" is a type attribute, so you have to do something like this::"
msgstr ""

#: ../../../dev-tools/sparse.rst:28
msgid ""
"which makes PM_SUSPEND and PM_RESUME \"bitwise\" integers (the \"__force\" "
"is there because sparse will complain about casting to/from a bitwise type, "
"but in this case we really _do_ want to force the conversion). And because "
"the enum values are all the same type, now \"enum pm_request\" will be that "
"type too."
msgstr ""

#: ../../../dev-tools/sparse.rst:34
msgid ""
"And with gcc, all the \"__bitwise\"/\"__force stuff\" goes away, and it all "
"ends up looking just like integers to gcc."
msgstr ""

#: ../../../dev-tools/sparse.rst:37
msgid ""
"Quite frankly, you don't need the enum there. The above all really just "
"boils down to one special \"int __bitwise\" type."
msgstr ""

#: ../../../dev-tools/sparse.rst:40
msgid "So the simpler way is to just do::"
msgstr ""

#: ../../../dev-tools/sparse.rst:47
msgid "and you now have all the infrastructure needed for strict typechecking."
msgstr ""

#: ../../../dev-tools/sparse.rst:49
msgid ""
"One small note: the constant integer \"0\" is special. You can use a "
"constant zero as a bitwise integer type without sparse ever complaining. "
"This is because \"bitwise\" (as the name implies) was designed for making "
"sure that bitwise types don't get mixed up (little-endian vs big-endian vs "
"cpu-endian vs whatever), and there the constant \"0\" really _is_ special."
msgstr ""

#: ../../../dev-tools/sparse.rst:57
msgid "Using sparse for lock checking"
msgstr ""

#: ../../../dev-tools/sparse.rst:59
msgid ""
"The following macros are undefined for gcc and defined during a sparse run "
"to use the \"context\" tracking feature of sparse, applied to locking.  "
"These annotations tell sparse when a lock is held, with regard to the "
"annotated function's entry and exit."
msgstr ""

#: ../../../dev-tools/sparse.rst:64
msgid "__must_hold - The specified lock is held on function entry and exit."
msgstr ""

#: ../../../dev-tools/sparse.rst:66
msgid ""
"__acquires - The specified lock is held on function exit, but not entry."
msgstr ""

#: ../../../dev-tools/sparse.rst:68
msgid ""
"__releases - The specified lock is held on function entry, but not exit."
msgstr ""

#: ../../../dev-tools/sparse.rst:70
msgid ""
"If the function enters and exits without the lock held, acquiring and "
"releasing the lock inside the function in a balanced way, no annotation is "
"needed.  The three annotations above are for cases where sparse would "
"otherwise report a context imbalance."
msgstr ""

#: ../../../dev-tools/sparse.rst:76
msgid "Getting sparse"
msgstr ""

#: ../../../dev-tools/sparse.rst:78
msgid ""
"You can get tarballs of the latest released versions from: https://www."
"kernel.org/pub/software/devel/sparse/dist/"
msgstr ""

#: ../../../dev-tools/sparse.rst:81
msgid ""
"Alternatively, you can get snapshots of the latest development version of "
"sparse using git to clone::"
msgstr ""

#: ../../../dev-tools/sparse.rst:86
msgid "Once you have it, just do::"
msgstr ""

#: ../../../dev-tools/sparse.rst:91
msgid "as a regular user, and it will install sparse in your ~/bin directory."
msgstr ""

#: ../../../dev-tools/sparse.rst:94
msgid "Using sparse"
msgstr ""

#: ../../../dev-tools/sparse.rst:96
msgid ""
"Do a kernel make with \"make C=1\" to run sparse on all the C files that get "
"recompiled, or use \"make C=2\" to run sparse on the files whether they need "
"to be recompiled or not.  The latter is a fast way to check the whole tree "
"if you have already built it."
msgstr ""

#: ../../../dev-tools/sparse.rst:101
msgid ""
"The optional make variable CF can be used to pass arguments to sparse.  The "
"build system passes -Wbitwise to sparse automatically."
msgstr ""

#: ../../../dev-tools/sparse.rst:104
msgid "Note that sparse defines the __CHECKER__ preprocessor symbol."
msgstr ""
