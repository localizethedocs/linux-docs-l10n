# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../rust/general-information.rst:4
msgid "General Information"
msgstr ""

#: ../../../rust/general-information.rst:6
msgid ""
"This document contains useful information to know when working with the Rust "
"support in the kernel."
msgstr ""

#: ../../../rust/general-information.rst:11
msgid "``no_std``"
msgstr ""

#: ../../../rust/general-information.rst:13
msgid ""
"The Rust support in the kernel can link only `core <https://doc.rust-lang."
"org/core/>`_, but not `std <https://doc.rust-lang.org/std/>`_. Crates for "
"use in the kernel must opt into this behavior using the ``#![no_std]`` "
"attribute."
msgstr ""

#: ../../../rust/general-information.rst:21
msgid "Code documentation"
msgstr ""

#: ../../../rust/general-information.rst:23
msgid ""
"Rust kernel code is documented using ``rustdoc``, its built-in documentation "
"generator."
msgstr ""

#: ../../../rust/general-information.rst:26
msgid ""
"The generated HTML docs include integrated search, linked items (e.g. types, "
"functions, constants), source code, etc. They may be read at:"
msgstr ""

#: ../../../rust/general-information.rst:29
msgid "https://rust.docs.kernel.org"
msgstr ""

#: ../../../rust/general-information.rst:31
msgid "For linux-next, please see:"
msgstr ""

#: ../../../rust/general-information.rst:33
msgid "https://rust.docs.kernel.org/next/"
msgstr ""

#: ../../../rust/general-information.rst:35
msgid "There are also tags for each main release, e.g.:"
msgstr ""

#: ../../../rust/general-information.rst:37
msgid "https://rust.docs.kernel.org/6.10/"
msgstr ""

#: ../../../rust/general-information.rst:39
msgid ""
"The docs can also be easily generated and read locally. This is quite fast "
"(same order as compiling the code itself) and no special tools or "
"environment are needed. This has the added advantage that they will be "
"tailored to the particular kernel configuration used. To generate them, use "
"the ``rustdoc`` target with the same invocation used for compilation, e.g.::"
msgstr ""

#: ../../../rust/general-information.rst:47
msgid "To read the docs locally in your web browser, run e.g.::"
msgstr ""

#: ../../../rust/general-information.rst:51
msgid ""
"To learn about how to write the documentation, please see coding-guidelines."
"rst."
msgstr ""

#: ../../../rust/general-information.rst:55
msgid "Extra lints"
msgstr ""

#: ../../../rust/general-information.rst:57
msgid ""
"While ``rustc`` is a very helpful compiler, some extra lints and analyses "
"are available via ``clippy``, a Rust linter. To enable it, pass ``CLIPPY=1`` "
"to the same invocation used for compilation, e.g.::"
msgstr ""

#: ../../../rust/general-information.rst:63
msgid ""
"Please note that Clippy may change code generation, thus it should not be "
"enabled while building a production kernel."
msgstr ""

#: ../../../rust/general-information.rst:68
msgid "Abstractions vs. bindings"
msgstr ""

#: ../../../rust/general-information.rst:70
msgid ""
"Abstractions are Rust code wrapping kernel functionality from the C side."
msgstr ""

#: ../../../rust/general-information.rst:72
msgid ""
"In order to use functions and types from the C side, bindings are created. "
"Bindings are the declarations for Rust of those functions and types from the "
"C side."
msgstr ""

#: ../../../rust/general-information.rst:76
msgid ""
"For instance, one may write a ``Mutex`` abstraction in Rust which wraps a "
"``struct mutex`` from the C side and calls its functions through the "
"bindings."
msgstr ""

#: ../../../rust/general-information.rst:79
msgid ""
"Abstractions are not available for all the kernel internal APIs and "
"concepts, but it is intended that coverage is expanded as time goes on. "
"\"Leaf\" modules (e.g. drivers) should not use the C bindings directly. "
"Instead, subsystems should provide as-safe-as-possible abstractions as "
"needed."
msgstr ""

#: ../../../rust/general-information.rst:105
msgid ""
"The main idea is to encapsulate all direct interaction with the kernel's C "
"APIs into carefully reviewed and documented abstractions. Then users of "
"these abstractions cannot introduce undefined behavior (UB) as long as:"
msgstr ""

#: ../../../rust/general-information.rst:109
msgid "The abstractions are correct (\"sound\")."
msgstr ""

#: ../../../rust/general-information.rst:110
msgid ""
"Any ``unsafe`` blocks respect the safety contract necessary to call the "
"operations inside the block. Similarly, any ``unsafe impl``\\ s respect the "
"safety contract necessary to implement the trait."
msgstr ""

#: ../../../rust/general-information.rst:115
msgid "Bindings"
msgstr ""

#: ../../../rust/general-information.rst:117
msgid ""
"By including a C header from ``include/`` into ``rust/bindings/"
"bindings_helper.h``, the ``bindgen`` tool will auto-generate the bindings "
"for the included subsystem. After building, see the ``*_generated.rs`` "
"output files in the ``rust/bindings/`` directory."
msgstr ""

#: ../../../rust/general-information.rst:122
msgid ""
"For parts of the C header that ``bindgen`` does not auto generate, e.g. C "
"``inline`` functions or non-trivial macros, it is acceptable to add a small "
"wrapper function to ``rust/helpers/`` to make it available for the Rust side "
"as well."
msgstr ""

#: ../../../rust/general-information.rst:128
msgid "Abstractions"
msgstr ""

#: ../../../rust/general-information.rst:130
msgid ""
"Abstractions are the layer between the bindings and the in-kernel users. "
"They are located in ``rust/kernel/`` and their role is to encapsulate the "
"unsafe access to the bindings into an as-safe-as-possible API that they "
"expose to their users. Users of the abstractions include things like drivers "
"or file systems written in Rust."
msgstr ""

#: ../../../rust/general-information.rst:136
msgid ""
"Besides the safety aspect, the abstractions are supposed to be "
"\"ergonomic\", in the sense that they turn the C interfaces into "
"\"idiomatic\" Rust code. Basic examples are to turn the C resource "
"acquisition and release into Rust constructors and destructors or C integer "
"error codes into Rust's ``Result``\\ s."
msgstr ""

#: ../../../rust/general-information.rst:143
msgid "Conditional compilation"
msgstr ""

#: ../../../rust/general-information.rst:145
msgid ""
"Rust code has access to conditional compilation based on the kernel "
"configuration:"
msgstr ""

#: ../../../rust/general-information.rst:155
msgid ""
"For other predicates that Rust's ``cfg`` does not support, e.g. expressions "
"with numerical comparisons, one may define a new Kconfig symbol:"
msgstr ""
