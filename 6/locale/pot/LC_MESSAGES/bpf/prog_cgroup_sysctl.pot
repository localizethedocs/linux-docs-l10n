# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../bpf/prog_cgroup_sysctl.rst:5
msgid "BPF_PROG_TYPE_CGROUP_SYSCTL"
msgstr ""

#: ../../../bpf/prog_cgroup_sysctl.rst:7
msgid ""
"This document describes ``BPF_PROG_TYPE_CGROUP_SYSCTL`` program type that "
"provides cgroup-bpf hook for sysctl."
msgstr ""

#: ../../../bpf/prog_cgroup_sysctl.rst:10
msgid ""
"The hook has to be attached to a cgroup and will be called every time a "
"process inside that cgroup tries to read from or write to sysctl knob in "
"proc."
msgstr ""

#: ../../../bpf/prog_cgroup_sysctl.rst:14
msgid "1. Attach type"
msgstr ""

#: ../../../bpf/prog_cgroup_sysctl.rst:16
msgid ""
"``BPF_CGROUP_SYSCTL`` attach type has to be used to attach "
"``BPF_PROG_TYPE_CGROUP_SYSCTL`` program to a cgroup."
msgstr ""

#: ../../../bpf/prog_cgroup_sysctl.rst:20
msgid "2. Context"
msgstr ""

#: ../../../bpf/prog_cgroup_sysctl.rst:22
msgid ""
"``BPF_PROG_TYPE_CGROUP_SYSCTL`` provides access to the following context "
"from BPF program::"
msgstr ""

#: ../../../bpf/prog_cgroup_sysctl.rst:30
msgid ""
"``write`` indicates whether sysctl value is being read (``0``) or written "
"(``1``). This field is read-only."
msgstr ""

#: ../../../bpf/prog_cgroup_sysctl.rst:33
msgid ""
"``file_pos`` indicates file position sysctl is being accessed at, read or "
"written. This field is read-write. Writing to the field sets the starting "
"position in sysctl proc file ``read(2)`` will be reading from or "
"``write(2)`` will be writing to. Writing zero to the field can be used e.g. "
"to override whole sysctl value by ``bpf_sysctl_set_new_value()`` on "
"``write(2)`` even when it's called by user space on ``file_pos > 0``. "
"Writing non-zero value to the field can be used to access part of sysctl "
"value starting from specified ``file_pos``. Not all sysctl support access "
"with ``file_pos != 0``, e.g. writes to numeric sysctl entries must always be "
"at file position ``0``. See also ``kernel.sysctl_writes_strict`` sysctl."
msgstr ""

#: ../../../bpf/prog_cgroup_sysctl.rst:44
msgid ""
"See `linux/bpf.h`_ for more details on how context field can be accessed."
msgstr ""

#: ../../../bpf/prog_cgroup_sysctl.rst:47
msgid "3. Return code"
msgstr ""

#: ../../../bpf/prog_cgroup_sysctl.rst:49
msgid ""
"``BPF_PROG_TYPE_CGROUP_SYSCTL`` program must return one of the following "
"return codes:"
msgstr ""

#: ../../../bpf/prog_cgroup_sysctl.rst:52
msgid "``0`` means \"reject access to sysctl\";"
msgstr ""

#: ../../../bpf/prog_cgroup_sysctl.rst:53
msgid "``1`` means \"proceed with access\"."
msgstr ""

#: ../../../bpf/prog_cgroup_sysctl.rst:55
msgid ""
"If program returns ``0`` user space will get ``-1`` from ``read(2)`` or "
"``write(2)`` and ``errno`` will be set to ``EPERM``."
msgstr ""

#: ../../../bpf/prog_cgroup_sysctl.rst:59
msgid "4. Helpers"
msgstr ""

#: ../../../bpf/prog_cgroup_sysctl.rst:61
msgid ""
"Since sysctl knob is represented by a name and a value, sysctl specific BPF "
"helpers focus on providing access to these properties:"
msgstr ""

#: ../../../bpf/prog_cgroup_sysctl.rst:64
msgid ""
"``bpf_sysctl_get_name()`` to get sysctl name as it is visible in ``/proc/"
"sys`` into provided by BPF program buffer;"
msgstr ""

#: ../../../bpf/prog_cgroup_sysctl.rst:67
msgid ""
"``bpf_sysctl_get_current_value()`` to get string value currently held by "
"sysctl into provided by BPF program buffer. This helper is available on both "
"``read(2)`` from and ``write(2)`` to sysctl;"
msgstr ""

#: ../../../bpf/prog_cgroup_sysctl.rst:71
msgid ""
"``bpf_sysctl_get_new_value()`` to get new string value currently being "
"written to sysctl before actual write happens. This helper can be used only "
"on ``ctx->write == 1``;"
msgstr ""

#: ../../../bpf/prog_cgroup_sysctl.rst:75
msgid ""
"``bpf_sysctl_set_new_value()`` to override new string value currently being "
"written to sysctl before actual write happens. Sysctl value will be "
"overridden starting from the current ``ctx->file_pos``. If the whole value "
"has to be overridden BPF program can set ``file_pos`` to zero before calling "
"to the helper. This helper can be used only on ``ctx->write == 1``. New "
"string value set by the helper is treated and verified by kernel same way as "
"an equivalent string passed by user space."
msgstr ""

#: ../../../bpf/prog_cgroup_sysctl.rst:83
msgid ""
"BPF program sees sysctl value same way as user space does in proc "
"filesystem, i.e. as a string. Since many sysctl values represent an integer "
"or a vector of integers, the following helpers can be used to get numeric "
"value from the string:"
msgstr ""

#: ../../../bpf/prog_cgroup_sysctl.rst:88
msgid ""
"``bpf_strtol()`` to convert initial part of the string to long integer "
"similar to user space `strtol(3)`_;"
msgstr ""

#: ../../../bpf/prog_cgroup_sysctl.rst:90
msgid ""
"``bpf_strtoul()`` to convert initial part of the string to unsigned long "
"integer similar to user space `strtoul(3)`_;"
msgstr ""

#: ../../../bpf/prog_cgroup_sysctl.rst:93
msgid "See `linux/bpf.h`_ for more details on helpers described here."
msgstr ""

#: ../../../bpf/prog_cgroup_sysctl.rst:96
msgid "5. Examples"
msgstr ""

#: ../../../bpf/prog_cgroup_sysctl.rst:98
msgid ""
"See `test_sysctl_prog.c`_ for an example of BPF program in C that access "
"sysctl name and value, parses string value to get vector of integers and "
"uses the result to make decision whether to allow or deny access to sysctl."
msgstr ""

#: ../../../bpf/prog_cgroup_sysctl.rst:103
msgid "6. Notes"
msgstr ""

#: ../../../bpf/prog_cgroup_sysctl.rst:105
msgid ""
"``BPF_PROG_TYPE_CGROUP_SYSCTL`` is intended to be used in **trusted** root "
"environment, for example to monitor sysctl usage or catch unreasonable "
"values an application, running as root in a separate cgroup, is trying to "
"set."
msgstr ""

#: ../../../bpf/prog_cgroup_sysctl.rst:109
msgid ""
"Since `task_dfl_cgroup(current)` is called at `sys_read` / `sys_write` time "
"it may return results different from that at `sys_open` time, i.e. process "
"that opened sysctl file in proc filesystem may differ from process that is "
"trying to read from / write to it and two such processes may run in "
"different cgroups, what means ``BPF_PROG_TYPE_CGROUP_SYSCTL`` should not be "
"used as a security mechanism to limit sysctl usage."
msgstr ""

#: ../../../bpf/prog_cgroup_sysctl.rst:116
msgid ""
"As with any cgroup-bpf program additional care should be taken if an "
"application running as root in a cgroup should not be allowed to detach/"
"replace BPF program attached by administrator."
msgstr ""
