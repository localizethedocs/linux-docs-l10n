# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-21 08:55+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../filesystems/fiemap.rst:5
msgid "Fiemap Ioctl"
msgstr ""

#: ../../../filesystems/fiemap.rst:7
msgid ""
"The fiemap ioctl is an efficient method for userspace to get file extent "
"mappings. Instead of block-by-block mapping (such as bmap), fiemap returns a "
"list of extents."
msgstr ""

#: ../../../filesystems/fiemap.rst:13
msgid "Request Basics"
msgstr ""

#: ../../../filesystems/fiemap.rst:15
msgid "A fiemap request is encoded within struct fiemap:"
msgstr ""

#: ../../../filesystems/fiemap:17: include/uapi/linux/fiemap.h:37
msgid "file extent mappings"
msgstr ""

#: ../../../filesystems/fiemap:17: include/uapi/linux/fiemap.h:41
#: ../../../filesystems/fiemap:181: include/linux/fiemap.h:13
#: ../../../filesystems/fiemap:73: include/uapi/linux/fiemap.h:22
msgid "**Definition**::"
msgstr ""

#: ../../../filesystems/fiemap:17: include/uapi/linux/fiemap.h:52
#: ../../../filesystems/fiemap:181: include/linux/fiemap.h:22
#: ../../../filesystems/fiemap:73: include/uapi/linux/fiemap.h:31
msgid "**Members**"
msgstr ""

#: ../../../filesystems/fiemap:17: include/uapi/linux/fiemap.h:38
msgid "``fm_start``"
msgstr ""

#: ../../../filesystems/fiemap:17: include/uapi/linux/fiemap.h:39
msgid "byte offset (inclusive) at which to start mapping (in)"
msgstr ""

#: ../../../filesystems/fiemap:17: include/uapi/linux/fiemap.h:39
msgid "``fm_length``"
msgstr ""

#: ../../../filesystems/fiemap:17: include/uapi/linux/fiemap.h:40
msgid "logical length of mapping which userspace wants (in)"
msgstr ""

#: ../../../filesystems/fiemap:17: include/uapi/linux/fiemap.h:40
msgid "``fm_flags``"
msgstr ""

#: ../../../filesystems/fiemap:17: include/uapi/linux/fiemap.h:41
msgid "FIEMAP_FLAG_* flags for request (in/out)"
msgstr ""

#: ../../../filesystems/fiemap:17: include/uapi/linux/fiemap.h:41
msgid "``fm_mapped_extents``"
msgstr ""

#: ../../../filesystems/fiemap:17: include/uapi/linux/fiemap.h:42
msgid "number of extents that were mapped (out)"
msgstr ""

#: ../../../filesystems/fiemap:17: include/uapi/linux/fiemap.h:42
msgid "``fm_extent_count``"
msgstr ""

#: ../../../filesystems/fiemap:17: include/uapi/linux/fiemap.h:43
msgid "size of fm_extents array (in)"
msgstr ""

#: ../../../filesystems/fiemap:17: include/uapi/linux/fiemap.h:43
msgid "``fm_extents``"
msgstr ""

#: ../../../filesystems/fiemap:17: include/uapi/linux/fiemap.h:44
msgid "array of mapped extents (out)"
msgstr ""

#: ../../../filesystems/fiemap.rst:20
msgid ""
"fm_start, and fm_length specify the logical range within the file which the "
"process would like mappings for. Extents returned mirror those on disk - "
"that is, the logical offset of the 1st returned extent may start before "
"fm_start, and the range covered by the last returned extent may end after "
"fm_length. All offsets and lengths are in bytes."
msgstr ""

#: ../../../filesystems/fiemap.rst:26
msgid ""
"Certain flags to modify the way in which mappings are looked up can be set "
"in fm_flags. If the kernel doesn't understand some particular flags, it will "
"return EBADR and the contents of fm_flags will contain the set of flags "
"which caused the error. If the kernel is compatible with all flags passed, "
"the contents of fm_flags will be unmodified. It is up to userspace to "
"determine whether rejection of a particular flag is fatal to its operation. "
"This scheme is intended to allow the fiemap interface to grow in the future "
"but without losing compatibility with old software."
msgstr ""

#: ../../../filesystems/fiemap.rst:36
msgid ""
"fm_extent_count specifies the number of elements in the fm_extents[] array "
"that can be used to return extents.  If fm_extent_count is zero, then the "
"fm_extents[] array is ignored (no extents will be returned), and the "
"fm_mapped_extents count will hold the number of extents needed in "
"fm_extents[] to hold the file's current mapping.  Note that there is nothing "
"to prevent the file from changing between calls to FIEMAP."
msgstr ""

#: ../../../filesystems/fiemap.rst:43
msgid "The following flags can be set in fm_flags:"
msgstr ""

#: ../../../filesystems/fiemap.rst:45
msgid "FIEMAP_FLAG_SYNC"
msgstr ""

#: ../../../filesystems/fiemap.rst:46
msgid ""
"If this flag is set, the kernel will sync the file before mapping extents."
msgstr ""

#: ../../../filesystems/fiemap.rst:48
msgid "FIEMAP_FLAG_XATTR"
msgstr ""

#: ../../../filesystems/fiemap.rst:49
msgid ""
"If this flag is set, the extents returned will describe the inodes extended "
"attribute lookup tree, instead of its data tree."
msgstr ""

#: ../../../filesystems/fiemap.rst:52
msgid "FIEMAP_FLAG_CACHE"
msgstr ""

#: ../../../filesystems/fiemap.rst:53
msgid "This flag requests caching of the extents."
msgstr ""

#: ../../../filesystems/fiemap.rst:56
msgid "Extent Mapping"
msgstr ""

#: ../../../filesystems/fiemap.rst:58
msgid ""
"Extent information is returned within the embedded fm_extents array which "
"userspace must allocate along with the fiemap structure. The number of "
"elements in the fiemap_extents[] array should be passed via fm_extent_count. "
"The number of extents mapped by kernel will be returned via "
"fm_mapped_extents. If the number of fiemap_extents allocated is less than "
"would be required to map the requested range, the maximum number of extents "
"that can be mapped in the fm_extent[] array will be returned and "
"fm_mapped_extents will be equal to fm_extent_count. In that case, the last "
"extent in the array will not complete the requested range and will not have "
"the FIEMAP_EXTENT_LAST flag set (see the next section on extent flags)."
msgstr ""

#: ../../../filesystems/fiemap.rst:70
msgid ""
"Each extent is described by a single fiemap_extent structure as returned in "
"fm_extents:"
msgstr ""

#: ../../../filesystems/fiemap:73: include/uapi/linux/fiemap.h:18
msgid "description of one fiemap extent"
msgstr ""

#: ../../../filesystems/fiemap:73: include/uapi/linux/fiemap.h:19
msgid "``fe_logical``"
msgstr ""

#: ../../../filesystems/fiemap:73: include/uapi/linux/fiemap.h:20
msgid "byte offset of the extent in the file"
msgstr ""

#: ../../../filesystems/fiemap:73: include/uapi/linux/fiemap.h:20
msgid "``fe_physical``"
msgstr ""

#: ../../../filesystems/fiemap:73: include/uapi/linux/fiemap.h:21
msgid "byte offset of extent on disk"
msgstr ""

#: ../../../filesystems/fiemap:73: include/uapi/linux/fiemap.h:21
msgid "``fe_length``"
msgstr ""

#: ../../../filesystems/fiemap:73: include/uapi/linux/fiemap.h:22
msgid "length in bytes for this extent"
msgstr ""

#: ../../../filesystems/fiemap:73: include/uapi/linux/fiemap.h:22
msgid "``fe_flags``"
msgstr ""

#: ../../../filesystems/fiemap:73: include/uapi/linux/fiemap.h:23
msgid "FIEMAP_EXTENT_* flags for this extent"
msgstr ""

#: ../../../filesystems/fiemap.rst:76
msgid ""
"All offsets and lengths are in bytes and mirror those on disk.  It is valid "
"for an extents logical offset to start before the request or its logical "
"length to extend past the request.  Unless FIEMAP_EXTENT_NOT_ALIGNED is "
"returned, fe_logical, fe_physical, and fe_length will be aligned to the "
"block size of the file system.  With the exception of extents flagged as "
"FIEMAP_EXTENT_MERGED, adjacent extents will not be merged."
msgstr ""

#: ../../../filesystems/fiemap.rst:83
msgid ""
"The fe_flags field contains flags which describe the extent returned. A "
"special flag, FIEMAP_EXTENT_LAST is always set on the last extent in the "
"file so that the process making fiemap calls can determine when no more "
"extents are available, without having to call the ioctl again."
msgstr ""

#: ../../../filesystems/fiemap.rst:88
msgid ""
"Some flags are intentionally vague and will always be set in the presence of "
"other more specific flags. This way a program looking for a general property "
"does not have to know all existing and future flags which imply that "
"property."
msgstr ""

#: ../../../filesystems/fiemap.rst:93
msgid ""
"For example, if FIEMAP_EXTENT_DATA_INLINE or FIEMAP_EXTENT_DATA_TAIL are "
"set, FIEMAP_EXTENT_NOT_ALIGNED will also be set. A program looking for "
"inline or tail-packed data can key on the specific flag. Software which "
"simply cares not to try operating on non-aligned extents however, can just "
"key on FIEMAP_EXTENT_NOT_ALIGNED, and not have to worry about all present "
"and future flags which might imply unaligned data. Note that the opposite is "
"not true - it would be valid for FIEMAP_EXTENT_NOT_ALIGNED to appear alone."
msgstr ""

#: ../../../filesystems/fiemap.rst:102
msgid "FIEMAP_EXTENT_LAST"
msgstr ""

#: ../../../filesystems/fiemap.rst:103
msgid ""
"This is generally the last extent in the file. A mapping attempt past this "
"extent may return nothing. Some implementations set this flag to indicate "
"this extent is the last one in the range queried by the user (via fiemap-"
">fm_length)."
msgstr ""

#: ../../../filesystems/fiemap.rst:108
msgid "FIEMAP_EXTENT_UNKNOWN"
msgstr ""

#: ../../../filesystems/fiemap.rst:109
msgid ""
"The location of this extent is currently unknown. This may indicate the data "
"is stored on an inaccessible volume or that no storage has been allocated "
"for the file yet."
msgstr ""

#: ../../../filesystems/fiemap.rst:113
msgid "FIEMAP_EXTENT_DELALLOC"
msgstr ""

#: ../../../filesystems/fiemap.rst:114
msgid "This will also set FIEMAP_EXTENT_UNKNOWN."
msgstr ""

#: ../../../filesystems/fiemap.rst:116
msgid ""
"Delayed allocation - while there is data for this extent, its physical "
"location has not been allocated yet."
msgstr ""

#: ../../../filesystems/fiemap.rst:119
msgid "FIEMAP_EXTENT_ENCODED"
msgstr ""

#: ../../../filesystems/fiemap.rst:120
msgid ""
"This extent does not consist of plain filesystem blocks but is encoded (e.g. "
"encrypted or compressed).  Reading the data in this extent via I/O to the "
"block device will have undefined results."
msgstr ""

#: ../../../filesystems/fiemap.rst:124
msgid ""
"Note that it is *always* undefined to try to update the data in-place by "
"writing to the indicated location without the assistance of the filesystem, "
"or to access the data using the information returned by the FIEMAP interface "
"while the filesystem is mounted.  In other words, user applications may only "
"read the extent data via I/O to the block device while the filesystem is "
"unmounted, and then only if the FIEMAP_EXTENT_ENCODED flag is clear; user "
"applications must not try reading or writing to the filesystem via the block "
"device under any other circumstances."
msgstr ""

#: ../../../filesystems/fiemap.rst:134
msgid "FIEMAP_EXTENT_DATA_ENCRYPTED"
msgstr ""

#: ../../../filesystems/fiemap.rst:135
msgid ""
"This will also set FIEMAP_EXTENT_ENCODED The data in this extent has been "
"encrypted by the file system."
msgstr ""

#: ../../../filesystems/fiemap.rst:138
msgid "FIEMAP_EXTENT_NOT_ALIGNED"
msgstr ""

#: ../../../filesystems/fiemap.rst:139
msgid "Extent offsets and length are not guaranteed to be block aligned."
msgstr ""

#: ../../../filesystems/fiemap.rst:141
msgid "FIEMAP_EXTENT_DATA_INLINE"
msgstr ""

#: ../../../filesystems/fiemap.rst:142
msgid ""
"This will also set FIEMAP_EXTENT_NOT_ALIGNED Data is located within a meta "
"data block."
msgstr ""

#: ../../../filesystems/fiemap.rst:145
msgid "FIEMAP_EXTENT_DATA_TAIL"
msgstr ""

#: ../../../filesystems/fiemap.rst:146
msgid ""
"This will also set FIEMAP_EXTENT_NOT_ALIGNED Data is packed into a block "
"with data from other files."
msgstr ""

#: ../../../filesystems/fiemap.rst:149
msgid "FIEMAP_EXTENT_UNWRITTEN"
msgstr ""

#: ../../../filesystems/fiemap.rst:150
msgid ""
"Unwritten extent - the extent is allocated but its data has not been "
"initialized.  This indicates the extent's data will be all zero if read "
"through the filesystem but the contents are undefined if read directly from "
"the device."
msgstr ""

#: ../../../filesystems/fiemap.rst:155
msgid "FIEMAP_EXTENT_MERGED"
msgstr ""

#: ../../../filesystems/fiemap.rst:156
msgid ""
"This will be set when a file does not support extents, i.e., it uses a block "
"based addressing scheme.  Since returning an extent for each block back to "
"userspace would be highly inefficient, the kernel will try to merge most "
"adjacent blocks into 'extents'."
msgstr ""

#: ../../../filesystems/fiemap.rst:161
msgid "FIEMAP_EXTENT_SHARED"
msgstr ""

#: ../../../filesystems/fiemap.rst:162
msgid "This flag is set to request that space be shared with other files."
msgstr ""

#: ../../../filesystems/fiemap.rst:165
msgid "VFS -> File System Implementation"
msgstr ""

#: ../../../filesystems/fiemap.rst:167
msgid ""
"File systems wishing to support fiemap must implement a ->fiemap callback on "
"their inode_operations structure. The fs ->fiemap call is responsible for "
"defining its set of supported fiemap flags, and calling a helper function on "
"each discovered extent::"
msgstr ""

#: ../../../filesystems/fiemap.rst:178
msgid ""
"->fiemap is passed struct fiemap_extent_info which describes the fiemap "
"request:"
msgstr ""

#: ../../../filesystems/fiemap:181: include/linux/fiemap.h:9
msgid "fiemap request to a filesystem"
msgstr ""

#: ../../../filesystems/fiemap:181: include/linux/fiemap.h:10
msgid "``fi_flags``"
msgstr ""

#: ../../../filesystems/fiemap:181: include/linux/fiemap.h:11
msgid "Flags as passed from user"
msgstr ""

#: ../../../filesystems/fiemap:181: include/linux/fiemap.h:11
msgid "``fi_extents_mapped``"
msgstr ""

#: ../../../filesystems/fiemap:181: include/linux/fiemap.h:12
msgid "Number of mapped extents"
msgstr ""

#: ../../../filesystems/fiemap:181: include/linux/fiemap.h:12
msgid "``fi_extents_max``"
msgstr ""

#: ../../../filesystems/fiemap:181: include/linux/fiemap.h:13
msgid "Size of fiemap_extent array"
msgstr ""

#: ../../../filesystems/fiemap:181: include/linux/fiemap.h:13
msgid "``fi_extents_start``"
msgstr ""

#: ../../../filesystems/fiemap:181: include/linux/fiemap.h:14
msgid "Start of fiemap_extent array"
msgstr ""

#: ../../../filesystems/fiemap.rst:184
msgid ""
"It is intended that the file system should not need to access any of this "
"structure directly. Filesystem handlers should be tolerant to signals and "
"return EINTR once fatal signal received."
msgstr ""

#: ../../../filesystems/fiemap.rst:189
msgid ""
"Flag checking should be done at the beginning of the ->fiemap callback via "
"the fiemap_prep() helper::"
msgstr ""

#: ../../../filesystems/fiemap.rst:195
msgid ""
"The struct fieinfo should be passed in as received from ioctl_fiemap(). The "
"set of fiemap flags which the fs understands should be passed via fs_flags. "
"If fiemap_prep finds invalid user flags, it will place the bad values in "
"fieinfo->fi_flags and return -EBADR. If the file system gets -EBADR, from "
"fiemap_prep(), it should immediately exit, returning that error back to "
"ioctl_fiemap().  Additionally the range is validate against the supported "
"maximum file size."
msgstr ""

#: ../../../filesystems/fiemap.rst:204
msgid ""
"For each extent in the request range, the file system should call the helper "
"function, fiemap_fill_next_extent()::"
msgstr ""

#: ../../../filesystems/fiemap.rst:210
msgid ""
"fiemap_fill_next_extent() will use the passed values to populate the next "
"free extent in the fm_extents array. 'General' extent flags will "
"automatically be set from specific flags on behalf of the calling file "
"system so that the userspace API is not broken."
msgstr ""

#: ../../../filesystems/fiemap.rst:215
msgid ""
"fiemap_fill_next_extent() returns 0 on success, and 1 when the user-supplied "
"fm_extents array is full. If an error is encountered while copying the "
"extent to user memory, -EFAULT will be returned."
msgstr ""
