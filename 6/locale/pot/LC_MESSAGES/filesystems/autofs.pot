# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../filesystems/autofs.rst:3
msgid "autofs - how it works"
msgstr ""

#: ../../../filesystems/autofs.rst:6
msgid "Purpose"
msgstr ""

#: ../../../filesystems/autofs.rst:8
msgid ""
"The goal of autofs is to provide on-demand mounting and race free automatic "
"unmounting of various other filesystems.  This provides two key advantages:"
msgstr ""

#: ../../../filesystems/autofs.rst:12
msgid ""
"There is no need to delay boot until all filesystems that might be needed "
"are mounted.  Processes that try to access those slow filesystems might be "
"delayed but other processes can continue freely.  This is particularly "
"important for network filesystems (e.g. NFS) or filesystems stored on media "
"with a media-changing robot."
msgstr ""

#: ../../../filesystems/autofs.rst:19
msgid ""
"The names and locations of filesystems can be stored in a remote database "
"and can change at any time.  The content in that database at the time of "
"access will be used to provide a target for the access.  The interpretation "
"of names in the filesystem can even be programmatic rather than database-"
"backed, allowing wildcards for example, and can vary based on the user who "
"first accessed a name."
msgstr ""

#: ../../../filesystems/autofs.rst:28
msgid "Context"
msgstr ""

#: ../../../filesystems/autofs.rst:30
msgid ""
"The \"autofs\" filesystem module is only one part of an autofs system. There "
"also needs to be a user-space program which looks up names and mounts "
"filesystems.  This will often be the \"automount\" program, though other "
"tools including \"systemd\" can make use of \"autofs\". This document "
"describes only the kernel module and the interactions required with any user-"
"space program.  Subsequent text refers to this as the \"automount daemon\" "
"or simply \"the daemon\"."
msgstr ""

#: ../../../filesystems/autofs.rst:38
msgid ""
"\"autofs\" is a Linux kernel module which provides the \"autofs\" filesystem "
"type.  Several \"autofs\" filesystems can be mounted and they can each be "
"managed separately, or all managed by the same daemon."
msgstr ""

#: ../../../filesystems/autofs.rst:43
msgid "Content"
msgstr ""

#: ../../../filesystems/autofs.rst:45
msgid ""
"An autofs filesystem can contain 3 sorts of objects: directories, symbolic "
"links and mount traps.  Mount traps are directories with extra properties as "
"described in the next section."
msgstr ""

#: ../../../filesystems/autofs.rst:49
msgid ""
"Objects can only be created by the automount daemon: symlinks are created "
"with a regular `symlink` system call, while directories and mount traps are "
"created with `mkdir`.  The determination of whether a directory should be a "
"mount trap is based on a master map. This master map is consulted by autofs "
"to determine which directories are mount points. Mount points can be "
"*direct*/*indirect*/*offset*. On most systems, the default master map is "
"located at */etc/auto.master*."
msgstr ""

#: ../../../filesystems/autofs.rst:57
msgid ""
"If neither the *direct* or *offset* mount options are given (so the mount is "
"considered to be *indirect*), then the root directory is always a regular "
"directory, otherwise it is a mount trap when it is empty and a regular "
"directory when not empty.  Note that *direct* and *offset* are treated "
"identically so a concise summary is that the root directory is a mount trap "
"only if the filesystem is mounted *direct* and the root is empty."
msgstr ""

#: ../../../filesystems/autofs.rst:65
msgid ""
"Directories created in the root directory are mount traps only if the "
"filesystem is mounted *indirect* and they are empty."
msgstr ""

#: ../../../filesystems/autofs.rst:68
msgid ""
"Directories further down the tree depend on the *maxproto* mount option and "
"particularly whether it is less than five or not. When *maxproto* is five, "
"no directories further down the tree are ever mount traps, they are always "
"regular directories.  When the *maxproto* is four (or three), these "
"directories are mount traps precisely when they are empty."
msgstr ""

#: ../../../filesystems/autofs.rst:75
msgid ""
"So: non-empty (i.e. non-leaf) directories are never mount traps. Empty "
"directories are sometimes mount traps, and sometimes not depending on where "
"in the tree they are (root, top level, or lower), the *maxproto*, and "
"whether the mount was *indirect* or not."
msgstr ""

#: ../../../filesystems/autofs.rst:81
msgid "Mount Traps"
msgstr ""

#: ../../../filesystems/autofs.rst:83
msgid ""
"A core element of the implementation of autofs is the Mount Traps which are "
"provided by the Linux VFS.  Any directory provided by a filesystem can be "
"designated as a trap.  This involves two separate features that work "
"together to allow autofs to do its job."
msgstr ""

#: ../../../filesystems/autofs.rst:88
msgid "**DCACHE_NEED_AUTOMOUNT**"
msgstr ""

#: ../../../filesystems/autofs.rst:90
msgid ""
"If a dentry has the DCACHE_NEED_AUTOMOUNT flag set (which gets set if the "
"inode has S_AUTOMOUNT set, or can be set directly) then it is (potentially) "
"a mount trap.  Any access to this directory beyond a \"`stat`\" will "
"(normally) cause the `d_op->d_automount()` dentry operation to be called. "
"The task of this method is to find the filesystem that should be mounted on "
"the directory and to return it.  The VFS is responsible for actually "
"mounting the root of this filesystem on the directory."
msgstr ""

#: ../../../filesystems/autofs.rst:99
msgid ""
"autofs doesn't find the filesystem itself but sends a message to the "
"automount daemon asking it to find and mount the filesystem.  The autofs "
"`d_automount` method then waits for the daemon to report that everything is "
"ready.  It will then return \"`NULL`\" indicating that the mount has already "
"happened.  The VFS doesn't try to mount anything but follows down the mount "
"that is already there."
msgstr ""

#: ../../../filesystems/autofs.rst:106
msgid ""
"This functionality is sufficient for some users of mount traps such as NFS "
"which creates traps so that mountpoints on the server can be reflected on "
"the client.  However it is not sufficient for autofs.  As mounting onto a "
"directory is considered to be \"beyond a `stat`\", the automount daemon "
"would not be able to mount a filesystem on the 'trap' directory without some "
"way to avoid getting caught in the trap.  For that purpose there is another "
"flag."
msgstr ""

#: ../../../filesystems/autofs.rst:114
msgid "**DCACHE_MANAGE_TRANSIT**"
msgstr ""

#: ../../../filesystems/autofs.rst:116
msgid ""
"If a dentry has DCACHE_MANAGE_TRANSIT set then two very different but "
"related behaviours are invoked, both using the `d_op->d_manage()` dentry "
"operation."
msgstr ""

#: ../../../filesystems/autofs.rst:120
msgid ""
"Firstly, before checking to see if any filesystem is mounted on the "
"directory, d_manage() will be called with the `rcu_walk` parameter set to "
"`false`.  It may return one of three things:"
msgstr ""

#: ../../../filesystems/autofs.rst:124
msgid ""
"A return value of zero indicates that there is nothing special about this "
"dentry and normal checks for mounts and automounts should proceed."
msgstr ""

#: ../../../filesystems/autofs.rst:128
msgid ""
"autofs normally returns zero, but first waits for any expiry (automatic "
"unmounting of the mounted filesystem) to complete.  This avoids races."
msgstr ""

#: ../../../filesystems/autofs.rst:132
msgid ""
"A return value of `-EISDIR` tells the VFS to ignore any mounts on the "
"directory and to not consider calling `->d_automount()`. This effectively "
"disables the **DCACHE_NEED_AUTOMOUNT** flag causing the directory not be a "
"mount trap after all."
msgstr ""

#: ../../../filesystems/autofs.rst:137
msgid ""
"autofs returns this if it detects that the process performing the lookup is "
"the automount daemon and that the mount has been requested but has not yet "
"completed.  How it determines this is discussed later.  This allows the "
"automount daemon not to get caught in the mount trap."
msgstr ""

#: ../../../filesystems/autofs.rst:143
msgid ""
"There is a subtlety here.  It is possible that a second autofs filesystem "
"can be mounted below the first and for both of them to be managed by the "
"same daemon.  For the daemon to be able to mount something on the second it "
"must be able to \"walk\" down past the first.  This means that d_manage "
"cannot *always* return -EISDIR for the automount daemon.  It must only "
"return it when a mount has been requested, but has not yet completed."
msgstr ""

#: ../../../filesystems/autofs.rst:151
msgid ""
"`d_manage` also returns `-EISDIR` if the dentry shouldn't be a mount trap, "
"either because it is a symbolic link or because it is not empty."
msgstr ""

#: ../../../filesystems/autofs.rst:155
msgid ""
"Any other negative value is treated as an error and returned to the caller."
msgstr ""

#: ../../../filesystems/autofs.rst:158
msgid "autofs can return"
msgstr ""

#: ../../../filesystems/autofs.rst:160
msgid "-ENOENT if the automount daemon failed to mount anything,"
msgstr ""

#: ../../../filesystems/autofs.rst:161
msgid "-ENOMEM if it ran out of memory,"
msgstr ""

#: ../../../filesystems/autofs.rst:162
msgid "-EINTR if a signal arrived while waiting for expiry to complete"
msgstr ""

#: ../../../filesystems/autofs.rst:164
msgid "or any other error sent down by the automount daemon."
msgstr ""

#: ../../../filesystems/autofs.rst:167
msgid ""
"The second use case only occurs during an \"RCU-walk\" and so `rcu_walk` "
"will be set."
msgstr ""

#: ../../../filesystems/autofs.rst:170
msgid ""
"An RCU-walk is a fast and lightweight process for walking down a filename "
"path (i.e. it is like running on tip-toes).  RCU-walk cannot cope with all "
"situations so when it finds a difficulty it falls back to \"REF-walk\", "
"which is slower but more robust."
msgstr ""

#: ../../../filesystems/autofs.rst:175
msgid ""
"RCU-walk will never call `->d_automount`; the filesystems must already be "
"mounted or RCU-walk cannot handle the path. To determine if a mount-trap is "
"safe for RCU-walk mode it calls `->d_manage()` with `rcu_walk` set to `true`."
msgstr ""

#: ../../../filesystems/autofs.rst:180
msgid ""
"In this case `d_manage()` must avoid blocking and should avoid taking "
"spinlocks if at all possible.  Its sole purpose is to determine if it would "
"be safe to follow down into any mounted directory and the only reason that "
"it might not be is if an expiry of the mount is underway."
msgstr ""

#: ../../../filesystems/autofs.rst:186
msgid ""
"In the `rcu_walk` case, `d_manage()` cannot return -EISDIR to tell the VFS "
"that this is a directory that doesn't require d_automount.  If `rcu_walk` "
"sees a dentry with DCACHE_NEED_AUTOMOUNT set but nothing mounted, it *will* "
"fall back to REF-walk.  `d_manage()` cannot make the VFS remain in RCU-walk "
"mode, but can only tell it to get out of RCU-walk mode by returning `-"
"ECHILD`."
msgstr ""

#: ../../../filesystems/autofs.rst:193
msgid ""
"So `d_manage()`, when called with `rcu_walk` set, should either return -"
"ECHILD if there is any reason to believe it is unsafe to enter the mounted "
"filesystem, otherwise it should return 0."
msgstr ""

#: ../../../filesystems/autofs.rst:197
msgid ""
"autofs will return `-ECHILD` if an expiry of the filesystem has been "
"initiated or is being considered, otherwise it returns 0."
msgstr ""

#: ../../../filesystems/autofs.rst:202
msgid "Mountpoint expiry"
msgstr ""

#: ../../../filesystems/autofs.rst:204
msgid ""
"The VFS has a mechanism for automatically expiring unused mounts, much as it "
"can expire any unused dentry information from the dcache. This is guided by "
"the MNT_SHRINKABLE flag.  This only applies to mounts that were created by "
"`d_automount()` returning a filesystem to be mounted.  As autofs doesn't "
"return such a filesystem but leaves the mounting to the automount daemon, it "
"must involve the automount daemon in unmounting as well.  This also means "
"that autofs has more control over expiry."
msgstr ""

#: ../../../filesystems/autofs.rst:213
msgid ""
"The VFS also supports \"expiry\" of mounts using the MNT_EXPIRE flag to the "
"`umount` system call.  Unmounting with MNT_EXPIRE will fail unless a "
"previous attempt had been made, and the filesystem has been inactive and "
"untouched since that previous attempt.  autofs does not depend on this but "
"has its own internal tracking of whether filesystems were recently used.  "
"This allows individual names in the autofs directory to expire separately."
msgstr ""

#: ../../../filesystems/autofs.rst:221
msgid ""
"With version 4 of the protocol, the automount daemon can try to unmount any "
"filesystems mounted on the autofs filesystem or remove any symbolic links or "
"empty directories any time it likes.  If the unmount or removal is "
"successful the filesystem will be returned to the state it was before the "
"mount or creation, so that any access of the name will trigger normal auto-"
"mount processing.  In particular, `rmdir` and `unlink` do not leave negative "
"entries in the dcache as a normal filesystem would, so an attempt to access "
"a recently-removed object is passed to autofs for handling."
msgstr ""

#: ../../../filesystems/autofs.rst:231
msgid ""
"With version 5, this is not safe except for unmounting from top-level "
"directories.  As lower-level directories are never mount traps, other "
"processes will see an empty directory as soon as the filesystem is "
"unmounted.  So it is generally safest to use the autofs expiry protocol "
"described below."
msgstr ""

#: ../../../filesystems/autofs.rst:237
msgid ""
"Normally the daemon only wants to remove entries which haven't been used for "
"a while.  For this purpose autofs maintains a \"`last_used`\" time stamp on "
"each directory or symlink.  For symlinks it genuinely does record the last "
"time the symlink was \"used\" or followed to find out where it points to.  "
"For directories the field is used slightly differently.  The field is "
"updated at mount time and during expire checks if it is found to be in use "
"(ie. open file descriptor or process working directory) and during path "
"walks. The update done during path walks prevents frequent expire and "
"immediate mount of frequently accessed automounts. But in the case where a "
"GUI continually access or an application frequently scans an autofs "
"directory tree there can be an accumulation of mounts that aren't actually "
"being used. To cater for this case the \"`strictexpire`\" autofs mount "
"option can be used to avoid the \"`last_used`\" update on path walk thereby "
"preventing this apparent inability to expire mounts that aren't really in "
"use."
msgstr ""

#: ../../../filesystems/autofs.rst:254
msgid ""
"The daemon is able to ask autofs if anything is due to be expired, using an "
"`ioctl` as discussed later.  For a *direct* mount, autofs considers if the "
"entire mount-tree can be unmounted or not.  For an *indirect* mount, autofs "
"considers each of the names in the top level directory to determine if any "
"of those can be unmounted and cleaned up."
msgstr ""

#: ../../../filesystems/autofs.rst:261
msgid ""
"There is an option with indirect mounts to consider each of the leaves that "
"has been mounted on instead of considering the top-level names. This was "
"originally intended for compatibility with version 4 of autofs and should be "
"considered as deprecated for Sun Format automount maps. However, it may be "
"used again for amd format mount maps (which are generally indirect maps) "
"because the amd automounter allows for the setting of an expire timeout for "
"individual mounts. But there are some difficulties in making the needed "
"changes for this."
msgstr ""

#: ../../../filesystems/autofs.rst:270
msgid ""
"When autofs considers a directory it checks the `last_used` time and "
"compares it with the \"timeout\" value set when the filesystem was mounted, "
"though this check is ignored in some cases. It also checks if the directory "
"or anything below it is in use.  For symbolic links, only the `last_used` "
"time is ever considered."
msgstr ""

#: ../../../filesystems/autofs.rst:276
msgid ""
"If both appear to support expiring the directory or symlink, an action is "
"taken."
msgstr ""

#: ../../../filesystems/autofs.rst:279
msgid ""
"There are two ways to ask autofs to consider expiry.  The first is to use "
"the **AUTOFS_IOC_EXPIRE** ioctl.  This only works for indirect mounts.  If "
"it finds something in the root directory to expire it will return the name "
"of that thing.  Once a name has been returned the automount daemon needs to "
"unmount any filesystems mounted below the name normally.  As described "
"above, this is unsafe for non-toplevel mounts in a version-5 autofs.  For "
"this reason the current `automount(8)` does not use this ioctl."
msgstr ""

#: ../../../filesystems/autofs.rst:288
msgid ""
"The second mechanism uses either the **AUTOFS_DEV_IOCTL_EXPIRE_CMD** or the "
"**AUTOFS_IOC_EXPIRE_MULTI** ioctl.  This will work for both direct and "
"indirect mounts.  If it selects an object to expire, it will notify the "
"daemon using the notification mechanism described below.  This will block "
"until the daemon acknowledges the expiry notification. This implies that the "
"\"`EXPIRE`\" ioctl must be sent from a different thread than the one which "
"handles notification."
msgstr ""

#: ../../../filesystems/autofs.rst:296
msgid ""
"While the ioctl is blocking, the entry is marked as \"expiring\" and "
"`d_manage` will block until the daemon affirms that the unmount has "
"completed (together with removing any directories that might have been "
"necessary), or has been aborted."
msgstr ""

#: ../../../filesystems/autofs.rst:302
msgid "Communicating with autofs: detecting the daemon"
msgstr ""

#: ../../../filesystems/autofs.rst:304
msgid ""
"There are several forms of communication between the automount daemon and "
"the filesystem.  As we have already seen, the daemon can create and remove "
"directories and symlinks using normal filesystem operations. autofs knows "
"whether a process requesting some operation is the daemon or not based on "
"its process-group id number (see getpgid(1))."
msgstr ""

#: ../../../filesystems/autofs.rst:310
msgid ""
"When an autofs filesystem is mounted the pgid of the mounting processes is "
"recorded unless the \"pgrp=\" option is given, in which case that number is "
"recorded instead.  Any request arriving from a process in that process group "
"is considered to come from the daemon. If the daemon ever has to be stopped "
"and restarted a new pgid can be provided through an ioctl as will be "
"described below."
msgstr ""

#: ../../../filesystems/autofs.rst:318
msgid "Communicating with autofs: the event pipe"
msgstr ""

#: ../../../filesystems/autofs.rst:320
msgid ""
"When an autofs filesystem is mounted, the 'write' end of a pipe must be "
"passed using the 'fd=' mount option.  autofs will write notification "
"messages to this pipe for the daemon to respond to. For version 5, the "
"format of the message is::"
msgstr ""

#: ../../../filesystems/autofs.rst:338
msgid "And the format of the header is::"
msgstr ""

#: ../../../filesystems/autofs.rst:345
msgid "where the type is one of ::"
msgstr ""

#: ../../../filesystems/autofs.rst:352
msgid ""
"so messages can indicate that a name is missing (something tried to access "
"it but it isn't there) or that it has been selected for expiry."
msgstr ""

#: ../../../filesystems/autofs.rst:355
msgid ""
"The pipe will be set to \"packet mode\" (equivalent to passing `O_DIRECT`) "
"to _pipe2(2)_ so that a read from the pipe will return at most one packet, "
"and any unread portion of a packet will be discarded."
msgstr ""

#: ../../../filesystems/autofs.rst:359
msgid ""
"The `wait_queue_token` is a unique number which can identify a particular "
"request to be acknowledged.  When a message is sent over the pipe the "
"affected dentry is marked as either \"active\" or \"expiring\" and other "
"accesses to it block until the message is acknowledged using one of the "
"ioctls below with the relevant `wait_queue_token`."
msgstr ""

#: ../../../filesystems/autofs.rst:367
msgid "Communicating with autofs: root directory ioctls"
msgstr ""

#: ../../../filesystems/autofs.rst:369
msgid ""
"The root directory of an autofs filesystem will respond to a number of "
"ioctls.  The process issuing the ioctl must have the CAP_SYS_ADMIN "
"capability, or must be the automount daemon."
msgstr ""

#: ../../../filesystems/autofs.rst:373
msgid "The available ioctl commands are:"
msgstr ""

#: ../../../filesystems/autofs.rst:375
msgid "**AUTOFS_IOC_READY**:"
msgstr ""

#: ../../../filesystems/autofs.rst:376
msgid ""
"a notification has been handled.  The argument to the ioctl command is the "
"\"wait_queue_token\" number corresponding to the notification being "
"acknowledged."
msgstr ""

#: ../../../filesystems/autofs.rst:379
msgid "**AUTOFS_IOC_FAIL**:"
msgstr ""

#: ../../../filesystems/autofs.rst:380
msgid "similar to above, but indicates failure with the error code `ENOENT`."
msgstr ""

#: ../../../filesystems/autofs.rst:382
msgid "**AUTOFS_IOC_CATATONIC**:"
msgstr ""

#: ../../../filesystems/autofs.rst:383
msgid ""
"Causes the autofs to enter \"catatonic\" mode meaning that it stops sending "
"notifications to the daemon. This mode is also entered if a write to the "
"pipe fails."
msgstr ""

#: ../../../filesystems/autofs.rst:386
msgid "**AUTOFS_IOC_PROTOVER**:"
msgstr ""

#: ../../../filesystems/autofs.rst:387
msgid "This returns the protocol version in use."
msgstr ""

#: ../../../filesystems/autofs.rst:388
msgid "**AUTOFS_IOC_PROTOSUBVER**:"
msgstr ""

#: ../../../filesystems/autofs.rst:389
msgid ""
"Returns the protocol sub-version which is really a version number for the "
"implementation."
msgstr ""

#: ../../../filesystems/autofs.rst:391
msgid "**AUTOFS_IOC_SETTIMEOUT**:"
msgstr ""

#: ../../../filesystems/autofs.rst:392
msgid ""
"This passes a pointer to an unsigned long.  The value is used to set the "
"timeout for expiry, and the current timeout value is stored back through the "
"pointer."
msgstr ""

#: ../../../filesystems/autofs.rst:395
msgid "**AUTOFS_IOC_ASKUMOUNT**:"
msgstr ""

#: ../../../filesystems/autofs.rst:396
msgid ""
"Returns, in the pointed-to `int`, 1 if the filesystem could be unmounted.  "
"This is only a hint as the situation could change at any instant.  This call "
"can be used to avoid a more expensive full unmount attempt."
msgstr ""

#: ../../../filesystems/autofs.rst:400
msgid "**AUTOFS_IOC_EXPIRE**:"
msgstr ""

#: ../../../filesystems/autofs.rst:401
msgid ""
"as described above, this asks if there is anything suitable to expire.  A "
"pointer to a packet::"
msgstr ""

#: ../../../filesystems/autofs.rst:411
msgid ""
"is required.  This is filled in with the name of something that can be "
"unmounted or removed.  If nothing can be expired, `errno` is set to "
"`EAGAIN`.  Even though a `wait_queue_token` is present in the structure, no "
"\"wait queue\" is established and no acknowledgment is needed."
msgstr ""

#: ../../../filesystems/autofs.rst:416
msgid "**AUTOFS_IOC_EXPIRE_MULTI**:"
msgstr ""

#: ../../../filesystems/autofs.rst:417
msgid ""
"This is similar to **AUTOFS_IOC_EXPIRE** except that it causes notification "
"to be sent to the daemon, and it blocks until the daemon acknowledges. The "
"argument is an integer which can contain two different flags."
msgstr ""

#: ../../../filesystems/autofs.rst:422
msgid ""
"**AUTOFS_EXP_IMMEDIATE** causes `last_used` time to be ignored and objects "
"are expired if the are not in use."
msgstr ""

#: ../../../filesystems/autofs.rst:425
msgid ""
"**AUTOFS_EXP_FORCED** causes the in use status to be ignored and objects are "
"expired even if they are in use. This assumes that the daemon has requested "
"this because it is capable of performing the umount."
msgstr ""

#: ../../../filesystems/autofs.rst:430
msgid ""
"**AUTOFS_EXP_LEAVES** will select a leaf rather than a top-level name to "
"expire.  This is only safe when *maxproto* is 4."
msgstr ""

#: ../../../filesystems/autofs.rst:434
msgid "Communicating with autofs: char-device ioctls"
msgstr ""

#: ../../../filesystems/autofs.rst:436
msgid ""
"It is not always possible to open the root of an autofs filesystem, "
"particularly a *direct* mounted filesystem.  If the automount daemon is "
"restarted there is no way for it to regain control of existing mounts using "
"any of the above communication channels.  To address this need there is a "
"\"miscellaneous\" character device (major 10, minor 235) which can be used "
"to communicate directly with the autofs filesystem. It requires "
"CAP_SYS_ADMIN for access."
msgstr ""

#: ../../../filesystems/autofs.rst:444
msgid ""
"The 'ioctl's that can be used on this device are described in a separate "
"document `autofs-mount-control.rst`, and are summarised briefly here. Each "
"ioctl is passed a pointer to an `autofs_dev_ioctl` structure::"
msgstr ""

#: ../../../filesystems/autofs.rst:473
msgid ""
"For the **OPEN_MOUNT** and **IS_MOUNTPOINT** commands, the target filesystem "
"is identified by the `path`.  All other commands identify the filesystem by "
"the `ioctlfd` which is a file descriptor open on the root, and which can be "
"returned by **OPEN_MOUNT**."
msgstr ""

#: ../../../filesystems/autofs.rst:478
msgid ""
"The `ver_major` and `ver_minor` are in/out parameters which check that the "
"requested version is supported, and report the maximum version that the "
"kernel module can support."
msgstr ""

#: ../../../filesystems/autofs.rst:482
msgid "Commands are:"
msgstr ""

#: ../../../filesystems/autofs.rst:484
msgid "**AUTOFS_DEV_IOCTL_VERSION_CMD**:"
msgstr ""

#: ../../../filesystems/autofs.rst:485
msgid "does nothing, except validate and set version numbers."
msgstr ""

#: ../../../filesystems/autofs.rst:487
msgid "**AUTOFS_DEV_IOCTL_OPENMOUNT_CMD**:"
msgstr ""

#: ../../../filesystems/autofs.rst:488
msgid ""
"return an open file descriptor on the root of an autofs filesystem.  The "
"filesystem is identified by name and device number, which is stored in "
"`openmount.devid`. Device numbers for existing filesystems can be found in `/"
"proc/self/mountinfo`."
msgstr ""

#: ../../../filesystems/autofs.rst:493
msgid "**AUTOFS_DEV_IOCTL_CLOSEMOUNT_CMD**:"
msgstr ""

#: ../../../filesystems/autofs.rst:494
msgid "same as `close(ioctlfd)`."
msgstr ""

#: ../../../filesystems/autofs.rst:495
msgid "**AUTOFS_DEV_IOCTL_SETPIPEFD_CMD**:"
msgstr ""

#: ../../../filesystems/autofs.rst:496
msgid ""
"if the filesystem is in catatonic mode, this can provide the write end of a "
"new pipe in `setpipefd.pipefd` to re-establish communication with a daemon. "
"The process group of the calling process is used to identify the daemon."
msgstr ""

#: ../../../filesystems/autofs.rst:501
msgid "**AUTOFS_DEV_IOCTL_REQUESTER_CMD**:"
msgstr ""

#: ../../../filesystems/autofs.rst:502
msgid ""
"`path` should be a name within the filesystem that has been auto-mounted on. "
"On successful return, `requester.uid` and `requester.gid` will be the UID "
"and GID of the process which triggered that mount."
msgstr ""

#: ../../../filesystems/autofs.rst:506
msgid "**AUTOFS_DEV_IOCTL_ISMOUNTPOINT_CMD**:"
msgstr ""

#: ../../../filesystems/autofs.rst:507
msgid ""
"Check if path is a mountpoint of a particular type - see separate "
"documentation for details."
msgstr ""

#: ../../../filesystems/autofs.rst:511
msgid "**AUTOFS_DEV_IOCTL_PROTOVER_CMD**"
msgstr ""

#: ../../../filesystems/autofs.rst:512
msgid "**AUTOFS_DEV_IOCTL_PROTOSUBVER_CMD**"
msgstr ""

#: ../../../filesystems/autofs.rst:513
msgid "**AUTOFS_DEV_IOCTL_READY_CMD**"
msgstr ""

#: ../../../filesystems/autofs.rst:514
msgid "**AUTOFS_DEV_IOCTL_FAIL_CMD**"
msgstr ""

#: ../../../filesystems/autofs.rst:515
msgid "**AUTOFS_DEV_IOCTL_CATATONIC_CMD**"
msgstr ""

#: ../../../filesystems/autofs.rst:516
msgid "**AUTOFS_DEV_IOCTL_TIMEOUT_CMD**"
msgstr ""

#: ../../../filesystems/autofs.rst:517
msgid "**AUTOFS_DEV_IOCTL_EXPIRE_CMD**"
msgstr ""

#: ../../../filesystems/autofs.rst:518
msgid "**AUTOFS_DEV_IOCTL_ASKUMOUNT_CMD**"
msgstr ""

#: ../../../filesystems/autofs.rst:520
msgid ""
"These all have the same function as the similarly named **AUTOFS_IOC** "
"ioctls, except that **FAIL** can be given an explicit error number in `fail."
"status` instead of assuming `ENOENT`, and this **EXPIRE** command "
"corresponds to **AUTOFS_IOC_EXPIRE_MULTI**."
msgstr ""

#: ../../../filesystems/autofs.rst:527
msgid "Catatonic mode"
msgstr ""

#: ../../../filesystems/autofs.rst:529
msgid ""
"As mentioned, an autofs mount can enter \"catatonic\" mode.  This happens if "
"a write to the notification pipe fails, or if it is explicitly requested by "
"an `ioctl`."
msgstr ""

#: ../../../filesystems/autofs.rst:533
msgid ""
"When entering catatonic mode, the pipe is closed and any pending "
"notifications are acknowledged with the error `ENOENT`."
msgstr ""

#: ../../../filesystems/autofs.rst:536
msgid ""
"Once in catatonic mode attempts to access non-existing names will result in "
"`ENOENT` while attempts to access existing directories will be treated in "
"the same way as if they came from the daemon, so mount traps will not fire."
msgstr ""

#: ../../../filesystems/autofs.rst:541
msgid ""
"When the filesystem is mounted a _uid_ and _gid_ can be given which set the "
"ownership of directories and symbolic links.  When the filesystem is in "
"catatonic mode, any process with a matching UID can create directories or "
"symlinks in the root directory, but not in other directories."
msgstr ""

#: ../../../filesystems/autofs.rst:547
msgid ""
"Catatonic mode can only be left via the **AUTOFS_DEV_IOCTL_OPENMOUNT_CMD** "
"ioctl on the `/dev/autofs`."
msgstr ""

#: ../../../filesystems/autofs.rst:551
msgid "The \"ignore\" mount option"
msgstr ""

#: ../../../filesystems/autofs.rst:553
msgid ""
"The \"ignore\" mount option can be used to provide a generic indicator to "
"applications that the mount entry should be ignored when displaying mount "
"information."
msgstr ""

#: ../../../filesystems/autofs.rst:557
msgid ""
"In other OSes that provide autofs and that provide a mount list to user "
"space based on the kernel mount list a no-op mount option (\"ignore\" is the "
"one use on the most common OSes) is allowed so that autofs file system users "
"can optionally use it."
msgstr ""

#: ../../../filesystems/autofs.rst:562
msgid ""
"This is intended to be used by user space programs to exclude autofs mounts "
"from consideration when reading the mounts list."
msgstr ""

#: ../../../filesystems/autofs.rst:566
msgid "autofs, name spaces, and shared mounts"
msgstr ""

#: ../../../filesystems/autofs.rst:568
msgid ""
"With bind mounts and name spaces it is possible for an autofs filesystem to "
"appear at multiple places in one or more filesystem name spaces.  For this "
"to work sensibly, the autofs filesystem should always be mounted \"shared\". "
"e.g. ::"
msgstr ""

#: ../../../filesystems/autofs.rst:575
msgid ""
"The automount daemon is only able to manage a single mount location for an "
"autofs filesystem and if mounts on that are not 'shared', other locations "
"will not behave as expected.  In particular access to those other locations "
"will likely result in the `ELOOP` error ::"
msgstr ""
