# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../filesystems/automount-support.rst:5
msgid "Automount Support"
msgstr ""

#: ../../../filesystems/automount-support.rst:8
msgid ""
"Support is available for filesystems that wish to do automounting support "
"(such as kAFS which can be found in fs/afs/ and NFS in fs/nfs/). This "
"facility includes allowing in-kernel mounts to be performed and mountpoint "
"degradation to be requested. The latter can also be requested by userspace."
msgstr ""

#: ../../../filesystems/automount-support.rst:16
msgid "In-Kernel Automounting"
msgstr ""

#: ../../../filesystems/automount-support.rst:18
msgid "See section \"Mount Traps\" of  Documentation/filesystems/autofs.rst"
msgstr ""

#: ../../../filesystems/automount-support.rst:20
msgid "Then from userspace, you can just do something like::"
msgstr ""

#: ../../../filesystems/automount-support.rst:30
msgid ""
"And then if you look in the mountpoint catalogue, you'll see something like::"
msgstr ""

#: ../../../filesystems/automount-support.rst:40
msgid "Automatic Mountpoint Expiry"
msgstr ""

#: ../../../filesystems/automount-support.rst:42
msgid ""
"Automatic expiration of mountpoints is easy, provided you've mounted the "
"mountpoint to be expired in the automounting procedure outlined separately."
msgstr ""

#: ../../../filesystems/automount-support.rst:45
msgid "To do expiration, you need to follow these steps:"
msgstr ""

#: ../../../filesystems/automount-support.rst:47
msgid ""
"Create at least one list off which the vfsmounts to be expired can be hung."
msgstr ""

#: ../../../filesystems/automount-support.rst:50
msgid ""
"When a new mountpoint is created in the ->d_automount method, add the mnt to "
"the list using mnt_set_expiry()::"
msgstr ""

#: ../../../filesystems/automount-support.rst:55
msgid ""
"When you want mountpoints to be expired, call mark_mounts_for_expiry() with "
"a pointer to this list. This will process the list, marking every vfsmount "
"thereon for potential expiry on the next call."
msgstr ""

#: ../../../filesystems/automount-support.rst:59
msgid ""
"If a vfsmount was already flagged for expiry, and if its usage count is 1 "
"(it's only referenced by its parent vfsmount), then it will be deleted from "
"the namespace and thrown away (effectively unmounted)."
msgstr ""

#: ../../../filesystems/automount-support.rst:63
msgid ""
"It may prove simplest to simply call this at regular intervals, using some "
"sort of timed event to drive it."
msgstr ""

#: ../../../filesystems/automount-support.rst:66
msgid ""
"The expiration flag is cleared by calls to mntput. This means that "
"expiration will only happen on the second expiration request after the last "
"time the mountpoint was accessed."
msgstr ""

#: ../../../filesystems/automount-support.rst:70
msgid ""
"If a mountpoint is moved, it gets removed from the expiration list. If a "
"bind mount is made on an expirable mount, the new vfsmount will not be on "
"the expiration list and will not expire."
msgstr ""

#: ../../../filesystems/automount-support.rst:74
msgid ""
"If a namespace is copied, all mountpoints contained therein will be copied, "
"and the copies of those that are on an expiration list will be added to the "
"same expiration list."
msgstr ""

#: ../../../filesystems/automount-support.rst:80
msgid "Userspace Driven Expiry"
msgstr ""

#: ../../../filesystems/automount-support.rst:82
msgid ""
"As an alternative, it is possible for userspace to request expiry of any "
"mountpoint (though some will be rejected - the current process's idea of the "
"rootfs for example). It does this by passing the MNT_EXPIRE flag to "
"umount(). This flag is considered incompatible with MNT_FORCE and MNT_DETACH."
msgstr ""

#: ../../../filesystems/automount-support.rst:87
msgid ""
"If the mountpoint in question is in referenced by something other than "
"umount() or its parent mountpoint, an EBUSY error will be returned and the "
"mountpoint will not be marked for expiration or unmounted."
msgstr ""

#: ../../../filesystems/automount-support.rst:91
msgid ""
"If the mountpoint was not already marked for expiry at that time, an EAGAIN "
"error will be given and it won't be unmounted."
msgstr ""

#: ../../../filesystems/automount-support.rst:94
msgid ""
"Otherwise if it was already marked and it wasn't referenced, unmounting will "
"take place as usual."
msgstr ""

#: ../../../filesystems/automount-support.rst:97
msgid ""
"Again, the expiration flag is cleared every time anything other than "
"umount() looks at a mountpoint."
msgstr ""
