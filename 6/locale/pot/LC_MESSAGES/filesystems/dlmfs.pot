# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../filesystems/dlmfs.rst:6
msgid "DLMFS"
msgstr ""

#: ../../../filesystems/dlmfs.rst:8
msgid ""
"A minimal DLM userspace interface implemented via a virtual file system."
msgstr ""

#: ../../../filesystems/dlmfs.rst:11
msgid "dlmfs is built with OCFS2 as it requires most of its infrastructure."
msgstr ""

#: ../../../filesystems/dlmfs.rst:0
msgid "Project web page"
msgstr ""

#: ../../../filesystems/dlmfs.rst:13
msgid "http://ocfs2.wiki.kernel.org"
msgstr ""

#: ../../../filesystems/dlmfs.rst:0
msgid "Tools web page"
msgstr ""

#: ../../../filesystems/dlmfs.rst:14
msgid "https://github.com/markfasheh/ocfs2-tools"
msgstr ""

#: ../../../filesystems/dlmfs.rst:0
msgid "OCFS2 mailing lists"
msgstr ""

#: ../../../filesystems/dlmfs.rst:15
msgid "https://subspace.kernel.org/lists.linux.dev.html"
msgstr ""

#: ../../../filesystems/dlmfs.rst:17
msgid "All code copyright 2005 Oracle except when otherwise noted."
msgstr ""

#: ../../../filesystems/dlmfs.rst:20
msgid "Credits"
msgstr ""

#: ../../../filesystems/dlmfs.rst:22
msgid ""
"Some code taken from ramfs which is Copyright |copy| 2000 Linus Torvalds and "
"Transmeta Corp."
msgstr ""

#: ../../../filesystems/dlmfs.rst:25
msgid "Mark Fasheh <mark.fasheh@oracle.com>"
msgstr ""

#: ../../../filesystems/dlmfs.rst:28
msgid "Caveats"
msgstr ""

#: ../../../filesystems/dlmfs.rst:29
msgid ""
"Right now it only works with the OCFS2 DLM, though support for other DLM "
"implementations should not be a major issue."
msgstr ""

#: ../../../filesystems/dlmfs.rst:33
msgid "Mount options"
msgstr ""

#: ../../../filesystems/dlmfs.rst:34
msgid "None"
msgstr ""

#: ../../../filesystems/dlmfs.rst:37
msgid "Usage"
msgstr ""

#: ../../../filesystems/dlmfs.rst:39
msgid ""
"If you're just interested in OCFS2, then please see ocfs2.rst. The rest of "
"this document will be geared towards those who want to use dlmfs for easy to "
"setup and easy to use clustered locking in userspace."
msgstr ""

#: ../../../filesystems/dlmfs.rst:45
msgid "Setup"
msgstr ""

#: ../../../filesystems/dlmfs.rst:47
msgid ""
"dlmfs requires that the OCFS2 cluster infrastructure be in place. Please "
"download ocfs2-tools from the above url and configure a cluster."
msgstr ""

#: ../../../filesystems/dlmfs.rst:51
msgid ""
"You'll want to start heartbeating on a volume which all the nodes in your "
"lockspace can access. The easiest way to do this is via ocfs2_hb_ctl "
"(distributed with ocfs2-tools). Right now it requires that an OCFS2 file "
"system be in place so that it can automatically find its heartbeat area, "
"though it will eventually support heartbeat against raw disks."
msgstr ""

#: ../../../filesystems/dlmfs.rst:58
msgid ""
"Please see the ocfs2_hb_ctl and mkfs.ocfs2 manual pages distributed with "
"ocfs2-tools."
msgstr ""

#: ../../../filesystems/dlmfs.rst:61
msgid ""
"Once you're heartbeating, DLM lock 'domains' can be easily created / "
"destroyed and locks within them accessed."
msgstr ""

#: ../../../filesystems/dlmfs.rst:65
msgid "Locking"
msgstr ""

#: ../../../filesystems/dlmfs.rst:67
msgid ""
"Users may access dlmfs via standard file system calls, or they can use "
"'libo2dlm' (distributed with ocfs2-tools) which abstracts the file system "
"calls and presents a more traditional locking api."
msgstr ""

#: ../../../filesystems/dlmfs.rst:71
msgid ""
"dlmfs handles lock caching automatically for the user, so a lock request for "
"an already acquired lock will not generate another DLM call. Userspace "
"programs are assumed to handle their own local locking."
msgstr ""

#: ../../../filesystems/dlmfs.rst:76
msgid ""
"Two levels of locks are supported - Shared Read, and Exclusive. Also "
"supported is a Trylock operation."
msgstr ""

#: ../../../filesystems/dlmfs.rst:79
msgid ""
"For information on the libo2dlm interface, please see o2dlm.h, distributed "
"with ocfs2-tools."
msgstr ""

#: ../../../filesystems/dlmfs.rst:82
msgid ""
"Lock value blocks can be read and written to a resource via read(2) and "
"write(2) against the fd obtained via your open(2) call. The maximum "
"currently supported LVB length is 64 bytes (though that is an OCFS2 DLM "
"limitation). Through this mechanism, users of dlmfs can share small amounts "
"of data amongst their nodes."
msgstr ""

#: ../../../filesystems/dlmfs.rst:88
msgid ""
"mkdir(2) signals dlmfs to join a domain (which will have the same name as "
"the resulting directory)"
msgstr ""

#: ../../../filesystems/dlmfs.rst:91
msgid "rmdir(2) signals dlmfs to leave the domain"
msgstr ""

#: ../../../filesystems/dlmfs.rst:93
msgid ""
"Locks for a given domain are represented by regular inodes inside the domain "
"directory.  Locking against them is done via the open(2) system call."
msgstr ""

#: ../../../filesystems/dlmfs.rst:97
msgid ""
"The open(2) call will not return until your lock has been granted or an "
"error has occurred, unless it has been instructed to do a trylock operation. "
"If the lock succeeds, you'll get an fd."
msgstr ""

#: ../../../filesystems/dlmfs.rst:101
msgid ""
"open(2) with O_CREAT to ensure the resource inode is created - dlmfs does "
"not automatically create inodes for existing lock resources."
msgstr ""

#: ../../../filesystems/dlmfs.rst:105 ../../../filesystems/dlmfs.rst:113
msgid "Open Flag"
msgstr ""

#: ../../../filesystems/dlmfs.rst:105
msgid "Lock Request Type"
msgstr ""

#: ../../../filesystems/dlmfs.rst:107
msgid "O_RDONLY"
msgstr ""

#: ../../../filesystems/dlmfs.rst:107
msgid "Shared Read"
msgstr ""

#: ../../../filesystems/dlmfs.rst:108
msgid "O_RDWR"
msgstr ""

#: ../../../filesystems/dlmfs.rst:108
msgid "Exclusive"
msgstr ""

#: ../../../filesystems/dlmfs.rst:113
msgid "Resulting Locking Behavior"
msgstr ""

#: ../../../filesystems/dlmfs.rst:115
msgid "O_NONBLOCK"
msgstr ""

#: ../../../filesystems/dlmfs.rst:115
msgid "Trylock operation"
msgstr ""

#: ../../../filesystems/dlmfs.rst:118
msgid "You must provide exactly one of O_RDONLY or O_RDWR."
msgstr ""

#: ../../../filesystems/dlmfs.rst:120
msgid ""
"If O_NONBLOCK is also provided and the trylock operation was valid but could "
"not lock the resource then open(2) will return ETXTBUSY."
msgstr ""

#: ../../../filesystems/dlmfs.rst:123
msgid "close(2) drops the lock associated with your fd."
msgstr ""

#: ../../../filesystems/dlmfs.rst:125
msgid ""
"Modes passed to mkdir(2) or open(2) are adhered to locally. Chown is "
"supported locally as well. This means you can use them to restrict access to "
"the resources via dlmfs on your local node only."
msgstr ""

#: ../../../filesystems/dlmfs.rst:129
msgid ""
"The resource LVB may be read from the fd in either Shared Read or Exclusive "
"modes via the read(2) system call. It can be written via write(2) only when "
"open in Exclusive mode."
msgstr ""

#: ../../../filesystems/dlmfs.rst:133
msgid ""
"Once written, an LVB will be visible to other nodes who obtain Read Only or "
"higher level locks on the resource."
msgstr ""

#: ../../../filesystems/dlmfs.rst:137
msgid "See Also"
msgstr ""

#: ../../../filesystems/dlmfs.rst:138
msgid "http://opendlm.sourceforge.net/cvsmirror/opendlm/docs/dlmbook_final.pdf"
msgstr ""

#: ../../../filesystems/dlmfs.rst:140
msgid "For more information on the VMS distributed locking API."
msgstr ""
