# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../driver-api/driver-model/overview.rst:3
msgid "The Linux Kernel Device Model"
msgstr ""

#: ../../../driver-api/driver-model/overview.rst:5
msgid "Patrick Mochel  <mochel@digitalimplant.org>"
msgstr ""

#: ../../../driver-api/driver-model/overview.rst:7
msgid "Drafted 26 August 2002 Updated 31 January 2006"
msgstr ""

#: ../../../driver-api/driver-model/overview.rst:12
msgid "Overview"
msgstr ""

#: ../../../driver-api/driver-model/overview.rst:14
msgid ""
"The Linux Kernel Driver Model is a unification of all the disparate driver "
"models that were previously used in the kernel. It is intended to augment "
"the bus-specific drivers for bridges and devices by consolidating a set of "
"data and operations into globally accessible data structures."
msgstr ""

#: ../../../driver-api/driver-model/overview.rst:19
msgid ""
"Traditional driver models implemented some sort of tree-like structure "
"(sometimes just a list) for the devices they control. There wasn't any "
"uniformity across the different bus types."
msgstr ""

#: ../../../driver-api/driver-model/overview.rst:23
msgid ""
"The current driver model provides a common, uniform data model for "
"describing a bus and the devices that can appear under the bus. The unified "
"bus model includes a set of common attributes which all busses carry, and a "
"set of common callbacks, such as device discovery during bus probing, bus "
"shutdown, bus power management, etc."
msgstr ""

#: ../../../driver-api/driver-model/overview.rst:29
msgid ""
"The common device and bridge interface reflects the goals of the modern "
"computer: namely the ability to do seamless device \"plug and play\", power "
"management, and hot plug. In particular, the model dictated by Intel and "
"Microsoft (namely ACPI) ensures that almost every device on almost any bus "
"on an x86-compatible system can work within this paradigm.  Of course, not "
"every bus is able to support all such operations, although most buses "
"support most of those operations."
msgstr ""

#: ../../../driver-api/driver-model/overview.rst:39
msgid "Downstream Access"
msgstr ""

#: ../../../driver-api/driver-model/overview.rst:41
msgid ""
"Common data fields have been moved out of individual bus layers into a "
"common data structure. These fields must still be accessed by the bus "
"layers, and sometimes by the device-specific drivers."
msgstr ""

#: ../../../driver-api/driver-model/overview.rst:45
msgid ""
"Other bus layers are encouraged to do what has been done for the PCI layer. "
"struct pci_dev now looks like this::"
msgstr ""

#: ../../../driver-api/driver-model/overview.rst:55
msgid ""
"Note first that the struct device dev within the struct pci_dev is "
"statically allocated. This means only one allocation on device discovery."
msgstr ""

#: ../../../driver-api/driver-model/overview.rst:58
msgid ""
"Note also that that struct device dev is not necessarily defined at the "
"front of the pci_dev structure.  This is to make people think about what "
"they're doing when switching between the bus driver and the global driver, "
"and to discourage meaningless and incorrect casts between the two."
msgstr ""

#: ../../../driver-api/driver-model/overview.rst:63
msgid ""
"The PCI bus layer freely accesses the fields of struct device. It knows "
"about the structure of struct pci_dev, and it should know the structure of "
"struct device. Individual PCI device drivers that have been converted to the "
"current driver model generally do not and should not touch the fields of "
"struct device, unless there is a compelling reason to do so."
msgstr ""

#: ../../../driver-api/driver-model/overview.rst:69
msgid ""
"The above abstraction prevents unnecessary pain during transitional phases. "
"If it were not done this way, then when a field was renamed or removed, "
"every downstream driver would break.  On the other hand, if only the bus "
"layer (and not the device layer) accesses the struct device, it is only the "
"bus layer that needs to change."
msgstr ""

#: ../../../driver-api/driver-model/overview.rst:77
msgid "User Interface"
msgstr ""

#: ../../../driver-api/driver-model/overview.rst:79
msgid ""
"By virtue of having a complete hierarchical view of all the devices in the "
"system, exporting a complete hierarchical view to userspace becomes "
"relatively easy. This has been accomplished by implementing a special "
"purpose virtual file system named sysfs."
msgstr ""

#: ../../../driver-api/driver-model/overview.rst:84
msgid ""
"Almost all mainstream Linux distros mount this filesystem automatically; you "
"can see some variation of the following in the output of the \"mount\" "
"command::"
msgstr ""

#: ../../../driver-api/driver-model/overview.rst:93
msgid ""
"The auto-mounting of sysfs is typically accomplished by an entry similar to "
"the following in the /etc/fstab file::"
msgstr ""

#: ../../../driver-api/driver-model/overview.rst:98
msgid ""
"or something similar in the /lib/init/fstab file on Debian-based systems::"
msgstr ""

#: ../../../driver-api/driver-model/overview.rst:102
msgid ""
"If sysfs is not automatically mounted, you can always do it manually with::"
msgstr ""

#: ../../../driver-api/driver-model/overview.rst:106
msgid ""
"Whenever a device is inserted into the tree, a directory is created for it. "
"This directory may be populated at each layer of discovery - the global "
"layer, the bus layer, or the device layer."
msgstr ""

#: ../../../driver-api/driver-model/overview.rst:110
msgid ""
"The global layer currently creates two files - 'name' and 'power'. The "
"former only reports the name of the device. The latter reports the current "
"power state of the device. It will also be used to set the current power "
"state."
msgstr ""

#: ../../../driver-api/driver-model/overview.rst:115
msgid ""
"The bus layer may also create files for the devices it finds while probing "
"the bus. For example, the PCI layer currently creates 'irq' and 'resource' "
"files for each PCI device."
msgstr ""

#: ../../../driver-api/driver-model/overview.rst:119
msgid ""
"A device-specific driver may also export files in its directory to expose "
"device-specific data or tunable interfaces."
msgstr ""

#: ../../../driver-api/driver-model/overview.rst:122
msgid ""
"More information about the sysfs directory layout can be found in the other "
"documents in this directory and in the file Documentation/filesystems/sysfs."
"rst."
msgstr ""
