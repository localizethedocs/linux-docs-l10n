# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-14 08:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../driver-api/usb/typec.rst:4
msgid "USB Type-C connector class"
msgstr ""

#: ../../../driver-api/usb/typec.rst:7
msgid "Introduction"
msgstr ""

#: ../../../driver-api/usb/typec.rst:9
msgid ""
"The typec class is meant for describing the USB Type-C ports in a system to "
"the user space in unified fashion. The class is designed to provide nothing "
"else except the user space interface implementation in hope that it can be "
"utilized on as many platforms as possible."
msgstr ""

#: ../../../driver-api/usb/typec.rst:14
msgid ""
"The platforms are expected to register every USB Type-C port they have with "
"the class. In a normal case the registration will be done by a USB Type-C or "
"PD PHY driver, but it may be a driver for firmware interface such as UCSI, "
"driver for USB PD controller or even driver for Thunderbolt3 controller. "
"This document considers the component registering the USB Type-C ports with "
"the class as \"port driver\"."
msgstr ""

#: ../../../driver-api/usb/typec.rst:21
msgid ""
"On top of showing the capabilities, the class also offer user space control "
"over the roles and alternate modes of ports, partners and cable plugs when "
"the port driver is capable of supporting those features."
msgstr ""

#: ../../../driver-api/usb/typec.rst:25
msgid ""
"The class provides an API for the port drivers described in this document. "
"The attributes are described in Documentation/ABI/testing/sysfs-class-typec."
msgstr ""

#: ../../../driver-api/usb/typec.rst:29
msgid "User space interface"
msgstr ""

#: ../../../driver-api/usb/typec.rst:30
msgid ""
"Every port will be presented as its own device under /sys/class/typec/. The "
"first port will be named \"port0\", the second \"port1\" and so on."
msgstr ""

#: ../../../driver-api/usb/typec.rst:33
msgid ""
"When connected, the partner will be presented also as its own device under /"
"sys/class/typec/. The parent of the partner device will always be the port "
"it is attached to. The partner attached to port \"port0\" will be named "
"\"port0-partner\". Full path to the device would be /sys/class/typec/port0/"
"port0-partner/."
msgstr ""

#: ../../../driver-api/usb/typec.rst:39
msgid ""
"The cable and the two plugs on it may also be optionally presented as their "
"own devices under /sys/class/typec/. The cable attached to the port "
"\"port0\" port will be named port0-cable and the plug on the SOP Prime end "
"(see USB Power Delivery Specification ch. 2.4) will be named \"port0-plug0\" "
"and on the SOP Double Prime end \"port0-plug1\". The parent of a cable will "
"always be the port, and the parent of the cable plugs will always be the "
"cable."
msgstr ""

#: ../../../driver-api/usb/typec.rst:46
msgid ""
"If the port, partner or cable plug supports Alternate Modes, every supported "
"Alternate Mode SVID will have their own device describing them. Note that "
"the Alternate Mode devices will not be attached to the typec class. The "
"parent of an alternate mode will be the device that supports it, so for "
"example an alternate mode of port0-partner will be presented under /sys/"
"class/typec/port0-partner/. Every mode that is supported will have its own "
"group under the Alternate Mode device named \"mode<index>\", for example /"
"sys/class/typec/port0/<alternate mode>/mode1/. The requests for entering/"
"exiting a mode can be done with \"active\" attribute file in that group."
msgstr ""

#: ../../../driver-api/usb/typec.rst:57
msgid "Driver API"
msgstr ""

#: ../../../driver-api/usb/typec.rst:60
msgid "Registering the ports"
msgstr ""

#: ../../../driver-api/usb/typec.rst:62
msgid ""
"The port drivers will describe every Type-C port they control with struct "
"typec_capability data structure, and register them with the following API:"
msgstr ""

#: ../../../driver-api/usb/typec:65: drivers/usb/typec/class.c:2573
msgid "Register a USB Type-C Port"
msgstr ""

#: ../../../driver-api/usb/typec:117: drivers/usb/typec/class.c:1205
#: drivers/usb/typec/class.c:1248 drivers/usb/typec/class.c:1360
#: drivers/usb/typec/class.c:1409 ../../../driver-api/usb/typec:129:
#: drivers/usb/typec/class.c:1343 ../../../driver-api/usb/typec:139:
#: drivers/usb/typec/class.c:2099 drivers/usb/typec/class.c:2128
#: drivers/usb/typec/class.c:2146 drivers/usb/typec/class.c:2165
#: ../../../driver-api/usb/typec:154: drivers/usb/typec/class.c:2460
#: ../../../driver-api/usb/typec:163: drivers/usb/typec/class.c:955
#: ../../../driver-api/usb/typec:168: drivers/usb/typec/class.c:1185
#: ../../../driver-api/usb/typec:176: drivers/usb/typec/class.c:611
#: ../../../driver-api/usb/typec:182: drivers/usb/typec/class.c:297
#: ../../../driver-api/usb/typec:195: drivers/usb/typec/mux.c:159
#: drivers/usb/typec/mux.c:230 drivers/usb/typec/mux.c:404
#: drivers/usb/typec/mux.c:452 ../../../driver-api/usb/typec:207:
#: drivers/usb/typec/class.c:2281 drivers/usb/typec/class.c:2317
#: ../../../driver-api/usb/typec:65: drivers/usb/typec/class.c:2577
#: drivers/usb/typec/class.c:2712 ../../../driver-api/usb/typec:84:
#: drivers/usb/typec/class.c:1008 drivers/usb/typec/class.c:1079
#: ../../../driver-api/usb/typec:96: drivers/usb/typec/class.c:826
msgid "**Parameters**"
msgstr ""

#: ../../../driver-api/usb/typec:195: drivers/usb/typec/mux.c:161
#: drivers/usb/typec/mux.c:406 ../../../driver-api/usb/typec:65:
#: drivers/usb/typec/class.c:2579
msgid "``struct device *parent``"
msgstr ""

#: ../../../driver-api/usb/typec:195: drivers/usb/typec/mux.c:156
#: drivers/usb/typec/mux.c:401 ../../../driver-api/usb/typec:65:
#: drivers/usb/typec/class.c:2574
msgid "Parent device"
msgstr ""

#: ../../../driver-api/usb/typec:65: drivers/usb/typec/class.c:2576
msgid "``const struct typec_capability *cap``"
msgstr ""

#: ../../../driver-api/usb/typec:65: drivers/usb/typec/class.c:2575
msgid "Description of the port"
msgstr ""

#: ../../../driver-api/usb/typec:117: drivers/usb/typec/class.c:1205
#: drivers/usb/typec/class.c:1247 drivers/usb/typec/class.c:1360
#: drivers/usb/typec/class.c:1408 ../../../driver-api/usb/typec:129:
#: drivers/usb/typec/class.c:1342 ../../../driver-api/usb/typec:139:
#: drivers/usb/typec/class.c:2099 drivers/usb/typec/class.c:2128
#: drivers/usb/typec/class.c:2146 drivers/usb/typec/class.c:2165
#: ../../../driver-api/usb/typec:154: drivers/usb/typec/class.c:2460
#: ../../../driver-api/usb/typec:163: drivers/usb/typec/class.c:955
#: ../../../driver-api/usb/typec:168: drivers/usb/typec/class.c:1185
#: ../../../driver-api/usb/typec:176: drivers/usb/typec/class.c:610
#: ../../../driver-api/usb/typec:182: drivers/usb/typec/class.c:297
#: ../../../driver-api/usb/typec:195: drivers/usb/typec/mux.c:159
#: drivers/usb/typec/mux.c:229 drivers/usb/typec/mux.c:404
#: drivers/usb/typec/mux.c:451 ../../../driver-api/usb/typec:207:
#: drivers/usb/typec/class.c:2281 drivers/usb/typec/class.c:2317
#: ../../../driver-api/usb/typec:65: drivers/usb/typec/class.c:2577
#: drivers/usb/typec/class.c:2711 ../../../driver-api/usb/typec:84:
#: drivers/usb/typec/class.c:1008 drivers/usb/typec/class.c:1078
#: ../../../driver-api/usb/typec:96: drivers/usb/typec/class.c:825
msgid "**Description**"
msgstr ""

#: ../../../driver-api/usb/typec:65: drivers/usb/typec/class.c:2576
msgid "Registers a device for USB Type-C Port described in **cap**."
msgstr ""

#: ../../../driver-api/usb/typec:65: drivers/usb/typec/class.c:2578
msgid "Returns handle to the port on success or ERR_PTR on failure."
msgstr ""

#: ../../../driver-api/usb/typec:65: drivers/usb/typec/class.c:2708
msgid "Unregister a USB Type-C Port"
msgstr ""

#: ../../../driver-api/usb/typec:117: drivers/usb/typec/class.c:1362
#: ../../../driver-api/usb/typec:139: drivers/usb/typec/class.c:2101
#: drivers/usb/typec/class.c:2130 drivers/usb/typec/class.c:2148
#: drivers/usb/typec/class.c:2167 ../../../driver-api/usb/typec:154:
#: drivers/usb/typec/class.c:2462 ../../../driver-api/usb/typec:207:
#: drivers/usb/typec/class.c:2283 drivers/usb/typec/class.c:2319
#: ../../../driver-api/usb/typec:65: drivers/usb/typec/class.c:2714
#: ../../../driver-api/usb/typec:84: drivers/usb/typec/class.c:1010
msgid "``struct typec_port *port``"
msgstr ""

#: ../../../driver-api/usb/typec:65: drivers/usb/typec/class.c:2709
msgid "The port to be unregistered"
msgstr ""

#: ../../../driver-api/usb/typec:65: drivers/usb/typec/class.c:2710
msgid "Unregister device created with typec_register_port()."
msgstr ""

#: ../../../driver-api/usb/typec.rst:68
msgid ""
"When registering the ports, the prefer_role member in struct "
"typec_capability deserves special notice. If the port that is being "
"registered does not have initial role preference, which means the port does "
"not execute Try.SNK or Try.SRC by default, the member must have value "
"TYPEC_NO_PREFERRED_ROLE. Otherwise if the port executes Try.SNK by default, "
"the member must have value TYPEC_DEVICE, and with Try.SRC the value must be "
"TYPEC_HOST."
msgstr ""

#: ../../../driver-api/usb/typec.rst:76
msgid "Registering Partners"
msgstr ""

#: ../../../driver-api/usb/typec.rst:78
msgid ""
"After successful connection of a partner, the port driver needs to register "
"the partner with the class. Details about the partner need to be described "
"in struct typec_partner_desc. The class copies the details of the partner "
"during registration. The class offers the following API for registering/"
"unregistering partners."
msgstr ""

#: ../../../driver-api/usb/typec:84: drivers/usb/typec/class.c:1004
msgid "Register a USB Type-C Partner"
msgstr ""

#: ../../../driver-api/usb/typec:84: drivers/usb/typec/class.c:1005
msgid "The USB Type-C Port the partner is connected to"
msgstr ""

#: ../../../driver-api/usb/typec:84: drivers/usb/typec/class.c:1007
msgid "``struct typec_partner_desc *desc``"
msgstr ""

#: ../../../driver-api/usb/typec:84: drivers/usb/typec/class.c:1006
msgid "Description of the partner"
msgstr ""

#: ../../../driver-api/usb/typec:84: drivers/usb/typec/class.c:1007
msgid "Registers a device for USB Type-C Partner described in **desc**."
msgstr ""

#: ../../../driver-api/usb/typec:84: drivers/usb/typec/class.c:1009
msgid "Returns handle to the partner on success or ERR_PTR on failure."
msgstr ""

#: ../../../driver-api/usb/typec:84: drivers/usb/typec/class.c:1075
msgid "Unregister a USB Type-C Partner"
msgstr ""

#: ../../../driver-api/usb/typec:163: drivers/usb/typec/class.c:957
#: ../../../driver-api/usb/typec:84: drivers/usb/typec/class.c:1081
#: ../../../driver-api/usb/typec:96: drivers/usb/typec/class.c:828
msgid "``struct typec_partner *partner``"
msgstr ""

#: ../../../driver-api/usb/typec:84: drivers/usb/typec/class.c:1076
msgid "The partner to be unregistered"
msgstr ""

#: ../../../driver-api/usb/typec:84: drivers/usb/typec/class.c:1077
msgid "Unregister device created with typec_register_partner()."
msgstr ""

#: ../../../driver-api/usb/typec.rst:87
msgid ""
"The class will provide a handle to struct typec_partner if the registration "
"was successful, or NULL."
msgstr ""

#: ../../../driver-api/usb/typec.rst:90
msgid ""
"If the partner is USB Power Delivery capable, and the port driver is able to "
"show the result of Discover Identity command, the partner descriptor "
"structure should include handle to struct usb_pd_identity instance. The "
"class will then create a sysfs directory for the identity under the partner "
"device. The result of Discover Identity command can then be reported with "
"the following API:"
msgstr ""

#: ../../../driver-api/usb/typec:129: drivers/usb/typec/class.c:1339
#: ../../../driver-api/usb/typec:96: drivers/usb/typec/class.c:822
msgid "Report result from Discover Identity command"
msgstr ""

#: ../../../driver-api/usb/typec:96: drivers/usb/typec/class.c:823
msgid "The partner updated identity values"
msgstr ""

#: ../../../driver-api/usb/typec:129: drivers/usb/typec/class.c:1341
#: ../../../driver-api/usb/typec:96: drivers/usb/typec/class.c:824
msgid ""
"This routine is used to report that the result of Discover Identity USB "
"power delivery command has become available."
msgstr ""

#: ../../../driver-api/usb/typec.rst:100
msgid "Registering Cables"
msgstr ""

#: ../../../driver-api/usb/typec.rst:102
msgid ""
"After successful connection of a cable that supports USB Power Delivery "
"Structured VDM \"Discover Identity\", the port driver needs to register the "
"cable and one or two plugs, depending if there is CC Double Prime controller "
"present in the cable or not. So a cable capable of SOP Prime communication, "
"but not SOP Double Prime communication, should only have one plug "
"registered. For more information about SOP communication, please read "
"chapter about it from the latest USB Power Delivery specification."
msgstr ""

#: ../../../driver-api/usb/typec.rst:110
msgid ""
"The plugs are represented as their own devices. The cable is registered "
"first, followed by registration of the cable plugs. The cable will be the "
"parent device for the plugs. Details about the cable need to be described in "
"struct typec_cable_desc and about a plug in struct typec_plug_desc. The "
"class copies the details during registration. The class offers the following "
"API for registering/unregistering cables and their plugs:"
msgstr ""

#: ../../../driver-api/usb/typec:117: drivers/usb/typec/class.c:1201
msgid "Register a USB Type-C Cable Plug"
msgstr ""

#: ../../../driver-api/usb/typec:117: drivers/usb/typec/class.c:1207
#: drivers/usb/typec/class.c:1411 ../../../driver-api/usb/typec:129:
#: drivers/usb/typec/class.c:1345
msgid "``struct typec_cable *cable``"
msgstr ""

#: ../../../driver-api/usb/typec:117: drivers/usb/typec/class.c:1202
msgid "USB Type-C Cable with the plug"
msgstr ""

#: ../../../driver-api/usb/typec:117: drivers/usb/typec/class.c:1204
msgid "``struct typec_plug_desc *desc``"
msgstr ""

#: ../../../driver-api/usb/typec:117: drivers/usb/typec/class.c:1203
msgid "Description of the cable plug"
msgstr ""

#: ../../../driver-api/usb/typec:117: drivers/usb/typec/class.c:1204
msgid ""
"Registers a device for USB Type-C Cable Plug described in **desc**. A USB "
"Type-C Cable Plug represents a plug with electronics in it that can response "
"to USB Power Delivery SOP Prime or SOP Double Prime packages."
msgstr ""

#: ../../../driver-api/usb/typec:117: drivers/usb/typec/class.c:1208
msgid "Returns handle to the cable plug on success or ERR_PTR on failure."
msgstr ""

#: ../../../driver-api/usb/typec:117: drivers/usb/typec/class.c:1244
msgid "Unregister a USB Type-C Cable Plug"
msgstr ""

#: ../../../driver-api/usb/typec:117: drivers/usb/typec/class.c:1250
#: ../../../driver-api/usb/typec:168: drivers/usb/typec/class.c:1187
msgid "``struct typec_plug *plug``"
msgstr ""

#: ../../../driver-api/usb/typec:117: drivers/usb/typec/class.c:1245
msgid "The cable plug to be unregistered"
msgstr ""

#: ../../../driver-api/usb/typec:117: drivers/usb/typec/class.c:1246
msgid "Unregister device created with typec_register_plug()."
msgstr ""

#: ../../../driver-api/usb/typec:117: drivers/usb/typec/class.c:1356
msgid "Register a USB Type-C Cable"
msgstr ""

#: ../../../driver-api/usb/typec:117: drivers/usb/typec/class.c:1357
msgid "The USB Type-C Port the cable is connected to"
msgstr ""

#: ../../../driver-api/usb/typec:117: drivers/usb/typec/class.c:1359
msgid "``struct typec_cable_desc *desc``"
msgstr ""

#: ../../../driver-api/usb/typec:117: drivers/usb/typec/class.c:1358
msgid "Description of the cable"
msgstr ""

#: ../../../driver-api/usb/typec:117: drivers/usb/typec/class.c:1359
msgid ""
"Registers a device for USB Type-C Cable described in **desc**. The cable "
"will be parent for the optional cable plug devises."
msgstr ""

#: ../../../driver-api/usb/typec:117: drivers/usb/typec/class.c:1362
msgid "Returns handle to the cable on success or ERR_PTR on failure."
msgstr ""

#: ../../../driver-api/usb/typec:117: drivers/usb/typec/class.c:1405
msgid "Unregister a USB Type-C Cable"
msgstr ""

#: ../../../driver-api/usb/typec:117: drivers/usb/typec/class.c:1406
msgid "The cable to be unregistered"
msgstr ""

#: ../../../driver-api/usb/typec:117: drivers/usb/typec/class.c:1407
msgid "Unregister device created with typec_register_cable()."
msgstr ""

#: ../../../driver-api/usb/typec.rst:120
msgid ""
"The class will provide a handle to struct typec_cable and struct typec_plug "
"if the registration is successful, or NULL if it isn't."
msgstr ""

#: ../../../driver-api/usb/typec.rst:123
msgid ""
"If the cable is USB Power Delivery capable, and the port driver is able to "
"show the result of Discover Identity command, the cable descriptor structure "
"should include handle to struct usb_pd_identity instance. The class will "
"then create a sysfs directory for the identity under the cable device. The "
"result of Discover Identity command can then be reported with the following "
"API:"
msgstr ""

#: ../../../driver-api/usb/typec:129: drivers/usb/typec/class.c:1340
msgid "The cable updated identity values"
msgstr ""

#: ../../../driver-api/usb/typec.rst:133
msgid "Notifications"
msgstr ""

#: ../../../driver-api/usb/typec.rst:135
msgid ""
"When the partner has executed a role change, or when the default roles "
"change during connection of a partner or cable, the port driver must use the "
"following APIs to report it to the class:"
msgstr ""

#: ../../../driver-api/usb/typec:139: drivers/usb/typec/class.c:2095
msgid "Report data role change"
msgstr ""

#: ../../../driver-api/usb/typec:139: drivers/usb/typec/class.c:2096
#: drivers/usb/typec/class.c:2125
msgid "The USB Type-C Port where the role was changed"
msgstr ""

#: ../../../driver-api/usb/typec:139: drivers/usb/typec/class.c:2098
msgid "``enum typec_data_role role``"
msgstr ""

#: ../../../driver-api/usb/typec:139: drivers/usb/typec/class.c:2097
#: drivers/usb/typec/class.c:2126
msgid "The new data role"
msgstr ""

#: ../../../driver-api/usb/typec:139: drivers/usb/typec/class.c:2098
msgid "This routine is used by the port drivers to report data role changes."
msgstr ""

#: ../../../driver-api/usb/typec:139: drivers/usb/typec/class.c:2124
msgid "Report power role change"
msgstr ""

#: ../../../driver-api/usb/typec:139: drivers/usb/typec/class.c:2127
#: drivers/usb/typec/class.c:2145
msgid "``enum typec_role role``"
msgstr ""

#: ../../../driver-api/usb/typec:139: drivers/usb/typec/class.c:2127
msgid "This routine is used by the port drivers to report power role changes."
msgstr ""

#: ../../../driver-api/usb/typec:139: drivers/usb/typec/class.c:2142
msgid "Report VCONN source change"
msgstr ""

#: ../../../driver-api/usb/typec:139: drivers/usb/typec/class.c:2143
msgid "The USB Type-C Port which VCONN role changed"
msgstr ""

#: ../../../driver-api/usb/typec:139: drivers/usb/typec/class.c:2144
msgid "Source when **port** is sourcing VCONN, or Sink when it's not"
msgstr ""

#: ../../../driver-api/usb/typec:139: drivers/usb/typec/class.c:2145
msgid ""
"This routine is used by the port drivers to report if the VCONN source is "
"changes."
msgstr ""

#: ../../../driver-api/usb/typec:139: drivers/usb/typec/class.c:2161
msgid "Report changed power operation mode"
msgstr ""

#: ../../../driver-api/usb/typec:139: drivers/usb/typec/class.c:2162
msgid "The USB Type-C Port where the mode was changed"
msgstr ""

#: ../../../driver-api/usb/typec:139: drivers/usb/typec/class.c:2164
msgid "``enum typec_pwr_opmode opmode``"
msgstr ""

#: ../../../driver-api/usb/typec:139: drivers/usb/typec/class.c:2163
msgid "New power operation mode"
msgstr ""

#: ../../../driver-api/usb/typec:139: drivers/usb/typec/class.c:2164
msgid ""
"This routine is used by the port drivers to report changed power operation "
"mode in **port**. The modes are USB (default), 1.5A, 3.0A as defined in USB "
"Type-C specification, and \"USB Power Delivery\" when the power levels are "
"negotiated with methods defined in USB Power Delivery specification."
msgstr ""

#: ../../../driver-api/usb/typec.rst:143
msgid "Alternate Modes"
msgstr ""

#: ../../../driver-api/usb/typec.rst:145
msgid ""
"USB Type-C ports, partners and cable plugs may support Alternate Modes. Each "
"Alternate Mode will have identifier called SVID, which is either a Standard "
"ID given by USB-IF or vendor ID, and each supported SVID can have 1 - 6 "
"modes. The class provides struct typec_mode_desc for describing individual "
"mode of a SVID, and struct typec_altmode_desc which is a container for all "
"the supported modes."
msgstr ""

#: ../../../driver-api/usb/typec.rst:151
msgid ""
"Ports that support Alternate Modes need to register each SVID they support "
"with the following API:"
msgstr ""

#: ../../../driver-api/usb/typec:154: drivers/usb/typec/class.c:2456
msgid "Register USB Type-C Port Alternate Mode"
msgstr ""

#: ../../../driver-api/usb/typec:154: drivers/usb/typec/class.c:2457
msgid "USB Type-C Port that supports the alternate mode"
msgstr ""

#: ../../../driver-api/usb/typec:154: drivers/usb/typec/class.c:2459
#: ../../../driver-api/usb/typec:163: drivers/usb/typec/class.c:954
#: ../../../driver-api/usb/typec:168: drivers/usb/typec/class.c:1184
msgid "``const struct typec_altmode_desc *desc``"
msgstr ""

#: ../../../driver-api/usb/typec:154: drivers/usb/typec/class.c:2458
#: ../../../driver-api/usb/typec:163: drivers/usb/typec/class.c:953
#: ../../../driver-api/usb/typec:168: drivers/usb/typec/class.c:1183
msgid "Description of the alternate mode"
msgstr ""

#: ../../../driver-api/usb/typec:154: drivers/usb/typec/class.c:2459
msgid ""
"This routine is used to register an alternate mode that **port** is capable "
"of supporting."
msgstr ""

#: ../../../driver-api/usb/typec:154: drivers/usb/typec/class.c:2462
#: ../../../driver-api/usb/typec:163: drivers/usb/typec/class.c:959
#: ../../../driver-api/usb/typec:168: drivers/usb/typec/class.c:1189
msgid "Returns handle to the alternate mode on success or ERR_PTR on failure."
msgstr ""

#: ../../../driver-api/usb/typec.rst:157
msgid ""
"If a partner or cable plug provides a list of SVIDs as response to USB Power "
"Delivery Structured VDM Discover SVIDs message, each SVID needs to be "
"registered."
msgstr ""

#: ../../../driver-api/usb/typec.rst:161
msgid "API for the partners:"
msgstr ""

#: ../../../driver-api/usb/typec:163: drivers/usb/typec/class.c:951
msgid "Register USB Type-C Partner Alternate Mode"
msgstr ""

#: ../../../driver-api/usb/typec:163: drivers/usb/typec/class.c:952
msgid "USB Type-C Partner that supports the alternate mode"
msgstr ""

#: ../../../driver-api/usb/typec:163: drivers/usb/typec/class.c:954
msgid ""
"This routine is used to register each alternate mode individually that "
"**partner** has listed in response to Discover SVIDs command. The modes for "
"a SVID listed in response to Discover Modes command need to be listed in an "
"array in **desc**."
msgstr ""

#: ../../../driver-api/usb/typec.rst:166
msgid "API for the Cable Plugs:"
msgstr ""

#: ../../../driver-api/usb/typec:168: drivers/usb/typec/class.c:1181
msgid "Register USB Type-C Cable Plug Alternate Mode"
msgstr ""

#: ../../../driver-api/usb/typec:168: drivers/usb/typec/class.c:1182
msgid "USB Type-C Cable Plug that supports the alternate mode"
msgstr ""

#: ../../../driver-api/usb/typec:168: drivers/usb/typec/class.c:1184
msgid ""
"This routine is used to register each alternate mode individually that "
"**plug** has listed in response to Discover SVIDs command. The modes for a "
"SVID that the plug lists in response to Discover Modes command need to be "
"listed in an array in **desc**."
msgstr ""

#: ../../../driver-api/usb/typec.rst:171
msgid ""
"So ports, partners and cable plugs will register the alternate modes with "
"their own functions, but the registration will always return a handle to "
"struct typec_altmode on success, or NULL. The unregistration will happen "
"with the same function:"
msgstr ""

#: ../../../driver-api/usb/typec:176: drivers/usb/typec/class.c:607
msgid "Unregister Alternate Mode"
msgstr ""

#: ../../../driver-api/usb/typec:176: drivers/usb/typec/class.c:613
#: ../../../driver-api/usb/typec:182: drivers/usb/typec/class.c:299
msgid "``struct typec_altmode *adev``"
msgstr ""

#: ../../../driver-api/usb/typec:176: drivers/usb/typec/class.c:608
msgid "The alternate mode to be unregistered"
msgstr ""

#: ../../../driver-api/usb/typec:176: drivers/usb/typec/class.c:609
msgid ""
"Unregister device created with typec_partner_register_altmode(), "
"typec_plug_register_altmode() or typec_port_register_altmode()."
msgstr ""

#: ../../../driver-api/usb/typec.rst:179
msgid ""
"If a partner or cable plug enters or exits a mode, the port driver needs to "
"notify the class with the following API:"
msgstr ""

#: ../../../driver-api/usb/typec:182: drivers/usb/typec/class.c:293
msgid "Report Enter/Exit mode"
msgstr ""

#: ../../../driver-api/usb/typec:182: drivers/usb/typec/class.c:294
msgid "Handle to the alternate mode"
msgstr ""

#: ../../../driver-api/usb/typec:182: drivers/usb/typec/class.c:296
msgid "``bool active``"
msgstr ""

#: ../../../driver-api/usb/typec:182: drivers/usb/typec/class.c:295
msgid "True when the mode has been entered"
msgstr ""

#: ../../../driver-api/usb/typec:182: drivers/usb/typec/class.c:296
msgid ""
"If a partner or cable plug executes Enter/Exit Mode command successfully, "
"the drivers use this routine to report the updated state of the mode."
msgstr ""

#: ../../../driver-api/usb/typec.rst:186
msgid "Multiplexer/DeMultiplexer Switches"
msgstr ""

#: ../../../driver-api/usb/typec.rst:188
msgid ""
"USB Type-C connectors may have one or more mux/demux switches behind them. "
"Since the plugs can be inserted right-side-up or upside-down, a switch is "
"needed to route the correct data pairs from the connector to the USB "
"controllers. If Alternate or Accessory Modes are supported, another switch "
"is needed that can route the pins on the connector to some other component "
"besides USB. USB Type-C Connector Class supplies an API for registering "
"those switches."
msgstr ""

#: ../../../driver-api/usb/typec:195: drivers/usb/typec/mux.c:155
msgid "Register USB Type-C orientation switch"
msgstr ""

#: ../../../driver-api/usb/typec:195: drivers/usb/typec/mux.c:158
msgid "``const struct typec_switch_desc *desc``"
msgstr ""

#: ../../../driver-api/usb/typec:195: drivers/usb/typec/mux.c:157
msgid "Orientation switch description"
msgstr ""

#: ../../../driver-api/usb/typec:195: drivers/usb/typec/mux.c:158
msgid ""
"This function registers a switch that can be used for routing the correct "
"data pairs depending on the cable plug orientation from the USB Type-C "
"connector to the USB controllers. USB Type-C plugs can be inserted right-"
"side-up or upside-down."
msgstr ""

#: ../../../driver-api/usb/typec:195: drivers/usb/typec/mux.c:226
msgid "Unregister USB Type-C orientation switch"
msgstr ""

#: ../../../driver-api/usb/typec:195: drivers/usb/typec/mux.c:232
msgid "``struct typec_switch_dev *sw_dev``"
msgstr ""

#: ../../../driver-api/usb/typec:195: drivers/usb/typec/mux.c:227
msgid "USB Type-C orientation switch"
msgstr ""

#: ../../../driver-api/usb/typec:195: drivers/usb/typec/mux.c:228
msgid "Unregister switch that was registered with typec_switch_register()."
msgstr ""

#: ../../../driver-api/usb/typec:195: drivers/usb/typec/mux.c:400
msgid "Register Multiplexer routing USB Type-C pins"
msgstr ""

#: ../../../driver-api/usb/typec:195: drivers/usb/typec/mux.c:403
msgid "``const struct typec_mux_desc *desc``"
msgstr ""

#: ../../../driver-api/usb/typec:195: drivers/usb/typec/mux.c:402
msgid "Multiplexer description"
msgstr ""

#: ../../../driver-api/usb/typec:195: drivers/usb/typec/mux.c:403
msgid ""
"USB Type-C connectors can be used for alternate modes of operation besides "
"USB when Accessory/Alternate Modes are supported. With some of those modes, "
"the pins on the connector need to be reconfigured. This function registers "
"multiplexer switches routing the pins on the connector."
msgstr ""

#: ../../../driver-api/usb/typec:195: drivers/usb/typec/mux.c:448
msgid "Unregister Multiplexer Switch"
msgstr ""

#: ../../../driver-api/usb/typec:195: drivers/usb/typec/mux.c:454
msgid "``struct typec_mux_dev *mux_dev``"
msgstr ""

#: ../../../driver-api/usb/typec:195: drivers/usb/typec/mux.c:449
msgid "USB Type-C Connector Multiplexer/DeMultiplexer"
msgstr ""

#: ../../../driver-api/usb/typec:195: drivers/usb/typec/mux.c:450
msgid "Unregister mux that was registered with typec_mux_register()."
msgstr ""

#: ../../../driver-api/usb/typec.rst:198
msgid ""
"In most cases the same physical mux will handle both the orientation and "
"mode. However, as the port drivers will be responsible for the orientation, "
"and the alternate mode drivers for the mode, the two are always separated "
"into their own logical components: \"mux\" for the mode and \"switch\" for "
"the orientation."
msgstr ""

#: ../../../driver-api/usb/typec.rst:203
msgid ""
"When a port is registered, USB Type-C Connector Class requests both the mux "
"and the switch for the port. The drivers can then use the following API for "
"controlling them:"
msgstr ""

#: ../../../driver-api/usb/typec:207: drivers/usb/typec/class.c:2277
msgid "Set USB Type-C cable plug orientation"
msgstr ""

#: ../../../driver-api/usb/typec:207: drivers/usb/typec/class.c:2278
msgid "USB Type-C Port"
msgstr ""

#: ../../../driver-api/usb/typec:207: drivers/usb/typec/class.c:2280
msgid "``enum typec_orientation orientation``"
msgstr ""

#: ../../../driver-api/usb/typec:207: drivers/usb/typec/class.c:2279
msgid "USB Type-C cable plug orientation"
msgstr ""

#: ../../../driver-api/usb/typec:207: drivers/usb/typec/class.c:2280
msgid "Set cable plug orientation for **port**."
msgstr ""

#: ../../../driver-api/usb/typec:207: drivers/usb/typec/class.c:2313
msgid "Set mode of operation for USB Type-C connector"
msgstr ""

#: ../../../driver-api/usb/typec:207: drivers/usb/typec/class.c:2314
msgid "USB Type-C connector"
msgstr ""

#: ../../../driver-api/usb/typec:207: drivers/usb/typec/class.c:2316
msgid "``int mode``"
msgstr ""

#: ../../../driver-api/usb/typec:207: drivers/usb/typec/class.c:2315
msgid "Accessory Mode, USB Operation or Safe State"
msgstr ""

#: ../../../driver-api/usb/typec:207: drivers/usb/typec/class.c:2316
msgid ""
"Configure **port** for Accessory Mode **mode**. This function will configure "
"the muxes needed for **mode**."
msgstr ""

#: ../../../driver-api/usb/typec.rst:210
msgid ""
"If the connector is dual-role capable, there may also be a switch for the "
"data role. USB Type-C Connector Class does not supply separate API for them. "
"The port drivers can use USB Role Class API with those."
msgstr ""

#: ../../../driver-api/usb/typec.rst:214
msgid ""
"Illustration of the muxes behind a connector that supports an alternate "
"mode::"
msgstr ""
