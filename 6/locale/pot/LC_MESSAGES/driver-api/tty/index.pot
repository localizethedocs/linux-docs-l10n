# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../driver-api/tty/index.rst:5
msgid "TTY"
msgstr ""

#: ../../../driver-api/tty/index.rst:7
msgid ""
"Teletypewriter (TTY) layer takes care of all those serial devices. Including "
"the virtual ones like pseudoterminal (PTY)."
msgstr ""

#: ../../../driver-api/tty/index.rst:11
msgid "TTY structures"
msgstr ""

#: ../../../driver-api/tty/index.rst:13
msgid ""
"There are several major TTY structures. Every TTY device in a system has a "
"corresponding struct tty_port. These devices are maintained by a TTY driver "
"which is struct tty_driver. This structure describes the driver but also "
"contains a reference to operations which could be performed on the TTYs. It "
"is struct tty_operations. Then, upon open, a struct tty_struct is allocated "
"and lives until the final close. During this time, several callbacks from "
"struct tty_operations are invoked by the TTY layer."
msgstr ""

#: ../../../driver-api/tty/index.rst:21
msgid ""
"Every character received by the kernel (both from devices and users) is "
"passed through a preselected :doc:`tty_ldisc` (in short ldisc; in C, struct "
"tty_ldisc_ops). Its task is to transform characters as defined by a "
"particular ldisc or by user too. The default one is n_tty, implementing "
"echoes, signal handling, jobs control, special characters processing, and "
"more. The transformed characters are passed further to user/device, "
"depending on the source."
msgstr ""

#: ../../../driver-api/tty/index.rst:29
msgid ""
"In-detail description of the named TTY structures is in separate documents:"
msgstr ""

#: ../../../driver-api/tty/index.rst:44
msgid "Writing TTY Driver"
msgstr ""

#: ../../../driver-api/tty/index.rst:46
msgid ""
"Before one starts writing a TTY driver, they must consider :doc:`Serial <../"
"serial/driver>` and :doc:`USB Serial <../../usb/usb-serial>` layers first. "
"Drivers for serial devices can often use one of these specific layers to "
"implement a serial driver. Only special devices should be handled directly "
"by the TTY Layer. If you are about to write such a driver, read on."
msgstr ""

#: ../../../driver-api/tty/index.rst:52
msgid "A *typical* sequence a TTY driver performs is as follows:"
msgstr ""

#: ../../../driver-api/tty/index.rst:54
msgid "Allocate and register a TTY driver (module init)"
msgstr ""

#: ../../../driver-api/tty/index.rst:55
msgid "Create and register TTY devices as they are probed (probe function)"
msgstr ""

#: ../../../driver-api/tty/index.rst:56
msgid ""
"Handle TTY operations and events like interrupts (TTY core invokes the "
"former, the device the latter)"
msgstr ""

#: ../../../driver-api/tty/index.rst:58
msgid "Remove devices as they are going away (remove function)"
msgstr ""

#: ../../../driver-api/tty/index.rst:59
msgid "Unregister and free the TTY driver (module exit)"
msgstr ""

#: ../../../driver-api/tty/index.rst:61
msgid ""
"Steps regarding driver, i.e. 1., 3., and 5. are described in detail in :doc:"
"`tty_driver`. For the other two (devices handling), look into :doc:"
"`tty_port`."
msgstr ""

#: ../../../driver-api/tty/index.rst:66
msgid "Other Documentation"
msgstr ""

#: ../../../driver-api/tty/index.rst:68
msgid "Miscellaneous documentation can be further found in these documents:"
msgstr ""
