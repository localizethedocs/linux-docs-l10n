# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../driver-api/tty/tty_driver.rst:5
msgid "TTY Driver and TTY Operations"
msgstr ""

#: ../../../driver-api/tty/tty_driver.rst:10
msgid "Allocation"
msgstr ""

#: ../../../driver-api/tty/tty_driver.rst:12
msgid ""
"The first thing a driver needs to do is to allocate a struct tty_driver. "
"This is done by tty_alloc_driver() (or __tty_alloc_driver()). Next, the "
"newly allocated structure is filled with information. See `TTY Driver "
"Reference`_ at the end of this document on what actually shall be filled in."
msgstr ""

#: ../../../driver-api/tty/tty_driver.rst:17
msgid ""
"The allocation routines expect a number of devices the driver can handle at "
"most and flags. Flags are those starting ``TTY_DRIVER_`` listed and "
"described in `TTY Driver Flags`_ below."
msgstr ""

#: ../../../driver-api/tty/tty_driver.rst:21
msgid ""
"When the driver is about to be freed, tty_driver_kref_put() is called on "
"that. It will decrements the reference count and if it reaches zero, the "
"driver is freed."
msgstr ""

#: ../../../driver-api/tty/tty_driver.rst:25
msgid ""
"For reference, both allocation and deallocation functions are explained here "
"in detail:"
msgstr ""

#: ../../../driver-api/tty/tty_driver:28: include/linux/tty_driver.h:570
msgid "``tty_alloc_driver (lines, flags)``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:28: include/linux/tty_driver.h:568
#: ../../../driver-api/tty/tty_driver:30: drivers/tty/tty_io.c:3316
msgid "allocate tty driver"
msgstr ""

#: ../../../driver-api/tty/tty_driver:106: drivers/tty/tty_port.c:111
#: drivers/tty/tty_port.c:131 drivers/tty/tty_port.c:150
#: ../../../driver-api/tty/tty_driver:28: include/linux/tty_driver.h:572
#: ../../../driver-api/tty/tty_driver:30: drivers/tty/tty_io.c:3320
#: drivers/tty/tty_io.c:3415 ../../../driver-api/tty/tty_driver:54:
#: drivers/tty/tty_io.c:3427 drivers/tty/tty_io.c:3490
#: ../../../driver-api/tty/tty_driver:82: drivers/tty/tty_io.c:3180
#: drivers/tty/tty_io.c:3211 drivers/tty/tty_io.c:3300
msgid "**Parameters**"
msgstr ""

#: ../../../driver-api/tty/tty_driver:28: include/linux/tty_driver.h:574
msgid "``lines``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:28: include/linux/tty_driver.h:569
#: ../../../driver-api/tty/tty_driver:30: drivers/tty/tty_io.c:3317
msgid "count of lines this driver can handle at most"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:506
#: ../../../driver-api/tty/tty_driver:28: include/linux/tty_driver.h:571
msgid "``flags``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:28: include/linux/tty_driver.h:570
#: ../../../driver-api/tty/tty_driver:30: drivers/tty/tty_io.c:3319
msgid "some of enum tty_driver_flag, will be set in driver->flags"
msgstr ""

#: ../../../driver-api/tty/tty_driver:28: include/linux/tty_driver.h:572
#: ../../../driver-api/tty/tty_driver:30: drivers/tty/tty_io.c:3323
#: ../../../driver-api/tty/tty_driver:82: drivers/tty/tty_io.c:3189
#: drivers/tty/tty_io.c:3221
msgid "**Return**"
msgstr ""

#: ../../../driver-api/tty/tty_driver:28: include/linux/tty_driver.h:572
#: ../../../driver-api/tty/tty_driver:30: drivers/tty/tty_io.c:3324
msgid "struct tty_driver or a PTR-encoded error (use IS_ERR() and friends)."
msgstr ""

#: ../../../driver-api/tty/tty_driver:30: drivers/tty/tty_io.c:3322
msgid "``unsigned int lines``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:30: drivers/tty/tty_io.c:3319
msgid "``struct module *owner``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:30: drivers/tty/tty_io.c:3318
msgid "module which is responsible for this driver"
msgstr ""

#: ../../../driver-api/tty/tty_driver:30: drivers/tty/tty_io.c:3320
msgid "``unsigned long flags``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:106: drivers/tty/tty_port.c:112
#: drivers/tty/tty_port.c:133 drivers/tty/tty_port.c:154
#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:520
#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:434
#: ../../../driver-api/tty/tty_driver:30: drivers/tty/tty_io.c:3321
#: drivers/tty/tty_io.c:3414 ../../../driver-api/tty/tty_driver:39:
#: include/linux/tty_driver.h:67 ../../../driver-api/tty/tty_driver:54:
#: drivers/tty/tty_io.c:3426 drivers/tty/tty_io.c:3489
#: ../../../driver-api/tty/tty_driver:82: drivers/tty/tty_io.c:3183
#: drivers/tty/tty_io.c:3216 drivers/tty/tty_io.c:3300
msgid "**Description**"
msgstr ""

#: ../../../driver-api/tty/tty_driver:30: drivers/tty/tty_io.c:3320
msgid ""
"This should not be called directly, tty_alloc_driver() should be used "
"instead."
msgstr ""

#: ../../../driver-api/tty/tty_driver:30: drivers/tty/tty_io.c:3411
msgid "drop a reference to a tty driver"
msgstr ""

#: ../../../driver-api/tty/tty_driver:106: drivers/tty/tty_port.c:110
#: drivers/tty/tty_port.c:130 drivers/tty/tty_port.c:149
#: ../../../driver-api/tty/tty_driver:30: drivers/tty/tty_io.c:3417
#: ../../../driver-api/tty/tty_driver:54: drivers/tty/tty_io.c:3429
#: drivers/tty/tty_io.c:3492 ../../../driver-api/tty/tty_driver:82:
#: drivers/tty/tty_io.c:3182 drivers/tty/tty_io.c:3213
#: drivers/tty/tty_io.c:3302
msgid "``struct tty_driver *driver``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:30: drivers/tty/tty_io.c:3412
msgid "driver of which to drop the reference"
msgstr ""

#: ../../../driver-api/tty/tty_driver:30: drivers/tty/tty_io.c:3413
msgid "The final put will destroy and free up the driver."
msgstr ""

#: ../../../driver-api/tty/tty_driver.rst:34
#: ../../../driver-api/tty/tty_driver:39: include/linux/tty_driver.h:20
msgid "TTY Driver Flags"
msgstr ""

#: ../../../driver-api/tty/tty_driver.rst:36
msgid ""
"Here comes the documentation of flags accepted by tty_alloc_driver() (or "
"__tty_alloc_driver()):"
msgstr ""

#: ../../../driver-api/tty/tty_driver:39: include/linux/tty_driver.h:24
msgid "**Constants**"
msgstr ""

#: ../../../driver-api/tty/tty_driver:39: include/linux/tty_driver.h:26
msgid "``TTY_DRIVER_INSTALLED``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:39: include/linux/tty_driver.h:27
msgid ""
"Whether this driver was succesfully installed. This is a tty internal flag. "
"Do not touch."
msgstr ""

#: ../../../driver-api/tty/tty_driver:39: include/linux/tty_driver.h:30
msgid "``TTY_DRIVER_RESET_TERMIOS``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:39: include/linux/tty_driver.h:31
msgid ""
"Requests the tty layer to reset the termios setting when the last process "
"has closed the device. Used for PTYs, in particular."
msgstr ""

#: ../../../driver-api/tty/tty_driver:39: include/linux/tty_driver.h:34
msgid "``TTY_DRIVER_REAL_RAW``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:39: include/linux/tty_driver.h:35
msgid ""
"Indicates that the driver will guarantee not to set any special character "
"handling flags if this is set for the tty:"
msgstr ""

#: ../../../driver-api/tty/tty_driver:39: include/linux/tty_driver.h:38
msgid "``TTY_DRIVER_DYNAMIC_DEV``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:39: include/linux/tty_driver.h:39
msgid ""
"The individual tty devices need to be registered with a call to "
"tty_register_device() when the device is found in the system and "
"unregistered with a call to tty_unregister_device() so the devices will be "
"show up properly in sysfs.  If not set, all :c:type:`tty_driver.num "
"<tty_driver>` entries will be created by the tty core in sysfs when "
"tty_register_driver() is called.  This is to be used by drivers that have "
"tty devices that can appear and disappear while the main tty driver is "
"registered with the tty core."
msgstr ""

#: ../../../driver-api/tty/tty_driver:39: include/linux/tty_driver.h:48
msgid "``TTY_DRIVER_DEVPTS_MEM``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:39: include/linux/tty_driver.h:49
msgid ""
"Don't use the standard arrays (:c:type:`tty_driver.ttys <tty_driver>` and :c:"
"type:`tty_driver.termios <tty_driver>`), instead use dynamic memory keyed "
"through the devpts filesystem. This is only applicable to the PTY driver."
msgstr ""

#: ../../../driver-api/tty/tty_driver:39: include/linux/tty_driver.h:53
msgid "``TTY_DRIVER_HARDWARE_BREAK``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:39: include/linux/tty_driver.h:54
msgid ""
"Hardware handles break signals. Pass the requested timeout to the :c:type:"
"`tty_operations.break_ctl <tty_operations>` instead of using a simple on/off "
"interface."
msgstr ""

#: ../../../driver-api/tty/tty_driver:39: include/linux/tty_driver.h:57
msgid "``TTY_DRIVER_DYNAMIC_ALLOC``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:39: include/linux/tty_driver.h:58
msgid ""
"Do not allocate structures which are needed per line for this driver (:c:"
"type:`tty_driver.ports <tty_driver>`) as it would waste memory. The driver "
"will take care. This is only applicable to the PTY driver."
msgstr ""

#: ../../../driver-api/tty/tty_driver:39: include/linux/tty_driver.h:62
msgid "``TTY_DRIVER_UNNUMBERED_NODE``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:39: include/linux/tty_driver.h:63
msgid ""
"Do not create numbered ``/dev`` nodes. For example, create ``/dev/"
"ttyprintk`` and not ``/dev/ttyprintk0``. Applicable only when a driver for a "
"single tty device is being allocated."
msgstr ""

#: ../../../driver-api/tty/tty_driver:39: include/linux/tty_driver.h:21
msgid "These are flags passed to tty_alloc_driver()."
msgstr ""

#: ../../../driver-api/tty/tty_driver:39: include/linux/tty_driver.h:24
msgid "``(IGNBRK || (!BRKINT && !PARMRK)) && (IGNPAR || !INPCK)``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:39: include/linux/tty_driver.h:26
msgid ""
"That is, if there is no reason for the driver to send notifications of "
"parity and break characters up to the line driver, it won't do so.  This "
"allows the line driver to optimize for this case if this flag is set.  (Note "
"that there is also a promise, if the above case is true, not to signal "
"overruns, either.)"
msgstr ""

#: ../../../driver-api/tty/tty_driver.rst:45
msgid "Registration"
msgstr ""

#: ../../../driver-api/tty/tty_driver.rst:47
msgid ""
"When a struct tty_driver is allocated and filled in, it can be registered "
"using tty_register_driver(). It is recommended to pass "
"``TTY_DRIVER_DYNAMIC_DEV`` in flags of tty_alloc_driver(). If it is not "
"passed, *all* devices are also registered during tty_register_driver() and "
"the following paragraph of registering devices can be skipped for such "
"drivers. However, the struct tty_port part in `Registering Devices`_ is "
"still relevant there."
msgstr ""

#: ../../../driver-api/tty/tty_driver:54: drivers/tty/tty_io.c:3423
msgid "register a tty driver"
msgstr ""

#: ../../../driver-api/tty/tty_driver:54: drivers/tty/tty_io.c:3424
msgid "driver to register"
msgstr ""

#: ../../../driver-api/tty/tty_driver:54: drivers/tty/tty_io.c:3425
msgid "Called by a tty driver to register itself."
msgstr ""

#: ../../../driver-api/tty/tty_driver:54: drivers/tty/tty_io.c:3486
msgid "unregister a tty driver"
msgstr ""

#: ../../../driver-api/tty/tty_driver:54: drivers/tty/tty_io.c:3487
msgid "driver to unregister"
msgstr ""

#: ../../../driver-api/tty/tty_driver:54: drivers/tty/tty_io.c:3488
msgid "Called by a tty driver to unregister itself."
msgstr ""

#: ../../../driver-api/tty/tty_driver.rst:58
msgid "Registering Devices"
msgstr ""

#: ../../../driver-api/tty/tty_driver.rst:60
msgid ""
"Every TTY device shall be backed by a struct tty_port. Usually, TTY drivers "
"embed tty_port into device's private structures. Further details about "
"handling tty_port can be found in :doc:`tty_port`. The driver is also "
"recommended to use tty_port's reference counting by tty_port_get() and "
"tty_port_put(). The final put is supposed to free the tty_port including the "
"device's private struct."
msgstr ""

#: ../../../driver-api/tty/tty_driver.rst:66
msgid ""
"Unless ``TTY_DRIVER_DYNAMIC_DEV`` was passed as flags to tty_alloc_driver(), "
"TTY driver is supposed to register every device discovered in the system "
"(the latter is preferred). This is performed by tty_register_device(). Or by "
"tty_register_device_attr() if the driver wants to expose some information "
"through struct attribute_group. Both of them register ``index``'th device "
"and upon return, the device can be opened. There are also preferred tty_port "
"variants described in `Linking Devices to Ports`_ later. It is up to driver "
"to manage free indices and choosing the right one. The TTY layer only "
"refuses to register more devices than passed to tty_alloc_driver()."
msgstr ""

#: ../../../driver-api/tty/tty_driver.rst:76
msgid ""
"When the device is opened, the TTY layer allocates struct tty_struct and "
"starts calling operations from :c:member:`tty_driver.ops`, see `TTY "
"Operations Reference`_."
msgstr ""

#: ../../../driver-api/tty/tty_driver.rst:80
msgid "The registration routines are documented as follows:"
msgstr ""

#: ../../../driver-api/tty/tty_driver:82: drivers/tty/tty_io.c:3176
#: drivers/tty/tty_io.c:3207
msgid "register a tty device"
msgstr ""

#: ../../../driver-api/tty/tty_driver:82: drivers/tty/tty_io.c:3177
#: drivers/tty/tty_io.c:3208 drivers/tty/tty_io.c:3297
msgid "the tty driver that describes the tty device"
msgstr ""

#: ../../../driver-api/tty/tty_driver:106: drivers/tty/tty_port.c:111
#: drivers/tty/tty_port.c:131 drivers/tty/tty_port.c:150
#: ../../../driver-api/tty/tty_driver:82: drivers/tty/tty_io.c:3179
#: drivers/tty/tty_io.c:3210 drivers/tty/tty_io.c:3299
msgid "``unsigned index``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:82: drivers/tty/tty_io.c:3178
#: drivers/tty/tty_io.c:3209 drivers/tty/tty_io.c:3298
msgid "the index in the tty driver for this tty device"
msgstr ""

#: ../../../driver-api/tty/tty_driver:106: drivers/tty/tty_port.c:132
#: drivers/tty/tty_port.c:151 ../../../driver-api/tty/tty_driver:82:
#: drivers/tty/tty_io.c:3180 drivers/tty/tty_io.c:3211
msgid "``struct device *device``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:82: drivers/tty/tty_io.c:3179
msgid ""
"a struct device that is associated with this tty device. This field is "
"optional, if there is no known struct device for this tty device it can be "
"set to NULL safely."
msgstr ""

#: ../../../driver-api/tty/tty_driver:82: drivers/tty/tty_io.c:3182
msgid ""
"This call is required to be made to register an individual tty device if the "
"tty driver's flags have the ``TTY_DRIVER_DYNAMIC_DEV`` bit set.  If that bit "
"is not set, this function should not be called by a tty driver."
msgstr ""

#: ../../../driver-api/tty/tty_driver:82: drivers/tty/tty_io.c:3187
#: drivers/tty/tty_io.c:3219 drivers/tty/tty_io.c:3302
msgid "Locking: ??"
msgstr ""

#: ../../../driver-api/tty/tty_driver:82: drivers/tty/tty_io.c:3190
#: drivers/tty/tty_io.c:3222
msgid ""
"A pointer to the struct device for this tty device (or ERR_PTR(-EFOO) on "
"error)."
msgstr ""

#: ../../../driver-api/tty/tty_driver:82: drivers/tty/tty_io.c:3210
msgid ""
"a struct device that is associated with this tty device. This field is "
"optional, if there is no known struct device for this tty device it can be "
"set to ``NULL`` safely."
msgstr ""

#: ../../../driver-api/tty/tty_driver:106: drivers/tty/tty_port.c:152
#: ../../../driver-api/tty/tty_driver:82: drivers/tty/tty_io.c:3214
msgid "``void *drvdata``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:106: drivers/tty/tty_port.c:151
#: ../../../driver-api/tty/tty_driver:82: drivers/tty/tty_io.c:3213
msgid "Driver data to be set to device."
msgstr ""

#: ../../../driver-api/tty/tty_driver:106: drivers/tty/tty_port.c:153
#: ../../../driver-api/tty/tty_driver:82: drivers/tty/tty_io.c:3215
msgid "``const struct attribute_group **attr_grp``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:106: drivers/tty/tty_port.c:152
#: ../../../driver-api/tty/tty_driver:82: drivers/tty/tty_io.c:3214
msgid "Attribute group to be set on device."
msgstr ""

#: ../../../driver-api/tty/tty_driver:82: drivers/tty/tty_io.c:3215
msgid ""
"This call is required to be made to register an individual tty device if the "
"tty driver's flags have the ``TTY_DRIVER_DYNAMIC_DEV`` bit set. If that bit "
"is not set, this function should not be called by a tty driver."
msgstr ""

#: ../../../driver-api/tty/tty_driver:82: drivers/tty/tty_io.c:3296
msgid "unregister a tty device"
msgstr ""

#: ../../../driver-api/tty/tty_driver:82: drivers/tty/tty_io.c:3299
msgid ""
"If a tty device is registered with a call to tty_register_device() then this "
"function must be called when the tty device is gone."
msgstr ""

#: ../../../driver-api/tty/tty_driver.rst:89
msgid "Linking Devices to Ports"
msgstr ""

#: ../../../driver-api/tty/tty_driver.rst:90
msgid ""
"As stated earlier, every TTY device shall have a struct tty_port assigned to "
"it. It must be known to the TTY layer at :c:member:`tty_driver.ops."
"install()` at latest.  There are few helpers to *link* the two. Ideally, the "
"driver uses tty_port_register_device() or tty_port_register_device_attr() "
"instead of tty_register_device() and tty_register_device_attr() at the "
"registration time. This way, the driver needs not care about linking later "
"on."
msgstr ""

#: ../../../driver-api/tty/tty_driver.rst:97
msgid ""
"If that is not possible, the driver still can link the tty_port to a "
"specific index *before* the actual registration by tty_port_link_device(). "
"If it still does not fit, tty_port_install() can be used from the :c:member:"
"`tty_driver.ops.install` hook as a last resort. The last one is dedicated "
"mostly for in-memory devices like PTY where tty_ports are allocated on "
"demand."
msgstr ""

#: ../../../driver-api/tty/tty_driver.rst:104
msgid "The linking routines are documented here:"
msgstr ""

#: ../../../driver-api/tty/tty_driver:106: drivers/tty/tty_port.c:107
msgid "link tty and tty_port"
msgstr ""

#: ../../../driver-api/tty/tty_driver:106: drivers/tty/tty_port.c:113
#: drivers/tty/tty_port.c:133 drivers/tty/tty_port.c:152
msgid "``struct tty_port *port``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:106: drivers/tty/tty_port.c:108
#: drivers/tty/tty_port.c:128 drivers/tty/tty_port.c:147
msgid "tty_port of the device"
msgstr ""

#: ../../../driver-api/tty/tty_driver:106: drivers/tty/tty_port.c:109
#: drivers/tty/tty_port.c:129 drivers/tty/tty_port.c:148
msgid "tty_driver for this device"
msgstr ""

#: ../../../driver-api/tty/tty_driver:106: drivers/tty/tty_port.c:110
#: drivers/tty/tty_port.c:130 drivers/tty/tty_port.c:149
msgid "index of the tty"
msgstr ""

#: ../../../driver-api/tty/tty_driver:106: drivers/tty/tty_port.c:111
msgid ""
"Provide the tty layer with a link from a tty (specified by **index**) to a "
"tty_port (**port**). Use this only if neither tty_port_register_device() nor "
"tty_port_install() is used in the driver. If used, this has to be called "
"before tty_register_driver()."
msgstr ""

#: ../../../driver-api/tty/tty_driver:106: drivers/tty/tty_port.c:127
#: drivers/tty/tty_port.c:146
msgid "register tty device"
msgstr ""

#: ../../../driver-api/tty/tty_driver:106: drivers/tty/tty_port.c:131
#: drivers/tty/tty_port.c:150
msgid "parent if exists, otherwise NULL"
msgstr ""

#: ../../../driver-api/tty/tty_driver:106: drivers/tty/tty_port.c:132
msgid ""
"It is the same as tty_register_device() except the provided **port** is "
"linked to a concrete tty specified by **index**. Use this or "
"tty_port_install() (or both). Call tty_port_link_device() as a last resort."
msgstr ""

#: ../../../driver-api/tty/tty_driver:106: drivers/tty/tty_port.c:153
msgid ""
"It is the same as tty_register_device_attr() except the provided **port** is "
"linked to a concrete tty specified by **index**. Use this or "
"tty_port_install() (or both). Call tty_port_link_device() as a last resort."
msgstr ""

#: ../../../driver-api/tty/tty_driver.rst:113
msgid "TTY Driver Reference"
msgstr ""

#: ../../../driver-api/tty/tty_driver.rst:115
msgid ""
"All members of struct tty_driver are documented here. The required members "
"are noted at the end. struct tty_operations are documented next."
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:490
msgid "driver for TTY devices"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:494
#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:110
msgid "**Definition**::"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:520
#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:154
msgid "**Members**"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:492
msgid "``kref``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:493
msgid ""
"reference counting. Reaching zero frees all the internals and the driver."
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:494
msgid "``cdevs``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:495
msgid "allocated/registered character /dev devices"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:495
msgid "``owner``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:496
msgid ""
"modules owning this driver. Used drivers cannot be rmmod'ed. Automatically "
"set by tty_alloc_driver()."
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:497
msgid "``driver_name``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:498
msgid "name of the driver used in /proc/tty"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:498
msgid "``name``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:499
msgid "used for constructing /dev node name"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:499
msgid "``name_base``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:500
msgid "used as a number base for constructing /dev node name"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:500
msgid "``major``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:501
msgid "major /dev device number (zero for autoassignment)"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:501
msgid "``minor_start``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:502
msgid "the first minor /dev device number"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:502
msgid "``num``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:503
msgid "number of devices allocated"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:503
msgid "``type``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:504
msgid "type of tty driver (enum tty_driver_type)"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:504
msgid "``subtype``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:505
msgid "subtype of tty driver (enum tty_driver_subtype)"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:505
msgid "``init_termios``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:506
msgid "termios to set to each tty initially (e.g. ``tty_std_termios``)"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:507
msgid "tty driver flags (``TTY_DRIVER_``)"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:507
msgid "``proc_entry``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:508
msgid "proc fs entry, used internally"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:508
msgid "``other``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:509
msgid "driver of the linked tty; only used for the PTY driver"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:509
msgid "``ttys``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:510
msgid ""
"array of active :c:type:`struct tty_struct <tty_struct>`, set by "
"tty_standard_install()"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:510
msgid "``ports``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:511
msgid ""
"array of :c:type:`struct tty_port <tty_port>`; can be set during "
"initialization by tty_port_link_device() and similar"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:512
msgid "``termios``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:513
msgid "storage for termios at each TTY close for the next open"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:513
msgid "``driver_state``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:514
msgid "pointer to driver's arbitrary data"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:514
msgid "``ops``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:515
msgid ""
"driver hooks for TTYs. Set them using tty_set_operations(). Use :c:type:"
"`struct tty_port <tty_port>` helpers in them as much as possible."
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:516
msgid "``tty_drivers``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:517
msgid "used internally to link tty_drivers together"
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:517
msgid ""
"The usual handling of :c:type:`struct tty_driver <tty_driver>` is to "
"allocate it by tty_alloc_driver(), set up all the necessary members, and "
"register it by tty_register_driver(). At last, the driver is torn down by "
"calling tty_unregister_driver() followed by tty_driver_kref_put()."
msgstr ""

#: ../../../driver-api/tty/tty_driver:118: include/linux/tty_driver.h:522
msgid ""
"The fields required to be set before calling tty_register_driver() include "
"**driver_name**, **name**, **type**, **subtype**, **init_termios**, and "
"**ops**."
msgstr ""

#: ../../../driver-api/tty/tty_driver.rst:124
msgid "TTY Operations Reference"
msgstr ""

#: ../../../driver-api/tty/tty_driver.rst:126
msgid ""
"When a TTY is registered, these driver hooks can be invoked by the TTY layer:"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:106
msgid "interface between driver and tty"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:108
msgid "``lookup``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:109
msgid ""
"``struct tty_struct *()(struct tty_driver *self, struct file *, int idx)``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:117
msgid "``install``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:118
msgid "``int ()(struct tty_driver *self, struct tty_struct *tty)``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:124
msgid "``remove``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:125
msgid "``void ()(struct tty_driver *self, struct tty_struct *tty)``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:131
msgid "``open``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:132
msgid "``int ()(struct tty_struct *tty, struct file *)``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:139
msgid "``close``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:140
msgid "``void ()(struct tty_struct *tty, struct file *)``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:149
msgid "``shutdown``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:150
#: include/linux/tty_driver.h:156 include/linux/tty_driver.h:185
#: include/linux/tty_driver.h:251 include/linux/tty_driver.h:259
#: include/linux/tty_driver.h:271 include/linux/tty_driver.h:280
#: include/linux/tty_driver.h:289 include/linux/tty_driver.h:298
#: include/linux/tty_driver.h:321
msgid "``void ()(struct tty_struct *tty)``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:155
msgid "``cleanup``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:161
msgid "``write``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:162
msgid "``ssize_t ()(struct tty_struct *tty, const u8 *buf, size_t count)``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:173
msgid "``put_char``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:174
msgid "``int ()(struct tty_struct *tty, u8 ch)``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:184
msgid "``flush_chars``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:192
msgid "``write_room``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:193
#: include/linux/tty_driver.h:206
msgid "``unsigned int ()(struct tty_struct *tty)``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:205
msgid "``chars_in_buffer``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:214
msgid "``ioctl``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:215
msgid "``int ()(struct tty_struct *tty, unsigned int cmd, unsigned long arg)``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:223
msgid "``compat_ioctl``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:224
msgid ""
"``long ()(struct tty_struct *tty, unsigned int cmd, unsigned long arg)``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:230
msgid "``set_termios``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:231
msgid "``void ()(struct tty_struct *tty, const struct ktermios *old)``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:258
msgid "``throttle``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:270
msgid "``unthrottle``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:279
msgid "``stop``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:288
msgid "``start``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:297
msgid "``hangup``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:304
msgid "``break_ctl``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:305
msgid "``int ()(struct tty_struct *tty, int state)``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:320
msgid "``flush_buffer``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:243
msgid "``ldisc_ok``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:244
msgid "``int ()(struct tty_struct *tty, int ldisc)``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:250
msgid "``set_ldisc``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:329
msgid "``wait_until_sent``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:330
msgid "``void ()(struct tty_struct *tty, int timeout)``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:338
msgid "``send_xchar``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:339
msgid "``void ()(struct tty_struct *tty, u8 ch)``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:346
msgid "``tiocmget``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:347
msgid "``int ()(struct tty_struct *tty)``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:354
msgid "``tiocmset``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:355
msgid ""
"``int ()(struct tty_struct *tty, unsigned int set, unsigned int clear)``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:363
msgid "``resize``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:364
msgid "``int ()(struct tty_struct *tty, struct winsize *ws)``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:374
msgid "``get_icount``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:375
msgid "``int ()(struct tty_struct *tty, struct serial_icounter *icount)``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:382
msgid "``get_serial``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:383
#: include/linux/tty_driver.h:391
msgid "``int ()(struct tty_struct *tty, struct serial_struct *p)``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:390
msgid "``set_serial``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:398
msgid "``show_fdinfo``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:399
msgid "``void ()(struct tty_struct *tty, struct seq_file *m)``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:407
msgid "``poll_init``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:408
msgid "``int ()(struct tty_driver *driver, int line, char *options)``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:416
msgid "``poll_get_char``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:417
msgid "``int ()(struct tty_driver *driver, int line)``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:423
msgid "``poll_put_char``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:424
msgid "``void ()(struct tty_driver *driver, int line, char ch)``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:430
msgid "``proc_show``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:431
msgid "``int ()(struct seq_file *m, void *driver)``"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:110
msgid ""
"Return the tty device corresponding to **idx**, ``NULL`` if there is not one "
"currently in use and an ``ERR_PTR`` value on error. Called under "
"``tty_mutex`` (for now!)"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:114
#: include/linux/tty_driver.h:120 include/linux/tty_driver.h:126
msgid "Optional method. Default behaviour is to use the **self->ttys** array."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:117
msgid ""
"Install a new **tty** into the **self**'s internal tables. Used in "
"conjunction with **lookup** and **remove** methods."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:123
msgid ""
"Remove a closed **tty** from the **self**'s internal tables. Used in "
"conjunction with **lookup** and **remove** methods."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:129
msgid ""
"This routine is called when a particular **tty** device is opened. This "
"routine is mandatory; if this routine is not filled in, the attempted open "
"will fail with ``ENODEV``."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:133
#: include/linux/tty_driver.h:142
msgid "Required method. Called with tty lock held. May sleep."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:136
msgid ""
"This routine is called when a particular **tty** device is closed. At the "
"point of return from this call the driver must make no further ldisc calls "
"of any kind."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:140
msgid "Remark: called even if the corresponding **open\\(\\)** failed."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:145
msgid ""
"This routine is called under the tty lock when a particular **tty** device "
"is closed for the last time. It executes before the **tty** resources are "
"freed so may execute while another function holds a **tty** kref."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:150
msgid ""
"This routine is called asynchronously when a particular **tty** device is "
"closed for the last time freeing up the resources. This is actually the "
"second part of shutdown for routines that might sleep."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:155
msgid ""
"This routine is called by the kernel to write a series (**count**) of "
"characters (**buf**) to the **tty** device. The characters may come from "
"user space or kernel space.  This routine will return the number of "
"characters actually accepted for writing."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:160
msgid ""
"May occur in parallel in special cases. Because this includes panic paths "
"drivers generally shouldn't try and do clever locking here."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:163
msgid "Optional: Required for writable devices. May not sleep."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:166
msgid ""
"This routine is called by the kernel to write a single character **ch** to "
"the **tty** device. If the kernel uses this routine, it must call the "
"**flush_chars\\(\\)** routine (if defined) when it is done stuffing "
"characters into the driver. If there is no room in the queue, the character "
"is ignored."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:172
msgid ""
"Optional: Kernel will use the **write** method if not provided. Do not call "
"this function directly, call tty_put_char()."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:176
msgid ""
"This routine is called by the kernel after it has written a series of "
"characters to the tty device using **put_char\\(\\)**."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:179
msgid ""
"Optional. Do not call this function directly, call tty_driver_flush_chars()."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:183
msgid ""
"This routine returns the numbers of characters the **tty** driver will "
"accept for queuing to be written.  This number is subject to change as "
"output buffers get emptied, or if the output flow control is acted."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:188
msgid ""
"The ldisc is responsible for being intelligent about multi-threading of "
"write_room/write calls"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:191
msgid ""
"Required if **write** method is provided else not needed. Do not call this "
"function directly, call tty_write_room()"
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:195
msgid ""
"This routine returns the number of characters in the device private output "
"queue. Used in tty_wait_until_sent() and for poll() implementation."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:199
msgid ""
"Optional: if not provided, it is assumed there is no queue on the device. Do "
"not call this function directly, call tty_chars_in_buffer()."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:203
msgid ""
"This routine allows the **tty** driver to implement device-specific ioctls. "
"If the ioctl number passed in **cmd** is not recognized by the driver, it "
"should return ``ENOIOCTLCMD``."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:207
#: include/linux/tty_driver.h:212
msgid "Optional."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:210
msgid "Implement ioctl processing for 32 bit process on 64 bit system."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:215
msgid ""
"This routine allows the **tty** driver to be notified when device's termios "
"settings have changed. New settings are in **tty->termios**. Previous "
"settings are passed in the **old** argument."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:219
msgid ""
"The API is defined such that the driver should return the actual modes "
"selected. This means that the driver is responsible for modifying any bits "
"in **tty->termios** it cannot fulfill to indicate the actual modes being "
"used."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:224
msgid "Optional. Called under the **tty->termios_rwsem**. May sleep."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:227
msgid ""
"This routine allows the **tty** driver to decide if it can deal with a "
"particular **ldisc**."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:230
#: include/linux/tty_driver.h:237
msgid ""
"Optional. Called under the **tty->ldisc_sem** and **tty->termios_rwsem**."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:233
msgid ""
"This routine allows the **tty** driver to be notified when the device's line "
"discipline is being changed. At the point this is done the discipline is not "
"yet usable."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:240
msgid ""
"This routine notifies the **tty** driver that input buffers for the line "
"discipline are close to full, and it should somehow signal that no more "
"characters should be sent to the **tty**."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:244
msgid ""
"Serialization including with **unthrottle\\(\\)** is the job of the ldisc "
"layer."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:247
msgid ""
"Optional: Always invoke via tty_throttle_safe(). Called under the **tty-"
">termios_rwsem**."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:251
msgid ""
"This routine notifies the **tty** driver that it should signal that "
"characters can now be sent to the **tty** without fear of overrunning the "
"input buffers of the line disciplines."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:255
msgid ""
"Optional. Always invoke via tty_unthrottle(). Called under the **tty-"
">termios_rwsem**."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:259
msgid ""
"This routine notifies the **tty** driver that it should stop outputting "
"characters to the tty device."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:262
msgid ""
"Called with **tty->flow.lock** held. Serialized with **start\\(\\)** method."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:264
msgid "Optional. Always invoke via stop_tty()."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:267
msgid ""
"This routine notifies the **tty** driver that it resumed sending characters "
"to the **tty** device."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:270
msgid "Called with **tty->flow.lock** held. Serialized with stop() method."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:272
msgid "Optional. Always invoke via start_tty()."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:275
msgid ""
"This routine notifies the **tty** driver that it should hang up the **tty** "
"device."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:278
msgid "Optional. Called with tty lock held."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:281
msgid ""
"This optional routine requests the **tty** driver to turn on or off BREAK "
"status on the RS-232 port. If **state** is -1, then the BREAK status should "
"be turned on; if **state** is 0, then BREAK should be turned off."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:285
msgid ""
"If this routine is implemented, the high-level tty driver will handle the "
"following ioctls: ``TCSBRK``, ``TCSBRKP``, ``TIOCSBRK``, ``TIOCCBRK``."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:288
msgid ""
"If the driver sets ``TTY_DRIVER_HARDWARE_BREAK`` in tty_alloc_driver(), then "
"the interface will also be called with actual times and the hardware is "
"expected to do the delay work itself. 0 and -1 are still used for on/off."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:293
msgid "Optional: Required for ``TCSBRK``/``BRKP``/etc. handling. May sleep."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:296
msgid ""
"This routine discards device private output buffer. Invoked on close, "
"hangup, to implement ``TCOFLUSH`` ioctl and similar."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:299
msgid ""
"Optional: if not provided, it is assumed there is no queue on the device. Do "
"not call this function directly, call tty_driver_flush_buffer()."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:304
msgid ""
"This routine waits until the device has written out all of the characters in "
"its transmitter FIFO. Or until **timeout** (in jiffies) is reached."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:308
msgid ""
"Optional: If not provided, the device is assumed to have no FIFO. Usually "
"correct to invoke via tty_wait_until_sent(). May sleep."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:312
msgid ""
"This routine is used to send a high-priority XON/XOFF character (**ch**) to "
"the **tty** device."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:315
msgid ""
"Optional: If not provided, then the **write** method is called under the "
"**tty->atomic_write_lock** to keep it serialized with the ldisc."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:319
msgid ""
"This routine is used to obtain the modem status bits from the **tty** driver."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:322
msgid ""
"Optional: If not provided, then ``ENOTTY`` is returned from the ``TIOCMGET`` "
"ioctl. Do not call this function directly, call tty_tiocmget()."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:326
msgid ""
"This routine is used to set the modem status bits to the **tty** driver. "
"First, **clear** bits should be cleared, then **set** bits set."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:329
msgid ""
"Optional: If not provided, then ``ENOTTY`` is returned from the ``TIOCMSET`` "
"ioctl. Do not call this function directly, call tty_tiocmset()."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:333
msgid ""
"Called when a termios request is issued which changes the requested terminal "
"geometry to **ws**."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:336
msgid ""
"Optional: the default action is to update the termios structure without "
"error. This is usually the correct behaviour. Drivers should not force "
"errors here if they are not resizable objects (e.g. a serial line). See "
"tty_do_resize() if you need to wrap the standard method in your own logic -- "
"the usual case."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:343
msgid ""
"Called when the **tty** device receives a ``TIOCGICOUNT`` ioctl. Passed a "
"kernel structure **icount** to complete."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:346
msgid ""
"Optional: called only if provided, otherwise ``ENOTTY`` will be returned."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:349
msgid ""
"Called when the **tty** device receives a ``TIOCGSERIAL`` ioctl. Passed a "
"kernel structure **p** (:c:type:`struct serial_struct <serial_struct>`) to "
"complete."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:352
msgid ""
"Optional: called only if provided, otherwise ``ENOTTY`` will be returned. Do "
"not call this function directly, call tty_tiocgserial()."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:356
msgid ""
"Called when the **tty** device receives a ``TIOCSSERIAL`` ioctl. Passed a "
"kernel structure **p** (:c:type:`struct serial_struct <serial_struct>`) to "
"set the values from."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:359
msgid ""
"Optional: called only if provided, otherwise ``ENOTTY`` will be returned. Do "
"not call this function directly, call tty_tiocsserial()."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:363
msgid ""
"Called when the **tty** device file descriptor receives a fdinfo request "
"from VFS (to show in /proc/<pid>/fdinfo/). **m** should be filled with "
"information."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:367
msgid ""
"Optional: called only if provided, otherwise nothing is written to **m**. Do "
"not call this function directly, call tty_show_fdinfo()."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:371
msgid ""
"kgdboc support (Documentation/process/debugging/kgdb.rst). This routine is "
"called to initialize the HW for later use by calling **poll_get_char** or "
"**poll_put_char**."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:375
msgid ""
"Optional: called only if provided, otherwise skipped as a non-polling driver."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:379
msgid ""
"kgdboc support (see **poll_init**). **driver** should read a character from "
"a tty identified by **line** and return it."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:382
#: include/linux/tty_driver.h:388
msgid "Optional: called only if **poll_init** provided."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:385
msgid ""
"kgdboc support (see **poll_init**). **driver** should write character **ch** "
"to a tty identified by **line**."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:391
msgid ""
"Driver **driver** (cast to :c:type:`struct tty_driver <tty_driver>`) can "
"show additional info in /proc/tty/driver/<driver_name>. It is enough to fill "
"in the information into **m**."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:395
msgid "Optional: called only if provided, otherwise no /proc entry created."
msgstr ""

#: ../../../driver-api/tty/tty_driver:128: include/linux/tty_driver.h:397
msgid ""
"This structure defines the interface between the low-level tty driver and "
"the tty routines. These routines can be defined. Unless noted otherwise, "
"they are optional, and can be filled in with a ``NULL`` pointer."
msgstr ""
