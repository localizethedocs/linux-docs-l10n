# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../driver-api/io_ordering.rst:3
msgid "Ordering I/O writes to memory-mapped addresses"
msgstr ""

#: ../../../driver-api/io_ordering.rst:5
msgid ""
"On some platforms, so-called memory-mapped I/O is weakly ordered.  On such "
"platforms, driver writers are responsible for ensuring that I/O writes to "
"memory-mapped addresses on their device arrive in the order intended.  This "
"is typically done by reading a 'safe' device or bridge register, causing the "
"I/O chipset to flush pending writes to the device before any reads are "
"posted.  A driver would usually use this technique immediately prior to the "
"exit of a critical section of code protected by spinlocks.  This would "
"ensure that subsequent writes to I/O space arrived only after all prior "
"writes (much like a memory barrier op, mb(), only with respect to I/O)."
msgstr ""

#: ../../../driver-api/io_ordering.rst:15
msgid "A more concrete example from a hypothetical device driver::"
msgstr ""

#: ../../../driver-api/io_ordering.rst:31
msgid ""
"In the case above, the device may receive newval2 before it receives newval, "
"which could cause problems.  Fixing it is easy enough though::"
msgstr ""

#: ../../../driver-api/io_ordering.rst:49
msgid ""
"Here, the reads from safe_register will cause the I/O chipset to flush any "
"pending writes before actually posting the read to the chipset, preventing "
"possible data corruption."
msgstr ""
