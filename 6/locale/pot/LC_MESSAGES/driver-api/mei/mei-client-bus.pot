# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-28 09:03+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../driver-api/mei/mei-client-bus.rst:5
msgid "Intel(R) Management Engine (ME) Client bus API"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus.rst:9
msgid "Rationale"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus.rst:11
msgid ""
"The MEI character device is useful for dedicated applications to send and "
"receive data to the many FW appliance found in Intel's ME from the user "
"space. However, for some of the ME functionalities it makes sense to "
"leverage existing software stack and expose them through existing kernel "
"subsystems."
msgstr ""

#: ../../../driver-api/mei/mei-client-bus.rst:16
msgid ""
"In order to plug seamlessly into the kernel device driver model we add "
"kernel virtual bus abstraction on top of the MEI driver. This allows "
"implementing Linux kernel drivers for the various MEI features as a stand "
"alone entities found in their respective subsystem. Existing device drivers "
"can even potentially be re-used by adding an MEI CL bus layer to the "
"existing code."
msgstr ""

#: ../../../driver-api/mei/mei-client-bus.rst:24
msgid "MEI CL bus API"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus.rst:26
msgid ""
"A driver implementation for an MEI Client is very similar to any other "
"existing bus based device drivers. The driver registers itself as an MEI CL "
"bus driver through the ``struct mei_cl_driver`` structure defined in :file:"
"`include/linux/mei_cl_bus.c`"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus.rst:44
msgid ""
"The mei_cl_device_id structure defined in :file:`include/linux/"
"mod_devicetable.h` allows a driver to bind itself against a device name."
msgstr ""

#: ../../../driver-api/mei/mei-client-bus.rst:56
msgid ""
"To actually register a driver on the ME Client bus one must call the :c:func:"
"`mei_cl_add_driver` API. This is typically called at module initialization "
"time."
msgstr ""

#: ../../../driver-api/mei/mei-client-bus.rst:59
msgid ""
"Once the driver is registered and bound to the device, a driver will "
"typically try to do some I/O on this bus and this should be done through "
"the :c:func:`mei_cl_send` and :c:func:`mei_cl_recv` functions. More detailed "
"information is in :ref:`api` section."
msgstr ""

#: ../../../driver-api/mei/mei-client-bus.rst:63
msgid ""
"In order for a driver to be notified about pending traffic or event, the "
"driver should register a callback via :c:func:`mei_cl_devev_register_rx_cb` "
"and :c:func:`mei_cldev_register_notify_cb` function respectively."
msgstr ""

#: ../../../driver-api/mei/mei-client-bus.rst:70
msgid "API:"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:260
msgid "me device send with vtag (write)"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:264
#: drivers/misc/mei/bus.c:286 drivers/misc/mei/bus.c:309
#: drivers/misc/mei/bus.c:331 drivers/misc/mei/bus.c:350
#: drivers/misc/mei/bus.c:373 drivers/misc/mei/bus.c:390
#: drivers/misc/mei/bus.c:409 drivers/misc/mei/bus.c:507
#: drivers/misc/mei/bus.c:546 drivers/misc/mei/bus.c:584
#: drivers/misc/mei/bus.c:597 drivers/misc/mei/bus.c:609
#: drivers/misc/mei/bus.c:622 drivers/misc/mei/bus.c:635
#: drivers/misc/mei/bus.c:793 drivers/misc/mei/bus.c:868
#: drivers/misc/mei/bus.c:917
msgid "**Parameters**"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:266
#: drivers/misc/mei/bus.c:288 drivers/misc/mei/bus.c:311
#: drivers/misc/mei/bus.c:333 drivers/misc/mei/bus.c:352
#: drivers/misc/mei/bus.c:375 drivers/misc/mei/bus.c:392
#: drivers/misc/mei/bus.c:411 drivers/misc/mei/bus.c:509
#: drivers/misc/mei/bus.c:548 drivers/misc/mei/bus.c:599
#: drivers/misc/mei/bus.c:795 drivers/misc/mei/bus.c:870
#: drivers/misc/mei/bus.c:919
msgid "``struct mei_cl_device *cldev``"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:262
#: drivers/misc/mei/bus.c:284 drivers/misc/mei/bus.c:307
#: drivers/misc/mei/bus.c:329 drivers/misc/mei/bus.c:348
#: drivers/misc/mei/bus.c:371 drivers/misc/mei/bus.c:388
#: drivers/misc/mei/bus.c:407 drivers/misc/mei/bus.c:792
#: drivers/misc/mei/bus.c:867 drivers/misc/mei/bus.c:916
msgid "me client device"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:264
#: drivers/misc/mei/bus.c:286 drivers/misc/mei/bus.c:373
#: drivers/misc/mei/bus.c:390
msgid "``const u8 *buf``"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:263
#: drivers/misc/mei/bus.c:285 drivers/misc/mei/bus.c:372
#: drivers/misc/mei/bus.c:389
msgid "buffer to send"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:265
#: drivers/misc/mei/bus.c:287 drivers/misc/mei/bus.c:310
#: drivers/misc/mei/bus.c:332 drivers/misc/mei/bus.c:351
#: drivers/misc/mei/bus.c:374 drivers/misc/mei/bus.c:391
#: drivers/misc/mei/bus.c:410
msgid "``size_t length``"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:264
#: drivers/misc/mei/bus.c:286 drivers/misc/mei/bus.c:309
#: drivers/misc/mei/bus.c:331 drivers/misc/mei/bus.c:350
#: drivers/misc/mei/bus.c:373 drivers/misc/mei/bus.c:390
#: drivers/misc/mei/bus.c:409
msgid "buffer length"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:266
#: drivers/misc/mei/bus.c:288
msgid "``u8 vtag``"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:265
#: drivers/misc/mei/bus.c:287 drivers/misc/mei/bus.c:310
#: drivers/misc/mei/bus.c:351
msgid "virtual tag"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:267
#: drivers/misc/mei/bus.c:290 drivers/misc/mei/bus.c:312
#: drivers/misc/mei/bus.c:334 drivers/misc/mei/bus.c:354
#: drivers/misc/mei/bus.c:375 drivers/misc/mei/bus.c:393
#: drivers/misc/mei/bus.c:411 drivers/misc/mei/bus.c:508
#: drivers/misc/mei/bus.c:547 drivers/misc/mei/bus.c:584
#: drivers/misc/mei/bus.c:609 drivers/misc/mei/bus.c:622
#: drivers/misc/mei/bus.c:635 drivers/misc/mei/bus.c:794
#: drivers/misc/mei/bus.c:869 drivers/misc/mei/bus.c:923
msgid "**Return**"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:267
#: drivers/misc/mei/bus.c:290 drivers/misc/mei/bus.c:375
#: drivers/misc/mei/bus.c:393 drivers/misc/mei/bus.c:923
msgid "written size in bytes"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:268
#: drivers/misc/mei/bus.c:291 drivers/misc/mei/bus.c:313
#: drivers/misc/mei/bus.c:335 drivers/misc/mei/bus.c:355
#: drivers/misc/mei/bus.c:376 drivers/misc/mei/bus.c:394
#: drivers/misc/mei/bus.c:924
msgid "< 0 on error"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:282
msgid "me device send with vtag and timeout (write)"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:289
#: drivers/misc/mei/bus.c:333 drivers/misc/mei/bus.c:353
#: drivers/misc/mei/bus.c:392
msgid "``unsigned long timeout``"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:288
#: drivers/misc/mei/bus.c:332 drivers/misc/mei/bus.c:391
msgid "send timeout in milliseconds, 0 for infinite timeout"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:305
#: drivers/misc/mei/bus.c:346
msgid "client receive with vtag (read)"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:309
#: drivers/misc/mei/bus.c:331 drivers/misc/mei/bus.c:350
#: drivers/misc/mei/bus.c:409
msgid "``u8 *buf``"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:308
#: drivers/misc/mei/bus.c:330 drivers/misc/mei/bus.c:349
#: drivers/misc/mei/bus.c:408
msgid "buffer to receive"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:311
#: drivers/misc/mei/bus.c:352
msgid "``u8 *vtag``"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:312
#: drivers/misc/mei/bus.c:334 drivers/misc/mei/bus.c:354
msgid "read size in bytes"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:327
msgid "client receive with timeout (read)"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:352
msgid "recv timeout in milliseconds, 0 for infinite timeout"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:369
msgid "me device send (write)"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:386
msgid "me device send with timeout (write)"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:405
msgid "client receive (read)"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:411
msgid "read size in bytes of < 0 on error"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:503
msgid "register Rx event callback"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:505
#: drivers/misc/mei/bus.c:544
msgid "me client devices"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:507
msgid "``mei_cldev_cb_t rx_cb``"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:506
#: drivers/misc/mei/bus.c:545
msgid "callback function"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:508
#: drivers/misc/mei/bus.c:547
msgid ""
"0 on success -EALREADY if an callback is already registered <0 on other "
"errors"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:542
msgid "register FW notification event callback"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:546
msgid "``mei_cldev_cb_t notif_cb``"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:580
msgid "driver data getter"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:586
#: drivers/misc/mei/bus.c:611 drivers/misc/mei/bus.c:624
#: drivers/misc/mei/bus.c:637
msgid "``const struct mei_cl_device *cldev``"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:582
#: drivers/misc/mei/bus.c:595 drivers/misc/mei/bus.c:607
#: drivers/misc/mei/bus.c:620 drivers/misc/mei/bus.c:633
msgid "mei client device"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:584
msgid "driver private data"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:593
msgid "driver data setter"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:597
msgid "``void *data``"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:596
msgid "data to store"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:605
msgid "return protocol version of the underlying me client"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:609
msgid "me client protocol version"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:618
msgid "max message that client can send and receive"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:622
msgid "mtu or 0 if client is not connected"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:631
msgid "check whether the device is enabled"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:635
msgid "true if me client is initialized and connected"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:789
msgid "enable me client device create connection with me client"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:794
#: drivers/misc/mei/bus.c:869
msgid "0 on success and < 0 on error"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:864
msgid "disable me client device disconnect form the me client"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:913
msgid ""
"sends a gsc command, by sending a gsl mei message to gsc and receiving reply "
"from gsc"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:918
msgid "``u8 client_id``"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:917
msgid "client id to send the command to"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:919
msgid "``u32 fence_id``"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:918
msgid "fence id to send the command to"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:920
msgid "``struct scatterlist *sg_in``"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:919
msgid "scatter gather list containing addresses for rx message buffer"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:921
msgid "``size_t total_in_len``"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:920
msgid ""
"total length of data in 'in' sg, can be less than the sum of buffers sizes"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:922
msgid "``struct scatterlist *sg_out``"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus:71: drivers/misc/mei/bus.c:921
msgid "scatter gather list containing addresses for tx message buffer"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus.rst:77
msgid "Example"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus.rst:79
msgid ""
"As a theoretical example let's pretend the ME comes with a \"contact\" NFC "
"IP. The driver init and exit routines for this device would look like:"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus.rst:123
msgid "And the driver's simplified probe routine would look like that:"
msgstr ""

#: ../../../driver-api/mei/mei-client-bus.rst:137
msgid ""
"In the probe routine the driver first enable the MEI device and then "
"registers an rx handler which is as close as it can get to registering a "
"threaded IRQ handler. The handler implementation will typically call :c:func:"
"`mei_cldev_recv` and then process received data."
msgstr ""

#: ../../../driver-api/mei/mei-client-bus.rst:162
msgid "MEI Client Bus Drivers"
msgstr ""
