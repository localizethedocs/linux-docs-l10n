# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-28 09:03+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../driver-api/firmware/request_firmware.rst:3
msgid "request_firmware API"
msgstr ""

#: ../../../driver-api/firmware/request_firmware.rst:5
msgid ""
"You would typically load firmware and then load it into your device somehow. "
"The typical firmware work flow is reflected below::"
msgstr ""

#: ../../../driver-api/firmware/request_firmware.rst:13
msgid "Synchronous firmware requests"
msgstr ""

#: ../../../driver-api/firmware/request_firmware.rst:15
msgid ""
"Synchronous firmware requests will wait until the firmware is found or until "
"an error is returned."
msgstr ""

#: ../../../driver-api/firmware/request_firmware.rst:19
msgid "request_firmware"
msgstr ""

#: ../../../driver-api/firmware/request_firmware:20:
#: drivers/base/firmware_loader/main.c:928
msgid "send firmware request and wait for it"
msgstr ""

#: ../../../driver-api/firmware/request_firmware:20:
#: drivers/base/firmware_loader/main.c:932
#: ../../../driver-api/firmware/request_firmware:25:
#: drivers/base/firmware_loader/main.c:969
#: ../../../driver-api/firmware/request_firmware:30:
#: drivers/base/firmware_loader/main.c:1021
#: ../../../driver-api/firmware/request_firmware:35:
#: drivers/base/firmware_loader/main.c:996
#: ../../../driver-api/firmware/request_firmware:40:
#: drivers/base/firmware_loader/main.c:1069
#: ../../../driver-api/firmware/request_firmware:54:
#: drivers/base/firmware_loader/main.c:1217
#: ../../../driver-api/firmware/request_firmware:68:
#: drivers/base/firmware_loader/main.c:1045
msgid "**Parameters**"
msgstr ""

#: ../../../driver-api/firmware/request_firmware:20:
#: drivers/base/firmware_loader/main.c:934
#: ../../../driver-api/firmware/request_firmware:35:
#: drivers/base/firmware_loader/main.c:998
#: ../../../driver-api/firmware/request_firmware:40:
#: drivers/base/firmware_loader/main.c:1071
msgid "``const struct firmware **firmware_p``"
msgstr ""

#: ../../../driver-api/firmware/request_firmware:20:
#: drivers/base/firmware_loader/main.c:929
#: ../../../driver-api/firmware/request_firmware:25:
#: drivers/base/firmware_loader/main.c:966
#: ../../../driver-api/firmware/request_firmware:30:
#: drivers/base/firmware_loader/main.c:1018
#: ../../../driver-api/firmware/request_firmware:35:
#: drivers/base/firmware_loader/main.c:993
#: ../../../driver-api/firmware/request_firmware:40:
#: drivers/base/firmware_loader/main.c:1066
msgid "pointer to firmware image"
msgstr ""

#: ../../../driver-api/firmware/request_firmware:20:
#: drivers/base/firmware_loader/main.c:931
#: ../../../driver-api/firmware/request_firmware:25:
#: drivers/base/firmware_loader/main.c:968
#: ../../../driver-api/firmware/request_firmware:30:
#: drivers/base/firmware_loader/main.c:1020
#: ../../../driver-api/firmware/request_firmware:35:
#: drivers/base/firmware_loader/main.c:995
#: ../../../driver-api/firmware/request_firmware:40:
#: drivers/base/firmware_loader/main.c:1068
#: ../../../driver-api/firmware/request_firmware:54:
#: drivers/base/firmware_loader/main.c:1218
#: ../../../driver-api/firmware/request_firmware:68:
#: drivers/base/firmware_loader/main.c:1044
msgid "``const char *name``"
msgstr ""

#: ../../../driver-api/firmware/request_firmware:20:
#: drivers/base/firmware_loader/main.c:930
#: ../../../driver-api/firmware/request_firmware:25:
#: drivers/base/firmware_loader/main.c:967
#: ../../../driver-api/firmware/request_firmware:30:
#: drivers/base/firmware_loader/main.c:1019
#: ../../../driver-api/firmware/request_firmware:35:
#: drivers/base/firmware_loader/main.c:994
#: ../../../driver-api/firmware/request_firmware:40:
#: drivers/base/firmware_loader/main.c:1067
#: ../../../driver-api/firmware/request_firmware:54:
#: drivers/base/firmware_loader/main.c:1217
#: ../../../driver-api/firmware/request_firmware:68:
#: drivers/base/firmware_loader/main.c:1043
msgid "name of firmware file"
msgstr ""

#: ../../../driver-api/firmware/request_firmware:20:
#: drivers/base/firmware_loader/main.c:932
#: ../../../driver-api/firmware/request_firmware:25:
#: drivers/base/firmware_loader/main.c:969
#: ../../../driver-api/firmware/request_firmware:30:
#: drivers/base/firmware_loader/main.c:1021
#: ../../../driver-api/firmware/request_firmware:35:
#: drivers/base/firmware_loader/main.c:996
#: ../../../driver-api/firmware/request_firmware:40:
#: drivers/base/firmware_loader/main.c:1069
#: ../../../driver-api/firmware/request_firmware:54:
#: drivers/base/firmware_loader/main.c:1219
#: ../../../driver-api/firmware/request_firmware:68:
#: drivers/base/firmware_loader/main.c:1047
msgid "``struct device *device``"
msgstr ""

#: ../../../driver-api/firmware/request_firmware:20:
#: drivers/base/firmware_loader/main.c:931
#: ../../../driver-api/firmware/request_firmware:25:
#: drivers/base/firmware_loader/main.c:968
#: ../../../driver-api/firmware/request_firmware:30:
#: drivers/base/firmware_loader/main.c:1020
#: ../../../driver-api/firmware/request_firmware:35:
#: drivers/base/firmware_loader/main.c:995
#: ../../../driver-api/firmware/request_firmware:54:
#: drivers/base/firmware_loader/main.c:1218
msgid "device for which firmware is being loaded"
msgstr ""

#: ../../../driver-api/firmware/request_firmware:20:
#: drivers/base/firmware_loader/main.c:933
#: ../../../driver-api/firmware/request_firmware:25:
#: drivers/base/firmware_loader/main.c:970
#: ../../../driver-api/firmware/request_firmware:30:
#: drivers/base/firmware_loader/main.c:1022
#: ../../../driver-api/firmware/request_firmware:35:
#: drivers/base/firmware_loader/main.c:997
#: ../../../driver-api/firmware/request_firmware:40:
#: drivers/base/firmware_loader/main.c:1072
#: ../../../driver-api/firmware/request_firmware:54:
#: drivers/base/firmware_loader/main.c:1225
#: ../../../driver-api/firmware/request_firmware:68:
#: drivers/base/firmware_loader/main.c:1045
msgid "**Description**"
msgstr ""

#: ../../../driver-api/firmware/request_firmware:20:
#: drivers/base/firmware_loader/main.c:932
msgid ""
"**firmware_p** will be used to return a firmware image by the name of "
"**name** for device **device**."
msgstr ""

#: ../../../driver-api/firmware/request_firmware:20:
#: drivers/base/firmware_loader/main.c:935
msgid "Should be called from user context where sleeping is allowed."
msgstr ""

#: ../../../driver-api/firmware/request_firmware:20:
#: drivers/base/firmware_loader/main.c:937
msgid ""
"**name** will be used as $FIRMWARE in the uevent environment and should be "
"distinctive enough not to be confused with any other firmware image for this "
"or any other device. It must not contain any \"..\" path components - \"foo/"
"bar..bin\" is allowed, but \"foo/../bar.bin\" is not."
msgstr ""

#: ../../../driver-api/firmware/request_firmware:20:
#: drivers/base/firmware_loader/main.c:943
#: ../../../driver-api/firmware/request_firmware:54:
#: drivers/base/firmware_loader/main.c:1224
msgid "Caller must hold the reference count of **device**."
msgstr ""

#: ../../../driver-api/firmware/request_firmware:20:
#: drivers/base/firmware_loader/main.c:945
msgid ""
"The function can be called safely inside device's suspend and resume "
"callback."
msgstr ""

#: ../../../driver-api/firmware/request_firmware.rst:24
msgid "firmware_request_nowarn"
msgstr ""

#: ../../../driver-api/firmware/request_firmware:25:
#: drivers/base/firmware_loader/main.c:965
msgid "request for an optional fw module"
msgstr ""

#: ../../../driver-api/firmware/request_firmware:25:
#: drivers/base/firmware_loader/main.c:971
#: ../../../driver-api/firmware/request_firmware:30:
#: drivers/base/firmware_loader/main.c:1023
msgid "``const struct firmware **firmware``"
msgstr ""

#: ../../../driver-api/firmware/request_firmware:25:
#: drivers/base/firmware_loader/main.c:969
msgid ""
"This function is similar in behaviour to request_firmware(), except it "
"doesn't produce warning messages when the file is not found. The sysfs "
"fallback mechanism is enabled if direct filesystem lookup fails. However, "
"failures to find the firmware file with it are still suppressed. It is "
"therefore up to the driver to check for the return value of this call and to "
"decide when to inform the users of errors."
msgstr ""

#: ../../../driver-api/firmware/request_firmware.rst:29
msgid "firmware_request_platform"
msgstr ""

#: ../../../driver-api/firmware/request_firmware:30:
#: drivers/base/firmware_loader/main.c:1017
msgid "request firmware with platform-fw fallback"
msgstr ""

#: ../../../driver-api/firmware/request_firmware:30:
#: drivers/base/firmware_loader/main.c:1021
msgid ""
"This function is similar in behaviour to request_firmware, except that if "
"direct filesystem lookup fails, it will fallback to looking for a copy of "
"the requested firmware embedded in the platform's main (e.g. UEFI) firmware."
msgstr ""

#: ../../../driver-api/firmware/request_firmware.rst:34
msgid "request_firmware_direct"
msgstr ""

#: ../../../driver-api/firmware/request_firmware:35:
#: drivers/base/firmware_loader/main.c:992
msgid "load firmware directly without usermode helper"
msgstr ""

#: ../../../driver-api/firmware/request_firmware:35:
#: drivers/base/firmware_loader/main.c:996
msgid ""
"This function works pretty much like request_firmware(), but this doesn't "
"fall back to usermode helper even if the firmware couldn't be loaded "
"directly from fs.  Hence it's useful for loading optional firmwares, which "
"aren't always present, without extra long timeouts of udev."
msgstr ""

#: ../../../driver-api/firmware/request_firmware.rst:39
msgid "request_firmware_into_buf"
msgstr ""

#: ../../../driver-api/firmware/request_firmware:40:
#: drivers/base/firmware_loader/main.c:1065
msgid "load firmware into a previously allocated buffer"
msgstr ""

#: ../../../driver-api/firmware/request_firmware:40:
#: drivers/base/firmware_loader/main.c:1068
msgid "device for which firmware is being loaded and DMA region allocated"
msgstr ""

#: ../../../driver-api/firmware/request_firmware:40:
#: drivers/base/firmware_loader/main.c:1070
msgid "``void *buf``"
msgstr ""

#: ../../../driver-api/firmware/request_firmware:40:
#: drivers/base/firmware_loader/main.c:1069
msgid "address of buffer to load firmware into"
msgstr ""

#: ../../../driver-api/firmware/request_firmware:40:
#: drivers/base/firmware_loader/main.c:1071
msgid "``size_t size``"
msgstr ""

#: ../../../driver-api/firmware/request_firmware:40:
#: drivers/base/firmware_loader/main.c:1070
msgid "size of buffer"
msgstr ""

#: ../../../driver-api/firmware/request_firmware:40:
#: drivers/base/firmware_loader/main.c:1071
msgid ""
"This function works pretty much like request_firmware(), but it doesn't "
"allocate a buffer to hold the firmware data. Instead, the firmware is loaded "
"directly into the buffer pointed to by **buf** and the **firmware_p** data "
"member is pointed at **buf**."
msgstr ""

#: ../../../driver-api/firmware/request_firmware:40:
#: drivers/base/firmware_loader/main.c:1076
msgid "This function doesn't cache firmware either."
msgstr ""

#: ../../../driver-api/firmware/request_firmware.rst:44
msgid "Asynchronous firmware requests"
msgstr ""

#: ../../../driver-api/firmware/request_firmware.rst:46
msgid ""
"Asynchronous firmware requests allow driver code to not have to wait until "
"the firmware or an error is returned. Function callbacks are provided so "
"that when the firmware or an error is found the driver is informed through "
"the callback. request_firmware_nowait() cannot be called in atomic contexts."
msgstr ""

#: ../../../driver-api/firmware/request_firmware.rst:53
msgid "request_firmware_nowait"
msgstr ""

#: ../../../driver-api/firmware/request_firmware:54:
#: drivers/base/firmware_loader/main.c:1213
msgid "asynchronous version of request_firmware"
msgstr ""

#: ../../../driver-api/firmware/request_firmware:54:
#: drivers/base/firmware_loader/main.c:1219
msgid "``struct module *module``"
msgstr ""

#: ../../../driver-api/firmware/request_firmware:54:
#: drivers/base/firmware_loader/main.c:1214
msgid "module requesting the firmware"
msgstr ""

#: ../../../driver-api/firmware/request_firmware:54:
#: drivers/base/firmware_loader/main.c:1216
msgid "``bool uevent``"
msgstr ""

#: ../../../driver-api/firmware/request_firmware:54:
#: drivers/base/firmware_loader/main.c:1215
msgid ""
"sends uevent to copy the firmware image if this flag is non-zero else the "
"firmware copy must be done manually."
msgstr ""

#: ../../../driver-api/firmware/request_firmware:54:
#: drivers/base/firmware_loader/main.c:1220
msgid "``gfp_t gfp``"
msgstr ""

#: ../../../driver-api/firmware/request_firmware:54:
#: drivers/base/firmware_loader/main.c:1219
msgid "allocation flags"
msgstr ""

#: ../../../driver-api/firmware/request_firmware:54:
#: drivers/base/firmware_loader/main.c:1221
msgid "``void *context``"
msgstr ""

#: ../../../driver-api/firmware/request_firmware:54:
#: drivers/base/firmware_loader/main.c:1220
msgid ""
"will be passed over to **cont**, and **fw** may be ``NULL`` if firmware "
"request fails."
msgstr ""

#: ../../../driver-api/firmware/request_firmware:54:
#: drivers/base/firmware_loader/main.c:1223
msgid "``void (*cont)(const struct firmware *fw, void *context)``"
msgstr ""

#: ../../../driver-api/firmware/request_firmware:54:
#: drivers/base/firmware_loader/main.c:1222
msgid ""
"function will be called asynchronously when the firmware request is over."
msgstr ""

#: ../../../driver-api/firmware/request_firmware:54:
#: drivers/base/firmware_loader/main.c:1226
msgid "Asynchronous variant of request_firmware() for user contexts:"
msgstr ""

#: ../../../driver-api/firmware/request_firmware:54:
#: drivers/base/firmware_loader/main.c:1227
msgid ""
"sleep for as small periods as possible since it may increase kernel boot "
"time of built-in device drivers requesting firmware in their ->probe() "
"methods, if **gfp** is GFP_KERNEL."
msgstr ""

#: ../../../driver-api/firmware/request_firmware:54:
#: drivers/base/firmware_loader/main.c:1232
msgid "can't sleep at all if **gfp** is GFP_ATOMIC."
msgstr ""

#: ../../../driver-api/firmware/request_firmware.rst:58
msgid "Special optimizations on reboot"
msgstr ""

#: ../../../driver-api/firmware/request_firmware.rst:60
msgid ""
"Some devices have an optimization in place to enable the firmware to be "
"retained during system reboot. When such optimizations are used the driver "
"author must ensure the firmware is still available on resume from suspend, "
"this can be done with firmware_request_cache() instead of requesting for the "
"firmware to be loaded."
msgstr ""

#: ../../../driver-api/firmware/request_firmware.rst:67
msgid "firmware_request_cache()"
msgstr ""

#: ../../../driver-api/firmware/request_firmware:68:
#: drivers/base/firmware_loader/main.c:1041
msgid "cache firmware for suspend so resume can use it"
msgstr ""

#: ../../../driver-api/firmware/request_firmware:68:
#: drivers/base/firmware_loader/main.c:1042
msgid "device for which firmware should be cached for"
msgstr ""

#: ../../../driver-api/firmware/request_firmware:68:
#: drivers/base/firmware_loader/main.c:1044
msgid ""
"There are some devices with an optimization that enables the device to not "
"require loading firmware on system reboot. This optimization may still "
"require the firmware present on resume from suspend. This routine can be "
"used to ensure the firmware is present on resume from suspend in these "
"situations. This helper is not compatible with drivers which use "
"request_firmware_into_buf() or request_firmware_nowait() with no uevent set."
msgstr ""

#: ../../../driver-api/firmware/request_firmware.rst:72
msgid "request firmware API expected driver use"
msgstr ""

#: ../../../driver-api/firmware/request_firmware.rst:74
msgid ""
"Once an API call returns you process the firmware and then release the "
"firmware. For example if you used request_firmware() and it returns, the "
"driver has the firmware image accessible in fw_entry->{data,size}. If "
"something went wrong request_firmware() returns non-zero and fw_entry is set "
"to NULL. Once your driver is done with processing the firmware it can call "
"release_firmware(fw_entry) to release the firmware image and any related "
"resource."
msgstr ""
