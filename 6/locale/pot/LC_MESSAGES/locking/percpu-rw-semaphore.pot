# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../locking/percpu-rw-semaphore.rst:3
msgid "Percpu rw semaphores"
msgstr ""

#: ../../../locking/percpu-rw-semaphore.rst:5
msgid ""
"Percpu rw semaphores is a new read-write semaphore design that is optimized "
"for locking for reading."
msgstr ""

#: ../../../locking/percpu-rw-semaphore.rst:8
msgid ""
"The problem with traditional read-write semaphores is that when multiple "
"cores take the lock for reading, the cache line containing the semaphore is "
"bouncing between L1 caches of the cores, causing performance degradation."
msgstr ""

#: ../../../locking/percpu-rw-semaphore.rst:13
msgid ""
"Locking for reading is very fast, it uses RCU and it avoids any atomic "
"instruction in the lock and unlock path. On the other hand, locking for "
"writing is very expensive, it calls synchronize_rcu() that can take hundreds "
"of milliseconds."
msgstr ""

#: ../../../locking/percpu-rw-semaphore.rst:18
msgid ""
"The lock is declared with \"struct percpu_rw_semaphore\" type. The lock is "
"initialized with percpu_init_rwsem, it returns 0 on success and -ENOMEM on "
"allocation failure. The lock must be freed with percpu_free_rwsem to avoid "
"memory leak."
msgstr ""

#: ../../../locking/percpu-rw-semaphore.rst:23
msgid ""
"The lock is locked for read with percpu_down_read, percpu_up_read and for "
"write with percpu_down_write, percpu_up_write."
msgstr ""

#: ../../../locking/percpu-rw-semaphore.rst:26
msgid ""
"The idea of using RCU for optimized rw-lock was introduced by Eric Dumazet "
"<eric.dumazet@gmail.com>. The code was written by Mikulas Patocka "
"<mpatocka@redhat.com>"
msgstr ""
