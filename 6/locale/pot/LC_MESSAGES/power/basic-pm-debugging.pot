# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../power/basic-pm-debugging.rst:3
msgid "Debugging hibernation and suspend"
msgstr ""

#: ../../../power/basic-pm-debugging.rst:5
msgid "2007 Rafael J. Wysocki <rjw@sisk.pl>, GPL"
msgstr ""

#: ../../../power/basic-pm-debugging.rst:8
msgid "1. Testing hibernation (aka suspend to disk or STD)"
msgstr ""

#: ../../../power/basic-pm-debugging.rst:10
msgid ""
"To check if hibernation works, you can try to hibernate in the \"reboot\" "
"mode::"
msgstr ""

#: ../../../power/basic-pm-debugging.rst:15
msgid ""
"and the system should create a hibernation image, reboot, resume and get "
"back to the command prompt where you have started the transition.  If that "
"happens, hibernation is most likely to work correctly.  Still, you need to "
"repeat the test at least a couple of times in a row for confidence.  [This "
"is necessary, because some problems only show up on a second attempt at "
"suspending and resuming the system.]  Moreover, hibernating in the "
"\"reboot\" and \"shutdown\" modes causes the PM core to skip some platform-"
"related callbacks which on ACPI systems might be necessary to make "
"hibernation work.  Thus, if your machine fails to hibernate or resume in the "
"\"reboot\" mode, you should try the \"platform\" mode::"
msgstr ""

#: ../../../power/basic-pm-debugging.rst:29
msgid "which is the default and recommended mode of hibernation."
msgstr ""

#: ../../../power/basic-pm-debugging.rst:31
msgid ""
"Unfortunately, the \"platform\" mode of hibernation does not work on some "
"systems with broken BIOSes.  In such cases the \"shutdown\" mode of "
"hibernation might work::"
msgstr ""

#: ../../../power/basic-pm-debugging.rst:38
msgid ""
"(it is similar to the \"reboot\" mode, but it requires you to press the "
"power button to make the system resume)."
msgstr ""

#: ../../../power/basic-pm-debugging.rst:41
msgid ""
"If neither \"platform\" nor \"shutdown\" hibernation mode works, you will "
"need to identify what goes wrong."
msgstr ""

#: ../../../power/basic-pm-debugging.rst:45
msgid "a) Test modes of hibernation"
msgstr ""

#: ../../../power/basic-pm-debugging.rst:47
msgid ""
"To find out why hibernation fails on your system, you can use a special "
"testing facility available if the kernel is compiled with CONFIG_PM_DEBUG "
"set.  Then, there is the file /sys/power/pm_test that can be used to make "
"the hibernation core run in a test mode.  There are 5 test modes available:"
msgstr ""

#: ../../../power/basic-pm-debugging.rst:52
msgid "freezer"
msgstr ""

#: ../../../power/basic-pm-debugging.rst:53
msgid "test the freezing of processes"
msgstr ""

#: ../../../power/basic-pm-debugging.rst:55
msgid "devices"
msgstr ""

#: ../../../power/basic-pm-debugging.rst:56
msgid "test the freezing of processes and suspending of devices"
msgstr ""

#: ../../../power/basic-pm-debugging.rst:58
msgid "platform"
msgstr ""

#: ../../../power/basic-pm-debugging.rst:59
msgid ""
"test the freezing of processes, suspending of devices and platform global "
"control methods [1]_"
msgstr ""

#: ../../../power/basic-pm-debugging.rst:62
msgid "processors"
msgstr ""

#: ../../../power/basic-pm-debugging.rst:63
msgid ""
"test the freezing of processes, suspending of devices, platform global "
"control methods [1]_ and the disabling of nonboot CPUs"
msgstr ""

#: ../../../power/basic-pm-debugging.rst:66
msgid "core"
msgstr ""

#: ../../../power/basic-pm-debugging.rst:67
msgid ""
"test the freezing of processes, suspending of devices, platform global "
"control methods\\ [1]_, the disabling of nonboot CPUs and suspending of "
"platform/system devices"
msgstr ""

#: ../../../power/basic-pm-debugging.rst:73
msgid ""
"the platform global control methods are only available on ACPI systems and "
"are only tested if the hibernation mode is set to \"platform\""
msgstr ""

#: ../../../power/basic-pm-debugging.rst:76
msgid ""
"To use one of them it is necessary to write the corresponding string to /sys/"
"power/pm_test (eg. \"devices\" to test the freezing of processes and "
"suspending devices) and issue the standard hibernation commands.  For "
"example, to use the \"devices\" test mode along with the \"platform\" mode "
"of hibernation, you should do the following::"
msgstr ""

#: ../../../power/basic-pm-debugging.rst:86
msgid ""
"Then, the kernel will try to freeze processes, suspend devices, wait a few "
"seconds (5 by default, but configurable by the suspend.pm_test_delay module "
"parameter), resume devices and thaw processes.  If \"platform\" is written "
"to /sys/power/pm_test , then after suspending devices the kernel will "
"additionally invoke the global control methods (eg. ACPI global control "
"methods) used to prepare the platform firmware for hibernation.  Next, it "
"will wait a configurable number of seconds and invoke the platform (eg. "
"ACPI) global methods used to cancel hibernation etc."
msgstr ""

#: ../../../power/basic-pm-debugging.rst:95
msgid ""
"Writing \"none\" to /sys/power/pm_test causes the kernel to switch to the "
"normal hibernation/suspend operations.  Also, when open for reading, /sys/"
"power/pm_test contains a space-separated list of all available tests "
"(including \"none\" that represents the normal functionality) in which the "
"current test level is indicated by square brackets."
msgstr ""

#: ../../../power/basic-pm-debugging.rst:101
msgid ""
"Generally, as you can see, each test level is more \"invasive\" than the "
"previous one and the \"core\" level tests the hardware and drivers as deeply "
"as possible without creating a hibernation image.  Obviously, if the "
"\"devices\" test fails, the \"platform\" test will fail as well and so on.  "
"Thus, as a rule of thumb, you should try the test modes starting from "
"\"freezer\", through \"devices\", \"platform\" and \"processors\" up to "
"\"core\" (repeat the test on each level a couple of times to make sure that "
"any random factors are avoided)."
msgstr ""

#: ../../../power/basic-pm-debugging.rst:109
msgid ""
"If the \"freezer\" test fails, there is a task that cannot be frozen (in "
"that case it usually is possible to identify the offending task by analysing "
"the output of dmesg obtained after the failing test).  Failure at this level "
"usually means that there is a problem with the tasks freezer subsystem that "
"should be reported."
msgstr ""

#: ../../../power/basic-pm-debugging.rst:115
msgid ""
"If the \"devices\" test fails, most likely there is a driver that cannot "
"suspend or resume its device (in the latter case the system may hang or "
"become unstable after the test, so please take that into consideration).  To "
"find this driver, you can carry out a binary search according to the rules:"
msgstr ""

#: ../../../power/basic-pm-debugging.rst:120
msgid ""
"if the test fails, unload a half of the drivers currently loaded and repeat "
"(that would probably involve rebooting the system, so always note what "
"drivers have been loaded before the test),"
msgstr ""

#: ../../../power/basic-pm-debugging.rst:123
msgid ""
"if the test succeeds, load a half of the drivers you have unloaded most "
"recently and repeat."
msgstr ""

#: ../../../power/basic-pm-debugging.rst:126
msgid ""
"Once you have found the failing driver (there can be more than just one of "
"them), you have to unload it every time before hibernation.  In that case "
"please make sure to report the problem with the driver."
msgstr ""

#: ../../../power/basic-pm-debugging.rst:130
msgid ""
"It is also possible that the \"devices\" test will still fail after you have "
"unloaded all modules. In that case, you may want to look in your kernel "
"configuration for the drivers that can be compiled as modules (and test "
"again with these drivers compiled as modules).  You may also try to use some "
"special kernel command line options such as \"noapic\", \"noacpi\" or even "
"\"acpi=off\"."
msgstr ""

#: ../../../power/basic-pm-debugging.rst:136
msgid ""
"If the \"platform\" test fails, there is a problem with the handling of the "
"platform (eg. ACPI) firmware on your system.  In that case the \"platform\" "
"mode of hibernation is not likely to work.  You can try the \"shutdown\" "
"mode, but that is rather a poor man's workaround."
msgstr ""

#: ../../../power/basic-pm-debugging.rst:141
msgid ""
"If the \"processors\" test fails, the disabling/enabling of nonboot CPUs "
"does not work (of course, this only may be an issue on SMP systems) and the "
"problem should be reported.  In that case you can also try to switch the "
"nonboot CPUs off and on using the /sys/devices/system/cpu/cpu*/online sysfs "
"attributes and see if that works."
msgstr ""

#: ../../../power/basic-pm-debugging.rst:147
msgid ""
"If the \"core\" test fails, which means that suspending of the system/"
"platform devices has failed (these devices are suspended on one CPU with "
"interrupts off), the problem is most probably hardware-related and serious, "
"so it should be reported."
msgstr ""

#: ../../../power/basic-pm-debugging.rst:152
msgid ""
"A failure of any of the \"platform\", \"processors\" or \"core\" tests may "
"cause your system to hang or become unstable, so please beware.  Such a "
"failure usually indicates a serious problem that very well may be related to "
"the hardware, but please report it anyway."
msgstr ""

#: ../../../power/basic-pm-debugging.rst:158
msgid "b) Testing minimal configuration"
msgstr ""

#: ../../../power/basic-pm-debugging.rst:160
msgid ""
"If all of the hibernation test modes work, you can boot the system with the "
"\"init=/bin/bash\" command line parameter and attempt to hibernate in the "
"\"reboot\", \"shutdown\" and \"platform\" modes.  If that does not work, "
"there probably is a problem with a driver statically compiled into the "
"kernel and you can try to compile more drivers as modules, so that they can "
"be tested individually.  Otherwise, there is a problem with a modular driver "
"and you can find it by loading a half of the modules you normally use and "
"binary searching in accordance with the algorithm: - if there are n modules "
"loaded and the attempt to suspend and resume fails, unload n/2 of the "
"modules and try again (that would probably involve rebooting the system), - "
"if there are n modules loaded and the attempt to suspend and resume "
"succeeds, load n/2 modules more and try again."
msgstr ""

#: ../../../power/basic-pm-debugging.rst:174
msgid ""
"Again, if you find the offending module(s), it(they) must be unloaded every "
"time before hibernation, and please report the problem with it(them)."
msgstr ""

#: ../../../power/basic-pm-debugging.rst:178
msgid "c) Using the \"test_resume\" hibernation option"
msgstr ""

#: ../../../power/basic-pm-debugging.rst:180
msgid ""
"/sys/power/disk generally tells the kernel what to do after creating a "
"hibernation image.  One of the available options is \"test_resume\" which "
"causes the just created image to be used for immediate restoration.  Namely, "
"after doing::"
msgstr ""

#: ../../../power/basic-pm-debugging.rst:188
msgid ""
"a hibernation image will be created and a resume from it will be triggered "
"immediately without involving the platform firmware in any way."
msgstr ""

#: ../../../power/basic-pm-debugging.rst:191
msgid ""
"That test can be used to check if failures to resume from hibernation are "
"related to bad interactions with the platform firmware.  That is, if the "
"above works every time, but resume from actual hibernation does not work or "
"is unreliable, the platform firmware may be responsible for the failures."
msgstr ""

#: ../../../power/basic-pm-debugging.rst:196
msgid ""
"On architectures and platforms that support using different kernels to "
"restore hibernation images (that is, the kernel used to read the image from "
"storage and load it into memory is different from the one included in the "
"image) or support kernel address space randomization, it also can be used to "
"check if failures to resume may be related to the differences between the "
"restore and image kernels."
msgstr ""

#: ../../../power/basic-pm-debugging.rst:204
msgid "d) Advanced debugging"
msgstr ""

#: ../../../power/basic-pm-debugging.rst:206
msgid ""
"In case that hibernation does not work on your system even in the minimal "
"configuration and compiling more drivers as modules is not practical or some "
"modules cannot be unloaded, you can use one of the more advanced debugging "
"techniques to find the problem.  First, if there is a serial port in your "
"box, you can boot the kernel with the 'no_console_suspend' parameter and try "
"to log kernel messages using the serial console.  This may provide you with "
"some information about the reasons of the suspend (resume) failure.  "
"Alternatively, it may be possible to use a FireWire port for debugging with "
"firescope (http://v3.sk/~lkundrak/firescope/).  On x86 it is also possible "
"to use the PM_TRACE mechanism documented in Documentation/power/s2ram.rst ."
msgstr ""

#: ../../../power/basic-pm-debugging.rst:218
msgid "2. Testing suspend to RAM (STR)"
msgstr ""

#: ../../../power/basic-pm-debugging.rst:220
msgid ""
"To verify that the STR works, it is generally more convenient to use the "
"s2ram tool available from http://suspend.sf.net and documented at http://en."
"opensuse.org/SDB:Suspend_to_RAM (S2RAM_LINK)."
msgstr ""

#: ../../../power/basic-pm-debugging.rst:224
msgid ""
"Namely, after writing \"freezer\", \"devices\", \"platform\", "
"\"processors\", or \"core\" into /sys/power/pm_test (available if the kernel "
"is compiled with CONFIG_PM_DEBUG set) the suspend code will work in the test "
"mode corresponding to given string.  The STR test modes are defined in the "
"same way as for hibernation, so please refer to Section 1 for more "
"information about them.  In particular, the \"core\" test allows you to test "
"everything except for the actual invocation of the platform firmware in "
"order to put the system into the sleep state."
msgstr ""

#: ../../../power/basic-pm-debugging.rst:233
msgid ""
"Among other things, the testing with the help of /sys/power/pm_test may "
"allow you to identify drivers that fail to suspend or resume their devices.  "
"They should be unloaded every time before an STR transition."
msgstr ""

#: ../../../power/basic-pm-debugging.rst:237
msgid ""
"Next, you can follow the instructions at S2RAM_LINK to test the system, but "
"if it does not work \"out of the box\", you may need to boot it with \"init=/"
"bin/bash\" and test s2ram in the minimal configuration.  In that case, you "
"may be able to search for failing drivers by following the procedure "
"analogous to the one described in section 1.  If you find some failing "
"drivers, you will have to unload them every time before an STR transition "
"(ie. before you run s2ram), and please report the problems with them."
msgstr ""

#: ../../../power/basic-pm-debugging.rst:245
msgid ""
"There is a debugfs entry which shows the suspend to RAM statistics. Here is "
"an example of its output::"
msgstr ""

#: ../../../power/basic-pm-debugging.rst:266
msgid ""
"Field success means the success number of suspend to RAM, and field fail "
"means the failure number. Others are the failure number of different steps "
"of suspend to RAM. suspend_stats just lists the last 2 failed devices, error "
"number and failed step of suspend."
msgstr ""
