# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../userspace-api/media/v4l/crop.rst:7
msgid "Image Cropping, Insertion and Scaling -- the CROP API"
msgstr ""

#: ../../../userspace-api/media/v4l/crop.rst:11
msgid ""
"The CROP API is mostly superseded by the newer :ref:`SELECTION API "
"<selection-api>`. The new API should be preferred in most cases, with the "
"exception of pixel aspect ratio detection, which is implemented by :ref:"
"`VIDIOC_CROPCAP <VIDIOC_CROPCAP>` and has no equivalent in the SELECTION "
"API. See :ref:`selection-vs-crop` for a comparison of the two APIs."
msgstr ""

#: ../../../userspace-api/media/v4l/crop.rst:18
msgid ""
"Some video capture devices can sample a subsection of the picture and shrink "
"or enlarge it to an image of arbitrary size. We call these abilities "
"cropping and scaling. Some video output devices can scale an image up or "
"down and insert it at an arbitrary scan line and horizontal offset into a "
"video signal."
msgstr ""

#: ../../../userspace-api/media/v4l/crop.rst:24
msgid ""
"Applications can use the following API to select an area in the video "
"signal, query the default area and the hardware limits."
msgstr ""

#: ../../../userspace-api/media/v4l/crop.rst:29
msgid ""
"Despite their name, the :ref:`VIDIOC_CROPCAP <VIDIOC_CROPCAP>`, :ref:"
"`VIDIOC_G_CROP <VIDIOC_G_CROP>` and :ref:`VIDIOC_S_CROP <VIDIOC_G_CROP>` "
"ioctls apply to input as well as output devices."
msgstr ""

#: ../../../userspace-api/media/v4l/crop.rst:33
msgid ""
"Scaling requires a source and a target. On a video capture or overlay device "
"the source is the video signal, and the cropping ioctls determine the area "
"actually sampled. The target are images read by the application or overlaid "
"onto the graphics screen. Their size (and position for an overlay) is "
"negotiated with the :ref:`VIDIOC_G_FMT <VIDIOC_G_FMT>` and :ref:"
"`VIDIOC_S_FMT <VIDIOC_G_FMT>` ioctls."
msgstr ""

#: ../../../userspace-api/media/v4l/crop.rst:40
msgid ""
"On a video output device the source are the images passed in by the "
"application, and their size is again negotiated with the :ref:`VIDIOC_G_FMT "
"<VIDIOC_G_FMT>` and :ref:`VIDIOC_S_FMT <VIDIOC_G_FMT>` ioctls, or may be "
"encoded in a compressed video stream. The target is the video signal, and "
"the cropping ioctls determine the area where the images are inserted."
msgstr ""

#: ../../../userspace-api/media/v4l/crop.rst:47
msgid ""
"Source and target rectangles are defined even if the device does not support "
"scaling or the :ref:`VIDIOC_G_CROP <VIDIOC_G_CROP>` and :ref:`VIDIOC_S_CROP "
"<VIDIOC_G_CROP>` ioctls. Their size (and position where applicable) will be "
"fixed in this case."
msgstr ""

#: ../../../userspace-api/media/v4l/crop.rst:54
msgid ""
"All capture and output devices that support the CROP or SELECTION API will "
"also support the :ref:`VIDIOC_CROPCAP <VIDIOC_CROPCAP>` ioctl."
msgstr ""

#: ../../../userspace-api/media/v4l/crop.rst:59
msgid "Cropping Structures"
msgstr ""

#: ../../../userspace-api/media/v4l/crop.rst:64
msgid "crop.svg"
msgstr ""

#: ../../../userspace-api/media/v4l/crop.rst:68
msgid "Image Cropping, Insertion and Scaling"
msgstr ""

#: ../../../userspace-api/media/v4l/crop.rst:70
msgid "The cropping, insertion and scaling process"
msgstr ""

#: ../../../userspace-api/media/v4l/crop.rst:74
msgid ""
"For capture devices the coordinates of the top left corner, width and height "
"of the area which can be sampled is given by the ``bounds`` substructure of "
"the struct :c:type:`v4l2_cropcap` returned by the :ref:`VIDIOC_CROPCAP "
"<VIDIOC_CROPCAP>` ioctl. To support a wide range of hardware this "
"specification does not define an origin or units. However by convention "
"drivers should horizontally count unscaled samples relative to 0H (the "
"leading edge of the horizontal sync pulse, see :ref:`vbi-hsync`). Vertically "
"ITU-R line numbers of the first field (see ITU R-525 line numbering for :ref:"
"`525 lines <vbi-525>` and for :ref:`625 lines <vbi-625>`), multiplied by two "
"if the driver can capture both fields."
msgstr ""

#: ../../../userspace-api/media/v4l/crop.rst:86
msgid ""
"The top left corner, width and height of the source rectangle, that is the "
"area actually sampled, is given by struct :c:type:`v4l2_crop` using the same "
"coordinate system as struct :c:type:`v4l2_cropcap`. Applications can use "
"the :ref:`VIDIOC_G_CROP <VIDIOC_G_CROP>` and :ref:`VIDIOC_S_CROP "
"<VIDIOC_G_CROP>` ioctls to get and set this rectangle. It must lie "
"completely within the capture boundaries and the driver may further adjust "
"the requested size and/or position according to hardware limitations."
msgstr ""

#: ../../../userspace-api/media/v4l/crop.rst:95
msgid ""
"Each capture device has a default source rectangle, given by the ``defrect`` "
"substructure of struct :c:type:`v4l2_cropcap`. The center of this rectangle "
"shall align with the center of the active picture area of the video signal, "
"and cover what the driver writer considers the complete picture. Drivers "
"shall reset the source rectangle to the default when the driver is first "
"loaded, but not later."
msgstr ""

#: ../../../userspace-api/media/v4l/crop.rst:103
msgid ""
"For output devices these structures and ioctls are used accordingly, "
"defining the *target* rectangle where the images will be inserted into the "
"video signal."
msgstr ""

#: ../../../userspace-api/media/v4l/crop.rst:109
msgid "Scaling Adjustments"
msgstr ""

#: ../../../userspace-api/media/v4l/crop.rst:111
msgid ""
"Video hardware can have various cropping, insertion and scaling limitations. "
"It may only scale up or down, support only discrete scaling factors, or have "
"different scaling abilities in horizontal and vertical direction. Also it "
"may not support scaling at all. At the same time the struct :c:type:"
"`v4l2_crop` rectangle may have to be aligned, and both the source and target "
"rectangles may have arbitrary upper and lower size limits. In particular the "
"maximum ``width`` and ``height`` in struct :c:type:`v4l2_crop` may be "
"smaller than the struct :c:type:`v4l2_cropcap`. ``bounds`` area. Therefore, "
"as usual, drivers are expected to adjust the requested parameters and return "
"the actual values selected."
msgstr ""

#: ../../../userspace-api/media/v4l/crop.rst:123
msgid ""
"Applications can change the source or the target rectangle first, as they "
"may prefer a particular image size or a certain area in the video signal. If "
"the driver has to adjust both to satisfy hardware limitations, the last "
"requested rectangle shall take priority, and the driver should preferably "
"adjust the opposite one. The :ref:`VIDIOC_TRY_FMT <VIDIOC_G_FMT>` ioctl "
"however shall not change the driver state and therefore only adjust the "
"requested rectangle."
msgstr ""

#: ../../../userspace-api/media/v4l/crop.rst:131
msgid ""
"Suppose scaling on a video capture device is restricted to a factor 1:1 or "
"2:1 in either direction and the target image size must be a multiple of 16 × "
"16 pixels. The source cropping rectangle is set to defaults, which are also "
"the upper limit in this example, of 640 × 400 pixels at offset 0, 0. An "
"application requests an image size of 300 × 225 pixels, assuming video will "
"be scaled down from the \"full picture\" accordingly. The driver sets the "
"image size to the closest possible values 304 × 224, then chooses the "
"cropping rectangle closest to the requested size, that is 608 × 224 (224 × "
"2:1 would exceed the limit 400). The offset 0, 0 is still valid, thus "
"unmodified. Given the default cropping rectangle reported by :ref:"
"`VIDIOC_CROPCAP <VIDIOC_CROPCAP>` the application can easily propose another "
"offset to center the cropping rectangle."
msgstr ""

#: ../../../userspace-api/media/v4l/crop.rst:144
msgid ""
"Now the application may insist on covering an area using a picture aspect "
"ratio closer to the original request, so it asks for a cropping rectangle of "
"608 × 456 pixels. The present scaling factors limit cropping to 640 × 384, "
"so the driver returns the cropping size 608 × 384 and adjusts the image size "
"to closest possible 304 × 192."
msgstr ""

#: ../../../userspace-api/media/v4l/crop.rst:152
msgid "Examples"
msgstr ""

#: ../../../userspace-api/media/v4l/crop.rst:154
msgid ""
"Source and target rectangles shall remain unchanged across closing and "
"reopening a device, such that piping data into or out of a device will work "
"without special preparations. More advanced applications should ensure the "
"parameters are suitable before starting I/O."
msgstr ""

#: ../../../userspace-api/media/v4l/crop.rst:161
msgid ""
"On the next two examples, a video capture device is assumed; change "
"``V4L2_BUF_TYPE_VIDEO_CAPTURE`` for other types of device."
msgstr ""

#: ../../../userspace-api/media/v4l/crop.rst:165
msgid "Example: Resetting the cropping parameters"
msgstr ""

#: ../../../userspace-api/media/v4l/crop.rst:194
msgid "Example: Simple downscaling"
msgstr ""

#: ../../../userspace-api/media/v4l/crop.rst:222
msgid "Example: Selecting an output area"
msgstr ""

#: ../../../userspace-api/media/v4l/crop.rst:224
msgid "This example assumes an output device."
msgstr ""

#: ../../../userspace-api/media/v4l/crop.rst:261
msgid "Example: Current scaling factor and pixel aspect"
msgstr ""

#: ../../../userspace-api/media/v4l/crop.rst:263
msgid "This example assumes a video capture device."
msgstr ""
