# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-21 08:55+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../networking/psp.rst:5
msgid "PSP Security Protocol"
msgstr ""

#: ../../../networking/psp.rst:8
msgid "Protocol"
msgstr ""

#: ../../../networking/psp.rst:10
msgid "PSP Security Protocol (PSP) was defined at Google and published in:"
msgstr ""

#: ../../../networking/psp.rst:12
msgid "https://raw.githubusercontent.com/google/psp/main/doc/PSP_Arch_Spec.pdf"
msgstr ""

#: ../../../networking/psp.rst:14
msgid ""
"This section briefly covers protocol aspects crucial for understanding the "
"kernel API. Refer to the protocol specification for further details."
msgstr ""

#: ../../../networking/psp.rst:17
msgid ""
"Note that the kernel implementation and documentation uses the term \"device "
"key\" in place of \"master key\", it is both less confusing to an average "
"developer and is less likely to run afoul any naming guidelines."
msgstr ""

#: ../../../networking/psp.rst:23
msgid "Derived Rx keys"
msgstr ""

#: ../../../networking/psp.rst:25
msgid ""
"PSP borrows some terms and mechanisms from IPsec. PSP was designed with HW "
"offloads in mind. The key feature of PSP is that Rx keys for every "
"connection do not have to be stored by the receiver but can be derived from "
"device key and information present in packet headers. This makes it possible "
"to implement receivers which require a constant amount of memory regardless "
"of the number of connections (``O(1)`` scaling)."
msgstr ""

#: ../../../networking/psp.rst:32
msgid ""
"Tx keys have to be stored like with any other protocol, but Tx is much less "
"latency sensitive than Rx, and delays in fetching keys from slow memory is "
"less likely to cause packet drops. Preferably, the Tx keys should be "
"provided with the packet (e.g. as part of the descriptors)."
msgstr ""

#: ../../../networking/psp.rst:38
msgid "Key rotation"
msgstr ""

#: ../../../networking/psp.rst:40
msgid ""
"The device key known only to the receiver is fundamental to the design. Per "
"specification this state cannot be directly accessible (it must be "
"impossible to read it out of the hardware of the receiver NIC). Moreover, it "
"has to be \"rotated\" periodically (usually daily). Rotation means that new "
"device key gets generated (by a random number generator of the device), and "
"used for all new connections. To avoid disrupting old connections the old "
"device key remains in the NIC. A phase bit carried in the packet headers "
"indicates which generation of device key the packet has been encrypted with."
msgstr ""

#: ../../../networking/psp.rst:51
msgid "User facing API"
msgstr ""

#: ../../../networking/psp.rst:53
msgid ""
"PSP is designed primarily for hardware offloads. There is currently no "
"software fallback for systems which do not have PSP capable NICs. There is "
"also no standard (or otherwise defined) way of establishing a PSP-secured "
"connection or exchanging the symmetric keys."
msgstr ""

#: ../../../networking/psp.rst:58
msgid ""
"The expectation is that higher layer protocols will take care of protocol "
"and key negotiation. For example one may use TLS key exchange, announce the "
"PSP capability, and switch to PSP if both endpoints are PSP-capable."
msgstr ""

#: ../../../networking/psp.rst:63
msgid "All configuration of PSP is performed via the PSP netlink family."
msgstr ""

#: ../../../networking/psp.rst:66
msgid "Device discovery"
msgstr ""

#: ../../../networking/psp.rst:68
msgid ""
"The PSP netlink family defines operations to retrieve information about the "
"PSP devices available on the system, configure them and access PSP related "
"statistics."
msgstr ""

#: ../../../networking/psp.rst:73
msgid "Securing a connection"
msgstr ""

#: ../../../networking/psp.rst:75
msgid ""
"PSP encryption is currently only supported for TCP connections. Rx and Tx "
"keys are allocated separately. First the ``rx-assoc`` Netlink command needs "
"to be issued, specifying a target TCP socket. Kernel will allocate a new PSP "
"Rx key from the NIC and associate it with given socket. At this stage socket "
"will accept both PSP-secured and plain text TCP packets."
msgstr ""

#: ../../../networking/psp.rst:82
msgid ""
"Tx keys are installed using the ``tx-assoc`` Netlink command. Once the Tx "
"keys are installed, all data read from the socket will be PSP-secured. In "
"other words act of installing Tx keys has a secondary effect on the Rx "
"direction."
msgstr ""

#: ../../../networking/psp.rst:87
msgid ""
"There is an intermediate period after ``tx-assoc`` successfully returns and "
"before the TCP socket encounters it's first PSP authenticated packet, where "
"the TCP stack will allow certain nondata packets, i.e. ACKs, FINs, and RSTs, "
"to enter TCP receive processing even if not PSP authenticated. During the "
"``tx-assoc`` call, the TCP socket's ``rcv_nxt`` field is recorded. At this "
"point, ACKs and RSTs will be accepted with any sequence number, while FINs "
"will only be accepted at the latched value of ``rcv_nxt``. Once the TCP "
"stack encounters the first TCP packet containing PSP authenticated data, the "
"other end of the connection must have executed the ``tx-assoc`` command, so "
"any TCP packet, including those without data, will be dropped before receive "
"processing if it is not successfully authenticated. This is summarized in "
"the table below. The aforementioned state of rejecting all non-PSP packets "
"is labeled \"PSP Full\"."
msgstr ""

#: ../../../networking/psp.rst:104
msgid "Event"
msgstr ""

#: ../../../networking/psp.rst:104
msgid "Normal TCP"
msgstr ""

#: ../../../networking/psp.rst:104
msgid "Rx PSP"
msgstr ""

#: ../../../networking/psp.rst:104
msgid "Tx PSP"
msgstr ""

#: ../../../networking/psp.rst:104
msgid "PSP Full"
msgstr ""

#: ../../../networking/psp.rst:106
msgid "Rx plain (data)"
msgstr ""

#: ../../../networking/psp.rst:106 ../../../networking/psp.rst:109
#: ../../../networking/psp.rst:112
msgid "accept"
msgstr ""

#: ../../../networking/psp.rst:106 ../../../networking/psp.rst:109
#: ../../../networking/psp.rst:112 ../../../networking/psp.rst:114
msgid "drop"
msgstr ""

#: ../../../networking/psp.rst:109
msgid "Rx plain (ACK|FIN|RST)"
msgstr ""

#: ../../../networking/psp.rst:112
msgid "Rx PSP (good)"
msgstr ""

#: ../../../networking/psp.rst:114
msgid "Rx PSP (bad crypt, !=SPI)"
msgstr ""

#: ../../../networking/psp.rst:117
msgid "Tx"
msgstr ""

#: ../../../networking/psp.rst:117
msgid "plain text"
msgstr ""

#: ../../../networking/psp.rst:117
msgid "encrypted (excl. rtx)"
msgstr ""

#: ../../../networking/psp.rst:121
msgid ""
"To ensure that any data read from the socket after the ``tx-assoc`` call "
"returns success has been authenticated, the kernel will scan the receive and "
"ofo queues of the socket at ``tx-assoc`` time. If any enqueued packet was "
"received in clear text, the Tx association will fail, and the application "
"should retry installing the Tx key after draining the socket (this should "
"not be necessary if both endpoints are well behaved)."
msgstr ""

#: ../../../networking/psp.rst:129
msgid ""
"Because TCP sequence numbers are not integrity protected prior to upgrading "
"to PSP, it is possible that a MITM could offset sequence numbers in a way "
"that deletes a prefix of the PSP protected part of the TCP stream. If "
"userspace cares to mitigate this type of attack, a special \"start of PSP\" "
"message should be exchanged after ``tx-assoc``."
msgstr ""

#: ../../../networking/psp.rst:136
msgid "Rotation notifications"
msgstr ""

#: ../../../networking/psp.rst:138
msgid ""
"The rotations of device key happen asynchronously and are usually performed "
"by management daemons, not under application control. The PSP netlink family "
"will generate a notification whenever keys are rotated. The applications are "
"expected to re-establish connections before keys are rotated again."
msgstr ""

#: ../../../networking/psp.rst:145
msgid "Kernel implementation"
msgstr ""

#: ../../../networking/psp.rst:148
msgid "Driver notes"
msgstr ""

#: ../../../networking/psp.rst:150
msgid ""
"Drivers are expected to start with no PSP enabled (``psp-versions-ena`` in "
"``dev-get`` set to ``0``) whenever possible. The user space should not "
"depend on this behavior, as future extension may necessitate creation of "
"devices with PSP already enabled, nonetheless drivers should not enable PSP "
"by default. Enabling PSP should be the responsibility of the system "
"component which also takes care of key rotation."
msgstr ""

#: ../../../networking/psp.rst:157
msgid ""
"Note that ``psp-versions-ena`` is expected to be used only for enabling "
"receive processing. The device is not expected to reject transmit requests "
"after ``psp-versions-ena`` has been disabled. User may also disable ``psp-"
"versions-ena`` while there are active associations, which will break all PSP "
"Rx processing."
msgstr ""

#: ../../../networking/psp.rst:163
msgid ""
"Drivers are expected to ensure that a device key is usable and secure upon "
"init, without explicit key rotation by the user space. It must be possible "
"to allocate working keys, and that no duplicate keys must be generated. If "
"the device allows the host to request the key for an arbitrary SPI - driver "
"should discard both device keys (rotate the device key twice), to avoid "
"potentially using a SPI+key which previous OS instance already had access to."
msgstr ""

#: ../../../networking/psp.rst:171
msgid ""
"Drivers must use ``psp_skb_get_assoc_rcu()`` to check if PSP Tx offload was "
"requested for given skb. On Rx drivers should allocate and populate the "
"``SKB_EXT_PSP`` skb extension, and set the skb->decrypted bit to 1."
msgstr ""

#: ../../../networking/psp.rst:176
msgid "Kernel implementation notes"
msgstr ""

#: ../../../networking/psp.rst:178
msgid ""
"PSP implementation follows the TLS offload more closely than the IPsec "
"offload, with per-socket state, and the use of skb->decrypted to prevent "
"clear text leaks."
msgstr ""

#: ../../../networking/psp.rst:182
msgid ""
"PSP device is separate from netdev, to make it possible to \"delegate\" PSP "
"offload capabilities to software devices (e.g. ``veth``)."
msgstr ""
