# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../devicetree/overlay-notes.rst:5
msgid "Devicetree Overlay Notes"
msgstr ""

#: ../../../devicetree/overlay-notes.rst:7
msgid ""
"This document describes the implementation of the in-kernel device tree "
"overlay functionality residing in drivers/of/overlay.c and is a companion "
"document to Documentation/devicetree/dynamic-resolution-notes.rst[1]"
msgstr ""

#: ../../../devicetree/overlay-notes.rst:12
msgid "How overlays work"
msgstr ""

#: ../../../devicetree/overlay-notes.rst:14
msgid ""
"A Devicetree's overlay purpose is to modify the kernel's live tree, and have "
"the modification affecting the state of the kernel in a way that is "
"reflecting the changes. Since the kernel mainly deals with devices, any new "
"device node that result in an active device should have it created while if "
"the device node is either disabled or removed all together, the affected "
"device should be deregistered."
msgstr ""

#: ../../../devicetree/overlay-notes.rst:21
msgid ""
"Lets take an example where we have a foo board with the following base tree::"
msgstr ""

#: ../../../devicetree/overlay-notes.rst:41
msgid "The overlay bar.dtso, ::"
msgstr ""

#: ../../../devicetree/overlay-notes.rst:56
msgid ""
"when loaded (and resolved as described in [1]) should result in foo+bar.dts::"
msgstr ""

#: ../../../devicetree/overlay-notes.rst:81
msgid ""
"As a result of the overlay, a new device node (bar) has been created so a "
"bar platform device will be registered and if a matching device driver is "
"loaded the device will be created as expected."
msgstr ""

#: ../../../devicetree/overlay-notes.rst:85
msgid ""
"If the base DT was not compiled with the -@ option then the \"&ocp\" label "
"will not be available to resolve the overlay node(s) to the proper location "
"in the base DT. In this case, the target path can be provided. The target "
"location by label syntax is preferred because the overlay can be applied to "
"any base DT containing the label, no matter where the label occurs in the DT."
msgstr ""

#: ../../../devicetree/overlay-notes.rst:91
msgid "The above bar.dtso example modified to use target path syntax is::"
msgstr ""

#: ../../../devicetree/overlay-notes.rst:107
msgid "Overlay in-kernel API"
msgstr ""

#: ../../../devicetree/overlay-notes.rst:109
msgid "The API is quite easy to use."
msgstr ""

#: ../../../devicetree/overlay-notes.rst:111
msgid ""
"Call of_overlay_fdt_apply() to create and apply an overlay changeset. The "
"return value is an error or a cookie identifying this overlay."
msgstr ""

#: ../../../devicetree/overlay-notes.rst:114
msgid ""
"Call of_overlay_remove() to remove and cleanup the overlay changeset "
"previously created via the call to of_overlay_fdt_apply(). Removal of an "
"overlay changeset that is stacked by another will not be permitted."
msgstr ""

#: ../../../devicetree/overlay-notes.rst:118
msgid ""
"Finally, if you need to remove all overlays in one-go, just call "
"of_overlay_remove_all() which will remove every single one in the correct "
"order."
msgstr ""

#: ../../../devicetree/overlay-notes.rst:122
msgid ""
"There is the option to register notifiers that get called on overlay "
"operations. See of_overlay_notifier_register/unregister and enum "
"of_overlay_notify_action for details."
msgstr ""

#: ../../../devicetree/overlay-notes.rst:126
msgid ""
"A notifier callback for OF_OVERLAY_PRE_APPLY, OF_OVERLAY_POST_APPLY, or "
"OF_OVERLAY_PRE_REMOVE may store pointers to a device tree node in the "
"overlay or its content but these pointers must not persist past the notifier "
"callback for OF_OVERLAY_POST_REMOVE.  The memory containing the overlay will "
"be kfree()ed after OF_OVERLAY_POST_REMOVE notifiers are called.  Note that "
"the memory will be kfree()ed even if the notifier for OF_OVERLAY_POST_REMOVE "
"returns an error."
msgstr ""

#: ../../../devicetree/overlay-notes.rst:134
msgid ""
"The changeset notifiers in drivers/of/dynamic.c are a second type of "
"notifier that could be triggered by applying or removing an overlay.  These "
"notifiers are not allowed to store pointers to a device tree node in the "
"overlay or its content.  The overlay code does not protect against such "
"pointers remaining active when the memory containing the overlay is freed as "
"a result of removing the overlay."
msgstr ""

#: ../../../devicetree/overlay-notes.rst:141
msgid ""
"Any other code that retains a pointer to the overlay nodes or data is "
"considered to be a bug because after removing the overlay the pointer will "
"refer to freed memory."
msgstr ""

#: ../../../devicetree/overlay-notes.rst:145
msgid ""
"Users of overlays must be especially aware of the overall operations that "
"occur on the system to ensure that other kernel code does not retain any "
"pointers to the overlay nodes or data.  Any example of an inadvertent use of "
"such pointers is if a driver or subsystem module is loaded after an overlay "
"has been applied, and the driver or subsystem scans the entire devicetree or "
"a large portion of it, including the overlay nodes."
msgstr ""
