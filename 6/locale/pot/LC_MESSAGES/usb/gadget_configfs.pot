# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../usb/gadget_configfs.rst:3
msgid "Linux USB gadget configured through configfs"
msgstr ""

#: ../../../usb/gadget_configfs.rst:6
msgid "25th April 2013"
msgstr ""

#: ../../../usb/gadget_configfs.rst:12
msgid "Overview"
msgstr ""

#: ../../../usb/gadget_configfs.rst:14
msgid ""
"A USB Linux Gadget is a device which has a UDC (USB Device Controller) and "
"can be connected to a USB Host to extend it with additional functions like a "
"serial port or a mass storage capability."
msgstr ""

#: ../../../usb/gadget_configfs.rst:18
msgid ""
"A gadget is seen by its host as a set of configurations, each of which "
"contains a number of interfaces which, from the gadget's perspective, are "
"known as functions, each function representing e.g. a serial connection or a "
"SCSI disk."
msgstr ""

#: ../../../usb/gadget_configfs.rst:22
msgid "Linux provides a number of functions for gadgets to use."
msgstr ""

#: ../../../usb/gadget_configfs.rst:24
msgid ""
"Creating a gadget means deciding what configurations there will be and which "
"functions each configuration will provide."
msgstr ""

#: ../../../usb/gadget_configfs.rst:27
msgid ""
"Configfs (please see `Documentation/filesystems/configfs.rst`) lends itself "
"nicely for the purpose of telling the kernel about the above mentioned "
"decision. This document is about how to do it."
msgstr ""

#: ../../../usb/gadget_configfs.rst:31
msgid "It also describes how configfs integration into gadget is designed."
msgstr ""

#: ../../../usb/gadget_configfs.rst:37
msgid "Requirements"
msgstr ""

#: ../../../usb/gadget_configfs.rst:39
msgid ""
"In order for this to work configfs must be available, so CONFIGFS_FS must be "
"'y' or 'm' in .config. As of this writing USB_LIBCOMPOSITE selects "
"CONFIGFS_FS."
msgstr ""

#: ../../../usb/gadget_configfs.rst:46
msgid "Usage"
msgstr ""

#: ../../../usb/gadget_configfs.rst:48
msgid ""
"(The original post describing the first function made available through "
"configfs can be seen here: http://www.spinics.net/lists/linux-usb/msg76388."
"html)"
msgstr ""

#: ../../../usb/gadget_configfs.rst:57
msgid "where CONFIGFS_HOME is the mount point for configfs"
msgstr ""

#: ../../../usb/gadget_configfs.rst:60
msgid "1. Creating the gadgets"
msgstr ""

#: ../../../usb/gadget_configfs.rst:62
msgid ""
"For each gadget to be created its corresponding directory must be created::"
msgstr ""

#: ../../../usb/gadget_configfs.rst:66 ../../../usb/gadget_configfs.rst:166
#: ../../../usb/gadget_configfs.rst:253 ../../../usb/gadget_configfs.rst:265
#: ../../../usb/gadget_configfs.rst:277 ../../../usb/gadget_configfs.rst:289
#: ../../../usb/gadget_configfs.rst:298
msgid "e.g.::"
msgstr ""

#: ../../../usb/gadget_configfs.rst:76
msgid ""
"Each gadget needs to have its vendor id <VID> and product id <PID> "
"specified::"
msgstr ""

#: ../../../usb/gadget_configfs.rst:81
msgid ""
"A gadget also needs its serial number, manufacturer and product strings. In "
"order to have a place to store them, a strings subdirectory must be created "
"for each language, e.g.::"
msgstr ""

#: ../../../usb/gadget_configfs.rst:87
msgid "Then the strings can be specified::"
msgstr ""

#: ../../../usb/gadget_configfs.rst:93
msgid ""
"Further custom string descriptors can be created as directories within the "
"language's directory, with the string text being written to the \"s\" "
"attribute within the string's directory::"
msgstr ""

#: ../../../usb/gadget_configfs.rst:100
msgid ""
"Where function drivers support it, functions may allow symlinks to these "
"custom string descriptors to associate those strings with class descriptors."
msgstr ""

#: ../../../usb/gadget_configfs.rst:104
msgid "2. Creating the configurations"
msgstr ""

#: ../../../usb/gadget_configfs.rst:106
msgid ""
"Each gadget will consist of a number of configurations, their corresponding "
"directories must be created::"
msgstr ""

#: ../../../usb/gadget_configfs.rst:111
msgid ""
"where <name> can be any string which is legal in a filesystem and the "
"<number> is the configuration's number, e.g.::"
msgstr ""

#: ../../../usb/gadget_configfs.rst:120
msgid ""
"Each configuration also needs its strings, so a subdirectory must be created "
"for each language, e.g.::"
msgstr ""

#: ../../../usb/gadget_configfs.rst:125
msgid "Then the configuration string can be specified::"
msgstr ""

#: ../../../usb/gadget_configfs.rst:129
msgid "Some attributes can also be set for a configuration, e.g.::"
msgstr ""

#: ../../../usb/gadget_configfs.rst:134
msgid "3. Creating the functions"
msgstr ""

#: ../../../usb/gadget_configfs.rst:136
msgid ""
"The gadget will provide some functions, for each function its corresponding "
"directory must be created::"
msgstr ""

#: ../../../usb/gadget_configfs.rst:141
msgid ""
"where <name> corresponds to one of allowed function names and instance name "
"is an arbitrary string allowed in a filesystem, e.g.::"
msgstr ""

#: ../../../usb/gadget_configfs.rst:150
msgid ""
"Each function provides its specific set of attributes, with either read-only "
"or read-write access. Where applicable they need to be written to as "
"appropriate. Please refer to Documentation/ABI/testing/configfs-usb-gadget "
"for more information."
msgstr ""

#: ../../../usb/gadget_configfs.rst:156
msgid "4. Associating the functions with their configurations"
msgstr ""

#: ../../../usb/gadget_configfs.rst:158
msgid ""
"At this moment a number of gadgets is created, each of which has a number of "
"configurations specified and a number of functions available. What remains "
"is specifying which function is available in which configuration (the same "
"function can be used in multiple configurations). This is achieved with "
"creating symbolic links::"
msgstr ""

#: ../../../usb/gadget_configfs.rst:175
msgid "5. Enabling the gadget"
msgstr ""

#: ../../../usb/gadget_configfs.rst:177
msgid ""
"All the above steps serve the purpose of composing the gadget of "
"configurations and functions."
msgstr ""

#: ../../../usb/gadget_configfs.rst:180
msgid "An example directory structure might look like this::"
msgstr ""

#: ../../../usb/gadget_configfs.rst:213
msgid ""
"Such a gadget must be finally enabled so that the USB host can enumerate it."
msgstr ""

#: ../../../usb/gadget_configfs.rst:215
msgid ""
"In order to enable the gadget it must be bound to a UDC (USB Device "
"Controller)::"
msgstr ""

#: ../../../usb/gadget_configfs.rst:220
msgid "where <udc name> is one of those found in /sys/class/udc/* e.g.::"
msgstr ""

#: ../../../usb/gadget_configfs.rst:227
msgid "6. Disabling the gadget"
msgstr ""

#: ../../../usb/gadget_configfs.rst:234
msgid "7. Cleaning up"
msgstr ""

#: ../../../usb/gadget_configfs.rst:236
msgid "Remove functions from configurations::"
msgstr ""

#: ../../../usb/gadget_configfs.rst:240
msgid ""
"where <config name>.<number> specify the configuration and <function> is a "
"symlink to a function being removed from the configuration, e.g.::"
msgstr ""

#: ../../../usb/gadget_configfs.rst:249
msgid "Remove strings directories in configurations::"
msgstr ""

#: ../../../usb/gadget_configfs.rst:261
msgid "and remove the configurations::"
msgstr ""

#: ../../../usb/gadget_configfs.rst:273
msgid "Remove functions (function modules are not unloaded, though)::"
msgstr ""

#: ../../../usb/gadget_configfs.rst:285
msgid "Remove strings directories in the gadget::"
msgstr ""

#: ../../../usb/gadget_configfs.rst:293
msgid "and finally remove the gadget::"
msgstr ""

#: ../../../usb/gadget_configfs.rst:306
msgid "Implementation design"
msgstr ""

#: ../../../usb/gadget_configfs.rst:308
msgid ""
"Below the idea of how configfs works is presented. In configfs there are "
"items and groups, both represented as directories. The difference between an "
"item and a group is that a group can contain other groups. In the picture "
"below only an item is shown. Both items and groups can have attributes, "
"which are represented as files. The user can create and remove directories, "
"but cannot remove files, which can be read-only or read-write, depending on "
"what they represent."
msgstr ""

#: ../../../usb/gadget_configfs.rst:316
msgid ""
"The filesystem part of configfs operates on config_items/groups and "
"configfs_attributes which are generic and of the same type for all "
"configured elements. However, they are embedded in usage-specific larger "
"structures. In the picture below there is a \"cs\" which contains a "
"config_item and an \"sa\" which contains a configfs_attribute."
msgstr ""

#: ../../../usb/gadget_configfs.rst:322
msgid "The filesystem view would be like this::"
msgstr ""

#: ../../../usb/gadget_configfs.rst:333
msgid ""
"Whenever a user reads/writes the \"sa\" file, a function is called which "
"accepts a struct config_item and a struct configfs_attribute. In the said "
"function the \"cs\" and \"sa\" are retrieved using the well known "
"container_of technique and an appropriate sa's function (show or store) is "
"called and passed the \"cs\" and a character buffer. The \"show\" is for "
"displaying the file's contents (copy data from the cs to the buffer), while "
"the \"store\" is for modifying the file's contents (copy data from the "
"buffer to the cs), but it is up to the implementer of the two functions to "
"decide what they actually do."
msgstr ""

#: ../../../usb/gadget_configfs.rst:362
msgid ""
"The file names are decided by the config item/group designer, while the "
"directories in general can be named at will. A group can have a number of "
"its default sub-groups created automatically."
msgstr ""

#: ../../../usb/gadget_configfs.rst:366
msgid ""
"For more information on configfs please see `Documentation/filesystems/"
"configfs.rst`."
msgstr ""

#: ../../../usb/gadget_configfs.rst:369
msgid "The concepts described above translate to USB gadgets like this:"
msgstr ""

#: ../../../usb/gadget_configfs.rst:371
msgid ""
"A gadget has its config group, which has some attributes (idVendor, "
"idProduct etc) and default sub-groups (configs, functions, strings). Writing "
"to the attributes causes the information to be stored in appropriate "
"locations. In the configs, functions and strings sub-groups a user can "
"create their sub-groups to represent configurations, functions, and groups "
"of strings in a given language."
msgstr ""

#: ../../../usb/gadget_configfs.rst:378
msgid ""
"The user creates configurations and functions, in the configurations creates "
"symbolic links to functions. This information is used when the gadget's UDC "
"attribute is written to, which means binding the gadget to the UDC. The code "
"in drivers/usb/gadget/configfs.c iterates over all configurations, and in "
"each configuration it iterates over all functions and binds them. This way "
"the whole gadget is bound."
msgstr ""

#: ../../../usb/gadget_configfs.rst:385
msgid "The file drivers/usb/gadget/configfs.c contains code for"
msgstr ""

#: ../../../usb/gadget_configfs.rst:387
msgid "gadget's config_group"
msgstr ""

#: ../../../usb/gadget_configfs.rst:388
msgid "gadget's default groups (configs, functions, strings)"
msgstr ""

#: ../../../usb/gadget_configfs.rst:389
msgid "associating functions with configurations (symlinks)"
msgstr ""

#: ../../../usb/gadget_configfs.rst:391
msgid ""
"Each USB function naturally has its own view of what it wants configured, so "
"config_groups for particular functions are defined in the functions "
"implementation files drivers/usb/gadget/f_*.c."
msgstr ""

#: ../../../usb/gadget_configfs.rst:395
msgid ""
"Function's code is written in such a way that it uses "
"usb_get_function_instance(), which, in turn, calls request_module.  So, "
"provided that modprobe works, modules for particular functions are loaded "
"automatically. Please note that the converse is not true: after a gadget is "
"disabled and torn down, the modules remain loaded."
msgstr ""
