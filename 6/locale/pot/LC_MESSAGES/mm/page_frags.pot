# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../mm/page_frags.rst:3
msgid "Page fragments"
msgstr ""

#: ../../../mm/page_frags.rst:5
msgid ""
"A page fragment is an arbitrary-length arbitrary-offset area of memory which "
"resides within a 0 or higher order compound page.  Multiple fragments within "
"that page are individually refcounted, in the page's reference counter."
msgstr ""

#: ../../../mm/page_frags.rst:10
msgid ""
"The page_frag functions, page_frag_alloc and page_frag_free, provide a "
"simple allocation framework for page fragments.  This is used by the network "
"stack and network device drivers to provide a backing region of memory for "
"use as either an sk_buff->head, or to be used in the \"frags\" portion of "
"skb_shared_info."
msgstr ""

#: ../../../mm/page_frags.rst:16
msgid ""
"In order to make use of the page fragment APIs a backing page fragment cache "
"is needed.  This provides a central point for the fragment allocation and "
"tracks allows multiple calls to make use of a cached page.  The advantage to "
"doing this is that multiple calls to get_page can be avoided which can be "
"expensive at allocation time.  However due to the nature of this caching it "
"is required that any calls to the cache be protected by either a per-cpu "
"limitation, or a per-cpu limitation and forcing interrupts to be disabled "
"when executing the fragment allocation."
msgstr ""

#: ../../../mm/page_frags.rst:25
msgid ""
"The network stack uses two separate caches per CPU to handle fragment "
"allocation.  The netdev_alloc_cache is used by callers making use of the "
"netdev_alloc_frag and __netdev_alloc_skb calls.  The napi_alloc_cache is "
"used by callers of the __napi_alloc_frag and napi_alloc_skb calls.  The main "
"difference between these two calls is the context in which they may be "
"called.  The \"netdev\" prefixed functions are usable in any context as "
"these functions will disable interrupts, while the \"napi\" prefixed "
"functions are only usable within the softirq context."
msgstr ""

#: ../../../mm/page_frags.rst:34
msgid ""
"Many network device drivers use a similar methodology for allocating page "
"fragments, but the page fragments are cached at the ring or descriptor "
"level.  In order to enable these cases it is necessary to provide a generic "
"way of tearing down a page cache.  For this reason __page_frag_cache_drain "
"was implemented.  It allows for freeing multiple references from a single "
"page via a single call.  The advantage to doing this is that it allows for "
"cleaning up the multiple references that were added to a page in order to "
"avoid calling get_page per allocation."
msgstr ""

#: ../../../mm/page_frags.rst:43
msgid "Alexander Duyck, Nov 29, 2016."
msgstr ""
