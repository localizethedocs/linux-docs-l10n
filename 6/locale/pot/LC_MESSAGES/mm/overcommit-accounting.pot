# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../mm/overcommit-accounting.rst:3
msgid "Overcommit Accounting"
msgstr ""

#: ../../../mm/overcommit-accounting.rst:5
msgid "The Linux kernel supports the following overcommit handling modes"
msgstr ""

#: ../../../mm/overcommit-accounting.rst:7
msgid "0"
msgstr ""

#: ../../../mm/overcommit-accounting.rst:8
msgid ""
"Heuristic overcommit handling. Obvious overcommits of address space are "
"refused. Used for a typical system. It ensures a seriously wild allocation "
"fails while allowing overcommit to reduce swap usage. This is the default."
msgstr ""

#: ../../../mm/overcommit-accounting.rst:13
msgid "1"
msgstr ""

#: ../../../mm/overcommit-accounting.rst:14
msgid ""
"Always overcommit. Appropriate for some scientific applications. Classic "
"example is code using sparse arrays and just relying on the virtual memory "
"consisting almost entirely of zero pages."
msgstr ""

#: ../../../mm/overcommit-accounting.rst:19
msgid "2"
msgstr ""

#: ../../../mm/overcommit-accounting.rst:20
msgid ""
"Don't overcommit. The total address space commit for the system is not "
"permitted to exceed swap + a configurable amount (default is 50%) of "
"physical RAM.  Depending on the amount you use, in most situations this "
"means a process will not be killed while accessing pages but will receive "
"errors on memory allocation as appropriate."
msgstr ""

#: ../../../mm/overcommit-accounting.rst:27
msgid ""
"Useful for applications that want to guarantee their memory allocations will "
"be available in the future without having to initialize every page."
msgstr ""

#: ../../../mm/overcommit-accounting.rst:31
msgid "The overcommit policy is set via the sysctl ``vm.overcommit_memory``."
msgstr ""

#: ../../../mm/overcommit-accounting.rst:33
msgid ""
"The overcommit amount can be set via ``vm.overcommit_ratio`` (percentage) or "
"``vm.overcommit_kbytes`` (absolute value). These only have an effect when "
"``vm.overcommit_memory`` is set to 2."
msgstr ""

#: ../../../mm/overcommit-accounting.rst:37
msgid ""
"The current overcommit limit and amount committed are viewable in ``/proc/"
"meminfo`` as CommitLimit and Committed_AS respectively."
msgstr ""

#: ../../../mm/overcommit-accounting.rst:41
msgid "Gotchas"
msgstr ""

#: ../../../mm/overcommit-accounting.rst:43
msgid ""
"The C language stack growth does an implicit mremap. If you want absolute "
"guarantees and run close to the edge you MUST mmap your stack for the "
"largest size you think you will need. For typical stack usage this does not "
"matter much but it's a corner case if you really really care"
msgstr ""

#: ../../../mm/overcommit-accounting.rst:48
msgid "In mode 2 the MAP_NORESERVE flag is ignored."
msgstr ""

#: ../../../mm/overcommit-accounting.rst:52
msgid "How It Works"
msgstr ""

#: ../../../mm/overcommit-accounting.rst:54
msgid "The overcommit is based on the following rules"
msgstr ""

#: ../../../mm/overcommit-accounting.rst:56
msgid "For a file backed map"
msgstr ""

#: ../../../mm/overcommit-accounting.rst:0
msgid "SHARED or READ-only   -       0 cost (the file is the map not swap)"
msgstr ""

#: ../../../mm/overcommit-accounting.rst:0
msgid "PRIVATE WRITABLE      -       size of mapping per instance"
msgstr ""

#: ../../../mm/overcommit-accounting.rst:60
msgid "For an anonymous or ``/dev/zero`` map"
msgstr ""

#: ../../../mm/overcommit-accounting.rst:0
msgid "SHARED                        -       size of mapping"
msgstr ""

#: ../../../mm/overcommit-accounting.rst:0
msgid "PRIVATE READ-only     -       0 cost (but of little use)"
msgstr ""

#: ../../../mm/overcommit-accounting.rst:65
msgid "Additional accounting"
msgstr ""

#: ../../../mm/overcommit-accounting.rst:0
msgid "Pages made writable copies by mmap"
msgstr ""

#: ../../../mm/overcommit-accounting.rst:0
msgid "shmfs memory drawn from the same pool"
msgstr ""

#: ../../../mm/overcommit-accounting.rst:70
msgid "Status"
msgstr ""

#: ../../../mm/overcommit-accounting.rst:72
msgid "We account mmap memory mappings"
msgstr ""

#: ../../../mm/overcommit-accounting.rst:73
msgid "We account mprotect changes in commit"
msgstr ""

#: ../../../mm/overcommit-accounting.rst:74
msgid "We account mremap changes in size"
msgstr ""

#: ../../../mm/overcommit-accounting.rst:75
msgid "We account brk"
msgstr ""

#: ../../../mm/overcommit-accounting.rst:76
msgid "We account munmap"
msgstr ""

#: ../../../mm/overcommit-accounting.rst:77
msgid "We report the commit status in /proc"
msgstr ""

#: ../../../mm/overcommit-accounting.rst:78
msgid "Account and check on fork"
msgstr ""

#: ../../../mm/overcommit-accounting.rst:79
msgid "Review stack handling/building on exec"
msgstr ""

#: ../../../mm/overcommit-accounting.rst:80
msgid "SHMfs accounting"
msgstr ""

#: ../../../mm/overcommit-accounting.rst:81
msgid "Implement actual limit enforcement"
msgstr ""

#: ../../../mm/overcommit-accounting.rst:84
msgid "To Do"
msgstr ""

#: ../../../mm/overcommit-accounting.rst:85
msgid "Account ptrace pages (this is hard)"
msgstr ""
