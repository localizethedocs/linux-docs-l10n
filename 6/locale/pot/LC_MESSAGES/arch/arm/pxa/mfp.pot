# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../arch/arm/pxa/mfp.rst:3
msgid "MFP Configuration for PXA2xx/PXA3xx Processors"
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:5
msgid "Eric Miao <eric.miao@marvell.com>"
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:7
msgid ""
"MFP stands for Multi-Function Pin, which is the pin-mux logic on PXA3xx and "
"later PXA series processors.  This document describes the existing MFP API, "
"and how board/platform driver authors could make use of it."
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:12
msgid "Basic Concept"
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:14
msgid ""
"Unlike the GPIO alternate function settings on PXA25x and PXA27x, a new MFP "
"mechanism is introduced from PXA3xx to completely move the pin-mux functions "
"out of the GPIO controller. In addition to pin-mux configurations, the MFP "
"also controls the low power state, driving strength, pull-up/down and event "
"detection of each pin.  Below is a diagram of internal connections between "
"the MFP logic and the remaining SoC peripherals::"
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:43
msgid ""
"NOTE: the external pad is named as MFP_PIN_GPIO19, it doesn't necessarily "
"mean it's dedicated for GPIO19, only as a hint that internally this pin can "
"be routed from GPIO19 of the GPIO controller."
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:47
msgid ""
"To better understand the change from PXA25x/PXA27x GPIO alternate function "
"to this new MFP mechanism, here are several key points:"
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:50
msgid ""
"GPIO controller on PXA3xx is now a dedicated controller, same as other "
"internal controllers like PWM, SSP and UART, with 128 internal signals which "
"can be routed to external through one or more MFPs (e.g. GPIO<0> can be "
"routed through either MFP_PIN_GPIO0 as well as MFP_PIN_GPIO0_2, see arch/arm/"
"mach-pxa/mfp-pxa300.h)"
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:56
msgid ""
"Alternate function configuration is removed from this GPIO controller, the "
"remaining functions are pure GPIO-specific, i.e."
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:59
msgid "GPIO signal level control"
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:60
msgid "GPIO direction control"
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:61
msgid "GPIO level change detection"
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:63
msgid ""
"Low power state for each pin is now controlled by MFP, this means the PGSRx "
"registers on PXA2xx are now useless on PXA3xx"
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:66
msgid ""
"Wakeup detection is now controlled by MFP, PWER does not control the wakeup "
"from GPIO(s) any more, depending on the sleeping state, ADxER (as defined in "
"pxa3xx-regs.h) controls the wakeup from MFP"
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:70
msgid ""
"NOTE: with such a clear separation of MFP and GPIO, by GPIO<xx> we normally "
"mean it is a GPIO signal, and by MFP<xxx> or pin xxx, we mean a physical pad "
"(or ball)."
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:75
msgid "MFP API Usage"
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:77
msgid "For board code writers, here are some guidelines:"
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:79
msgid "include ONE of the following header files in your <board>.c:"
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:81
msgid "#include \"mfp-pxa25x.h\""
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:82
msgid "#include \"mfp-pxa27x.h\""
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:83
msgid "#include \"mfp-pxa300.h\""
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:84
msgid "#include \"mfp-pxa320.h\""
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:85
msgid "#include \"mfp-pxa930.h\""
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:87
msgid ""
"NOTE: only one file in your <board>.c, depending on the processors used, "
"because pin configuration definitions may conflict in these file (i.e. same "
"name, different meaning and settings on different processors). E.g. for "
"zylonite platform, which support both PXA300/PXA310 and PXA320, two separate "
"files are introduced: zylonite_pxa300.c and zylonite_pxa320.c (in addition "
"to handle MFP configuration differences, they also handle the other "
"differences between the two combinations)."
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:95
msgid ""
"NOTE: PXA300 and PXA310 are almost identical in pin configurations (with "
"PXA310 supporting some additional ones), thus the difference is actually "
"covered in a single mfp-pxa300.h."
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:99
msgid "prepare an array for the initial pin configurations, e.g.::"
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:123
msgid ""
"a) once the pin configurations are passed to pxa{2xx,3xx}_mfp_config(), and "
"written to the actual registers, they are useless and may discard, adding "
"'__initdata' will help save some additional bytes here."
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:127
msgid ""
"b) when there is only one possible pin configurations for a component, some "
"simplified definitions can be used, e.g. GPIOxx_TFT_LCD_16BPP on PXA25x and "
"PXA27x processors"
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:131
msgid ""
"c) if by board design, a pin can be configured to wake up the system from "
"low power state, it can be 'OR'ed with any of:"
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:134
msgid ""
"WAKEUP_ON_EDGE_BOTH WAKEUP_ON_EDGE_RISE WAKEUP_ON_EDGE_FALL "
"WAKEUP_ON_LEVEL_HIGH - specifically for enabling of keypad GPIOs,"
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:139
msgid ""
"to indicate that this pin has the capability of wake-up the system, and on "
"which edge(s). This, however, doesn't necessarily mean the pin _will_ wakeup "
"the system, it will only when set_irq_wake() is invoked with the "
"corresponding GPIO IRQ (GPIO_IRQ(xx) or gpio_to_irq()) and eventually calls "
"gpio_set_wake() for the actual register setting."
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:145
msgid ""
"d) although PXA3xx MFP supports edge detection on each pin, the internal "
"logic will only wakeup the system when those specific bits in ADxER "
"registers are set, which can be well mapped to the corresponding peripheral, "
"thus set_irq_wake() can be called with the peripheral IRQ to enable the "
"wakeup."
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:153
msgid "MFP on PXA3xx"
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:155
msgid ""
"Every external I/O pad on PXA3xx (excluding those for special purpose) has "
"one MFP logic associated, and is controlled by one MFP register (MFPR)."
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:158
msgid "The MFPR has the following bit definitions (for PXA300/PXA310/PXA320)::"
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:189
msgid "MFP Design for PXA2xx/PXA3xx"
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:191
msgid ""
"Due to the difference of pin-mux handling between PXA2xx and PXA3xx, a "
"unified MFP API is introduced to cover both series of processors."
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:194
msgid ""
"The basic idea of this design is to introduce definitions for all possible "
"pin configurations, these definitions are processor and platform "
"independent, and the actual API invoked to convert these definitions into "
"register settings and make them effective there-after."
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:200
msgid "Files Involved"
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:202
msgid "arch/arm/mach-pxa/include/mach/mfp.h"
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:204
msgid "for"
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:205
msgid "Unified pin definitions - enum constants for all configurable pins"
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:206
msgid "processor-neutral bit definitions for a possible MFP configuration"
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:208
msgid "arch/arm/mach-pxa/mfp-pxa3xx.h"
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:210
msgid ""
"for PXA3xx specific MFPR register bit definitions and PXA3xx common pin "
"configurations"
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:213
msgid "arch/arm/mach-pxa/mfp-pxa2xx.h"
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:215
msgid ""
"for PXA2xx specific definitions and PXA25x/PXA27x common pin configurations"
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:217
msgid ""
"arch/arm/mach-pxa/mfp-pxa25x.h arch/arm/mach-pxa/mfp-pxa27x.h arch/arm/mach-"
"pxa/mfp-pxa300.h arch/arm/mach-pxa/mfp-pxa320.h arch/arm/mach-pxa/mfp-pxa930."
"h"
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:223
msgid "for processor specific definitions"
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:225
msgid "arch/arm/mach-pxa/mfp-pxa3xx.c"
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:226
msgid "arch/arm/mach-pxa/mfp-pxa2xx.c"
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:228
msgid ""
"for implementation of the pin configuration to take effect for the actual "
"processor."
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:232
msgid "Pin Configuration"
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:234
msgid ""
"The following comments are copied from mfp.h (see the actual source code for "
"most updated info)::"
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:278
msgid "Register Settings"
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:280
msgid ""
"Register settings on PXA3xx for a pin configuration is actually very "
"straight-forward, most bits can be converted directly into MFPR value in a "
"easier way. Two sets of MFPR values are calculated: the run-time ones and "
"the low power mode ones, to allow different settings."
msgstr ""

#: ../../../arch/arm/pxa/mfp.rst:285
msgid ""
"The conversion from a generic pin configuration to the actual register "
"settings on PXA2xx is a bit complicated: many registers are involved, "
"including GAFRx, GPDRx, PGSRx, PWER, PKWR, PFER and PRER. Please see mfp-"
"pxa2xx.c for how the conversion is made."
msgstr ""
