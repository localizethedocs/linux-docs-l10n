# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../arch/x86/tsx_async_abort.rst:4
msgid "TSX Async Abort (TAA) mitigation"
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:9
msgid "Overview"
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:11
msgid ""
"TSX Async Abort (TAA) is a side channel attack on internal buffers in some "
"Intel processors similar to Microachitectural Data Sampling (MDS).  In this "
"case certain loads may speculatively pass invalid data to dependent "
"operations when an asynchronous abort condition is pending in a "
"Transactional Synchronization Extensions (TSX) transaction.  This includes "
"loads with no fault or assist condition. Such loads may speculatively expose "
"stale data from the same uarch data structures as in MDS, with same scope of "
"exposure i.e. same-thread and cross-thread. This issue affects all current "
"processors that support TSX."
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:22
msgid "Mitigation strategy"
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:24
msgid ""
"a) TSX disable - one of the mitigations is to disable TSX. A new MSR "
"IA32_TSX_CTRL will be available in future and current processors after "
"microcode update which can be used to disable TSX. In addition, it controls "
"the enumeration of the TSX feature bits (RTM and HLE) in CPUID."
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:29
msgid ""
"b) Clear CPU buffers - similar to MDS, clearing the CPU buffers mitigates "
"this vulnerability. More details on this approach can be found in :ref:"
"`Documentation/admin-guide/hw-vuln/mds.rst <mds>`."
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:34
msgid "Kernel internal mitigation modes"
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:37
msgid "off"
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:37
msgid ""
"Mitigation is disabled. Either the CPU is not affected or "
"tsx_async_abort=off is supplied on the kernel command line."
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:40
msgid "tsx disabled"
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:40
msgid ""
"Mitigation is enabled. TSX feature is disabled by default at bootup on "
"processors that support TSX control."
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:43
msgid "verw"
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:43
msgid ""
"Mitigation is enabled. CPU is affected and MD_CLEAR is advertised in CPUID."
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:46
msgid "ucode needed"
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:46
msgid ""
"Mitigation is enabled. CPU is affected and MD_CLEAR is not advertised in "
"CPUID. That is mainly for virtualization scenarios where the host has the "
"updated microcode but the hypervisor does not expose MD_CLEAR in CPUID. It's "
"a best effort approach without guarantee."
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:53
msgid ""
"If the CPU is affected and the \"tsx_async_abort\" kernel command line "
"parameter is not provided then the kernel selects an appropriate mitigation "
"depending on the status of RTM and MD_CLEAR CPUID bits."
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:57
msgid ""
"Below tables indicate the impact of tsx=on|off|auto cmdline options on state "
"of TAA mitigation, VERW behavior and TSX feature for various combinations of "
"MSR_IA32_ARCH_CAPABILITIES bits."
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:61
msgid "\"tsx=off\""
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:64
#: ../../../arch/x86/tsx_async_abort.rst:79
#: ../../../arch/x86/tsx_async_abort.rst:94
msgid "MSR_IA32_ARCH_CAPABILITIES bits"
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:64
msgid "Result with cmdline tsx=off"
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:66
#: ../../../arch/x86/tsx_async_abort.rst:81
#: ../../../arch/x86/tsx_async_abort.rst:96
msgid "TAA_NO"
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:66
#: ../../../arch/x86/tsx_async_abort.rst:81
#: ../../../arch/x86/tsx_async_abort.rst:96
msgid "MDS_NO"
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:66
#: ../../../arch/x86/tsx_async_abort.rst:81
#: ../../../arch/x86/tsx_async_abort.rst:96
msgid "TSX_CTRL_MSR"
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:66
#: ../../../arch/x86/tsx_async_abort.rst:81
#: ../../../arch/x86/tsx_async_abort.rst:96
msgid "TSX state after bootup"
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:66
#: ../../../arch/x86/tsx_async_abort.rst:81
#: ../../../arch/x86/tsx_async_abort.rst:96
msgid "VERW can clear CPU buffers"
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:66
#: ../../../arch/x86/tsx_async_abort.rst:81
#: ../../../arch/x86/tsx_async_abort.rst:96
msgid "TAA mitigation tsx_async_abort=off"
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:66
#: ../../../arch/x86/tsx_async_abort.rst:81
#: ../../../arch/x86/tsx_async_abort.rst:96
msgid "TAA mitigation tsx_async_abort=full"
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:69
#: ../../../arch/x86/tsx_async_abort.rst:70
#: ../../../arch/x86/tsx_async_abort.rst:71
#: ../../../arch/x86/tsx_async_abort.rst:72
#: ../../../arch/x86/tsx_async_abort.rst:84
#: ../../../arch/x86/tsx_async_abort.rst:85
#: ../../../arch/x86/tsx_async_abort.rst:86
#: ../../../arch/x86/tsx_async_abort.rst:87
#: ../../../arch/x86/tsx_async_abort.rst:99
#: ../../../arch/x86/tsx_async_abort.rst:100
#: ../../../arch/x86/tsx_async_abort.rst:101
#: ../../../arch/x86/tsx_async_abort.rst:102
msgid "0"
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:69
#: ../../../arch/x86/tsx_async_abort.rst:71
#: ../../../arch/x86/tsx_async_abort.rst:84
#: ../../../arch/x86/tsx_async_abort.rst:86
#: ../../../arch/x86/tsx_async_abort.rst:99
#: ../../../arch/x86/tsx_async_abort.rst:101
msgid "HW default"
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:69
#: ../../../arch/x86/tsx_async_abort.rst:72
#: ../../../arch/x86/tsx_async_abort.rst:84
#: ../../../arch/x86/tsx_async_abort.rst:87
#: ../../../arch/x86/tsx_async_abort.rst:99
#: ../../../arch/x86/tsx_async_abort.rst:102
msgid "Yes"
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:69
#: ../../../arch/x86/tsx_async_abort.rst:84
#: ../../../arch/x86/tsx_async_abort.rst:87
#: ../../../arch/x86/tsx_async_abort.rst:99
msgid "Same as MDS"
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:70
#: ../../../arch/x86/tsx_async_abort.rst:71
#: ../../../arch/x86/tsx_async_abort.rst:72
#: ../../../arch/x86/tsx_async_abort.rst:73
#: ../../../arch/x86/tsx_async_abort.rst:85
#: ../../../arch/x86/tsx_async_abort.rst:86
#: ../../../arch/x86/tsx_async_abort.rst:87
#: ../../../arch/x86/tsx_async_abort.rst:88
#: ../../../arch/x86/tsx_async_abort.rst:100
#: ../../../arch/x86/tsx_async_abort.rst:101
#: ../../../arch/x86/tsx_async_abort.rst:102
#: ../../../arch/x86/tsx_async_abort.rst:103
msgid "1"
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:70
#: ../../../arch/x86/tsx_async_abort.rst:85
#: ../../../arch/x86/tsx_async_abort.rst:100
msgid "Invalid case"
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:71
#: ../../../arch/x86/tsx_async_abort.rst:86
#: ../../../arch/x86/tsx_async_abort.rst:101
msgid "No"
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:71
#: ../../../arch/x86/tsx_async_abort.rst:86
#: ../../../arch/x86/tsx_async_abort.rst:101
msgid "Need ucode update"
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:72
#: ../../../arch/x86/tsx_async_abort.rst:73
#: ../../../arch/x86/tsx_async_abort.rst:102
msgid "Disabled"
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:72
#: ../../../arch/x86/tsx_async_abort.rst:102
msgid "TSX disabled"
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:73
#: ../../../arch/x86/tsx_async_abort.rst:88
#: ../../../arch/x86/tsx_async_abort.rst:103
msgid "X"
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:73
#: ../../../arch/x86/tsx_async_abort.rst:88
#: ../../../arch/x86/tsx_async_abort.rst:103
msgid "None needed"
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:76
msgid "\"tsx=on\""
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:79
msgid "Result with cmdline tsx=on"
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:87
#: ../../../arch/x86/tsx_async_abort.rst:88
#: ../../../arch/x86/tsx_async_abort.rst:103
msgid "Enabled"
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:87
msgid "None"
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:91
msgid "\"tsx=auto\""
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:94
msgid "Result with cmdline tsx=auto"
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:106
msgid ""
"In the tables, TSX_CTRL_MSR is a new bit in MSR_IA32_ARCH_CAPABILITIES that "
"indicates whether MSR_IA32_TSX_CTRL is supported."
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:109
msgid "There are two control bits in IA32_TSX_CTRL MSR:"
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:111
msgid "Bit 0: When set it disables the Restricted Transactional Memory (RTM)"
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:112
msgid ""
"sub-feature of TSX (will force all transactions to abort on the XBEGIN "
"instruction)."
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:115
msgid "Bit 1: When set it disables the enumeration of the RTM and HLE feature"
msgstr ""

#: ../../../arch/x86/tsx_async_abort.rst:116
msgid ""
"(i.e. it will make CPUID(EAX=7).EBX{bit4} and CPUID(EAX=7).EBX{bit11} read "
"as 0)."
msgstr ""
