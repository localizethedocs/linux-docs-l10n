# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../arch/x86/x86_64/mm.rst:5
msgid "Memory Management"
msgstr ""

#: ../../../arch/x86/x86_64/mm.rst:8
msgid "Complete virtual memory map with 4-level page tables"
msgstr ""

#: ../../../arch/x86/x86_64/mm.rst:12
msgid ""
"Negative addresses such as \"-23 TB\" are absolute addresses in bytes, "
"counted down from the top of the 64-bit address space. It's easier to "
"understand the layout when seen both in absolute addresses and in distance-"
"from-top notation."
msgstr ""

#: ../../../arch/x86/x86_64/mm.rst:16
msgid ""
"For example 0xffffe90000000000 == -23 TB, it's 23 TB lower than the top of "
"the 64-bit address space (ffffffffffffffff)."
msgstr ""

#: ../../../arch/x86/x86_64/mm.rst:19
msgid ""
"Note that as we get closer to the top of the address space, the notation "
"changes from TB to GB and then MB/KB."
msgstr ""

#: ../../../arch/x86/x86_64/mm.rst:22
msgid ""
"\"16M TB\" might look weird at first sight, but it's an easier way to "
"visualize size notation than \"16 EB\", which few will recognize at first "
"sight as 16 exabytes. It also shows it nicely how incredibly large 64-bit "
"address space is."
msgstr ""

#: ../../../arch/x86/x86_64/mm.rst:88
msgid "Complete virtual memory map with 5-level page tables"
msgstr ""

#: ../../../arch/x86/x86_64/mm.rst:92
msgid ""
"With 56-bit addresses, user-space memory gets expanded by a factor of 512x, "
"from 0.125 PB to 64 PB. All kernel mappings shift down to the -64 PB "
"starting offset and many of the regions expand to support the much larger "
"physical memory supported."
msgstr ""

#: ../../../arch/x86/x86_64/mm.rst:156
msgid ""
"Architecture defines a 64-bit virtual address. Implementations can support "
"less. Currently supported are 48- and 57-bit virtual addresses. Bits 63 "
"through to the most-significant implemented bit are sign extended. This "
"causes hole between user space and kernel addresses if you interpret them as "
"unsigned."
msgstr ""

#: ../../../arch/x86/x86_64/mm.rst:162
msgid ""
"The direct mapping covers all memory in the system up to the highest memory "
"address (this means in some cases it can also include PCI memory holes)."
msgstr ""

#: ../../../arch/x86/x86_64/mm.rst:166
msgid ""
"We map EFI runtime services in the 'efi_pgd' PGD in a 64GB large virtual "
"memory window (this size is arbitrary, it can be raised later if needed). "
"The mappings are not part of any other kernel PGD and are only available "
"during EFI runtime calls."
msgstr ""

#: ../../../arch/x86/x86_64/mm.rst:171
msgid ""
"Note that if CONFIG_RANDOMIZE_MEMORY is enabled, the direct mapping of all "
"physical memory, vmalloc/ioremap space and virtual memory map are "
"randomized. Their order is preserved but their base will be offset early at "
"boot time."
msgstr ""

#: ../../../arch/x86/x86_64/mm.rst:175
msgid ""
"Be very careful vs. KASLR when changing anything here. The KASLR address "
"range must not overlap with anything except the KASAN shadow area, which is "
"correct as KASAN disables KASLR."
msgstr ""

#: ../../../arch/x86/x86_64/mm.rst:179
msgid ""
"For both 4- and 5-level layouts, the KSTACK_ERASE_POISON value in the last "
"2MB hole: ffffffffffff4111"
msgstr ""
