# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../arch/powerpc/qe_firmware.rst:3
msgid "Freescale QUICC Engine Firmware Uploading"
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:5
msgid "2007 Timur Tabi <timur at freescale.com>, Freescale Semiconductor"
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:23
msgid "Revision Information"
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:25
msgid "November 30, 2007: Rev 1.0 - Initial version"
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:28
msgid "I - Software License for Firmware"
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:30
msgid ""
"Each firmware file comes with its own software license.  For information on "
"the particular license, please see the license text that is distributed with "
"the firmware."
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:35
msgid "II - Microcode Availability"
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:37
msgid ""
"Firmware files are distributed through various channels.  Some are available "
"on http://opensource.freescale.com.  For other firmware files, please "
"contact your Freescale representative or your operating system vendor."
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:42
msgid "III - Description and Terminology"
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:44
msgid ""
"In this document, the term 'microcode' refers to the sequence of 32-bit "
"integers that compose the actual QE microcode."
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:47
msgid ""
"The term 'firmware' refers to a binary blob that contains the microcode as "
"well as other data that"
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:50
msgid "describes the microcode's purpose"
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:51
msgid "describes how and where to upload the microcode"
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:52
msgid "specifies the values of various registers"
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:53
msgid "includes additional data for use by specific device drivers"
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:55
msgid "Firmware files are binary files that contain only a firmware."
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:58
msgid "IV - Microcode Programming Details"
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:60
msgid ""
"The QE architecture allows for only one microcode present in I-RAM for each "
"RISC processor.  To replace any current microcode, a full QE reset (which "
"disables the microcode) must be performed first."
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:64
msgid "QE microcode is uploaded using the following procedure:"
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:66
msgid ""
"The microcode is placed into I-RAM at a specific location, using the IRAM."
"IADD and IRAM.IDATA registers."
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:69
msgid ""
"The CERCR.CIR bit is set to 0 or 1, depending on whether the firmware needs "
"split I-RAM.  Split I-RAM is only meaningful for SOCs that have QEs with "
"multiple RISC processors, such as the 8360.  Splitting the I-RAM allows each "
"processor to run a different microcode, effectively creating an asymmetric "
"multiprocessing (AMP) system."
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:75
msgid ""
"The TIBCR trap registers are loaded with the addresses of the trap handlers "
"in the microcode."
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:78
msgid "The RSP.ECCR register is programmed with the value provided."
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:80
msgid ""
"If necessary, device drivers that need the virtual traps and extended mode "
"data will use them."
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:83
msgid "Virtual Microcode Traps"
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:85
msgid ""
"These virtual traps are conditional branches in the microcode.  These are "
"\"soft\" provisional introduced in the ROMcode in order to enable higher "
"flexibility and save h/w traps If new features are activated or an issue is "
"being fixed in the RAM package utilizing they should be activated.  This "
"data structure signals the microcode which of these virtual traps is active."
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:91
msgid ""
"This structure contains 6 words that the application should copy to some "
"specific been defined.  This table describes the structure::"
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:117
msgid "Extended Modes"
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:119
msgid ""
"This is a double word bit array (64 bits) that defines special functionality "
"which has an impact on the software drivers.  Each bit has its own impact "
"and has special instructions for the s/w associated with it.  This structure "
"is described in this table::"
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:167
msgid "V - Firmware Structure Layout"
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:169
msgid ""
"QE microcode from Freescale is typically provided as a header file.  This "
"header file contains macros that define the microcode binary itself as well "
"as some other data used in uploading that microcode.  The format of these "
"files do not lend themselves to simple inclusion into other code.  Hence, "
"the need for a more portable format.  This section defines that format."
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:175
msgid ""
"Instead of distributing a header file, the microcode and related data are "
"embedded into a binary blob.  This blob is passed to the "
"qe_upload_firmware() function, which parses the blob and performs everything "
"necessary to upload the microcode."
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:180
msgid ""
"All integers are big-endian.  See the comments for function "
"qe_upload_firmware() for up-to-date implementation information."
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:183
msgid ""
"This structure supports versioning, where the version of the structure is "
"embedded into the structure itself.  To ensure forward and backwards "
"compatibility, all versions of the structure must use the same 'qe_header' "
"structure at the beginning."
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:188
msgid "'header' (type: struct qe_header):"
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:189
msgid ""
"The 'length' field is the size, in bytes, of the entire structure, including "
"all the microcode embedded in it, as well as the CRC (if present)."
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:193
msgid ""
"The 'magic' field is an array of three bytes that contains the letters 'Q', "
"'E', and 'F'.  This is an identifier that indicates that this structure is a "
"QE Firmware structure."
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:197
msgid ""
"The 'version' field is a single byte that indicates the version of this "
"structure.  If the layout of the structure should ever need to be changed to "
"add support for additional types of microcode, then the version number "
"should also be changed."
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:202
msgid ""
"The 'id' field is a null-terminated string(suitable for printing) that "
"identifies the firmware."
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:205
msgid ""
"The 'count' field indicates the number of 'microcode' structures.  There "
"must be one and only one 'microcode' structure for each RISC processor. "
"Therefore, this field also represents the number of RISC processors for this "
"SOC."
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:210
msgid ""
"The 'soc' structure contains the SOC numbers and revisions used to match the "
"microcode to the SOC itself.  Normally, the microcode loader should check "
"the data in this structure with the SOC number and revisions, and only "
"upload the microcode if there's a match.  However, this check is not made on "
"all platforms."
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:216
msgid ""
"Although it is not recommended, you can specify '0' in the soc.model field "
"to skip matching SOCs altogether."
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:219
msgid ""
"The 'model' field is a 16-bit number that matches the actual SOC. The "
"'major' and 'minor' fields are the major and minor revision numbers, "
"respectively, of the SOC."
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:223
msgid "For example, to match the 8323, revision 1.0::"
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:229
msgid ""
"'padding' is necessary for structure alignment.  This field ensures that the "
"'extended_modes' field is aligned on a 64-bit boundary."
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:232
msgid ""
"'extended_modes' is a bitfield that defines special functionality which has "
"an impact on the device drivers.  Each bit has its own impact and has "
"special instructions for the driver associated with it.  This field is "
"stored in the QE library and available to any driver that calls "
"qe_get_firmware_info()."
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:237
msgid ""
"'vtraps' is an array of 8 words that contain virtual trap values for each "
"virtual traps.  As with 'extended_modes', this field is stored in the QE "
"library and available to any driver that calls qe_get_firmware_info()."
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:241
msgid "'microcode' (type: struct qe_microcode):"
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:242
msgid ""
"For each RISC processor there is one 'microcode' structure.  The first "
"'microcode' structure is for the first RISC, and so on."
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:245
msgid ""
"The 'id' field is a null-terminated string suitable for printing that "
"identifies this particular microcode."
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:248
msgid ""
"'traps' is an array of 16 words that contain hardware trap values for each "
"of the 16 traps.  If trap[i] is 0, then this particular trap is to be "
"ignored (i.e. not written to TIBCR[i]).  The entire value is written as-is "
"to the TIBCR[i] register, so be sure to set the EN and T_IBP bits if "
"necessary."
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:254
msgid "'eccr' is the value to program into the ECCR register."
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:256
msgid "'iram_offset' is the offset into IRAM to start writing the microcode."
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:259
msgid "'count' is the number of 32-bit words in the microcode."
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:261
msgid ""
"'code_offset' is the offset, in bytes, from the beginning of this structure "
"where the microcode itself can be found.  The first microcode binary should "
"be located immediately after the 'microcode' array."
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:266
msgid ""
"'major', 'minor', and 'revision' are the major, minor, and revision version "
"numbers, respectively, of the microcode.  If all values are 0, then these "
"fields are ignored."
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:270
msgid ""
"'reserved' is necessary for structure alignment.  Since 'microcode' is an "
"array, the 64-bit 'extended_modes' field needs to be aligned on a 64-bit "
"boundary, and this can only happen if the size of 'microcode' is a multiple "
"of 8 bytes.  To ensure that, we add 'reserved'."
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:276
msgid ""
"After the last microcode is a 32-bit CRC.  It can be calculated using this "
"algorithm::"
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:293
msgid "VI - Sample Code for Creating Firmware Files"
msgstr ""

#: ../../../arch/powerpc/qe_firmware.rst:295
msgid ""
"A Python program that creates firmware binaries from the header files "
"normally distributed by Freescale can be found on http://opensource."
"freescale.com."
msgstr ""
