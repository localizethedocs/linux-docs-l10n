# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../accounting/psi.rst:5
msgid "PSI - Pressure Stall Information"
msgstr ""

#: ../../../accounting/psi.rst:0
msgid "Date"
msgstr ""

#: ../../../accounting/psi.rst:7
msgid "April, 2018"
msgstr ""

#: ../../../accounting/psi.rst:0
msgid "Author"
msgstr ""

#: ../../../accounting/psi.rst:8
msgid "Johannes Weiner <hannes@cmpxchg.org>"
msgstr ""

#: ../../../accounting/psi.rst:10
msgid ""
"When CPU, memory or IO devices are contended, workloads experience latency "
"spikes, throughput losses, and run the risk of OOM kills."
msgstr ""

#: ../../../accounting/psi.rst:13
msgid ""
"Without an accurate measure of such contention, users are forced to either "
"play it safe and under-utilize their hardware resources, or roll the dice "
"and frequently suffer the disruptions resulting from excessive overcommit."
msgstr ""

#: ../../../accounting/psi.rst:18
msgid ""
"The psi feature identifies and quantifies the disruptions caused by such "
"resource crunches and the time impact it has on complex workloads or even "
"entire systems."
msgstr ""

#: ../../../accounting/psi.rst:22
msgid ""
"Having an accurate measure of productivity losses caused by resource "
"scarcity aids users in sizing workloads to hardware--or provisioning "
"hardware according to workload demand."
msgstr ""

#: ../../../accounting/psi.rst:26
msgid ""
"As psi aggregates this information in realtime, systems can be managed "
"dynamically using techniques such as load shedding, migrating jobs to other "
"systems or data centers, or strategically pausing or killing low priority or "
"restartable batch jobs."
msgstr ""

#: ../../../accounting/psi.rst:31
msgid ""
"This allows maximizing hardware utilization without sacrificing workload "
"health or risking major disruptions such as OOM kills."
msgstr ""

#: ../../../accounting/psi.rst:35
msgid "Pressure interface"
msgstr ""

#: ../../../accounting/psi.rst:37
msgid ""
"Pressure information for each resource is exported through the respective "
"file in /proc/pressure/ -- cpu, memory, and io."
msgstr ""

#: ../../../accounting/psi.rst:40
msgid "The format is as such::"
msgstr ""

#: ../../../accounting/psi.rst:45
msgid ""
"The \"some\" line indicates the share of time in which at least some tasks "
"are stalled on a given resource."
msgstr ""

#: ../../../accounting/psi.rst:48
msgid ""
"The \"full\" line indicates the share of time in which all non-idle tasks "
"are stalled on a given resource simultaneously. In this state actual CPU "
"cycles are going to waste, and a workload that spends extended time in this "
"state is considered to be thrashing. This has severe impact on performance, "
"and it's useful to distinguish this situation from a state where some tasks "
"are stalled but the CPU is still doing productive work. As such, time spent "
"in this subset of the stall state is tracked separately and exported in the "
"\"full\" averages."
msgstr ""

#: ../../../accounting/psi.rst:57
msgid ""
"CPU full is undefined at the system level, but has been reported since 5.13, "
"so it is set to zero for backward compatibility."
msgstr ""

#: ../../../accounting/psi.rst:60
msgid ""
"The ratios (in %) are tracked as recent trends over ten, sixty, and three "
"hundred second windows, which gives insight into short term events as well "
"as medium and long term trends. The total absolute stall time (in us) is "
"tracked and exported as well, to allow detection of latency spikes which "
"wouldn't necessarily make a dent in the time averages, or to average trends "
"over custom time frames."
msgstr ""

#: ../../../accounting/psi.rst:68
msgid "Monitoring for pressure thresholds"
msgstr ""

#: ../../../accounting/psi.rst:70
msgid ""
"Users can register triggers and use poll() to be woken up when resource "
"pressure exceeds certain thresholds."
msgstr ""

#: ../../../accounting/psi.rst:73
msgid ""
"A trigger describes the maximum cumulative stall time over a specific time "
"window, e.g. 100ms of total stall time within any 500ms window to generate a "
"wakeup event."
msgstr ""

#: ../../../accounting/psi.rst:77
msgid ""
"To register a trigger user has to open psi interface file under /proc/"
"pressure/ representing the resource to be monitored and write the desired "
"threshold and time window. The open file descriptor should be used to wait "
"for trigger events using select(), poll() or epoll(). The following format "
"is used::"
msgstr ""

#: ../../../accounting/psi.rst:85
msgid ""
"For example writing \"some 150000 1000000\" into /proc/pressure/memory would "
"add 150ms threshold for partial memory stall measured within 1sec time "
"window. Writing \"full 50000 1000000\" into /proc/pressure/io would add 50ms "
"threshold for full io stall measured within 1sec time window."
msgstr ""

#: ../../../accounting/psi.rst:90
msgid ""
"Triggers can be set on more than one psi metric and more than one trigger "
"for the same psi metric can be specified. However for each trigger a "
"separate file descriptor is required to be able to poll it separately from "
"others, therefore for each trigger a separate open() syscall should be made "
"even when opening the same psi interface file. Write operations to a file "
"descriptor with an already existing psi trigger will fail with EBUSY."
msgstr ""

#: ../../../accounting/psi.rst:97
msgid ""
"Monitors activate only when system enters stall state for the monitored psi "
"metric and deactivates upon exit from the stall state. While system is in "
"the stall state psi signal growth is monitored at a rate of 10 times per "
"tracking window."
msgstr ""

#: ../../../accounting/psi.rst:102
msgid ""
"The kernel accepts window sizes ranging from 500ms to 10s, therefore min "
"monitoring update interval is 50ms and max is 1s. Min limit is set to "
"prevent overly frequent polling. Max limit is chosen as a high enough number "
"after which monitors are most likely not needed and psi averages can be used "
"instead."
msgstr ""

#: ../../../accounting/psi.rst:108
msgid ""
"Unprivileged users can also create monitors, with the only limitation that "
"the window size must be a multiple of 2s, in order to prevent excessive "
"resource usage."
msgstr ""

#: ../../../accounting/psi.rst:112
msgid ""
"When activated, psi monitor stays active for at least the duration of one "
"tracking window to avoid repeated activations/deactivations when system is "
"bouncing in and out of the stall state."
msgstr ""

#: ../../../accounting/psi.rst:116
msgid ""
"Notifications to the userspace are rate-limited to one per tracking window."
msgstr ""

#: ../../../accounting/psi.rst:118
msgid ""
"The trigger will de-register when the file descriptor used to define the "
"trigger  is closed."
msgstr ""

#: ../../../accounting/psi.rst:122
msgid "Userspace monitor usage example"
msgstr ""

#: ../../../accounting/psi.rst:179
msgid "Cgroup2 interface"
msgstr ""

#: ../../../accounting/psi.rst:181
msgid ""
"In a system with a CONFIG_CGROUPS=y kernel and the cgroup2 filesystem "
"mounted, pressure stall information is also tracked for tasks grouped into "
"cgroups. Each subdirectory in the cgroupfs mountpoint contains cpu.pressure, "
"memory.pressure, and io.pressure files; the format is the same as the /proc/"
"pressure/ files."
msgstr ""

#: ../../../accounting/psi.rst:187
msgid ""
"Per-cgroup psi monitors can be specified and used the same way as system-"
"wide ones."
msgstr ""
