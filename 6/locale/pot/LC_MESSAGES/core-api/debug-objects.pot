# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-28 09:03+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../core-api/debug-objects.rst:3
msgid "The object-lifetime debugging infrastructure"
msgstr ""

#: ../../../core-api/debug-objects.rst:0
msgid "Author"
msgstr ""

#: ../../../core-api/debug-objects.rst:5
msgid "Thomas Gleixner"
msgstr ""

#: ../../../core-api/debug-objects.rst:8
msgid "Introduction"
msgstr ""

#: ../../../core-api/debug-objects.rst:10
msgid ""
"debugobjects is a generic infrastructure to track the life time of kernel "
"objects and validate the operations on those."
msgstr ""

#: ../../../core-api/debug-objects.rst:13
msgid "debugobjects is useful to check for the following error patterns:"
msgstr ""

#: ../../../core-api/debug-objects.rst:15
msgid "Activation of uninitialized objects"
msgstr ""

#: ../../../core-api/debug-objects.rst:17
msgid "Initialization of active objects"
msgstr ""

#: ../../../core-api/debug-objects.rst:19
msgid "Usage of freed/destroyed objects"
msgstr ""

#: ../../../core-api/debug-objects.rst:21
msgid ""
"debugobjects is not changing the data structure of the real object so it can "
"be compiled in with a minimal runtime impact and enabled on demand with a "
"kernel command line option."
msgstr ""

#: ../../../core-api/debug-objects.rst:26
msgid "Howto use debugobjects"
msgstr ""

#: ../../../core-api/debug-objects.rst:28
msgid ""
"A kernel subsystem needs to provide a data structure which describes the "
"object type and add calls into the debug code at appropriate places. The "
"data structure to describe the object type needs at minimum the name of the "
"object type. Optional functions can and should be provided to fixup detected "
"problems so the kernel can continue to work and the debug information can be "
"retrieved from a live system instead of hard core debugging with serial "
"consoles and stack trace transcripts from the monitor."
msgstr ""

#: ../../../core-api/debug-objects.rst:37
msgid "The debug calls provided by debugobjects are:"
msgstr ""

#: ../../../core-api/debug-objects.rst:39
msgid "debug_object_init"
msgstr ""

#: ../../../core-api/debug-objects.rst:41
msgid "debug_object_init_on_stack"
msgstr ""

#: ../../../core-api/debug-objects.rst:43
msgid "debug_object_activate"
msgstr ""

#: ../../../core-api/debug-objects.rst:45
msgid "debug_object_deactivate"
msgstr ""

#: ../../../core-api/debug-objects.rst:47
msgid "debug_object_destroy"
msgstr ""

#: ../../../core-api/debug-objects.rst:49
msgid "debug_object_free"
msgstr ""

#: ../../../core-api/debug-objects.rst:51
msgid "debug_object_assert_init"
msgstr ""

#: ../../../core-api/debug-objects.rst:53
msgid ""
"Each of these functions takes the address of the real object and a pointer "
"to the object type specific debug description structure."
msgstr ""

#: ../../../core-api/debug-objects.rst:56
msgid ""
"Each detected error is reported in the statistics and a limited number of "
"errors are printk'ed including a full stack trace."
msgstr ""

#: ../../../core-api/debug-objects.rst:59
msgid ""
"The statistics are available via /sys/kernel/debug/debug_objects/stats. They "
"provide information about the number of warnings and the number of "
"successful fixups along with information about the usage of the internal "
"tracking objects and the state of the internal tracking objects pool."
msgstr ""

#: ../../../core-api/debug-objects.rst:65
msgid "Debug functions"
msgstr ""

#: ../../../core-api/debug-objects:67: lib/debugobjects.c:770
msgid "debug checks when an object is initialized"
msgstr ""

#: ../../../core-api/debug-objects:114: lib/debugobjects.c:803
#: ../../../core-api/debug-objects:139: lib/debugobjects.c:861
#: ../../../core-api/debug-objects:152: lib/debugobjects.c:904
#: ../../../core-api/debug-objects:171: lib/debugobjects.c:951
#: ../../../core-api/debug-objects:188: lib/debugobjects.c:993
#: ../../../core-api/debug-objects:67: lib/debugobjects.c:774
#: ../../../core-api/debug-objects:90: lib/debugobjects.c:788
msgid "**Parameters**"
msgstr ""

#: ../../../core-api/debug-objects:114: lib/debugobjects.c:805
#: ../../../core-api/debug-objects:139: lib/debugobjects.c:863
#: ../../../core-api/debug-objects:152: lib/debugobjects.c:906
#: ../../../core-api/debug-objects:171: lib/debugobjects.c:953
#: ../../../core-api/debug-objects:188: lib/debugobjects.c:995
#: ../../../core-api/debug-objects:67: lib/debugobjects.c:776
#: ../../../core-api/debug-objects:90: lib/debugobjects.c:790
msgid "``void *addr``"
msgstr ""

#: ../../../core-api/debug-objects:114: lib/debugobjects.c:800
#: ../../../core-api/debug-objects:139: lib/debugobjects.c:858
#: ../../../core-api/debug-objects:152: lib/debugobjects.c:901
#: ../../../core-api/debug-objects:171: lib/debugobjects.c:948
#: ../../../core-api/debug-objects:188: lib/debugobjects.c:990
#: ../../../core-api/debug-objects:67: lib/debugobjects.c:771
#: ../../../core-api/debug-objects:90: lib/debugobjects.c:786
msgid "address of the object"
msgstr ""

#: ../../../core-api/debug-objects:114: lib/debugobjects.c:802
#: ../../../core-api/debug-objects:139: lib/debugobjects.c:860
#: ../../../core-api/debug-objects:152: lib/debugobjects.c:903
#: ../../../core-api/debug-objects:171: lib/debugobjects.c:950
#: ../../../core-api/debug-objects:188: lib/debugobjects.c:992
#: ../../../core-api/debug-objects:67: lib/debugobjects.c:773
#: ../../../core-api/debug-objects:90: lib/debugobjects.c:788
msgid "``const struct debug_obj_descr *descr``"
msgstr ""

#: ../../../core-api/debug-objects:139: lib/debugobjects.c:859
#: ../../../core-api/debug-objects:152: lib/debugobjects.c:902
#: ../../../core-api/debug-objects:171: lib/debugobjects.c:949
#: ../../../core-api/debug-objects:188: lib/debugobjects.c:991
#: ../../../core-api/debug-objects:67: lib/debugobjects.c:772
#: ../../../core-api/debug-objects:90: lib/debugobjects.c:787
msgid "pointer to an object specific debug description structure"
msgstr ""

#: ../../../core-api/debug-objects.rst:70
msgid ""
"This function is called whenever the initialization function of a real "
"object is called."
msgstr ""

#: ../../../core-api/debug-objects.rst:73
#: ../../../core-api/debug-objects.rst:96
msgid ""
"When the real object is already tracked by debugobjects it is checked, "
"whether the object can be initialized. Initializing is not allowed for "
"active and destroyed objects. When debugobjects detects an error, then it "
"calls the fixup_init function of the object type description structure if "
"provided by the caller. The fixup function can correct the problem before "
"the real initialization of the object happens. E.g. it can deactivate an "
"active object in order to prevent damage to the subsystem."
msgstr ""

#: ../../../core-api/debug-objects.rst:82
msgid ""
"When the real object is not yet tracked by debugobjects, debugobjects "
"allocates a tracker object for the real object and sets the tracker object "
"state to ODEBUG_STATE_INIT. It verifies that the object is not on the "
"callers stack. If it is on the callers stack then a limited number of "
"warnings including a full stack trace is printk'ed. The calling code must "
"use debug_object_init_on_stack() and remove the object before leaving the "
"function which allocated it. See next section."
msgstr ""

#: ../../../core-api/debug-objects:90: lib/debugobjects.c:784
msgid "debug checks when an object on stack is initialized"
msgstr ""

#: ../../../core-api/debug-objects.rst:93
msgid ""
"This function is called whenever the initialization function of a real "
"object which resides on the stack is called."
msgstr ""

#: ../../../core-api/debug-objects.rst:105
msgid ""
"When the real object is not yet tracked by debugobjects debugobjects "
"allocates a tracker object for the real object and sets the tracker object "
"state to ODEBUG_STATE_INIT. It verifies that the object is on the callers "
"stack."
msgstr ""

#: ../../../core-api/debug-objects.rst:110
msgid ""
"An object which is on the stack must be removed from the tracker by calling "
"debug_object_free() before the function which allocates the object returns. "
"Otherwise we keep track of stale objects."
msgstr ""

#: ../../../core-api/debug-objects:114: lib/debugobjects.c:799
msgid "debug checks when an object is activated"
msgstr ""

#: ../../../core-api/debug-objects:114: lib/debugobjects.c:801
msgid ""
"pointer to an object specific debug description structure Returns 0 for "
"success, -EINVAL for check failed."
msgstr ""

#: ../../../core-api/debug-objects.rst:117
msgid ""
"This function is called whenever the activation function of a real object is "
"called."
msgstr ""

#: ../../../core-api/debug-objects.rst:120
msgid ""
"When the real object is already tracked by debugobjects it is checked, "
"whether the object can be activated. Activating is not allowed for active "
"and destroyed objects. When debugobjects detects an error, then it calls the "
"fixup_activate function of the object type description structure if provided "
"by the caller. The fixup function can correct the problem before the real "
"activation of the object happens. E.g. it can deactivate an active object in "
"order to prevent damage to the subsystem."
msgstr ""

#: ../../../core-api/debug-objects.rst:128
msgid ""
"When the real object is not yet tracked by debugobjects then the "
"fixup_activate function is called if available. This is necessary to allow "
"the legitimate activation of statically allocated and initialized objects. "
"The fixup function checks whether the object is valid and calls the "
"debug_objects_init() function to initialize the tracking of this object."
msgstr ""

#: ../../../core-api/debug-objects.rst:135
msgid ""
"When the activation is legitimate, then the state of the associated tracker "
"object is set to ODEBUG_STATE_ACTIVE."
msgstr ""

#: ../../../core-api/debug-objects:139: lib/debugobjects.c:857
msgid "debug checks when an object is deactivated"
msgstr ""

#: ../../../core-api/debug-objects.rst:142
msgid ""
"This function is called whenever the deactivation function of a real object "
"is called."
msgstr ""

#: ../../../core-api/debug-objects.rst:145
msgid ""
"When the real object is tracked by debugobjects it is checked, whether the "
"object can be deactivated. Deactivating is not allowed for untracked or "
"destroyed objects."
msgstr ""

#: ../../../core-api/debug-objects.rst:149
msgid ""
"When the deactivation is legitimate, then the state of the associated "
"tracker object is set to ODEBUG_STATE_INACTIVE."
msgstr ""

#: ../../../core-api/debug-objects:152: lib/debugobjects.c:900
msgid "debug checks when an object is destroyed"
msgstr ""

#: ../../../core-api/debug-objects.rst:155
msgid ""
"This function is called to mark an object destroyed. This is useful to "
"prevent the usage of invalid objects, which are still available in memory: "
"either statically allocated objects or objects which are freed later."
msgstr ""

#: ../../../core-api/debug-objects.rst:160
msgid ""
"When the real object is tracked by debugobjects it is checked, whether the "
"object can be destroyed. Destruction is not allowed for active and destroyed "
"objects. When debugobjects detects an error, then it calls the fixup_destroy "
"function of the object type description structure if provided by the caller. "
"The fixup function can correct the problem before the real destruction of "
"the object happens. E.g. it can deactivate an active object in order to "
"prevent damage to the subsystem."
msgstr ""

#: ../../../core-api/debug-objects.rst:168
msgid ""
"When the destruction is legitimate, then the state of the associated tracker "
"object is set to ODEBUG_STATE_DESTROYED."
msgstr ""

#: ../../../core-api/debug-objects:171: lib/debugobjects.c:947
msgid "debug checks when an object is freed"
msgstr ""

#: ../../../core-api/debug-objects.rst:174
msgid "This function is called before an object is freed."
msgstr ""

#: ../../../core-api/debug-objects.rst:176
msgid ""
"When the real object is tracked by debugobjects it is checked, whether the "
"object can be freed. Free is not allowed for active objects. When "
"debugobjects detects an error, then it calls the fixup_free function of the "
"object type description structure if provided by the caller. The fixup "
"function can correct the problem before the real free of the object happens. "
"E.g. it can deactivate an active object in order to prevent damage to the "
"subsystem."
msgstr ""

#: ../../../core-api/debug-objects.rst:184
msgid ""
"Note that debug_object_free removes the object from the tracker. Later usage "
"of the object is detected by the other debug checks."
msgstr ""

#: ../../../core-api/debug-objects:188: lib/debugobjects.c:989
msgid "debug checks when object should be init-ed"
msgstr ""

#: ../../../core-api/debug-objects.rst:191
msgid "This function is called to assert that an object has been initialized."
msgstr ""

#: ../../../core-api/debug-objects.rst:193
msgid ""
"When the real object is not tracked by debugobjects, it calls "
"fixup_assert_init of the object type description structure provided by the "
"caller, with the hardcoded object state ODEBUG_NOT_AVAILABLE. The fixup "
"function can correct the problem by calling debug_object_init and other "
"specific initializing functions."
msgstr ""

#: ../../../core-api/debug-objects.rst:199
msgid "When the real object is already tracked by debugobjects it is ignored."
msgstr ""

#: ../../../core-api/debug-objects.rst:202
msgid "Fixup functions"
msgstr ""

#: ../../../core-api/debug-objects.rst:205
msgid "Debug object type description structure"
msgstr ""

#: ../../../core-api/debug-objects:207: include/linux/debugobjects.h:21
msgid "representation of an tracked object"
msgstr ""

#: ../../../core-api/debug-objects:207: include/linux/debugobjects.h:25
#: include/linux/debugobjects.h:45
msgid "**Definition**::"
msgstr ""

#: ../../../core-api/debug-objects:207: include/linux/debugobjects.h:38
#: include/linux/debugobjects.h:58
msgid "**Members**"
msgstr ""

#: ../../../core-api/debug-objects:207: include/linux/debugobjects.h:22
msgid "``node``"
msgstr ""

#: ../../../core-api/debug-objects:207: include/linux/debugobjects.h:23
msgid "hlist node to link the object into the tracker list"
msgstr ""

#: ../../../core-api/debug-objects:207: include/linux/debugobjects.h:23
msgid "``state``"
msgstr ""

#: ../../../core-api/debug-objects:207: include/linux/debugobjects.h:24
msgid "tracked object state"
msgstr ""

#: ../../../core-api/debug-objects:207: include/linux/debugobjects.h:24
msgid "``astate``"
msgstr ""

#: ../../../core-api/debug-objects:207: include/linux/debugobjects.h:25
msgid "current active state"
msgstr ""

#: ../../../core-api/debug-objects:207: include/linux/debugobjects.h:1
msgid "``{unnamed_union}``"
msgstr ""

#: ../../../core-api/debug-objects:207: include/linux/debugobjects.h:2
msgid "anonymous"
msgstr ""

#: ../../../core-api/debug-objects:207: include/linux/debugobjects.h:25
msgid "``object``"
msgstr ""

#: ../../../core-api/debug-objects:207: include/linux/debugobjects.h:26
msgid "pointer to the real object"
msgstr ""

#: ../../../core-api/debug-objects:207: include/linux/debugobjects.h:26
msgid "``batch_last``"
msgstr ""

#: ../../../core-api/debug-objects:207: include/linux/debugobjects.h:27
msgid "pointer to the last hlist node in a batch"
msgstr ""

#: ../../../core-api/debug-objects:207: include/linux/debugobjects.h:27
msgid "``descr``"
msgstr ""

#: ../../../core-api/debug-objects:207: include/linux/debugobjects.h:28
msgid "pointer to an object type specific debug description structure"
msgstr ""

#: ../../../core-api/debug-objects:207: include/linux/debugobjects.h:41
msgid "object type specific debug description structure"
msgstr ""

#: ../../../core-api/debug-objects:207: include/linux/debugobjects.h:43
msgid "``name``"
msgstr ""

#: ../../../core-api/debug-objects:207: include/linux/debugobjects.h:44
msgid "name of the object typee"
msgstr ""

#: ../../../core-api/debug-objects:207: include/linux/debugobjects.h:44
msgid "``debug_hint``"
msgstr ""

#: ../../../core-api/debug-objects:207: include/linux/debugobjects.h:45
msgid ""
"function returning address, which have associated kernel symbol, to allow "
"identify the object"
msgstr ""

#: ../../../core-api/debug-objects:207: include/linux/debugobjects.h:46
msgid "``is_static_object``"
msgstr ""

#: ../../../core-api/debug-objects:207: include/linux/debugobjects.h:47
msgid "return true if the obj is static, otherwise return false"
msgstr ""

#: ../../../core-api/debug-objects:207: include/linux/debugobjects.h:47
msgid "``fixup_init``"
msgstr ""

#: ../../../core-api/debug-objects:207: include/linux/debugobjects.h:48
msgid ""
"fixup function, which is called when the init check fails. All fixup "
"functions must return true if fixup was successful, otherwise return false"
msgstr ""

#: ../../../core-api/debug-objects:207: include/linux/debugobjects.h:50
msgid "``fixup_activate``"
msgstr ""

#: ../../../core-api/debug-objects:207: include/linux/debugobjects.h:51
msgid "fixup function, which is called when the activate check fails"
msgstr ""

#: ../../../core-api/debug-objects:207: include/linux/debugobjects.h:52
msgid "``fixup_destroy``"
msgstr ""

#: ../../../core-api/debug-objects:207: include/linux/debugobjects.h:53
msgid "fixup function, which is called when the destroy check fails"
msgstr ""

#: ../../../core-api/debug-objects:207: include/linux/debugobjects.h:54
msgid "``fixup_free``"
msgstr ""

#: ../../../core-api/debug-objects:207: include/linux/debugobjects.h:55
msgid "fixup function, which is called when the free check fails"
msgstr ""

#: ../../../core-api/debug-objects:207: include/linux/debugobjects.h:56
msgid "``fixup_assert_init``"
msgstr ""

#: ../../../core-api/debug-objects:207: include/linux/debugobjects.h:57
msgid "fixup function, which is called when the assert_init check fails"
msgstr ""

#: ../../../core-api/debug-objects.rst:211
msgid "fixup_init"
msgstr ""

#: ../../../core-api/debug-objects.rst:213
msgid ""
"This function is called from the debug code whenever a problem in "
"debug_object_init is detected. The function takes the address of the object "
"and the state which is currently recorded in the tracker."
msgstr ""

#: ../../../core-api/debug-objects.rst:217
msgid "Called from debug_object_init when the object state is:"
msgstr ""

#: ../../../core-api/debug-objects.rst:219
#: ../../../core-api/debug-objects.rst:238
#: ../../../core-api/debug-objects.rst:264
#: ../../../core-api/debug-objects.rst:280
msgid "ODEBUG_STATE_ACTIVE"
msgstr ""

#: ../../../core-api/debug-objects.rst:221
#: ../../../core-api/debug-objects.rst:240
#: ../../../core-api/debug-objects.rst:266
#: ../../../core-api/debug-objects.rst:282
#: ../../../core-api/debug-objects.rst:295
msgid ""
"The function returns true when the fixup was successful, otherwise false. "
"The return value is used to update the statistics."
msgstr ""

#: ../../../core-api/debug-objects.rst:224
msgid ""
"Note, that the function needs to call the debug_object_init() function "
"again, after the damage has been repaired in order to keep the state "
"consistent."
msgstr ""

#: ../../../core-api/debug-objects.rst:229
msgid "fixup_activate"
msgstr ""

#: ../../../core-api/debug-objects.rst:231
msgid ""
"This function is called from the debug code whenever a problem in "
"debug_object_activate is detected."
msgstr ""

#: ../../../core-api/debug-objects.rst:234
msgid "Called from debug_object_activate when the object state is:"
msgstr ""

#: ../../../core-api/debug-objects.rst:236
msgid "ODEBUG_STATE_NOTAVAILABLE"
msgstr ""

#: ../../../core-api/debug-objects.rst:243
msgid ""
"Note that the function needs to call the debug_object_activate() function "
"again after the damage has been repaired in order to keep the state "
"consistent."
msgstr ""

#: ../../../core-api/debug-objects.rst:247
msgid ""
"The activation of statically initialized objects is a special case. When "
"debug_object_activate() has no tracked object for this object address then "
"fixup_activate() is called with object state ODEBUG_STATE_NOTAVAILABLE. The "
"fixup function needs to check whether this is a legitimate case of a "
"statically initialized object or not. In case it is it calls "
"debug_object_init() and debug_object_activate() to make the object known to "
"the tracker and marked active. In this case the function should return false "
"because this is not a real fixup."
msgstr ""

#: ../../../core-api/debug-objects.rst:257
msgid "fixup_destroy"
msgstr ""

#: ../../../core-api/debug-objects.rst:259
msgid ""
"This function is called from the debug code whenever a problem in "
"debug_object_destroy is detected."
msgstr ""

#: ../../../core-api/debug-objects.rst:262
msgid "Called from debug_object_destroy when the object state is:"
msgstr ""

#: ../../../core-api/debug-objects.rst:270
msgid "fixup_free"
msgstr ""

#: ../../../core-api/debug-objects.rst:272
msgid ""
"This function is called from the debug code whenever a problem in "
"debug_object_free is detected. Further it can be called from the debug "
"checks in kfree/vfree, when an active object is detected from the "
"debug_check_no_obj_freed() sanity checks."
msgstr ""

#: ../../../core-api/debug-objects.rst:277
msgid ""
"Called from debug_object_free() or debug_check_no_obj_freed() when the "
"object state is:"
msgstr ""

#: ../../../core-api/debug-objects.rst:286
msgid "fixup_assert_init"
msgstr ""

#: ../../../core-api/debug-objects.rst:288
msgid ""
"This function is called from the debug code whenever a problem in "
"debug_object_assert_init is detected."
msgstr ""

#: ../../../core-api/debug-objects.rst:291
msgid ""
"Called from debug_object_assert_init() with a hardcoded state "
"ODEBUG_STATE_NOTAVAILABLE when the object is not found in the debug bucket."
msgstr ""

#: ../../../core-api/debug-objects.rst:298
msgid ""
"Note, this function should make sure debug_object_init() is called before "
"returning."
msgstr ""

#: ../../../core-api/debug-objects.rst:301
msgid ""
"The handling of statically initialized objects is a special case. The fixup "
"function should check if this is a legitimate case of a statically "
"initialized object or not. In this case only debug_object_init() should be "
"called to make the object known to the tracker. Then the function should "
"return false because this is not a real fixup."
msgstr ""

#: ../../../core-api/debug-objects.rst:308
msgid "Known Bugs And Assumptions"
msgstr ""

#: ../../../core-api/debug-objects.rst:310
msgid "None (knock on wood)."
msgstr ""
