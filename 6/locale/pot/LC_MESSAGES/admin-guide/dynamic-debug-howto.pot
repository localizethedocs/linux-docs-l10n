# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../admin-guide/dynamic-debug-howto.rst:2
msgid "Dynamic debug"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:6
msgid "Introduction"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:8
msgid ""
"Dynamic debug allows you to dynamically enable/disable kernel debug-print "
"code to obtain additional kernel information."
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:11
msgid ""
"If ``/proc/dynamic_debug/control`` exists, your kernel has dynamic debug.  "
"You'll need root access (sudo su) to use this."
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:14
msgid "Dynamic debug provides:"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:16
msgid ""
"a Catalog of all *prdbgs* in your kernel. ``cat /proc/dynamic_debug/"
"control`` to see them."
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:19
msgid ""
"a Simple query/command language to alter *prdbgs* by selecting on any "
"combination of 0 or 1 of:"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:22
msgid "source filename"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:23
msgid "function name"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:24
msgid "line number (including ranges of line numbers)"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:25
msgid "module name"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:26
msgid "format string"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:27
msgid "class name (as known/declared by each module)"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:29
msgid ""
"NOTE: To actually get the debug-print output on the console, you may need to "
"adjust the kernel ``loglevel=``, or use ``ignore_loglevel``. Read about "
"these kernel parameters in Documentation/admin-guide/kernel-parameters.rst."
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:35
msgid "Viewing Dynamic Debug Behaviour"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:37
msgid ""
"You can view the currently configured behaviour in the *prdbg* catalog::"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:48
msgid ""
"The 3rd space-delimited column shows the current flags, preceded by a ``=`` "
"for easy use with grep/cut. ``=p`` shows enabled callsites."
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:52
msgid "Controlling dynamic debug Behaviour"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:54
msgid ""
"The behaviour of *prdbg* sites are controlled by writing query/commands to "
"the control file.  Example::"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:67
msgid "Error messages go to console/syslog::"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:74
msgid ""
"If debugfs is also enabled and mounted, ``dynamic_debug/control`` is also "
"under the mount-dir, typically ``/sys/kernel/debug/``."
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:78
msgid "Command Language Reference"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:80
msgid ""
"At the basic lexical level, a command is a sequence of words separated by "
"spaces or tabs.  So these are all equivalent::"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:87
msgid ""
"Command submissions are bounded by a write() system call. Multiple commands "
"can be written together, separated by ``;`` or ``\\n``::"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:97
msgid ""
"You can also use wildcards in each query term. The match rule supports ``*`` "
"(matches zero or more characters) and ``?`` (matches exactly one character). "
"For example, you can match all usb drivers::"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:103
msgid ""
"Syntactically, a command is pairs of keyword values, followed by a flags "
"change or setting::"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:108
msgid ""
"The match-spec's select *prdbgs* from the catalog, upon which to apply the "
"flags-spec, all constraints are ANDed together.  An absent keyword is the "
"same as keyword \"*\"."
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:113
msgid ""
"A match specification is a keyword, which selects the attribute of the "
"callsite to be compared, and a value to compare against.  Possible keywords "
"are:::"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:133
msgid ""
"``line-range`` cannot contain space, e.g. \"1-30\" is valid range but \"1 - "
"30\" is not."
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:137
msgid "The meanings of each keyword are:"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:139
msgid "func"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:140
msgid ""
"The given string is compared against the function name of each callsite.  "
"Example::"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:146
msgid "file"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:147
msgid ""
"The given string is compared against either the src-root relative pathname, "
"or the basename of the source file of each callsite. Examples::"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:157
msgid "module"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:158
msgid ""
"The given string is compared against the module name of each callsite.  The "
"module name is the string as seen in ``lsmod``, i.e. without the directory "
"or the ``.ko`` suffix and with ``-`` changed to ``_``.  Examples::"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:167
msgid "format"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:168
msgid ""
"The given string is searched for in the dynamic debug format string.  Note "
"that the string does not need to match the entire format, only some part.  "
"Whitespace and other special characters can be escaped using C octal "
"character escape ``\\ooo`` notation, e.g. the space character is ``\\040``. "
"Alternatively, the string can be enclosed in double quote characters "
"(``\"``) or single quote characters (``'``). Examples::"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:183
msgid "class"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:184
msgid ""
"The given class_name is validated against each module, which may have "
"declared a list of known class_names.  If the class_name is found for a "
"module, callsite & class matching and adjustment proceeds.  Examples::"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:193
msgid "line"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:194
msgid ""
"The given line number or range of line numbers is compared against the line "
"number of each ``pr_debug()`` callsite.  A single line number matches the "
"callsite line number exactly.  A range of line numbers matches any callsite "
"between the first and last line number inclusive.  An empty first number "
"means the first line in the file, an empty last line number means the last "
"line number in the file.  Examples::"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:207
msgid ""
"The flags specification comprises a change operation followed by one or more "
"flag characters.  The change operation is one of the characters::"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:215
msgid "The flags are::"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:227
msgid ""
"For ``print_hex_dump_debug()`` and ``print_hex_dump_bytes()``, only the "
"``p`` flag has meaning, other flags are ignored."
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:230
msgid ""
"Note the regexp ``^[-+=][fslmpt_]+$`` matches a flags specification. To "
"clear all flags at once, use ``=_`` or ``-fslmpt``."
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:235
msgid "Debug messages during Boot Process"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:237
msgid ""
"To activate debug messages for core code and built-in modules during the "
"boot process, even before userspace and debugfs exists, use "
"``dyndbg=\"QUERY\"`` or ``module.dyndbg=\"QUERY\"``.  QUERY follows the "
"syntax described above, but must not exceed 1023 characters.  Your "
"bootloader may impose lower limits."
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:243
msgid ""
"These ``dyndbg`` params are processed just after the ddebug tables are "
"processed, as part of the early_initcall.  Thus you can enable debug "
"messages in all code run after this early_initcall via this boot parameter."
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:248
msgid "On an x86 system for example ACPI enablement is a subsys_initcall and::"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:252
msgid ""
"will show early Embedded Controller transactions during ACPI setup if your "
"machine (typically a laptop) has an Embedded Controller. PCI (or other "
"devices) initialization also is a hot candidate for using this boot "
"parameter for debugging purposes."
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:257
msgid ""
"If ``foo`` module is not built-in, ``foo.dyndbg`` will still be processed at "
"boot time, without effect, but will be reprocessed when module is loaded "
"later. Bare ``dyndbg=`` is only processed at boot."
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:263
msgid "Debug Messages at Module Initialization Time"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:265
msgid ""
"When ``modprobe foo`` is called, modprobe scans ``/proc/cmdline`` for ``foo."
"params``, strips ``foo.``, and passes them to the kernel along with params "
"given in modprobe args or ``/etc/modprobe.d/*.conf`` files, in the following "
"order:"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:270
msgid "parameters given via ``/etc/modprobe.d/*.conf``::"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:275
msgid "``foo.dyndbg`` as given in boot args, ``foo.`` is stripped and passed::"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:279
msgid "args to modprobe::"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:283
msgid ""
"These ``dyndbg`` queries are applied in order, with last having final say. "
"This allows boot args to override or modify those from ``/etc/modprobe.d`` "
"(sensible, since 1 is system wide, 2 is kernel or boot specific), and "
"modprobe args to override both."
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:288
msgid ""
"In the ``foo.dyndbg=\"QUERY\"`` form, the query must exclude ``module foo``. "
"``foo`` is extracted from the param-name, and applied to each query in "
"``QUERY``, and only 1 match-spec of each type is allowed."
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:292
msgid "The ``dyndbg`` option is a \"fake\" module parameter, which means:"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:294
msgid "modules do not need to define it explicitly"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:295
msgid "every module gets it tacitly, whether they use pr_debug or not"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:296
msgid ""
"it doesn't appear in ``/sys/module/$module/parameters/`` To see it, grep the "
"control file, or inspect ``/proc/cmdline.``"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:299
msgid ""
"For ``CONFIG_DYNAMIC_DEBUG`` kernels, any settings given at boot-time (or "
"enabled by ``-DDEBUG`` flag during compilation) can be disabled later via "
"the debugfs interface if the debug messages are no longer needed::"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:306
msgid "Examples"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:350
msgid "Kernel Configuration"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:352
msgid "Dynamic Debug is enabled via kernel config items::"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:357
msgid ""
"If you do not want to enable dynamic debug globally (i.e. in some embedded "
"system), you may set ``CONFIG_DYNAMIC_DEBUG_CORE`` as basic support of "
"dynamic debug and add ``ccflags := -DDYNAMIC_DEBUG_MODULE`` into the "
"Makefile of any modules which you'd like to dynamically debug later."
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:364
msgid "Kernel *prdbg* API"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:366
msgid ""
"The following functions are cataloged and controllable when dynamic debug is "
"enabled::"
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:374
msgid ""
"Otherwise, they are off by default; ``ccflags += -DDEBUG`` or ``#define "
"DEBUG`` in a source file will enable them appropriately."
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:377
msgid ""
"If ``CONFIG_DYNAMIC_DEBUG`` is not set, ``print_hex_dump_debug()`` is just a "
"shortcut for ``print_hex_dump(KERN_DEBUG)``."
msgstr ""

#: ../../../admin-guide/dynamic-debug-howto.rst:380
msgid ""
"For ``print_hex_dump_debug()``/``print_hex_dump_bytes()``, format string is "
"its ``prefix_str`` argument, if it is constant string; or ``hexdump`` in "
"case ``prefix_str`` is built dynamically."
msgstr ""
