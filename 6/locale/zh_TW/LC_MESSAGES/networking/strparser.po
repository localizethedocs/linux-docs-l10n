# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../networking/strparser.rst:5
msgid "Stream Parser (strparser)"
msgstr ""

#: ../../../networking/strparser.rst:8
msgid "Introduction"
msgstr ""

#: ../../../networking/strparser.rst:10
msgid ""
"The stream parser (strparser) is a utility that parses messages of an "
"application layer protocol running over a data stream. The stream parser "
"works in conjunction with an upper layer in the kernel to provide kernel "
"support for application layer messages. For instance, Kernel Connection "
"Multiplexor (KCM) uses the Stream Parser to parse messages using a BPF "
"program."
msgstr ""

#: ../../../networking/strparser.rst:17
msgid ""
"The strparser works in one of two modes: receive callback or general mode."
msgstr ""

#: ../../../networking/strparser.rst:20
msgid ""
"In receive callback mode, the strparser is called from the data_ready "
"callback of a TCP socket. Messages are parsed and delivered as they are "
"received on the socket."
msgstr ""

#: ../../../networking/strparser.rst:24
msgid ""
"In general mode, a sequence of skbs are fed to strparser from an outside "
"source. Message are parsed and delivered as the sequence is processed. This "
"modes allows strparser to be applied to arbitrary streams of data."
msgstr ""

#: ../../../networking/strparser.rst:30
msgid "Interface"
msgstr ""

#: ../../../networking/strparser.rst:32
msgid ""
"The API includes a context structure, a set of callbacks, utility functions, "
"and a data_ready function for receive callback mode. The callbacks include a "
"parse_msg function that is called to perform parsing (e.g.  BPF parsing in "
"case of KCM), and a rcv_msg function that is called when a full message has "
"been completed."
msgstr ""

#: ../../../networking/strparser.rst:39
msgid "Functions"
msgstr ""

#: ../../../networking/strparser.rst:46
msgid ""
"Called to initialize a stream parser. strp is a struct of type strparser "
"that is allocated by the upper layer. sk is the TCP socket associated with "
"the stream parser for use with receive callback mode; in general mode this "
"is set to NULL. Callbacks are called by the stream parser (the callbacks are "
"listed below)."
msgstr ""

#: ../../../networking/strparser.rst:56
msgid ""
"Temporarily pause a stream parser. Message parsing is suspended and no new "
"messages are delivered to the upper layer."
msgstr ""

#: ../../../networking/strparser.rst:63
msgid "Unpause a paused stream parser."
msgstr ""

#: ../../../networking/strparser.rst:69
msgid ""
"strp_stop is called to completely stop stream parser operations. This is "
"called internally when the stream parser encounters an error, and it is "
"called from the upper layer to stop parsing operations."
msgstr ""

#: ../../../networking/strparser.rst:78
msgid ""
"strp_done is called to release any resources held by the stream parser "
"instance. This must be called after the stream processor has been stopped."
msgstr ""

#: ../../../networking/strparser.rst:88
msgid ""
"strp_process is called in general mode for a stream parser to parse an "
"sk_buff. The number of bytes processed or a negative error number is "
"returned. Note that strp_process does not consume the sk_buff. max_msg_size "
"is maximum size the stream parser will parse. timeo is timeout for "
"completing a message."
msgstr ""

#: ../../../networking/strparser.rst:98
msgid ""
"The upper layer calls strp_tcp_data_ready when data is ready on the lower "
"socket for strparser to process. This should be called from a data_ready "
"callback that is set on the socket. Note that maximum messages size is the "
"limit of the receive socket buffer and message timeout is the receive "
"timeout for the socket."
msgstr ""

#: ../../../networking/strparser.rst:108
msgid ""
"strp_check_rcv is called to check for new messages on the socket. This is "
"normally called at initialization of a stream parser instance or after "
"strp_unpause."
msgstr ""

#: ../../../networking/strparser.rst:113
msgid "Callbacks"
msgstr ""

#: ../../../networking/strparser.rst:115
msgid "There are seven callbacks:"
msgstr ""

#: ../../../networking/strparser.rst:121
msgid ""
"parse_msg is called to determine the length of the next message in the "
"stream. The upper layer must implement this function. It should parse the "
"sk_buff as containing the headers for the next application layer message in "
"the stream."
msgstr ""

#: ../../../networking/strparser.rst:126
msgid ""
"The skb->cb in the input skb is a struct strp_msg. Only the offset field is "
"relevant in parse_msg and gives the offset where the message starts in the "
"skb."
msgstr ""

#: ../../../networking/strparser.rst:130
msgid "The return values of this function are:"
msgstr ""

#: ../../../networking/strparser.rst:133
msgid ">0"
msgstr ""

#: ../../../networking/strparser.rst:133
msgid "indicates length of successfully parsed message"
msgstr ""

#: ../../../networking/strparser.rst:134
msgid "0"
msgstr ""

#: ../../../networking/strparser.rst:134
msgid "indicates more data must be received to parse the message"
msgstr ""

#: ../../../networking/strparser.rst:135
msgid "-ESTRPIPE"
msgstr ""

#: ../../../networking/strparser.rst:135
msgid ""
"current message should not be processed by the kernel, return control of the "
"socket to userspace which can proceed to read the messages itself"
msgstr ""

#: ../../../networking/strparser.rst:138
msgid "other < 0"
msgstr ""

#: ../../../networking/strparser.rst:138
msgid ""
"Error in parsing, give control back to userspace assuming that "
"synchronization is lost and the stream is unrecoverable (application "
"expected to close TCP socket)"
msgstr ""

#: ../../../networking/strparser.rst:143
msgid ""
"In the case that an error is returned (return value is less than zero) and "
"the parser is in receive callback mode, then it will set the error on TCP "
"socket and wake it up. If parse_msg returned -ESTRPIPE and the stream parser "
"had previously read some bytes for the current message, then the error set "
"on the attached socket is ENODATA since the stream is unrecoverable in that "
"case."
msgstr ""

#: ../../../networking/strparser.rst:154
msgid ""
"The lock callback is called to lock the strp structure when the strparser is "
"performing an asynchronous operation (such as processing a timeout). In "
"receive callback mode the default function is to lock_sock for the "
"associated socket. In general mode the callback must be set appropriately."
msgstr ""

#: ../../../networking/strparser.rst:164
msgid ""
"The unlock callback is called to release the lock obtained by the lock "
"callback. In receive callback mode the default function is release_sock for "
"the associated socket. In general mode the callback must be set "
"appropriately."
msgstr ""

#: ../../../networking/strparser.rst:173
msgid ""
"rcv_msg is called when a full message has been received and is queued. The "
"callee must consume the sk_buff; it can call strp_pause to prevent any "
"further messages from being received in rcv_msg (see strp_pause above). This "
"callback must be set."
msgstr ""

#: ../../../networking/strparser.rst:179
msgid ""
"The skb->cb in the input skb is a struct strp_msg. This struct contains two "
"fields: offset and full_len. Offset is where the message starts in the skb, "
"and full_len is the the length of the message. skb->len - offset may be "
"greater than full_len since strparser does not trim the skb."
msgstr ""

#: ../../../networking/strparser.rst:190
msgid ""
"The read_sock callback is used by strparser instead of sock->ops->read_sock, "
"if provided. ::"
msgstr ""

#: ../../../networking/strparser.rst:213
msgid "Statistics"
msgstr ""

#: ../../../networking/strparser.rst:215
msgid ""
"Various counters are kept for each stream parser instance. These are in the "
"strp_stats structure. strp_aggr_stats is a convenience structure for "
"accumulating statistics for multiple stream parser instances. "
"save_strp_stats and aggregate_strp_stats are helper functions to save and "
"aggregate statistics."
msgstr ""

#: ../../../networking/strparser.rst:222
msgid "Message assembly limits"
msgstr ""

#: ../../../networking/strparser.rst:224
msgid ""
"The stream parser provide mechanisms to limit the resources consumed by "
"message assembly."
msgstr ""

#: ../../../networking/strparser.rst:227
msgid ""
"A timer is set when assembly starts for a new message. In receive callback "
"mode the message timeout is taken from rcvtime for the associated TCP "
"socket. In general mode, the timeout is passed as an argument in "
"strp_process. If the timer fires before assembly completes the stream parser "
"is aborted and the ETIMEDOUT error is set on the TCP socket if in receive "
"callback mode."
msgstr ""

#: ../../../networking/strparser.rst:234
msgid ""
"In receive callback mode, message length is limited to the receive buffer "
"size of the associated TCP socket. If the length returned by parse_msg is "
"greater than the socket buffer size then the stream parser is aborted with "
"EMSGSIZE error set on the TCP socket. Note that this makes the maximum size "
"of receive skbuffs for a socket with a stream parser to be 2*sk_rcvbuf of "
"the TCP socket."
msgstr ""

#: ../../../networking/strparser.rst:241
msgid ""
"In general mode the message length limit is passed in as an argument to "
"strp_process."
msgstr ""

#: ../../../networking/strparser.rst:245
msgid "Author"
msgstr ""

#: ../../../networking/strparser.rst:247
msgid "Tom Herbert (tom@quantonium.net)"
msgstr ""
