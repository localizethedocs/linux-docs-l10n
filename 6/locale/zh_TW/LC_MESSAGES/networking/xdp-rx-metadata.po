# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../networking/xdp-rx-metadata.rst:5
msgid "XDP RX Metadata"
msgstr ""

#: ../../../networking/xdp-rx-metadata.rst:7
msgid ""
"This document describes how an eXpress Data Path (XDP) program can access "
"hardware metadata related to a packet using a set of helper functions, and "
"how it can pass that metadata on to other consumers."
msgstr ""

#: ../../../networking/xdp-rx-metadata.rst:12
msgid "General Design"
msgstr ""

#: ../../../networking/xdp-rx-metadata.rst:14
msgid ""
"XDP has access to a set of kfuncs to manipulate the metadata in an XDP "
"frame. Every device driver that wishes to expose additional packet metadata "
"can implement these kfuncs. The set of kfuncs is declared in ``include/net/"
"xdp.h`` via ``XDP_METADATA_KFUNC_xxx``."
msgstr ""

#: ../../../networking/xdp-rx-metadata.rst:19
msgid ""
"Currently, the following kfuncs are supported. In the future, as more "
"metadata is supported, this set will grow:"
msgstr ""

#: ../../../networking/xdp-rx-metadata:22: net/core/xdp.c:895
msgid "Read XDP frame RX timestamp."
msgstr ""

#: ../../../networking/xdp-rx-metadata:22: net/core/xdp.c:899
#: ../../../networking/xdp-rx-metadata:25: net/core/xdp.c:914
#: ../../../networking/xdp-rx-metadata:28: net/core/xdp.c:937
msgid "**Parameters**"
msgstr ""

#: ../../../networking/xdp-rx-metadata:22: net/core/xdp.c:901
#: ../../../networking/xdp-rx-metadata:25: net/core/xdp.c:916
#: ../../../networking/xdp-rx-metadata:28: net/core/xdp.c:939
msgid "``const struct xdp_md *ctx``"
msgstr ""

#: ../../../networking/xdp-rx-metadata:22: net/core/xdp.c:896
#: ../../../networking/xdp-rx-metadata:25: net/core/xdp.c:911
#: ../../../networking/xdp-rx-metadata:28: net/core/xdp.c:934
msgid "XDP context pointer."
msgstr ""

#: ../../../networking/xdp-rx-metadata:22: net/core/xdp.c:898
msgid "``u64 *timestamp``"
msgstr ""

#: ../../../networking/xdp-rx-metadata:22: net/core/xdp.c:897
#: ../../../networking/xdp-rx-metadata:25: net/core/xdp.c:912
msgid "Return value pointer."
msgstr ""

#: ../../../networking/xdp-rx-metadata:22: net/core/xdp.c:899
#: ../../../networking/xdp-rx-metadata:25: net/core/xdp.c:920
#: ../../../networking/xdp-rx-metadata:28: net/core/xdp.c:953
msgid "**Return**"
msgstr ""

#: ../../../networking/xdp-rx-metadata:22: net/core/xdp.c:899
#: ../../../networking/xdp-rx-metadata:25: net/core/xdp.c:921
#: ../../../networking/xdp-rx-metadata:28: net/core/xdp.c:954
msgid "Returns 0 on success or ``-errno`` on error."
msgstr ""

#: ../../../networking/xdp-rx-metadata:22: net/core/xdp.c:900
msgid "``-EOPNOTSUPP`` : means device driver does not implement kfunc"
msgstr ""

#: ../../../networking/xdp-rx-metadata:22: net/core/xdp.c:901
msgid "``-ENODATA``    : means no RX-timestamp available for this frame"
msgstr ""

#: ../../../networking/xdp-rx-metadata:25: net/core/xdp.c:910
msgid "Read XDP frame RX hash."
msgstr ""

#: ../../../networking/xdp-rx-metadata:25: net/core/xdp.c:913
msgid "``u32 *hash``"
msgstr ""

#: ../../../networking/xdp-rx-metadata:25: net/core/xdp.c:914
msgid "``enum xdp_rss_hash_type *rss_type``"
msgstr ""

#: ../../../networking/xdp-rx-metadata:25: net/core/xdp.c:913
msgid "Return value pointer for RSS type."
msgstr ""

#: ../../../networking/xdp-rx-metadata:25: net/core/xdp.c:915
#: ../../../networking/xdp-rx-metadata:28: net/core/xdp.c:938
msgid "**Description**"
msgstr ""

#: ../../../networking/xdp-rx-metadata:25: net/core/xdp.c:914
msgid ""
"The RSS hash type (**rss_type**) specifies what portion of packet headers "
"NIC hardware used when calculating RSS hash value.  The RSS type can be "
"decoded via :c:type:`enum xdp_rss_hash_type <xdp_rss_hash_type>` either "
"matching on individual L3/L4 bits ``XDP_RSS_L*`` or by combined traditional "
"*RSS Hashing Types* ``XDP_RSS_TYPE_L*``."
msgstr ""

#: ../../../networking/xdp-rx-metadata:25: net/core/xdp.c:922
msgid "``-EOPNOTSUPP`` : means device driver doesn't implement kfunc"
msgstr ""

#: ../../../networking/xdp-rx-metadata:25: net/core/xdp.c:923
msgid "``-ENODATA``    : means no RX-hash available for this frame"
msgstr ""

#: ../../../networking/xdp-rx-metadata:28: net/core/xdp.c:933
msgid "Get XDP packet outermost VLAN tag"
msgstr ""

#: ../../../networking/xdp-rx-metadata:28: net/core/xdp.c:936
msgid "``__be16 *vlan_proto``"
msgstr ""

#: ../../../networking/xdp-rx-metadata:28: net/core/xdp.c:935
msgid "Destination pointer for VLAN Tag protocol identifier (TPID)."
msgstr ""

#: ../../../networking/xdp-rx-metadata:28: net/core/xdp.c:937
msgid "``u16 *vlan_tci``"
msgstr ""

#: ../../../networking/xdp-rx-metadata:28: net/core/xdp.c:936
msgid "Destination pointer for VLAN TCI (VID + DEI + PCP)"
msgstr ""

#: ../../../networking/xdp-rx-metadata:28: net/core/xdp.c:937
msgid ""
"In case of success, ``vlan_proto`` contains *Tag protocol identifier "
"(TPID)*, usually ``ETH_P_8021Q`` or ``ETH_P_8021AD``, but some networks can "
"use custom TPIDs. ``vlan_proto`` is stored in **network byte order (BE)** "
"and should be used as follows: ``if (vlan_proto == bpf_htons(ETH_P_8021Q)) "
"do_something();``"
msgstr ""

#: ../../../networking/xdp-rx-metadata:28: net/core/xdp.c:943
msgid ""
"``vlan_tci`` contains the remaining 16 bits of a VLAN tag. Driver is "
"expected to provide those in **host byte order (usually LE)**, so the bpf "
"program should not perform byte conversion. According to 802.1Q standard, "
"*VLAN TCI (Tag control information)* is a bit field that contains: *VLAN "
"identifier (VID)* that can be read with ``vlan_tci & 0xfff``, *Drop eligible "
"indicator (DEI)* - 1 bit, *Priority code point (PCP)* - 3 bits. For detailed "
"meaning of DEI and PCP, please refer to other sources."
msgstr ""

#: ../../../networking/xdp-rx-metadata:28: net/core/xdp.c:955
msgid "``-EOPNOTSUPP`` : device driver doesn't implement kfunc"
msgstr ""

#: ../../../networking/xdp-rx-metadata:28: net/core/xdp.c:956
msgid "``-ENODATA``    : VLAN tag was not stripped or is not available"
msgstr ""

#: ../../../networking/xdp-rx-metadata.rst:31
msgid ""
"An XDP program can use these kfuncs to read the metadata into stack "
"variables for its own consumption. Or, to pass the metadata on to other "
"consumers, an XDP program can store it into the metadata area carried ahead "
"of the packet. Not all packets will necessary have the requested metadata "
"available in which case the driver returns ``-ENODATA``."
msgstr ""

#: ../../../networking/xdp-rx-metadata.rst:37
msgid ""
"Not all kfuncs have to be implemented by the device driver; when not "
"implemented, the default ones that return ``-EOPNOTSUPP`` will be used to "
"indicate the device driver have not implemented this kfunc."
msgstr ""

#: ../../../networking/xdp-rx-metadata.rst:42
msgid ""
"Within an XDP frame, the metadata layout (accessed via ``xdp_buff``) is as "
"follows::"
msgstr ""

#: ../../../networking/xdp-rx-metadata.rst:52
msgid ""
"An XDP program can store individual metadata items into this ``data_meta`` "
"area in whichever format it chooses. Later consumers of the metadata will "
"have to agree on the format by some out of band contract (like for the "
"AF_XDP use case, see below)."
msgstr ""

#: ../../../networking/xdp-rx-metadata.rst:58
msgid "AF_XDP"
msgstr ""

#: ../../../networking/xdp-rx-metadata.rst:60
msgid ""
":doc:`af_xdp` use-case implies that there is a contract between the BPF "
"program that redirects XDP frames into the ``AF_XDP`` socket (``XSK``) and "
"the final consumer. Thus the BPF program manually allocates a fixed number "
"of bytes out of metadata via ``bpf_xdp_adjust_meta`` and calls a subset of "
"kfuncs to populate it. The userspace ``XSK`` consumer computes "
"``xsk_umem__get_data() - METADATA_SIZE`` to locate that metadata. Note, "
"``xsk_umem__get_data`` is defined in ``libxdp`` and ``METADATA_SIZE`` is an "
"application-specific constant (``AF_XDP`` receive descriptor does _not_ "
"explicitly carry the size of the metadata)."
msgstr ""

#: ../../../networking/xdp-rx-metadata.rst:70
msgid ""
"Here is the ``AF_XDP`` consumer layout (note missing ``data_meta`` pointer)::"
msgstr ""

#: ../../../networking/xdp-rx-metadata.rst:80
msgid "XDP_PASS"
msgstr ""

#: ../../../networking/xdp-rx-metadata.rst:82
msgid ""
"This is the path where the packets processed by the XDP program are passed "
"into the kernel. The kernel creates the ``skb`` out of the ``xdp_buff`` "
"contents. Currently, every driver has custom kernel code to parse the "
"descriptors and populate ``skb`` metadata when doing this ``xdp_buff->skb`` "
"conversion, and the XDP metadata is not used by the kernel when building "
"``skbs``. However, TC-BPF programs can access the XDP metadata area using "
"the ``data_meta`` pointer."
msgstr ""

#: ../../../networking/xdp-rx-metadata.rst:90
msgid ""
"In the future, we'd like to support a case where an XDP program can override "
"some of the metadata used for building ``skbs``."
msgstr ""

#: ../../../networking/xdp-rx-metadata.rst:94
msgid "bpf_redirect_map"
msgstr ""

#: ../../../networking/xdp-rx-metadata.rst:96
msgid ""
"``bpf_redirect_map`` can redirect the frame to a different device. Some "
"devices (like virtual ethernet links) support running a second XDP program "
"after the redirect. However, the final consumer doesn't have access to the "
"original hardware descriptor and can't access any of the original metadata. "
"The same applies to XDP programs installed into devmaps and cpumaps."
msgstr ""

#: ../../../networking/xdp-rx-metadata.rst:103
msgid ""
"This means that for redirected packets only custom metadata is currently "
"supported, which has to be prepared by the initial XDP program before "
"redirect. If the frame is eventually passed to the kernel, the ``skb`` "
"created from such a frame won't have any hardware metadata populated in its "
"``skb``. If such a packet is later redirected into an ``XSK``, that will "
"also only have access to the custom metadata."
msgstr ""

#: ../../../networking/xdp-rx-metadata.rst:111
msgid "bpf_tail_call"
msgstr ""

#: ../../../networking/xdp-rx-metadata.rst:113
msgid ""
"Adding programs that access metadata kfuncs to the "
"``BPF_MAP_TYPE_PROG_ARRAY`` is currently not supported."
msgstr ""

#: ../../../networking/xdp-rx-metadata.rst:117
msgid "Supported Devices"
msgstr ""

#: ../../../networking/xdp-rx-metadata.rst:119
msgid ""
"It is possible to query which kfunc the particular netdev implements via "
"netlink. See ``xdp-rx-metadata-features`` attribute set in ``Documentation/"
"netlink/specs/netdev.yaml``."
msgstr ""

#: ../../../networking/xdp-rx-metadata.rst:124
msgid "Driver Implementation"
msgstr ""

#: ../../../networking/xdp-rx-metadata.rst:126
msgid ""
"Certain devices may prepend metadata to received packets. However, as of "
"now, ``AF_XDP`` lacks the ability to communicate the size of the "
"``data_meta`` area to the consumer. Therefore, it is the responsibility of "
"the driver to copy any device-reserved metadata out from the metadata area "
"and ensure that ``xdp_buff->data_meta`` is pointing to ``xdp_buff->data`` "
"before presenting the frame to the XDP program. This is necessary so that, "
"after the XDP program adjusts the metadata area, the consumer can reliably "
"retrieve the metadata address using ``METADATA_SIZE`` offset."
msgstr ""

#: ../../../networking/xdp-rx-metadata.rst:135
msgid ""
"The following diagram shows how custom metadata is positioned relative to "
"the packet data and how pointers are adjusted for metadata access::"
msgstr ""

#: ../../../networking/xdp-rx-metadata.rst:150
msgid ""
"``bpf_xdp_adjust_meta`` ensures that ``METADATA_SIZE`` is aligned to 4 "
"bytes, does not exceed 252 bytes, and leaves sufficient space for building "
"the xdp_frame. If these conditions are not met, it returns a negative error. "
"In this case, the BPF program should not proceed to populate data into the "
"``data_meta`` area."
msgstr ""

#: ../../../networking/xdp-rx-metadata.rst:157
msgid "Example"
msgstr ""

#: ../../../networking/xdp-rx-metadata.rst:159
msgid ""
"See ``tools/testing/selftests/bpf/progs/xdp_metadata.c`` and ``tools/testing/"
"selftests/bpf/prog_tests/xdp_metadata.c`` for an example of BPF program that "
"handles XDP metadata."
msgstr ""
