# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../networking/regulatory.rst:5
msgid "Linux wireless regulatory documentation"
msgstr ""

#: ../../../networking/regulatory.rst:7
msgid ""
"This document gives a brief review over how the Linux wireless regulatory "
"infrastructure works."
msgstr ""

#: ../../../networking/regulatory.rst:10
msgid "More up to date information can be obtained at the project's web page:"
msgstr ""

#: ../../../networking/regulatory.rst:12
msgid "https://wireless.wiki.kernel.org/en/developers/Regulatory"
msgstr ""

#: ../../../networking/regulatory.rst:15
msgid "Keeping regulatory domains in userspace"
msgstr ""

#: ../../../networking/regulatory.rst:17
msgid ""
"Due to the dynamic nature of regulatory domains we keep them in userspace "
"and provide a framework for userspace to upload to the kernel one regulatory "
"domain to be used as the central core regulatory domain all wireless devices "
"should adhere to."
msgstr ""

#: ../../../networking/regulatory.rst:23
msgid "How to get regulatory domains to the kernel"
msgstr ""

#: ../../../networking/regulatory.rst:25
msgid ""
"When the regulatory domain is first set up, the kernel will request a "
"database file (regulatory.db) containing all the regulatory rules. It will "
"then use that database when it needs to look up the rules for a given "
"country."
msgstr ""

#: ../../../networking/regulatory.rst:31
msgid "How to get regulatory domains to the kernel (old CRDA solution)"
msgstr ""

#: ../../../networking/regulatory.rst:33
msgid ""
"Userspace gets a regulatory domain in the kernel by having a userspace agent "
"build it and send it via nl80211. Only expected regulatory domains will be "
"respected by the kernel."
msgstr ""

#: ../../../networking/regulatory.rst:37
msgid ""
"A currently available userspace agent which can accomplish this is CRDA - "
"central regulatory domain agent. Its documented here:"
msgstr ""

#: ../../../networking/regulatory.rst:40
msgid "https://wireless.wiki.kernel.org/en/developers/Regulatory/CRDA"
msgstr ""

#: ../../../networking/regulatory.rst:42
msgid ""
"Essentially the kernel will send a udev event when it knows it needs a new "
"regulatory domain. A udev rule can be put in place to trigger crda to send "
"the respective regulatory domain for a specific ISO/IEC 3166 alpha2."
msgstr ""

#: ../../../networking/regulatory.rst:47
msgid "Below is an example udev rule which can be used:"
msgstr ""

#: ../../../networking/regulatory.rst:49
msgid ""
"# Example file, should be put in /etc/udev/rules.d/regulatory.rules "
"KERNEL==\"regulatory*\", ACTION==\"change\", SUBSYSTEM==\"platform\", "
"RUN+=\"/sbin/crda\""
msgstr ""

#: ../../../networking/regulatory.rst:52
msgid ""
"The alpha2 is passed as an environment variable under the variable COUNTRY."
msgstr ""

#: ../../../networking/regulatory.rst:55
msgid "Who asks for regulatory domains?"
msgstr ""

#: ../../../networking/regulatory.rst:57
msgid "Users"
msgstr ""

#: ../../../networking/regulatory.rst:59
msgid "Users can use iw:"
msgstr ""

#: ../../../networking/regulatory.rst:61
msgid "https://wireless.wiki.kernel.org/en/users/Documentation/iw"
msgstr ""

#: ../../../networking/regulatory.rst:63
msgid "An example::"
msgstr ""

#: ../../../networking/regulatory.rst:68
msgid ""
"This will request the kernel to set the regulatory domain to the specified "
"alpha2. The kernel in turn will then ask userspace to provide a regulatory "
"domain for the alpha2 specified by the user by sending a uevent."
msgstr ""

#: ../../../networking/regulatory.rst:73
msgid "Wireless subsystems for Country Information elements"
msgstr ""

#: ../../../networking/regulatory.rst:75
msgid ""
"The kernel will send a uevent to inform userspace a new regulatory domain is "
"required. More on this to be added as its integration is added."
msgstr ""

#: ../../../networking/regulatory.rst:79
msgid "Drivers"
msgstr ""

#: ../../../networking/regulatory.rst:81
msgid ""
"If drivers determine they need a specific regulatory domain set they can "
"inform the wireless core using regulatory_hint(). They have two options -- "
"they either provide an alpha2 so that crda can provide back a regulatory "
"domain for that country or they can build their own regulatory domain based "
"on internal custom knowledge so the wireless core can respect it."
msgstr ""

#: ../../../networking/regulatory.rst:88
msgid ""
"*Most* drivers will rely on the first mechanism of providing a regulatory "
"hint with an alpha2. For these drivers there is an additional check that can "
"be used to ensure compliance based on custom EEPROM regulatory data. This "
"additional check can be used by drivers by registering on its struct wiphy a "
"reg_notifier() callback. This notifier is called when the core's regulatory "
"domain has been changed. The driver can use this to review the changes made "
"and also review who made them (driver, user, country IE) and determine what "
"to allow based on its internal EEPROM data. Devices drivers wishing to be "
"capable of world roaming should use this callback. More on world roaming "
"will be added to this document when its support is enabled."
msgstr ""

#: ../../../networking/regulatory.rst:100
msgid ""
"Device drivers who provide their own built regulatory domain do not need a "
"callback as the channels registered by them are the only ones that will be "
"allowed and therefore *additional* channels cannot be enabled."
msgstr ""

#: ../../../networking/regulatory.rst:106
msgid "Example code - drivers hinting an alpha2:"
msgstr ""

#: ../../../networking/regulatory.rst:108
msgid ""
"This example comes from the zd1211rw device driver. You can start by having "
"a mapping of your device's EEPROM country/regulatory domain value to a "
"specific alpha2 as follows::"
msgstr ""

#: ../../../networking/regulatory.rst:121
msgid ""
"Then you can define a routine to map your read EEPROM value to an alpha2, as "
"follows::"
msgstr ""

#: ../../../networking/regulatory.rst:139
msgid ""
"Lastly, you can then hint to the core of your discovered alpha2, if a match "
"was found. You need to do this after you have registered your wiphy. You are "
"expected to do this during initialization."
msgstr ""

#: ../../../networking/regulatory.rst:150
msgid "Example code - drivers providing a built in regulatory domain:"
msgstr ""

#: ../../../networking/regulatory.rst:152
msgid ""
"[NOTE: This API is not currently available, it can be added when required]"
msgstr ""

#: ../../../networking/regulatory.rst:154
msgid ""
"If you have regulatory information you can obtain from your driver and you "
"*need* to use this we let you build a regulatory domain structure and pass "
"it to the wireless core. To do this you should kmalloc() a structure big "
"enough to hold your regulatory domain structure and you should then fill it "
"with your data. Finally you simply call regulatory_hint() with the "
"regulatory domain structure in it."
msgstr ""

#: ../../../networking/regulatory.rst:161
msgid ""
"Below is a simple example, with a regulatory domain cached using the stack. "
"Your implementation may vary (read EEPROM cache instead, for example)."
msgstr ""

#: ../../../networking/regulatory.rst:164
msgid "Example cache of some regulatory domain::"
msgstr ""

#: ../../../networking/regulatory.rst:183
msgid "Then in some part of your code after your wiphy has been registered::"
msgstr ""

#: ../../../networking/regulatory.rst:206
msgid "Statically compiled regulatory database"
msgstr ""

#: ../../../networking/regulatory.rst:208
msgid ""
"When a database should be fixed into the kernel, it can be provided as a "
"firmware file at build time that is then linked into the kernel."
msgstr ""
