# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../rust/quick-start.rst:4
msgid "Quick Start"
msgstr ""

#: ../../../rust/quick-start.rst:6
msgid ""
"This document describes how to get started with kernel development in Rust."
msgstr ""

#: ../../../rust/quick-start.rst:8
msgid ""
"There are a few ways to install a Rust toolchain needed for kernel "
"development. A simple way is to use the packages from your Linux "
"distribution if they are suitable -- the first section below explains this "
"approach. An advantage of this approach is that, typically, the distribution "
"will match the LLVM used by Rust and Clang."
msgstr ""

#: ../../../rust/quick-start.rst:14
msgid ""
"Another way is using the prebuilt stable versions of LLVM+Rust provided on "
"`kernel.org <https://kernel.org/pub/tools/llvm/rust/>`_. These are the same "
"slim and fast LLVM toolchains from :ref:`Getting LLVM <getting_llvm>` with "
"versions of Rust added to them that Rust for Linux supports. Two sets are "
"provided: the \"latest LLVM\" and \"matching LLVM\" (please see the link for "
"more information)."
msgstr ""

#: ../../../rust/quick-start.rst:20
msgid ""
"Alternatively, the next two \"Requirements\" sections explain each component "
"and how to install them through ``rustup``, the standalone installers from "
"Rust and/or building them."
msgstr ""

#: ../../../rust/quick-start.rst:24
msgid "The rest of the document explains other aspects on how to get started."
msgstr ""

#: ../../../rust/quick-start.rst:28
msgid "Distributions"
msgstr ""

#: ../../../rust/quick-start.rst:31
msgid "Arch Linux"
msgstr ""

#: ../../../rust/quick-start.rst:33
msgid ""
"Arch Linux provides recent Rust releases and thus it should generally work "
"out of the box, e.g.::"
msgstr ""

#: ../../../rust/quick-start.rst:40
msgid "Debian"
msgstr ""

#: ../../../rust/quick-start.rst:42
msgid ""
"Debian Testing and Debian Unstable (Sid), outside of the freeze period, "
"provide recent Rust releases and thus they should generally work out of the "
"box, e.g.::"
msgstr ""

#: ../../../rust/quick-start.rst:49
msgid "Fedora Linux"
msgstr ""

#: ../../../rust/quick-start.rst:51
msgid ""
"Fedora Linux provides recent Rust releases and thus it should generally work "
"out of the box, e.g.::"
msgstr ""

#: ../../../rust/quick-start.rst:58
msgid "Gentoo Linux"
msgstr ""

#: ../../../rust/quick-start.rst:60
msgid ""
"Gentoo Linux (and especially the testing branch) provides recent Rust "
"releases and thus it should generally work out of the box, e.g.::"
msgstr ""

#: ../../../rust/quick-start.rst:65
msgid "``LIBCLANG_PATH`` may need to be set."
msgstr ""

#: ../../../rust/quick-start.rst:69
msgid "Nix"
msgstr ""

#: ../../../rust/quick-start.rst:71
msgid ""
"Nix (unstable channel) provides recent Rust releases and thus it should "
"generally work out of the box, e.g.::"
msgstr ""

#: ../../../rust/quick-start.rst:82
msgid "openSUSE"
msgstr ""

#: ../../../rust/quick-start.rst:84
msgid ""
"openSUSE Slowroll and openSUSE Tumbleweed provide recent Rust releases and "
"thus they should generally work out of the box, e.g.::"
msgstr ""

#: ../../../rust/quick-start.rst:91
msgid "Ubuntu"
msgstr ""

#: ../../../rust/quick-start.rst:94
msgid "25.04"
msgstr ""

#: ../../../rust/quick-start.rst:96
msgid ""
"The latest Ubuntu releases provide recent Rust releases and thus they should "
"generally work out of the box, e.g.::"
msgstr ""

#: ../../../rust/quick-start.rst:101
msgid "In addition, ``RUST_LIB_SRC`` needs to be set, e.g.::"
msgstr ""

#: ../../../rust/quick-start.rst:105 ../../../rust/quick-start.rst:138
msgid ""
"For convenience, ``RUST_LIB_SRC`` can be exported to the global environment."
msgstr ""

#: ../../../rust/quick-start.rst:109
msgid "24.04 LTS and older"
msgstr ""

#: ../../../rust/quick-start.rst:111
msgid ""
"Though Ubuntu 24.04 LTS and older versions still provide recent Rust "
"releases, they require some additional configuration to be set, using the "
"versioned packages, e.g.::"
msgstr ""

#: ../../../rust/quick-start.rst:120
msgid ""
"None of these packages set their tools as defaults; therefore they should be "
"specified explicitly, e.g.::"
msgstr ""

#: ../../../rust/quick-start.rst:126
msgid ""
"Alternatively, modify the ``PATH`` variable to place the Rust 1.80 binaries "
"first and set ``bindgen`` as the default, e.g.::"
msgstr ""

#: ../../../rust/quick-start.rst:134
msgid ""
"``RUST_LIB_SRC`` needs to be set when using the versioned packages, e.g.::"
msgstr ""

#: ../../../rust/quick-start.rst:140
msgid ""
"In addition, ``bindgen-0.65`` is available in newer releases (24.04 LTS and "
"24.10), but it may not be available in older ones (20.04 LTS and 22.04 LTS), "
"thus ``bindgen`` may need to be built manually (please see below)."
msgstr ""

#: ../../../rust/quick-start.rst:146
msgid "Requirements: Building"
msgstr ""

#: ../../../rust/quick-start.rst:148
msgid "This section explains how to fetch the tools needed for building."
msgstr ""

#: ../../../rust/quick-start.rst:150
msgid ""
"To easily check whether the requirements are met, the following target can "
"be used::"
msgstr ""

#: ../../../rust/quick-start.rst:155
msgid ""
"This triggers the same logic used by Kconfig to determine whether "
"``RUST_IS_AVAILABLE`` should be enabled; but it also explains why not if "
"that is the case."
msgstr ""

#: ../../../rust/quick-start.rst:161
msgid "rustc"
msgstr ""

#: ../../../rust/quick-start.rst:163
msgid "A recent version of the Rust compiler is required."
msgstr ""

#: ../../../rust/quick-start.rst:165
msgid ""
"If ``rustup`` is being used, enter the kernel build directory (or use ``--"
"path=<build-dir>`` argument to the ``set`` sub-command) and run, for "
"instance::"
msgstr ""

#: ../../../rust/quick-start.rst:171
msgid ""
"This will configure your working directory to use the given version of "
"``rustc`` without affecting your default toolchain."
msgstr ""

#: ../../../rust/quick-start.rst:174
msgid ""
"Note that the override applies to the current working directory (and its sub-"
"directories)."
msgstr ""

#: ../../../rust/quick-start.rst:177
msgid "If you are not using ``rustup``, fetch a standalone installer from:"
msgstr ""

#: ../../../rust/quick-start.rst:179
msgid ""
"https://forge.rust-lang.org/infra/other-installation-methods.html#standalone"
msgstr ""

#: ../../../rust/quick-start.rst:183
msgid "Rust standard library source"
msgstr ""

#: ../../../rust/quick-start.rst:185
msgid ""
"The Rust standard library source is required because the build system will "
"cross-compile ``core``."
msgstr ""

#: ../../../rust/quick-start.rst:188
msgid "If ``rustup`` is being used, run::"
msgstr ""

#: ../../../rust/quick-start.rst:192
msgid ""
"The components are installed per toolchain, thus upgrading the Rust compiler "
"version later on requires re-adding the component."
msgstr ""

#: ../../../rust/quick-start.rst:195
msgid ""
"Otherwise, if a standalone installer is used, the Rust source tree may be "
"downloaded into the toolchain's installation folder::"
msgstr ""

#: ../../../rust/quick-start.rst:203
msgid ""
"In this case, upgrading the Rust compiler version later on requires manually "
"updating the source tree (this can be done by removing ``$(rustc --print "
"sysroot)/lib/rustlib/src/rust`` then rerunning the above command)."
msgstr ""

#: ../../../rust/quick-start.rst:209
msgid "libclang"
msgstr ""

#: ../../../rust/quick-start.rst:211
msgid ""
"``libclang`` (part of LLVM) is used by ``bindgen`` to understand the C code "
"in the kernel, which means LLVM needs to be installed; like when the kernel "
"is compiled with ``LLVM=1``."
msgstr ""

#: ../../../rust/quick-start.rst:215
msgid ""
"Linux distributions are likely to have a suitable one available, so it is "
"best to check that first."
msgstr ""

#: ../../../rust/quick-start.rst:218
msgid ""
"There are also some binaries for several systems and architectures uploaded "
"at:"
msgstr ""

#: ../../../rust/quick-start.rst:220
msgid "https://releases.llvm.org/download.html"
msgstr ""

#: ../../../rust/quick-start.rst:222
msgid ""
"Otherwise, building LLVM takes quite a while, but it is not a complex "
"process:"
msgstr ""

#: ../../../rust/quick-start.rst:224
msgid ""
"https://llvm.org/docs/GettingStarted.html#getting-the-source-code-and-"
"building-llvm"
msgstr ""

#: ../../../rust/quick-start.rst:226
msgid ""
"Please see Documentation/kbuild/llvm.rst for more information and further "
"ways to fetch pre-built releases and distribution packages."
msgstr ""

#: ../../../rust/quick-start.rst:231
msgid "bindgen"
msgstr ""

#: ../../../rust/quick-start.rst:233
msgid ""
"The bindings to the C side of the kernel are generated at build time using "
"the ``bindgen`` tool."
msgstr ""

#: ../../../rust/quick-start.rst:236
msgid ""
"Install it, for instance, via (note that this will download and build the "
"tool from source)::"
msgstr ""

#: ../../../rust/quick-start.rst:241
msgid ""
"``bindgen`` uses the ``clang-sys`` crate to find a suitable ``libclang`` "
"(which may be linked statically, dynamically or loaded at runtime). By "
"default, the ``cargo`` command above will produce a ``bindgen`` binary that "
"will load ``libclang`` at runtime. If it is not found (or a different "
"``libclang`` than the one found should be used), the process can be tweaked, "
"e.g. by using the ``LIBCLANG_PATH`` environment variable. For details, "
"please see ``clang-sys``'s documentation at:"
msgstr ""

#: ../../../rust/quick-start.rst:249
msgid "https://github.com/KyleMayes/clang-sys#linking"
msgstr ""

#: ../../../rust/quick-start.rst:251
msgid "https://github.com/KyleMayes/clang-sys#environment-variables"
msgstr ""

#: ../../../rust/quick-start.rst:255
msgid "Requirements: Developing"
msgstr ""

#: ../../../rust/quick-start.rst:257
msgid ""
"This section explains how to fetch the tools needed for developing. That is, "
"they are not needed when just building the kernel."
msgstr ""

#: ../../../rust/quick-start.rst:262
msgid "rustfmt"
msgstr ""

#: ../../../rust/quick-start.rst:264
msgid ""
"The ``rustfmt`` tool is used to automatically format all the Rust kernel "
"code, including the generated C bindings (for details, please see coding-"
"guidelines.rst)."
msgstr ""

#: ../../../rust/quick-start.rst:268 ../../../rust/quick-start.rst:284
msgid ""
"If ``rustup`` is being used, its ``default`` profile already installs the "
"tool, thus nothing needs to be done. If another profile is being used, the "
"component can be installed manually::"
msgstr ""

#: ../../../rust/quick-start.rst:274
msgid "The standalone installers also come with ``rustfmt``."
msgstr ""

#: ../../../rust/quick-start.rst:278
msgid "clippy"
msgstr ""

#: ../../../rust/quick-start.rst:280
msgid ""
"``clippy`` is a Rust linter. Running it provides extra warnings for Rust "
"code. It can be run by passing ``CLIPPY=1`` to ``make`` (for details, please "
"see general-information.rst)."
msgstr ""

#: ../../../rust/quick-start.rst:290
msgid "The standalone installers also come with ``clippy``."
msgstr ""

#: ../../../rust/quick-start.rst:294
msgid "rustdoc"
msgstr ""

#: ../../../rust/quick-start.rst:296
msgid ""
"``rustdoc`` is the documentation tool for Rust. It generates pretty HTML "
"documentation for Rust code (for details, please see general-information."
"rst)."
msgstr ""

#: ../../../rust/quick-start.rst:300
msgid ""
"``rustdoc`` is also used to test the examples provided in documented Rust "
"code (called doctests or documentation tests). The ``rusttest`` Make target "
"uses this feature."
msgstr ""

#: ../../../rust/quick-start.rst:304
msgid ""
"If ``rustup`` is being used, all the profiles already install the tool, thus "
"nothing needs to be done."
msgstr ""

#: ../../../rust/quick-start.rst:307
msgid "The standalone installers also come with ``rustdoc``."
msgstr ""

#: ../../../rust/quick-start.rst:311
msgid "rust-analyzer"
msgstr ""

#: ../../../rust/quick-start.rst:313
msgid ""
"The `rust-analyzer <https://rust-analyzer.github.io/>`_ language server can "
"be used with many editors to enable syntax highlighting, completion, go to "
"definition, and other features."
msgstr ""

#: ../../../rust/quick-start.rst:317
msgid ""
"``rust-analyzer`` needs a configuration file, ``rust-project.json``, which "
"can be generated by the ``rust-analyzer`` Make target::"
msgstr ""

#: ../../../rust/quick-start.rst:324
msgid "Configuration"
msgstr ""

#: ../../../rust/quick-start.rst:326
msgid ""
"``Rust support`` (``CONFIG_RUST``) needs to be enabled in the ``General "
"setup`` menu. The option is only shown if a suitable Rust toolchain is found "
"(see above), as long as the other requirements are met. In turn, this will "
"make visible the rest of options that depend on Rust."
msgstr ""

#: ../../../rust/quick-start.rst:331
msgid "Afterwards, go to::"
msgstr ""

#: ../../../rust/quick-start.rst:337
msgid "And enable some sample modules either as built-in or as loadable."
msgstr ""

#: ../../../rust/quick-start.rst:341
msgid "Building"
msgstr ""

#: ../../../rust/quick-start.rst:343
msgid ""
"Building a kernel with a complete LLVM toolchain is the best supported setup "
"at the moment. That is::"
msgstr ""

#: ../../../rust/quick-start.rst:348
msgid ""
"Using GCC also works for some configurations, but it is very experimental at "
"the moment."
msgstr ""

#: ../../../rust/quick-start.rst:353
msgid "Hacking"
msgstr ""

#: ../../../rust/quick-start.rst:355
msgid ""
"To dive deeper, take a look at the source code of the samples at ``samples/"
"rust/``, the Rust support code under ``rust/`` and the ``Rust hacking`` menu "
"under ``Kernel hacking``."
msgstr ""

#: ../../../rust/quick-start.rst:359
msgid ""
"If GDB/Binutils is used and Rust symbols are not getting demangled, the "
"reason is the toolchain does not support Rust's new v0 mangling scheme yet. "
"There are a few ways out:"
msgstr ""

#: ../../../rust/quick-start.rst:363
msgid "Install a newer release (GDB >= 10.2, Binutils >= 2.36)."
msgstr ""

#: ../../../rust/quick-start.rst:365
msgid ""
"Some versions of GDB (e.g. vanilla GDB 10.1) are able to use the pre-"
"demangled names embedded in the debug info (``CONFIG_DEBUG_INFO``)."
msgstr ""
