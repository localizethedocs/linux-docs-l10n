# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../kbuild/gcc-plugins.rst:3
msgid "GCC plugin infrastructure"
msgstr ""

#: ../../../kbuild/gcc-plugins.rst:7
msgid "Introduction"
msgstr ""

#: ../../../kbuild/gcc-plugins.rst:9
msgid ""
"GCC plugins are loadable modules that provide extra features to the compiler "
"[1]_. They are useful for runtime instrumentation and static analysis. We "
"can analyse, change and add further code during compilation via callbacks "
"[2]_, GIMPLE [3]_, IPA [4]_ and RTL passes [5]_."
msgstr ""

#: ../../../kbuild/gcc-plugins.rst:14
msgid ""
"The GCC plugin infrastructure of the kernel supports building out-of-tree "
"modules, cross-compilation and building in a separate directory. Plugin "
"source files have to be compilable by a C++ compiler."
msgstr ""

#: ../../../kbuild/gcc-plugins.rst:18
msgid ""
"Currently the GCC plugin infrastructure supports only some architectures. "
"Grep \"select HAVE_GCC_PLUGINS\" to find out which architectures support GCC "
"plugins."
msgstr ""

#: ../../../kbuild/gcc-plugins.rst:22
msgid "This infrastructure was ported from grsecurity [6]_ and PaX [7]_."
msgstr ""

#: ../../../kbuild/gcc-plugins.rst:24
msgid "--"
msgstr ""

#: ../../../kbuild/gcc-plugins.rst:26
msgid "https://gcc.gnu.org/onlinedocs/gccint/Plugins.html"
msgstr ""

#: ../../../kbuild/gcc-plugins.rst:27
msgid "https://gcc.gnu.org/onlinedocs/gccint/Plugin-API.html#Plugin-API"
msgstr ""

#: ../../../kbuild/gcc-plugins.rst:28
msgid "https://gcc.gnu.org/onlinedocs/gccint/GIMPLE.html"
msgstr ""

#: ../../../kbuild/gcc-plugins.rst:29
msgid "https://gcc.gnu.org/onlinedocs/gccint/IPA.html"
msgstr ""

#: ../../../kbuild/gcc-plugins.rst:30
msgid "https://gcc.gnu.org/onlinedocs/gccint/RTL.html"
msgstr ""

#: ../../../kbuild/gcc-plugins.rst:31
msgid "https://grsecurity.net/"
msgstr ""

#: ../../../kbuild/gcc-plugins.rst:32
msgid "https://pax.grsecurity.net/"
msgstr ""

#: ../../../kbuild/gcc-plugins.rst:36
msgid "Purpose"
msgstr ""

#: ../../../kbuild/gcc-plugins.rst:38
msgid ""
"GCC plugins are designed to provide a place to experiment with potential "
"compiler features that are neither in GCC nor Clang upstream. Once their "
"utility is proven, the goal is to upstream the feature into GCC (and Clang), "
"and then to finally remove them from the kernel once the feature is "
"available in all supported versions of GCC."
msgstr ""

#: ../../../kbuild/gcc-plugins.rst:44
msgid ""
"Specifically, new plugins should implement only features that have no "
"upstream compiler support (in either GCC or Clang)."
msgstr ""

#: ../../../kbuild/gcc-plugins.rst:47
msgid ""
"When a feature exists in Clang but not GCC, effort should be made to bring "
"the feature to upstream GCC (rather than just as a kernel-specific GCC "
"plugin), so the entire ecosystem can benefit from it."
msgstr ""

#: ../../../kbuild/gcc-plugins.rst:51
msgid ""
"Similarly, even if a feature provided by a GCC plugin does *not* exist in "
"Clang, but the feature is proven to be useful, effort should be spent to "
"upstream the feature to GCC (and Clang)."
msgstr ""

#: ../../../kbuild/gcc-plugins.rst:55
msgid ""
"After a feature is available in upstream GCC, the plugin will be made "
"unbuildable for the corresponding GCC version (and later). Once all kernel-"
"supported versions of GCC provide the feature, the plugin will be removed "
"from the kernel."
msgstr ""

#: ../../../kbuild/gcc-plugins.rst:62
msgid "Files"
msgstr ""

#: ../../../kbuild/gcc-plugins.rst:64
msgid "**$(src)/scripts/gcc-plugins**"
msgstr ""

#: ../../../kbuild/gcc-plugins.rst:66
msgid "This is the directory of the GCC plugins."
msgstr ""

#: ../../../kbuild/gcc-plugins.rst:68
msgid "**$(src)/scripts/gcc-plugins/gcc-common.h**"
msgstr ""

#: ../../../kbuild/gcc-plugins.rst:70
msgid ""
"This is a compatibility header for GCC plugins. It should be always included "
"instead of individual gcc headers."
msgstr ""

#: ../../../kbuild/gcc-plugins.rst:73
msgid ""
"**$(src)/scripts/gcc-plugins/gcc-generate-gimple-pass.h, $(src)/scripts/gcc-"
"plugins/gcc-generate-ipa-pass.h, $(src)/scripts/gcc-plugins/gcc-generate-"
"simple_ipa-pass.h, $(src)/scripts/gcc-plugins/gcc-generate-rtl-pass.h**"
msgstr ""

#: ../../../kbuild/gcc-plugins.rst:78
msgid ""
"These headers automatically generate the registration structures for GIMPLE, "
"SIMPLE_IPA, IPA and RTL passes. They should be preferred to creating the "
"structures by hand."
msgstr ""

#: ../../../kbuild/gcc-plugins.rst:84
msgid "Usage"
msgstr ""

#: ../../../kbuild/gcc-plugins.rst:86
msgid ""
"You must install the gcc plugin headers for your gcc version, e.g., on "
"Ubuntu for gcc-10::"
msgstr ""

#: ../../../kbuild/gcc-plugins.rst:91
msgid "Or on Fedora::"
msgstr ""

#: ../../../kbuild/gcc-plugins.rst:95
msgid "Or on Fedora when using cross-compilers that include plugins::"
msgstr ""

#: ../../../kbuild/gcc-plugins.rst:99
msgid ""
"Enable the GCC plugin infrastructure and some plugin(s) you want to use in "
"the kernel config::"
msgstr ""

#: ../../../kbuild/gcc-plugins.rst:106
msgid ""
"Run gcc (native or cross-compiler) to ensure plugin headers are detected::"
msgstr ""

#: ../../../kbuild/gcc-plugins.rst:111
msgid "The word \"plugin\" means they are not detected::"
msgstr ""

#: ../../../kbuild/gcc-plugins.rst:115
msgid "A full path means they are detected::"
msgstr ""

#: ../../../kbuild/gcc-plugins.rst:119
msgid "To compile the minimum tool set including the plugin(s)::"
msgstr ""

#: ../../../kbuild/gcc-plugins.rst:123
msgid ""
"or just run the kernel make and compile the whole kernel with the cyclomatic "
"complexity GCC plugin."
msgstr ""

#: ../../../kbuild/gcc-plugins.rst:128
msgid "4. How to add a new GCC plugin"
msgstr ""

#: ../../../kbuild/gcc-plugins.rst:130
msgid ""
"The GCC plugins are in scripts/gcc-plugins/. You need to put plugin source "
"files right under scripts/gcc-plugins/. Creating subdirectories is not "
"supported. It must be added to scripts/gcc-plugins/Makefile, scripts/"
"Makefile.gcc-plugins and a relevant Kconfig file."
msgstr ""
