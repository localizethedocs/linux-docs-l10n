# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../arch/sh/new-machine.rst:5
msgid "Adding a new board to LinuxSH"
msgstr ""

#: ../../../arch/sh/new-machine.rst:7
msgid "Paul Mundt <lethal@linux-sh.org>"
msgstr ""

#: ../../../arch/sh/new-machine.rst:9
msgid ""
"This document attempts to outline what steps are necessary to add support "
"for new boards to the LinuxSH port under the new 2.5 and 2.6 kernels. This "
"also attempts to outline some of the noticeable changes between the 2.4 and "
"the 2.5/2.6 SH backend."
msgstr ""

#: ../../../arch/sh/new-machine.rst:15
msgid "1. New Directory Structure"
msgstr ""

#: ../../../arch/sh/new-machine.rst:17
msgid ""
"The first thing to note is the new directory structure. Under 2.4, most of "
"the board-specific code (with the exception of stboards) ended up in arch/sh/"
"kernel/ directly, with board-specific headers ending up in include/asm-sh/. "
"For the new kernel, things are broken out by board type, companion chip "
"type, and CPU type. Looking at a tree view of this directory hierarchy looks "
"like the following:"
msgstr ""

#: ../../../arch/sh/new-machine.rst:24
msgid "Board-specific code::"
msgstr ""

#: ../../../arch/sh/new-machine.rst:46
msgid "Next, for companion chips::"
msgstr ""

#: ../../../arch/sh/new-machine.rst:56
msgid ""
"... and so on. Headers for the companion chips are treated the same way as "
"board-specific headers. Thus, include/asm-sh/hd64461 is home to all of the "
"hd64461-specific headers."
msgstr ""

#: ../../../arch/sh/new-machine.rst:60
msgid "Finally, CPU family support is also abstracted::"
msgstr ""

#: ../../../arch/sh/new-machine.rst:86
msgid ""
"It should be noted that CPU subtypes are _not_ abstracted. Thus, these still "
"need to be dealt with by the CPU family specific code."
msgstr ""

#: ../../../arch/sh/new-machine.rst:90
msgid "2. Adding a New Board"
msgstr ""

#: ../../../arch/sh/new-machine.rst:92
msgid ""
"The first thing to determine is whether the board you are adding will be "
"isolated, or whether it will be part of a family of boards that can mostly "
"share the same board-specific code with minor differences."
msgstr ""

#: ../../../arch/sh/new-machine.rst:96
msgid ""
"In the first case, this is just a matter of making a directory for your "
"board in arch/sh/boards/ and adding rules to hook your board in with the "
"build system (more on this in the next section). However, for board families "
"it makes more sense to have a common top-level arch/sh/boards/ directory and "
"then populate that with sub-directories for each member of the family. Both "
"the Solution Engine and the hp6xx boards are an example of this."
msgstr ""

#: ../../../arch/sh/new-machine.rst:103
msgid ""
"After you have setup your new arch/sh/boards/ directory, remember that you "
"should also add a directory in include/asm-sh for headers localized to this "
"board (if there are going to be more than one). In order to interoperate "
"seamlessly with the build system, it's best to have this directory the same "
"as the arch/sh/boards/ directory name, though if your board is again part of "
"a family, the build system has ways of dealing with this (via incdir-y "
"overloading), and you can feel free to name the directory after the family "
"member itself."
msgstr ""

#: ../../../arch/sh/new-machine.rst:112
msgid ""
"There are a few things that each board is required to have, both in the arch/"
"sh/boards and the include/asm-sh/ hierarchy. In order to better explain "
"this, we use some examples for adding an imaginary board. For setup code, "
"we're required at the very least to provide definitions for "
"get_system_type() and platform_setup(). For our imaginary board, this might "
"look something like::"
msgstr ""

#: ../../../arch/sh/new-machine.rst:145
msgid ""
"Our new imaginary board will also have to tie into the machvec in order for "
"it to be of any use."
msgstr ""

#: ../../../arch/sh/new-machine.rst:148
msgid "machvec functions fall into a number of categories:"
msgstr ""

#: ../../../arch/sh/new-machine.rst:150
msgid "I/O functions to IO memory (inb etc) and PCI/main memory (readb etc)."
msgstr ""

#: ../../../arch/sh/new-machine.rst:151
msgid "I/O mapping functions (ioport_map, ioport_unmap, etc)."
msgstr ""

#: ../../../arch/sh/new-machine.rst:152
msgid "a 'heartbeat' function."
msgstr ""

#: ../../../arch/sh/new-machine.rst:153
msgid "PCI and IRQ initialization routines."
msgstr ""

#: ../../../arch/sh/new-machine.rst:154
msgid ""
"Consistent allocators (for boards that need special allocators, particularly "
"for allocating out of some board-specific SRAM for DMA handles)."
msgstr ""

#: ../../../arch/sh/new-machine.rst:158
msgid ""
"There are machvec functions added and removed over time, so always be sure "
"to consult include/asm-sh/machvec.h for the current state of the machvec."
msgstr ""

#: ../../../arch/sh/new-machine.rst:161
msgid ""
"The kernel will automatically wrap in generic routines for undefined "
"function pointers in the machvec at boot time, as machvec functions are "
"referenced unconditionally throughout most of the tree. Some boards have "
"incredibly sparse machvecs (such as the dreamcast and sh03), whereas others "
"must define virtually everything (rts7751r2d)."
msgstr ""

#: ../../../arch/sh/new-machine.rst:167
msgid "Adding a new machine is relatively trivial (using vapor as an example):"
msgstr ""

#: ../../../arch/sh/new-machine.rst:169
msgid ""
"If the board-specific definitions are quite minimalistic, as is the case for "
"the vast majority of boards, simply having a single board-specific header is "
"sufficient."
msgstr ""

#: ../../../arch/sh/new-machine.rst:173
msgid ""
"add a new file include/asm-sh/vapor.h which contains prototypes for any "
"machine specific IO functions prefixed with the machine name, for example "
"vapor_inb. These will be needed when filling out the machine vector."
msgstr ""

#: ../../../arch/sh/new-machine.rst:178
msgid ""
"Note that these prototypes are generated automatically by setting "
"__IO_PREFIX to something sensible. A typical example would be::"
msgstr ""

#: ../../../arch/sh/new-machine.rst:184
msgid ""
"somewhere in the board-specific header. Any boards being ported that still "
"have a legacy io.h should remove it entirely and switch to the new model."
msgstr ""

#: ../../../arch/sh/new-machine.rst:187
msgid ""
"Add machine vector definitions to the board's setup.c. At a bare minimum, "
"this must be defined as something like::"
msgstr ""

#: ../../../arch/sh/new-machine.rst:195
msgid ""
"finally add a file arch/sh/boards/vapor/io.c, which contains definitions of "
"the machine specific io functions (if there are enough to warrant it)."
msgstr ""

#: ../../../arch/sh/new-machine.rst:199
msgid "3. Hooking into the Build System"
msgstr ""

#: ../../../arch/sh/new-machine.rst:201
msgid ""
"Now that we have the corresponding directories setup, and all of the board-"
"specific code is in place, it's time to look at how to get the whole mess to "
"fit into the build system."
msgstr ""

#: ../../../arch/sh/new-machine.rst:205
msgid ""
"Large portions of the build system are now entirely dynamic, and merely "
"require the proper entry here and there in order to get things done."
msgstr ""

#: ../../../arch/sh/new-machine.rst:208
msgid ""
"The first thing to do is to add an entry to arch/sh/Kconfig, under the "
"\"System type\" menu::"
msgstr ""

#: ../../../arch/sh/new-machine.rst:216
msgid ""
"next, this has to be added into arch/sh/Makefile. All boards require a "
"machdir-y entry in order to be built. This entry needs to be the name of the "
"board directory as it appears in arch/sh/boards, even if it is in a sub-"
"directory (in which case, all parent directories below arch/sh/boards/ need "
"to be listed). For our new board, this entry can look like::"
msgstr ""

#: ../../../arch/sh/new-machine.rst:224
msgid ""
"provided that we've placed everything in the arch/sh/boards/vapor/ directory."
msgstr ""

#: ../../../arch/sh/new-machine.rst:226
msgid ""
"Next, the build system assumes that your include/asm-sh directory will also "
"be named the same. If this is not the case (as is the case with multiple "
"boards belonging to a common family), then the directory name needs to be "
"implicitly appended to incdir-y. The existing code manages this for the "
"Solution Engine and hp6xx boards, so see these for an example."
msgstr ""

#: ../../../arch/sh/new-machine.rst:232
msgid ""
"Once that is taken care of, it's time to add an entry for the mach type. "
"This is done by adding an entry to the end of the arch/sh/tools/mach-types "
"list. The method for doing this is self explanatory, and so we won't waste "
"space restating it here. After this is done, you will be able to use "
"implicit checks for your board if you need this somewhere throughout the "
"common code, such as::"
msgstr ""

#: ../../../arch/sh/new-machine.rst:243
msgid ""
"also note that the mach_is_boardname() check will be implicitly forced to "
"lowercase, regardless of the fact that the mach-types entries are all "
"uppercase. You can read the script if you really care, but it's pretty ugly, "
"so you probably don't want to do that."
msgstr ""

#: ../../../arch/sh/new-machine.rst:248
msgid ""
"Now all that's left to do is providing a defconfig for your new board. This "
"way, other people who end up with this board can simply use this config for "
"reference instead of trying to guess what settings are supposed to be used "
"on it."
msgstr ""

#: ../../../arch/sh/new-machine.rst:253
msgid ""
"Also, as soon as you have copied over a sample .config for your new board "
"(assume arch/sh/configs/vapor_defconfig), you can also use this directly as "
"a build target, and it will be implicitly listed as such in the help text."
msgstr ""

#: ../../../arch/sh/new-machine.rst:257
msgid "Looking at the 'make help' output, you should now see something like:"
msgstr ""

#: ../../../arch/sh/new-machine.rst:259
msgid "Architecture specific targets (sh):"
msgstr ""

#: ../../../arch/sh/new-machine.rst:262
msgid "zImage"
msgstr ""

#: ../../../arch/sh/new-machine.rst:262
msgid "Compressed kernel image (arch/sh/boot/zImage)"
msgstr ""

#: ../../../arch/sh/new-machine.rst:263
msgid "adx_defconfig"
msgstr ""

#: ../../../arch/sh/new-machine.rst:263
msgid "Build for adx"
msgstr ""

#: ../../../arch/sh/new-machine.rst:264
msgid "cqreek_defconfig"
msgstr ""

#: ../../../arch/sh/new-machine.rst:264
msgid "Build for cqreek"
msgstr ""

#: ../../../arch/sh/new-machine.rst:265
msgid "dreamcast_defconfig"
msgstr ""

#: ../../../arch/sh/new-machine.rst:265
msgid "Build for dreamcast"
msgstr ""

#: ../../../arch/sh/new-machine.rst:266
msgid "..."
msgstr ""

#: ../../../arch/sh/new-machine.rst:267
msgid "vapor_defconfig"
msgstr ""

#: ../../../arch/sh/new-machine.rst:267
msgid "Build for vapor"
msgstr ""

#: ../../../arch/sh/new-machine.rst:270
msgid "which then allows you to do::"
msgstr ""

#: ../../../arch/sh/new-machine.rst:274
msgid ""
"which will in turn copy the defconfig for this board, run it through "
"oldconfig (prompting you for any new options since the time of creation), "
"and start you on your way to having a functional kernel for your new board."
msgstr ""
