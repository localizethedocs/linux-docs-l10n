# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../arch/arm/kernel_user_helpers.rst:3
msgid "Kernel-provided User Helpers"
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:5
msgid ""
"These are segment of kernel provided user code reachable from user space at "
"a fixed address in kernel memory.  This is used to provide user space with "
"some operations which require kernel help because of unimplemented native "
"feature and/or instructions in many ARM CPUs. The idea is for this code to "
"be executed directly in user mode for best efficiency but which is too "
"intimate with the kernel counter part to be left to user libraries. In fact "
"this code might even differ from one CPU to another depending on the "
"available instruction set, or whether it is a SMP systems. In other words, "
"the kernel reserves the right to change this code as needed without warning. "
"Only the entry points and their results as documented here are guaranteed to "
"be stable."
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:17
msgid ""
"This is different from (but doesn't preclude) a full blown VDSO "
"implementation, however a VDSO would prevent some assembly tricks with "
"constants that allows for efficient branching to those code segments. And "
"since those code segments only use a few cycles before returning to user "
"code, the overhead of a VDSO indirect far call would add a measurable "
"overhead to such minimalistic operations."
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:24
msgid ""
"User space is expected to bypass those helpers and implement those things "
"inline (either in the code emitted directly by the compiler, or part of the "
"implementation of a library call) when optimizing for a recent enough "
"processor that has the necessary native support, but only if resulting "
"binaries are already to be incompatible with earlier ARM processors due to "
"usage of similar native instructions for other things.  In other words don't "
"make binaries unable to run on earlier processors just for the sake of not "
"using these kernel helpers if your compiled code is not going to use new "
"instructions for other purpose."
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:34
msgid ""
"New helpers may be added over time, so an older kernel may be missing some "
"helpers present in a newer kernel.  For this reason, programs must check the "
"value of __kuser_helper_version (see below) before assuming that it is safe "
"to call any particular helper.  This check should ideally be performed only "
"once at process startup time, and execution aborted early if the required "
"helpers are not provided by the kernel version that process is running on."
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:43
msgid "kuser_helper_version"
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:45
msgid "Location:       0xffff0ffc"
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:47
msgid "Reference declaration::"
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:51
#: ../../../arch/arm/kernel_user_helpers.rst:97
#: ../../../arch/arm/kernel_user_helpers.rst:141
#: ../../../arch/arm/kernel_user_helpers.rst:192
#: ../../../arch/arm/kernel_user_helpers.rst:233
msgid "Definition:"
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:53
msgid ""
"This field contains the number of helpers being implemented by the running "
"kernel.  User space may read this to determine the availability of a "
"particular helper."
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:57
#: ../../../arch/arm/kernel_user_helpers.rst:101
#: ../../../arch/arm/kernel_user_helpers.rst:148
#: ../../../arch/arm/kernel_user_helpers.rst:197
#: ../../../arch/arm/kernel_user_helpers.rst:242
msgid "Usage example::"
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:69
#: ../../../arch/arm/kernel_user_helpers.rst:112
#: ../../../arch/arm/kernel_user_helpers.rst:165
#: ../../../arch/arm/kernel_user_helpers.rst:202
#: ../../../arch/arm/kernel_user_helpers.rst:261
msgid "Notes:"
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:71
msgid ""
"User space may assume that the value of this field never changes during the "
"lifetime of any single process.  This means that this field can be read once "
"during the initialisation of a library or startup phase of a program."
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:77
msgid "kuser_get_tls"
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:79
msgid "Location:       0xffff0fe0"
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:81
#: ../../../arch/arm/kernel_user_helpers.rst:121
#: ../../../arch/arm/kernel_user_helpers.rst:176
#: ../../../arch/arm/kernel_user_helpers.rst:211
msgid "Reference prototype::"
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:85
#: ../../../arch/arm/kernel_user_helpers.rst:125
#: ../../../arch/arm/kernel_user_helpers.rst:180
#: ../../../arch/arm/kernel_user_helpers.rst:217
msgid "Input:"
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:87
#: ../../../arch/arm/kernel_user_helpers.rst:182
msgid "lr = return address"
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:89
#: ../../../arch/arm/kernel_user_helpers.rst:132
#: ../../../arch/arm/kernel_user_helpers.rst:184
#: ../../../arch/arm/kernel_user_helpers.rst:224
msgid "Output:"
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:91
msgid "r0 = TLS value"
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:93
#: ../../../arch/arm/kernel_user_helpers.rst:137
#: ../../../arch/arm/kernel_user_helpers.rst:188
#: ../../../arch/arm/kernel_user_helpers.rst:229
msgid "Clobbered registers:"
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:95
#: ../../../arch/arm/kernel_user_helpers.rst:186
#: ../../../arch/arm/kernel_user_helpers.rst:190
msgid "none"
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:99
msgid "Get the TLS value as previously set via the __ARM_NR_set_tls syscall."
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:114
msgid "Valid only if __kuser_helper_version >= 1 (from kernel version 2.6.12)."
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:117
msgid "kuser_cmpxchg"
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:119
msgid "Location:       0xffff0fc0"
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:127
msgid "r0 = oldval r1 = newval r2 = ptr lr = return address"
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:134
#: ../../../arch/arm/kernel_user_helpers.rst:226
msgid ""
"r0 = success code (zero or non-zero) C flag = set if r0 == 0, clear if r0 != "
"0"
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:139
msgid "r3, ip, flags"
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:143
msgid ""
"Atomically store newval in `*ptr` only if `*ptr` is equal to oldval. Return "
"zero if `*ptr` was changed or non-zero if no exchange happened. The C flag "
"is also set if `*ptr` was changed to allow for assembly optimization in the "
"calling code."
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:167
#: ../../../arch/arm/kernel_user_helpers.rst:263
msgid "This routine already includes memory barriers as needed."
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:169
msgid "Valid only if __kuser_helper_version >= 2 (from kernel version 2.6.12)."
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:172
msgid "kuser_memory_barrier"
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:174
msgid "Location:       0xffff0fa0"
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:194
msgid ""
"Apply any needed memory barrier to preserve consistency with data modified "
"manually and __kuser_cmpxchg usage."
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:204
msgid "Valid only if __kuser_helper_version >= 3 (from kernel version 2.6.15)."
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:207
msgid "kuser_cmpxchg64"
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:209
msgid "Location:       0xffff0f60"
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:219
msgid ""
"r0 = pointer to oldval r1 = pointer to newval r2 = pointer to target value "
"lr = return address"
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:231
msgid "r3, lr, flags"
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:235
msgid ""
"Atomically store the 64-bit value pointed by `*newval` in `*ptr` only if "
"`*ptr` is equal to the 64-bit value pointed by `*oldval`.  Return zero if "
"`*ptr` was changed or non-zero if no exchange happened."
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:239
msgid ""
"The C flag is also set if `*ptr` was changed to allow for assembly "
"optimization in the calling code."
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:265
msgid ""
"Due to the length of this sequence, this spans 2 conventional kuser "
"\"slots\", therefore 0xffff0f80 is not used as a valid entry point."
msgstr ""

#: ../../../arch/arm/kernel_user_helpers.rst:268
msgid "Valid only if __kuser_helper_version >= 5 (from kernel version 3.1)."
msgstr ""
