# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../dev-tools/checkpatch.rst:5
msgid "Checkpatch"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:7
msgid ""
"Checkpatch (scripts/checkpatch.pl) is a perl script which checks for trivial "
"style violations in patches and optionally corrects them.  Checkpatch can "
"also be run on file contexts and without the kernel tree."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:11
msgid ""
"Checkpatch is not always right. Your judgement takes precedence over "
"checkpatch messages.  If your code looks better with the violations, then "
"its probably best left alone."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:17
msgid "Options"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:19
msgid "This section will describe the options checkpatch can be run with."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:21
msgid "Usage::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:25
msgid "Available options:"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:27
msgid "-q,  --quiet"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:29
msgid "Enable quiet mode."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:31
msgid ""
"-v,  --verbose Enable verbose mode.  Additional verbose test descriptions "
"are output so as to provide information on why that particular message is "
"shown."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:35
msgid "--no-tree"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:37
msgid "Run checkpatch without the kernel tree."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:39
msgid "--no-signoff"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:41
msgid ""
"Disable the 'Signed-off-by' line check.  The sign-off is a simple line at "
"the end of the explanation for the patch, which certifies that you wrote it "
"or otherwise have the right to pass it on as an open-source patch."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:45 ../../../dev-tools/checkpatch.rst:109
#: ../../../dev-tools/checkpatch.rst:117
msgid "Example::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:49
msgid ""
"Setting this flag effectively stops a message for a missing signed-off-by "
"line in a patch context."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:52
msgid "--patch"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:54
msgid ""
"Treat FILE as a patch.  This is the default option and need not be "
"explicitly specified."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:57
msgid "--emacs"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:59
msgid ""
"Set output to emacs compile window format.  This allows emacs users to jump "
"from the error in the compile window directly to the offending line in the "
"patch."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:63
msgid "--terse"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:65
msgid "Output only one line per report."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:67
msgid "--showfile"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:69
msgid "Show the diffed file position instead of the input file position."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:71
msgid "-g,  --git"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:73
msgid "Treat FILE as a single commit or a git revision range."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:75
msgid "Single commit with:"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:77
msgid "<rev>"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:78
msgid "<rev>^"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:79
msgid "<rev>~n"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:81
msgid "Multiple commits with:"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:83
msgid "<rev1>..<rev2>"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:84
msgid "<rev1>...<rev2>"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:85
msgid "<rev>-<count>"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:87
msgid "-f,  --file"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:89
msgid ""
"Treat FILE as a regular source file.  This option must be used when running "
"checkpatch on source files in the kernel."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:92
msgid "--subjective,  --strict"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:94
msgid ""
"Enable stricter tests in checkpatch.  By default the tests emitted as CHECK "
"do not activate by default.  Use this flag to activate the CHECK tests."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:97
msgid "--list-types"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:99
msgid ""
"Every message emitted by checkpatch has an associated TYPE.  Add this flag "
"to display all the types in checkpatch."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:102
msgid ""
"Note that when this flag is active, checkpatch does not read the input FILE, "
"and no message is emitted.  Only a list of types in checkpatch is output."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:105
msgid "--types TYPE(,TYPE2...)"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:107
msgid "Only display messages with the given types."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:113
msgid "--ignore TYPE(,TYPE2...)"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:115
msgid "Checkpatch will not emit messages for the specified types."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:121
msgid "--show-types"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:123
msgid ""
"By default checkpatch doesn't display the type associated with the messages. "
"Set this flag to show the message type in the output."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:126
msgid "--max-line-length=n"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:128
msgid ""
"Set the max line length (default 100).  If a line exceeds the specified "
"length, a LONG_LINE message is emitted."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:132
msgid ""
"The message level is different for patch and file contexts.  For patches, a "
"WARNING is emitted.  While a milder CHECK is emitted for files.  So for file "
"contexts, the --strict flag must also be enabled."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:136
msgid "--min-conf-desc-length=n"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:138
msgid "Set the Kconfig entry minimum description length, if shorter, warn."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:140
msgid "--tab-size=n"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:142
msgid "Set the number of spaces for tab (default 8)."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:144
msgid "--root=PATH"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:146
msgid "PATH to the kernel tree root."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:148
msgid ""
"This option must be specified when invoking checkpatch from outside the "
"kernel root."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:151
msgid "--no-summary"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:153
msgid "Suppress the per file summary."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:155
msgid "--mailback"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:157
msgid ""
"Only produce a report in case of Warnings or Errors.  Milder Checks are "
"excluded from this."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:160
msgid "--summary-file"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:162
msgid "Include the filename in summary."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:164
msgid "--debug KEY=[0|1]"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:166
msgid ""
"Turn on/off debugging of KEY, where KEY is one of 'values', 'possible', "
"'type', and 'attr' (default is all off)."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:169
msgid "--fix"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:171
msgid ""
"This is an EXPERIMENTAL feature.  If correctable errors exist, a file "
"<inputfile>.EXPERIMENTAL-checkpatch-fixes is created which has the "
"automatically fixable errors corrected."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:175
msgid "--fix-inplace"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:177
msgid ""
"EXPERIMENTAL - Similar to --fix but input file is overwritten with fixes."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:179
msgid ""
"DO NOT USE this flag unless you are absolutely sure and you have a backup in "
"place."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:182
msgid "--ignore-perl-version"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:184
msgid ""
"Override checking of perl version.  Runtime errors may be encountered after "
"enabling this flag if the perl version does not meet the minimum specified."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:187
msgid "--codespell"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:189
msgid "Use the codespell dictionary for checking spelling errors."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:191
msgid "--codespellfile"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:193
msgid ""
"Use the specified codespell file. Default is '/usr/share/codespell/"
"dictionary.txt'."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:196
msgid "--typedefsfile"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:198
msgid "Read additional types from this file."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:200
msgid "--color[=WHEN]"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:202
msgid ""
"Use colors 'always', 'never', or only when output is a terminal ('auto'). "
"Default is 'auto'."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:205
msgid "--kconfig-prefix=WORD"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:207
msgid "Use WORD as a prefix for Kconfig symbols (default is `CONFIG_`)."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:209
msgid "-h, --help, --version"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:211
msgid "Display the help text."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:214
msgid "Message Levels"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:216
msgid ""
"Messages in checkpatch are divided into three levels. The levels of messages "
"in checkpatch denote the severity of the error. They are:"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:219
msgid "ERROR"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:221
msgid ""
"This is the most strict level.  Messages of type ERROR must be taken "
"seriously as they denote things that are very likely to be wrong."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:224
msgid "WARNING"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:226
msgid ""
"This is the next stricter level.  Messages of type WARNING requires a more "
"careful review.  But it is milder than an ERROR."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:229
msgid "CHECK"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:231
msgid ""
"This is the mildest level.  These are things which may require some thought."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:234
msgid "Type Descriptions"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:236
msgid ""
"This section contains a description of all the message types in checkpatch."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:243
msgid "Allocation style"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:245
msgid "**ALLOC_ARRAY_ARGS**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:246
msgid ""
"The first argument for kcalloc or kmalloc_array should be the number of "
"elements.  sizeof() as the first argument is generally wrong."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:250 ../../../dev-tools/checkpatch.rst:269
msgid ""
"See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:252
msgid "**ALLOC_SIZEOF_STRUCT**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:253
msgid ""
"The allocation style is bad.  In general for family of allocation functions "
"using sizeof() to get memory size, constructs like::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:259 ../../../dev-tools/checkpatch.rst:749
#: ../../../dev-tools/checkpatch.rst:839 ../../../dev-tools/checkpatch.rst:983
#: ../../../dev-tools/checkpatch.rst:1101
msgid "should be::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:263
msgid ""
"See: https://www.kernel.org/doc/html/latest/process/coding-style."
"html#allocating-memory"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:265
msgid "**ALLOC_WITH_MULTIPLY**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:266
msgid ""
"Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a sizeof multiply."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:273
msgid "API usage"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:275
msgid "**ARCH_DEFINES**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:276
msgid "Architecture specific defines should be avoided wherever possible."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:279
msgid "**ARCH_INCLUDE_LINUX**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:280
msgid ""
"Whenever asm/file.h is included and linux/file.h exists, a conversion can be "
"made when linux/file.h includes asm/file.h. However this is not always the "
"case (See signal.h). This message type is emitted only for includes from "
"arch/."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:285
msgid "**AVOID_BUG**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:286
msgid ""
"BUG() or BUG_ON() should be avoided totally. Use WARN() and WARN_ON() "
"instead, and handle the \"impossible\" error condition as gracefully as "
"possible."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:290
msgid ""
"See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-"
"bug-on"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:292
msgid "**CONSIDER_KSTRTO**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:293
msgid ""
"The simple_strtol(), simple_strtoll(), simple_strtoul(), and "
"simple_strtoull() functions explicitly ignore overflows, which may lead to "
"unexpected results in callers.  The respective kstrtol(), kstrtoll(), "
"kstrtoul(), and kstrtoull() functions tend to be the correct replacements."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:299
msgid ""
"See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-"
"strtol-simple-strtoll-simple-strtoul-simple-strtoull"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:301
msgid "**CONSTANT_CONVERSION**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:302
msgid ""
"Use of __constant_<foo> form is discouraged for the following functions::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:311
msgid ""
"Using any of these outside of include/uapi/ is not preferred as using the "
"function without __constant_ is identical when the argument is a constant."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:315
msgid ""
"In big endian systems, the macros like __constant_cpu_to_be32(x) and "
"cpu_to_be32(x) expand to the same expression::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:321
msgid ""
"In little endian systems, the macros __constant_cpu_to_be32(x) and "
"cpu_to_be32(x) expand to __constant_swab32 and __swab32.  __swab32 has a "
"__builtin_constant_p check::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:330
msgid ""
"So ultimately they have a special case for constants. Similar is the case "
"with all of the macros in the list.  Thus using the __constant_... forms are "
"unnecessarily verbose and not preferred outside of include/uapi."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:335
msgid "See: https://lore.kernel.org/lkml/1400106425.12666.6.camel@joe-AO725/"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:337
msgid "**DEPRECATED_API**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:338
msgid ""
"Usage of a deprecated RCU API is detected.  It is recommended to replace old "
"flavourful RCU APIs by their new vanilla-RCU counterparts."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:341
msgid "The full list of available RCU APIs can be viewed from the kernel docs."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:343
msgid ""
"See: https://www.kernel.org/doc/html/latest/RCU/whatisRCU.html#full-list-of-"
"rcu-apis"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:345
msgid "**DEVICE_ATTR_FUNCTIONS**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:346
msgid ""
"The function names used in DEVICE_ATTR is unusual. Typically, the store and "
"show functions are used with <attr>_store and <attr>_show, where <attr> is a "
"named attribute variable of the device."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:350
msgid "Consider the following examples::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:355
msgid "The function names should preferably follow the above pattern."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:357 ../../../dev-tools/checkpatch.rst:366
#: ../../../dev-tools/checkpatch.rst:375 ../../../dev-tools/checkpatch.rst:384
msgid ""
"See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device."
"html#attributes"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:359
msgid "**DEVICE_ATTR_RO**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:360
msgid ""
"The DEVICE_ATTR_RO(name) helper macro can be used instead of "
"DEVICE_ATTR(name, 0444, name_show, NULL);"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:363
msgid ""
"Note that the macro automatically appends _show to the named attribute "
"variable of the device for the show method."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:368
msgid "**DEVICE_ATTR_RW**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:369
msgid ""
"The DEVICE_ATTR_RW(name) helper macro can be used instead of "
"DEVICE_ATTR(name, 0644, name_show, name_store);"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:372
msgid ""
"Note that the macro automatically appends _show and _store to the named "
"attribute variable of the device for the show and store methods."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:377
msgid "**DEVICE_ATTR_WO**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:378
msgid ""
"The DEVICE_AATR_WO(name) helper macro can be used instead of "
"DEVICE_ATTR(name, 0200, NULL, name_store);"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:381
msgid ""
"Note that the macro automatically appends _store to the named attribute "
"variable of the device for the store method."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:386
msgid "**DUPLICATED_SYSCTL_CONST**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:387
msgid ""
"Commit d91bff3011cf (\"proc/sysctl: add shared variables for range check\") "
"added some shared const variables to be used instead of a local copy in each "
"source file."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:391
msgid ""
"Consider replacing the sysctl range checking value with the shared one in "
"include/linux/sysctl.h.  The following conversion scheme may be used::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:399
msgid "See:"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:401
msgid "https://lore.kernel.org/lkml/20190430180111.10688-1-mcroce@redhat.com/"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:402
msgid "https://lore.kernel.org/lkml/20190531131422.14970-1-mcroce@redhat.com/"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:404
msgid "**ENOSYS**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:405
msgid ""
"ENOSYS means that a nonexistent system call was called. Earlier, it was "
"wrongly used for things like invalid operations on otherwise valid "
"syscalls.  This should be avoided in new code."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:409
msgid ""
"See: https://lore.kernel.org/"
"lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital."
"net/"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:411
msgid "**ENOTSUPP**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:412
msgid ""
"ENOTSUPP is not a standard error code and should be avoided in new patches. "
"EOPNOTSUPP should be used instead."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:415
msgid "See: https://lore.kernel.org/netdev/20200510182252.GA411829@lunn.ch/"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:417
msgid "**EXPORT_SYMBOL**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:418
msgid "EXPORT_SYMBOL should immediately follow the symbol to be exported."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:420
msgid "**IN_ATOMIC**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:421
msgid ""
"in_atomic() is not for driver use so any such use is reported as an ERROR. "
"Also in_atomic() is often used to determine if sleeping is permitted, but it "
"is not reliable in this use model.  Therefore its use is strongly "
"discouraged."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:426
msgid "However, in_atomic() is ok for core kernel use."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:428
msgid ""
"See: https://lore.kernel.org/lkml/20080320201723.b87b3732.akpm@linux-"
"foundation.org/"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:430
msgid "**LOCKDEP**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:431
msgid ""
"The lockdep_no_validate class was added as a temporary measure to prevent "
"warnings on conversion of device->sem to device->mutex. It should not be "
"used for any other purpose."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:435
msgid "See: https://lore.kernel.org/lkml/1268959062.9440.467.camel@laptop/"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:437
msgid "**MALFORMED_INCLUDE**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:438
msgid ""
"The #include statement has a malformed path.  This has happened because the "
"author has included a double slash \"//\" in the pathname accidentally."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:442
msgid "**USE_LOCKDEP**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:443
msgid ""
"lockdep_assert_held() annotations should be preferred over assertions based "
"on spin_is_locked()"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:446
msgid ""
"See: https://www.kernel.org/doc/html/latest/locking/lockdep-design."
"html#annotations"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:448
msgid "**UAPI_INCLUDE**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:449
msgid "No #include statements in include/uapi should use a uapi/ path."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:451
msgid "**USLEEP_RANGE**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:452
msgid ""
"usleep_range() should be preferred over udelay(). The proper way of using "
"usleep_range() is mentioned in the kernel docs."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:457
msgid "Comments"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:459
msgid "**BLOCK_COMMENT_STYLE**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:460
msgid ""
"The comment style is incorrect.  The preferred style for multi- line "
"comments is::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:468
msgid ""
"The networking comment style is a bit different, with the first line not "
"empty like the former::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:475 ../../../dev-tools/checkpatch.rst:481
msgid ""
"See: https://www.kernel.org/doc/html/latest/process/coding-style."
"html#commenting"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:477
msgid "**C99_COMMENTS**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:478
msgid ""
"C99 style single line comments (//) should not be used. Prefer the block "
"comment style instead."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:483
msgid "**DATA_RACE**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:484
msgid ""
"Applications of data_race() should have a comment so as to document the "
"reasoning behind why it was deemed safe."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:487
msgid ""
"See: https://lore.kernel.org/lkml/20200401101714.44781-1-elver@google.com/"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:489
msgid "**FSF_MAILING_ADDRESS**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:490
msgid ""
"Kernel maintainers reject new instances of the GPL boilerplate paragraph "
"directing people to write to the FSF for a copy of the GPL, since the FSF "
"has moved in the past and may do so again. So do not write paragraphs about "
"writing to the Free Software Foundation's mailing address."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:496
msgid "See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:498
msgid "**UNCOMMENTED_RGMII_MODE**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:499
msgid ""
"Historically, the RGMII PHY modes specified in Device Trees have been used "
"inconsistently, often referring to the usage of delays on the PHY side "
"rather than describing the board."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:503
msgid ""
"PHY modes \"rgmii\", \"rgmii-rxid\" and \"rgmii-txid\" modes require the "
"clock signal to be delayed on the PCB; this unusual configuration should be "
"described in a comment. If they are not (meaning that the delay is realized "
"internally in the MAC or PHY), \"rgmii-id\" is the correct PHY mode."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:509
msgid "Commit message"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:511
msgid "**BAD_SIGN_OFF**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:512
msgid ""
"The signed-off-by line does not fall in line with the standards specified by "
"the community."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:515
msgid ""
"See: https://www.kernel.org/doc/html/latest/process/submitting-patches."
"html#developer-s-certificate-of-origin-1-1"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:517
msgid "**BAD_STABLE_ADDRESS_STYLE**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:518
msgid ""
"The email format for stable is incorrect. Some valid options for stable "
"address are::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:524
msgid "For adding version info, the following comment style should be used::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:528
msgid "**COMMIT_COMMENT_SYMBOL**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:529
msgid ""
"Commit log lines starting with a '#' are ignored by git as comments.  To "
"solve this problem addition of a single space infront of the log line is "
"enough."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:533
msgid "**COMMIT_MESSAGE**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:534
msgid ""
"The patch is missing a commit description.  A brief description of the "
"changes made by the patch should be added."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:537 ../../../dev-tools/checkpatch.rst:544
#: ../../../dev-tools/checkpatch.rst:602 ../../../dev-tools/checkpatch.rst:609
msgid ""
"See: https://www.kernel.org/doc/html/latest/process/submitting-patches."
"html#describe-your-changes"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:539
msgid "**EMAIL_SUBJECT**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:540
msgid ""
"Naming the tool that found the issue is not very useful in the subject "
"line.  A good subject line summarizes the change that the patch brings."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:546
msgid "**FROM_SIGN_OFF_MISMATCH**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:547
msgid ""
"The author's email does not match with that in the Signed-off-by: line(s). "
"This can be sometimes caused due to an improperly configured email client."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:551
msgid "This message is emitted due to any of the following reasons::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:558
msgid "**MISSING_SIGN_OFF**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:559
msgid ""
"The patch is missing a Signed-off-by line.  A signed-off-by line should be "
"added according to Developer's certificate of Origin."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:563 ../../../dev-tools/checkpatch.rst:572
msgid ""
"See: https://www.kernel.org/doc/html/latest/process/submitting-patches."
"html#sign-your-work-the-developer-s-certificate-of-origin"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:565
msgid "**NO_AUTHOR_SIGN_OFF**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:566
msgid ""
"The author of the patch has not signed off the patch.  It is required that a "
"simple sign off line should be present at the end of explanation of the "
"patch to denote that the author has written it or otherwise has the rights "
"to pass it on as an open source patch."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:574
msgid "**DIFF_IN_COMMIT_MSG**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:575
msgid ""
"Avoid having diff content in commit message. This causes problems when one "
"tries to apply a file containing both the changelog and the diff because "
"patch(1) tries to apply the diff which it found in the changelog."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:580
msgid ""
"See: https://lore.kernel.org/"
"lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:582
msgid "**GERRIT_CHANGE_ID**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:583
msgid ""
"To be picked up by gerrit, the footer of the commit message might have a "
"Change-Id like::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:589
msgid "The Change-Id line must be removed before submitting."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:591
msgid "**GIT_COMMIT_ID**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:592
msgid ""
"The proper way to reference a commit id is: commit <12+ chars of sha1> "
"(\"<title line>\")"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:595
msgid "An example may be::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:604
msgid "**BAD_FIXES_TAG**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:605
msgid ""
"The Fixes: tag is malformed or does not follow the community conventions. "
"This can occur if the tag have been split into multiple lines (e.g., when "
"pasted in an email program with word wrapping enabled)."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:613
msgid "Comparison style"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:615
msgid "**ASSIGN_IN_IF**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:616
msgid "Do not use assignments in if condition. Example::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:621
msgid "should be written as::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:626
msgid "**BOOL_COMPARISON**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:627
msgid "Comparisons of A to true and false are better written as A and !A."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:630
msgid "See: https://lore.kernel.org/lkml/1365563834.27174.12.camel@joe-AO722/"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:632
msgid "**COMPARISON_TO_NULL**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:633
msgid ""
"Comparisons to NULL in the form (foo == NULL) or (foo != NULL) are better "
"written as (!foo) and (foo)."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:636
msgid "**CONSTANT_COMPARISON**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:637
msgid ""
"Comparisons with a constant or upper case identifier on the left side of the "
"test should be avoided."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:642
msgid "Indentation and Line Breaks"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:644
msgid "**CODE_INDENT**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:645
msgid ""
"Code indent should use tabs instead of spaces. Outside of comments, "
"documentation and Kconfig, spaces are never used for indentation."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:649 ../../../dev-tools/checkpatch.rst:681
msgid ""
"See: https://www.kernel.org/doc/html/latest/process/coding-style."
"html#indentation"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:651
msgid "**DEEP_INDENTATION**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:652
msgid "Indentation with 6 or more tabs usually indicate overly indented code."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:655
msgid ""
"It is suggested to refactor excessive indentation of if/else/for/do/while/"
"switch statements."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:658
msgid "See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:660
msgid "**SWITCH_CASE_INDENT_LEVEL**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:661
msgid "switch should be at the same indent as case. Example::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:683
msgid "**LONG_LINE**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:684
msgid ""
"The line has exceeded the specified maximum length. To use a different "
"maximum line length, the --max-line-length=n option may be added while "
"invoking checkpatch."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:688
msgid ""
"Earlier, the default line length was 80 columns.  Commit bdc48fa11e46 "
"(\"checkpatch/coding-style: deprecate 80-column warning\") increased the "
"limit to 100 columns.  This is not a hard limit either and it's preferable "
"to stay within 80 columns whenever possible."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:693 ../../../dev-tools/checkpatch.rst:700
#: ../../../dev-tools/checkpatch.rst:707
msgid ""
"See: https://www.kernel.org/doc/html/latest/process/coding-style."
"html#breaking-long-lines-and-strings"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:695
msgid "**LONG_LINE_STRING**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:696
msgid ""
"A string starts before but extends beyond the maximum line length. To use a "
"different maximum line length, the --max-line-length=n option may be added "
"while invoking checkpatch."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:702
msgid "**LONG_LINE_COMMENT**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:703
msgid ""
"A comment starts before but extends beyond the maximum line length. To use a "
"different maximum line length, the --max-line-length=n option may be added "
"while invoking checkpatch."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:709
msgid "**SPLIT_STRING**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:710
msgid ""
"Quoted strings that appear as messages in userspace and can be grepped, "
"should not be split across multiple lines."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:713
msgid "See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:715
msgid "**MULTILINE_DEREFERENCE**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:716
msgid "A single dereferencing identifier spanned on multiple lines like::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:721
msgid ""
"is generally hard to follow. It can easily lead to typos and so makes the "
"code vulnerable to bugs."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:724
msgid ""
"If fixing the multiple line dereferencing leads to an 80 column violation, "
"then either rewrite the code in a more simple way or if the starting part of "
"the dereferencing identifier is the same and used at multiple places then "
"store it in a temporary variable, and use that temporary variable only at "
"all the places. For example, if there are two dereferencing identifiers::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:734
msgid ""
"then store the member1->member2->member3 part in a temporary variable. It "
"not only helps to avoid the 80 column violation but also reduces the program "
"size by removing the unnecessary dereferences."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:738
msgid ""
"But if none of the above methods work then ignore the 80 column violation "
"because it is much easier to read a dereferencing identifier on a single "
"line."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:742
msgid "**TRAILING_STATEMENTS**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:743
msgid ""
"Trailing statements (for example after any conditional) should be on the "
"next line. Statements, such as::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:756
msgid "Macros, Attributes and Symbols"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:758
msgid "**ARRAY_SIZE**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:759
msgid ""
"The ARRAY_SIZE(foo) macro should be preferred over sizeof(foo)/"
"sizeof(foo[0]) for finding number of elements in an array."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:763
msgid "The macro is defined in include/linux/kernel.h::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:767
msgid "**AVOID_EXTERNS**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:768
msgid ""
"Function prototypes don't need to be declared extern in .h files.  It's "
"assumed by the compiler and is unnecessary."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:771
msgid "**AVOID_L_PREFIX**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:772
msgid ""
"Local symbol names that are prefixed with `.L` should be avoided, as this "
"has special meaning for the assembler; a symbol entry will not be emitted "
"into the symbol table.  This can prevent `objtool` from generating correct "
"unwind info."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:777
msgid ""
"Symbols with STB_LOCAL binding may still be used, and `.L` prefixed local "
"symbol names are still generally usable within a function, but `.L` prefixed "
"local symbol names should not be used to denote the beginning or end of code "
"regions via `SYM_CODE_START_LOCAL`/`SYM_CODE_END`"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:783
msgid "**BIT_MACRO**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:784
msgid ""
"Defines like: 1 << <digit> could be BIT(digit). The BIT() macro is defined "
"via include/linux/bits.h::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:789
msgid "**CONST_READ_MOSTLY**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:790
msgid ""
"When a variable is tagged with the __read_mostly annotation, it is a signal "
"to the compiler that accesses to the variable will be mostly reads and "
"rarely(but NOT never) a write."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:794
msgid ""
"const __read_mostly does not make any sense as const data is already read-"
"only.  The __read_mostly annotation thus should be removed."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:797
msgid "**DATE_TIME**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:798
msgid ""
"It is generally desirable that building the same source code with the same "
"set of tools is reproducible, i.e. the output is always exactly the same."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:802
msgid ""
"The kernel does *not* use the ``__DATE__`` and ``__TIME__`` macros, and "
"enables warnings if they are used as they can lead to non-deterministic "
"builds."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:806
msgid ""
"See: https://www.kernel.org/doc/html/latest/kbuild/reproducible-builds."
"html#timestamps"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:808
msgid "**DEFINE_ARCH_HAS**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:809
msgid "The ARCH_HAS_xyz and ARCH_HAVE_xyz patterns are wrong."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:811
msgid ""
"For big conceptual features use Kconfig symbols instead.  And for smaller "
"things where we have compatibility fallback functions but want architectures "
"able to override them with optimized ones, we should either use weak "
"functions (appropriate for some cases), or the symbol that protects them "
"should be the same symbol we use."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:817
msgid ""
"See: https://lore.kernel.org/lkml/"
"CA+55aFycQ9XJvEOsiM3txHL5bjUc8CeKWJNR_H+MiicaddB42Q@mail.gmail.com/"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:819
msgid "**DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:820
msgid "do {} while(0) macros should not have a trailing semicolon."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:822
msgid "**INIT_ATTRIBUTE**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:823
msgid "Const init definitions should use __initconst instead of __initdata."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:826
msgid ""
"Similarly init definitions without const require a separate use of const."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:829
msgid "**INLINE_LOCATION**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:830
msgid "The inline keyword should sit between storage class and type."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:832
msgid "For example, the following segment::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:846
msgid "**MISPLACED_INIT**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:847
msgid ""
"It is possible to use section markers on variables in a way which gcc "
"doesn't understand (or at least not the way the developer intended)::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:853
msgid ""
"does not put exynos4_plls in the .initdata section. The __initdata marker "
"can be virtually anywhere on the line, except right after \"struct\". The "
"preferred location is before the \"=\" sign if there is one, or before the "
"trailing \";\" otherwise."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:858
msgid "See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:860
msgid "**MULTISTATEMENT_MACRO_USE_DO_WHILE**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:861
msgid ""
"Macros with multiple statements should be enclosed in a do - while block.  "
"Same should also be the case for macros starting with `if` to avoid logic "
"defects::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:871 ../../../dev-tools/checkpatch.rst:910
msgid ""
"See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-"
"enums-and-rtl"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:873
msgid "**PREFER_FALLTHROUGH**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:874
msgid ""
"Use the `fallthrough;` pseudo keyword instead of `/* fallthrough */` like "
"comments."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:877
msgid "**TRAILING_SEMICOLON**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:878
msgid ""
"Macro definition should not end with a semicolon. The macro invocation style "
"should be consistent with function calls. This can prevent any unexpected "
"code paths::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:884
msgid "If this macro is used within a if else statement, like::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:892
msgid ""
"Then there would be a compilation error, because when the macro is expanded "
"there are two trailing semicolons, so the else branch gets orphaned."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:896
msgid "See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:898
msgid "**MACRO_ARG_UNUSED**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:899
msgid ""
"If function-like macros do not utilize a parameter, it might result in a "
"build warning. We advocate for utilizing static inline functions to replace "
"such macros. For example, for a macro such as the one below::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:906
msgid "there would be a warning like below::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:912
msgid "**SINGLE_STATEMENT_DO_WHILE_MACRO**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:913
msgid ""
"For the multi-statement macros, it is necessary to use the do-while loop to "
"avoid unpredictable code paths. The do-while loop helps to group the "
"multiple statements into a single one so that a function-like macro can be "
"used as a function only."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:918
msgid ""
"But for the single statement macros, it is unnecessary to use the do-while "
"loop. Although the code is syntactically correct but using the do-while loop "
"is redundant. So remove the do-while loop for single statement macros."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:923
msgid "**WEAK_DECLARATION**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:924
msgid ""
"Using weak declarations like __attribute__((weak)) or __weak can have "
"unintended link defects.  Avoid using them."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:929
msgid "Functions and Variables"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:931
msgid "**CAMELCASE**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:932
msgid "Avoid CamelCase Identifiers."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:934
msgid ""
"See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:936
msgid "**CONST_CONST**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:937
msgid ""
"Using `const <type> const *` is generally meant to be written `const <type> "
"* const`."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:940
msgid "**CONST_STRUCT**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:941
msgid ""
"Using const is generally a good idea.  Checkpatch reads a list of frequently "
"used structs that are always or almost always constant."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:945
msgid ""
"The existing structs list can be viewed from `scripts/const_structs."
"checkpatch`."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:948
msgid ""
"See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:950
msgid "**EMBEDDED_FUNCTION_NAME**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:951
msgid ""
"Embedded function names are less appropriate to use as refactoring can cause "
"function renaming.  Prefer the use of \"%s\", __func__ to embedded function "
"names."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:955
msgid ""
"Note that this does not work with -f (--file) checkpatch option as it "
"depends on patch context providing the function name."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:958
msgid "**FUNCTION_ARGUMENTS**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:959
msgid "This warning is emitted due to any of the following reasons:"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:961
msgid ""
"Arguments for the function declaration do not follow the identifier name.  "
"Example::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:967
msgid "This should be corrected to::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:971
msgid ""
"Some arguments for the function definition do not have an identifier name.  "
"Example::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:976
msgid "All arguments should have identifier names."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:978
msgid "**FUNCTION_WITHOUT_ARGS**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:979
msgid "Function declarations without arguments like::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:987
msgid "**GLOBAL_INITIALISERS**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:988
msgid ""
"Global variables should not be initialized explicitly to 0 (or NULL, false, "
"etc.).  Your compiler (or rather your loader, which is responsible for "
"zeroing out the relevant sections) automatically does it for you."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:993
msgid "**INITIALISED_STATIC**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:994
msgid ""
"Static variables should not be initialized explicitly to zero. Your compiler "
"(or rather your loader) automatically does it for you."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:998
msgid "**MULTIPLE_ASSIGNMENTS**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:999
msgid ""
"Multiple assignments on a single line makes the code unnecessarily "
"complicated. So on a single line assign value to a single variable only, "
"this makes the code more readable and helps avoid typos."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1003
msgid "**RETURN_PARENTHESES**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1004
msgid "return is not a function and as such doesn't need parentheses::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1008
msgid "can simply be::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1014
msgid "Permissions"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1016
msgid "**DEVICE_ATTR_PERMS**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1017
msgid ""
"The permissions used in DEVICE_ATTR are unusual. Typically only three "
"permissions are used - 0644 (RW), 0444 (RO) and 0200 (WO)."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1021
msgid ""
"See: https://www.kernel.org/doc/html/latest/filesystems/sysfs.html#attributes"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1023
msgid "**EXECUTE_PERMISSIONS**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1024
msgid ""
"There is no reason for source files to be executable.  The executable bit "
"can be removed safely."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1027
msgid "**EXPORTED_WORLD_WRITABLE**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1028
msgid ""
"Exporting world writable sysfs/debugfs files is usually a bad thing. When "
"done arbitrarily they can introduce serious security bugs. In the past, some "
"of the debugfs vulnerabilities would seemingly allow any local user to write "
"arbitrary values into device registers - a situation from which little good "
"can be expected to emerge."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1034
msgid ""
"See: https://lore.kernel.org/linux-arm-kernel/cover.1296818921.git."
"segoon@openwall.com/"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1036
msgid "**NON_OCTAL_PERMISSIONS**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1037
msgid ""
"Permission bits should use 4 digit octal permissions (like 0700 or 0444). "
"Avoid using any other base like decimal."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1040
msgid "**SYMBOLIC_PERMS**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1041
msgid ""
"Permission bits in the octal form are more readable and easier to understand "
"than their symbolic counterparts because many command-line tools use this "
"notation. Experienced kernel developers have been using these traditional "
"Unix permission bits for decades and so they find it easier to understand "
"the octal notation than the symbolic macros. For example, it is harder to "
"read S_IWUSR|S_IRUGO than 0644, which obscures the developer's intent rather "
"than clarifying it."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1049
msgid ""
"See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-"
"MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1053
msgid "Spacing and Brackets"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1055
msgid "**ASSIGNMENT_CONTINUATIONS**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1056
msgid ""
"Assignment operators should not be written at the start of a line but should "
"follow the operand at the previous line."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1059
msgid "**BRACES**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1060
msgid ""
"The placement of braces is stylistically incorrect. The preferred way is to "
"put the opening brace last on the line, and put the closing brace first::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1068
msgid ""
"This applies for all non-functional blocks. However, there is one special "
"case, namely functions: they have the opening brace at the beginning of the "
"next line, thus::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1077
#: ../../../dev-tools/checkpatch.rst:1108
#: ../../../dev-tools/checkpatch.rst:1121
#: ../../../dev-tools/checkpatch.rst:1185
msgid ""
"See: https://www.kernel.org/doc/html/latest/process/coding-style."
"html#placing-braces-and-spaces"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1079
msgid "**BRACKET_SPACE**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1080
msgid ""
"Whitespace before opening bracket '[' is prohibited. There are some "
"exceptions:"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1083
msgid "With a type on the left::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1087
msgid "At the beginning of a line for slice initialisers::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1091
msgid "Inside a curly brace::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1095
msgid "**CONCATENATED_STRING**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1096
msgid "Concatenated elements should have a space in between. Example::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1105
msgid "**ELSE_AFTER_BRACE**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1106
msgid "`else {` should follow the closing block `}` on the same line."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1110
msgid "**LINE_SPACING**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1111
msgid ""
"Vertical space is wasted given the limited number of lines an editor window "
"can display when multiple blank lines are used."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1114
#: ../../../dev-tools/checkpatch.rst:1133
#: ../../../dev-tools/checkpatch.rst:1138
#: ../../../dev-tools/checkpatch.rst:1145
msgid ""
"See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1116
msgid "**OPEN_BRACE**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1117
msgid ""
"The opening brace should be following the function definitions on the next "
"line.  For any non-functional block it should be on the same line as the "
"last construct."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1123
msgid "**POINTER_LOCATION**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1124
msgid ""
"When using pointer data or a function that returns a pointer type, the "
"preferred use of * is adjacent to the data name or function name and not "
"adjacent to the type name. Examples::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1135
msgid "**SPACING**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1136
msgid ""
"Whitespace style used in the kernel sources is described in kernel docs."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1140
msgid "**TRAILING_WHITESPACE**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1141
msgid ""
"Trailing whitespace should always be removed. Some editors highlight the "
"trailing whitespace and cause visual distractions when editing files."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1147
msgid "**UNNECESSARY_PARENTHESES**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1148
msgid "Parentheses are not required in the following cases:"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1150
msgid "Function pointer uses::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1154
#: ../../../dev-tools/checkpatch.rst:1163
#: ../../../dev-tools/checkpatch.rst:1173
msgid "could be::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1158
msgid "Comparisons in if::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1168
msgid "addressof/dereference single Lvalues::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1178
msgid "**WHILE_AFTER_BRACE**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1179
msgid "while should follow the closing bracket on the same line::"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1189
msgid "Others"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1191
msgid "**CONFIG_DESCRIPTION**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1192
msgid "Kconfig symbols should have a help text which fully describes it."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1195
msgid "**CORRUPTED_PATCH**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1196
msgid ""
"The patch seems to be corrupted or lines are wrapped. Please regenerate the "
"patch file before sending it to the maintainer."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1199
msgid "**CVS_KEYWORD**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1200
msgid ""
"Since linux moved to git, the CVS markers are no longer used. So, CVS style "
"keywords ($Id$, $Revision$, $Log$) should not be added."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1204
msgid "**DEFAULT_NO_BREAK**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1205
msgid ""
"switch default case is sometimes written as \"default:;\".  This can cause "
"new cases added below default to be defective."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1208
msgid ""
"A \"break;\" should be added after empty default statement to avoid unwanted "
"fallthrough."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1211
msgid "**DOS_LINE_ENDINGS**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1212
msgid ""
"For DOS-formatted patches, there are extra ^M symbols at the end of the "
"line.  These should be removed."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1215
msgid "**DT_SCHEMA_BINDING_PATCH**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1216
msgid ""
"DT bindings moved to a json-schema based format instead of freeform text."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1219
msgid ""
"See: https://www.kernel.org/doc/html/latest/devicetree/bindings/writing-"
"schema.html"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1221
msgid "**DT_SPLIT_BINDING_PATCH**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1222
msgid ""
"Devicetree bindings should be their own patch.  This is because bindings are "
"logically independent from a driver implementation, they have a different "
"maintainer (even though they often are applied via the same tree), and it "
"makes for a cleaner history in the DT only tree created with git-filter-"
"branch."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1228
msgid ""
"See: https://www.kernel.org/doc/html/latest/devicetree/bindings/submitting-"
"patches.html#i-for-patch-submitters"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1230
msgid "**EMBEDDED_FILENAME**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1231
msgid ""
"Embedding the complete filename path inside the file isn't particularly "
"useful as often the path is moved around and becomes incorrect."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1234
msgid "**FILE_PATH_CHANGES**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1235
msgid ""
"Whenever files are added, moved, or deleted, the MAINTAINERS file patterns "
"can be out of sync or outdated."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1238
msgid "So MAINTAINERS might need updating in these cases."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1240
msgid "**MEMSET**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1241
msgid ""
"The memset use appears to be incorrect.  This may be caused due to badly "
"ordered parameters.  Please recheck the usage."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1244
msgid "**NOT_UNIFIED_DIFF**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1245
msgid ""
"The patch file does not appear to be in unified-diff format.  Please "
"regenerate the patch file before sending it to the maintainer."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1248
msgid "**PRINTF_0XDECIMAL**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1249
msgid "Prefixing 0x with decimal output is defective and should be corrected."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1251
msgid "**SPDX_LICENSE_TAG**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1252
msgid ""
"The source file is missing or has an improper SPDX identifier tag. The Linux "
"kernel requires the precise SPDX identifier in all source files, and it is "
"thoroughly documented in the kernel docs."
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1256
msgid "See: https://www.kernel.org/doc/html/latest/process/license-rules.html"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1258
msgid "**TYPO_SPELLING**"
msgstr ""

#: ../../../dev-tools/checkpatch.rst:1259
msgid "Some words may have been misspelled.  Consider reviewing them."
msgstr ""
