# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../dev-tools/kunit/run_wrapper.rst:5
msgid "Running tests with kunit_tool"
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:7
msgid ""
"We can either run KUnit tests using kunit_tool or can run tests manually, "
"and then use kunit_tool to parse the results. To run tests manually, see: "
"Documentation/dev-tools/kunit/run_manual.rst. As long as we can build the "
"kernel, we can run KUnit."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:12
msgid ""
"kunit_tool is a Python script which configures and builds a kernel, runs "
"tests, and formats the test results."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:15
msgid "Run command:"
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:21
msgid "We should see the following:"
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:29
msgid "We may want to use the following options:"
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:35
msgid "``--timeout`` sets a maximum amount of time for tests to run."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:36
msgid "``--jobs`` sets the number of threads to build the kernel."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:38
msgid ""
"kunit_tool will generate a ``.kunitconfig`` with a default configuration, if "
"no other ``.kunitconfig`` file exists (in the build directory). In addition, "
"it verifies that the generated ``.config`` file contains the ``CONFIG`` "
"options in the ``.kunitconfig``. It is also possible to pass a separate ``."
"kunitconfig`` fragment to kunit_tool. This is useful if we have several "
"different groups of tests we want to run independently, or if we want to use "
"pre-defined test configs for certain subsystems."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:48
msgid ""
"To use a different ``.kunitconfig`` file (such as one provided to test a "
"particular subsystem), pass it as an option:"
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:55
msgid "To view kunit_tool flags (optional command-line arguments), run:"
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:62
msgid "Creating a ``.kunitconfig`` file"
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:64
msgid ""
"If we want to run a specific set of tests (rather than those listed in the "
"KUnit ``defconfig``), we can provide Kconfig options in the ``.kunitconfig`` "
"file. For default .kunitconfig, see: https://git.kernel.org/pub/scm/linux/"
"kernel/git/torvalds/linux.git/tree/tools/testing/kunit/configs/default."
"config. A ``.kunitconfig`` is a ``minconfig`` (a .config generated by "
"running ``make savedefconfig``), used for running a specific set of tests. "
"This file contains the regular Kernel configs with specific test targets. "
"The ``.kunitconfig`` also contains any other config options required by the "
"tests (For example: dependencies for features under tests, configs that "
"enable/disable certain code blocks, arch configs and so on)."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:76
msgid "To create a ``.kunitconfig``, using the KUnit ``defconfig``:"
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:83
msgid "We can then add any other Kconfig options. For example:"
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:89
msgid ""
"kunit_tool ensures that all config options in ``.kunitconfig`` are set in "
"the kernel ``.config`` before running the tests. It warns if we have not "
"included the options dependencies."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:93
msgid ""
"Removing something from the ``.kunitconfig`` will not rebuild the ``.config "
"file``. The configuration is only updated if the ``.kunitconfig`` is not a "
"subset of ``.config``. This means that we can use other tools (For example: "
"``make menuconfig``) to adjust other config options. The build dir needs to "
"be set for ``make menuconfig`` to work, therefore  by default use ``make O=."
"kunit menuconfig``."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:102
msgid "Configuring, building, and running tests"
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:104
msgid ""
"If we want to make manual changes to the KUnit build process, we can run "
"part of the KUnit build process independently. When running kunit_tool, from "
"a ``.kunitconfig``, we can generate a ``.config`` by using the ``config`` "
"argument:"
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:113
msgid ""
"To build a KUnit kernel from the current ``.config``, we can use the "
"``build`` argument:"
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:120
msgid ""
"If we already have built UML kernel with built-in KUnit tests, we can run "
"the kernel, and display the test results with the ``exec`` argument:"
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:128
msgid ""
"The ``run`` command discussed in section: **Running tests with kunit_tool**, "
"is equivalent to running the above three commands in sequence."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:132
msgid "Parsing test results"
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:134
msgid ""
"KUnit tests output displays results in TAP (Test Anything Protocol) format. "
"When running tests, kunit_tool parses this output and prints a summary. To "
"see the raw test results in TAP format, we can pass the ``--raw_output`` "
"argument:"
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:143
msgid ""
"If we have KUnit results in the raw TAP format, we can parse them and print "
"the human-readable summary with the ``parse`` command for kunit_tool. This "
"accepts a filename for an argument, or will read from standard input."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:156
msgid "Filtering tests"
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:158
msgid ""
"By passing a bash style glob filter to the ``exec`` or ``run`` commands, we "
"can run a subset of the tests built into a kernel . For example: if we only "
"want to run KUnit resource tests, use:"
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:166
msgid "This uses the standard glob format with wildcard characters."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:171
msgid "Running tests on QEMU"
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:173
msgid ""
"kunit_tool supports running tests on  qemu as well as via UML. To run tests "
"on qemu, by default it requires two flags:"
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:176
msgid ""
"``--arch``: Selects a configs collection (Kconfig, qemu config options and "
"so on), that allow KUnit tests to be run on the specified architecture in a "
"minimal way. The architecture argument is same as the option name passed to "
"the ``ARCH`` variable used by Kbuild. Not all architectures currently "
"support this flag, but we can use ``--qemu_config`` to handle it. If ``um`` "
"is passed (or this flag is ignored), the tests will run via UML. Non-UML "
"architectures, for example: i386, x86_64, arm and so on; run on qemu."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:185
msgid "``--arch help`` lists all valid ``--arch`` values."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:187
msgid ""
"``--cross_compile``: Specifies the Kbuild toolchain. It passes the same "
"argument as passed to the ``CROSS_COMPILE`` variable used by Kbuild. As a "
"reminder, this will be the prefix for the toolchain binaries such as GCC. "
"For example:"
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:192
msgid ""
"``sparc64-linux-gnu`` if we have the sparc toolchain installed on our system."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:195
msgid ""
"``$HOME/toolchains/microblaze/gcc-9.2.0-nolibc/microblaze-linux/bin/"
"microblaze-linux`` if we have downloaded the microblaze toolchain from the 0-"
"day website to a directory in our home directory called toolchains."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:199
msgid ""
"This means that for most architectures, running under qemu is as simple as:"
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:205
msgid ""
"When cross-compiling, we'll likely need to specify a different toolchain, "
"for example:"
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:214
msgid ""
"If we want to run KUnit tests on an architecture not supported by the ``--"
"arch`` flag, or want to run KUnit tests on qemu using a non-default "
"configuration; then we can write our own``QemuConfig``. These "
"``QemuConfigs`` are written in Python. They have an import line ``from.."
"qemu_config import QemuArchParams`` at the top of the file. The file must "
"contain a variable called ``QEMU_ARCH`` that has an instance of "
"``QemuArchParams`` assigned to it. See example in: ``tools/testing/kunit/"
"qemu_configs/x86_64.py``."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:223
msgid ""
"Once we have a ``QemuConfig``, we can pass it into kunit_tool, using the ``--"
"qemu_config`` flag. When used, this flag replaces the ``--arch`` flag. For "
"example: using ``tools/testing/kunit/qemu_configs/x86_64.py``, the "
"invocation appear as"
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:237
msgid "Running command-line arguments"
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:239
msgid ""
"kunit_tool has a number of other command-line arguments which can be useful "
"for our test environment. Below are the most commonly used command line "
"arguments:"
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:243
msgid ""
"``--help``: Lists all available options. To list common options, place ``--"
"help`` before the command. To list options specific to that command, place "
"``--help`` after the command."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:247
msgid ""
"Different commands (``config``, ``build``, ``run``, etc) have different "
"supported options."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:249
msgid ""
"``--build_dir``: Specifies kunit_tool build directory. It includes the ``."
"kunitconfig``, ``.config`` files and compiled kernel."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:252
msgid ""
"``--make_options``: Specifies additional options to pass to make, when "
"compiling a kernel (using ``build`` or ``run`` commands). For example: to "
"enable compiler warnings, we can pass ``--make_options W=1``."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:256
msgid ""
"``--alltests``: Enable a predefined set of options in order to build as many "
"tests as possible."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:259
msgid ""
"The list of enabled options can be found in ``tools/testing/kunit/configs/"
"all_tests.config``."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:262
msgid ""
"If you only want to enable all tests with otherwise satisfied dependencies, "
"instead add ``CONFIG_KUNIT_ALL_TESTS=y`` to your ``.kunitconfig``."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:266
msgid ""
"``--kunitconfig``: Specifies the path or the directory of the ``."
"kunitconfig`` file. For example:"
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:269
msgid "``lib/kunit/.kunitconfig`` can be the path of the file."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:271
msgid "``lib/kunit`` can be the directory in which the file is located."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:273
msgid ""
"This file is used to build and run with a predefined set of tests and their "
"dependencies. For example, to run tests for a given subsystem."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:276
msgid ""
"``--kconfig_add``: Specifies additional configuration options to be appended "
"to the ``.kunitconfig`` file. For example:"
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:283
msgid ""
"``--arch``: Runs tests on the specified architecture. The architecture "
"argument is same as the Kbuild ARCH environment variable. For example, i386, "
"x86_64, arm, um, etc. Non-UML architectures run on qemu. Default is `um`."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:288
msgid ""
"``--cross_compile``: Specifies the Kbuild toolchain. It passes the same "
"argument as passed to the ``CROSS_COMPILE`` variable used by Kbuild. This "
"will be the prefix for the toolchain binaries such as GCC. For example:"
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:293
msgid ""
"``sparc64-linux-gnu-`` if we have the sparc toolchain installed on our "
"system."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:296
msgid ""
"``$HOME/toolchains/microblaze/gcc-9.2.0-nolibc/microblaze-linux/bin/"
"microblaze-linux`` if we have downloaded the microblaze toolchain from the 0-"
"day website to a specified path in our home directory called toolchains."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:300
msgid ""
"``--qemu_config``: Specifies the path to a file containing a custom qemu "
"architecture definition. This should be a python file containing a "
"`QemuArchParams` object."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:304
msgid ""
"``--qemu_args``: Specifies additional qemu arguments, for example, ``-smp "
"8``."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:306
msgid ""
"``--jobs``: Specifies the number of jobs (commands) to run simultaneously. "
"By default, this is set to the number of cores on your system."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:309
msgid ""
"``--timeout``: Specifies the maximum number of seconds allowed for all tests "
"to run. This does not include the time taken to build the tests."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:312
msgid ""
"``--kernel_args``: Specifies additional kernel command-line arguments. May "
"be repeated."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:314
msgid ""
"``--run_isolated``: If set, boots the kernel for each individual suite/test. "
"This is useful for debugging a non-hermetic test, one that might pass/fail "
"based on what ran before it."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:318
msgid ""
"``--raw_output``: If set, generates unformatted output from kernel. Possible "
"options are:"
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:320
msgid "``all``: To view the full kernel output, use ``--raw_output=all``."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:322
msgid ""
"``kunit``: This is the default option and filters to KUnit output. Use ``--"
"raw_output`` or ``--raw_output=kunit``."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:324
msgid ""
"``--json``: If set, stores the test results in a JSON format and prints to "
"`stdout` or saves to a file if a filename is specified."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:327
msgid ""
"``--filter``: Specifies filters on test attributes, for example, ``speed!"
"=slow``. Multiple filters can be used by wrapping input in quotes and "
"separating filters by commas. Example: ``--filter \"speed>slow, "
"module=example\"``."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:331
msgid ""
"``--filter_action``: If set to ``skip``, filtered tests will be shown as "
"skipped in the output rather than showing no output."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:334
msgid "``--list_tests``: If set, lists all tests that will be run."
msgstr ""

#: ../../../dev-tools/kunit/run_wrapper.rst:336
msgid ""
"``--list_tests_attr``: If set, lists all tests that will be run and all of "
"their attributes."
msgstr ""
