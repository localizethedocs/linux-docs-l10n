# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../userspace-api/vduse.rst:3
msgid "VDUSE - \"vDPA Device in Userspace\""
msgstr ""

#: ../../../userspace-api/vduse.rst:5
msgid ""
"vDPA (virtio data path acceleration) device is a device that uses a datapath "
"which complies with the virtio specifications with vendor specific control "
"path. vDPA devices can be both physically located on the hardware or "
"emulated by software. VDUSE is a framework that makes it possible to "
"implement software-emulated vDPA devices in userspace. And to make the "
"device emulation more secure, the emulated vDPA device's control path is "
"handled in the kernel and only the data path is implemented in the userspace."
msgstr ""

#: ../../../userspace-api/vduse.rst:14
msgid ""
"Note that only virtio block device is supported by VDUSE framework now, "
"which can reduce security risks when the userspace process that implements "
"the data path is run by an unprivileged user. The support for other device "
"types can be added after the security issue of corresponding device driver "
"is clarified or fixed in the future."
msgstr ""

#: ../../../userspace-api/vduse.rst:21
msgid "Create/Destroy VDUSE devices"
msgstr ""

#: ../../../userspace-api/vduse.rst:23
msgid "VDUSE devices are created as follows:"
msgstr ""

#: ../../../userspace-api/vduse.rst:25
msgid ""
"Create a new VDUSE instance with ioctl(VDUSE_CREATE_DEV) on /dev/vduse/"
"control."
msgstr ""

#: ../../../userspace-api/vduse.rst:28
msgid "Setup each virtqueue with ioctl(VDUSE_VQ_SETUP) on /dev/vduse/$NAME."
msgstr ""

#: ../../../userspace-api/vduse.rst:30
msgid ""
"Begin processing VDUSE messages from /dev/vduse/$NAME. The first messages "
"will arrive while attaching the VDUSE instance to vDPA bus."
msgstr ""

#: ../../../userspace-api/vduse.rst:33
msgid ""
"Send the VDPA_CMD_DEV_NEW netlink message to attach the VDUSE instance to "
"vDPA bus."
msgstr ""

#: ../../../userspace-api/vduse.rst:36
msgid "VDUSE devices are destroyed as follows:"
msgstr ""

#: ../../../userspace-api/vduse.rst:38
msgid ""
"Send the VDPA_CMD_DEV_DEL netlink message to detach the VDUSE instance from "
"vDPA bus."
msgstr ""

#: ../../../userspace-api/vduse.rst:41
msgid "Close the file descriptor referring to /dev/vduse/$NAME."
msgstr ""

#: ../../../userspace-api/vduse.rst:43
msgid ""
"Destroy the VDUSE instance with ioctl(VDUSE_DESTROY_DEV) on /dev/vduse/"
"control."
msgstr ""

#: ../../../userspace-api/vduse.rst:46
msgid ""
"The netlink messages can be sent via vdpa tool in iproute2 or use the below "
"sample codes:"
msgstr ""

#: ../../../userspace-api/vduse.rst:96
msgid "How VDUSE works"
msgstr ""

#: ../../../userspace-api/vduse.rst:98
msgid ""
"As mentioned above, a VDUSE device is created by ioctl(VDUSE_CREATE_DEV) on /"
"dev/vduse/control. With this ioctl, userspace can specify some basic "
"configuration such as device name (uniquely identify a VDUSE device), virtio "
"features, virtio configuration space, the number of virtqueues and so on for "
"this emulated device. Then a char device interface (/dev/vduse/$NAME) is "
"exported to userspace for device emulation. Userspace can use the "
"VDUSE_VQ_SETUP ioctl on /dev/vduse/$NAME to add per-virtqueue configuration "
"such as the max size of virtqueue to the device."
msgstr ""

#: ../../../userspace-api/vduse.rst:106
msgid ""
"After the initialization, the VDUSE device can be attached to vDPA bus via "
"the VDPA_CMD_DEV_NEW netlink message. Userspace needs to read()/write() on /"
"dev/vduse/$NAME to receive/reply some control messages from/to VDUSE kernel "
"module as follows:"
msgstr ""

#: ../../../userspace-api/vduse.rst:138
msgid "There are now three types of messages introduced by VDUSE framework:"
msgstr ""

#: ../../../userspace-api/vduse.rst:140
msgid ""
"VDUSE_GET_VQ_STATE: Get the state for virtqueue, userspace should return "
"avail index for split virtqueue or the device/driver ring wrap counters and "
"the avail and used index for packed virtqueue."
msgstr ""

#: ../../../userspace-api/vduse.rst:144
msgid ""
"VDUSE_SET_STATUS: Set the device status, userspace should follow the virtio "
"spec: https://docs.oasis-open.org/virtio/virtio/v1.1/virtio-v1.1.html to "
"process this message. For example, fail to set the FEATURES_OK device status "
"bit if the device can not accept the negotiated virtio features get from the "
"VDUSE_DEV_GET_FEATURES ioctl."
msgstr ""

#: ../../../userspace-api/vduse.rst:150
msgid ""
"VDUSE_UPDATE_IOTLB: Notify userspace to update the memory mapping for "
"specified IOVA range, userspace should firstly remove the old mapping, then "
"setup the new mapping via the VDUSE_IOTLB_GET_FD ioctl."
msgstr ""

#: ../../../userspace-api/vduse.rst:154
msgid ""
"After DRIVER_OK status bit is set via the VDUSE_SET_STATUS message, "
"userspace is able to start the dataplane processing as follows:"
msgstr ""

#: ../../../userspace-api/vduse.rst:157
msgid ""
"Get the specified virtqueue's information with the VDUSE_VQ_GET_INFO ioctl, "
"including the size, the IOVAs of descriptor table, available ring and used "
"ring, the state and the ready status."
msgstr ""

#: ../../../userspace-api/vduse.rst:161
msgid ""
"Pass the above IOVAs to the VDUSE_IOTLB_GET_FD ioctl so that those IOVA "
"regions can be mapped into userspace. Some sample codes is shown below:"
msgstr ""

#: ../../../userspace-api/vduse.rst:221
msgid ""
"Setup the kick eventfd for the specified virtqueues with the "
"VDUSE_VQ_SETUP_KICKFD ioctl. The kick eventfd is used by VDUSE kernel module "
"to notify userspace to consume the available ring. This is optional since "
"userspace can choose to poll the available ring instead."
msgstr ""

#: ../../../userspace-api/vduse.rst:226
msgid ""
"Listen to the kick eventfd (optional) and consume the available ring. The "
"buffer described by the descriptors in the descriptor table should be also "
"mapped into userspace via the VDUSE_IOTLB_GET_FD ioctl before accessing."
msgstr ""

#: ../../../userspace-api/vduse.rst:230
msgid ""
"Inject an interrupt for specific virtqueue with the VDUSE_INJECT_VQ_IRQ "
"ioctl after the used ring is filled."
msgstr ""

#: ../../../userspace-api/vduse.rst:233
msgid "For more details on the uAPI, please see include/uapi/linux/vduse.h."
msgstr ""
