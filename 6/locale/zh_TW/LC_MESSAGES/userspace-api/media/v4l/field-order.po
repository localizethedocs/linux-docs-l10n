# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../userspace-api/media/v4l/field-order.rst:7
msgid "Field Order"
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:9
msgid ""
"We have to distinguish between progressive and interlaced video. Progressive "
"video transmits all lines of a video image sequentially. Interlaced video "
"divides an image into two fields, containing only the odd and even lines of "
"the image, respectively. Alternating the so called odd and even field are "
"transmitted, and due to a small delay between fields a cathode ray TV "
"displays the lines interleaved, yielding the original frame. This curious "
"technique was invented because at refresh rates similar to film the image "
"would fade out too quickly. Transmitting fields reduces the flicker without "
"the necessity of doubling the frame rate and with it the bandwidth required "
"for each channel."
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:20
msgid ""
"It is important to understand a video camera does not expose one frame at a "
"time, merely transmitting the frames separated into fields. The fields are "
"in fact captured at two different instances in time. An object on screen may "
"well move between one field and the next. For applications analysing motion "
"it is of paramount importance to recognize which field of a frame is older, "
"the *temporal order*."
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:27
msgid ""
"When the driver provides or accepts images field by field rather than "
"interleaved, it is also important applications understand how the fields "
"combine to frames. We distinguish between top (aka odd) and bottom (aka "
"even) fields, the *spatial order*: The first line of the top field is the "
"first line of an interlaced frame, the first line of the bottom field is the "
"second line of that frame."
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:34
msgid ""
"However because fields were captured one after the other, arguing whether a "
"frame commences with the top or bottom field is pointless. Any two "
"successive top and bottom, or bottom and top fields yield a valid frame. "
"Only when the source was progressive to begin with, e. g. when transferring "
"film to video, two fields may come from the same frame, creating a natural "
"order."
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:41
msgid ""
"Counter to intuition the top field is not necessarily the older field. "
"Whether the older field contains the top or bottom lines is a convention "
"determined by the video standard. Hence the distinction between temporal and "
"spatial order of fields. The diagrams below should make this clearer."
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:47
msgid ""
"In V4L it is assumed that all video cameras transmit fields on the media bus "
"in the same order they were captured, so if the top field was captured first "
"(is the older field), the top field is also transmitted first on the bus."
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:52
msgid ""
"All video capture and output devices must report the current field order. "
"Some drivers may permit the selection of a different order, to this end "
"applications initialize the ``field`` field of struct :c:type:"
"`v4l2_pix_format` before calling the :ref:`VIDIOC_S_FMT <VIDIOC_G_FMT>` "
"ioctl. If this is not desired it should have the value ``V4L2_FIELD_ANY`` "
"(0)."
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:61
msgid "enum v4l2_field"
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:74
msgid "``V4L2_FIELD_ANY``"
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:75
msgid "0"
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:76
msgid ""
"Applications request this field order when any field format is acceptable. "
"Drivers choose depending on hardware capabilities or e.g. the requested "
"image size, and return the actual field order. Drivers must never return "
"``V4L2_FIELD_ANY``. If multiple field orders are possible the driver must "
"choose one of the possible field orders during :ref:`VIDIOC_S_FMT "
"<VIDIOC_G_FMT>` or :ref:`VIDIOC_TRY_FMT <VIDIOC_G_FMT>`. struct :c:type:"
"`v4l2_buffer` ``field`` can never be ``V4L2_FIELD_ANY``."
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:86
msgid "``V4L2_FIELD_NONE``"
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:87
msgid "1"
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:88
msgid ""
"Images are in progressive (frame-based) format, not interlaced (field-based)."
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:90
msgid "``V4L2_FIELD_TOP``"
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:91
msgid "2"
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:92
msgid "Images consist of the top (aka odd) field only."
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:93
msgid "``V4L2_FIELD_BOTTOM``"
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:94
msgid "3"
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:95
msgid ""
"Images consist of the bottom (aka even) field only. Applications may wish to "
"prevent a device from capturing interlaced images because they will have "
"\"comb\" or \"feathering\" artefacts around moving objects."
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:99
msgid "``V4L2_FIELD_INTERLACED``"
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:100
msgid "4"
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:101
msgid ""
"Images contain both fields, interleaved line by line. The temporal order of "
"the fields (whether the top or bottom field is older) depends on the current "
"video standard. In M/NTSC the bottom field is the older field. In all other "
"standards the top field is the older field."
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:106
msgid "``V4L2_FIELD_SEQ_TB``"
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:107
msgid "5"
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:108
msgid ""
"Images contain both fields, the top field lines are stored first in memory, "
"immediately followed by the bottom field lines. Fields are always stored in "
"temporal order, the older one first in memory. Image sizes refer to the "
"frame, not fields."
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:112
msgid "``V4L2_FIELD_SEQ_BT``"
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:113
msgid "6"
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:114
msgid ""
"Images contain both fields, the bottom field lines are stored first in "
"memory, immediately followed by the top field lines. Fields are always "
"stored in temporal order, the older one first in memory. Image sizes refer "
"to the frame, not fields."
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:118
msgid "``V4L2_FIELD_ALTERNATE``"
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:119
msgid "7"
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:120
msgid ""
"The two fields of a frame are passed in separate buffers, in temporal order, "
"i. e. the older one first. To indicate the field parity (whether the current "
"field is a top or bottom field) the driver or application, depending on data "
"direction, must set struct :c:type:`v4l2_buffer` ``field`` to "
"``V4L2_FIELD_TOP`` or ``V4L2_FIELD_BOTTOM``. Any two successive fields pair "
"to build a frame. If fields are successive, without any dropped fields "
"between them (fields can drop individually), can be determined from the "
"struct :c:type:`v4l2_buffer` ``sequence`` field. This format cannot be "
"selected when using the read/write I/O method since there is no way to "
"communicate if a field was a top or bottom field."
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:133
msgid "``V4L2_FIELD_INTERLACED_TB``"
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:134
msgid "8"
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:135
msgid ""
"Images contain both fields, interleaved line by line, top field first. The "
"top field is the older field."
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:137
msgid "``V4L2_FIELD_INTERLACED_BT``"
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:138
msgid "9"
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:139
msgid ""
"Images contain both fields, interleaved line by line, top field first. The "
"bottom field is the older field."
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:147
#: ../../../userspace-api/media/v4l/field-order.rst:153
msgid "Field Order, Top Field First Transmitted"
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:149
msgid "fieldseq_tb.svg"
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:159
#: ../../../userspace-api/media/v4l/field-order.rst:165
msgid "Field Order, Bottom Field First Transmitted"
msgstr ""

#: ../../../userspace-api/media/v4l/field-order.rst:161
msgid "fieldseq_bt.svg"
msgstr ""
