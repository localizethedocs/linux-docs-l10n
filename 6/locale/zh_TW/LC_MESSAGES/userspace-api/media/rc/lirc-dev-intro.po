# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-21 08:55+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:7
msgid "Introduction"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:9
msgid ""
"LIRC stands for Linux Infrared Remote Control. The LIRC device interface is "
"a bi-directional interface for transporting raw IR and decoded scancodes "
"data between userspace and kernelspace. Fundamentally, it is just a chardev "
"(/dev/lircX, for X = 0, 1, 2, ...), with a number of standard struct "
"file_operations defined on it. With respect to transporting raw IR and "
"decoded scancodes to and fro, the essential fops are read, write and ioctl."
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:16
msgid ""
"It is also possible to attach a BPF program to a LIRC device for decoding "
"raw IR into scancodes."
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:19
msgid "Example dmesg output upon a driver registering w/LIRC:"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:26
msgid "What you should see for a chardev:"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:33
msgid ""
"Note that the package `v4l-utils <https://git.linuxtv.org/v4l-utils.git/>`_ "
"contains tools for working with LIRC devices:"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:36
msgid ""
"ir-ctl: can receive raw IR and transmit IR, as well as query LIRC device "
"features."
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:39
msgid ""
"ir-keytable: can load keymaps; allows you to set IR kernel protocols; load "
"BPF IR decoders and test IR decoding. Some BPF IR decoders are also provided."
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:47
msgid "LIRC modes"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:49
msgid ""
"LIRC supports some modes of receiving and sending IR codes, as shown on the "
"following table."
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:56
msgid "``LIRC_MODE_SCANCODE``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:58
msgid "This mode is for both sending and receiving IR."
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:60
msgid ""
"For transmitting (aka sending), create a struct lirc_scancode with the "
"desired scancode set in the ``scancode`` member, :c:type:`rc_proto` set to "
"the :ref:`IR protocol <Remote_controllers_Protocols>`, and all other members "
"set to 0. Write this struct to the lirc device."
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:65
msgid ""
"For receiving, you read struct lirc_scancode from the LIRC device. The "
"``scancode`` field is set to the received scancode and the :ref:`IR protocol "
"<Remote_controllers_Protocols>` is set in :c:type:`rc_proto`. If the "
"scancode maps to a valid key code, this is set in the ``keycode`` field, "
"else it is set to ``KEY_RESERVED``."
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:71
msgid ""
"The ``flags`` can have ``LIRC_SCANCODE_FLAG_TOGGLE`` set if the toggle bit "
"is set in protocols that support it (e.g. rc-5 and rc-6), or "
"``LIRC_SCANCODE_FLAG_REPEAT`` for when a repeat is received for protocols "
"that support it (e.g. nec)."
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:76
msgid ""
"In the Sanyo and NEC protocol, if you hold a button on remote, rather than "
"repeating the entire scancode, the remote sends a shorter message with no "
"scancode, which just means button is held, a \"repeat\". When this is "
"received, the ``LIRC_SCANCODE_FLAG_REPEAT`` is set and the scancode and "
"keycode is repeated."
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:82
msgid ""
"With nec, there is no way to distinguish \"button hold\" from \"repeatedly "
"pressing the same button\". The rc-5 and rc-6 protocols have a toggle bit. "
"When a button is released and pressed again, the toggle bit is inverted. If "
"the toggle bit is set, the ``LIRC_SCANCODE_FLAG_TOGGLE`` is set."
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:87
msgid ""
"The ``timestamp`` field is filled with the time nanoseconds (in "
"``CLOCK_MONOTONIC``) when the scancode was decoded."
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:92
msgid "``LIRC_MODE_MODE2``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:94
msgid ""
"The driver returns a sequence of pulse and space codes to userspace, as a "
"series of u32 values."
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:97
msgid "This mode is used only for IR receive."
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:99
msgid ""
"The upper 8 bits determine the packet type, and the lower 24 bits the "
"payload. Use ``LIRC_VALUE()`` macro to get the payload, and the macro "
"``LIRC_MODE2()`` will give you the type, which is one of:"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:104
msgid "``LIRC_MODE2_PULSE``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:106
msgid "Signifies the presence of IR in microseconds, also known as *flash*."
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:108
msgid "``LIRC_MODE2_SPACE``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:110
msgid "Signifies absence of IR in microseconds, also known as *gap*."
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:112
msgid "``LIRC_MODE2_FREQUENCY``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:114
msgid ""
"If measurement of the carrier frequency was enabled with :ref:"
"`lirc_set_measure_carrier_mode` then this packet gives you the carrier "
"frequency in Hertz."
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:118
msgid "``LIRC_MODE2_TIMEOUT``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:120
msgid ""
"When the timeout set with :ref:`lirc_set_rec_timeout` expires due to no IR "
"being detected, this packet will be sent, with the number of microseconds "
"with no IR."
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:124
msgid "``LIRC_MODE2_OVERFLOW``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:126
msgid ""
"Signifies that the IR receiver encounter an overflow, and some IR is "
"missing. The IR data after this should be correct again. The actual value is "
"not important, but this is set to 0xffffff by the kernel for compatibility "
"with lircd."
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:133
msgid "``LIRC_MODE_PULSE``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:135
msgid ""
"In pulse mode, a sequence of pulse/space integer values are written to the "
"lirc device using :ref:`lirc-write`."
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:138
msgid ""
"The values are alternating pulse and space lengths, in microseconds. The "
"first and last entry must be a pulse, so there must be an odd number of "
"entries."
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:142
msgid "This mode is used only for IR send."
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:146
msgid "Data types used by LIRC_MODE_SCANCODE"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:147
msgid "decoded scancode with protocol for use with LIRC_MODE_SCANCODE"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:151
msgid "**Definition**::"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:161
msgid "**Members**"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:150
msgid "``timestamp``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:151
msgid "Timestamp in nanoseconds using CLOCK_MONOTONIC when IR was decoded."
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:152
msgid "``flags``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:153
msgid ""
"should be 0 for transmit. When receiving scancodes, "
"LIRC_SCANCODE_FLAG_TOGGLE or LIRC_SCANCODE_FLAG_REPEAT can be set depending "
"on the protocol"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:155
msgid "``rc_proto``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:156
msgid "see enum rc_proto"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:156
msgid "``keycode``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:157
msgid "the translated keycode. Set to 0 for transmit."
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:157
msgid "``scancode``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:158
msgid "the scancode received or to be sent"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:173
msgid "the Remote Controller protocol"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:177
msgid "**Constants**"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:179
msgid "``RC_PROTO_UNKNOWN``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:180
msgid "Protocol not known"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:182
msgid "``RC_PROTO_OTHER``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:183
msgid "Protocol known but proprietary"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:185
msgid "``RC_PROTO_RC5``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:186
msgid "Philips RC5 protocol"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:188
msgid "``RC_PROTO_RC5X_20``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:189
msgid "Philips RC5x 20 bit protocol"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:191
msgid "``RC_PROTO_RC5_SZ``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:192
msgid "StreamZap variant of RC5"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:194
msgid "``RC_PROTO_JVC``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:195
msgid "JVC protocol"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:197
msgid "``RC_PROTO_SONY12``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:198
msgid "Sony 12 bit protocol"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:200
msgid "``RC_PROTO_SONY15``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:201
msgid "Sony 15 bit protocol"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:203
msgid "``RC_PROTO_SONY20``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:204
msgid "Sony 20 bit protocol"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:206
msgid "``RC_PROTO_NEC``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:207
msgid "NEC protocol"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:209
msgid "``RC_PROTO_NECX``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:210
msgid "Extended NEC protocol"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:212
msgid "``RC_PROTO_NEC32``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:213
msgid "NEC 32 bit protocol"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:215
msgid "``RC_PROTO_SANYO``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:216
msgid "Sanyo protocol"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:218
msgid "``RC_PROTO_MCIR2_KBD``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:219
msgid "RC6-ish MCE keyboard"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:221
msgid "``RC_PROTO_MCIR2_MSE``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:222
msgid "RC6-ish MCE mouse"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:224
msgid "``RC_PROTO_RC6_0``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:225
msgid "Philips RC6-0-16 protocol"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:227
msgid "``RC_PROTO_RC6_6A_20``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:228
msgid "Philips RC6-6A-20 protocol"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:230
msgid "``RC_PROTO_RC6_6A_24``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:231
msgid "Philips RC6-6A-24 protocol"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:233
msgid "``RC_PROTO_RC6_6A_32``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:234
msgid "Philips RC6-6A-32 protocol"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:236
msgid "``RC_PROTO_RC6_MCE``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:237
msgid "MCE (Philips RC6-6A-32 subtype) protocol"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:239
msgid "``RC_PROTO_SHARP``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:240
msgid "Sharp protocol"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:242
msgid "``RC_PROTO_XMP``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:243
msgid "XMP protocol"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:245
msgid "``RC_PROTO_CEC``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:246
msgid "CEC protocol"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:248
msgid "``RC_PROTO_IMON``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:249
msgid "iMon Pad protocol"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:251
msgid "``RC_PROTO_RCMM12``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:252
msgid "RC-MM protocol 12 bits"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:254
msgid "``RC_PROTO_RCMM24``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:255
msgid "RC-MM protocol 24 bits"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:257
msgid "``RC_PROTO_RCMM32``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:258
msgid "RC-MM protocol 32 bits"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:260
msgid "``RC_PROTO_XBOX_DVD``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:261
msgid "Xbox DVD Movie Playback Kit protocol"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:263
msgid "``RC_PROTO_MAX``"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro:148:
#: include/uapi/linux/lirc.h:264
msgid "Maximum value of enum rc_proto"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:153
msgid "BPF based IR decoder"
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:155
msgid ""
"The kernel has support for decoding the most common :ref:`IR protocols "
"<Remote_controllers_Protocols>`, but there are many protocols which are not "
"supported. To support these, it is possible to load an BPF program which "
"does the decoding. This can only be done on LIRC devices which support "
"reading raw IR."
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:161
msgid ""
"First, using the `bpf(2)`_ syscall with the ``BPF_LOAD_PROG`` argument, "
"program must be loaded of type ``BPF_PROG_TYPE_LIRC_MODE2``. Once attached "
"to the LIRC device, this program will be called for each pulse, space or "
"timeout event on the LIRC device. The context for the BPF program is a "
"pointer to a unsigned int, which is a :ref:`LIRC_MODE_MODE2 <lirc-mode-"
"mode2>` value. When the program has decoded the scancode, it can be "
"submitted using the BPF functions ``bpf_rc_keydown()`` or "
"``bpf_rc_repeat()``. Mouse or pointer movements can be reported using "
"``bpf_rc_pointer_rel()``."
msgstr ""

#: ../../../userspace-api/media/rc/lirc-dev-intro.rst:170
msgid ""
"Once you have the file descriptor for the ``BPF_PROG_TYPE_LIRC_MODE2`` BPF "
"program, it can be attached to the LIRC device using the `bpf(2)`_ syscall. "
"The target must be the file descriptor for the LIRC device, and the attach "
"type must be ``BPF_LIRC_MODE2``. No more than 64 BPF programs can be "
"attached to a single LIRC device at a time."
msgstr ""
