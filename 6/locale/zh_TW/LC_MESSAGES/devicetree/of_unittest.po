# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../devicetree/of_unittest.rst:5
msgid "Open Firmware Devicetree Unittest"
msgstr ""

#: ../../../devicetree/of_unittest.rst:7
msgid "Author: Gaurav Minocha <gaurav.minocha.os@gmail.com>"
msgstr ""

#: ../../../devicetree/of_unittest.rst:10
msgid "1. Introduction"
msgstr ""

#: ../../../devicetree/of_unittest.rst:12
msgid ""
"This document explains how the test data required for executing OF unittest "
"is attached to the live tree dynamically, independent of the machine's "
"architecture."
msgstr ""

#: ../../../devicetree/of_unittest.rst:16
msgid "It is recommended to read the following documents before moving ahead."
msgstr ""

#: ../../../devicetree/of_unittest.rst:18
msgid "Documentation/devicetree/usage-model.rst"
msgstr ""

#: ../../../devicetree/of_unittest.rst:19
msgid "http://www.devicetree.org/Device_Tree_Usage"
msgstr ""

#: ../../../devicetree/of_unittest.rst:21
msgid ""
"OF Selftest has been designed to test the interface (include/linux/of.h) "
"provided to device driver developers to fetch the device information..etc. "
"from the unflattened device tree data structure. This interface is used by "
"most of the device drivers in various use cases."
msgstr ""

#: ../../../devicetree/of_unittest.rst:28
msgid "2. Verbose Output (EXPECT)"
msgstr ""

#: ../../../devicetree/of_unittest.rst:30
msgid ""
"If unittest detects a problem it will print a warning or error message to "
"the console.  Unittest also triggers warning and error messages from other "
"kernel code as a result of intentionally bad unittest data.  This has led to "
"confusion as to whether the triggered messages are an expected result of a "
"test or whether there is a real problem that is independent of unittest."
msgstr ""

#: ../../../devicetree/of_unittest.rst:36
msgid ""
"'EXPECT \\ : text' (begin) and 'EXPECT / : text' (end) messages have been "
"added to unittest to report that a warning or error is expected.  The begin "
"is printed before triggering the warning or error, and the end is printed "
"after triggering the warning or error."
msgstr ""

#: ../../../devicetree/of_unittest.rst:41
msgid ""
"The EXPECT messages result in very noisy console messages that are difficult "
"to read.  The script scripts/dtc/of_unittest_expect was created to filter "
"this verbosity and highlight mismatches between triggered warnings and "
"errors vs expected warnings and errors.  More information is available from "
"'scripts/dtc/of_unittest_expect --help'."
msgstr ""

#: ../../../devicetree/of_unittest.rst:49
msgid "3. Test-data"
msgstr ""

#: ../../../devicetree/of_unittest.rst:51
msgid ""
"The Device Tree Source file (drivers/of/unittest-data/testcases.dts) "
"contains the test data required for executing the unit tests automated in "
"drivers/of/unittest.c. See the content of the folder::"
msgstr ""

#: ../../../devicetree/of_unittest.rst:57
msgid ""
"for the Device Tree Source Include files (.dtsi) included in testcases.dts."
msgstr ""

#: ../../../devicetree/of_unittest.rst:59
msgid ""
"When the kernel is build with CONFIG_OF_UNITTEST enabled, then the following "
"make rule::"
msgstr ""

#: ../../../devicetree/of_unittest.rst:65
msgid ""
"is used to compile the DT source file (testcases.dts) into a binary blob "
"(testcases.dtb), also referred as flattened DT."
msgstr ""

#: ../../../devicetree/of_unittest.rst:68
msgid ""
"After that, using the following rule the binary blob above is wrapped as an "
"assembly file (testcases.dtb.S)::"
msgstr ""

#: ../../../devicetree/of_unittest.rst:74
msgid ""
"The assembly file is compiled into an object file (testcases.dtb.o), and is "
"linked into the kernel image."
msgstr ""

#: ../../../devicetree/of_unittest.rst:79
msgid "3.1. Adding the test data"
msgstr ""

#: ../../../devicetree/of_unittest.rst:81
msgid "Un-flattened device tree structure:"
msgstr ""

#: ../../../devicetree/of_unittest.rst:83
msgid ""
"Un-flattened device tree consists of connected device_node(s) in form of a "
"tree structure described below::"
msgstr ""

#: ../../../devicetree/of_unittest.rst:95
msgid ""
"Figure 1, describes a generic structure of machine's un-flattened device "
"tree considering only child and sibling pointers. There exists another "
"pointer, ``*parent``, that is used to traverse the tree in the reverse "
"direction. So, at a particular level the child node and all the sibling "
"nodes will have a parent pointer pointing to a common node (e.g. child1, "
"sibling2, sibling3, sibling4's parent points to root node)::"
msgstr ""

#: ../../../devicetree/of_unittest.rst:124
msgid "Figure 1: Generic structure of un-flattened device tree"
msgstr ""

#: ../../../devicetree/of_unittest.rst:127
msgid ""
"Before executing OF unittest, it is required to attach the test data to "
"machine's device tree (if present). So, when selftest_data_add() is called, "
"at first it reads the flattened device tree data linked into the kernel "
"image via the following kernel symbols::"
msgstr ""

#: ../../../devicetree/of_unittest.rst:135
msgid ""
"Secondly, it calls of_fdt_unflatten_tree() to unflatten the flattened blob. "
"And finally, if the machine's device tree (i.e live tree) is present, then "
"it attaches the unflattened test data tree to the live tree, else it "
"attaches itself as a live device tree."
msgstr ""

#: ../../../devicetree/of_unittest.rst:140
msgid ""
"attach_node_and_children() uses of_attach_node() to attach the nodes into "
"the live tree as explained below. To explain the same, the test data tree "
"described in Figure 2 is attached to the live tree described in Figure 1::"
msgstr ""

#: ../../../devicetree/of_unittest.rst:153
msgid "Figure 2: Example test data tree to be attached to live tree."
msgstr ""

#: ../../../devicetree/of_unittest.rst:155
msgid ""
"According to the scenario above, the live tree is already present so it "
"isn't required to attach the root('/') node. All other nodes are attached by "
"calling of_attach_node() on each node."
msgstr ""

#: ../../../devicetree/of_unittest.rst:159
msgid ""
"In the function of_attach_node(), the new node is attached as the child of "
"the given parent in live tree. But, if parent already has a child then the "
"new node replaces the current child and turns it into its sibling. So, when "
"the testcase data node is attached to the live tree above (Figure 1), the "
"final structure is as shown in Figure 3::"
msgstr ""

#: ../../../devicetree/of_unittest.rst:198
msgid "Figure 3: Live device tree structure after attaching the testcase-data."
msgstr ""

#: ../../../devicetree/of_unittest.rst:201
msgid ""
"Astute readers would have noticed that test-child0 node becomes the last "
"sibling compared to the earlier structure (Figure 2). After attaching first "
"test-child0 the test-sibling1 is attached that pushes the child node (i.e. "
"test-child0) to become a sibling and makes itself a child node, as mentioned "
"above."
msgstr ""

#: ../../../devicetree/of_unittest.rst:207
msgid ""
"If a duplicate node is found (i.e. if a node with same full_name property is "
"already present in the live tree), then the node isn't attached rather its "
"properties are updated to the live tree's node by calling the function "
"update_node_properties()."
msgstr ""

#: ../../../devicetree/of_unittest.rst:214
msgid "3.2. Removing the test data"
msgstr ""

#: ../../../devicetree/of_unittest.rst:216
msgid ""
"Once the test case execution is complete, selftest_data_remove is called in "
"order to remove the device nodes attached initially (first the leaf nodes "
"are detached and then moving up the parent nodes are removed, and eventually "
"the whole tree). selftest_data_remove() calls detach_node_and_children() "
"that uses of_detach_node() to detach the nodes from the live device tree."
msgstr ""

#: ../../../devicetree/of_unittest.rst:222
msgid ""
"To detach a node, of_detach_node() either updates the child pointer of given "
"node's parent to its sibling or attaches the previous sibling to the given "
"node's sibling, as appropriate. That is it :)"
msgstr ""
