# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../filesystems/overlayfs.rst:3
msgid ""
"Written by: Neil Brown Please see MAINTAINERS file for where to send "
"questions."
msgstr ""

#: ../../../filesystems/overlayfs.rst:7
msgid "Overlay Filesystem"
msgstr ""

#: ../../../filesystems/overlayfs.rst:9
msgid ""
"This document describes a prototype for a new approach to providing overlay-"
"filesystem functionality in Linux (sometimes referred to as union-"
"filesystems).  An overlay-filesystem tries to present a filesystem which is "
"the result of overlaying one filesystem on top of the other."
msgstr ""

#: ../../../filesystems/overlayfs.rst:17
msgid "Overlay objects"
msgstr ""

#: ../../../filesystems/overlayfs.rst:19
msgid ""
"The overlay filesystem approach is 'hybrid', because the objects that appear "
"in the filesystem do not always appear to belong to that filesystem. In many "
"cases, an object accessed in the union will be indistinguishable from "
"accessing the corresponding object from the original filesystem. This is "
"most obvious from the 'st_dev' field returned by stat(2)."
msgstr ""

#: ../../../filesystems/overlayfs.rst:25
msgid ""
"While directories will report an st_dev from the overlay-filesystem, non-"
"directory objects may report an st_dev from the lower filesystem or upper "
"filesystem that is providing the object.  Similarly st_ino will only be "
"unique when combined with st_dev, and both of these can change over the "
"lifetime of a non-directory object.  Many applications and tools ignore "
"these values and will not be affected."
msgstr ""

#: ../../../filesystems/overlayfs.rst:32
msgid ""
"In the special case of all overlay layers on the same underlying filesystem, "
"all objects will report an st_dev from the overlay filesystem and st_ino "
"from the underlying filesystem.  This will make the overlay mount more "
"compliant with filesystem scanners and overlay objects will be "
"distinguishable from the corresponding objects in the original filesystem."
msgstr ""

#: ../../../filesystems/overlayfs.rst:39
msgid ""
"On 64bit systems, even if all overlay layers are not on the same underlying "
"filesystem, the same compliant behavior could be achieved with the \"xino\" "
"feature.  The \"xino\" feature composes a unique object identifier from the "
"real object st_ino and an underlying fsid number. The \"xino\" feature uses "
"the high inode number bits for fsid, because the underlying filesystems "
"rarely use the high inode number bits.  In case the underlying inode number "
"does overflow into the high xino bits, overlay filesystem will fall back to "
"the non xino behavior for that inode."
msgstr ""

#: ../../../filesystems/overlayfs.rst:48
msgid ""
"The \"xino\" feature can be enabled with the \"-o xino=on\" overlay mount "
"option. If all underlying filesystems support NFS file handles, the value of "
"st_ino for overlay filesystem objects is not only unique, but also "
"persistent over the lifetime of the filesystem.  The \"-o xino=auto\" "
"overlay mount option enables the \"xino\" feature only if the persistent "
"st_ino requirement is met."
msgstr ""

#: ../../../filesystems/overlayfs.rst:54
msgid ""
"The following table summarizes what can be expected in different overlay "
"configurations."
msgstr ""

#: ../../../filesystems/overlayfs.rst:58
msgid "Inode properties"
msgstr ""

#: ../../../filesystems/overlayfs.rst:61
msgid "Configuration"
msgstr ""

#: ../../../filesystems/overlayfs.rst:61
msgid "Persistent st_ino"
msgstr ""

#: ../../../filesystems/overlayfs.rst:61
msgid "Uniform st_dev"
msgstr ""

#: ../../../filesystems/overlayfs.rst:61
msgid "st_ino == d_ino"
msgstr ""

#: ../../../filesystems/overlayfs.rst:61
msgid "d_ino == i_ino [*]"
msgstr ""

#: ../../../filesystems/overlayfs.rst:64
msgid "dir"
msgstr ""

#: ../../../filesystems/overlayfs.rst:64
msgid "!dir"
msgstr ""

#: ../../../filesystems/overlayfs.rst:66
msgid "All layers on same fs"
msgstr ""

#: ../../../filesystems/overlayfs.rst:66 ../../../filesystems/overlayfs.rst:69
#: ../../../filesystems/overlayfs.rst:73 ../../../filesystems/overlayfs.rst:75
msgid "Y"
msgstr ""

#: ../../../filesystems/overlayfs.rst:69
msgid "Layers not on same fs, xino=off"
msgstr ""

#: ../../../filesystems/overlayfs.rst:69 ../../../filesystems/overlayfs.rst:75
msgid "N"
msgstr ""

#: ../../../filesystems/overlayfs.rst:73
msgid "xino=on/auto"
msgstr ""

#: ../../../filesystems/overlayfs.rst:75
msgid "xino=on/auto, ino overflow"
msgstr ""

#: ../../../filesystems/overlayfs.rst:79
msgid ""
"[*] nfsd v3 readdirplus verifies d_ino == i_ino. i_ino is exposed via "
"several /proc files, such as /proc/locks and /proc/self/fdinfo/<fd> of an "
"inotify file descriptor."
msgstr ""

#: ../../../filesystems/overlayfs.rst:84
msgid "Upper and Lower"
msgstr ""

#: ../../../filesystems/overlayfs.rst:86
msgid ""
"An overlay filesystem combines two filesystems - an 'upper' filesystem and a "
"'lower' filesystem.  When a name exists in both filesystems, the object in "
"the 'upper' filesystem is visible while the object in the 'lower' filesystem "
"is either hidden or, in the case of directories, merged with the 'upper' "
"object."
msgstr ""

#: ../../../filesystems/overlayfs.rst:92
msgid ""
"It would be more correct to refer to an upper and lower 'directory tree' "
"rather than 'filesystem' as it is quite possible for both directory trees to "
"be in the same filesystem and there is no requirement that the root of a "
"filesystem be given for either upper or lower."
msgstr ""

#: ../../../filesystems/overlayfs.rst:98
msgid ""
"A wide range of filesystems supported by Linux can be the lower filesystem, "
"but not all filesystems that are mountable by Linux have the features needed "
"for OverlayFS to work.  The lower filesystem does not need to be writable.  "
"The lower filesystem can even be another overlayfs.  The upper filesystem "
"will normally be writable and if it is it must support the creation of "
"trusted.* and/or user.* extended attributes, and must provide valid d_type "
"in readdir responses, so NFS is not suitable."
msgstr ""

#: ../../../filesystems/overlayfs.rst:106
msgid ""
"A read-only overlay of two read-only filesystems may use any filesystem type."
msgstr ""

#: ../../../filesystems/overlayfs.rst:110
msgid "Directories"
msgstr ""

#: ../../../filesystems/overlayfs.rst:112
msgid ""
"Overlaying mainly involves directories.  If a given name appears in both "
"upper and lower filesystems and refers to a non-directory in either, then "
"the lower object is hidden - the name refers only to the upper object."
msgstr ""

#: ../../../filesystems/overlayfs.rst:117
msgid ""
"Where both upper and lower objects are directories, a merged directory is "
"formed."
msgstr ""

#: ../../../filesystems/overlayfs.rst:120
msgid ""
"At mount time, the two directories given as mount options \"lowerdir\" and "
"\"upperdir\" are combined into a merged directory::"
msgstr ""

#: ../../../filesystems/overlayfs.rst:126
msgid ""
"The \"workdir\" needs to be an empty directory on the same filesystem as "
"upperdir."
msgstr ""

#: ../../../filesystems/overlayfs.rst:129
msgid ""
"Then whenever a lookup is requested in such a merged directory, the lookup "
"is performed in each actual directory and the combined result is cached in "
"the dentry belonging to the overlay filesystem.  If both actual lookups find "
"directories, both are stored and a merged directory is created, otherwise "
"only one is stored: the upper if it exists, else the lower."
msgstr ""

#: ../../../filesystems/overlayfs.rst:136
msgid ""
"Only the lists of names from directories are merged.  Other content such as "
"metadata and extended attributes are reported for the upper directory only.  "
"These attributes of the lower directory are hidden."
msgstr ""

#: ../../../filesystems/overlayfs.rst:141
msgid "whiteouts and opaque directories"
msgstr ""

#: ../../../filesystems/overlayfs.rst:143
msgid ""
"In order to support rm and rmdir without changing the lower filesystem, an "
"overlay filesystem needs to record in the upper filesystem that files have "
"been removed.  This is done using whiteouts and opaque directories (non-"
"directories are always opaque)."
msgstr ""

#: ../../../filesystems/overlayfs.rst:148
msgid ""
"A whiteout is created as a character device with 0/0 device number or as a "
"zero-size regular file with the xattr \"trusted.overlay.whiteout\"."
msgstr ""

#: ../../../filesystems/overlayfs.rst:151
msgid ""
"When a whiteout is found in the upper level of a merged directory, any "
"matching name in the lower level is ignored, and the whiteout itself is also "
"hidden."
msgstr ""

#: ../../../filesystems/overlayfs.rst:155
msgid ""
"A directory is made opaque by setting the xattr \"trusted.overlay.opaque\" "
"to \"y\".  Where the upper filesystem contains an opaque directory, any "
"directory in the lower filesystem with the same name is ignored."
msgstr ""

#: ../../../filesystems/overlayfs.rst:159
msgid ""
"An opaque directory should not contain any whiteouts, because they do not "
"serve any purpose.  A merge directory containing regular files with the "
"xattr \"trusted.overlay.whiteout\", should be additionally marked by setting "
"the xattr \"trusted.overlay.opaque\" to \"x\" on the merge directory itself. "
"This is needed to avoid the overhead of checking the \"trusted.overlay."
"whiteout\" on all entries during readdir in the common case."
msgstr ""

#: ../../../filesystems/overlayfs.rst:167
msgid "readdir"
msgstr ""

#: ../../../filesystems/overlayfs.rst:169
msgid ""
"When a 'readdir' request is made on a merged directory, the upper and lower "
"directories are each read and the name lists merged in the obvious way "
"(upper is read first, then lower - entries that already exist are not re-"
"added).  This merged name list is cached in the 'struct file' and so remains "
"as long as the file is kept open.  If the directory is opened and read by "
"two processes at the same time, they will each have separate caches.  A "
"seekdir to the start of the directory (offset 0) followed by a readdir will "
"cause the cache to be discarded and rebuilt."
msgstr ""

#: ../../../filesystems/overlayfs.rst:179
msgid ""
"This means that changes to the merged directory do not appear while a "
"directory is being read.  This is unlikely to be noticed by many programs."
msgstr ""

#: ../../../filesystems/overlayfs.rst:183
msgid ""
"seek offsets are assigned sequentially when the directories are read. Thus "
"if:"
msgstr ""

#: ../../../filesystems/overlayfs.rst:186
msgid "read part of a directory"
msgstr ""

#: ../../../filesystems/overlayfs.rst:187
msgid "remember an offset, and close the directory"
msgstr ""

#: ../../../filesystems/overlayfs.rst:188
msgid "re-open the directory some time later"
msgstr ""

#: ../../../filesystems/overlayfs.rst:189
msgid "seek to the remembered offset"
msgstr ""

#: ../../../filesystems/overlayfs.rst:191
msgid ""
"there may be little correlation between the old and new locations in the "
"list of filenames, particularly if anything has changed in the directory."
msgstr ""

#: ../../../filesystems/overlayfs.rst:195
msgid ""
"Readdir on directories that are not merged is simply handled by the "
"underlying directory (upper or lower)."
msgstr ""

#: ../../../filesystems/overlayfs.rst:199
msgid "renaming directories"
msgstr ""

#: ../../../filesystems/overlayfs.rst:201
msgid ""
"When renaming a directory that is on the lower layer or merged (i.e. the "
"directory was not created on the upper layer to start with) overlayfs can "
"handle it in two different ways:"
msgstr ""

#: ../../../filesystems/overlayfs.rst:205
msgid ""
"return EXDEV error: this error is returned by rename(2) when trying to move "
"a file or directory across filesystem boundaries.  Hence applications are "
"usually prepared to handle this error (mv(1) for example recursively copies "
"the directory tree).  This is the default behavior."
msgstr ""

#: ../../../filesystems/overlayfs.rst:210
msgid ""
"If the \"redirect_dir\" feature is enabled, then the directory will be "
"copied up (but not the contents).  Then the \"trusted.overlay.redirect\" "
"extended attribute is set to the path of the original location from the root "
"of the overlay.  Finally the directory is moved to the new location."
msgstr ""

#: ../../../filesystems/overlayfs.rst:216
msgid "There are several ways to tune the \"redirect_dir\" feature."
msgstr ""

#: ../../../filesystems/overlayfs.rst:218
msgid "Kernel config options:"
msgstr ""

#: ../../../filesystems/overlayfs.rst:220
msgid "OVERLAY_FS_REDIRECT_DIR:"
msgstr ""

#: ../../../filesystems/overlayfs.rst:221
msgid "If this is enabled, then redirect_dir is turned on by  default."
msgstr ""

#: ../../../filesystems/overlayfs.rst:222
msgid "OVERLAY_FS_REDIRECT_ALWAYS_FOLLOW:"
msgstr ""

#: ../../../filesystems/overlayfs.rst:223
msgid ""
"If this is enabled, then redirects are always followed by default. Enabling "
"this results in a less secure configuration.  Enable this option only when "
"worried about backward compatibility with kernels that have the redirect_dir "
"feature and follow redirects even if turned off."
msgstr ""

#: ../../../filesystems/overlayfs.rst:228
msgid ""
"Module options (can also be changed through /sys/module/overlay/parameters/):"
msgstr ""

#: ../../../filesystems/overlayfs.rst:230
msgid "\"redirect_dir=BOOL\":"
msgstr ""

#: ../../../filesystems/overlayfs.rst:231
msgid "See OVERLAY_FS_REDIRECT_DIR kernel config option above."
msgstr ""

#: ../../../filesystems/overlayfs.rst:232
msgid "\"redirect_always_follow=BOOL\":"
msgstr ""

#: ../../../filesystems/overlayfs.rst:233
msgid "See OVERLAY_FS_REDIRECT_ALWAYS_FOLLOW kernel config option above."
msgstr ""

#: ../../../filesystems/overlayfs.rst:234
msgid "\"redirect_max=NUM\":"
msgstr ""

#: ../../../filesystems/overlayfs.rst:235
msgid "The maximum number of bytes in an absolute redirect (default is 256)."
msgstr ""

#: ../../../filesystems/overlayfs.rst:237
msgid "Mount options:"
msgstr ""

#: ../../../filesystems/overlayfs.rst:239
msgid "\"redirect_dir=on\":"
msgstr ""

#: ../../../filesystems/overlayfs.rst:240
msgid "Redirects are enabled."
msgstr ""

#: ../../../filesystems/overlayfs.rst:241
msgid "\"redirect_dir=follow\":"
msgstr ""

#: ../../../filesystems/overlayfs.rst:242
msgid "Redirects are not created, but followed."
msgstr ""

#: ../../../filesystems/overlayfs.rst:243
msgid "\"redirect_dir=nofollow\":"
msgstr ""

#: ../../../filesystems/overlayfs.rst:244
msgid "Redirects are not created and not followed."
msgstr ""

#: ../../../filesystems/overlayfs.rst:245
msgid "\"redirect_dir=off\":"
msgstr ""

#: ../../../filesystems/overlayfs.rst:246
msgid ""
"If \"redirect_always_follow\" is enabled in the kernel/module config, this "
"\"off\" translates to \"follow\", otherwise it translates to \"nofollow\"."
msgstr ""

#: ../../../filesystems/overlayfs.rst:249
msgid ""
"When the NFS export feature is enabled, every copied up directory is indexed "
"by the file handle of the lower inode and a file handle of the upper "
"directory is stored in a \"trusted.overlay.upper\" extended attribute on the "
"index entry.  On lookup of a merged directory, if the upper directory does "
"not match the file handle stores in the index, that is an indication that "
"multiple upper directories may be redirected to the same lower directory.  "
"In that case, lookup returns an error and warns about a possible "
"inconsistency."
msgstr ""

#: ../../../filesystems/overlayfs.rst:258
msgid ""
"Because lower layer redirects cannot be verified with the index, enabling "
"NFS export support on an overlay filesystem with no upper layer requires "
"turning off redirect follow (e.g. \"redirect_dir=nofollow\")."
msgstr ""

#: ../../../filesystems/overlayfs.rst:264
msgid "Non-directories"
msgstr ""

#: ../../../filesystems/overlayfs.rst:266
msgid ""
"Objects that are not directories (files, symlinks, device-special files "
"etc.) are presented either from the upper or lower filesystem as "
"appropriate.  When a file in the lower filesystem is accessed in a way that "
"requires write-access, such as opening for write access, changing some "
"metadata etc., the file is first copied from the lower filesystem to the "
"upper filesystem (copy_up).  Note that creating a hard-link also requires "
"copy_up, though of course creation of a symlink does not."
msgstr ""

#: ../../../filesystems/overlayfs.rst:275
msgid ""
"The copy_up may turn out to be unnecessary, for example if the file is "
"opened for read-write but the data is not modified."
msgstr ""

#: ../../../filesystems/overlayfs.rst:278
msgid ""
"The copy_up process first makes sure that the containing directory exists in "
"the upper filesystem - creating it and any parents as necessary.  It then "
"creates the object with the same metadata (owner, mode, mtime, symlink-"
"target etc.) and then if the object is a file, the data is copied from the "
"lower to the upper filesystem.  Finally any extended attributes are copied "
"up."
msgstr ""

#: ../../../filesystems/overlayfs.rst:285
msgid ""
"Once the copy_up is complete, the overlay filesystem simply provides direct "
"access to the newly created file in the upper filesystem - future operations "
"on the file are barely noticed by the overlay filesystem (though an "
"operation on the name of the file such as rename or unlink will of course be "
"noticed and handled)."
msgstr ""

#: ../../../filesystems/overlayfs.rst:293
msgid "Permission model"
msgstr ""

#: ../../../filesystems/overlayfs.rst:295
msgid ""
"An overlay filesystem stashes credentials that will be used when accessing "
"lower or upper filesystems."
msgstr ""

#: ../../../filesystems/overlayfs.rst:298
msgid ""
"In the old mount api the credentials of the task calling mount(2) are "
"stashed. In the new mount api the credentials of the task creating the "
"superblock through FSCONFIG_CMD_CREATE command of fsconfig(2) are stashed."
msgstr ""

#: ../../../filesystems/overlayfs.rst:303
msgid ""
"Starting with kernel v6.15 it is possible to use the \"override_creds\" "
"mount option which will cause the credentials of the calling task to be "
"recorded. Note that \"override_creds\" is only meaningful when used with the "
"new mount api as the old mount api combines setting options and superblock "
"creation in a single mount(2) syscall."
msgstr ""

#: ../../../filesystems/overlayfs.rst:309
msgid "Permission checking in the overlay filesystem follows these principles:"
msgstr ""

#: ../../../filesystems/overlayfs.rst:311
msgid "permission check SHOULD return the same result before and after copy up"
msgstr ""

#: ../../../filesystems/overlayfs.rst:313
msgid "task creating the overlay mount MUST NOT gain additional privileges"
msgstr ""

#: ../../../filesystems/overlayfs.rst:315
msgid ""
"task[*] MAY gain additional privileges through the overlay, compared to "
"direct access on underlying lower or upper filesystems"
msgstr ""

#: ../../../filesystems/overlayfs.rst:318
msgid "This is achieved by performing two permission checks on each access:"
msgstr ""

#: ../../../filesystems/overlayfs.rst:320
msgid ""
"check if current task is allowed access based on local DAC (owner, group, "
"mode and posix acl), as well as MAC checks"
msgstr ""

#: ../../../filesystems/overlayfs.rst:323
msgid ""
"check if stashed credentials would be allowed real operation on lower or "
"upper layer based on underlying filesystem permissions, again including MAC "
"checks"
msgstr ""

#: ../../../filesystems/overlayfs.rst:327
msgid ""
"Check (a) ensures consistency (1) since owner, group, mode and posix acls "
"are copied up.  On the other hand it can result in server enforced "
"permissions (used by NFS, for example) being ignored (3)."
msgstr ""

#: ../../../filesystems/overlayfs.rst:331
msgid ""
"Check (b) ensures that no task gains permissions to underlying layers that "
"the stashed credentials do not have (2).  This also means that it is "
"possible to create setups where the consistency rule (1) does not hold; "
"normally, however, the stashed credentials will have sufficient privileges "
"to perform all operations."
msgstr ""

#: ../../../filesystems/overlayfs.rst:337
msgid "Another way to demonstrate this model is drawing parallels between::"
msgstr ""

#: ../../../filesystems/overlayfs.rst:341
msgid "and::"
msgstr ""

#: ../../../filesystems/overlayfs.rst:346
msgid ""
"The resulting access permissions should be the same.  The difference is in "
"the time of copy (on-demand vs. up-front)."
msgstr ""

#: ../../../filesystems/overlayfs.rst:351
msgid "Multiple lower layers"
msgstr ""

#: ../../../filesystems/overlayfs.rst:353
msgid ""
"Multiple lower layers can now be given using the colon (\":\") as a "
"separator character between the directory names.  For example::"
msgstr ""

#: ../../../filesystems/overlayfs.rst:358
msgid ""
"As the example shows, \"upperdir=\" and \"workdir=\" may be omitted.  In "
"that case the overlay will be read-only."
msgstr ""

#: ../../../filesystems/overlayfs.rst:361
msgid ""
"The specified lower directories will be stacked beginning from the rightmost "
"one and going left.  In the above example lower1 will be the top, lower2 the "
"middle and lower3 the bottom layer."
msgstr ""

#: ../../../filesystems/overlayfs.rst:365
msgid ""
"Note: directory names containing colons can be provided as lower layer by "
"escaping the colons with a single backslash.  For example::"
msgstr ""

#: ../../../filesystems/overlayfs.rst:370
msgid ""
"Since kernel version v6.8, directory names containing colons can also be "
"configured as lower layer using the \"lowerdir+\" mount options and the "
"fsconfig syscall from new mount api.  For example::"
msgstr ""

#: ../../../filesystems/overlayfs.rst:376
msgid ""
"In the latter case, colons in lower layer directory names will be escaped as "
"an octal characters (\\072) when displayed in /proc/self/mountinfo."
msgstr ""

#: ../../../filesystems/overlayfs.rst:380
msgid "Metadata only copy up"
msgstr ""

#: ../../../filesystems/overlayfs.rst:382
msgid ""
"When the \"metacopy\" feature is enabled, overlayfs will only copy up "
"metadata (as opposed to whole file), when a metadata specific operation like "
"chown/chmod is performed. An upper file in this state is marked with "
"\"trusted.overlayfs.metacopy\" xattr which indicates that the upper file "
"contains no data.  The data will be copied up later when file is opened for "
"WRITE operation.  After the lower file's data is copied up, the \"trusted."
"overlayfs.metacopy\" xattr is removed from the upper file."
msgstr ""

#: ../../../filesystems/overlayfs.rst:390
msgid ""
"In other words, this is delayed data copy up operation and data is copied up "
"when there is a need to actually modify data."
msgstr ""

#: ../../../filesystems/overlayfs.rst:393
msgid ""
"There are multiple ways to enable/disable this feature. A config option "
"CONFIG_OVERLAY_FS_METACOPY can be set/unset to enable/disable this feature "
"by default. Or one can enable/disable it at module load time with module "
"parameter metacopy=on/off. Lastly, there is also a per mount option "
"metacopy=on/off to enable/disable this feature per mount."
msgstr ""

#: ../../../filesystems/overlayfs.rst:399
msgid ""
"Do not use metacopy=on with untrusted upper/lower directories. Otherwise it "
"is possible that an attacker can create a handcrafted file with appropriate "
"REDIRECT and METACOPY xattrs, and gain access to file on lower pointed by "
"REDIRECT. This should not be possible on local system as setting \"trusted."
"\" xattrs will require CAP_SYS_ADMIN. But it should be possible for "
"untrusted layers like from a pen drive."
msgstr ""

#: ../../../filesystems/overlayfs.rst:406
msgid ""
"Note: redirect_dir={off|nofollow|follow[*]} and nfs_export=on mount options "
"conflict with metacopy=on, and will result in an error."
msgstr ""

#: ../../../filesystems/overlayfs.rst:409
msgid ""
"[*] redirect_dir=follow only conflicts with metacopy=on if upperdir=... is "
"given."
msgstr ""

#: ../../../filesystems/overlayfs.rst:414
msgid "Data-only lower layers"
msgstr ""

#: ../../../filesystems/overlayfs.rst:416
msgid ""
"With \"metacopy\" feature enabled, an overlayfs regular file may be a "
"composition of information from up to three different layers:"
msgstr ""

#: ../../../filesystems/overlayfs.rst:419
msgid "metadata from a file in the upper layer"
msgstr ""

#: ../../../filesystems/overlayfs.rst:421
msgid "st_ino and st_dev object identifier from a file in a lower layer"
msgstr ""

#: ../../../filesystems/overlayfs.rst:423
msgid "data from a file in another lower layer (further below)"
msgstr ""

#: ../../../filesystems/overlayfs.rst:425
msgid ""
"The \"lower data\" file can be on any lower layer, except from the top most "
"lower layer."
msgstr ""

#: ../../../filesystems/overlayfs.rst:428
msgid ""
"Below the topmost lower layer, any number of lowermost layers may be defined "
"as \"data-only\" lower layers, using double colon (\"::\") separators. A "
"normal lower layer is not allowed to be below a data-only layer, so single "
"colon separators are not allowed to the right of double colon (\"::\") "
"separators."
msgstr ""

#: ../../../filesystems/overlayfs.rst:434
msgid "For example::"
msgstr ""

#: ../../../filesystems/overlayfs.rst:438
msgid ""
"The paths of files in the \"data-only\" lower layers are not visible in the "
"merged overlayfs directories and the metadata and st_ino/st_dev of files in "
"the \"data-only\" lower layers are not visible in overlayfs inodes."
msgstr ""

#: ../../../filesystems/overlayfs.rst:442
msgid ""
"Only the data of the files in the \"data-only\" lower layers may be visible "
"when a \"metacopy\" file in one of the lower layers above it, has a "
"\"redirect\" to the absolute path of the \"lower data\" file in the \"data-"
"only\" lower layer."
msgstr ""

#: ../../../filesystems/overlayfs.rst:446
msgid ""
"Instead of explicitly enabling \"metacopy=on\" it is sufficient to specify "
"at least one data-only layer to enable redirection of data to a data-only "
"layer. In this case other forms of metacopy are rejected.  Note: this way, "
"data-only layers may be used together with \"userxattr\", in which case "
"careful attention must be given to privileges needed to change the \"user."
"overlay.redirect\" xattr to prevent misuse."
msgstr ""

#: ../../../filesystems/overlayfs.rst:453
msgid ""
"Since kernel version v6.8, \"data-only\" lower layers can also be added "
"using the \"datadir+\" mount options and the fsconfig syscall from new mount "
"api. For example::"
msgstr ""

#: ../../../filesystems/overlayfs.rst:465
msgid "Specifying layers via file descriptors"
msgstr ""

#: ../../../filesystems/overlayfs.rst:467
msgid ""
"Since kernel v6.13, overlayfs supports specifying layers via file "
"descriptors in addition to specifying them as paths. This feature is "
"available for the \"datadir+\", \"lowerdir+\", \"upperdir\", and \"workdir+"
"\" mount options with the fsconfig syscall from the new mount api::"
msgstr ""

#: ../../../filesystems/overlayfs.rst:482
msgid "fs-verity support"
msgstr ""

#: ../../../filesystems/overlayfs.rst:484
msgid ""
"During metadata copy up of a lower file, if the source file has fs-verity "
"enabled and overlay verity support is enabled, then the digest of the lower "
"file is added to the \"trusted.overlay.metacopy\" xattr. This is then used "
"to verify the content of the lower file each the time the metacopy file is "
"opened."
msgstr ""

#: ../../../filesystems/overlayfs.rst:490
msgid ""
"When a layer containing verity xattrs is used, it means that any such "
"metacopy file in the upper layer is guaranteed to match the content that was "
"in the lower at the time of the copy-up. If at any time (during a mount, "
"after a remount, etc) such a file in the lower is replaced or modified in "
"any way, access to the corresponding file in overlayfs will result in EIO "
"errors (either on open, due to overlayfs digest check, or from a later read "
"due to fs-verity) and a detailed error is printed to the kernel logs. For "
"more details of how fs-verity file access works, see :ref:`Documentation/"
"filesystems/fsverity.rst <accessing_verity_files>`."
msgstr ""

#: ../../../filesystems/overlayfs.rst:501
msgid ""
"Verity can be used as a general robustness check to detect accidental "
"changes in the overlayfs directories in use. But, with additional care it "
"can also give more powerful guarantees. For example, if the upper layer is "
"fully trusted (by using dm-verity or something similar), then an untrusted "
"lower layer can be used to supply validated file content for all metacopy "
"files.  If additionally the untrusted lower directories are specified as "
"\"Data-only\", then they can only supply such file content, and the entire "
"mount can be trusted to match the upper layer."
msgstr ""

#: ../../../filesystems/overlayfs.rst:511
msgid ""
"This feature is controlled by the \"verity\" mount option, which supports "
"these values:"
msgstr ""

#: ../../../filesystems/overlayfs.rst:514
#: ../../../filesystems/overlayfs.rst:770
msgid "\"off\":"
msgstr ""

#: ../../../filesystems/overlayfs.rst:515
msgid ""
"The metacopy digest is never generated or used. This is the default if "
"verity option is not specified."
msgstr ""

#: ../../../filesystems/overlayfs.rst:517
#: ../../../filesystems/overlayfs.rst:773
msgid "\"on\":"
msgstr ""

#: ../../../filesystems/overlayfs.rst:518
msgid ""
"Whenever a metacopy file specifies an expected digest, the corresponding "
"data file must match the specified digest. When generating a metacopy file "
"the verity digest will be set in it based on the source file (if it has one)."
msgstr ""

#: ../../../filesystems/overlayfs.rst:522
msgid "\"require\":"
msgstr ""

#: ../../../filesystems/overlayfs.rst:523
msgid ""
"Same as \"on\", but additionally all metacopy files must specify a digest "
"(or EIO is returned on open). This means metadata copy up will only be used "
"if the data file has fs-verity enabled, otherwise a full copy-up is used."
msgstr ""

#: ../../../filesystems/overlayfs.rst:529
msgid "Sharing and copying layers"
msgstr ""

#: ../../../filesystems/overlayfs.rst:531
msgid ""
"Lower layers may be shared among several overlay mounts and that is indeed a "
"very common practice.  An overlay mount may use the same lower layer path as "
"another overlay mount and it may use a lower layer path that is beneath or "
"above the path of another overlay lower layer path."
msgstr ""

#: ../../../filesystems/overlayfs.rst:536
msgid ""
"Using an upper layer path and/or a workdir path that are already used by "
"another overlay mount is not allowed and may fail with EBUSY.  Using "
"partially overlapping paths is not allowed and may fail with EBUSY. If files "
"are accessed from two overlayfs mounts which share or overlap the upper "
"layer and/or workdir path, the behavior of the overlay is undefined, though "
"it will not result in a crash or deadlock."
msgstr ""

#: ../../../filesystems/overlayfs.rst:543
msgid ""
"Mounting an overlay using an upper layer path, where the upper layer path "
"was previously used by another mounted overlay in combination with a "
"different lower layer path, is allowed, unless the \"index\" or \"metacopy\" "
"features are enabled."
msgstr ""

#: ../../../filesystems/overlayfs.rst:548
msgid ""
"With the \"index\" feature, on the first time mount, an NFS file handle of "
"the lower layer root directory, along with the UUID of the lower filesystem, "
"are encoded and stored in the \"trusted.overlay.origin\" extended attribute "
"on the upper layer root directory.  On subsequent mount attempts, the lower "
"root directory file handle and lower filesystem UUID are compared to the "
"stored origin in upper root directory.  On failure to verify the lower root "
"origin, mount will fail with ESTALE.  An overlayfs mount with \"index\" "
"enabled will fail with EOPNOTSUPP if the lower filesystem does not support "
"NFS export, lower filesystem does not have a valid UUID or if the upper "
"filesystem does not support extended attributes."
msgstr ""

#: ../../../filesystems/overlayfs.rst:559
msgid ""
"For the \"metacopy\" feature, there is no verification mechanism at mount "
"time. So if same upper is mounted with different set of lower, mount "
"probably will succeed but expect the unexpected later on. So don't do it."
msgstr ""

#: ../../../filesystems/overlayfs.rst:563
msgid ""
"It is quite a common practice to copy overlay layers to a different "
"directory tree on the same or different underlying filesystem, and even to a "
"different machine.  With the \"index\" feature, trying to mount the copied "
"layers will fail the verification of the lower root file handle."
msgstr ""

#: ../../../filesystems/overlayfs.rst:569
msgid "Nesting overlayfs mounts"
msgstr ""

#: ../../../filesystems/overlayfs.rst:571
msgid ""
"It is possible to use a lower directory that is stored on an overlayfs "
"mount. For regular files this does not need any special care. However, files "
"that have overlayfs attributes, such as whiteouts or \"overlay.*\" xattrs, "
"will be interpreted by the underlying overlayfs mount and stripped out. In "
"order to allow the second overlayfs mount to see the attributes they must be "
"escaped."
msgstr ""

#: ../../../filesystems/overlayfs.rst:577
msgid ""
"Overlayfs specific xattrs are escaped by using a special prefix of \"overlay."
"overlay.\". So, a file with a \"trusted.overlay.overlay.metacopy\" xattr in "
"the lower dir will be exposed as a regular file with a \"trusted.overlay."
"metacopy\" xattr in the overlayfs mount. This can be nested by repeating the "
"prefix multiple time, as each instance only removes one prefix."
msgstr ""

#: ../../../filesystems/overlayfs.rst:583
msgid ""
"A lower dir with a regular whiteout will always be handled by the overlayfs "
"mount, so to support storing an effective whiteout file in an overlayfs "
"mount an alternative form of whiteout is supported. This form is a regular, "
"zero-size file with the \"overlay.whiteout\" xattr set, inside a directory "
"with the \"overlay.opaque\" xattr set to \"x\" (see `whiteouts and opaque "
"directories`_). These alternative whiteouts are never created by overlayfs, "
"but can be used by userspace tools (like containers) that generate lower "
"layers. These alternative whiteouts can be escaped using the standard xattr "
"escape mechanism in order to properly nest to any depth."
msgstr ""

#: ../../../filesystems/overlayfs.rst:594
msgid "Non-standard behavior"
msgstr ""

#: ../../../filesystems/overlayfs.rst:596
msgid ""
"Current version of overlayfs can act as a mostly POSIX compliant filesystem."
msgstr ""

#: ../../../filesystems/overlayfs.rst:599
msgid "This is the list of cases that overlayfs doesn't currently handle:"
msgstr ""

#: ../../../filesystems/overlayfs.rst:601
msgid ""
"POSIX mandates updating st_atime for reads.  This is currently not done in "
"the case when the file resides on a lower layer."
msgstr ""

#: ../../../filesystems/overlayfs.rst:604
msgid ""
"If a file residing on a lower layer is opened for read-only and then memory "
"mapped with MAP_SHARED, then subsequent changes to the file are not "
"reflected in the memory mapping."
msgstr ""

#: ../../../filesystems/overlayfs.rst:608
msgid ""
"If a file residing on a lower layer is being executed, then opening that "
"file for write or truncating the file will not be denied with ETXTBSY."
msgstr ""

#: ../../../filesystems/overlayfs.rst:611
msgid ""
"The following options allow overlayfs to act more like a standards compliant "
"filesystem:"
msgstr ""

#: ../../../filesystems/overlayfs.rst:615
msgid "redirect_dir"
msgstr ""

#: ../../../filesystems/overlayfs.rst:617
msgid ""
"Enabled with the mount option or module option: \"redirect_dir=on\" or with "
"the kernel config option CONFIG_OVERLAY_FS_REDIRECT_DIR=y."
msgstr ""

#: ../../../filesystems/overlayfs.rst:620
msgid ""
"If this feature is disabled, then rename(2) on a lower or merged directory "
"will fail with EXDEV (\"Invalid cross-device link\")."
msgstr ""

#: ../../../filesystems/overlayfs.rst:624
msgid "index"
msgstr ""

#: ../../../filesystems/overlayfs.rst:626
msgid ""
"Enabled with the mount option or module option \"index=on\" or with the "
"kernel config option CONFIG_OVERLAY_FS_INDEX=y."
msgstr ""

#: ../../../filesystems/overlayfs.rst:629
msgid ""
"If this feature is disabled and a file with multiple hard links is copied "
"up, then this will \"break\" the link.  Changes will not be propagated to "
"other names referring to the same inode."
msgstr ""

#: ../../../filesystems/overlayfs.rst:634
msgid "xino"
msgstr ""

#: ../../../filesystems/overlayfs.rst:636
msgid ""
"Enabled with the mount option \"xino=auto\" or \"xino=on\", with the module "
"option \"xino_auto=on\" or with the kernel config option "
"CONFIG_OVERLAY_FS_XINO_AUTO=y.  Also implicitly enabled by using the same "
"underlying filesystem for all layers making up the overlay."
msgstr ""

#: ../../../filesystems/overlayfs.rst:641
msgid ""
"If this feature is disabled or the underlying filesystem doesn't have enough "
"free bits in the inode number, then overlayfs will not be able to guarantee "
"that the values of st_ino and st_dev returned by stat(2) and the value of "
"d_ino returned by readdir(3) will act like on a normal filesystem. E.g. the "
"value of st_dev may be different for two objects in the same overlay "
"filesystem and the value of st_ino for filesystem objects may not be "
"persistent and could change even while the overlay filesystem is mounted, as "
"summarized in the `Inode properties`_ table above."
msgstr ""

#: ../../../filesystems/overlayfs.rst:652
msgid "Changes to underlying filesystems"
msgstr ""

#: ../../../filesystems/overlayfs.rst:654
msgid ""
"Changes to the underlying filesystems while part of a mounted overlay "
"filesystem are not allowed.  If the underlying filesystem is changed, the "
"behavior of the overlay is undefined, though it will not result in a crash "
"or deadlock."
msgstr ""

#: ../../../filesystems/overlayfs.rst:659
msgid ""
"Offline changes, when the overlay is not mounted, are allowed to the upper "
"tree.  Offline changes to the lower tree are only allowed if the "
"\"metacopy\", \"index\", \"xino\" and \"redirect_dir\" features have not "
"been used.  If the lower tree is modified and any of these features has been "
"used, the behavior of the overlay is undefined, though it will not result in "
"a crash or deadlock."
msgstr ""

#: ../../../filesystems/overlayfs.rst:666
msgid ""
"When the overlay NFS export feature is enabled, overlay filesystems behavior "
"on offline changes of the underlying lower layer is different than the "
"behavior when NFS export is disabled."
msgstr ""

#: ../../../filesystems/overlayfs.rst:670
msgid ""
"On every copy_up, an NFS file handle of the lower inode, along with the UUID "
"of the lower filesystem, are encoded and stored in an extended attribute "
"\"trusted.overlay.origin\" on the upper inode."
msgstr ""

#: ../../../filesystems/overlayfs.rst:674
msgid ""
"When the NFS export feature is enabled, a lookup of a merged directory, that "
"found a lower directory at the lookup path or at the path pointed to by the "
"\"trusted.overlay.redirect\" extended attribute, will verify that the found "
"lower directory file handle and lower filesystem UUID match the origin file "
"handle that was stored at copy_up time.  If a found lower directory does not "
"match the stored origin, that directory will not be merged with the upper "
"directory."
msgstr ""

#: ../../../filesystems/overlayfs.rst:685
msgid "NFS export"
msgstr ""

#: ../../../filesystems/overlayfs.rst:687
msgid ""
"When the underlying filesystems supports NFS export and the \"nfs_export\" "
"feature is enabled, an overlay filesystem may be exported to NFS."
msgstr ""

#: ../../../filesystems/overlayfs.rst:690
msgid ""
"With the \"nfs_export\" feature, on copy_up of any lower object, an index "
"entry is created under the index directory.  The index entry name is the "
"hexadecimal representation of the copy up origin file handle.  For a non-"
"directory object, the index entry is a hard link to the upper inode. For a "
"directory object, the index entry has an extended attribute \"trusted."
"overlay.upper\" with an encoded file handle of the upper directory inode."
msgstr ""

#: ../../../filesystems/overlayfs.rst:698
msgid ""
"When encoding a file handle from an overlay filesystem object, the following "
"rules apply:"
msgstr ""

#: ../../../filesystems/overlayfs.rst:701
msgid "For a non-upper object, encode a lower file handle from lower inode"
msgstr ""

#: ../../../filesystems/overlayfs.rst:702
msgid "For an indexed object, encode a lower file handle from copy_up origin"
msgstr ""

#: ../../../filesystems/overlayfs.rst:703
msgid ""
"For a pure-upper object and for an existing non-indexed upper object, encode "
"an upper file handle from upper inode"
msgstr ""

#: ../../../filesystems/overlayfs.rst:706
msgid "The encoded overlay file handle includes:"
msgstr ""

#: ../../../filesystems/overlayfs.rst:708
msgid "Header including path type information (e.g. lower/upper)"
msgstr ""

#: ../../../filesystems/overlayfs.rst:709
msgid "UUID of the underlying filesystem"
msgstr ""

#: ../../../filesystems/overlayfs.rst:710
msgid "Underlying filesystem encoding of underlying inode"
msgstr ""

#: ../../../filesystems/overlayfs.rst:712
msgid ""
"This encoding format is identical to the encoding format file handles that "
"are stored in extended attribute \"trusted.overlay.origin\"."
msgstr ""

#: ../../../filesystems/overlayfs.rst:715
msgid "When decoding an overlay file handle, the following steps are followed:"
msgstr ""

#: ../../../filesystems/overlayfs.rst:717
msgid "Find underlying layer by UUID and path type information."
msgstr ""

#: ../../../filesystems/overlayfs.rst:718
msgid "Decode the underlying filesystem file handle to underlying dentry."
msgstr ""

#: ../../../filesystems/overlayfs.rst:719
msgid "For a lower file handle, lookup the handle in index directory by name."
msgstr ""

#: ../../../filesystems/overlayfs.rst:720
msgid ""
"If a whiteout is found in index, return ESTALE. This represents an overlay "
"object that was deleted after its file handle was encoded."
msgstr ""

#: ../../../filesystems/overlayfs.rst:722
msgid ""
"For a non-directory, instantiate a disconnected overlay dentry from the "
"decoded underlying dentry, the path type and index inode, if found."
msgstr ""

#: ../../../filesystems/overlayfs.rst:724
msgid ""
"For a directory, use the connected underlying decoded dentry, path type and "
"index, to lookup a connected overlay dentry."
msgstr ""

#: ../../../filesystems/overlayfs.rst:727
msgid ""
"Decoding a non-directory file handle may return a disconnected dentry. "
"copy_up of that disconnected dentry will create an upper index entry with no "
"upper alias."
msgstr ""

#: ../../../filesystems/overlayfs.rst:731
msgid ""
"When overlay filesystem has multiple lower layers, a middle layer directory "
"may have a \"redirect\" to lower directory.  Because middle layer "
"\"redirects\" are not indexed, a lower file handle that was encoded from the "
"\"redirect\" origin directory, cannot be used to find the middle or upper "
"layer directory.  Similarly, a lower file handle that was encoded from a "
"descendant of the \"redirect\" origin directory, cannot be used to "
"reconstruct a connected overlay path.  To mitigate the cases of directories "
"that cannot be decoded from a lower file handle, these directories are "
"copied up on encode and encoded as an upper file handle. On an overlay "
"filesystem with no upper layer this mitigation cannot be used NFS export in "
"this setup requires turning off redirect follow (e.g. "
"\"redirect_dir=nofollow\")."
msgstr ""

#: ../../../filesystems/overlayfs.rst:744
msgid ""
"The overlay filesystem does not support non-directory connectable file "
"handles, so exporting with the 'subtree_check' exportfs configuration will "
"cause failures to lookup files over NFS."
msgstr ""

#: ../../../filesystems/overlayfs.rst:748
msgid ""
"When the NFS export feature is enabled, all directory index entries are "
"verified on mount time to check that upper file handles are not stale. This "
"verification may cause significant overhead in some cases."
msgstr ""

#: ../../../filesystems/overlayfs.rst:752
msgid ""
"Note: the mount options index=off,nfs_export=on are conflicting for a read-"
"write mount and will result in an error."
msgstr ""

#: ../../../filesystems/overlayfs.rst:755
msgid ""
"Note: the mount option uuid=off can be used to replace UUID of the "
"underlying filesystem in file handles with null, and effectively disable "
"UUID checks. This can be useful in case the underlying disk is copied and "
"the UUID of this copy is changed. This is only applicable if all lower/upper/"
"work directories are on the same filesystem, otherwise it will fallback to "
"normal behaviour."
msgstr ""

#: ../../../filesystems/overlayfs.rst:763
msgid "UUID and fsid"
msgstr ""

#: ../../../filesystems/overlayfs.rst:765
msgid ""
"The UUID of overlayfs instance itself and the fsid reported by statfs(2) are "
"controlled by the \"uuid\" mount option, which supports these values:"
msgstr ""

#: ../../../filesystems/overlayfs.rst:768
msgid "\"null\":"
msgstr ""

#: ../../../filesystems/overlayfs.rst:769
msgid "UUID of overlayfs is null. fsid is taken from upper most filesystem."
msgstr ""

#: ../../../filesystems/overlayfs.rst:771
msgid ""
"UUID of overlayfs is null. fsid is taken from upper most filesystem. UUID of "
"underlying layers is ignored."
msgstr ""

#: ../../../filesystems/overlayfs.rst:774
msgid ""
"UUID of overlayfs is generated and used to report a unique fsid. UUID is "
"stored in xattr \"trusted.overlay.uuid\", making overlayfs fsid unique and "
"persistent.  This option requires an overlayfs with upper filesystem that "
"supports xattrs."
msgstr ""

#: ../../../filesystems/overlayfs.rst:778
msgid "\"auto\": (default)"
msgstr ""

#: ../../../filesystems/overlayfs.rst:779
msgid ""
"UUID is taken from xattr \"trusted.overlay.uuid\" if it exists. Upgrade to "
"\"uuid=on\" on first time mount of new overlay filesystem that meets the "
"prerequisites. Downgrade to \"uuid=null\" for existing overlay filesystems "
"that were never mounted with \"uuid=on\"."
msgstr ""

#: ../../../filesystems/overlayfs.rst:787
msgid "Volatile mount"
msgstr ""

#: ../../../filesystems/overlayfs.rst:789
msgid ""
"This is enabled with the \"volatile\" mount option.  Volatile mounts are not "
"guaranteed to survive a crash.  It is strongly recommended that volatile "
"mounts are only used if data written to the overlay can be recreated without "
"significant effort."
msgstr ""

#: ../../../filesystems/overlayfs.rst:794
msgid ""
"The advantage of mounting with the \"volatile\" option is that all forms of "
"sync calls to the upper filesystem are omitted."
msgstr ""

#: ../../../filesystems/overlayfs.rst:797
msgid ""
"In order to avoid giving a false sense of safety, the syncfs (and fsync) "
"semantics of volatile mounts are slightly different than that of the rest of "
"VFS.  If any writeback error occurs on the upperdir's filesystem after a "
"volatile mount takes place, all sync functions will return an error.  Once "
"this condition is reached, the filesystem will not recover, and every "
"subsequent sync call will return an error, even if the upperdir has not "
"experienced a new error since the last sync call."
msgstr ""

#: ../../../filesystems/overlayfs.rst:805
msgid ""
"When overlay is mounted with \"volatile\" option, the directory \"$workdir/"
"work/incompat/volatile\" is created.  During next mount, overlay checks for "
"this directory and refuses to mount if present. This is a strong indicator "
"that the user should discard upper and work directories and create fresh "
"ones. In very limited cases where the user knows that the system has not "
"crashed and contents of upperdir are intact, the \"volatile\" directory can "
"be removed."
msgstr ""

#: ../../../filesystems/overlayfs.rst:815
msgid "User xattr"
msgstr ""

#: ../../../filesystems/overlayfs.rst:817
msgid ""
"The \"-o userxattr\" mount option forces overlayfs to use the \"user.overlay."
"\" xattr namespace instead of \"trusted.overlay.\".  This is useful for "
"unprivileged mounting of overlayfs."
msgstr ""

#: ../../../filesystems/overlayfs.rst:823
msgid "Testsuite"
msgstr ""

#: ../../../filesystems/overlayfs.rst:825
msgid ""
"There's a testsuite originally developed by David Howells and currently "
"maintained by Amir Goldstein at:"
msgstr ""

#: ../../../filesystems/overlayfs.rst:828
msgid "https://github.com/amir73il/unionmount-testsuite.git"
msgstr ""

#: ../../../filesystems/overlayfs.rst:830
msgid "Run as root::"
msgstr ""
