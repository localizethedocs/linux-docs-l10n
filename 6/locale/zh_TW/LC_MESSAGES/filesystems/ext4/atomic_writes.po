# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../filesystems/ext4/atomic_writes.rst:5
msgid "Atomic Block Writes"
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:8
msgid "Introduction"
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:10
msgid ""
"Atomic (untorn) block writes ensure that either the entire write is "
"committed to disk or none of it is. This prevents \"torn writes\" during "
"power loss or system crashes. The ext4 filesystem supports atomic writes "
"(only with Direct I/O) on regular files with extents, provided the "
"underlying storage device supports hardware atomic writes. This is supported "
"in the following two ways:"
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:16
msgid ""
"**Single-fsblock Atomic Writes**: EXT4's supports atomic write operations "
"with a single filesystem block since v6.13. In this the atomic write unit "
"minimum and maximum sizes are both set to filesystem blocksize. e.g. doing "
"atomic write of 16KB with 16KB filesystem blocksize on 64KB pagesize system "
"is possible."
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:23
msgid ""
"**Multi-fsblock Atomic Writes with Bigalloc**: EXT4 now also supports atomic "
"writes spanning multiple filesystem blocks using a feature known as "
"bigalloc. The atomic write unit's minimum and maximum sizes are determined "
"by the filesystem block size and cluster size, based on the underlying "
"deviceâ€™s supported atomic write unit limits."
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:30
msgid "Requirements"
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:32
msgid "Basic requirements for atomic writes in ext4:"
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:34
msgid "The extents feature must be enabled (default for ext4)"
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:35
msgid "The underlying block device must support atomic writes"
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:36
msgid "For single-fsblock atomic writes:"
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:38
msgid "A filesystem with appropriate block size (up to the page size)"
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:39
msgid "For multi-fsblock atomic writes:"
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:41
msgid "The bigalloc feature must be enabled"
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:42
msgid "The cluster size must be appropriately configured"
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:44
msgid ""
"NOTE: EXT4 does not support software or COW based atomic write, which means "
"atomic writes on ext4 are only supported if underlying storage device "
"supports it."
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:49
msgid "Multi-fsblock Implementation Details"
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:51
msgid ""
"The bigalloc feature changes ext4 to allocate in units of multiple "
"filesystem blocks, also known as clusters. With bigalloc each bit within "
"block bitmap represents cluster (power of 2 number of blocks) rather than "
"individual filesystem blocks. EXT4 supports multi-fsblock atomic writes with "
"bigalloc, subject to the following constraints. The minimum atomic write "
"size is the larger of the fs block size and the minimum hardware atomic "
"write unit; and the maximum atomic write size is smaller of the bigalloc "
"cluster size and the maximum hardware atomic write unit.  Bigalloc ensures "
"that all allocations are aligned to the cluster size, which satisfies the "
"LBA alignment requirements of the hardware device if the start of the "
"partition/logical volume is itself aligned correctly."
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:63
msgid "Here is the block allocation strategy in bigalloc for atomic writes:"
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:65
msgid "For regions with fully mapped extents, no additional work is needed"
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:66
msgid "For append writes, a new mapped extent is allocated"
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:67
msgid "For regions that are entirely holes, unwritten extent is created"
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:68
msgid ""
"For large unwritten extents, the extent gets split into two unwritten "
"extents of appropriate requested size"
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:70
msgid ""
"For mixed mapping regions (combinations of holes, unwritten extents, or "
"mapped extents), ext4_map_blocks() is called in a loop with "
"EXT4_GET_BLOCKS_ZERO flag to convert the region into a single contiguous "
"mapped extent by writing zeroes to it and converting any unwritten extents "
"to written, if found within the range."
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:76
msgid ""
"Note: Writing on a single contiguous underlying extent, whether mapped or "
"unwritten, is not inherently problematic. However, writing to a mixed "
"mapping region (i.e. one containing a combination of mapped and unwritten "
"extents) must be avoided when performing atomic writes."
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:81
msgid ""
"The reason is that, atomic writes when issued via pwritev2() with the "
"RWF_ATOMIC flag, requires that either all data is written or none at all. In "
"the event of a system crash or unexpected power loss during the write "
"operation, the affected region (when later read) must reflect either the "
"complete old data or the complete new data, but never a mix of both."
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:87
msgid ""
"To enforce this guarantee, we ensure that the write target is backed by a "
"single, contiguous extent before any data is written. This is critical "
"because ext4 defers the conversion of unwritten extents to written extents "
"until the I/O completion path (typically in ->end_io()). If a write is "
"allowed to proceed over a mixed mapping region (with mapped and unwritten "
"extents) and a failure occurs mid-write, the system could observe partially "
"updated regions after reboot, i.e. new data over mapped areas, and stale "
"(old) data over unwritten extents that were never marked written. This "
"violates the atomicity and/or torn write prevention guarantee."
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:97
msgid ""
"To prevent such torn writes, ext4 proactively allocates a single contiguous "
"extent for the entire requested region in ``ext4_iomap_alloc`` via "
"``ext4_map_blocks_atomic()``. EXT4 also force commits the current "
"journalling transaction in case if allocation is done over mixed mapping. "
"This ensures any pending metadata updates (like unwritten to written extents "
"conversion) in this range are in consistent state with the file data blocks, "
"before performing the actual write I/O. If the commit fails, the whole I/O "
"must be aborted to prevent from any possible torn writes. Only after this "
"step, the actual data write operation is performed by the iomap."
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:108
msgid "Handling Split Extents Across Leaf Blocks"
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:110
msgid ""
"There can be a special edge case where we have logically and physically "
"contiguous extents stored in separate leaf nodes of the on-disk extent tree. "
"This occurs because on-disk extent tree merges only happens within the leaf "
"blocks except for a case where we have 2-level tree which can get merged and "
"collapsed entirely into the inode. If such a layout exists and, in the worst "
"case, the extent status cache entries are reclaimed due to memory pressure, "
"``ext4_map_blocks()`` may never return a single contiguous extent for these "
"split leaf extents."
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:119
msgid ""
"To address this edge case, a new get block flag "
"``EXT4_GET_BLOCKS_QUERY_LEAF_BLOCKS flag`` is added to enhance the "
"``ext4_map_query_blocks()`` lookup behavior."
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:123
msgid ""
"This new get block flag allows ``ext4_map_blocks()`` to first check if there "
"is an entry in the extent status cache for the full range. If not present, "
"it consults the on-disk extent tree using ``ext4_map_query_blocks()``. If "
"the located extent is at the end of a leaf node, it probes the next logical "
"block (lblk) to detect a contiguous extent in the adjacent leaf."
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:130
msgid ""
"For now only one additional leaf block is queried to maintain efficiency, as "
"atomic writes are typically constrained to small sizes (e.g. [blocksize, "
"clustersize])."
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:136
msgid "Handling Journal transactions"
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:138
msgid ""
"To support multi-fsblock atomic writes, we ensure enough journal credits are "
"reserved during:"
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:141
msgid ""
"Block allocation time in ``ext4_iomap_alloc()``. We first query if there "
"could be a mixed mapping for the underlying requested range. If yes, then we "
"reserve credits of up to ``m_len``, assuming every alternate block can be an "
"unwritten extent followed by a hole."
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:146
msgid ""
"During ``->end_io()`` call, we make sure a single transaction is started for "
"doing unwritten-to-written conversion. The loop for conversion is mainly "
"only required to handle a split extent across leaf blocks."
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:151
msgid "How to"
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:154
msgid "Creating Filesystems with Atomic Write Support"
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:156
msgid ""
"First check the atomic write units supported by block device. See :ref:"
"`atomic_write_bdev_support` for more details."
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:159
msgid ""
"For single-fsblock atomic writes with a larger block size (on systems with "
"block size < page size):"
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:168
msgid "For multi-fsblock atomic writes with bigalloc:"
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:175
msgid ""
"Where ``-b`` specifies the block size, ``-C`` specifies the cluster size in "
"bytes, and ``-O bigalloc`` enables the bigalloc feature."
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:179
msgid "Application Interface"
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:181
msgid ""
"Applications can use the ``pwritev2()`` system call with the ``RWF_ATOMIC`` "
"flag to perform atomic writes:"
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:188
msgid ""
"The write must be aligned to the filesystem's block size and not exceed the "
"filesystem's maximum atomic write unit size. See "
"``generic_atomic_write_valid()`` for more details."
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:192
msgid ""
"``statx()`` system call with ``STATX_WRITE_ATOMIC`` flag can provides "
"following details:"
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:195
msgid "``stx_atomic_write_unit_min``: Minimum size of an atomic write request."
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:196
msgid "``stx_atomic_write_unit_max``: Maximum size of an atomic write request."
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:197
msgid ""
"``stx_atomic_write_segments_max``: Upper limit for segments. The number of "
"separate memory buffers that can be gathered into a write operation (e.g., "
"the iovcnt parameter for IOV_ITER). Currently, this is always set to one."
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:201
msgid ""
"The STATX_ATTR_WRITE_ATOMIC flag in ``statx->attributes`` is set if atomic "
"writes are supported."
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:207
msgid "Hardware Support"
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:209
msgid ""
"The underlying storage device must support atomic write operations. Modern "
"NVMe and SCSI devices often provide this capability. The Linux kernel "
"exposes this information through sysfs:"
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:213
msgid ""
"``/sys/block/<device>/queue/atomic_write_unit_min`` - Minimum atomic write "
"size"
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:214
msgid ""
"``/sys/block/<device>/queue/atomic_write_unit_max`` - Maximum atomic write "
"size"
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:216
msgid ""
"Nonzero values for these attributes indicate that the device supports atomic "
"writes."
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:220
msgid "See Also"
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:222
msgid ":doc:`bigalloc` - Documentation on the bigalloc feature"
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:223
msgid ":doc:`allocators` - Documentation on block allocation in ext4"
msgstr ""

#: ../../../filesystems/ext4/atomic_writes.rst:224
msgid ""
"Support for atomic block writes in 6.13: https://lwn.net/Articles/1009298/"
msgstr ""
