# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../filesystems/porting.rst:3
msgid "Changes since 2.5.0:"
msgstr ""

#: ../../../filesystems/porting.rst:5 ../../../filesystems/porting.rst:16
#: ../../../filesystems/porting.rst:54 ../../../filesystems/porting.rst:79
#: ../../../filesystems/porting.rst:89 ../../../filesystems/porting.rst:98
#: ../../../filesystems/porting.rst:110 ../../../filesystems/porting.rst:117
#: ../../../filesystems/porting.rst:124 ../../../filesystems/porting.rst:131
#: ../../../filesystems/porting.rst:144 ../../../filesystems/porting.rst:152
#: ../../../filesystems/porting.rst:160 ../../../filesystems/porting.rst:183
#: ../../../filesystems/porting.rst:227 ../../../filesystems/porting.rst:233
#: ../../../filesystems/porting.rst:241 ../../../filesystems/porting.rst:260
#: ../../../filesystems/porting.rst:267 ../../../filesystems/porting.rst:275
#: ../../../filesystems/porting.rst:285 ../../../filesystems/porting.rst:293
#: ../../../filesystems/porting.rst:299 ../../../filesystems/porting.rst:305
#: ../../../filesystems/porting.rst:360 ../../../filesystems/porting.rst:369
#: ../../../filesystems/porting.rst:377 ../../../filesystems/porting.rst:385
#: ../../../filesystems/porting.rst:394 ../../../filesystems/porting.rst:407
#: ../../../filesystems/porting.rst:421 ../../../filesystems/porting.rst:436
#: ../../../filesystems/porting.rst:447 ../../../filesystems/porting.rst:457
#: ../../../filesystems/porting.rst:468 ../../../filesystems/porting.rst:488
#: ../../../filesystems/porting.rst:507 ../../../filesystems/porting.rst:514
#: ../../../filesystems/porting.rst:523 ../../../filesystems/porting.rst:530
#: ../../../filesystems/porting.rst:536 ../../../filesystems/porting.rst:548
#: ../../../filesystems/porting.rst:559 ../../../filesystems/porting.rst:566
#: ../../../filesystems/porting.rst:573 ../../../filesystems/porting.rst:581
#: ../../../filesystems/porting.rst:588 ../../../filesystems/porting.rst:593
#: ../../../filesystems/porting.rst:600 ../../../filesystems/porting.rst:610
#: ../../../filesystems/porting.rst:619 ../../../filesystems/porting.rst:631
#: ../../../filesystems/porting.rst:641 ../../../filesystems/porting.rst:651
#: ../../../filesystems/porting.rst:660 ../../../filesystems/porting.rst:671
#: ../../../filesystems/porting.rst:694 ../../../filesystems/porting.rst:710
#: ../../../filesystems/porting.rst:716 ../../../filesystems/porting.rst:728
#: ../../../filesystems/porting.rst:738 ../../../filesystems/porting.rst:745
#: ../../../filesystems/porting.rst:753 ../../../filesystems/porting.rst:762
#: ../../../filesystems/porting.rst:773 ../../../filesystems/porting.rst:788
#: ../../../filesystems/porting.rst:796 ../../../filesystems/porting.rst:812
#: ../../../filesystems/porting.rst:841 ../../../filesystems/porting.rst:849
#: ../../../filesystems/porting.rst:857 ../../../filesystems/porting.rst:865
#: ../../../filesystems/porting.rst:872 ../../../filesystems/porting.rst:879
#: ../../../filesystems/porting.rst:888 ../../../filesystems/porting.rst:895
#: ../../../filesystems/porting.rst:904 ../../../filesystems/porting.rst:913
#: ../../../filesystems/porting.rst:921 ../../../filesystems/porting.rst:932
#: ../../../filesystems/porting.rst:942 ../../../filesystems/porting.rst:953
#: ../../../filesystems/porting.rst:979 ../../../filesystems/porting.rst:1049
#: ../../../filesystems/porting.rst:1056 ../../../filesystems/porting.rst:1065
#: ../../../filesystems/porting.rst:1074 ../../../filesystems/porting.rst:1083
#: ../../../filesystems/porting.rst:1092 ../../../filesystems/porting.rst:1101
#: ../../../filesystems/porting.rst:1109 ../../../filesystems/porting.rst:1126
#: ../../../filesystems/porting.rst:1138 ../../../filesystems/porting.rst:1145
#: ../../../filesystems/porting.rst:1161 ../../../filesystems/porting.rst:1169
#: ../../../filesystems/porting.rst:1184 ../../../filesystems/porting.rst:1189
#: ../../../filesystems/porting.rst:1207 ../../../filesystems/porting.rst:1216
#: ../../../filesystems/porting.rst:1233 ../../../filesystems/porting.rst:1243
#: ../../../filesystems/porting.rst:1250 ../../../filesystems/porting.rst:1259
#: ../../../filesystems/porting.rst:1266 ../../../filesystems/porting.rst:1277
msgid "---"
msgstr ""

#: ../../../filesystems/porting.rst:7 ../../../filesystems/porting.rst:18
#: ../../../filesystems/porting.rst:162 ../../../filesystems/porting.rst:229
#: ../../../filesystems/porting.rst:269 ../../../filesystems/porting.rst:409
#: ../../../filesystems/porting.rst:595 ../../../filesystems/porting.rst:748
#: ../../../filesystems/porting.rst:798 ../../../filesystems/porting.rst:1128
#: ../../../filesystems/porting.rst:1163 ../../../filesystems/porting.rst:1171
msgid "**recommended**"
msgstr ""

#: ../../../filesystems/porting.rst:9
msgid ""
"New helpers: sb_bread(), sb_getblk(), sb_find_get_block(), set_bh(), "
"sb_set_blocksize() and sb_min_blocksize()."
msgstr ""

#: ../../../filesystems/porting.rst:12
msgid "Use them."
msgstr ""

#: ../../../filesystems/porting.rst:14
msgid "(sb_find_get_block() replaces 2.4's get_hash_table())"
msgstr ""

#: ../../../filesystems/porting.rst:20
msgid "New methods: ->alloc_inode() and ->destroy_inode()."
msgstr ""

#: ../../../filesystems/porting.rst:22
msgid "Remove inode->u.foo_inode_i"
msgstr ""

#: ../../../filesystems/porting.rst:24
msgid "Declare::"
msgstr ""

#: ../../../filesystems/porting.rst:35
msgid "Use FOO_I(inode) instead of &inode->u.foo_inode_i;"
msgstr ""

#: ../../../filesystems/porting.rst:37
msgid ""
"Add foo_alloc_inode() and foo_destroy_inode() - the former should allocate "
"foo_inode_info and return the address of ->vfs_inode, the latter should free "
"FOO_I(inode) (see in-tree filesystems for examples)."
msgstr ""

#: ../../../filesystems/porting.rst:41
msgid "Make them ->alloc_inode and ->destroy_inode in your super_operations."
msgstr ""

#: ../../../filesystems/porting.rst:43
msgid ""
"Keep in mind that now you need explicit initialization of private data "
"typically between calling iget_locked() and unlocking the inode."
msgstr ""

#: ../../../filesystems/porting.rst:46
msgid "At some point that will become mandatory."
msgstr ""

#: ../../../filesystems/porting.rst:48 ../../../filesystems/porting.rst:56
#: ../../../filesystems/porting.rst:81 ../../../filesystems/porting.rst:100
#: ../../../filesystems/porting.rst:112 ../../../filesystems/porting.rst:133
#: ../../../filesystems/porting.rst:146 ../../../filesystems/porting.rst:154
#: ../../../filesystems/porting.rst:177 ../../../filesystems/porting.rst:185
#: ../../../filesystems/porting.rst:235 ../../../filesystems/porting.rst:243
#: ../../../filesystems/porting.rst:262 ../../../filesystems/porting.rst:277
#: ../../../filesystems/porting.rst:287 ../../../filesystems/porting.rst:295
#: ../../../filesystems/porting.rst:301 ../../../filesystems/porting.rst:307
#: ../../../filesystems/porting.rst:314 ../../../filesystems/porting.rst:321
#: ../../../filesystems/porting.rst:332 ../../../filesystems/porting.rst:362
#: ../../../filesystems/porting.rst:371 ../../../filesystems/porting.rst:379
#: ../../../filesystems/porting.rst:387 ../../../filesystems/porting.rst:396
#: ../../../filesystems/porting.rst:423 ../../../filesystems/porting.rst:438
#: ../../../filesystems/porting.rst:449 ../../../filesystems/porting.rst:459
#: ../../../filesystems/porting.rst:470 ../../../filesystems/porting.rst:480
#: ../../../filesystems/porting.rst:490 ../../../filesystems/porting.rst:509
#: ../../../filesystems/porting.rst:516 ../../../filesystems/porting.rst:525
#: ../../../filesystems/porting.rst:532 ../../../filesystems/porting.rst:538
#: ../../../filesystems/porting.rst:542 ../../../filesystems/porting.rst:550
#: ../../../filesystems/porting.rst:561 ../../../filesystems/porting.rst:568
#: ../../../filesystems/porting.rst:575 ../../../filesystems/porting.rst:583
#: ../../../filesystems/porting.rst:590 ../../../filesystems/porting.rst:602
#: ../../../filesystems/porting.rst:612 ../../../filesystems/porting.rst:621
#: ../../../filesystems/porting.rst:633 ../../../filesystems/porting.rst:643
#: ../../../filesystems/porting.rst:653 ../../../filesystems/porting.rst:662
#: ../../../filesystems/porting.rst:673 ../../../filesystems/porting.rst:696
#: ../../../filesystems/porting.rst:712 ../../../filesystems/porting.rst:718
#: ../../../filesystems/porting.rst:730 ../../../filesystems/porting.rst:740
#: ../../../filesystems/porting.rst:755 ../../../filesystems/porting.rst:764
#: ../../../filesystems/porting.rst:775 ../../../filesystems/porting.rst:790
#: ../../../filesystems/porting.rst:843 ../../../filesystems/porting.rst:851
#: ../../../filesystems/porting.rst:859 ../../../filesystems/porting.rst:867
#: ../../../filesystems/porting.rst:874 ../../../filesystems/porting.rst:881
#: ../../../filesystems/porting.rst:890 ../../../filesystems/porting.rst:897
#: ../../../filesystems/porting.rst:906 ../../../filesystems/porting.rst:915
#: ../../../filesystems/porting.rst:934 ../../../filesystems/porting.rst:944
#: ../../../filesystems/porting.rst:955 ../../../filesystems/porting.rst:981
#: ../../../filesystems/porting.rst:1051 ../../../filesystems/porting.rst:1058
#: ../../../filesystems/porting.rst:1067 ../../../filesystems/porting.rst:1076
#: ../../../filesystems/porting.rst:1085 ../../../filesystems/porting.rst:1094
#: ../../../filesystems/porting.rst:1103 ../../../filesystems/porting.rst:1111
#: ../../../filesystems/porting.rst:1140 ../../../filesystems/porting.rst:1147
#: ../../../filesystems/porting.rst:1191 ../../../filesystems/porting.rst:1245
#: ../../../filesystems/porting.rst:1261 ../../../filesystems/porting.rst:1268
msgid "**mandatory**"
msgstr ""

#: ../../../filesystems/porting.rst:50
msgid ""
"The foo_inode_info should always be allocated through alloc_inode_sb() "
"rather than kmem_cache_alloc() or kmalloc() related to set up the inode "
"reclaim context correctly."
msgstr ""

#: ../../../filesystems/porting.rst:58
msgid "Change of file_system_type method (->read_super to ->get_sb)"
msgstr ""

#: ../../../filesystems/porting.rst:60
msgid ""
"->read_super() is no more.  Ditto for DECLARE_FSTYPE and DECLARE_FSTYPE_DEV."
msgstr ""

#: ../../../filesystems/porting.rst:62
msgid ""
"Turn your foo_read_super() into a function that would return 0 in case of "
"success and negative number in case of error (-EINVAL unless you have more "
"informative error value to report).  Call it foo_fill_super().  Now declare::"
msgstr ""

#: ../../../filesystems/porting.rst:73
msgid ""
"(or similar with s/bdev/nodev/ or s/bdev/single/, depending on the kind of "
"filesystem)."
msgstr ""

#: ../../../filesystems/porting.rst:76
msgid ""
"Replace DECLARE_FSTYPE... with explicit initializer and have ->get_sb set as "
"foo_get_sb."
msgstr ""

#: ../../../filesystems/porting.rst:83
msgid ""
"Locking change: ->s_vfs_rename_sem is taken only by cross-directory renames. "
"Most likely there is no need to change anything, but if you relied on global "
"exclusion between renames for some internal purpose - you need to change "
"your internal locking.  Otherwise exclusion warranties remain the same (i.e. "
"parents and victim are locked, etc.)."
msgstr ""

#: ../../../filesystems/porting.rst:91 ../../../filesystems/porting.rst:119
#: ../../../filesystems/porting.rst:126
msgid "**informational**"
msgstr ""

#: ../../../filesystems/porting.rst:93
msgid ""
"Now we have the exclusion between ->lookup() and directory removal (by -"
">rmdir() and ->rename()).  If you used to need that exclusion and do it by "
"internal locking (most of filesystems couldn't care less) - you can relax "
"your locking."
msgstr ""

#: ../../../filesystems/porting.rst:102
msgid ""
"->lookup(), ->truncate(), ->create(), ->unlink(), ->mknod(), ->mkdir(), -"
">rmdir(), ->link(), ->lseek(), ->symlink(), ->rename() and ->readdir() are "
"called without BKL now.  Grab it on entry, drop upon return - that will "
"guarantee the same locking you used to have.  If your method or its parts do "
"not need BKL - better yet, now you can shift lock_kernel() and "
"unlock_kernel() so that they would protect exactly what needs to be "
"protected."
msgstr ""

#: ../../../filesystems/porting.rst:114
msgid ""
"BKL is also moved from around sb operations. BKL should have been shifted "
"into individual fs sb_op functions.  If you don't need it, remove it."
msgstr ""

#: ../../../filesystems/porting.rst:121
msgid ""
"check for ->link() target not being a directory is done by callers.  Feel "
"free to drop it..."
msgstr ""

#: ../../../filesystems/porting.rst:128
msgid ""
"->link() callers hold ->i_mutex on the object we are linking to.  Some of "
"your problems might be over..."
msgstr ""

#: ../../../filesystems/porting.rst:135
msgid ""
"new file_system_type method - kill_sb(superblock).  If you are converting an "
"existing filesystem, set it according to ->fs_flags::"
msgstr ""

#: ../../../filesystems/porting.rst:142
msgid "FS_LITTER is gone - just remove it from fs_flags."
msgstr ""

#: ../../../filesystems/porting.rst:148
msgid ""
"FS_SINGLE is gone (actually, that had happened back when ->get_sb() went in "
"- and hadn't been documented ;-/).  Just remove it from fs_flags (and see -"
">get_sb() entry for other actions)."
msgstr ""

#: ../../../filesystems/porting.rst:156
msgid ""
"->setattr() is called without BKL now.  Caller _always_ holds ->i_mutex, so "
"watch for ->i_mutex-grabbing code that might be used by your ->setattr(). "
"Callers of notify_change() need ->i_mutex now."
msgstr ""

#: ../../../filesystems/porting.rst:164
msgid ""
"New super_block field ``struct export_operations *s_export_op`` for explicit "
"support for exporting, e.g. via NFS.  The structure is fully documented at "
"its declaration in include/linux/fs.h, and in Documentation/filesystems/nfs/"
"exporting.rst."
msgstr ""

#: ../../../filesystems/porting.rst:169
msgid ""
"Briefly it allows for the definition of decode_fh and encode_fh operations "
"to encode and decode filehandles, and allows the filesystem to use a "
"standard helper function for decode_fh, and provide file-system specific "
"support for this helper, particularly get_parent."
msgstr ""

#: ../../../filesystems/porting.rst:174
msgid ""
"It is planned that this will be required for exporting once the code settles "
"down a bit."
msgstr ""

#: ../../../filesystems/porting.rst:179
msgid ""
"s_export_op is now required for exporting a filesystem. isofs, ext2, ext3, "
"fat can be used as examples of very different filesystems."
msgstr ""

#: ../../../filesystems/porting.rst:187
msgid ""
"iget4() and the read_inode2 callback have been superseded by iget5_locked() "
"which has the following prototype::"
msgstr ""

#: ../../../filesystems/porting.rst:195
msgid ""
"'test' is an additional function that can be used when the inode number is "
"not sufficient to identify the actual file object. 'set' should be a non-"
"blocking function that initializes those parts of a newly created inode to "
"allow the test function to succeed. 'data' is passed as an opaque value to "
"both test and set functions."
msgstr ""

#: ../../../filesystems/porting.rst:201
msgid ""
"When the inode has been created by iget5_locked(), it will be returned with "
"the I_NEW flag set and will still be locked.  The filesystem then needs to "
"finalize the initialization. Once the inode is initialized it must be "
"unlocked by calling unlock_new_inode()."
msgstr ""

#: ../../../filesystems/porting.rst:206
msgid ""
"The filesystem is responsible for setting (and possibly testing) i_ino when "
"appropriate. There is also a simpler iget_locked function that just takes "
"the superblock and inode number as arguments and does the test and set for "
"you."
msgstr ""

#: ../../../filesystems/porting.rst:211
msgid "e.g.::"
msgstr ""

#: ../../../filesystems/porting.rst:223
msgid ""
"Note that if the process of setting up a new inode fails, then iget_failed() "
"should be called on the inode to render it dead, and an appropriate error "
"should be passed back to the caller."
msgstr ""

#: ../../../filesystems/porting.rst:231
msgid "->getattr() finally getting used.  See instances in nfs, minix, etc."
msgstr ""

#: ../../../filesystems/porting.rst:237
msgid ""
"->revalidate() is gone.  If your filesystem had it - provide ->getattr() and "
"let it call whatever you had as ->revlidate() + (for symlinks that had -"
">revalidate()) add calls in ->follow_link()/->readlink()."
msgstr ""

#: ../../../filesystems/porting.rst:245
msgid ""
"->d_parent changes are not protected by BKL anymore.  Read access is safe if "
"at least one of the following is true:"
msgstr ""

#: ../../../filesystems/porting.rst:248
msgid "filesystem has no cross-directory rename()"
msgstr ""

#: ../../../filesystems/porting.rst:249
msgid ""
"we know that parent had been locked (e.g. we are looking at ->d_parent of -"
">lookup() argument)."
msgstr ""

#: ../../../filesystems/porting.rst:251
msgid "we are called from ->rename()."
msgstr ""

#: ../../../filesystems/porting.rst:252
msgid "the child's ->d_lock is held"
msgstr ""

#: ../../../filesystems/porting.rst:254
msgid ""
"Audit your code and add locking if needed.  Notice that any place that is "
"not protected by the conditions above is risky even in the old tree - you "
"had been relying on BKL and that's prone to screwups.  Old tree had quite a "
"few holes of that kind - unprotected access to ->d_parent leading to "
"anything from oops to silent memory corruption."
msgstr ""

#: ../../../filesystems/porting.rst:264
msgid ""
"FS_NOMOUNT is gone.  If you use it - just set SB_NOUSER in flags (see rootfs "
"for one kind of solution and bdev/socket/pipe for another)."
msgstr ""

#: ../../../filesystems/porting.rst:271
msgid ""
"Use bdev_read_only(bdev) instead of is_read_only(kdev).  The latter is still "
"alive, but only because of the mess in drivers/s390/block/dasd.c. As soon as "
"it gets fixed is_read_only() will die."
msgstr ""

#: ../../../filesystems/porting.rst:279
msgid ""
"->permission() is called without BKL now. Grab it on entry, drop upon return "
"- that will guarantee the same locking you used to have.  If your method or "
"its parts do not need BKL - better yet, now you can shift lock_kernel() and "
"unlock_kernel() so that they would protect exactly what needs to be "
"protected."
msgstr ""

#: ../../../filesystems/porting.rst:289
msgid ""
"->statfs() is now called without BKL held.  BKL should have been shifted "
"into individual fs sb_op functions where it's not clear that it's safe to "
"remove it.  If you don't need it, remove it."
msgstr ""

#: ../../../filesystems/porting.rst:297
msgid "is_read_only() is gone; use bdev_read_only() instead."
msgstr ""

#: ../../../filesystems/porting.rst:303
msgid "destroy_buffers() is gone; use invalidate_bdev()."
msgstr ""

#: ../../../filesystems/porting.rst:309
msgid ""
"fsync_dev() is gone; use fsync_bdev().  NOTE: lvm breakage is deliberate; as "
"soon as struct block_device * is propagated in a reasonable way by that code "
"fixing will become trivial; until then nothing can be done."
msgstr ""

#: ../../../filesystems/porting.rst:316
msgid ""
"block truncation on error exit from ->write_begin, and ->direct_IO moved "
"from generic methods (block_write_begin, cont_write_begin, nobh_write_begin, "
"blockdev_direct_IO*) to callers.  Take a look at ext2_write_failed and "
"callers for an example."
msgstr ""

#: ../../../filesystems/porting.rst:323
msgid ""
"->truncate is gone.  The whole truncate sequence needs to be implemented in -"
">setattr, which is now mandatory for filesystems implementing on-disk size "
"changes.  Start with a copy of the old inode_setattr and vmtruncate, and the "
"reorder the vmtruncate + foofs_vmtruncate sequence to be in order of zeroing "
"blocks using block_truncate_page or similar helpers, size update and on "
"finally on-disk truncation which should not fail. setattr_prepare (which "
"used to be inode_change_ok) now includes the size checks for ATTR_SIZE and "
"must be called in the beginning of ->setattr unconditionally."
msgstr ""

#: ../../../filesystems/porting.rst:334
msgid ""
"->clear_inode() and ->delete_inode() are gone; ->evict_inode() should be "
"used instead.  It gets called whenever the inode is evicted, whether it has "
"remaining links or not.  Caller does *not* evict the pagecache or inode-"
"associated metadata buffers; the method has to use "
"truncate_inode_pages_final() to get rid of those. Caller makes sure async "
"writeback cannot be running for the inode while (or after) ->evict_inode() "
"is called."
msgstr ""

#: ../../../filesystems/porting.rst:341
msgid ""
"->drop_inode() returns int now; it's called on final iput() with inode-"
">i_lock held and it returns true if filesystems wants the inode to be "
"dropped.  As before, generic_drop_inode() is still the default and it's been "
"updated appropriately.  generic_delete_inode() is also alive and it consists "
"simply of return 1.  Note that all actual eviction work is done by caller "
"after ->drop_inode() returns."
msgstr ""

#: ../../../filesystems/porting.rst:348
msgid ""
"As before, clear_inode() must be called exactly once on each call of -"
">evict_inode() (as it used to be for each call of ->delete_inode()).  Unlike "
"before, if you are using inode-associated metadata buffers (i.e. "
"mark_buffer_dirty_inode()), it's your responsibility to call "
"invalidate_inode_buffers() before clear_inode()."
msgstr ""

#: ../../../filesystems/porting.rst:354
msgid ""
"NOTE: checking i_nlink in the beginning of ->write_inode() and bailing out "
"if it's zero is not *and* *never* *had* *been* enough.  Final unlink() and "
"iput() may happen while the inode is in the middle of ->write_inode(); e.g. "
"if you blindly free the on-disk inode, you may end up doing that while -"
">write_inode() is writing to it."
msgstr ""

#: ../../../filesystems/porting.rst:364
msgid ""
".d_delete() now only advises the dcache as to whether or not to cache "
"unreferenced dentries, and is now only called when the dentry refcount goes "
"to 0. Even on 0 refcount transition, it must be able to tolerate being "
"called 0, 1, or more times (eg. constant, idempotent)."
msgstr ""

#: ../../../filesystems/porting.rst:373
msgid ""
".d_compare() calling convention and locking rules are significantly changed. "
"Read updated documentation in Documentation/filesystems/vfs.rst (and look at "
"examples of other filesystems) for guidance."
msgstr ""

#: ../../../filesystems/porting.rst:381
msgid ""
".d_hash() calling convention and locking rules are significantly changed. "
"Read updated documentation in Documentation/filesystems/vfs.rst (and look at "
"examples of other filesystems) for guidance."
msgstr ""

#: ../../../filesystems/porting.rst:389
msgid ""
"dcache_lock is gone, replaced by fine grained locks. See fs/dcache.c for "
"details of what locks to replace dcache_lock with in order to protect "
"particular things. Most of the time, a filesystem only needs ->d_lock, which "
"protects *all* the dcache state of a given dentry."
msgstr ""

#: ../../../filesystems/porting.rst:398
msgid ""
"Filesystems must RCU-free their inodes, if they can have been accessed via "
"rcu-walk path walk (basically, if the file can have had a path name in the "
"vfs namespace)."
msgstr ""

#: ../../../filesystems/porting.rst:402
msgid ""
"Even though i_dentry and i_rcu share storage in a union, we will initialize "
"the former in inode_init_always(), so just leave it alone in the callback.  "
"It used to be necessary to clean it there, but not anymore (starting at 3.2)."
msgstr ""

#: ../../../filesystems/porting.rst:411
msgid ""
"vfs now tries to do path walking in \"rcu-walk mode\", which avoids atomic "
"operations and scalability hazards on dentries and inodes (see Documentation/"
"filesystems/path-lookup.txt). d_hash and d_compare changes (above) are "
"examples of the changes required to support this. For more complex "
"filesystem callbacks, the vfs drops out of rcu-walk mode before the fs call, "
"so no changes are required to the filesystem. However, this is costly and "
"loses the benefits of rcu-walk mode. We will begin to add filesystem "
"callbacks that are rcu-walk aware, shown below. Filesystems should take "
"advantage of this where possible."
msgstr ""

#: ../../../filesystems/porting.rst:425
msgid ""
"d_revalidate is a callback that is made on every path element (if the "
"filesystem provides it), which requires dropping out of rcu-walk mode. This "
"may now be called in rcu-walk mode (nd->flags & LOOKUP_RCU). -ECHILD should "
"be returned if the filesystem cannot handle rcu-walk. See Documentation/"
"filesystems/vfs.rst for more details."
msgstr ""

#: ../../../filesystems/porting.rst:431
msgid ""
"permission is an inode permission check that is called on many or all "
"directory inodes on the way down a path walk (to check for exec permission). "
"It must now be rcu-walk aware (mask & MAY_NOT_BLOCK).  See Documentation/"
"filesystems/vfs.rst for more details."
msgstr ""

#: ../../../filesystems/porting.rst:440
msgid ""
"In ->fallocate() you must check the mode option passed in.  If your "
"filesystem does not support hole punching (deallocating space in the middle "
"of a file) you must return -EOPNOTSUPP if FALLOC_FL_PUNCH_HOLE is set in "
"mode. Currently you can only have FALLOC_FL_PUNCH_HOLE with "
"FALLOC_FL_KEEP_SIZE set, so the i_size should not change when hole punching, "
"even when puching the end of a file off."
msgstr ""

#: ../../../filesystems/porting.rst:451
msgid ""
"->get_sb() is gone.  Switch to use of ->mount().  Typically it's just a "
"matter of switching from calling ``get_sb_``... to ``mount_``... and "
"changing the function type.  If you were doing it manually, just switch from "
"setting ->mnt_root to some pointer to returning that pointer.  On errors "
"return ERR_PTR(...)."
msgstr ""

#: ../../../filesystems/porting.rst:461
msgid ""
"->permission() and generic_permission()have lost flags argument; instead of "
"passing IPERM_FLAG_RCU we add MAY_NOT_BLOCK into mask."
msgstr ""

#: ../../../filesystems/porting.rst:464
msgid ""
"generic_permission() has also lost the check_acl argument; ACL checking has "
"been taken to VFS and filesystems need to provide a non-NULL ->i_op-"
">get_inode_acl to read an ACL from disk."
msgstr ""

#: ../../../filesystems/porting.rst:472
msgid ""
"If you implement your own ->llseek() you must handle SEEK_HOLE and "
"SEEK_DATA.  You can handle this by returning -EINVAL, but it would be nicer "
"to support it in some way.  The generic handler assumes that the entire file "
"is data and there is a virtual hole at the end of the file.  So if the "
"provided offset is less than i_size and SEEK_DATA is specified, return the "
"same offset. If the above is true for the offset and you are given "
"SEEK_HOLE, return the end of the file.  If the offset is i_size or greater "
"return -ENXIO in either case."
msgstr ""

#: ../../../filesystems/porting.rst:482
msgid ""
"If you have your own ->fsync() you must make sure to call "
"filemap_write_and_wait_range() so that all dirty pages are synced out "
"properly. You must also keep in mind that ->fsync() is not called with "
"i_mutex held anymore, so if you require i_mutex locking you must make sure "
"to take it and release it yourself."
msgstr ""

#: ../../../filesystems/porting.rst:492
msgid ""
"d_alloc_root() is gone, along with a lot of bugs caused by code misusing "
"it.  Replacement: d_make_root(inode).  On success d_make_root(inode) "
"allocates and returns a new dentry instantiated with the passed in inode. On "
"failure NULL is returned and the passed in inode is dropped so the reference "
"to inode is consumed in all cases and failure handling need not do any "
"cleanup for the inode.  If d_make_root(inode) is passed a NULL inode it "
"returns NULL and also requires no further error handling. Typical usage is::"
msgstr ""

#: ../../../filesystems/porting.rst:511
msgid ""
"The witch is dead!  Well, 2/3 of it, anyway.  ->d_revalidate() and -"
">lookup() do *not* take struct nameidata anymore; just the flags."
msgstr ""

#: ../../../filesystems/porting.rst:518
msgid ""
"->create() doesn't take ``struct nameidata *``; unlike the previous two, it "
"gets \"is it an O_EXCL or equivalent?\" boolean argument.  Note that local "
"filesystems can ignore this argument - they are guaranteed that the object "
"doesn't exist.  It's remote/distributed ones that might care..."
msgstr ""

#: ../../../filesystems/porting.rst:527
msgid ""
"FS_REVAL_DOT is gone; if you used to have it, add ->d_weak_revalidate() in "
"your dentry operations instead."
msgstr ""

#: ../../../filesystems/porting.rst:534
msgid "vfs_readdir() is gone; switch to iterate_dir() instead"
msgstr ""

#: ../../../filesystems/porting.rst:540
msgid "->readdir() is gone now; switch to ->iterate_shared()"
msgstr ""

#: ../../../filesystems/porting.rst:544
msgid ""
"vfs_follow_link has been removed.  Filesystems must use nd_set_link from -"
">follow_link for normal symlinks, or nd_jump_link for magic /proc/<pid> "
"style links."
msgstr ""

#: ../../../filesystems/porting.rst:552
msgid ""
"iget5_locked()/ilookup5()/ilookup5_nowait() test() callback used to be "
"called with both ->i_lock and inode_hash_lock held; the former is *not* "
"taken anymore, so verify that your callbacks do not rely on it (none of the "
"in-tree instances did).  inode_hash_lock is still held, of course, so they "
"are still serialized wrt removal from inode hash, as well as wrt set() "
"callback of iget5_locked()."
msgstr ""

#: ../../../filesystems/porting.rst:563
msgid ""
"d_materialise_unique() is gone; d_splice_alias() does everything you need "
"now.  Remember that they have opposite orders of arguments ;-/"
msgstr ""

#: ../../../filesystems/porting.rst:570
msgid ""
"f_dentry is gone; use f_path.dentry, or, better yet, see if you can avoid it "
"entirely."
msgstr ""

#: ../../../filesystems/porting.rst:577
msgid ""
"never call ->read() and ->write() directly; use __vfs_{read,write} or "
"wrappers; instead of checking for ->write or ->read being NULL, look for "
"FMODE_CAN_{WRITE,READ} in file->f_mode."
msgstr ""

#: ../../../filesystems/porting.rst:585
msgid ""
"do _not_ use new_sync_{read,write} for ->read/->write; leave it NULL instead."
msgstr ""

#: ../../../filesystems/porting.rst:591
msgid "->aio_read/->aio_write are gone.  Use ->read_iter/->write_iter."
msgstr ""

#: ../../../filesystems/porting.rst:597
msgid ""
"for embedded (\"fast\") symlinks just set inode->i_link to wherever the "
"symlink body is and use simple_follow_link() as ->follow_link()."
msgstr ""

#: ../../../filesystems/porting.rst:604
msgid ""
"calling conventions for ->follow_link() have changed.  Instead of returning "
"cookie and using nd_set_link() to store the body to traverse, we return the "
"body to traverse and store the cookie using explicit void ** argument. "
"nameidata isn't passed at all - nd_jump_link() doesn't need it and "
"nd_[gs]et_link() is gone."
msgstr ""

#: ../../../filesystems/porting.rst:614
msgid ""
"calling conventions for ->put_link() have changed.  It gets inode instead of "
"dentry,  it does not get nameidata at all and it gets called only when "
"cookie is non-NULL.  Note that link body isn't available anymore, so if you "
"need it, store it as cookie."
msgstr ""

#: ../../../filesystems/porting.rst:623
msgid ""
"any symlink that might use page_follow_link_light/page_put_link() must have "
"inode_nohighmem(inode) called before anything might start playing with its "
"pagecache.  No highmem pages should end up in the pagecache of such "
"symlinks.  That includes any preseeding that might be done during symlink "
"creation.  page_symlink() will honour the mapping gfp flags, so once you've "
"done inode_nohighmem() it's safe to use, but if you allocate and insert the "
"page manually, make sure to use the right gfp flags."
msgstr ""

#: ../../../filesystems/porting.rst:635
msgid "->follow_link() is replaced with ->get_link(); same API, except that"
msgstr ""

#: ../../../filesystems/porting.rst:637
msgid "->get_link() gets inode as a separate argument"
msgstr ""

#: ../../../filesystems/porting.rst:638
msgid ""
"->get_link() may be called in RCU mode - in that case NULL dentry is passed"
msgstr ""

#: ../../../filesystems/porting.rst:645
msgid ""
"->get_link() gets struct delayed_call ``*done`` now, and should do "
"set_delayed_call() where it used to set ``*cookie``."
msgstr ""

#: ../../../filesystems/porting.rst:648
msgid ""
"->put_link() is gone - just give the destructor to set_delayed_call() in -"
">get_link()."
msgstr ""

#: ../../../filesystems/porting.rst:655
msgid ""
"->getxattr() and xattr_handler.get() get dentry and inode passed separately. "
"dentry might be yet to be attached to inode, so do _not_ use its ->d_inode "
"in the instances.  Rationale: !@#!@# security_d_instantiate() needs to be "
"called before we attach dentry to inode."
msgstr ""

#: ../../../filesystems/porting.rst:664
msgid ""
"symlinks are no longer the only inodes that do *not* have i_bdev/i_cdev/ "
"i_pipe/i_link union zeroed out at inode eviction.  As the result, you can't "
"assume that non-NULL value in ->i_nlink at ->destroy_inode() implies that "
"it's a symlink.  Checking ->i_mode is really needed now.  In-tree we had to "
"fix shmem_destroy_callback() that used to take that kind of shortcut; watch "
"out, since that shortcut is no longer valid."
msgstr ""

#: ../../../filesystems/porting.rst:675
msgid ""
"->i_mutex is replaced with ->i_rwsem now.  inode_lock() et.al. work as they "
"used to - they just take it exclusive.  However, ->lookup() may be called "
"with parent locked shared.  Its instances must not"
msgstr ""

#: ../../../filesystems/porting.rst:679
msgid ""
"use d_instantiate) and d_rehash() separately - use d_add() or "
"d_splice_alias() instead."
msgstr ""

#: ../../../filesystems/porting.rst:681
msgid "use d_rehash() alone - call d_add(new_dentry, NULL) instead."
msgstr ""

#: ../../../filesystems/porting.rst:682
msgid ""
"in the unlikely case when (read-only) access to filesystem data structures "
"needs exclusion for some reason, arrange it yourself.  None of the in-tree "
"filesystems needed that."
msgstr ""

#: ../../../filesystems/porting.rst:685
msgid ""
"rely on ->d_parent and ->d_name not changing after dentry has been fed to "
"d_add() or d_splice_alias().  Again, none of the in-tree instances relied "
"upon that."
msgstr ""

#: ../../../filesystems/porting.rst:689
msgid ""
"We are guaranteed that lookups of the same name in the same directory will "
"not happen in parallel (\"same\" in the sense of your ->d_compare()). "
"Lookups on different names in the same directory can and do happen in "
"parallel now."
msgstr ""

#: ../../../filesystems/porting.rst:698
msgid ""
"->iterate_shared() is added. Exclusion on struct file level is still "
"provided (as well as that between it and lseek on the same struct file), but "
"if your directory has been opened several times, you can get these called in "
"parallel. Exclusion between that method and all directory-modifying ones is "
"still provided, of course."
msgstr ""

#: ../../../filesystems/porting.rst:705
msgid ""
"If you have any per-inode or per-dentry in-core data structures modified by -"
">iterate_shared(), you might need something to serialize the access to "
"them.  If you do dcache pre-seeding, you'll need to switch to "
"d_alloc_parallel() for that; look for in-tree examples."
msgstr ""

#: ../../../filesystems/porting.rst:714
msgid "->atomic_open() calls without O_CREAT may happen in parallel."
msgstr ""

#: ../../../filesystems/porting.rst:720
msgid ""
"->setxattr() and xattr_handler.set() get dentry and inode passed separately. "
"The xattr_handler.set() gets passed the user namespace of the mount the "
"inode is seen from so filesystems can idmap the i_uid and i_gid accordingly. "
"dentry might be yet to be attached to inode, so do _not_ use its ->d_inode "
"in the instances.  Rationale: !@#!@# security_d_instantiate() needs to be "
"called before we attach dentry to inode and !@#!@##!@$!$#!@#$!@$!@$ smack -"
">d_instantiate() uses not just ->getxattr() but ->setxattr() as well."
msgstr ""

#: ../../../filesystems/porting.rst:732
msgid ""
"->d_compare() doesn't get parent as a separate argument anymore.  If you "
"used it for finding the struct super_block involved, dentry->d_sb will work "
"just as well; if it's something more complicated, use dentry->d_parent. Just "
"be careful not to assume that fetching it more than once will yield the same "
"value - in RCU mode it could change under you."
msgstr ""

#: ../../../filesystems/porting.rst:742
msgid ""
"->rename() has an added flags argument.  Any flags not handled by the "
"filesystem should result in EINVAL being returned."
msgstr ""

#: ../../../filesystems/porting.rst:750
msgid ""
"->readlink is optional for symlinks.  Don't set, unless filesystem needs to "
"fake something for readlink(2)."
msgstr ""

#: ../../../filesystems/porting.rst:757
msgid ""
"->getattr() is now passed a struct path rather than a vfsmount and dentry "
"separately, and it now has request_mask and query_flags arguments to specify "
"the fields and sync type requested by statx.  Filesystems not supporting any "
"statx-specific features may ignore the new arguments."
msgstr ""

#: ../../../filesystems/porting.rst:766
msgid ""
"->atomic_open() calling conventions have changed.  Gone is ``int *opened``, "
"along with FILE_OPENED/FILE_CREATED.  In place of those we have FMODE_OPENED/"
"FMODE_CREATED, set in file->f_mode.  Additionally, return value for 'called "
"finish_no_open(), open it yourself' case has become 0, not 1.  Since "
"finish_no_open() itself is returning 0 now, that part does not need any "
"changes in ->atomic_open() instances."
msgstr ""

#: ../../../filesystems/porting.rst:777
msgid ""
"alloc_file() has become static now; two wrappers are to be used instead. "
"alloc_file_pseudo(inode, vfsmount, name, flags, ops) is for the cases when "
"dentry needs to be created; that's the majority of old alloc_file() users.  "
"Calling conventions: on success a reference to new struct file is returned "
"and callers reference to inode is subsumed by that.  On failure, ERR_PTR() "
"is returned and no caller's references are affected, so the caller needs to "
"drop the inode reference it held. alloc_file_clone(file, flags, ops) does "
"not affect any caller's references. On success you get a new struct file "
"sharing the mount/dentry with the original, on failure - ERR_PTR()."
msgstr ""

#: ../../../filesystems/porting.rst:792
msgid ""
"->clone_file_range() and ->dedupe_file_range have been replaced with -"
">remap_file_range().  See Documentation/filesystems/vfs.rst for more "
"information."
msgstr ""

#: ../../../filesystems/porting.rst:800
msgid "->lookup() instances doing an equivalent of::"
msgstr ""

#: ../../../filesystems/porting.rst:806
msgid ""
"don't need to bother with the check - d_splice_alias() will do the right "
"thing when given ERR_PTR(...) as inode.  Moreover, passing NULL inode to "
"d_splice_alias() will also do the right thing (equivalent of d_add(dentry, "
"NULL); return NULL;), so that kind of special cases also doesn't need a "
"separate treatment."
msgstr ""

#: ../../../filesystems/porting.rst:814
msgid "**strongly recommended**"
msgstr ""

#: ../../../filesystems/porting.rst:816
msgid ""
"take the RCU-delayed parts of ->destroy_inode() into a new method - -"
">free_inode().  If ->destroy_inode() becomes empty - all the better, just "
"get rid of it.  Synchronous work (e.g. the stuff that can't be done from an "
"RCU callback, or any WARN_ON() where we want the stack trace) *might* be "
"movable to ->evict_inode(); however, that goes only for the things that are "
"not needed to balance something done by ->alloc_inode().  IOW, if it's "
"cleaning up the stuff that might have accumulated over the life of in-core "
"inode, ->evict_inode() might be a fit."
msgstr ""

#: ../../../filesystems/porting.rst:826
msgid "Rules for inode destruction:"
msgstr ""

#: ../../../filesystems/porting.rst:828
msgid "if ->destroy_inode() is non-NULL, it gets called"
msgstr ""

#: ../../../filesystems/porting.rst:829
msgid "if ->free_inode() is non-NULL, it gets scheduled by call_rcu()"
msgstr ""

#: ../../../filesystems/porting.rst:830
msgid ""
"combination of NULL ->destroy_inode and NULL ->free_inode is treated as NULL/"
"free_inode_nonrcu, to preserve the compatibility."
msgstr ""

#: ../../../filesystems/porting.rst:833
msgid ""
"Note that the callback (be it via ->free_inode() or explicit call_rcu() in -"
">destroy_inode()) is *NOT* ordered wrt superblock destruction; as the matter "
"of fact, the superblock and all associated structures might be already "
"gone.  The filesystem driver is guaranteed to be still there, but that's "
"it.  Freeing memory in the callback is fine; doing more than that is "
"possible, but requires a lot of care and is best avoided."
msgstr ""

#: ../../../filesystems/porting.rst:845
msgid ""
"DCACHE_RCUACCESS is gone; having an RCU delay on dentry freeing is the "
"default.  DCACHE_NORCU opts out, and only d_alloc_pseudo() has any business "
"doing so."
msgstr ""

#: ../../../filesystems/porting.rst:853
msgid ""
"d_alloc_pseudo() is internal-only; uses outside of alloc_file_pseudo() are "
"very suspect (and won't work in modules).  Such uses are very likely to be "
"misspelled d_alloc_anon()."
msgstr ""

#: ../../../filesystems/porting.rst:861
msgid ""
"[should've been added in 2016] stale comment in finish_open() "
"notwithstanding, failure exits in ->atomic_open() instances should *NOT* "
"fput() the file, no matter what.  Everything is handled by the caller."
msgstr ""

#: ../../../filesystems/porting.rst:869
msgid ""
"clone_private_mount() returns a longterm mount now, so the proper destructor "
"of its result is kern_unmount() or kern_unmount_array()."
msgstr ""

#: ../../../filesystems/porting.rst:876
msgid ""
"zero-length bvec segments are disallowed, they must be filtered out before "
"passed on to an iterator."
msgstr ""

#: ../../../filesystems/porting.rst:883
msgid ""
"For bvec based itererators bio_iov_iter_get_pages() now doesn't copy bvecs "
"but uses the one provided. Anyone issuing kiocb-I/O should ensure that the "
"bvec and page references stay until I/O has completed, i.e. until -"
">ki_complete() has been called or returned with non -EIOCBQUEUED code."
msgstr ""

#: ../../../filesystems/porting.rst:892
msgid ""
"mnt_want_write_file() can now only be paired with mnt_drop_write_file(), "
"whereas previously it could be paired with mnt_drop_write() as well."
msgstr ""

#: ../../../filesystems/porting.rst:899
msgid ""
"iov_iter_copy_from_user_atomic() is gone; use copy_page_from_iter_atomic(). "
"The difference is copy_page_from_iter_atomic() advances the iterator and you "
"don't need iov_iter_advance() after it.  However, if you decide to use only "
"a part of obtained data, you should do iov_iter_revert()."
msgstr ""

#: ../../../filesystems/porting.rst:908
msgid ""
"Calling conventions for file_open_root() changed; now it takes struct path * "
"instead of passing mount and dentry separately.  For callers that used to "
"pass <mnt, mnt->mnt_root> pair (i.e. the root of given mount), a new helper "
"is provided - file_open_root_mnt().  In-tree users adjusted."
msgstr ""

#: ../../../filesystems/porting.rst:917
msgid ""
"no_llseek is gone; don't set .llseek to that - just leave it NULL instead. "
"Checks for \"does that file have llseek(2), or should it fail with ESPIPE\" "
"should be done by looking at FMODE_LSEEK in file->f_mode."
msgstr ""

#: ../../../filesystems/porting.rst:923
msgid "*mandatory*"
msgstr ""

#: ../../../filesystems/porting.rst:925
msgid ""
"filldir_t (readdir callbacks) calling conventions have changed.  Instead of "
"returning 0 or -E... it returns bool now.  false means \"no more\" (as -E... "
"used to) and true - \"keep going\" (as 0 in old calling conventions).  "
"Rationale: callers never looked at specific -E... values anyway. -> "
"iterate_shared() instances require no changes at all, all filldir_t ones in "
"the tree converted."
msgstr ""

#: ../../../filesystems/porting.rst:936
msgid ""
"Calling conventions for ->tmpfile() have changed.  It now takes a struct "
"file pointer instead of struct dentry pointer.  d_tmpfile() is similarly "
"changed to simplify callers.  The passed file is in a non-open state and on "
"success must be opened before returning (e.g. by calling "
"finish_open_simple())."
msgstr ""

#: ../../../filesystems/porting.rst:946
msgid ""
"Calling convention for ->huge_fault has changed.  It now takes a page order "
"instead of an enum page_entry_size, and it may be called without the "
"mmap_lock held.  All in-tree users have been audited and do not seem to "
"depend on the mmap_lock being held, but out of tree users should verify for "
"themselves.  If they do need it, they can return VM_FAULT_RETRY to be called "
"with the mmap_lock held."
msgstr ""

#: ../../../filesystems/porting.rst:957
msgid ""
"The order of opening block devices and matching or creating superblocks has "
"changed."
msgstr ""

#: ../../../filesystems/porting.rst:960
msgid ""
"The old logic opened block devices first and then tried to find a suitable "
"superblock to reuse based on the block device pointer."
msgstr ""

#: ../../../filesystems/porting.rst:963
msgid ""
"The new logic tries to find a suitable superblock first based on the device "
"number, and opening the block device afterwards."
msgstr ""

#: ../../../filesystems/porting.rst:966
msgid ""
"Since opening block devices cannot happen under s_umount because of lock "
"ordering requirements s_umount is now dropped while opening block devices "
"and reacquired before calling fill_super()."
msgstr ""

#: ../../../filesystems/porting.rst:970
msgid ""
"In the old logic concurrent mounters would find the superblock on the list "
"of superblocks for the filesystem type. Since the first opener of the block "
"device would hold s_umount they would wait until the superblock became "
"either born or was discarded due to initialization failure."
msgstr ""

#: ../../../filesystems/porting.rst:975
msgid ""
"Since the new logic drops s_umount concurrent mounters could grab s_umount "
"and would spin. Instead they are now made to wait using an explicit wait-"
"wake mechanism without having to hold s_umount."
msgstr ""

#: ../../../filesystems/porting.rst:983
msgid "The holder of a block device is now the superblock."
msgstr ""

#: ../../../filesystems/porting.rst:985
msgid ""
"The holder of a block device used to be the file_system_type which wasn't "
"particularly useful. It wasn't possible to go from block device to owning "
"superblock without matching on the device pointer stored in the superblock. "
"This mechanism would only work for a single device so the block layer "
"couldn't find the owning superblock of any additional devices."
msgstr ""

#: ../../../filesystems/porting.rst:991
msgid ""
"In the old mechanism reusing or creating a superblock for a racing mount(2) "
"and umount(2) relied on the file_system_type as the holder. This was "
"severely underdocumented however:"
msgstr ""

#: ../../../filesystems/porting.rst:995
msgid ""
"Any concurrent mounter that managed to grab an active reference on an "
"existing superblock was made to wait until the superblock either became "
"ready or until the superblock was removed from the list of superblocks of "
"the filesystem type. If the superblock is ready the caller would simple "
"reuse it."
msgstr ""

#: ../../../filesystems/porting.rst:1001
msgid ""
"If the mounter came after deactivate_locked_super() but before the "
"superblock had been removed from the list of superblocks of the filesystem "
"type the mounter would wait until the superblock was shutdown, reuse the "
"block device and allocate a new superblock."
msgstr ""

#: ../../../filesystems/porting.rst:1006
msgid ""
"If the mounter came after deactivate_locked_super() and after the superblock "
"had been removed from the list of superblocks of the filesystem type the "
"mounter would reuse the block device and allocate a new superblock (the "
"bd_holder point may still be set to the filesystem type)."
msgstr ""

#: ../../../filesystems/porting.rst:1011
msgid ""
"Because the holder of the block device was the file_system_type any "
"concurrent mounter could open the block devices of any superblock of the "
"same file_system_type without risking seeing EBUSY because the block device "
"was still in use by another superblock."
msgstr ""

#: ../../../filesystems/porting.rst:1016
msgid ""
"Making the superblock the owner of the block device changes this as the "
"holder is now a unique superblock and thus block devices associated with it "
"cannot be reused by concurrent mounters. So a concurrent mounter in (2) "
"could suddenly see EBUSY when trying to open a block device whose holder was "
"a different superblock."
msgstr ""

#: ../../../filesystems/porting.rst:1022
msgid ""
"The new logic thus waits until the superblock and the devices are shutdown "
"in ->kill_sb(). Removal of the superblock from the list of superblocks of "
"the filesystem type is now moved to a later point when the devices are "
"closed:"
msgstr ""

#: ../../../filesystems/porting.rst:1026
msgid ""
"Any concurrent mounter managing to grab an active reference on an existing "
"superblock is made to wait until the superblock is either ready or until the "
"superblock and all devices are shutdown in ->kill_sb(). If the superblock is "
"ready the caller will simply reuse it."
msgstr ""

#: ../../../filesystems/porting.rst:1031
msgid ""
"If the mounter comes after deactivate_locked_super() but before the "
"superblock has been removed from the list of superblocks of the filesystem "
"type the mounter is made to wait until the superblock and the devices are "
"shut down in ->kill_sb() and the superblock is removed from the list of "
"superblocks of the filesystem type. The mounter will allocate a new "
"superblock and grab ownership of the block device (the bd_holder pointer of "
"the block device will be set to the newly allocated superblock)."
msgstr ""

#: ../../../filesystems/porting.rst:1039
msgid ""
"This case is now collapsed into (2) as the superblock is left on the list of "
"superblocks of the filesystem type until all devices are shutdown in -"
">kill_sb(). In other words, if the superblock isn't on the list of "
"superblock of the filesystem type anymore then it has given up ownership of "
"all associated block devices (the bd_holder pointer is NULL)."
msgstr ""

#: ../../../filesystems/porting.rst:1045
msgid ""
"As this is a VFS level change it has no practical consequences for "
"filesystems other than that all of them must use one of the provided "
"kill_litter_super(), kill_anon_super(), or kill_block_super() helpers."
msgstr ""

#: ../../../filesystems/porting.rst:1053
msgid ""
"Lock ordering has been changed so that s_umount ranks above open_mutex "
"again. All places where s_umount was taken under open_mutex have been fixed "
"up."
msgstr ""

#: ../../../filesystems/porting.rst:1060
msgid ""
"export_operations ->encode_fh() no longer has a default implementation to "
"encode FILEID_INO32_GEN* file handles. Filesystems that used the default "
"implementation may use the generic helper generic_encode_ino32_fh() "
"explicitly."
msgstr ""

#: ../../../filesystems/porting.rst:1069
msgid ""
"If ->rename() update of .. on cross-directory move needs an exclusion with "
"directory modifications, do *not* lock the subdirectory in question in your -"
">rename() - it's done by the caller now [that item should've been added in "
"28eceeda130f \"fs: Lock moved directories\"]."
msgstr ""

#: ../../../filesystems/porting.rst:1078
msgid ""
"On same-directory ->rename() the (tautological) update of .. is not "
"protected by any locks; just don't do it if the old parent is the same as "
"the new one. We really can't lock two subdirectories in same-directory "
"rename - not without deadlocks."
msgstr ""

#: ../../../filesystems/porting.rst:1087
msgid ""
"lock_rename() and lock_rename_child() may fail in cross-directory case, if "
"their arguments do not have a common ancestor.  In that case ERR_PTR(-EXDEV) "
"is returned, with no locks taken.  In-tree users updated; out-of-tree ones "
"would need to do so."
msgstr ""

#: ../../../filesystems/porting.rst:1096
msgid ""
"The list of children anchored in parent dentry got turned into hlist now. "
"Field names got changed (->d_children/->d_sib instead of ->d_subdirs/-"
">d_child for anchor/entries resp.), so any affected places will be "
"immediately caught by compiler."
msgstr ""

#: ../../../filesystems/porting.rst:1105
msgid ""
"->d_delete() instances are now called for dentries with ->d_lock held and "
"refcount equal to 0.  They are not permitted to drop/regain ->d_lock. None "
"of in-tree instances did anything of that sort.  Make sure yours do not..."
msgstr ""

#: ../../../filesystems/porting.rst:1113
msgid ""
"->d_prune() instances are now called without ->d_lock held on the parent. -"
">d_lock on dentry itself is still held; if you need per-parent exclusions "
"(none of the in-tree instances did), use your own spinlock."
msgstr ""

#: ../../../filesystems/porting.rst:1117
msgid ""
"->d_iput() and ->d_release() are called with victim dentry still in the list "
"of parent's children.  It is still unhashed, marked killed, etc., just not "
"removed from parent's ->d_children yet."
msgstr ""

#: ../../../filesystems/porting.rst:1121
msgid ""
"Anyone iterating through the list of children needs to be aware of the half-"
"killed dentries that might be seen there; taking ->d_lock on those will see "
"them negative, unhashed and with negative refcount, which means that most of "
"the in-kernel users would've done the right thing anyway without any "
"adjustment."
msgstr ""

#: ../../../filesystems/porting.rst:1130
msgid "Block device freezing and thawing have been moved to holder operations."
msgstr ""

#: ../../../filesystems/porting.rst:1132
msgid ""
"Before this change, get_active_super() would only be able to find the "
"superblock of the main block device, i.e., the one stored in sb->s_bdev. "
"Block device freezing now works for any block device owned by a given "
"superblock, not just the main block device. The get_active_super() helper "
"and bd_fsfreeze_sb pointer are gone."
msgstr ""

#: ../../../filesystems/porting.rst:1142
msgid ""
"set_blocksize() takes opened struct file instead of struct block_device now "
"and it *must* be opened exclusive."
msgstr ""

#: ../../../filesystems/porting.rst:1149
msgid ""
"->d_revalidate() gets two extra arguments - inode of parent directory and "
"name our dentry is expected to have.  Both are stable (dir is pinned in non-"
"RCU case and will stay around during the call in RCU case, and name is "
"guaranteed to stay unchanging).  Your instance doesn't have to use either, "
"but it often helps to avoid a lot of painful boilerplate. Note that while "
"name->name is stable and NUL-terminated, it may (and often will) have name-"
">name[name->len] equal to '/' rather than '\\0' - in normal case it points "
"into the pathname being looked up. NOTE: if you need something like full "
"path from the root of filesystem, you are still on your own - this assists "
"with simple cases, but it's not magic."
msgstr ""

#: ../../../filesystems/porting.rst:1165
msgid ""
"kern_path_locked() and user_path_locked() no longer return a negative dentry "
"so this doesn't need to be checked.  If the name cannot be found, ERR_PTR(-"
"ENOENT) is returned."
msgstr ""

#: ../../../filesystems/porting.rst:1173
msgid ""
"lookup_one_qstr_excl() is changed to return errors in more cases, so these "
"conditions don't require explicit checks:"
msgstr ""

#: ../../../filesystems/porting.rst:1176
msgid ""
"if LOOKUP_CREATE is NOT given, then the dentry won't be negative, ERR_PTR(-"
"ENOENT) is returned instead"
msgstr ""

#: ../../../filesystems/porting.rst:1178
msgid ""
"if LOOKUP_EXCL IS given, then the dentry won't be positive, ERR_PTR(-EEXIST) "
"is rreturned instread"
msgstr ""

#: ../../../filesystems/porting.rst:1181
msgid ""
"LOOKUP_EXCL now means \"target must not exist\".  It can be combined with "
"LOOK_CREATE or LOOKUP_RENAME_TARGET."
msgstr ""

#: ../../../filesystems/porting.rst:1186
msgid "**mandatory** invalidate_inodes() is gone use evict_inodes() instead."
msgstr ""

#: ../../../filesystems/porting.rst:1193
msgid ""
"->mkdir() now returns a dentry.  If the created inode is found to already be "
"in cache and have a dentry (often IS_ROOT()), it will need to be spliced "
"into the given name in place of the given dentry. That dentry now needs to "
"be returned.  If the original dentry is used, NULL should be returned.  Any "
"error should be returned with ERR_PTR()."
msgstr ""

#: ../../../filesystems/porting.rst:1199
msgid ""
"In general, filesystems which use d_instantiate_new() to install the new "
"inode can safely return NULL.  Filesystems which may not have an I_NEW inode "
"should use d_drop();d_splice_alias() and return the result of the latter."
msgstr ""

#: ../../../filesystems/porting.rst:1203
msgid ""
"If a positive dentry cannot be returned for some reason, in-kernel clients "
"such as cachefiles, nfsd, smb/server may not perform ideally but will fail-"
"safe."
msgstr ""

#: ../../../filesystems/porting.rst:1209 ../../../filesystems/porting.rst:1218
#: ../../../filesystems/porting.rst:1235
msgid "** mandatory**"
msgstr ""

#: ../../../filesystems/porting.rst:1211
msgid ""
"lookup_one(), lookup_one_unlocked(), lookup_one_positive_unlocked() now take "
"a qstr instead of a name and len.  These, not the \"one_len\" versions, "
"should be used whenever accessing a filesystem from outside that "
"filesysmtem, through a mount point - which will have a mnt_idmap."
msgstr ""

#: ../../../filesystems/porting.rst:1220
msgid ""
"Functions try_lookup_one_len(), lookup_one_len(), lookup_one_len_unlocked() "
"and lookup_positive_unlocked() have been renamed to try_lookup_noperm(), "
"lookup_noperm(), lookup_noperm_unlocked(), "
"lookup_noperm_positive_unlocked().  They now take a qstr instead of separate "
"name and length.  QSTR() can be used when strlen() is needed for the length."
msgstr ""

#: ../../../filesystems/porting.rst:1227
msgid ""
"These function no longer do any permission checking - they previously "
"checked that the caller has 'X' permission on the parent.  They must ONLY be "
"used internally by a filesystem on itself when it knows that permissions are "
"irrelevant or in a context where permission checks have already been "
"performed such as after vfs_path_parent_lookup()"
msgstr ""

#: ../../../filesystems/porting.rst:1237
msgid ""
"d_hash_and_lookup() is no longer exported or available outside the VFS. Use "
"try_lookup_noperm() instead.  This adds name validation and takes arguments "
"in the opposite order but is otherwise identical."
msgstr ""

#: ../../../filesystems/porting.rst:1241
msgid "Using try_lookup_noperm() will require linux/namei.h to be included."
msgstr ""

#: ../../../filesystems/porting.rst:1247
msgid ""
"Calling conventions for ->d_automount() have changed; we should *not* grab "
"an extra reference to new mount - it should be returned with refcount 1."
msgstr ""

#: ../../../filesystems/porting.rst:1252
msgid ""
"collect_mounts()/drop_collected_mounts()/iterate_mounts() are gone now. "
"Replacement is collect_paths()/drop_collected_path(), with no special "
"iterator needed.  Instead of a cloned mount tree, the new interface returns "
"an array of struct path, one for each mount collect_mounts() would've "
"created.  These struct path point to locations in the caller's namespace "
"that would be roots of the cloned mounts."
msgstr ""

#: ../../../filesystems/porting.rst:1263
msgid ""
"If your filesystem sets the default dentry_operations, use "
"set_default_d_op() rather than manually setting sb->s_d_op."
msgstr ""

#: ../../../filesystems/porting.rst:1270
msgid ""
"d_set_d_op() is no longer exported (or public, for that matter); _if_ your "
"filesystem really needed that, make use of d_splice_alias_ops() to have them "
"set.  Better yet, think hard whether you need different ->d_op for different "
"dentries - if not, just use set_default_d_op() at mount time and be done "
"with that.  Currently procfs is the only thing that really needs ->d_op "
"varying between dentries."
msgstr ""

#: ../../../filesystems/porting.rst:1279
msgid "**highly recommended**"
msgstr ""

#: ../../../filesystems/porting.rst:1281
msgid ""
"The file operations mmap() callback is deprecated in favour of "
"mmap_prepare(). This passes a pointer to a vm_area_desc to the callback "
"rather than a VMA, as the VMA at this stage is not yet valid."
msgstr ""

#: ../../../filesystems/porting.rst:1285
msgid ""
"The vm_area_desc provides the minimum required information for a filesystem "
"to initialise state upon memory mapping of a file-backed region, and output "
"parameters for the file system to set this state."
msgstr ""
