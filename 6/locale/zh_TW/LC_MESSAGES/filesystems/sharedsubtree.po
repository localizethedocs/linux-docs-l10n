# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-14 08:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../filesystems/sharedsubtree.rst:5
msgid "Shared Subtrees"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:19
msgid "1) Overview"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:21
msgid "Consider the following situation:"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:23
msgid ""
"A process wants to clone its own namespace, but still wants to access the CD "
"that got mounted recently.  Shared subtree semantics provide the necessary "
"mechanism to accomplish the above."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:27
msgid ""
"It provides the necessary building blocks for features like per-user-"
"namespace and versioned filesystem."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:31
msgid "2) Features"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:33
msgid ""
"Shared subtree provides four different flavors of mounts; struct vfsmount to "
"be precise:"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:37
msgid ""
"A **shared mount** can be replicated to as many mountpoints and all the "
"replicas continue to be exactly same."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:40
#: ../../../filesystems/sharedsubtree.rst:87
msgid "Here is an example:"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:42
msgid "Let's say /mnt has a mount that is shared::"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:47
msgid ""
"mount(8) command now supports the --make-shared flag, so the sample 'smount' "
"program is no longer needed and has been removed."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:55
msgid ""
"The above command replicates the mount at /mnt to the mountpoint /tmp and "
"the contents of both the mounts remain identical."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:66
msgid "Now let's say we mount a device at /tmp/a::"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:76
msgid "Note that the mount has propagated to the mount at /mnt as well."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:78
msgid ""
"And the same is true even when /dev/sd0 is mounted on /mnt/a. The contents "
"will be visible under /tmp/a too."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:82
msgid ""
"A **slave mount** is like a shared mount except that mount and umount events "
"only propagate towards it."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:85
msgid "All slave mounts have a master mount which is a shared."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:89
msgid "Let's say /mnt has a mount which is shared::"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:93
msgid "Let's bind mount /mnt to /tmp::"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:97
msgid ""
"the new mount at /tmp becomes a shared mount and it is a replica of the "
"mount at /mnt."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:100
msgid "Now let's make the mount at /tmp; a slave of /mnt::"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:104
msgid "let's mount /dev/sd0 on /mnt/a::"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:114
msgid "Note the mount event has propagated to the mount at /tmp"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:116
msgid ""
"However let's see what happens if we mount something on the mount at /tmp::"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:126
msgid "Note how the mount event has not propagated to the mount at /mnt"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:130
msgid "A **private mount** does not forward or receive propagation."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:132
msgid "This is the mount we are familiar with. Its the default type."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:135
msgid ""
"An **unbindable mount** is, as the name suggests, an unbindable private "
"mount."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:138
msgid "let's say we have a mount at /mnt and we make it unbindable::"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:142
msgid "Let's try to bind mount this mount somewhere else::"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:147
msgid "Binding a unbindable mount is a invalid operation."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:151
msgid "3) Setting mount states"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:153
msgid ""
"The mount command (util-linux package) can be used to set mount states::"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:163
msgid "4) Use cases"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:165
msgid ""
"A process wants to clone its own namespace, but still wants to access the CD "
"that got mounted recently."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:168
#: ../../../filesystems/sharedsubtree.rst:186
msgid "Solution:"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:170
msgid "The system administrator can make the mount at /cdrom shared::"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:175
msgid ""
"Now any process that clones off a new namespace will have a mount at /cdrom "
"which is a replica of the same mount in the parent namespace."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:179
msgid ""
"So when a CD is inserted and mounted at /cdrom that mount gets propagated to "
"the other mount at /cdrom in all the other clone namespaces."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:183
msgid ""
"A process wants its mounts invisible to any other process, but still be able "
"to see the other system mounts."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:188
msgid ""
"To begin with, the administrator can mark the entire mount tree as "
"shareable::"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:193
msgid ""
"A new process can clone off a new namespace. And mark some part of its "
"namespace as slave::"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:198
msgid ""
"Hence forth any mounts within the /myprivatetree done by the process will "
"not show up in any other namespace. However mounts done in the parent "
"namespace under /myprivatetree still shows up in the process's namespace."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:204
msgid ""
"Apart from the above semantics this feature provides the building blocks to "
"solve the following problems:"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:207
msgid "Per-user namespace"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:209
msgid ""
"The above semantics allows a way to share mounts across namespaces.  But "
"namespaces are associated with processes. If namespaces are made first class "
"objects with user API to associate/disassociate a namespace with userid, "
"then each user could have his/her own namespace and tailor it to his/her "
"requirements. This needs to be supported in PAM."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:216
msgid "Versioned files"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:218
msgid ""
"If the entire mount tree is visible at multiple locations, then an "
"underlying versioning file system can return different versions of the file "
"depending on the path used to access that file."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:223
msgid "An example is::"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:231
msgid ""
"and if /usr has a versioning filesystem mounted, then that mount appears at /"
"view/v1/usr, /view/v2/usr, /view/v3/usr and /view/v4/usr too"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:235
msgid ""
"A user can request v3 version of the file /usr/fs/namespace.c by accessing /"
"view/v3/usr/fs/namespace.c . The underlying versioning filesystem can then "
"decipher that v3 version of the filesystem is being requested and return the "
"corresponding inode."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:242
msgid "5) Detailed semantics"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:243
msgid ""
"The section below explains the detailed semantics of bind, rbind, move, "
"mount, umount and clone-namespace operations."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:247
msgid ""
"the word 'vfsmount' and the noun 'mount' have been used to mean the same "
"thing, throughout this document."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:250
msgid "Mount states"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:252
msgid ""
"A **propagation event** is defined as event generated on a vfsmount that "
"leads to mount or unmount actions in other vfsmounts."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:255
msgid ""
"A **peer group** is defined as a group of vfsmounts that propagate events to "
"each other."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:258
msgid "A given mount can be in one of the following states:"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:260
msgid "Shared mounts"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:262
msgid ""
"A **shared mount** is defined as a vfsmount that belongs to a peer group."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:265
msgid "For example::"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:270
msgid ""
"The mount at /mnt and that at /tmp are both shared and belong to the same "
"peer group. Anything mounted or unmounted under /mnt or /tmp reflect in all "
"the other mounts of its peer group."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:276
msgid "Slave mounts"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:278
msgid ""
"A **slave mount** is defined as a vfsmount that receives propagation events "
"and does not forward propagation events."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:281
msgid ""
"A slave mount as the name implies has a master mount from which mount/"
"unmount events are received. Events do not propagate from the slave mount to "
"the master.  Only a shared mount can be made a slave by executing the "
"following command::"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:288
msgid ""
"A shared mount that is made as a slave is no more shared unless modified to "
"become shared."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:291
msgid "Shared and Slave"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:293
msgid ""
"A vfsmount can be both **shared** as well as **slave**.  This state "
"indicates that the mount is a slave of some vfsmount, and has its own peer "
"group too.  This vfsmount receives propagation events from its master "
"vfsmount, and also forwards propagation events to its 'peer group' and to "
"its slave vfsmounts."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:299
msgid ""
"Strictly speaking, the vfsmount is shared having its own peer group, and "
"this peer-group is a slave of some other peer group."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:303
msgid ""
"Only a slave vfsmount can be made as 'shared and slave' by either executing "
"the following command::"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:308
msgid "or by moving the slave vfsmount under a shared vfsmount."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:310
msgid "Private mount"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:312
msgid ""
"A **private mount** is defined as vfsmount that does not receive or forward "
"any propagation events."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:315
msgid "Unbindable mount"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:317
msgid ""
"A **unbindable mount** is defined as vfsmount that does not receive or "
"forward any propagation events and cannot be bind mounted."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:322
msgid "State diagram:"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:324
msgid ""
"The state diagram below explains the state transition of a mount, in "
"response to various commands::"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:350
msgid ""
"Apart from the commands listed below, the 'move' operation also changes the "
"state of a mount depending on type of the destination mount. Its explained "
"in section 5d."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:354
msgid "Bind semantics"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:356
#: ../../../filesystems/sharedsubtree.rst:470
#: ../../../filesystems/sharedsubtree.rst:547
#: ../../../filesystems/sharedsubtree.rst:560
msgid "Consider the following command::"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:360
msgid ""
"where 'A' is the source mount, 'a' is the dentry in the mount 'A', 'B' is "
"the destination mount and 'b' is the dentry in the destination mount."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:363
msgid ""
"The outcome depends on the type of mount of 'A' and 'B'. The table below "
"contains quick reference::"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:379
msgid "Details:"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:381
msgid ""
"'A' is a shared mount and 'B' is a shared mount. A new mount 'C' which is "
"clone of 'A', is created. Its root dentry is 'a' . 'C' is mounted on mount "
"'B' at dentry 'b'. Also new mount 'C1', 'C2', 'C3' ... are created and "
"mounted at the dentry 'b' on all mounts where 'B' propagates to. A new "
"propagation tree containing 'C1',..,'Cn' is created. This propagation tree "
"is identical to the propagation tree of 'B'.  And finally the peer-group of "
"'C' is merged with the peer group of 'A'."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:390
msgid ""
"'A' is a private mount and 'B' is a shared mount. A new mount 'C' which is "
"clone of 'A', is created. Its root dentry is 'a'. 'C' is mounted on mount "
"'B' at dentry 'b'. Also new mount 'C1', 'C2', 'C3' ... are created and "
"mounted at the dentry 'b' on all mounts where 'B' propagates to. A new "
"propagation tree is set containing all new mounts 'C', 'C1', .., 'Cn' with "
"exactly the same configuration as the propagation tree for 'B'."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:398
msgid ""
"'A' is a slave mount of mount 'Z' and 'B' is a shared mount. A new mount 'C' "
"which is clone of 'A', is created. Its root dentry is 'a' . 'C' is mounted "
"on mount 'B' at dentry 'b'. Also new mounts 'C1', 'C2', 'C3' ... are created "
"and mounted at the dentry 'b' on all mounts where 'B' propagates to. A new "
"propagation tree containing the new mounts 'C','C1',..  'Cn' is created. "
"This propagation tree is identical to the propagation tree for 'B'. And "
"finally the mount 'C' and its peer group is made the slave of mount 'Z'.  In "
"other words, mount 'C' is in the state 'slave and shared'."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:408
msgid ""
"'A' is a unbindable mount and 'B' is a shared mount. This is a invalid "
"operation."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:411
msgid ""
"'A' is a private mount and 'B' is a non-shared(private or slave or "
"unbindable) mount. A new mount 'C' which is clone of 'A', is created. Its "
"root dentry is 'a'. 'C' is mounted on mount 'B' at dentry 'b'."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:415
msgid ""
"'A' is a shared mount and 'B' is a non-shared mount. A new mount 'C' which "
"is a clone of 'A' is created. Its root dentry is 'a'. 'C' is mounted on "
"mount 'B' at dentry 'b'.  'C' is made a member of the peer-group of 'A'."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:420
msgid ""
"'A' is a slave mount of mount 'Z' and 'B' is a non-shared mount. A new mount "
"'C' which is a clone of 'A' is created. Its root dentry is 'a'.  'C' is "
"mounted on mount 'B' at dentry 'b'. Also 'C' is set as a slave mount of 'Z'. "
"In other words 'A' and 'C' are both slave mounts of 'Z'.  All mount/unmount "
"events on 'Z' propagates to 'A' and 'C'. But mount/unmount on 'A' do not "
"propagate anywhere else. Similarly mount/unmount on 'C' do not propagate "
"anywhere else."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:428
msgid ""
"'A' is a unbindable mount and 'B' is a non-shared mount. This is a invalid "
"operation. A unbindable mount cannot be bind mounted."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:431
msgid "Rbind semantics"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:433
msgid ""
"rbind is same as bind. Bind replicates the specified mount.  Rbind "
"replicates all the mounts in the tree belonging to the specified mount. "
"Rbind mount is bind mount applied to all the mounts in the tree."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:437
msgid ""
"If the source tree that is rbind has some unbindable mounts, then the "
"subtree under the unbindable mount is pruned in the new location."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:441
msgid "eg:"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:443
msgid "let's say we have the following mount tree::"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:451
msgid ""
"Let's say all the mount except the mount C in the tree are of a type other "
"than unbindable."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:454
msgid "If this tree is rbound to say Z"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:456
msgid "We will have the following tree at the new location::"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:468
msgid "Move semantics"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:474
msgid ""
"where 'A' is the source mount, 'B' is the destination mount and 'b' is the "
"dentry in the destination mount."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:477
msgid ""
"The outcome depends on the type of the mount of 'A' and 'B'. The table below "
"is a quick reference::"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:493
msgid "moving a mount residing under a shared mount is invalid."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:495
msgid "Details follow:"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:497
msgid ""
"'A' is a shared mount and 'B' is a shared mount.  The mount 'A' is mounted "
"on mount 'B' at dentry 'b'.  Also new mounts 'A1', 'A2'...'An' are created "
"and mounted at dentry 'b' on all mounts that receive propagation from mount "
"'B'. A new propagation tree is created in the exact same configuration as "
"that of 'B'. This new propagation tree contains all the new mounts 'A1', "
"'A2'...  'An'.  And this new propagation tree is appended to the already "
"existing propagation tree of 'A'."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:506
msgid ""
"'A' is a private mount and 'B' is a shared mount. The mount 'A' is mounted "
"on mount 'B' at dentry 'b'. Also new mount 'A1', 'A2'... 'An' are created "
"and mounted at dentry 'b' on all mounts that receive propagation from mount "
"'B'. The mount 'A' becomes a shared mount and a propagation tree is created "
"which is identical to that of 'B'. This new propagation tree contains all "
"the new mounts 'A1', 'A2'...  'An'."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:514
msgid ""
"'A' is a slave mount of mount 'Z' and 'B' is a shared mount.  The mount 'A' "
"is mounted on mount 'B' at dentry 'b'.  Also new mounts 'A1', 'A2'... 'An' "
"are created and mounted at dentry 'b' on all mounts that receive propagation "
"from mount 'B'. A new propagation tree is created in the exact same "
"configuration as that of 'B'. This new propagation tree contains all the new "
"mounts 'A1', 'A2'...  'An'.  And this new propagation tree is appended to "
"the already existing propagation tree of 'A'.  Mount 'A' continues to be the "
"slave mount of 'Z' but it also becomes 'shared'."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:524
msgid ""
"'A' is a unbindable mount and 'B' is a shared mount. The operation is "
"invalid. Because mounting anything on the shared mount 'B' can create new "
"mounts that get mounted on the mounts that receive propagation from 'B'.  "
"And since the mount 'A' is unbindable, cloning it to mount at other "
"mountpoints is not possible."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:530
msgid ""
"'A' is a private mount and 'B' is a non-shared(private or slave or "
"unbindable) mount. The mount 'A' is mounted on mount 'B' at dentry 'b'."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:533
msgid ""
"'A' is a shared mount and 'B' is a non-shared mount.  The mount 'A' is "
"mounted on mount 'B' at dentry 'b'.  Mount 'A' continues to be a shared "
"mount."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:537
msgid ""
"'A' is a slave mount of mount 'Z' and 'B' is a non-shared mount. The mount "
"'A' is mounted on mount 'B' at dentry 'b'.  Mount 'A' continues to be a "
"slave mount of mount 'Z'."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:541
msgid ""
"'A' is a unbindable mount and 'B' is a non-shared mount. The mount 'A' is "
"mounted on mount 'B' at dentry 'b'. Mount 'A' continues to be a unbindable "
"mount."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:545
msgid "Mount semantics"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:551
msgid ""
"'B' is the destination mount and 'b' is the dentry in the destination mount."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:554
msgid ""
"The above operation is the same as bind operation with the exception that "
"the source mount is always a private mount."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:558
msgid "Unmount semantics"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:564
msgid "where 'A' is a mount mounted on mount 'B' at dentry 'b'."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:566
msgid ""
"If mount 'B' is shared, then all most-recently-mounted mounts at dentry 'b' "
"on mounts that receive propagation from mount 'B' and does not have sub-"
"mounts within them are unmounted."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:570
msgid ""
"Example: Let's say 'B1', 'B2', 'B3' are shared mounts that propagate to each "
"other."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:573
msgid ""
"let's say 'A1', 'A2', 'A3' are first mounted at dentry 'b' on mount 'B1', "
"'B2' and 'B3' respectively."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:576
msgid ""
"let's say 'C1', 'C2', 'C3' are next mounted at the same dentry 'b' on mount "
"'B1', 'B2' and 'B3' respectively."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:579
msgid ""
"if 'C1' is unmounted, all the mounts that are most-recently-mounted on 'B1' "
"and on the mounts that 'B1' propagates-to are unmounted."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:582
msgid ""
"'B1' propagates to 'B2' and 'B3'. And the most recently mounted mount on "
"'B2' at dentry 'b' is 'C2', and that of mount 'B3' is 'C3'."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:585
msgid "So all 'C1', 'C2' and 'C3' should be unmounted."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:587
msgid ""
"If any of 'C2' or 'C3' has some child mounts, then that mount is not "
"unmounted, but all other mounts are unmounted. However if 'C1' is told to be "
"unmounted and 'C1' has some sub-mounts, the umount operation is failed "
"entirely."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:592
msgid "Clone Namespace"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:594
msgid ""
"A cloned namespace contains all the mounts as that of the parent namespace."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:597
msgid ""
"Let's say 'A' and 'B' are the corresponding mounts in the parent and the "
"child namespace."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:600
msgid ""
"If 'A' is shared, then 'B' is also shared and 'A' and 'B' propagate to each "
"other."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:603
msgid ""
"If 'A' is a slave mount of 'Z', then 'B' is also the slave mount of 'Z'."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:606
msgid "If 'A' is a private mount, then 'B' is a private mount too."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:608
msgid "If 'A' is unbindable mount, then 'B' is a unbindable mount too."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:612
msgid "6) Quiz"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:614
#: ../../../filesystems/sharedsubtree.rst:628
#: ../../../filesystems/sharedsubtree.rst:639
msgid "What is the result of the following command sequence?"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:623
msgid ""
"what should be the contents of /mnt /mnt/1 /mnt/1/1 should be? Should they "
"all be identical? or should /mnt and /mnt/1 be identical only?"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:636
msgid "what should be the content of /v/1/v/1 be?"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:652
msgid ""
"At this point we have the first mount at /tmp and its root dentry is 1. "
"Let's call this mount 'A' And then we have a second mount at /tmp1 with root "
"dentry 2. Let's call this mount 'B' Next we have a third mount at /mnt with "
"root dentry mnt. Let's call this mount 'C'"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:659
msgid "'B' is the slave of 'A' and 'C' is a slave of 'B' A -> B -> C"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:662
msgid "at this point if we execute the following command::"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:666
msgid "The mount is attempted on 'A'"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:668
msgid "will the mount propagate to 'B' and 'C' ?"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:670
msgid "what would be the contents of /mnt/1/test be?"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:674
msgid "7) FAQ"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:676
msgid "Why is bind mount needed? How is it different from symbolic links?"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:678
msgid ""
"symbolic links can get stale if the destination mount gets unmounted or "
"moved. Bind mounts continue to exist even if the other mount is unmounted or "
"moved."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:682
msgid "Why can't the shared subtree be implemented using exportfs?"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:684
msgid ""
"exportfs is a heavyweight way of accomplishing part of what shared subtree "
"can do. I cannot imagine a way to implement the semantics of slave mount "
"using exportfs?"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:688
msgid "Why is unbindable mount needed?"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:690
msgid ""
"Let's say we want to replicate the mount tree at multiple locations within "
"the same subtree."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:693
msgid ""
"if one rbind mounts a tree within the same subtree 'n' times the number of "
"mounts created is an exponential function of 'n'. Having unbindable mount "
"can help prune the unneeded bind mounts. Here is an example."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:698
#: ../../../filesystems/sharedsubtree.rst:778
msgid "step 1:"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:699
#: ../../../filesystems/sharedsubtree.rst:779
msgid "let's say the root tree has just two directories with one vfsmount::"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:706
msgid ""
"And we want to replicate the tree at multiple mountpoints under /root/tmp"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:709
#: ../../../filesystems/sharedsubtree.rst:789
msgid "step 2:"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:719
#: ../../../filesystems/sharedsubtree.rst:739
#: ../../../filesystems/sharedsubtree.rst:802
#: ../../../filesystems/sharedsubtree.rst:818
#: ../../../filesystems/sharedsubtree.rst:834
msgid "the new tree now looks like this::"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:731
msgid "it has two vfsmounts"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:733
#: ../../../filesystems/sharedsubtree.rst:812
msgid "step 3:"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:761
#: ../../../filesystems/sharedsubtree.rst:828
msgid "step 4:"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:767
msgid "I won't draw the tree..but it has 24 vfsmounts"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:770
msgid ""
"at step i the number of vfsmounts is V[i] = i*V[i-1]. This is an exponential "
"function. And this tree has way more mounts than what we really needed in "
"the first place."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:774
msgid ""
"One could use a series of umount at each step to prune out the unneeded "
"mounts. But there is a better solution. Unclonable mounts come in handy here."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:845
msgid "8) Implementation"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:847
msgid "Datastructure"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:849
msgid "Several new fields are introduced to struct vfsmount:"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:851
msgid "->mnt_share"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:852
msgid ""
"Links together all the mount to/from which this vfsmount send/receives "
"propagation events."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:855
msgid "->mnt_slave_list"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:856
msgid "Links all the mounts to which this vfsmount propagates to."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:859
msgid "->mnt_slave"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:860
msgid "Links together all the slaves that its master vfsmount propagates to."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:863
msgid "->mnt_master"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:864
msgid ""
"Points to the master vfsmount from which this vfsmount receives propagation."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:867
msgid "->mnt_flags"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:868
msgid ""
"Takes two more flags to indicate the propagation status of the vfsmount.  "
"MNT_SHARE indicates that the vfsmount is a shared vfsmount.  MNT_UNCLONABLE "
"indicates that the vfsmount cannot be replicated."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:873
msgid ""
"All the shared vfsmounts in a peer group form a cyclic list through -"
">mnt_share."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:876
msgid ""
"All vfsmounts with the same ->mnt_master form on a cyclic list anchored in -"
">mnt_master->mnt_slave_list and going through ->mnt_slave."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:879
msgid ""
"->mnt_master can point to arbitrary (and possibly different) members of "
"master peer group.  To find all immediate slaves of a peer group you need to "
"go through _all_ ->mnt_slave_list of its members. Conceptually it's just a "
"single set - distribution among the individual lists does not affect "
"propagation or the way propagation tree is modified by operations."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:886
msgid ""
"All vfsmounts in a peer group have the same ->mnt_master.  If it is non-"
"NULL, they form a contiguous (ordered) segment of slave list."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:889
msgid "A example propagation tree looks as shown in the figure below."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:892
msgid ""
"Though it looks like a forest, if we consider all the shared mounts as a "
"conceptual entity called 'pnode', it becomes a tree."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:906
msgid ""
"In the above figure  A,B,C and D all are shared and propagate to each "
"other.   'A' has got 3 slave mounts 'E' 'F' and 'G' 'C' has got 2 slave "
"mounts 'J' and 'K'  and  'D' has got two slave mounts 'H' and 'I'. 'E' is "
"also shared with 'K' and they propagate to each other.  And 'K' has 3 slaves "
"'M', 'L' and 'N'"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:912
msgid "A's ->mnt_share links with the ->mnt_share of 'B' 'C' and 'D'"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:914
msgid "A's ->mnt_slave_list links with ->mnt_slave of 'E', 'K', 'F' and 'G'"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:916
msgid "E's ->mnt_share links with ->mnt_share of K"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:918
msgid ""
"'E', 'K', 'F', 'G' have their ->mnt_master point to struct vfsmount of 'A'"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:920
msgid "'M', 'L', 'N' have their ->mnt_master point to struct vfsmount of 'K'"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:922
msgid "K's ->mnt_slave_list links with ->mnt_slave of 'M', 'L' and 'N'"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:924
msgid "C's ->mnt_slave_list links with ->mnt_slave of 'J' and 'K'"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:926
msgid "J and K's ->mnt_master points to struct vfsmount of C"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:928
msgid "and finally D's ->mnt_slave_list links with ->mnt_slave of 'H' and 'I'"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:930
msgid "'H' and 'I' have their ->mnt_master pointing to struct vfsmount of 'D'."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:933
msgid "NOTE: The propagation tree is orthogonal to the mount tree."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:935
msgid "Locking:"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:937
msgid ""
"->mnt_share, ->mnt_slave, ->mnt_slave_list, ->mnt_master are protected by "
"namespace_sem (exclusive for modifications, shared for reading)."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:940
msgid ""
"Normally we have ->mnt_flags modifications serialized by vfsmount_lock. "
"There are two exceptions: do_add_mount() and clone_mnt(). The former "
"modifies a vfsmount that has not been visible in any shared data structures "
"yet. The latter holds namespace_sem and the only references to vfsmount are "
"in lists that can't be traversed without namespace_sem."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:947
msgid "Algorithm:"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:949
msgid "The crux of the implementation resides in rbind/move operation."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:951
msgid ""
"The overall algorithm breaks the operation into 3 phases: (look at "
"attach_recursive_mnt() and propagate_mnt())"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:954
msgid "Prepare phase."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:956
msgid "For each mount in the source tree:"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:958
msgid ""
"Create the necessary number of mount trees to be attached to each of the "
"mounts that receive propagation from the destination mount."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:961
msgid ""
"Do not attach any of the trees to its destination. However note down its -"
">mnt_parent and ->mnt_mountpoint"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:963
msgid ""
"Link all the new mounts to form a propagation tree that is identical to the "
"propagation tree of the destination mount."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:967
msgid ""
"If this phase is successful, there should be 'n' new propagation trees; "
"where 'n' is the number of mounts in the source tree.  Go to the commit phase"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:971
msgid ""
"Also there should be 'm' new mount trees, where 'm' is the number of mounts "
"to which the destination mount propagates to."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:975
msgid "If any memory allocations fail, go to the abort phase."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:977
msgid "Commit phase."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:979
msgid ""
"Attach each of the mount trees to their corresponding destination mounts."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:982
msgid "Abort phase."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:984
msgid "Delete all the newly created trees."
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:987
msgid "all the propagation related functionality resides in the file pnode.c"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:992
msgid ""
"version 0.1  (created the initial document, Ram Pai linuxram@us.ibm.com)"
msgstr ""

#: ../../../filesystems/sharedsubtree.rst:994
msgid "version 0.2  (Incorporated comments from Al Viro)"
msgstr ""
