# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../crypto/userspace-if.rst:2
msgid "User Space Interface"
msgstr ""

#: ../../../crypto/userspace-if.rst:5
msgid "Introduction"
msgstr ""

#: ../../../crypto/userspace-if.rst:7
msgid ""
"The concepts of the kernel crypto API visible to kernel space is fully "
"applicable to the user space interface as well. Therefore, the kernel crypto "
"API high level discussion for the in-kernel use cases applies here as well."
msgstr ""

#: ../../../crypto/userspace-if.rst:12
msgid ""
"The major difference, however, is that user space can only act as a consumer "
"and never as a provider of a transformation or cipher algorithm."
msgstr ""

#: ../../../crypto/userspace-if.rst:16
msgid ""
"The following covers the user space interface exported by the kernel crypto "
"API. A working example of this description is libkcapi that can be obtained "
"from [1]. That library can be used by user space applications that require "
"cryptographic services from the kernel."
msgstr ""

#: ../../../crypto/userspace-if.rst:21
msgid ""
"Some details of the in-kernel kernel crypto API aspects do not apply to user "
"space, however. This includes the difference between synchronous and "
"asynchronous invocations. The user space API call is fully synchronous."
msgstr ""

#: ../../../crypto/userspace-if.rst:26 ../../../crypto/userspace-if.rst:410
msgid "[1] https://www.chronox.de/libkcapi.html"
msgstr ""

#: ../../../crypto/userspace-if.rst:29
msgid "User Space API General Remarks"
msgstr ""

#: ../../../crypto/userspace-if.rst:31
msgid ""
"The kernel crypto API is accessible from user space. Currently, the "
"following ciphers are accessible:"
msgstr ""

#: ../../../crypto/userspace-if.rst:34
msgid "Message digest including keyed message digest (HMAC, CMAC)"
msgstr ""

#: ../../../crypto/userspace-if.rst:36
msgid "Symmetric ciphers"
msgstr ""

#: ../../../crypto/userspace-if.rst:38
msgid "AEAD ciphers"
msgstr ""

#: ../../../crypto/userspace-if.rst:40
msgid "Random Number Generators"
msgstr ""

#: ../../../crypto/userspace-if.rst:42
msgid ""
"The interface is provided via socket type using the type AF_ALG. In "
"addition, the setsockopt option type is SOL_ALG. In case the user space "
"header files do not export these flags yet, use the following macros:"
msgstr ""

#: ../../../crypto/userspace-if.rst:56
msgid ""
"A cipher is accessed with the same name as done for the in-kernel API calls. "
"This includes the generic vs. unique naming schema for ciphers as well as "
"the enforcement of priorities for generic names."
msgstr ""

#: ../../../crypto/userspace-if.rst:60
msgid ""
"To interact with the kernel crypto API, a socket must be created by the user "
"space application. User space invokes the cipher operation with the send()/"
"write() system call family. The result of the cipher operation is obtained "
"with the read()/recv() system call family."
msgstr ""

#: ../../../crypto/userspace-if.rst:65
msgid ""
"The following API calls assume that the socket descriptor is already opened "
"by the user space application and discusses only the kernel crypto API "
"specific invocations."
msgstr ""

#: ../../../crypto/userspace-if.rst:69
msgid ""
"To initialize the socket interface, the following sequence has to be "
"performed by the consumer:"
msgstr ""

#: ../../../crypto/userspace-if.rst:72
msgid ""
"Create a socket of type AF_ALG with the struct sockaddr_alg parameter "
"specified below for the different cipher types."
msgstr ""

#: ../../../crypto/userspace-if.rst:75
msgid "Invoke bind with the socket descriptor"
msgstr ""

#: ../../../crypto/userspace-if.rst:77
msgid ""
"Invoke accept with the socket descriptor. The accept system call returns a "
"new file descriptor that is to be used to interact with the particular "
"cipher instance. When invoking send/write or recv/read system calls to send "
"data to the kernel or obtain data from the kernel, the file descriptor "
"returned by accept must be used."
msgstr ""

#: ../../../crypto/userspace-if.rst:84
msgid "In-place Cipher operation"
msgstr ""

#: ../../../crypto/userspace-if.rst:86
msgid ""
"Just like the in-kernel operation of the kernel crypto API, the user space "
"interface allows the cipher operation in-place. That means that the input "
"buffer used for the send/write system call and the output buffer used by the "
"read/recv system call may be one and the same. This is of particular "
"interest for symmetric cipher operations where a copying of the output data "
"to its final destination can be avoided."
msgstr ""

#: ../../../crypto/userspace-if.rst:93
msgid ""
"If a consumer on the other hand wants to maintain the plaintext and the "
"ciphertext in different memory locations, all a consumer needs to do is to "
"provide different memory pointers for the encryption and decryption "
"operation."
msgstr ""

#: ../../../crypto/userspace-if.rst:99
msgid "Message Digest API"
msgstr ""

#: ../../../crypto/userspace-if.rst:101
msgid ""
"The message digest type to be used for the cipher operation is selected when "
"invoking the bind syscall. bind requires the caller to provide a filled "
"struct sockaddr data structure. This data structure must be filled as "
"follows:"
msgstr ""

#: ../../../crypto/userspace-if.rst:115
msgid ""
"The salg_type value \"hash\" applies to message digests and keyed message "
"digests. Though, a keyed message digest is referenced by the appropriate "
"salg_name. Please see below for the setsockopt interface that explains how "
"the key can be set for a keyed message digest."
msgstr ""

#: ../../../crypto/userspace-if.rst:120
msgid ""
"Using the send() system call, the application provides the data that should "
"be processed with the message digest. The send system call allows the "
"following flags to be specified:"
msgstr ""

#: ../../../crypto/userspace-if.rst:124
msgid ""
"MSG_MORE: If this flag is set, the send system call acts like a message "
"digest update function where the final hash is not yet calculated. If the "
"flag is not set, the send system call calculates the final message digest "
"immediately."
msgstr ""

#: ../../../crypto/userspace-if.rst:129
msgid ""
"With the recv() system call, the application can read the message digest "
"from the kernel crypto API. If the buffer is too small for the message "
"digest, the flag MSG_TRUNC is set by the kernel."
msgstr ""

#: ../../../crypto/userspace-if.rst:133
msgid ""
"In order to set a message digest key, the calling application must use the "
"setsockopt() option of ALG_SET_KEY or ALG_SET_KEY_BY_KEY_SERIAL. If the key "
"is not set the HMAC operation is performed without the initial HMAC state "
"change caused by the key."
msgstr ""

#: ../../../crypto/userspace-if.rst:139
msgid "Symmetric Cipher API"
msgstr ""

#: ../../../crypto/userspace-if.rst:141
msgid ""
"The operation is very similar to the message digest discussion. During "
"initialization, the struct sockaddr data structure must be filled as follows:"
msgstr ""

#: ../../../crypto/userspace-if.rst:154 ../../../crypto/userspace-if.rst:208
msgid ""
"Before data can be sent to the kernel using the write/send system call "
"family, the consumer must set the key. The key setting is described with the "
"setsockopt invocation below."
msgstr ""

#: ../../../crypto/userspace-if.rst:158 ../../../crypto/userspace-if.rst:217
msgid ""
"Using the sendmsg() system call, the application provides the data that "
"should be processed for encryption or decryption. In addition, the IV is "
"specified with the data structure provided by the sendmsg() system call."
msgstr ""

#: ../../../crypto/userspace-if.rst:162 ../../../crypto/userspace-if.rst:221
msgid ""
"The sendmsg system call parameter of struct msghdr is embedded into the "
"struct cmsghdr data structure. See recv(2) and cmsg(3) for more information "
"on how the cmsghdr data structure is used together with the send/recv system "
"call family. That cmsghdr data structure holds the following information "
"specified with a separate header instances:"
msgstr ""

#: ../../../crypto/userspace-if.rst:168 ../../../crypto/userspace-if.rst:227
msgid "specification of the cipher operation type with one of these flags:"
msgstr ""

#: ../../../crypto/userspace-if.rst:170 ../../../crypto/userspace-if.rst:229
msgid "ALG_OP_ENCRYPT - encryption of data"
msgstr ""

#: ../../../crypto/userspace-if.rst:172 ../../../crypto/userspace-if.rst:231
msgid "ALG_OP_DECRYPT - decryption of data"
msgstr ""

#: ../../../crypto/userspace-if.rst:174 ../../../crypto/userspace-if.rst:233
msgid "specification of the IV information marked with the flag ALG_SET_IV"
msgstr ""

#: ../../../crypto/userspace-if.rst:176 ../../../crypto/userspace-if.rst:239
msgid "The send system call family allows the following flag to be specified:"
msgstr ""

#: ../../../crypto/userspace-if.rst:178 ../../../crypto/userspace-if.rst:241
msgid ""
"MSG_MORE: If this flag is set, the send system call acts like a cipher "
"update function where more input data is expected with a subsequent "
"invocation of the send system call."
msgstr ""

#: ../../../crypto/userspace-if.rst:182 ../../../crypto/userspace-if.rst:245
msgid ""
"Note: The kernel reports -EINVAL for any unexpected data. The caller must "
"make sure that all data matches the constraints given in /proc/crypto for "
"the selected cipher."
msgstr ""

#: ../../../crypto/userspace-if.rst:186
msgid ""
"With the recv() system call, the application can read the result of the "
"cipher operation from the kernel crypto API. The output buffer must be at "
"least as large as to hold all blocks of the encrypted or decrypted data. If "
"the output data size is smaller, only as many blocks are returned that fit "
"into that output buffer size."
msgstr ""

#: ../../../crypto/userspace-if.rst:193
msgid "AEAD Cipher API"
msgstr ""

#: ../../../crypto/userspace-if.rst:195
msgid ""
"The operation is very similar to the symmetric cipher discussion. During "
"initialization, the struct sockaddr data structure must be filled as follows:"
msgstr ""

#: ../../../crypto/userspace-if.rst:212
msgid ""
"In addition, before data can be sent to the kernel using the write/send "
"system call family, the consumer must set the authentication tag size. To "
"set the authentication tag size, the caller must use the setsockopt "
"invocation described below."
msgstr ""

#: ../../../crypto/userspace-if.rst:235
msgid ""
"specification of the associated authentication data (AAD) with the flag "
"ALG_SET_AEAD_ASSOCLEN. The AAD is sent to the kernel together with the "
"plaintext / ciphertext. See below for the memory structure."
msgstr ""

#: ../../../crypto/userspace-if.rst:249
msgid ""
"With the recv() system call, the application can read the result of the "
"cipher operation from the kernel crypto API. The output buffer must be at "
"least as large as defined with the memory structure below. If the output "
"data size is smaller, the cipher operation is not performed."
msgstr ""

#: ../../../crypto/userspace-if.rst:254
msgid ""
"The authenticated decryption operation may indicate an integrity error. Such "
"breach in integrity is marked with the -EBADMSG error code."
msgstr ""

#: ../../../crypto/userspace-if.rst:258
msgid "AEAD Memory Structure"
msgstr ""

#: ../../../crypto/userspace-if.rst:260
msgid ""
"The AEAD cipher operates with the following information that is communicated "
"between user and kernel space as one data stream:"
msgstr ""

#: ../../../crypto/userspace-if.rst:263
msgid "plaintext or ciphertext"
msgstr ""

#: ../../../crypto/userspace-if.rst:265
msgid "associated authentication data (AAD)"
msgstr ""

#: ../../../crypto/userspace-if.rst:267
msgid "authentication tag"
msgstr ""

#: ../../../crypto/userspace-if.rst:269
msgid ""
"The sizes of the AAD and the authentication tag are provided with the "
"sendmsg and setsockopt calls (see there). As the kernel knows the size of "
"the entire data stream, the kernel is now able to calculate the right "
"offsets of the data components in the data stream."
msgstr ""

#: ../../../crypto/userspace-if.rst:274
msgid ""
"The user space caller must arrange the aforementioned information in the "
"following order:"
msgstr ""

#: ../../../crypto/userspace-if.rst:277
msgid "AEAD encryption input: AAD \\|\\| plaintext"
msgstr ""

#: ../../../crypto/userspace-if.rst:279
msgid "AEAD decryption input: AAD \\|\\| ciphertext \\|\\| authentication tag"
msgstr ""

#: ../../../crypto/userspace-if.rst:281
msgid ""
"The output buffer the user space caller provides must be at least as large "
"to hold the following data:"
msgstr ""

#: ../../../crypto/userspace-if.rst:284
msgid "AEAD encryption output: ciphertext \\|\\| authentication tag"
msgstr ""

#: ../../../crypto/userspace-if.rst:286
msgid "AEAD decryption output: plaintext"
msgstr ""

#: ../../../crypto/userspace-if.rst:289
msgid "Random Number Generator API"
msgstr ""

#: ../../../crypto/userspace-if.rst:291
msgid ""
"Again, the operation is very similar to the other APIs. During "
"initialization, the struct sockaddr data structure must be filled as follows:"
msgstr ""

#: ../../../crypto/userspace-if.rst:304
msgid ""
"Depending on the RNG type, the RNG must be seeded. The seed is provided "
"using the setsockopt interface to set the key. For example, the ansi_cprng "
"requires a seed. The DRBGs do not require a seed, but may be seeded. The "
"seed is also known as a *Personalization String* in NIST SP 800-90A standard."
msgstr ""

#: ../../../crypto/userspace-if.rst:310
msgid ""
"Using the read()/recvmsg() system calls, random numbers can be obtained. The "
"kernel generates at most 128 bytes in one call. If user space requires more "
"data, multiple calls to read()/recvmsg() must be made."
msgstr ""

#: ../../../crypto/userspace-if.rst:314
msgid ""
"WARNING: The user space caller may invoke the initially mentioned accept "
"system call multiple times. In this case, the returned file descriptors have "
"the same state."
msgstr ""

#: ../../../crypto/userspace-if.rst:318
msgid ""
"Following CAVP testing interfaces are enabled when kernel is built with "
"CRYPTO_USER_API_RNG_CAVP option:"
msgstr ""

#: ../../../crypto/userspace-if.rst:321
msgid ""
"the concatenation of *Entropy* and *Nonce* can be provided to the RNG via "
"ALG_SET_DRBG_ENTROPY setsockopt interface. Setting the entropy requires "
"CAP_SYS_ADMIN permission."
msgstr ""

#: ../../../crypto/userspace-if.rst:325
msgid ""
"*Additional Data* can be provided using the send()/sendmsg() system calls, "
"but only after the entropy has been set."
msgstr ""

#: ../../../crypto/userspace-if.rst:329
msgid "Zero-Copy Interface"
msgstr ""

#: ../../../crypto/userspace-if.rst:331
msgid ""
"In addition to the send/write/read/recv system call family, the AF_ALG "
"interface can be accessed with the zero-copy interface of splice/vmsplice. "
"As the name indicates, the kernel tries to avoid a copy operation into "
"kernel space."
msgstr ""

#: ../../../crypto/userspace-if.rst:336
msgid ""
"The zero-copy operation requires data to be aligned at the page boundary. "
"Non-aligned data can be used as well, but may require more operations of the "
"kernel which would defeat the speed gains obtained from the zero-copy "
"interface."
msgstr ""

#: ../../../crypto/userspace-if.rst:341
msgid ""
"The system-inherent limit for the size of one zero-copy operation is 16 "
"pages. If more data is to be sent to AF_ALG, user space must slice the input "
"into segments with a maximum size of 16 pages."
msgstr ""

#: ../../../crypto/userspace-if.rst:345
msgid ""
"Zero-copy can be used with the following code example (a complete working "
"example is provided with libkcapi):"
msgstr ""

#: ../../../crypto/userspace-if.rst:361
msgid "Setsockopt Interface"
msgstr ""

#: ../../../crypto/userspace-if.rst:363
msgid ""
"In addition to the read/recv and send/write system call handling to send and "
"retrieve data subject to the cipher operation, a consumer also needs to set "
"the additional information for the cipher operation. This additional "
"information is set using the setsockopt system call that must be invoked "
"with the file descriptor of the open cipher (i.e. the file descriptor "
"returned by the accept system call)."
msgstr ""

#: ../../../crypto/userspace-if.rst:370
msgid "Each setsockopt invocation must use the level SOL_ALG."
msgstr ""

#: ../../../crypto/userspace-if.rst:372
msgid ""
"The setsockopt interface allows setting the following data using the "
"mentioned optname:"
msgstr ""

#: ../../../crypto/userspace-if.rst:375
msgid "ALG_SET_KEY -- Setting the key. Key setting is applicable to:"
msgstr ""

#: ../../../crypto/userspace-if.rst:377
msgid "the skcipher cipher type (symmetric ciphers)"
msgstr ""

#: ../../../crypto/userspace-if.rst:379
msgid "the hash cipher type (keyed message digests)"
msgstr ""

#: ../../../crypto/userspace-if.rst:381
msgid "the AEAD cipher type"
msgstr ""

#: ../../../crypto/userspace-if.rst:383
msgid "the RNG cipher type to provide the seed"
msgstr ""

#: ../../../crypto/userspace-if.rst:385
msgid "ALG_SET_KEY_BY_KEY_SERIAL -- Setting the key via keyring key_serial_t."
msgstr ""

#: ../../../crypto/userspace-if.rst:386
msgid ""
"This operation behaves the same as ALG_SET_KEY. The decrypted data is copied "
"from a keyring key, and uses that data as the key for symmetric encryption."
msgstr ""

#: ../../../crypto/userspace-if.rst:390
msgid ""
"The passed in key_serial_t must have the KEY_(POS|USR|GRP|OTH)_SEARCH "
"permission set, otherwise -EPERM is returned. Supports key types: user, "
"logon, encrypted, and trusted."
msgstr ""

#: ../../../crypto/userspace-if.rst:394
msgid ""
"ALG_SET_AEAD_AUTHSIZE -- Setting the authentication tag size for AEAD "
"ciphers. For a encryption operation, the authentication tag of the given "
"size will be generated. For a decryption operation, the provided ciphertext "
"is assumed to contain an authentication tag of the given size (see section "
"about AEAD memory layout below)."
msgstr ""

#: ../../../crypto/userspace-if.rst:400
msgid ""
"ALG_SET_DRBG_ENTROPY -- Setting the entropy of the random number generator. "
"This option is applicable to RNG cipher type only."
msgstr ""

#: ../../../crypto/userspace-if.rst:404
msgid "User space API example"
msgstr ""

#: ../../../crypto/userspace-if.rst:406
msgid ""
"Please see [1] for libkcapi which provides an easy-to-use wrapper around the "
"aforementioned Netlink kernel interface. [1] also contains a test "
"application that invokes all libkcapi API calls."
msgstr ""
