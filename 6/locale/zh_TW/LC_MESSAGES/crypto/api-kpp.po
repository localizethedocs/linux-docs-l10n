# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-21 08:55+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../crypto/api-kpp.rst:2
msgid "Key-agreement Protocol Primitives (KPP)"
msgstr ""

#: ../../../crypto/api-kpp.rst:5
msgid "Key-agreement Protocol Primitives (KPP) Cipher Algorithm Definitions"
msgstr ""

#: ../../../crypto/api-kpp:31: include/crypto/ecdh.h:36
#: ../../../crypto/api-kpp:40: include/crypto/dh.h:27
#: ../../../crypto/api-kpp:7: include/crypto/kpp.h:22 include/crypto/kpp.h:45
#: include/crypto/kpp.h:59 include/crypto/kpp.h:268
msgid "**Definition**::"
msgstr ""

#: ../../../crypto/api-kpp:31: include/crypto/ecdh.h:43
#: ../../../crypto/api-kpp:40: include/crypto/dh.h:38
#: ../../../crypto/api-kpp:7: include/crypto/kpp.h:33 include/crypto/kpp.h:52
#: include/crypto/kpp.h:71 include/crypto/kpp.h:275
msgid "**Members**"
msgstr ""

#: ../../../crypto/api-kpp:7: include/crypto/kpp.h:20 include/crypto/kpp.h:46
#: include/crypto/kpp.h:75
msgid "``base``"
msgstr ""

#: ../../../crypto/api-kpp:7: include/crypto/kpp.h:21
msgid "Common attributes for async crypto requests"
msgstr ""

#: ../../../crypto/api-kpp:7: include/crypto/kpp.h:21
msgid "``src``"
msgstr ""

#: ../../../crypto/api-kpp:7: include/crypto/kpp.h:22
msgid "Source data"
msgstr ""

#: ../../../crypto/api-kpp:7: include/crypto/kpp.h:22
msgid "``dst``"
msgstr ""

#: ../../../crypto/api-kpp:7: include/crypto/kpp.h:23
msgid "Destination data"
msgstr ""

#: ../../../crypto/api-kpp:7: include/crypto/kpp.h:23
msgid "``src_len``"
msgstr ""

#: ../../../crypto/api-kpp:7: include/crypto/kpp.h:24
msgid "Size of the input buffer"
msgstr ""

#: ../../../crypto/api-kpp:7: include/crypto/kpp.h:24
msgid "``dst_len``"
msgstr ""

#: ../../../crypto/api-kpp:7: include/crypto/kpp.h:25
msgid ""
"Size of the output buffer. It needs to be at least as big as the expected "
"result depending on the operation After operation it will be updated with "
"the actual size of the result. In case of error where the dst sgl size was "
"insufficient, it will be updated to the size required for the operation."
msgstr ""

#: ../../../crypto/api-kpp:7: include/crypto/kpp.h:29
msgid "``__ctx``"
msgstr ""

#: ../../../crypto/api-kpp:7: include/crypto/kpp.h:30
msgid "Start of private context data"
msgstr ""

#: ../../../crypto/api-kpp:7: include/crypto/kpp.h:41
msgid ""
"user-instantiated object which encapsulate algorithms and core processing "
"logic"
msgstr ""

#: ../../../crypto/api-kpp:7: include/crypto/kpp.h:44
msgid "``reqsize``"
msgstr ""

#: ../../../crypto/api-kpp:7: include/crypto/kpp.h:45
msgid "Request context size required by algorithm implementation"
msgstr ""

#: ../../../crypto/api-kpp:7: include/crypto/kpp.h:47 include/crypto/kpp.h:76
msgid "Common crypto API algorithm data structure"
msgstr ""

#: ../../../crypto/api-kpp:7: include/crypto/kpp.h:55
msgid "generic key-agreement protocol primitives"
msgstr ""

#: ../../../crypto/api-kpp:7: include/crypto/kpp.h:57
msgid "``set_secret``"
msgstr ""

#: ../../../crypto/api-kpp:7: include/crypto/kpp.h:58
msgid ""
"Function invokes the protocol specific function to store the secret private "
"key along with parameters. The implementation knows how to decode the buffer"
msgstr ""

#: ../../../crypto/api-kpp:7: include/crypto/kpp.h:60
msgid "``generate_public_key``"
msgstr ""

#: ../../../crypto/api-kpp:7: include/crypto/kpp.h:61
msgid ""
"Function generate the public key to be sent to the counterpart. In case of "
"error, where output is not big enough req->dst_len will be updated to the "
"size required"
msgstr ""

#: ../../../crypto/api-kpp:7: include/crypto/kpp.h:64
msgid "``compute_shared_secret``"
msgstr ""

#: ../../../crypto/api-kpp:7: include/crypto/kpp.h:65
msgid ""
"Function compute the shared secret as defined by the algorithm. The result "
"is given back to the user. In case of error, where output is not big enough, "
"req->dst_len will be updated to the size required"
msgstr ""

#: ../../../crypto/api-kpp:7: include/crypto/kpp.h:68
msgid "``max_size``"
msgstr ""

#: ../../../crypto/api-kpp:7: include/crypto/kpp.h:69
msgid "Function returns the size of the output buffer"
msgstr ""

#: ../../../crypto/api-kpp:7: include/crypto/kpp.h:69
msgid "``init``"
msgstr ""

#: ../../../crypto/api-kpp:7: include/crypto/kpp.h:70
msgid ""
"Initialize the object. This is called only once at instantiation time. In "
"case the cryptographic hardware needs to be initialized. Software fallback "
"should be put in place here."
msgstr ""

#: ../../../crypto/api-kpp:7: include/crypto/kpp.h:73
msgid "``exit``"
msgstr ""

#: ../../../crypto/api-kpp:7: include/crypto/kpp.h:74
msgid "Undo everything **init** did."
msgstr ""

#: ../../../crypto/api-kpp:7: include/crypto/kpp.h:264
msgid "small header for packing secret buffer"
msgstr ""

#: ../../../crypto/api-kpp:7: include/crypto/kpp.h:266
msgid "``type``"
msgstr ""

#: ../../../crypto/api-kpp:7: include/crypto/kpp.h:267
msgid "define type of secret. Each kpp type will define its own"
msgstr ""

#: ../../../crypto/api-kpp:7: include/crypto/kpp.h:267
msgid "``len``"
msgstr ""

#: ../../../crypto/api-kpp:7: include/crypto/kpp.h:268
msgid ""
"specify the len of the secret, include the header, that follows the struct"
msgstr ""

#: ../../../crypto/api-kpp.rst:11
msgid "Key-agreement Protocol Primitives (KPP) Cipher API"
msgstr ""

#: ../../../crypto/api-kpp:13: include/crypto/kpp.h:92
msgid ""
"The KPP API is used with the algorithm type CRYPTO_ALG_TYPE_KPP (listed as "
"type \"kpp\" in /proc/crypto)"
msgstr ""

#: ../../../crypto/api-kpp:16: include/crypto/kpp.h:99
msgid "allocate KPP tfm handle"
msgstr ""

#: ../../../crypto/api-kpp:16: include/crypto/kpp.h:103
#: include/crypto/kpp.h:165 include/crypto/kpp.h:280 include/crypto/kpp.h:301
#: include/crypto/kpp.h:321 include/crypto/kpp.h:338
#: ../../../crypto/api-kpp:22: include/crypto/kpp.h:177
#: include/crypto/kpp.h:197 include/crypto/kpp.h:207 include/crypto/kpp.h:228
#: include/crypto/kpp.h:245 ../../../crypto/api-kpp:31:
#: include/crypto/ecdh.h:47 include/crypto/ecdh.h:59 include/crypto/ecdh.h:74
#: ../../../crypto/api-kpp:40: include/crypto/dh.h:46 include/crypto/dh.h:58
#: include/crypto/dh.h:73
msgid "**Parameters**"
msgstr ""

#: ../../../crypto/api-kpp:16: include/crypto/kpp.h:105
msgid "``const char *alg_name``"
msgstr ""

#: ../../../crypto/api-kpp:16: include/crypto/kpp.h:100
msgid "is the name of the kpp algorithm (e.g. \"dh\", \"ecdh\")"
msgstr ""

#: ../../../crypto/api-kpp:16: include/crypto/kpp.h:102
msgid "``u32 type``"
msgstr ""

#: ../../../crypto/api-kpp:16: include/crypto/kpp.h:101
msgid "specifies the type of the algorithm"
msgstr ""

#: ../../../crypto/api-kpp:16: include/crypto/kpp.h:103
msgid "``u32 mask``"
msgstr ""

#: ../../../crypto/api-kpp:16: include/crypto/kpp.h:102
msgid "specifies the mask for the algorithm"
msgstr ""

#: ../../../crypto/api-kpp:16: include/crypto/kpp.h:104
#: include/crypto/kpp.h:165 include/crypto/kpp.h:288 include/crypto/kpp.h:307
#: include/crypto/kpp.h:324 include/crypto/kpp.h:343
#: ../../../crypto/api-kpp:22: include/crypto/kpp.h:213
#: include/crypto/kpp.h:232 include/crypto/kpp.h:249
#: ../../../crypto/api-kpp:31: include/crypto/ecdh.h:46
#: include/crypto/ecdh.h:62 include/crypto/ecdh.h:76
#: ../../../crypto/api-kpp:40: include/crypto/dh.h:45 include/crypto/dh.h:61
#: include/crypto/dh.h:75
msgid "**Description**"
msgstr ""

#: ../../../crypto/api-kpp:16: include/crypto/kpp.h:103
msgid ""
"Allocate a handle for kpp algorithm. The returned struct crypto_kpp is "
"required for any following API invocation"
msgstr ""

#: ../../../crypto/api-kpp:16: include/crypto/kpp.h:106
#: include/crypto/kpp.h:279 include/crypto/kpp.h:304 include/crypto/kpp.h:321
#: ../../../crypto/api-kpp:22: include/crypto/kpp.h:178
#: ../../../crypto/api-kpp:31: include/crypto/ecdh.h:49
#: include/crypto/ecdh.h:64 include/crypto/ecdh.h:78
#: ../../../crypto/api-kpp:40: include/crypto/dh.h:48 include/crypto/dh.h:63
#: include/crypto/dh.h:77
msgid "**Return**"
msgstr ""

#: ../../../crypto/api-kpp:16: include/crypto/kpp.h:107
msgid ""
"allocated handle in case of success; IS_ERR() is true in case of an error, "
"PTR_ERR() returns the error code."
msgstr ""

#: ../../../crypto/api-kpp:16: include/crypto/kpp.h:161
msgid "free KPP tfm handle"
msgstr ""

#: ../../../crypto/api-kpp:16: include/crypto/kpp.h:167
#: include/crypto/kpp.h:282 include/crypto/kpp.h:340
#: ../../../crypto/api-kpp:22: include/crypto/kpp.h:179
msgid "``struct crypto_kpp *tfm``"
msgstr ""

#: ../../../crypto/api-kpp:16: include/crypto/kpp.h:163
#: include/crypto/kpp.h:341 ../../../crypto/api-kpp:22:
#: include/crypto/kpp.h:175
msgid "KPP tfm handle allocated with crypto_alloc_kpp()"
msgstr ""

#: ../../../crypto/api-kpp:16: include/crypto/kpp.h:164
msgid "If **tfm** is a NULL or error pointer, this function does nothing."
msgstr ""

#: ../../../crypto/api-kpp:16: include/crypto/kpp.h:276
#: include/crypto/kpp.h:297 include/crypto/kpp.h:317
msgid "Invoke kpp operation"
msgstr ""

#: ../../../crypto/api-kpp:16: include/crypto/kpp.h:280
msgid "tfm handle"
msgstr ""

#: ../../../crypto/api-kpp:16: include/crypto/kpp.h:282
msgid "``const void *buffer``"
msgstr ""

#: ../../../crypto/api-kpp:16: include/crypto/kpp.h:281
msgid ""
"Buffer holding the packet representation of the private key. The structure "
"of the packet key depends on the particular KPP implementation. Packing and "
"unpacking helpers are provided for ECDH and DH (see the respective header "
"files for those implementations)."
msgstr ""

#: ../../../crypto/api-kpp:16: include/crypto/kpp.h:287
#: ../../../crypto/api-kpp:31: include/crypto/ecdh.h:60
#: include/crypto/ecdh.h:73 ../../../crypto/api-kpp:40: include/crypto/dh.h:59
#: include/crypto/dh.h:72
msgid "``unsigned int len``"
msgstr ""

#: ../../../crypto/api-kpp:16: include/crypto/kpp.h:286
msgid "Length of the packet private key buffer."
msgstr ""

#: ../../../crypto/api-kpp:16: include/crypto/kpp.h:277
msgid "Function invokes the specific kpp operation for a given alg."
msgstr ""

#: ../../../crypto/api-kpp:16: include/crypto/kpp.h:288
#: include/crypto/kpp.h:307 include/crypto/kpp.h:324
msgid "zero on success; error code in case of error"
msgstr ""

#: ../../../crypto/api-kpp:16: include/crypto/kpp.h:303
#: include/crypto/kpp.h:323 ../../../crypto/api-kpp:22:
#: include/crypto/kpp.h:199 include/crypto/kpp.h:209 include/crypto/kpp.h:230
#: include/crypto/kpp.h:247
msgid "``struct kpp_request *req``"
msgstr ""

#: ../../../crypto/api-kpp:16: include/crypto/kpp.h:305
#: include/crypto/kpp.h:322
msgid "kpp key request"
msgstr ""

#: ../../../crypto/api-kpp:16: include/crypto/kpp.h:298
msgid ""
"Function invokes the specific kpp operation for generating the public part "
"for a given kpp algorithm."
msgstr ""

#: ../../../crypto/api-kpp:16: include/crypto/kpp.h:301
msgid ""
"To generate a private key, the caller should use a random number generator. "
"The output of the requested length serves as the private key."
msgstr ""

#: ../../../crypto/api-kpp:16: include/crypto/kpp.h:318
msgid ""
"Function invokes the specific kpp operation for computing the shared secret "
"for a given kpp algorithm."
msgstr ""

#: ../../../crypto/api-kpp:16: include/crypto/kpp.h:334
msgid "Get len for output buffer"
msgstr ""

#: ../../../crypto/api-kpp:16: include/crypto/kpp.h:335
msgid ""
"Function returns the output buffer size required for a given key. Function "
"assumes that the key is already set in the transformation. If this function "
"is called without a setkey or with a failed setkey, you will end up in a "
"NULL dereference."
msgstr ""

#: ../../../crypto/api-kpp.rst:20
msgid "Key-agreement Protocol Primitives (KPP) Cipher Request Handle"
msgstr ""

#: ../../../crypto/api-kpp:22: include/crypto/kpp.h:173
msgid "allocates kpp request"
msgstr ""

#: ../../../crypto/api-kpp:22: include/crypto/kpp.h:177
msgid "``gfp_t gfp``"
msgstr ""

#: ../../../crypto/api-kpp:22: include/crypto/kpp.h:176
msgid "allocation flags"
msgstr ""

#: ../../../crypto/api-kpp:22: include/crypto/kpp.h:178
msgid "allocated handle in case of success or NULL in case of an error."
msgstr ""

#: ../../../crypto/api-kpp:22: include/crypto/kpp.h:193
msgid "zeroize and free kpp request"
msgstr ""

#: ../../../crypto/api-kpp:22: include/crypto/kpp.h:195
msgid "request to free"
msgstr ""

#: ../../../crypto/api-kpp:22: include/crypto/kpp.h:203
msgid "Sets an asynchronous callback."
msgstr ""

#: ../../../crypto/api-kpp:22: include/crypto/kpp.h:208
msgid "request that the callback will be set for"
msgstr ""

#: ../../../crypto/api-kpp:22: include/crypto/kpp.h:210
msgid "``u32 flgs``"
msgstr ""

#: ../../../crypto/api-kpp:22: include/crypto/kpp.h:209
msgid "specify for instance if the operation may backlog"
msgstr ""

#: ../../../crypto/api-kpp:22: include/crypto/kpp.h:211
msgid "``crypto_completion_t cmpl``"
msgstr ""

#: ../../../crypto/api-kpp:22: include/crypto/kpp.h:210
msgid "callback which will be called"
msgstr ""

#: ../../../crypto/api-kpp:22: include/crypto/kpp.h:212
msgid "``void *data``"
msgstr ""

#: ../../../crypto/api-kpp:22: include/crypto/kpp.h:211
msgid "private data used by the caller"
msgstr ""

#: ../../../crypto/api-kpp:22: include/crypto/kpp.h:204
msgid ""
"Callback will be called when an asynchronous operation on a given request is "
"finished."
msgstr ""

#: ../../../crypto/api-kpp:22: include/crypto/kpp.h:224
msgid "Sets input buffer"
msgstr ""

#: ../../../crypto/api-kpp:22: include/crypto/kpp.h:228
#: include/crypto/kpp.h:245
msgid "kpp request"
msgstr ""

#: ../../../crypto/api-kpp:22: include/crypto/kpp.h:230
msgid "``struct scatterlist *input``"
msgstr ""

#: ../../../crypto/api-kpp:22: include/crypto/kpp.h:229
msgid "ptr to input scatter list"
msgstr ""

#: ../../../crypto/api-kpp:22: include/crypto/kpp.h:231
msgid "``unsigned int input_len``"
msgstr ""

#: ../../../crypto/api-kpp:22: include/crypto/kpp.h:230
msgid "size of the input scatter list"
msgstr ""

#: ../../../crypto/api-kpp:22: include/crypto/kpp.h:225
msgid "Sets parameters required by generate_public_key"
msgstr ""

#: ../../../crypto/api-kpp:22: include/crypto/kpp.h:241
msgid "Sets output buffer"
msgstr ""

#: ../../../crypto/api-kpp:22: include/crypto/kpp.h:247
msgid "``struct scatterlist *output``"
msgstr ""

#: ../../../crypto/api-kpp:22: include/crypto/kpp.h:246
msgid "ptr to output scatter list"
msgstr ""

#: ../../../crypto/api-kpp:22: include/crypto/kpp.h:248
msgid "``unsigned int output_len``"
msgstr ""

#: ../../../crypto/api-kpp:22: include/crypto/kpp.h:247
msgid "size of the output scatter list"
msgstr ""

#: ../../../crypto/api-kpp:22: include/crypto/kpp.h:242
msgid "Sets parameters required by kpp operation"
msgstr ""

#: ../../../crypto/api-kpp.rst:26
msgid "ECDH Helper Functions"
msgstr ""

#: ../../../crypto/api-kpp:28: include/crypto/ecdh.h:12
msgid ""
"To use ECDH with the KPP cipher API, the following data structure and "
"functions should be used."
msgstr ""

#: ../../../crypto/api-kpp:28: include/crypto/ecdh.h:15
msgid ""
"The ECC curves known to the ECDH implementation are specified in this header "
"file."
msgstr ""

#: ../../../crypto/api-kpp:28: include/crypto/ecdh.h:18
msgid ""
"To use ECDH with KPP, the following functions should be used to operate on "
"an ECDH private key. The packet private key that can be set with the KPP API "
"function call of crypto_kpp_set_secret."
msgstr ""

#: ../../../crypto/api-kpp:31: include/crypto/ecdh.h:32
msgid "define an ECDH private key"
msgstr ""

#: ../../../crypto/api-kpp:31: include/crypto/ecdh.h:34
#: ../../../crypto/api-kpp:40: include/crypto/dh.h:25
msgid "``key``"
msgstr ""

#: ../../../crypto/api-kpp:31: include/crypto/ecdh.h:35
msgid "Private ECDH key"
msgstr ""

#: ../../../crypto/api-kpp:31: include/crypto/ecdh.h:35
#: ../../../crypto/api-kpp:40: include/crypto/dh.h:28
msgid "``key_size``"
msgstr ""

#: ../../../crypto/api-kpp:31: include/crypto/ecdh.h:36
msgid "Size of the private ECDH key"
msgstr ""

#: ../../../crypto/api-kpp:31: include/crypto/ecdh.h:43
msgid "Obtain the size of the private ECDH key"
msgstr ""

#: ../../../crypto/api-kpp:31: include/crypto/ecdh.h:49
msgid "``const struct ecdh *params``"
msgstr ""

#: ../../../crypto/api-kpp:31: include/crypto/ecdh.h:44
msgid "private ECDH key"
msgstr ""

#: ../../../crypto/api-kpp:31: include/crypto/ecdh.h:45
msgid ""
"This function returns the packet ECDH key size. A caller can use that with "
"the provided ECDH private key reference to obtain the required memory size "
"to hold a packet key."
msgstr ""

#: ../../../crypto/api-kpp:31: include/crypto/ecdh.h:50
#: ../../../crypto/api-kpp:40: include/crypto/dh.h:49
msgid "size of the key in bytes"
msgstr ""

#: ../../../crypto/api-kpp:31: include/crypto/ecdh.h:55
#: ../../../crypto/api-kpp:40: include/crypto/dh.h:54
msgid "encode the private key"
msgstr ""

#: ../../../crypto/api-kpp:31: include/crypto/ecdh.h:61
#: ../../../crypto/api-kpp:40: include/crypto/dh.h:60
msgid "``char *buf``"
msgstr ""

#: ../../../crypto/api-kpp:31: include/crypto/ecdh.h:56
msgid ""
"Buffer allocated by the caller to hold the packet ECDH private key. The "
"buffer should be at least crypto_ecdh_key_len bytes in size."
msgstr ""

#: ../../../crypto/api-kpp:31: include/crypto/ecdh.h:59
#: include/crypto/ecdh.h:72 ../../../crypto/api-kpp:40: include/crypto/dh.h:58
#: include/crypto/dh.h:71
msgid "Length of the packet private key buffer"
msgstr ""

#: ../../../crypto/api-kpp:31: include/crypto/ecdh.h:61
msgid "``const struct ecdh *p``"
msgstr ""

#: ../../../crypto/api-kpp:31: include/crypto/ecdh.h:60
#: ../../../crypto/api-kpp:40: include/crypto/dh.h:59
msgid "Buffer with the caller-specified private key"
msgstr ""

#: ../../../crypto/api-kpp:31: include/crypto/ecdh.h:61
msgid ""
"The ECDH implementations operate on a packet representation of the private "
"key."
msgstr ""

#: ../../../crypto/api-kpp:31: include/crypto/ecdh.h:65
#: include/crypto/ecdh.h:79 ../../../crypto/api-kpp:40: include/crypto/dh.h:64
#: include/crypto/dh.h:78
msgid "-EINVAL if buffer has insufficient size, 0 on success"
msgstr ""

#: ../../../crypto/api-kpp:31: include/crypto/ecdh.h:70
#: ../../../crypto/api-kpp:40: include/crypto/dh.h:69
msgid "decode a private key"
msgstr ""

#: ../../../crypto/api-kpp:31: include/crypto/ecdh.h:76
#: ../../../crypto/api-kpp:40: include/crypto/dh.h:75
msgid "``const char *buf``"
msgstr ""

#: ../../../crypto/api-kpp:31: include/crypto/ecdh.h:71
#: ../../../crypto/api-kpp:40: include/crypto/dh.h:70
msgid "Buffer holding a packet key that should be decoded"
msgstr ""

#: ../../../crypto/api-kpp:31: include/crypto/ecdh.h:74
msgid "``struct ecdh *p``"
msgstr ""

#: ../../../crypto/api-kpp:31: include/crypto/ecdh.h:73
msgid ""
"Buffer allocated by the caller that is filled with the unpacked ECDH private "
"key."
msgstr ""

#: ../../../crypto/api-kpp:31: include/crypto/ecdh.h:75
#: ../../../crypto/api-kpp:40: include/crypto/dh.h:74
msgid ""
"The unpacking obtains the private key by pointing **p** to the correct "
"location in **buf**. Thus, both pointers refer to the same memory."
msgstr ""

#: ../../../crypto/api-kpp.rst:35
msgid "DH Helper Functions"
msgstr ""

#: ../../../crypto/api-kpp:37: include/crypto/dh.h:12
msgid ""
"To use DH with the KPP cipher API, the following data structure and "
"functions should be used."
msgstr ""

#: ../../../crypto/api-kpp:37: include/crypto/dh.h:15
msgid ""
"To use DH with KPP, the following functions should be used to operate on a "
"DH private key. The packet private key that can be set with the KPP API "
"function call of crypto_kpp_set_secret."
msgstr ""

#: ../../../crypto/api-kpp:40: include/crypto/dh.h:23
msgid "define a DH private key"
msgstr ""

#: ../../../crypto/api-kpp:40: include/crypto/dh.h:26
msgid "Private DH key"
msgstr ""

#: ../../../crypto/api-kpp:40: include/crypto/dh.h:26
msgid "``p``"
msgstr ""

#: ../../../crypto/api-kpp:40: include/crypto/dh.h:27
msgid "Diffie-Hellman parameter P"
msgstr ""

#: ../../../crypto/api-kpp:40: include/crypto/dh.h:27
msgid "``g``"
msgstr ""

#: ../../../crypto/api-kpp:40: include/crypto/dh.h:28
msgid "Diffie-Hellman generator G"
msgstr ""

#: ../../../crypto/api-kpp:40: include/crypto/dh.h:29
msgid "Size of the private DH key"
msgstr ""

#: ../../../crypto/api-kpp:40: include/crypto/dh.h:29
msgid "``p_size``"
msgstr ""

#: ../../../crypto/api-kpp:40: include/crypto/dh.h:30
msgid "Size of DH parameter P"
msgstr ""

#: ../../../crypto/api-kpp:40: include/crypto/dh.h:30
msgid "``g_size``"
msgstr ""

#: ../../../crypto/api-kpp:40: include/crypto/dh.h:31
msgid "Size of DH generator G"
msgstr ""

#: ../../../crypto/api-kpp:40: include/crypto/dh.h:42
msgid "Obtain the size of the private DH key"
msgstr ""

#: ../../../crypto/api-kpp:40: include/crypto/dh.h:48 include/crypto/dh.h:60
msgid "``const struct dh *params``"
msgstr ""

#: ../../../crypto/api-kpp:40: include/crypto/dh.h:43
msgid "private DH key"
msgstr ""

#: ../../../crypto/api-kpp:40: include/crypto/dh.h:44
msgid ""
"This function returns the packet DH key size. A caller can use that with the "
"provided DH private key reference to obtain the required memory size to hold "
"a packet key."
msgstr ""

#: ../../../crypto/api-kpp:40: include/crypto/dh.h:55
msgid ""
"Buffer allocated by the caller to hold the packet DH private key. The buffer "
"should be at least crypto_dh_key_len bytes in size."
msgstr ""

#: ../../../crypto/api-kpp:40: include/crypto/dh.h:60
msgid ""
"The DH implementations operate on a packet representation of the private key."
msgstr ""

#: ../../../crypto/api-kpp:40: include/crypto/dh.h:73
msgid "``struct dh *params``"
msgstr ""

#: ../../../crypto/api-kpp:40: include/crypto/dh.h:72
msgid ""
"Buffer allocated by the caller that is filled with the unpacked DH private "
"key."
msgstr ""
