# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-14 08:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../crypto/api-digest.rst:2
msgid "Message Digest"
msgstr ""

#: ../../../crypto/api-digest.rst:5
msgid "Message Digest Algorithm Definitions"
msgstr ""

#: ../../../crypto/api-digest:7: include/crypto/hash.h:25
msgid ""
"These data structures define modular message digest algorithm "
"implementations, managed via crypto_register_ahash(), "
"crypto_register_shash(), crypto_unregister_ahash() and "
"crypto_unregister_shash()."
msgstr ""

#: ../../../crypto/api-digest:10: include/crypto/hash.h:76
msgid "asynchronous message digest definition"
msgstr ""

#: ../../../crypto/api-digest:10: include/crypto/hash.h:80
#: include/crypto/hash.h:224
msgid "**Definition**::"
msgstr ""

#: ../../../crypto/api-digest:10: include/crypto/hash.h:99
#: include/crypto/hash.h:247
msgid "**Members**"
msgstr ""

#: ../../../crypto/api-digest:10: include/crypto/hash.h:77
#: include/crypto/hash.h:221
msgid "``init``"
msgstr ""

#: ../../../crypto/api-digest:10: include/crypto/hash.h:78
msgid ""
"**[mandatory]** Initialize the transformation context. Intended only to "
"initialize the state of the HASH transformation at the beginning. This shall "
"fill in the internal structures used during the entire duration of the whole "
"transformation. No data processing happens at this point. Driver code "
"implementation must not use req->result."
msgstr ""

#: ../../../crypto/api-digest:10: include/crypto/hash.h:82
#: include/crypto/hash.h:222
msgid "``update``"
msgstr ""

#: ../../../crypto/api-digest:10: include/crypto/hash.h:83
msgid ""
"**[mandatory]** Push a chunk of data into the driver for transformation. "
"This function actually pushes blocks of data from upper layers into the "
"driver, which then passes those to the hardware as seen fit. This function "
"must not finalize the HASH transformation by calculating the final message "
"digest as this only adds more data into the transformation. This function "
"shall not modify the transformation context, as this function may be called "
"in parallel with the same transformation object. Data processing can happen "
"synchronously [SHASH] or asynchronously [AHASH] at this point. Driver must "
"not use req->result. For block-only algorithms, **update** must return the "
"number of bytes to store in the API partial block buffer."
msgstr ""

#: ../../../crypto/api-digest:10: include/crypto/hash.h:94
#: include/crypto/hash.h:223
msgid "``final``"
msgstr ""

#: ../../../crypto/api-digest:10: include/crypto/hash.h:95
msgid ""
"**[mandatory]** Retrieve result from the driver. This function finalizes the "
"transformation and retrieves the resulting hash from the driver and pushes "
"it back to upper layers. No data processing happens at this point unless "
"hardware requires it to finish the transformation (then the data buffered by "
"the device driver is processed)."
msgstr ""

#: ../../../crypto/api-digest:10: include/crypto/hash.h:99
#: include/crypto/hash.h:224
msgid "``finup``"
msgstr ""

#: ../../../crypto/api-digest:10: include/crypto/hash.h:100
msgid ""
"**[optional]** Combination of **update** and **final**. This function is "
"effectively a combination of **update** and **final** calls issued in "
"sequence. As some hardware cannot do **update** and **final** separately, "
"this callback was added to allow such hardware to be used at least by IPsec. "
"Data processing can happen synchronously [SHASH] or asynchronously [AHASH] "
"at this point."
msgstr ""

#: ../../../crypto/api-digest:10: include/crypto/hash.h:105
#: include/crypto/hash.h:225
msgid "``digest``"
msgstr ""

#: ../../../crypto/api-digest:10: include/crypto/hash.h:106
msgid ""
"Combination of **init** and **update** and **final**. This function "
"effectively behaves as the entire chain of operations, **init**, **update** "
"and **final** issued in sequence. Just like **finup**, this was added for "
"hardware which cannot do even the **finup**, but can only do the whole "
"transformation in one run. Data processing can happen synchronously [SHASH] "
"or asynchronously [AHASH] at this point."
msgstr ""

#: ../../../crypto/api-digest:10: include/crypto/hash.h:124
#: include/crypto/hash.h:226
msgid "``export``"
msgstr ""

#: ../../../crypto/api-digest:10: include/crypto/hash.h:125
msgid ""
"Export partial state of the transformation. This function dumps the entire "
"state of the ongoing transformation into a provided block of data so it can "
"be **import** 'ed back later on. This is useful in case you want to save "
"partial result of the transformation after processing certain amount of data "
"and reload this partial result multiple times later on for multiple re-use. "
"No data processing happens at this point. Driver must not use req->result."
msgstr ""

#: ../../../crypto/api-digest:10: include/crypto/hash.h:131
#: include/crypto/hash.h:227
msgid "``import``"
msgstr ""

#: ../../../crypto/api-digest:10: include/crypto/hash.h:132
msgid ""
"Import partial state of the transformation. This function loads the entire "
"state of the ongoing transformation from a provided block of data so the "
"transformation can continue from this point onward. No data processing "
"happens at this point. Driver must not use req->result."
msgstr ""

#: ../../../crypto/api-digest:10: include/crypto/hash.h:136
#: include/crypto/hash.h:228
msgid "``export_core``"
msgstr ""

#: ../../../crypto/api-digest:10: include/crypto/hash.h:137
msgid ""
"Export partial state without partial block.  Only defined for algorithms "
"that are not block-only."
msgstr ""

#: ../../../crypto/api-digest:10: include/crypto/hash.h:138
#: include/crypto/hash.h:229
msgid "``import_core``"
msgstr ""

#: ../../../crypto/api-digest:10: include/crypto/hash.h:139
msgid ""
"Import partial state without partial block.  Only defined for algorithms "
"that are not block-only."
msgstr ""

#: ../../../crypto/api-digest:10: include/crypto/hash.h:111
#: include/crypto/hash.h:230
msgid "``setkey``"
msgstr ""

#: ../../../crypto/api-digest:10: include/crypto/hash.h:112
msgid ""
"Set optional key used by the hashing algorithm. Intended to push optional "
"key used by the hashing algorithm from upper layers into the driver. This "
"function can store the key in the transformation context or can outright "
"program it into the hardware. In the former case, one must be careful to "
"program the key into the hardware at appropriate time and one must be "
"careful that .setkey() can be called multiple times during the existence of "
"the transformation object. Not  all hashing algorithms do implement this "
"function as it is only needed for keyed message digests. SHAx/MDx/CRCx do "
"NOT implement this function. HMAC(MDx)/HMAC(SHAx)/CMAC(AES) do implement "
"this function. This function must be called before any other of the "
"**init**, **update**, **final**, **finup**, **digest** is called. No data "
"processing happens at this point."
msgstr ""

#: ../../../crypto/api-digest:10: include/crypto/hash.h:140
#: include/crypto/hash.h:231
msgid "``init_tfm``"
msgstr ""

#: ../../../crypto/api-digest:10: include/crypto/hash.h:141
#: include/crypto/hash.h:232
msgid ""
"Initialize the cryptographic transformation object. This function is called "
"only once at the instantiation time, right after the transformation context "
"was allocated. In case the cryptographic hardware has some special "
"requirements which need to be handled by software, this function shall check "
"for the precise requirement of the transformation and put any software "
"fallbacks in place."
msgstr ""

#: ../../../crypto/api-digest:10: include/crypto/hash.h:148
#: include/crypto/hash.h:239
msgid "``exit_tfm``"
msgstr ""

#: ../../../crypto/api-digest:10: include/crypto/hash.h:149
#: include/crypto/hash.h:240
msgid ""
"Deinitialize the cryptographic transformation object. This is a counterpart "
"to **init_tfm**, used to remove various changes set in **init_tfm**."
msgstr ""

#: ../../../crypto/api-digest:10: include/crypto/hash.h:151
#: include/crypto/hash.h:242
msgid "``clone_tfm``"
msgstr ""

#: ../../../crypto/api-digest:10: include/crypto/hash.h:152
#: include/crypto/hash.h:243
msgid "Copy transform into new object, may allocate memory."
msgstr ""

#: ../../../crypto/api-digest:10: include/crypto/hash.h:152
#: include/crypto/hash.h:246
msgid "``halg``"
msgstr ""

#: ../../../crypto/api-digest:10: include/crypto/hash.h:153
#: include/crypto/hash.h:247 include/crypto/hash.h:248
msgid "see struct hash_alg_common"
msgstr ""

#: ../../../crypto/api-digest:10: include/crypto/hash.h:220
msgid "synchronous message digest definition"
msgstr ""

#: ../../../crypto/api-digest:10: include/crypto/hash.h:222
#: include/crypto/hash.h:223 include/crypto/hash.h:224
#: include/crypto/hash.h:225 include/crypto/hash.h:226
#: include/crypto/hash.h:227 include/crypto/hash.h:228
#: include/crypto/hash.h:229 include/crypto/hash.h:230
#: include/crypto/hash.h:231
msgid "see struct ahash_alg"
msgstr ""

#: ../../../crypto/api-digest:10: include/crypto/hash.h:243
msgid "``descsize``"
msgstr ""

#: ../../../crypto/api-digest:10: include/crypto/hash.h:244
msgid ""
"Size of the operational state for the message digest. This state size is the "
"memory size that needs to be allocated for shash_desc.__ctx"
msgstr ""

#: ../../../crypto/api-digest:10: include/crypto/hash.h:1
msgid "``{unnamed_union}``"
msgstr ""

#: ../../../crypto/api-digest:10: include/crypto/hash.h:2
msgid "anonymous"
msgstr ""

#: ../../../crypto/api-digest:10: include/crypto/hash.h:247
msgid "``HASH_ALG_COMMON``"
msgstr ""

#: ../../../crypto/api-digest.rst:14
msgid "Asynchronous Message Digest API"
msgstr ""

#: ../../../crypto/api-digest:16: include/crypto/hash.h:289
msgid ""
"The asynchronous message digest API is used with the ciphers of type "
"CRYPTO_ALG_TYPE_AHASH (listed as type \"ahash\" in /proc/crypto)"
msgstr ""

#: ../../../crypto/api-digest:16: include/crypto/hash.h:292
msgid ""
"The asynchronous cipher operation discussion provided for the "
"CRYPTO_ALG_TYPE_SKCIPHER API applies here as well."
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:309
msgid "allocate ahash cipher handle"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:313
#: include/crypto/hash.h:337 include/crypto/hash.h:396
#: include/crypto/hash.h:411 include/crypto/hash.h:441
#: include/crypto/hash.h:457 include/crypto/hash.h:473
#: include/crypto/hash.h:487 include/crypto/hash.h:500
#: include/crypto/hash.h:521 include/crypto/hash.h:534
#: include/crypto/hash.h:547 include/crypto/hash.h:560
#: ../../../crypto/api-digest:28: include/crypto/hash.h:597
#: include/crypto/hash.h:611 include/crypto/hash.h:638
#: include/crypto/hash.h:656 include/crypto/hash.h:691
#: ../../../crypto/api-digest:37: include/crypto/hash.h:750
#: include/crypto/hash.h:776 include/crypto/hash.h:797
#: include/crypto/hash.h:821 include/crypto/hash.h:855
#: include/crypto/hash.h:880 include/crypto/hash.h:896
#: include/crypto/hash.h:936 include/crypto/hash.h:950
#: include/crypto/hash.h:964 include/crypto/hash.h:978
#: include/crypto/hash.h:996 include/crypto/hash.h:1014
msgid "**Parameters**"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:315
#: ../../../crypto/api-digest:37: include/crypto/hash.h:752
msgid "``const char *alg_name``"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:310
msgid ""
"is the cra_name / name or cra_driver_name / driver name of the ahash cipher"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:313
#: ../../../crypto/api-digest:37: include/crypto/hash.h:750
msgid "``u32 type``"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:312
#: ../../../crypto/api-digest:37: include/crypto/hash.h:749
msgid "specifies the type of the cipher"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:314
#: ../../../crypto/api-digest:37: include/crypto/hash.h:751
msgid "``u32 mask``"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:313
#: ../../../crypto/api-digest:37: include/crypto/hash.h:750
msgid "specifies the mask for the cipher"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:315
#: include/crypto/hash.h:336 include/crypto/hash.h:395
#: include/crypto/hash.h:410 include/crypto/hash.h:441
#: include/crypto/hash.h:474 include/crypto/hash.h:487
#: include/crypto/hash.h:500 include/crypto/hash.h:521
#: include/crypto/hash.h:534 include/crypto/hash.h:547
#: include/crypto/hash.h:560 ../../../crypto/api-digest:28:
#: include/crypto/hash.h:597 include/crypto/hash.h:611
#: include/crypto/hash.h:668 include/crypto/hash.h:695
#: ../../../crypto/api-digest:37: include/crypto/hash.h:752
#: include/crypto/hash.h:775 include/crypto/hash.h:796
#: include/crypto/hash.h:820 include/crypto/hash.h:854
#: include/crypto/hash.h:881 include/crypto/hash.h:898
#: include/crypto/hash.h:936 include/crypto/hash.h:950
#: include/crypto/hash.h:963 include/crypto/hash.h:980
#: include/crypto/hash.h:997 include/crypto/hash.h:1014
msgid "**Description**"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:314
msgid ""
"Allocate a cipher handle for an ahash. The returned struct crypto_ahash is "
"the cipher handle that is required for any subsequent API invocation for "
"that ahash."
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:318
#: include/crypto/hash.h:397 include/crypto/hash.h:413
#: include/crypto/hash.h:443 include/crypto/hash.h:456
#: include/crypto/hash.h:476 include/crypto/hash.h:490
#: include/crypto/hash.h:503 include/crypto/hash.h:524
#: include/crypto/hash.h:537 include/crypto/hash.h:550
#: include/crypto/hash.h:563 ../../../crypto/api-digest:28:
#: include/crypto/hash.h:615 ../../../crypto/api-digest:37:
#: include/crypto/hash.h:755 include/crypto/hash.h:798
#: include/crypto/hash.h:822 include/crypto/hash.h:862
#: include/crypto/hash.h:887 include/crypto/hash.h:904
#: include/crypto/hash.h:942 include/crypto/hash.h:956
#: include/crypto/hash.h:969 include/crypto/hash.h:986
#: include/crypto/hash.h:1001 include/crypto/hash.h:1021
msgid "**Return**"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:319
#: ../../../crypto/api-digest:37: include/crypto/hash.h:756
msgid ""
"allocated cipher handle in case of success; IS_ERR() is true in case of an "
"error, PTR_ERR() returns the error code."
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:333
msgid "zeroize and free the ahash handle"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:339
#: include/crypto/hash.h:398 include/crypto/hash.h:413
#: include/crypto/hash.h:459 include/crypto/hash.h:475
#: ../../../crypto/api-digest:28: include/crypto/hash.h:596
#: include/crypto/hash.h:613
msgid "``struct crypto_ahash *tfm``"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:334
#: ../../../crypto/api-digest:37: include/crypto/hash.h:773
msgid "cipher handle to be freed"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:335
#: ../../../crypto/api-digest:37: include/crypto/hash.h:774
msgid "If **tfm** is a NULL or error pointer, this function does nothing."
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:392
#: ../../../crypto/api-digest:37: include/crypto/hash.h:817
msgid "obtain message digest size"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:393
#: include/crypto/hash.h:408 include/crypto/hash.h:454
#: include/crypto/hash.h:470 ../../../crypto/api-digest:37:
#: include/crypto/hash.h:794 include/crypto/hash.h:818
#: include/crypto/hash.h:852 include/crypto/hash.h:877
msgid "cipher handle"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:394
#: ../../../crypto/api-digest:37: include/crypto/hash.h:819
msgid ""
"The size for the message digest created by the message digest cipher "
"referenced with the cipher handle is returned."
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:399
msgid "message digest size of cipher"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:407
msgid "obtain size of the ahash state"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:409
msgid ""
"Return the size of the ahash state. With the crypto_ahash_export() function, "
"the caller can export the state into a buffer whose size is defined with "
"this function."
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:414
msgid "size of the ahash state"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:437
msgid "obtain cipher handle from request"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:443
#: include/crypto/hash.h:489 include/crypto/hash.h:502
#: include/crypto/hash.h:523 include/crypto/hash.h:536
#: include/crypto/hash.h:549 include/crypto/hash.h:562
#: ../../../crypto/api-digest:28: include/crypto/hash.h:599
#: include/crypto/hash.h:640 include/crypto/hash.h:658
#: include/crypto/hash.h:693
msgid "``struct ahash_request *req``"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:438
msgid ""
"asynchronous request handle that contains the reference to the ahash cipher "
"handle"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:440
msgid ""
"Return the ahash cipher handle that is registered with the asynchronous "
"request handle ahash_request."
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:444
msgid "ahash cipher handle"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:453
msgid "obtain size of the request data structure"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:456
msgid "size of the request data"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:469
msgid "set key for cipher handle"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:472
#: ../../../crypto/api-digest:37: include/crypto/hash.h:879
msgid "``const u8 *key``"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:471
#: ../../../crypto/api-digest:37: include/crypto/hash.h:878
msgid "buffer holding the key"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:473
#: ../../../crypto/api-digest:37: include/crypto/hash.h:880
msgid "``unsigned int keylen``"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:472
#: ../../../crypto/api-digest:37: include/crypto/hash.h:879
msgid "length of the key in bytes"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:473
msgid ""
"The caller provided key is set for the ahash cipher. The cipher handle must "
"point to a keyed hash in order for this function to succeed."
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:477
#: ../../../crypto/api-digest:37: include/crypto/hash.h:886
msgid "0 if the setting of the key was successful; < 0 if an error occurred"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:483
msgid "update and finalize message digest"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:484
#: include/crypto/hash.h:497 include/crypto/hash.h:518
msgid ""
"reference to the ahash_request handle that holds all information needed to "
"perform the cipher operation"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:486
msgid ""
"This function is a \"short-hand\" for the function calls of "
"crypto_ahash_update and crypto_ahash_final. The parameters have the same "
"meaning as discussed for those separate functions."
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:491
#: include/crypto/hash.h:525 include/crypto/hash.h:564
msgid "see crypto_ahash_final()"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:496
#: ../../../crypto/api-digest:37: include/crypto/hash.h:1010
msgid "calculate message digest"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:499
msgid ""
"Finalize the message digest operation and create the message digest based on "
"all data added to the cipher handle. The message digest is placed into the "
"output buffer registered with the ahash_request handle."
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:504
msgid ""
"0            if the message digest was successfully calculated; -EINPROGRESS "
"if data is fed into hardware (DMA) or queued for later; -EBUSY       if "
"queue is full and request should be resubmitted later; other < 0    if an "
"error occurred"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:517
msgid "calculate message digest for a buffer"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:520
msgid ""
"This function is a \"short-hand\" for the function calls of "
"crypto_ahash_init, crypto_ahash_update and crypto_ahash_final. The "
"parameters have the same meaning as discussed for those separate three "
"functions."
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:530
msgid "extract current message digest state"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:531
msgid "reference to the ahash_request handle whose state is exported"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:533
#: ../../../crypto/api-digest:37: include/crypto/hash.h:935
msgid "``void *out``"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:532
#: ../../../crypto/api-digest:37: include/crypto/hash.h:934
msgid "output buffer of sufficient size that can hold the hash state"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:533
msgid ""
"This function exports the hash state of the ahash_request handle into the "
"caller-allocated output buffer out which must have sufficient size (e.g. by "
"calling crypto_ahash_statesize())."
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:538
msgid "0 if the export was successful; < 0 if an error occurred"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:543
msgid "import message digest state"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:544
msgid "reference to ahash_request handle the state is imported into"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:546
#: ../../../crypto/api-digest:37: include/crypto/hash.h:949
msgid "``const void *in``"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:545
#: ../../../crypto/api-digest:37: include/crypto/hash.h:948
msgid "buffer holding the state"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:546
msgid ""
"This function imports the hash state into the ahash_request handle from the "
"input buffer. That buffer should have been generated with the "
"crypto_ahash_export function."
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:551
#: ../../../crypto/api-digest:37: include/crypto/hash.h:955
msgid "0 if the import was successful; < 0 if an error occurred"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:556
msgid "(re)initialize message digest handle"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:557
msgid ""
"ahash_request handle that already is initialized with all necessary data "
"using the ahash_request_* API functions"
msgstr ""

#: ../../../crypto/api-digest:19: include/crypto/hash.h:559
msgid ""
"The call (re-)initializes the message digest referenced by the ahash_request "
"handle. Any potentially existing state created by previous operations is "
"discarded."
msgstr ""

#: ../../../crypto/api-digest.rst:23
msgid "Asynchronous Hash Request Handle"
msgstr ""

#: ../../../crypto/api-digest:25: include/crypto/hash.h:582
msgid ""
"The :c:type:`ahash_request` data structure contains all pointers to data "
"required for the asynchronous cipher operation. This includes the cipher "
"handle (which can be used by multiple :c:type:`ahash_request` instances), "
"pointer to plaintext and the message digest output buffer, asynchronous "
"callback function, etc. It acts as a handle to the ahash_request_* API calls "
"in a similar way as ahash handle to the crypto_ahash_* API calls."
msgstr ""

#: ../../../crypto/api-digest:28: include/crypto/hash.h:593
msgid "update cipher handle reference in request"
msgstr ""

#: ../../../crypto/api-digest:28: include/crypto/hash.h:594
msgid "request handle to be modified"
msgstr ""

#: ../../../crypto/api-digest:28: include/crypto/hash.h:595
msgid "cipher handle that shall be added to the request handle"
msgstr ""

#: ../../../crypto/api-digest:28: include/crypto/hash.h:596
msgid ""
"Allow the caller to replace the existing ahash handle in the request data "
"structure with a different one."
msgstr ""

#: ../../../crypto/api-digest:28: include/crypto/hash.h:607
msgid "allocate request data structure"
msgstr ""

#: ../../../crypto/api-digest:28: include/crypto/hash.h:608
msgid "cipher handle to be registered with the request"
msgstr ""

#: ../../../crypto/api-digest:28: include/crypto/hash.h:610
msgid "``gfp_t gfp``"
msgstr ""

#: ../../../crypto/api-digest:28: include/crypto/hash.h:609
msgid "memory allocation flag that is handed to kmalloc by the API call."
msgstr ""

#: ../../../crypto/api-digest:28: include/crypto/hash.h:610
msgid ""
"Allocate the request data structure that must be used with the ahash message "
"digest API calls. During the allocation, the provided ahash handle is "
"registered in the request data structure."
msgstr ""

#: ../../../crypto/api-digest:28: include/crypto/hash.h:616
msgid "allocated request handle in case of success, or NULL if out of memory"
msgstr ""

#: ../../../crypto/api-digest:28: include/crypto/hash.h:634
msgid "zeroize and free the request data structure"
msgstr ""

#: ../../../crypto/api-digest:28: include/crypto/hash.h:635
msgid "request data structure cipher handle to be freed"
msgstr ""

#: ../../../crypto/api-digest:28: include/crypto/hash.h:652
msgid "set asynchronous callback function"
msgstr ""

#: ../../../crypto/api-digest:28: include/crypto/hash.h:653
msgid "request handle"
msgstr ""

#: ../../../crypto/api-digest:28: include/crypto/hash.h:655
msgid "``u32 flags``"
msgstr ""

#: ../../../crypto/api-digest:28: include/crypto/hash.h:654
msgid ""
"specify zero or an ORing of the flags CRYPTO_TFM_REQ_MAY_BACKLOG the request "
"queue may back log and increase the wait queue beyond the initial maximum "
"size; CRYPTO_TFM_REQ_MAY_SLEEP the request processing may sleep"
msgstr ""

#: ../../../crypto/api-digest:28: include/crypto/hash.h:659
msgid "``crypto_completion_t compl``"
msgstr ""

#: ../../../crypto/api-digest:28: include/crypto/hash.h:658
msgid "callback function pointer to be registered with the request handle"
msgstr ""

#: ../../../crypto/api-digest:28: include/crypto/hash.h:660
msgid "``void *data``"
msgstr ""

#: ../../../crypto/api-digest:28: include/crypto/hash.h:659
msgid ""
"The data pointer refers to memory that is not used by the kernel crypto API, "
"but provided to the callback function for it to use. Here, the caller can "
"provide a reference to memory the callback function can operate on. As the "
"callback function is invoked asynchronously to the related functionality, it "
"may need to access data structures of the related functionality which can be "
"referenced using this pointer. The callback function can access the memory "
"via the \"data\" field in the :c:type:`crypto_async_request` data structure "
"provided to the callback function."
msgstr ""

#: ../../../crypto/api-digest:28: include/crypto/hash.h:667
msgid ""
"This function allows setting the callback function that is triggered once "
"the cipher operation completes."
msgstr ""

#: ../../../crypto/api-digest:28: include/crypto/hash.h:670
msgid ""
"The callback function is registered with the :c:type:`ahash_request` handle "
"and must comply with the following template::"
msgstr ""

#: ../../../crypto/api-digest:28: include/crypto/hash.h:687
msgid "set data buffers"
msgstr ""

#: ../../../crypto/api-digest:28: include/crypto/hash.h:688
msgid "ahash_request handle to be updated"
msgstr ""

#: ../../../crypto/api-digest:28: include/crypto/hash.h:690
msgid "``struct scatterlist *src``"
msgstr ""

#: ../../../crypto/api-digest:28: include/crypto/hash.h:689
msgid "source scatter/gather list"
msgstr ""

#: ../../../crypto/api-digest:28: include/crypto/hash.h:691
msgid "``u8 *result``"
msgstr ""

#: ../../../crypto/api-digest:28: include/crypto/hash.h:690
msgid ""
"buffer that is filled with the message digest -- the caller must ensure that "
"the buffer has sufficient space by, for example, calling "
"crypto_ahash_digestsize()"
msgstr ""

#: ../../../crypto/api-digest:28: include/crypto/hash.h:694
msgid "``unsigned int nbytes``"
msgstr ""

#: ../../../crypto/api-digest:28: include/crypto/hash.h:693
msgid "number of bytes to process from the source scatter/gather list"
msgstr ""

#: ../../../crypto/api-digest:28: include/crypto/hash.h:694
msgid ""
"By using this call, the caller references the source scatter/gather list. "
"The source scatter/gather list points to the data the message digest is to "
"be calculated for."
msgstr ""

#: ../../../crypto/api-digest.rst:32
msgid "Synchronous Message Digest API"
msgstr ""

#: ../../../crypto/api-digest:34: include/crypto/hash.h:733
msgid ""
"The synchronous message digest API is used with the ciphers of type "
"CRYPTO_ALG_TYPE_SHASH (listed as type \"shash\" in /proc/crypto)"
msgstr ""

#: ../../../crypto/api-digest:34: include/crypto/hash.h:736
msgid ""
"The message digest API is able to maintain state information for the caller."
msgstr ""

#: ../../../crypto/api-digest:34: include/crypto/hash.h:739
msgid ""
"The synchronous message digest API can store user-related context in its "
"shash_desc request data structure."
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:746
msgid "allocate message digest handle"
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:747
msgid ""
"is the cra_name / name or cra_driver_name / driver name of the message "
"digest cipher"
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:751
msgid ""
"Allocate a cipher handle for a message digest. The returned :c:type:`struct "
"crypto_shash <crypto_shash>` is the cipher handle that is required for any "
"subsequent API invocation for that message digest."
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:772
msgid "zeroize and free the message digest handle"
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:778
#: include/crypto/hash.h:799 include/crypto/hash.h:823
#: include/crypto/hash.h:857 include/crypto/hash.h:882
msgid "``struct crypto_shash *tfm``"
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:793
msgid "obtain block size for cipher"
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:795
msgid ""
"The block size for the message digest cipher referenced with the cipher "
"handle is returned."
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:799
msgid "block size of cipher"
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:823
msgid "digest size of cipher"
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:851
msgid "obtain the operational state size"
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:853
msgid ""
"The size of the operational state the cipher needs during operation is "
"returned for the hash referenced with the cipher handle. This size is "
"required to calculate the memory requirements to allow the caller allocating "
"sufficient memory for operational state."
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:858
msgid ""
"The operational state is defined with struct shash_desc where the size of "
"that data structure is to be calculated as sizeof(struct shash_desc) + "
"crypto_shash_descsize(alg)"
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:863
msgid "size of the operational state"
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:876
msgid "set key for message digest"
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:880
msgid ""
"The caller provided key is set for the keyed message digest cipher. The "
"cipher handle must point to a keyed message digest cipher in order for this "
"function to succeed."
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:884
#: include/crypto/hash.h:901 include/crypto/hash.h:939
#: include/crypto/hash.h:953 include/crypto/hash.h:966
#: include/crypto/hash.h:983 include/crypto/hash.h:998
#: include/crypto/hash.h:1018
msgid "**Context**"
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:885
#: include/crypto/hash.h:902 include/crypto/hash.h:940
#: include/crypto/hash.h:954 include/crypto/hash.h:967
#: include/crypto/hash.h:984 include/crypto/hash.h:999
#: include/crypto/hash.h:1019
msgid "Softirq or process context."
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:892
msgid "calculate message digest for buffer"
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:898
#: include/crypto/hash.h:938 include/crypto/hash.h:952
#: include/crypto/hash.h:966 include/crypto/hash.h:980
#: include/crypto/hash.h:998 include/crypto/hash.h:1016
msgid "``struct shash_desc *desc``"
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:893
#: include/crypto/hash.h:896 include/crypto/hash.h:975
#: include/crypto/hash.h:978
msgid "see crypto_shash_final()"
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:895
#: include/crypto/hash.h:977 include/crypto/hash.h:995
msgid "``const u8 *data``"
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:894
#: include/crypto/hash.h:895 include/crypto/hash.h:976
#: include/crypto/hash.h:977
msgid "see crypto_shash_update()"
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:896
#: include/crypto/hash.h:978 include/crypto/hash.h:996
msgid "``unsigned int len``"
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:897
#: include/crypto/hash.h:979 include/crypto/hash.h:1013
msgid "``u8 *out``"
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:897
msgid ""
"This function is a \"short-hand\" for the function calls of "
"crypto_shash_init, crypto_shash_update and crypto_shash_final. The "
"parameters have the same meaning as discussed for those separate three "
"functions."
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:903
#: include/crypto/hash.h:985 include/crypto/hash.h:1020
msgid ""
"0 if the message digest creation was successful; < 0 if an error occurred"
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:932
msgid "extract operational state for message digest"
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:933
msgid "reference to the operational state handle whose state is exported"
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:935
msgid ""
"This function exports the hash state of the operational state handle into "
"the caller-allocated output buffer out which must have sufficient size (e.g. "
"by calling crypto_shash_descsize)."
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:941
msgid "0 if the export creation was successful; < 0 if an error occurred"
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:946
msgid "import operational state"
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:947
msgid "reference to the operational state handle the state imported into"
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:949
msgid ""
"This function imports the hash state into the operational state handle from "
"the input buffer. That buffer should have been generated with the "
"crypto_ahash_export function."
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:960
msgid "(re)initialize message digest"
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:961
msgid "operational state handle that is already filled"
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:962
msgid ""
"The call (re-)initializes the message digest referenced by the operational "
"state handle. Any potentially existing state created by previous operations "
"is discarded."
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:968
msgid ""
"0 if the message digest initialization was successful; < 0 if an error "
"occurred"
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:974
msgid "calculate message digest of buffer"
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:979
msgid ""
"This function is a \"short-hand\" for the function calls of "
"crypto_shash_update and crypto_shash_final. The parameters have the same "
"meaning as discussed for those separate functions."
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:992
msgid "add data to message digest for processing"
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:993
msgid "operational state handle that is already initialized"
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:994
msgid "input data to be added to the message digest"
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:995
msgid "length of the input data"
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:996
msgid "Updates the message digest state of the operational state handle."
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:1000
msgid "0 if the message digest update was successful; < 0 if an error occurred"
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:1011
msgid "operational state handle that is already filled with data"
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:1012
msgid "output buffer filled with the message digest"
msgstr ""

#: ../../../crypto/api-digest:37: include/crypto/hash.h:1013
msgid ""
"Finalize the message digest operation and create the message digest based on "
"all data added to the cipher handle. The message digest is placed into the "
"output buffer. The caller must ensure that the output buffer is large enough "
"by using crypto_shash_digestsize."
msgstr ""
