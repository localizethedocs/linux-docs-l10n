# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../bpf/bpf_prog_run.rst:5
msgid "Running BPF programs from userspace"
msgstr ""

#: ../../../bpf/bpf_prog_run.rst:7
msgid ""
"This document describes the ``BPF_PROG_RUN`` facility for running BPF "
"programs from userspace."
msgstr ""

#: ../../../bpf/bpf_prog_run.rst:16
msgid "Overview"
msgstr ""

#: ../../../bpf/bpf_prog_run.rst:18
msgid ""
"The ``BPF_PROG_RUN`` command can be used through the ``bpf()`` syscall to "
"execute a BPF program in the kernel and return the results to userspace. "
"This can be used to unit test BPF programs against user-supplied context "
"objects, and as way to explicitly execute programs in the kernel for their "
"side effects. The command was previously named ``BPF_PROG_TEST_RUN``, and "
"both constants continue to be defined in the UAPI header, aliased to the "
"same value."
msgstr ""

#: ../../../bpf/bpf_prog_run.rst:25
msgid ""
"The ``BPF_PROG_RUN`` command can be used to execute BPF programs of the "
"following types:"
msgstr ""

#: ../../../bpf/bpf_prog_run.rst:28
msgid "``BPF_PROG_TYPE_SOCKET_FILTER``"
msgstr ""

#: ../../../bpf/bpf_prog_run.rst:29
msgid "``BPF_PROG_TYPE_SCHED_CLS``"
msgstr ""

#: ../../../bpf/bpf_prog_run.rst:30
msgid "``BPF_PROG_TYPE_SCHED_ACT``"
msgstr ""

#: ../../../bpf/bpf_prog_run.rst:31
msgid "``BPF_PROG_TYPE_XDP``"
msgstr ""

#: ../../../bpf/bpf_prog_run.rst:32
msgid "``BPF_PROG_TYPE_SK_LOOKUP``"
msgstr ""

#: ../../../bpf/bpf_prog_run.rst:33
msgid "``BPF_PROG_TYPE_CGROUP_SKB``"
msgstr ""

#: ../../../bpf/bpf_prog_run.rst:34
msgid "``BPF_PROG_TYPE_LWT_IN``"
msgstr ""

#: ../../../bpf/bpf_prog_run.rst:35
msgid "``BPF_PROG_TYPE_LWT_OUT``"
msgstr ""

#: ../../../bpf/bpf_prog_run.rst:36
msgid "``BPF_PROG_TYPE_LWT_XMIT``"
msgstr ""

#: ../../../bpf/bpf_prog_run.rst:37
msgid "``BPF_PROG_TYPE_LWT_SEG6LOCAL``"
msgstr ""

#: ../../../bpf/bpf_prog_run.rst:38
msgid "``BPF_PROG_TYPE_FLOW_DISSECTOR``"
msgstr ""

#: ../../../bpf/bpf_prog_run.rst:39
msgid "``BPF_PROG_TYPE_STRUCT_OPS``"
msgstr ""

#: ../../../bpf/bpf_prog_run.rst:40
msgid "``BPF_PROG_TYPE_RAW_TRACEPOINT``"
msgstr ""

#: ../../../bpf/bpf_prog_run.rst:41
msgid "``BPF_PROG_TYPE_SYSCALL``"
msgstr ""

#: ../../../bpf/bpf_prog_run.rst:43
msgid ""
"When using the ``BPF_PROG_RUN`` command, userspace supplies an input context "
"object and (for program types operating on network packets) a buffer "
"containing the packet data that the BPF program will operate on. The kernel "
"will then execute the program and return the results to userspace. Note that "
"programs will not have any side effects while being run in this mode; in "
"particular, packets will not actually be redirected or dropped, the program "
"return code will just be returned to userspace. A separate mode for live "
"execution of XDP programs is provided, documented separately below."
msgstr ""

#: ../../../bpf/bpf_prog_run.rst:53
msgid "Running XDP programs in \"live frame mode\""
msgstr ""

#: ../../../bpf/bpf_prog_run.rst:55
msgid ""
"The ``BPF_PROG_RUN`` command has a separate mode for running live XDP "
"programs, which can be used to execute XDP programs in a way where packets "
"will actually be processed by the kernel after the execution of the XDP "
"program as if they arrived on a physical interface. This mode is activated "
"by setting the ``BPF_F_TEST_XDP_LIVE_FRAMES`` flag when supplying an XDP "
"program to ``BPF_PROG_RUN``."
msgstr ""

#: ../../../bpf/bpf_prog_run.rst:62
msgid ""
"The live packet mode is optimised for high performance execution of the "
"supplied XDP program many times (suitable for, e.g., running as a traffic "
"generator), which means the semantics are not quite as straight-forward as "
"the regular test run mode. Specifically:"
msgstr ""

#: ../../../bpf/bpf_prog_run.rst:67
msgid ""
"When executing an XDP program in live frame mode, the result of the "
"execution will not be returned to userspace; instead, the kernel will "
"perform the operation indicated by the program's return code (drop the "
"packet, redirect it, etc). For this reason, setting the ``data_out`` or "
"``ctx_out`` attributes in the syscall parameters when running in this mode "
"will be rejected. In addition, not all failures will be reported back to "
"userspace directly; specifically, only fatal errors in setup or during "
"execution (like memory allocation errors) will halt execution and return an "
"error. If an error occurs in packet processing, like a failure to redirect "
"to a given interface, execution will continue with the next repetition; "
"these errors can be detected via the same trace points as for regular XDP "
"programs."
msgstr ""

#: ../../../bpf/bpf_prog_run.rst:79
msgid ""
"Userspace can supply an ifindex as part of the context object, just like in "
"the regular (non-live) mode. The XDP program will be executed as though the "
"packet arrived on this interface; i.e., the ``ingress_ifindex`` of the "
"context object will point to that interface. Furthermore, if the XDP program "
"returns ``XDP_PASS``, the packet will be injected into the kernel networking "
"stack as though it arrived on that ifindex, and if it returns ``XDP_TX``, "
"the packet will be transmitted *out* of that same interface. Do note, "
"though, that because the program execution is not happening in driver "
"context, an ``XDP_TX`` is actually turned into the same action as an "
"``XDP_REDIRECT`` to that same interface (i.e., it will only work if the "
"driver has support for the ``ndo_xdp_xmit`` driver op)."
msgstr ""

#: ../../../bpf/bpf_prog_run.rst:91
msgid ""
"When running the program with multiple repetitions, the execution will "
"happen in batches. The batch size defaults to 64 packets (which is same as "
"the maximum NAPI receive batch size), but can be specified by userspace "
"through the ``batch_size`` parameter, up to a maximum of 256 packets. For "
"each batch, the kernel executes the XDP program repeatedly, each invocation "
"getting a separate copy of the packet data. For each repetition, if the "
"program drops the packet, the data page is immediately recycled (see below). "
"Otherwise, the packet is buffered until the end of the batch, at which point "
"all packets buffered this way during the batch are transmitted at once."
msgstr ""

#: ../../../bpf/bpf_prog_run.rst:101
msgid ""
"When setting up the test run, the kernel will initialise a pool of memory "
"pages of the same size as the batch size. Each memory page will be "
"initialised with the initial packet data supplied by userspace at "
"``BPF_PROG_RUN`` invocation. When possible, the pages will be recycled on "
"future program invocations, to improve performance. Pages will generally be "
"recycled a full batch at a time, except when a packet is dropped (by return "
"code or because of, say, a redirection error), in which case that page will "
"be recycled immediately. If a packet ends up being passed to the regular "
"networking stack (because the XDP program returns ``XDP_PASS``, or because "
"it ends up being redirected to an interface that injects it into the stack), "
"the page will be released and a new one will be allocated when the pool is "
"empty."
msgstr ""

#: ../../../bpf/bpf_prog_run.rst:113
msgid ""
"When recycling, the page content is not rewritten; only the packet boundary "
"pointers (``data``, ``data_end`` and ``data_meta``) in the context object "
"will be reset to the original values. This means that if a program rewrites "
"the packet contents, it has to be prepared to see either the original "
"content or the modified version on subsequent invocations."
msgstr ""
