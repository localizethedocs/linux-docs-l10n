# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../bpf/map_devmap.rst:6
msgid "BPF_MAP_TYPE_DEVMAP and BPF_MAP_TYPE_DEVMAP_HASH"
msgstr ""

#: ../../../bpf/map_devmap.rst:9
msgid "``BPF_MAP_TYPE_DEVMAP`` was introduced in kernel version 4.14"
msgstr ""

#: ../../../bpf/map_devmap.rst:10
msgid "``BPF_MAP_TYPE_DEVMAP_HASH`` was introduced in kernel version 5.4"
msgstr ""

#: ../../../bpf/map_devmap.rst:12
msgid ""
"``BPF_MAP_TYPE_DEVMAP`` and ``BPF_MAP_TYPE_DEVMAP_HASH`` are BPF maps "
"primarily used as backend maps for the XDP BPF helper call "
"``bpf_redirect_map()``. ``BPF_MAP_TYPE_DEVMAP`` is backed by an array that "
"uses the key as the index to lookup a reference to a net device. While "
"``BPF_MAP_TYPE_DEVMAP_HASH`` is backed by a hash table that uses a key to "
"lookup a reference to a net device. The user provides either <``key``/ "
"``ifindex``> or <``key``/ ``struct bpf_devmap_val``> pairs to update the "
"maps with new net devices."
msgstr ""

#: ../../../bpf/map_devmap.rst:21
msgid "The key to a hash map doesn't have to be an ``ifindex``."
msgstr ""

#: ../../../bpf/map_devmap.rst:22
msgid ""
"While ``BPF_MAP_TYPE_DEVMAP_HASH`` allows for densely packing the net "
"devices it comes at the cost of a hash of the key when performing a look up."
msgstr ""

#: ../../../bpf/map_devmap.rst:25
msgid ""
"The setup and packet enqueue/send code is shared between the two types of "
"devmap; only the lookup and insertion is different."
msgstr ""

#: ../../../bpf/map_devmap.rst:29
msgid "Usage"
msgstr ""

#: ../../../bpf/map_devmap.rst:31 ../../../bpf/map_devmap.rst:140
msgid "Kernel BPF"
msgstr ""

#: ../../../bpf/map_devmap.rst:33
msgid "bpf_redirect_map()"
msgstr ""

#: ../../../bpf/map_devmap.rst:38
msgid ""
"Redirect the packet to the endpoint referenced by ``map`` at index ``key``. "
"For ``BPF_MAP_TYPE_DEVMAP`` and ``BPF_MAP_TYPE_DEVMAP_HASH`` this map "
"contains references to net devices (for forwarding packets through other "
"ports)."
msgstr ""

#: ../../../bpf/map_devmap.rst:42
msgid ""
"The lower two bits of *flags* are used as the return code if the map lookup "
"fails. This is so that the return value can be one of the XDP program return "
"codes up to ``XDP_TX``, as chosen by the caller. The higher bits of "
"``flags`` can be set to ``BPF_F_BROADCAST`` or ``BPF_F_EXCLUDE_INGRESS`` as "
"defined below."
msgstr ""

#: ../../../bpf/map_devmap.rst:48
msgid ""
"With ``BPF_F_BROADCAST`` the packet will be broadcast to all the interfaces "
"in the map, with ``BPF_F_EXCLUDE_INGRESS`` the ingress interface will be "
"excluded from the broadcast."
msgstr ""

#: ../../../bpf/map_devmap.rst:53
msgid "The key is ignored if BPF_F_BROADCAST is set."
msgstr ""

#: ../../../bpf/map_devmap.rst:54
msgid ""
"The broadcast feature can also be used to implement multicast forwarding: "
"simply create multiple DEVMAPs, each one corresponding to a single multicast "
"group."
msgstr ""

#: ../../../bpf/map_devmap.rst:57
msgid ""
"This helper will return ``XDP_REDIRECT`` on success, or the value of the two "
"lower bits of the ``flags`` argument if the map lookup fails."
msgstr ""

#: ../../../bpf/map_devmap.rst:60
msgid "More information about redirection can be found :doc:`redirect`"
msgstr ""

#: ../../../bpf/map_devmap.rst:63 ../../../bpf/map_devmap.rst:116
msgid "bpf_map_lookup_elem()"
msgstr ""

#: ../../../bpf/map_devmap.rst:68 ../../../bpf/map_devmap.rst:122
msgid ""
"Net device entries can be retrieved using the ``bpf_map_lookup_elem()`` "
"helper."
msgstr ""

#: ../../../bpf/map_devmap.rst:72 ../../../bpf/map_devmap.rst:197
msgid "User space"
msgstr ""

#: ../../../bpf/map_devmap.rst:74
msgid ""
"DEVMAP entries can only be updated/deleted from user space and not from an "
"eBPF program. Trying to call these functions from a kernel eBPF program will "
"result in the program failing to load and a verifier warning."
msgstr ""

#: ../../../bpf/map_devmap.rst:79
msgid "bpf_map_update_elem()"
msgstr ""

#: ../../../bpf/map_devmap.rst:84
msgid ""
"Net device entries can be added or updated using the "
"``bpf_map_update_elem()`` helper. This helper replaces existing elements "
"atomically. The ``value`` parameter can be ``struct bpf_devmap_val`` or a "
"simple ``int ifindex`` for backwards compatibility."
msgstr ""

#: ../../../bpf/map_devmap.rst:99
msgid "The ``flags`` argument can be one of the following:"
msgstr ""

#: ../../../bpf/map_devmap.rst:100
msgid "``BPF_ANY``: Create a new element or update an existing element."
msgstr ""

#: ../../../bpf/map_devmap.rst:101
msgid "``BPF_NOEXIST``: Create a new element only if it did not exist."
msgstr ""

#: ../../../bpf/map_devmap.rst:102
msgid "``BPF_EXIST``: Update an existing element."
msgstr ""

#: ../../../bpf/map_devmap.rst:104
msgid ""
"DEVMAPs can associate a program with a device entry by adding a ``bpf_prog."
"fd`` to ``struct bpf_devmap_val``. Programs are run after ``XDP_REDIRECT`` "
"and have access to both Rx device and Tx device. The  program associated "
"with the ``fd`` must have type XDP with expected attach type ``xdp_devmap``. "
"When a program is associated with a device index, the program is run on an "
"``XDP_REDIRECT`` and before the buffer is added to the per-cpu queue. "
"Examples of how to attach/use xdp_devmap progs can be found in the kernel "
"selftests:"
msgstr ""

#: ../../../bpf/map_devmap.rst:112
msgid "``tools/testing/selftests/bpf/prog_tests/xdp_devmap_attach.c``"
msgstr ""

#: ../../../bpf/map_devmap.rst:113
msgid "``tools/testing/selftests/bpf/progs/test_xdp_with_devmap_helpers.c``"
msgstr ""

#: ../../../bpf/map_devmap.rst:126
msgid "bpf_map_delete_elem()"
msgstr ""

#: ../../../bpf/map_devmap.rst:132
msgid ""
"Net device entries can be deleted using the ``bpf_map_delete_elem()`` "
"helper. This helper will return 0 on success, or negative error in case of "
"failure."
msgstr ""

#: ../../../bpf/map_devmap.rst:137
msgid "Examples"
msgstr ""

#: ../../../bpf/map_devmap.rst:142
msgid ""
"The following code snippet shows how to declare a ``BPF_MAP_TYPE_DEVMAP`` "
"called tx_port."
msgstr ""

#: ../../../bpf/map_devmap.rst:154
msgid ""
"The following code snippet shows how to declare a "
"``BPF_MAP_TYPE_DEVMAP_HASH`` called forward_map."
msgstr ""

#: ../../../bpf/map_devmap.rst:168
msgid "The value type in the DEVMAP above is a ``struct bpf_devmap_val``"
msgstr ""

#: ../../../bpf/map_devmap.rst:170
msgid ""
"The following code snippet shows a simple xdp_redirect_map program. This "
"program would work with a user space program that populates the devmap "
"``forward_map`` based on ingress ifindexes. The BPF program (below) is "
"redirecting packets using the ingress ``ifindex`` as the ``key``."
msgstr ""

#: ../../../bpf/map_devmap.rst:185
msgid ""
"The following code snippet shows a BPF program that is broadcasting packets "
"to all the interfaces in the ``tx_port`` devmap."
msgstr ""

#: ../../../bpf/map_devmap.rst:199
msgid ""
"The following code snippet shows how to update a devmap called ``tx_port``."
msgstr ""

#: ../../../bpf/map_devmap.rst:216
msgid ""
"The following code snippet shows how to update a hash_devmap called "
"``forward_map``."
msgstr ""

#: ../../../bpf/map_devmap.rst:234
msgid "References"
msgstr ""

#: ../../../bpf/map_devmap.rst:236
msgid "https://lwn.net/Articles/728146/"
msgstr ""

#: ../../../bpf/map_devmap.rst:237
msgid ""
"https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next.git/commit/?"
"id=6f9d451ab1a33728adb72d7ff66a7b374d665176"
msgstr ""

#: ../../../bpf/map_devmap.rst:238
msgid "https://elixir.bootlin.com/linux/latest/source/net/core/filter.c#L4106"
msgstr ""
