# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../bpf/bpf_licensing.rst:3
msgid "BPF licensing"
msgstr ""

#: ../../../bpf/bpf_licensing.rst:6
msgid "Background"
msgstr ""

#: ../../../bpf/bpf_licensing.rst:8
msgid "Classic BPF was BSD licensed"
msgstr ""

#: ../../../bpf/bpf_licensing.rst:10
msgid ""
"\"BPF\" was originally introduced as BSD Packet Filter in http://www.tcpdump."
"org/papers/bpf-usenix93.pdf. The corresponding instruction set and its "
"implementation came from BSD with BSD license. That original instruction set "
"is now known as \"classic BPF\"."
msgstr ""

#: ../../../bpf/bpf_licensing.rst:15
msgid ""
"However an instruction set is a specification for machine-language "
"interaction, similar to a programming language.  It is not a code. "
"Therefore, the application of a BSD license may be misleading in a certain "
"context, as the instruction set may enjoy no copyright protection."
msgstr ""

#: ../../../bpf/bpf_licensing.rst:20
msgid "eBPF (extended BPF) instruction set continues to be BSD"
msgstr ""

#: ../../../bpf/bpf_licensing.rst:22
msgid ""
"In 2014, the classic BPF instruction set was significantly extended. We "
"typically refer to this instruction set as eBPF to disambiguate it from "
"cBPF. The eBPF instruction set is still BSD licensed."
msgstr ""

#: ../../../bpf/bpf_licensing.rst:27
msgid "Implementations of eBPF"
msgstr ""

#: ../../../bpf/bpf_licensing.rst:29
msgid ""
"Using the eBPF instruction set requires implementing code in both kernel "
"space and user space."
msgstr ""

#: ../../../bpf/bpf_licensing.rst:33
msgid "In Linux Kernel"
msgstr ""

#: ../../../bpf/bpf_licensing.rst:35
msgid ""
"The reference implementations of the eBPF interpreter and various just-in-"
"time compilers are part of Linux and are GPLv2 licensed. The implementation "
"of eBPF helper functions is also GPLv2 licensed. Interpreters, JITs, "
"helpers, and verifiers are called eBPF runtime."
msgstr ""

#: ../../../bpf/bpf_licensing.rst:41
msgid "In User Space"
msgstr ""

#: ../../../bpf/bpf_licensing.rst:43
msgid ""
"There are also implementations of eBPF runtime (interpreter, JITs, helper "
"functions) under Apache2 (https://github.com/iovisor/ubpf), MIT (https://"
"github.com/qmonnet/rbpf), and BSD (https://github.com/DPDK/dpdk/blob/main/"
"lib/librte_bpf)."
msgstr ""

#: ../../../bpf/bpf_licensing.rst:50
msgid "In HW"
msgstr ""

#: ../../../bpf/bpf_licensing.rst:52
msgid ""
"The HW can choose to execute eBPF instruction natively and provide eBPF "
"runtime in HW or via the use of implementing firmware with a proprietary "
"license."
msgstr ""

#: ../../../bpf/bpf_licensing.rst:56
msgid "In other operating systems"
msgstr ""

#: ../../../bpf/bpf_licensing.rst:58
msgid ""
"Other kernels or user space implementations of eBPF instruction set and "
"runtime can have proprietary licenses."
msgstr ""

#: ../../../bpf/bpf_licensing.rst:62
msgid "Using BPF programs in the Linux kernel"
msgstr ""

#: ../../../bpf/bpf_licensing.rst:64
msgid ""
"Linux Kernel (while being GPLv2) allows linking of proprietary kernel "
"modules under these rules: Documentation/process/license-rules.rst"
msgstr ""

#: ../../../bpf/bpf_licensing.rst:68
msgid ""
"When a kernel module is loaded, the linux kernel checks which functions it "
"intends to use. If any function is marked as \"GPL only,\" the corresponding "
"module or program has to have GPL compatible license."
msgstr ""

#: ../../../bpf/bpf_licensing.rst:72
msgid ""
"Loading BPF program into the Linux kernel is similar to loading a kernel "
"module. BPF is loaded at run time and not statically linked to the Linux "
"kernel. BPF program loading follows the same license checking rules as "
"kernel modules. BPF programs can be proprietary if they don't use \"GPL "
"only\" BPF helper functions."
msgstr ""

#: ../../../bpf/bpf_licensing.rst:78
msgid ""
"Further, some BPF program types - Linux Security Modules (LSM) and TCP "
"Congestion Control (struct_ops), as of Aug 2021 - are required to be GPL "
"compatible even if they don't use \"GPL only\" helper functions directly. "
"The registration step of LSM and TCP congestion control modules of the Linux "
"kernel is done through EXPORT_SYMBOL_GPL kernel functions. In that sense LSM "
"and struct_ops BPF programs are implicitly calling \"GPL only\" functions. "
"The same restriction applies to BPF programs that call kernel functions "
"directly via unstable interface also known as \"kfunc\"."
msgstr ""

#: ../../../bpf/bpf_licensing.rst:88
msgid "Packaging BPF programs with user space applications"
msgstr ""

#: ../../../bpf/bpf_licensing.rst:90
msgid ""
"Generally, proprietary-licensed applications and GPL licensed BPF programs "
"written for the Linux kernel in the same package can co-exist because they "
"are separate executable processes. This applies to both cBPF and eBPF "
"programs."
msgstr ""
