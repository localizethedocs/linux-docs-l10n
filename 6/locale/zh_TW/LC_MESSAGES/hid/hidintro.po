# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../hid/hidintro.rst:5
msgid "Introduction to HID report descriptors"
msgstr ""

#: ../../../hid/hidintro.rst:7
msgid ""
"This chapter is meant to give a broad overview of what HID report "
"descriptors are, and of how a casual (non-kernel) programmer can deal with "
"HID devices that are not working well with Linux."
msgstr ""

#: ../../../hid/hidintro.rst:22
msgid "Introduction"
msgstr ""

#: ../../../hid/hidintro.rst:24
msgid ""
"HID stands for Human Interface Device, and can be whatever device you are "
"using to interact with a computer, be it a mouse, a touchpad, a tablet, a "
"microphone."
msgstr ""

#: ../../../hid/hidintro.rst:28
msgid ""
"Many HID devices work out the box, even if their hardware is different. For "
"example, mice can have any number of buttons; they may have a wheel; "
"movement sensitivity differs between different models, and so on. "
"Nonetheless, most of the time everything just works, without the need to "
"have specialized code in the kernel for every mouse model developed since "
"1970."
msgstr ""

#: ../../../hid/hidintro.rst:35
msgid ""
"This is because modern HID devices do advertise their capabilities through "
"the *HID report descriptor*, a fixed set of bytes describing exactly what "
"*HID reports* may be sent between the device and the host and the meaning of "
"each individual bit in those reports. For example, a HID Report Descriptor "
"may specify that \"in a report with ID 3 the bits from 8 to 15 is the delta "
"x coordinate of a mouse\"."
msgstr ""

#: ../../../hid/hidintro.rst:42
msgid ""
"The HID report itself then merely carries the actual data values without any "
"extra meta information. Note that HID reports may be sent from the device "
"(\"Input Reports\", i.e. input events), to the device (\"Output Reports\" to "
"e.g. change LEDs) or used for device configuration (\"Feature reports\"). A "
"device may support one or more HID reports."
msgstr ""

#: ../../../hid/hidintro.rst:48
msgid ""
"The HID subsystem is in charge of parsing the HID report descriptors, and "
"converts HID events into normal input device interfaces (see Documentation/"
"hid/hid-transport.rst). Devices may misbehave because the HID report "
"descriptor provided by the device is wrong, or because it needs to be dealt "
"with in a special way, or because some special device or interaction mode is "
"not handled by the default code."
msgstr ""

#: ../../../hid/hidintro.rst:55
msgid ""
"The format of HID report descriptors is described by two documents, "
"available from the `USB Implementers Forum <https://www.usb.org/>`_ `HID web "
"page <https://www.usb.org/hid>`_ address:"
msgstr ""

#: ../../../hid/hidintro.rst:59
msgid ""
"the `HID USB Device Class Definition <https://www.usb.org/document-library/"
"device-class-definition-hid-111>`_ (HID Spec from now on)"
msgstr ""

#: ../../../hid/hidintro.rst:61
msgid ""
"the `HID Usage Tables <https://usb.org/document-library/hid-usage-"
"tables-14>`_ (HUT from now on)"
msgstr ""

#: ../../../hid/hidintro.rst:63
msgid ""
"The HID subsystem can deal with different transport drivers (USB, I2C, "
"Bluetooth, etc.). See Documentation/hid/hid-transport.rst."
msgstr ""

#: ../../../hid/hidintro.rst:67
msgid "Parsing HID report descriptors"
msgstr ""

#: ../../../hid/hidintro.rst:69
msgid ""
"The current list of HID devices can be found at ``/sys/bus/hid/devices/``. "
"For each device, say ``/sys/bus/hid/devices/0003\\:093A\\:2510.0002/``, one "
"can read the corresponding report descriptor::"
msgstr ""

#: ../../../hid/hidintro.rst:80
msgid ""
"Optional: the HID report descriptor can be read also by directly accessing "
"the hidraw driver [#hidraw]_."
msgstr ""

#: ../../../hid/hidintro.rst:83
msgid ""
"The basic structure of HID report descriptors is defined in the HID spec, "
"while HUT \"defines constants that can be interpreted by an application to "
"identify the purpose and meaning of a data field in a HID report\". Each "
"entry is defined by at least two bytes, where the first one defines what "
"type of value is following and is described in the HID spec, while the "
"second one carries the actual value and is described in the HUT."
msgstr ""

#: ../../../hid/hidintro.rst:91
msgid ""
"HID report descriptors can, in principle, be painstakingly parsed by hand, "
"byte by byte."
msgstr ""

#: ../../../hid/hidintro.rst:94
msgid ""
"A short introduction on how to do this is sketched in Documentation/hid/"
"hidreport-parsing.rst; you only need to understand it if you need to patch "
"HID report descriptors."
msgstr ""

#: ../../../hid/hidintro.rst:98
msgid ""
"In practice you should not parse HID report descriptors by hand; rather, you "
"should use an existing parser. Among all the available ones"
msgstr ""

#: ../../../hid/hidintro.rst:101
msgid ""
"the online `USB Descriptor and Request Parser <http://eleccelerator.com/"
"usbdescreqparser/>`_;"
msgstr ""

#: ../../../hid/hidintro.rst:103
msgid ""
"`hidrdd <https://github.com/abend0c1/hidrdd>`_, that provides very detailed "
"and somewhat verbose descriptions (verbosity can be useful if you are not "
"familiar with HID report descriptors);"
msgstr ""

#: ../../../hid/hidintro.rst:107
msgid ""
"`hid-tools <https://gitlab.freedesktop.org/libevdev/hid-tools>`_, a complete "
"utility set that allows, among other things, to record and replay the raw "
"HID reports and to debug and replay HID devices. It is being actively "
"developed by the Linux HID subsystem maintainers."
msgstr ""

#: ../../../hid/hidintro.rst:113
msgid ""
"Parsing the mouse HID report descriptor with `hid-tools <https://gitlab."
"freedesktop.org/libevdev/hid-tools>`_ leads to (explanations interposed)::"
msgstr ""

#: ../../../hid/hidintro.rst:126
msgid "what follows is a button ::"
msgstr ""

#: ../../../hid/hidintro.rst:131
msgid "first button is button number 1, last button is button number 3 ::"
msgstr ""

#: ../../../hid/hidintro.rst:136
msgid ""
"each button can send values from 0 up to including 1 (i.e. they are binary "
"buttons) ::"
msgstr ""

#: ../../../hid/hidintro.rst:141
msgid "each button is sent as exactly one bit ::"
msgstr ""

#: ../../../hid/hidintro.rst:145
msgid "and there are three of those bits (matching the three buttons) ::"
msgstr ""

#: ../../../hid/hidintro.rst:149
msgid ""
"it's actual Data (not constant padding), they represent a single variable "
"(Var) and their values are Absolute (not relative); See HID spec Sec. "
"6.2.2.5 \"Input, Output, and Feature Items\" ::"
msgstr ""

#: ../../../hid/hidintro.rst:155
msgid "five additional padding bits, needed to reach a byte ::"
msgstr ""

#: ../../../hid/hidintro.rst:159
msgid "those five bits are repeated only once ::"
msgstr ""

#: ../../../hid/hidintro.rst:163
msgid "and take Constant (Cnst) values i.e. they can be ignored. ::"
msgstr ""

#: ../../../hid/hidintro.rst:170
msgid ""
"The mouse has also two physical positions (Usage (X), Usage (Y)) and a wheel "
"(Usage (Wheel)) ::"
msgstr ""

#: ../../../hid/hidintro.rst:176
msgid "each of them can send values ranging from -127 up to including 127 ::"
msgstr ""

#: ../../../hid/hidintro.rst:180
msgid "which is represented by eight bits ::"
msgstr ""

#: ../../../hid/hidintro.rst:184
msgid "and there are three of those eight bits, matching X, Y and Wheel. ::"
msgstr ""

#: ../../../hid/hidintro.rst:188
msgid ""
"This time the data values are Relative (Rel), i.e. they represent the change "
"from the previously sent report (event) ::"
msgstr ""

#: ../../../hid/hidintro.rst:199
msgid ""
"This Report Descriptor tells us that the mouse input will be transmitted "
"using four bytes: the first one for the buttons (three bits used, five for "
"padding), the last three for the mouse X, Y and wheel changes, respectively."
msgstr ""

#: ../../../hid/hidintro.rst:204
msgid ""
"Indeed, for any event, the mouse will send a *report* of four bytes. We can "
"check the values sent by resorting e.g. to the `hid-recorder` tool, from "
"`hid-tools <https://gitlab.freedesktop.org/libevdev/hid-tools>`_: The "
"sequence of bytes sent by clicking and releasing button 1, then button 2, "
"then button 3 is::"
msgstr ""

#: ../../../hid/hidintro.rst:228
msgid ""
"This example shows that when button 2 is clicked, the bytes ``02 00 00 00`` "
"are sent, and the immediately subsequent event (``00 00 00 00``) is the "
"release of button 2 (no buttons are pressed, remember that the data values "
"are *absolute*)."
msgstr ""

#: ../../../hid/hidintro.rst:233
msgid ""
"If instead one clicks and holds button 1, then clicks and holds button 2, "
"releases button 1, and finally releases button 2, the reports are::"
msgstr ""

#: ../../../hid/hidintro.rst:245
msgid ""
"where with ``03 00 00 00`` both buttons are pressed, and with the subsequent "
"``02 00 00 00`` button 1 is released while button 2 is still active."
msgstr ""

#: ../../../hid/hidintro.rst:250
msgid "Output, Input and Feature Reports"
msgstr ""

#: ../../../hid/hidintro.rst:252
msgid ""
"HID devices can have Input Reports, like in the mouse example, Output "
"Reports, and Feature Reports. \"Output\" means that the information is sent "
"to the device. For example, a joystick with force feedback will have some "
"output; the led of a keyboard would need an output as well. \"Input\" means "
"that data come from the device."
msgstr ""

#: ../../../hid/hidintro.rst:258
msgid ""
"\"Feature\"s are not meant to be consumed by the end user and define "
"configuration options for the device. They can be queried from the host; "
"when declared as *Volatile* they should be changed by the host."
msgstr ""

#: ../../../hid/hidintro.rst:264
msgid "Collections, Report IDs and Evdev events"
msgstr ""

#: ../../../hid/hidintro.rst:266
msgid ""
"A single device can logically group data into different independent sets, "
"called a *Collection*. Collections can be nested and there are different "
"types of collections (see the HID spec 6.2.2.6 \"Collection, End Collection "
"Items\" for details)."
msgstr ""

#: ../../../hid/hidintro.rst:271
msgid ""
"Different reports are identified by means of different *Report ID* fields, i."
"e. a number identifying the structure of the immediately following report. "
"Whenever a Report ID is needed it is transmitted as the first byte of any "
"report. A device with only one supported HID report (like the mouse example "
"above) may omit the report ID."
msgstr ""

#: ../../../hid/hidintro.rst:278
msgid "Consider the following HID report descriptor::"
msgstr ""

#: ../../../hid/hidintro.rst:298
msgid ""
"After parsing it (try to parse it on your own using the suggested tools!) "
"one can see that the device presents two ``Mouse`` Application Collections "
"(with reports identified by Reports IDs 1 and 2, respectively), a ``Keypad`` "
"Application Collection (whose report is identified by the Report ID 5) and "
"two ``Consumer Controls`` Application Collections, (with Report IDs 6 and 3, "
"respectively). Note, however, that a device can have different Report IDs "
"for the same Application Collection."
msgstr ""

#: ../../../hid/hidintro.rst:307
msgid ""
"The data sent will begin with the Report ID byte, and will be followed by "
"the corresponding information. For example, the data transmitted for the "
"last consumer control::"
msgstr ""

#: ../../../hid/hidintro.rst:323
msgid ""
"will be of three bytes: the first for the Report ID (3), the next two for "
"the headphone, with two (``Report Count (2)``) bytes (``Report Size (8)``), "
"each ranging from 0 (``Logical Minimum (0)``) to 255 (``Logical Maximum "
"(255)``)."
msgstr ""

#: ../../../hid/hidintro.rst:328
msgid ""
"All the Input data sent by the device should be translated into "
"corresponding Evdev events, so that the remaining part of the stack can know "
"what is going on, e.g. the bit for the first button translates into the "
"``EV_KEY/BTN_LEFT`` evdev event and relative X movement translates into the "
"``EV_REL/REL_X`` evdev event\"."
msgstr ""

#: ../../../hid/hidintro.rst:335
msgid "Events"
msgstr ""

#: ../../../hid/hidintro.rst:337
msgid ""
"In Linux, one ``/dev/input/event*`` is created for each ``Application "
"Collection``. Going back to the mouse example, and repeating the sequence "
"where one clicks and holds button 1, then clicks and holds button 2, "
"releases button 1, and finally releases button 2, one gets::"
msgstr ""

#: ../../../hid/hidintro.rst:411
msgid ""
"Note: if ``libinput record`` is not available on your system try using "
"``evemu-record``."
msgstr ""

#: ../../../hid/hidintro.rst:415
msgid "When something does not work"
msgstr ""

#: ../../../hid/hidintro.rst:417
msgid ""
"There can be a number of reasons why a device does not behave correctly. For "
"example"
msgstr ""

#: ../../../hid/hidintro.rst:420
msgid ""
"The HID report descriptor provided by the HID device may be wrong because e."
"g."
msgstr ""

#: ../../../hid/hidintro.rst:423
msgid ""
"it does not follow the standard, so that the kernel will not able to make "
"sense of the HID report descriptor;"
msgstr ""

#: ../../../hid/hidintro.rst:425
msgid ""
"the HID report descriptor *does not match* what is actually sent by the "
"device (this can be verified by reading the raw HID data);"
msgstr ""

#: ../../../hid/hidintro.rst:428
msgid "the HID report descriptor may need some \"quirks\" (see later on)."
msgstr ""

#: ../../../hid/hidintro.rst:430
msgid ""
"As a consequence, a ``/dev/input/event*`` may not be created for each "
"Application Collection, and/or the events there may not match what you would "
"expect."
msgstr ""

#: ../../../hid/hidintro.rst:436
msgid "Quirks"
msgstr ""

#: ../../../hid/hidintro.rst:438
msgid ""
"There are some known peculiarities of HID devices that the kernel knows how "
"to fix - these are called the HID quirks and a list of those is available in "
"`include/linux/hid.h`."
msgstr ""

#: ../../../hid/hidintro.rst:442
msgid ""
"Should this be the case, it should be enough to add the required quirk in "
"the kernel, for the HID device at hand. This can be done in the file "
"`drivers/hid/hid-quirks.c`. How to do it should be relatively "
"straightforward after looking into the file."
msgstr ""

#: ../../../hid/hidintro.rst:447
msgid "The list of currently defined quirks, from `include/linux/hid.h`, is"
msgstr ""

#: ../../../hid/hidintro:449: include/linux/hid.h:0
msgid "**HID_QUIRK_NOTOUCH**:"
msgstr ""

#: ../../../hid/hidintro:449: include/linux/hid.h:0
msgid "**HID_QUIRK_IGNORE**: ignore this device"
msgstr ""

#: ../../../hid/hidintro:449: include/linux/hid.h:0
msgid "**HID_QUIRK_NOGET**:"
msgstr ""

#: ../../../hid/hidintro:449: include/linux/hid.h:0
msgid "**HID_QUIRK_HIDDEV_FORCE**:"
msgstr ""

#: ../../../hid/hidintro:449: include/linux/hid.h:0
msgid "**HID_QUIRK_BADPAD**:"
msgstr ""

#: ../../../hid/hidintro:449: include/linux/hid.h:0
msgid "**HID_QUIRK_MULTI_INPUT**:"
msgstr ""

#: ../../../hid/hidintro:449: include/linux/hid.h:0
msgid "**HID_QUIRK_HIDINPUT_FORCE**:"
msgstr ""

#: ../../../hid/hidintro:449: include/linux/hid.h:0
msgid "**HID_QUIRK_ALWAYS_POLL**:"
msgstr ""

#: ../../../hid/hidintro:449: include/linux/hid.h:0
msgid "**HID_QUIRK_INPUT_PER_APP**:"
msgstr ""

#: ../../../hid/hidintro:449: include/linux/hid.h:0
msgid "**HID_QUIRK_X_INVERT**:"
msgstr ""

#: ../../../hid/hidintro:449: include/linux/hid.h:0
msgid "**HID_QUIRK_Y_INVERT**:"
msgstr ""

#: ../../../hid/hidintro:449: include/linux/hid.h:0
msgid "**HID_QUIRK_IGNORE_MOUSE**:"
msgstr ""

#: ../../../hid/hidintro:449: include/linux/hid.h:0
msgid "**HID_QUIRK_SKIP_OUTPUT_REPORTS**:"
msgstr ""

#: ../../../hid/hidintro:449: include/linux/hid.h:0
msgid "**HID_QUIRK_SKIP_OUTPUT_REPORT_ID**:"
msgstr ""

#: ../../../hid/hidintro:449: include/linux/hid.h:0
msgid "**HID_QUIRK_NO_OUTPUT_REPORTS_ON_INTR_EP**:"
msgstr ""

#: ../../../hid/hidintro:449: include/linux/hid.h:0
msgid "**HID_QUIRK_HAVE_SPECIAL_DRIVER**:"
msgstr ""

#: ../../../hid/hidintro:449: include/linux/hid.h:0
msgid "**HID_QUIRK_INCREMENT_USAGE_ON_DUPLICATE**:"
msgstr ""

#: ../../../hid/hidintro:449: include/linux/hid.h:0
msgid "**HID_QUIRK_IGNORE_SPECIAL_DRIVER**"
msgstr ""

#: ../../../hid/hidintro:449: include/linux/hid.h:0
msgid "**HID_QUIRK_FULLSPEED_INTERVAL**:"
msgstr ""

#: ../../../hid/hidintro:449: include/linux/hid.h:0
msgid "**HID_QUIRK_NO_INIT_REPORTS**:"
msgstr ""

#: ../../../hid/hidintro:449: include/linux/hid.h:0
msgid "**HID_QUIRK_NO_IGNORE**:"
msgstr ""

#: ../../../hid/hidintro:449: include/linux/hid.h:0
msgid "**HID_QUIRK_NO_INPUT_SYNC**:"
msgstr ""

#: ../../../hid/hidintro.rst:452
msgid ""
"Quirks for USB devices can be specified while loading the usbhid module, see "
"``modinfo usbhid``, although the proper fix should go into hid-quirks.c and "
"**be submitted upstream**. See Documentation/process/submitting-patches.rst "
"for guidelines on how to submit a patch. Quirks for other busses need to go "
"into hid-quirks.c."
msgstr ""

#: ../../../hid/hidintro.rst:459
msgid "Fixing HID report descriptors"
msgstr ""

#: ../../../hid/hidintro.rst:461
msgid ""
"Should you need to patch HID report descriptors the easiest way is to resort "
"to eBPF, as described in Documentation/hid/hid-bpf.rst."
msgstr ""

#: ../../../hid/hidintro.rst:464
msgid ""
"Basically, you can change any byte of the original HID report descriptor. "
"The examples in samples/hid should be a good starting point for your code, "
"see e.g. `samples/hid/hid_mouse.bpf.c`::"
msgstr ""

#: ../../../hid/hidintro.rst:477
msgid ""
"Of course this can be also done within the kernel source code, see e.g. "
"`drivers/hid/hid-aureal.c` or `drivers/hid/hid-samsung.c` for a slightly "
"more complex file."
msgstr ""

#: ../../../hid/hidintro.rst:481
msgid ""
"Check Documentation/hid/hidreport-parsing.rst if you need any help "
"navigating the HID manuals and understanding the exact meaning of the HID "
"report descriptor hex numbers."
msgstr ""

#: ../../../hid/hidintro.rst:485
msgid ""
"Whatever solution you come up with, please remember to **submit the fix to "
"the HID maintainers**, so that it can be directly integrated in the kernel "
"and that particular HID device will start working for everyone else. See "
"Documentation/process/submitting-patches.rst for guidelines on how to do "
"this."
msgstr ""

#: ../../../hid/hidintro.rst:493
msgid "Modifying the transmitted data on the fly"
msgstr ""

#: ../../../hid/hidintro.rst:495
msgid ""
"Using eBPF it is also possible to modify the data exchanged with the device. "
"See again the examples in `samples/hid`."
msgstr ""

#: ../../../hid/hidintro.rst:498
msgid ""
"Again, **please post your fix**, so that it can be integrated in the kernel!"
msgstr ""

#: ../../../hid/hidintro.rst:502
msgid "Writing a specialized driver"
msgstr ""

#: ../../../hid/hidintro.rst:504
msgid "This should really be your last resort."
msgstr ""

#: ../../../hid/hidintro.rst:508
msgid "Footnotes"
msgstr ""

#: ../../../hid/hidintro.rst:509
msgid ""
"read hidraw: see Documentation/hid/hidraw.rst and file `samples/hidraw/hid-"
"example.c` for an example. The output of ``hid-example`` would be, for the "
"same mouse::"
msgstr ""
