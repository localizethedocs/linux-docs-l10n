# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../core-api/irq/irqflags-tracing.rst:3
msgid "IRQ-flags state tracing"
msgstr ""

#: ../../../core-api/irq/irqflags-tracing.rst:0
msgid "Author"
msgstr ""

#: ../../../core-api/irq/irqflags-tracing.rst:5
msgid "started by Ingo Molnar <mingo@redhat.com>"
msgstr ""

#: ../../../core-api/irq/irqflags-tracing.rst:7
msgid ""
"The \"irq-flags tracing\" feature \"traces\" hardirq and softirq state, in "
"that it gives interested subsystems an opportunity to be notified of every "
"hardirqs-off/hardirqs-on, softirqs-off/softirqs-on event that happens in the "
"kernel."
msgstr ""

#: ../../../core-api/irq/irqflags-tracing.rst:12
msgid ""
"CONFIG_TRACE_IRQFLAGS_SUPPORT is needed for CONFIG_PROVE_SPIN_LOCKING and "
"CONFIG_PROVE_RW_LOCKING to be offered by the generic lock debugging code. "
"Otherwise only CONFIG_PROVE_MUTEX_LOCKING and CONFIG_PROVE_RWSEM_LOCKING "
"will be offered on an architecture - these are locking APIs that are not "
"used in IRQ context. (the one exception for rwsems is worked around)"
msgstr ""

#: ../../../core-api/irq/irqflags-tracing.rst:19
msgid ""
"Architecture support for this is certainly not in the \"trivial\" category, "
"because lots of lowlevel assembly code deal with irq-flags state changes. "
"But an architecture can be irq-flags-tracing enabled in a rather "
"straightforward and risk-free manner."
msgstr ""

#: ../../../core-api/irq/irqflags-tracing.rst:24
msgid ""
"Architectures that want to support this need to do a couple of code-"
"organizational changes first:"
msgstr ""

#: ../../../core-api/irq/irqflags-tracing.rst:27
msgid "add and enable TRACE_IRQFLAGS_SUPPORT in their arch level Kconfig file"
msgstr ""

#: ../../../core-api/irq/irqflags-tracing.rst:29
msgid ""
"and then a couple of functional changes are needed as well to implement irq-"
"flags-tracing support:"
msgstr ""

#: ../../../core-api/irq/irqflags-tracing.rst:32
msgid ""
"in lowlevel entry code add (build-conditional) calls to the "
"trace_hardirqs_off()/trace_hardirqs_on() functions. The lock validator "
"closely guards whether the 'real' irq-flags matches the 'virtual' irq-flags "
"state, and complains loudly (and turns itself off) if the two do not match. "
"Usually most of the time for arch support for irq-flags-tracing is spent in "
"this state: look at the lockdep complaint, try to figure out the assembly "
"code we did not cover yet, fix and repeat. Once the system has booted up and "
"works without a lockdep complaint in the irq-flags-tracing functions arch "
"support is complete."
msgstr ""

#: ../../../core-api/irq/irqflags-tracing.rst:42
msgid ""
"if the architecture has non-maskable interrupts then those need to be "
"excluded from the irq-tracing [and lock validation] mechanism via "
"lockdep_off()/lockdep_on()."
msgstr ""

#: ../../../core-api/irq/irqflags-tracing.rst:46
msgid ""
"In general there is no risk from having an incomplete irq-flags-tracing "
"implementation in an architecture: lockdep will detect that and will turn "
"itself off. I.e. the lock validator will still be reliable. There should be "
"no crashes due to irq-tracing bugs. (except if the assembly changes break "
"other code by modifying conditions or registers that shouldn't be)"
msgstr ""
