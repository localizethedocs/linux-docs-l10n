# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-14 08:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../core-api/printk-basics.rst:5
msgid "Message logging with printk"
msgstr ""

#: ../../../core-api/printk-basics.rst:7
msgid ""
"printk() is one of the most widely known functions in the Linux kernel. It's "
"the standard tool we have for printing messages and usually the most basic "
"way of tracing and debugging. If you're familiar with printf(3) you can tell "
"printk() is based on it, although it has some functional differences:"
msgstr ""

#: ../../../core-api/printk-basics.rst:12
msgid "printk() messages can specify a log level."
msgstr ""

#: ../../../core-api/printk-basics.rst:14
msgid ""
"the format string, while largely compatible with C99, doesn't follow the "
"exact same specification. It has some extensions and a few limitations (no "
"``%n`` or floating point conversion specifiers). See :ref:`How to get printk "
"format specifiers right <printk-specifiers>`."
msgstr ""

#: ../../../core-api/printk-basics.rst:19
msgid ""
"All printk() messages are printed to the kernel log buffer, which is a ring "
"buffer exported to userspace through /dev/kmsg. The usual way to read it is "
"using ``dmesg``."
msgstr ""

#: ../../../core-api/printk-basics.rst:23
msgid "printk() is typically used like this::"
msgstr ""

#: ../../../core-api/printk-basics.rst:27
msgid ""
"where ``KERN_INFO`` is the log level (note that it's concatenated to the "
"format string, the log level is not a separate argument). The available log "
"levels are:"
msgstr ""

#: ../../../core-api/printk-basics.rst:31
msgid "Name"
msgstr ""

#: ../../../core-api/printk-basics.rst:31
msgid "String"
msgstr ""

#: ../../../core-api/printk-basics.rst:31
msgid "Alias function"
msgstr ""

#: ../../../core-api/printk-basics.rst:33
msgid "KERN_EMERG"
msgstr ""

#: ../../../core-api/printk-basics.rst:33
msgid "\"0\""
msgstr ""

#: ../../../core-api/printk-basics.rst:33
msgid "pr_emerg()"
msgstr ""

#: ../../../core-api/printk-basics.rst:35
msgid "KERN_ALERT"
msgstr ""

#: ../../../core-api/printk-basics.rst:35
msgid "\"1\""
msgstr ""

#: ../../../core-api/printk-basics.rst:35
msgid "pr_alert()"
msgstr ""

#: ../../../core-api/printk-basics.rst:37
msgid "KERN_CRIT"
msgstr ""

#: ../../../core-api/printk-basics.rst:37
msgid "\"2\""
msgstr ""

#: ../../../core-api/printk-basics.rst:37
msgid "pr_crit()"
msgstr ""

#: ../../../core-api/printk-basics.rst:39
msgid "KERN_ERR"
msgstr ""

#: ../../../core-api/printk-basics.rst:39
msgid "\"3\""
msgstr ""

#: ../../../core-api/printk-basics.rst:39
msgid "pr_err()"
msgstr ""

#: ../../../core-api/printk-basics.rst:41
msgid "KERN_WARNING"
msgstr ""

#: ../../../core-api/printk-basics.rst:41
msgid "\"4\""
msgstr ""

#: ../../../core-api/printk-basics.rst:41
msgid "pr_warn()"
msgstr ""

#: ../../../core-api/printk-basics.rst:43
msgid "KERN_NOTICE"
msgstr ""

#: ../../../core-api/printk-basics.rst:43
msgid "\"5\""
msgstr ""

#: ../../../core-api/printk-basics.rst:43
msgid "pr_notice()"
msgstr ""

#: ../../../core-api/printk-basics.rst:45
msgid "KERN_INFO"
msgstr ""

#: ../../../core-api/printk-basics.rst:45
msgid "\"6\""
msgstr ""

#: ../../../core-api/printk-basics.rst:45
msgid "pr_info()"
msgstr ""

#: ../../../core-api/printk-basics.rst:47
msgid "KERN_DEBUG"
msgstr ""

#: ../../../core-api/printk-basics.rst:47
msgid "\"7\""
msgstr ""

#: ../../../core-api/printk-basics.rst:47
msgid "pr_debug() and pr_devel() if DEBUG is defined"
msgstr ""

#: ../../../core-api/printk-basics.rst:49
msgid "KERN_DEFAULT"
msgstr ""

#: ../../../core-api/printk-basics.rst:49
msgid "\"\""
msgstr ""

#: ../../../core-api/printk-basics.rst:51
msgid "KERN_CONT"
msgstr ""

#: ../../../core-api/printk-basics.rst:51
msgid "\"c\""
msgstr ""

#: ../../../core-api/printk-basics.rst:51
msgid "pr_cont()"
msgstr ""

#: ../../../core-api/printk-basics.rst:55
msgid ""
"The log level specifies the importance of a message. The kernel decides "
"whether to show the message immediately (printing it to the current console) "
"depending on its log level and the current *console_loglevel* (a kernel "
"variable). If the message priority is higher (lower log level value) than "
"the *console_loglevel* the message will be printed to the console."
msgstr ""

#: ../../../core-api/printk-basics.rst:61
msgid ""
"If the log level is omitted, the message is printed with ``KERN_DEFAULT`` "
"level."
msgstr ""

#: ../../../core-api/printk-basics.rst:64
msgid "You can check the current *console_loglevel* with::"
msgstr ""

#: ../../../core-api/printk-basics.rst:69
msgid ""
"The result shows the *current*, *default*, *minimum* and *boot-time-default* "
"log levels."
msgstr ""

#: ../../../core-api/printk-basics.rst:72
msgid ""
"To change the current console_loglevel simply write the desired level to ``/"
"proc/sys/kernel/printk``. For example, to print all messages to the console::"
msgstr ""

#: ../../../core-api/printk-basics.rst:77
msgid "Another way, using ``dmesg``::"
msgstr ""

#: ../../../core-api/printk-basics.rst:81
msgid ""
"sets the console_loglevel to print KERN_WARNING (4) or more severe messages "
"to console. See ``dmesg(1)`` for more information."
msgstr ""

#: ../../../core-api/printk-basics.rst:84
msgid ""
"As an alternative to printk() you can use the ``pr_*()`` aliases for "
"logging. This family of macros embed the log level in the macro names. For "
"example::"
msgstr ""

#: ../../../core-api/printk-basics.rst:90
msgid "prints a ``KERN_INFO`` message."
msgstr ""

#: ../../../core-api/printk-basics.rst:92
msgid ""
"Besides being more concise than the equivalent printk() calls, they can use "
"a common definition for the format string through the pr_fmt() macro. For "
"instance, defining this at the top of a source file (before any ``#include`` "
"directive)::"
msgstr ""

#: ../../../core-api/printk-basics.rst:99
msgid ""
"would prefix every pr_*() message in that file with the module and function "
"name that originated the message."
msgstr ""

#: ../../../core-api/printk-basics.rst:102
msgid ""
"For debugging purposes there are also two conditionally-compiled macros: "
"pr_debug() and pr_devel(), which are compiled-out unless ``DEBUG`` (or also "
"``CONFIG_DYNAMIC_DEBUG`` in the case of pr_debug()) is defined."
msgstr ""

#: ../../../core-api/printk-basics.rst:108
msgid "Function reference"
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:391
msgid "``pr_fmt (fmt)``"
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:389
msgid "used by the pr_*() macros to generate the printk format string"
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:393
#: include/linux/printk.h:493 include/linux/printk.h:521
#: include/linux/printk.h:531 include/linux/printk.h:541
#: include/linux/printk.h:551 include/linux/printk.h:561
#: include/linux/printk.h:571 include/linux/printk.h:581
#: include/linux/printk.h:592 include/linux/printk.h:604
#: include/linux/printk.h:628
msgid "**Parameters**"
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:395
#: include/linux/printk.h:495 include/linux/printk.h:523
#: include/linux/printk.h:533 include/linux/printk.h:543
#: include/linux/printk.h:553 include/linux/printk.h:563
#: include/linux/printk.h:573 include/linux/printk.h:583
#: include/linux/printk.h:594 include/linux/printk.h:606
#: include/linux/printk.h:630
msgid "``fmt``"
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:390
msgid "format string passed from a pr_*() macro"
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:3
#: include/linux/printk.h:392 include/linux/printk.h:521
#: include/linux/printk.h:531 include/linux/printk.h:541
#: include/linux/printk.h:551 include/linux/printk.h:561
#: include/linux/printk.h:571 include/linux/printk.h:581
#: include/linux/printk.h:592 include/linux/printk.h:604
#: include/linux/printk.h:628
msgid "**Description**"
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:391
msgid ""
"This macro can be used to generate a unified format string for pr_*() "
"macros. A common use is to prefix all pr_*() messages in a file with a "
"common string. For example, defining this at the top of a source file:"
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:395
msgid "#define pr_fmt(fmt) KBUILD_MODNAME \": \" fmt"
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:397
msgid ""
"would prefix all pr_info, pr_emerg... messages in the file with the module "
"name."
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:491
msgid "``printk (fmt, ...)``"
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:489
msgid "print a kernel message"
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:490
#: include/linux/printk.h:518 include/linux/printk.h:528
#: include/linux/printk.h:538 include/linux/printk.h:548
#: include/linux/printk.h:558 include/linux/printk.h:568
#: include/linux/printk.h:578 include/linux/printk.h:589
#: include/linux/printk.h:601 include/linux/printk.h:625
msgid "format string"
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:492
#: include/linux/printk.h:520 include/linux/printk.h:530
#: include/linux/printk.h:540 include/linux/printk.h:550
#: include/linux/printk.h:560 include/linux/printk.h:570
#: include/linux/printk.h:580 include/linux/printk.h:591
#: include/linux/printk.h:603 include/linux/printk.h:627
msgid "``...``"
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:1
msgid "variable arguments"
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:491
msgid ""
"This is printk(). It can be called from any context. We want it to work."
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:493
msgid ""
"If printk indexing is enabled, _printk() is called from printk_index_wrap. "
"Otherwise, printk is simply #defined to _printk."
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:496
msgid ""
"We try to grab the console_lock. If we succeed, it's easy - we log the "
"output and call the console drivers.  If we fail to get the semaphore, we "
"place the output into the log buffer and return. The current holder of the "
"console_sem will notice the new output in console_unlock(); and will send it "
"to the consoles before releasing the lock."
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:502
msgid ""
"One effect of this deferred printing is that code which calls printk() and "
"then changes console_loglevel may break. This is because console_loglevel is "
"inspected when the actual printing occurs."
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:506
msgid "See also: printf(3)"
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:509
msgid ""
"See the vsnprintf() documentation for format string extensions over C99."
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:519
msgid "``pr_emerg (fmt, ...)``"
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:517
msgid "Print an emergency-level message"
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:519
#: include/linux/printk.h:529 include/linux/printk.h:539
#: include/linux/printk.h:549 include/linux/printk.h:559
#: include/linux/printk.h:569 include/linux/printk.h:579
#: include/linux/printk.h:590 include/linux/printk.h:602
#: include/linux/printk.h:626
msgid "arguments for the format string"
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:520
msgid ""
"This macro expands to a printk with KERN_EMERG loglevel. It uses pr_fmt() to "
"generate the format string."
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:529
msgid "``pr_alert (fmt, ...)``"
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:527
msgid "Print an alert-level message"
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:530
msgid ""
"This macro expands to a printk with KERN_ALERT loglevel. It uses pr_fmt() to "
"generate the format string."
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:539
msgid "``pr_crit (fmt, ...)``"
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:537
msgid "Print a critical-level message"
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:540
msgid ""
"This macro expands to a printk with KERN_CRIT loglevel. It uses pr_fmt() to "
"generate the format string."
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:549
msgid "``pr_err (fmt, ...)``"
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:547
msgid "Print an error-level message"
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:550
msgid ""
"This macro expands to a printk with KERN_ERR loglevel. It uses pr_fmt() to "
"generate the format string."
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:559
msgid "``pr_warn (fmt, ...)``"
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:557
msgid "Print a warning-level message"
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:560
msgid ""
"This macro expands to a printk with KERN_WARNING loglevel. It uses pr_fmt() "
"to generate the format string."
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:569
msgid "``pr_notice (fmt, ...)``"
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:567
msgid "Print a notice-level message"
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:570
msgid ""
"This macro expands to a printk with KERN_NOTICE loglevel. It uses pr_fmt() "
"to generate the format string."
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:579
msgid "``pr_info (fmt, ...)``"
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:577
msgid "Print an info-level message"
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:580
msgid ""
"This macro expands to a printk with KERN_INFO loglevel. It uses pr_fmt() to "
"generate the format string."
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:590
msgid "``pr_cont (fmt, ...)``"
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:588
msgid "Continues a previous log message in the same line."
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:591
msgid ""
"This macro expands to a printk with KERN_CONT loglevel. It should only be "
"used when continuing a log message with no newline ('\\n') enclosed. "
"Otherwise it defaults back to KERN_DEFAULT loglevel."
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:602
msgid "``pr_devel (fmt, ...)``"
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:600
#: include/linux/printk.h:624
msgid "Print a debug-level message conditionally"
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:603
msgid ""
"This macro expands to a printk with KERN_DEBUG loglevel if DEBUG is defined. "
"Otherwise it does nothing."
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:606
msgid "It uses pr_fmt() to generate the format string."
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:626
msgid "``pr_debug (fmt, ...)``"
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:627
msgid ""
"This macro expands to dynamic_pr_debug() if CONFIG_DYNAMIC_DEBUG is set. "
"Otherwise, if DEBUG is defined, it's equivalent to a printk with KERN_DEBUG "
"loglevel. If DEBUG is not defined it does nothing."
msgstr ""

#: ../../../core-api/printk-basics:110: include/linux/printk.h:631
msgid ""
"It uses pr_fmt() to generate the format string (dynamic_pr_debug() uses "
"pr_fmt() internally)."
msgstr ""
