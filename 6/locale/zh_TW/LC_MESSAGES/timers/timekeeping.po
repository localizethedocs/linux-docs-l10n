# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../timers/timekeeping.rst:3
msgid "Clock sources, Clock events, sched_clock() and delay timers"
msgstr ""

#: ../../../timers/timekeeping.rst:5
msgid ""
"This document tries to briefly explain some basic kernel timekeeping "
"abstractions. It partly pertains to the drivers usually found in drivers/"
"clocksource in the kernel tree, but the code may be spread out across the "
"kernel."
msgstr ""

#: ../../../timers/timekeeping.rst:10
msgid ""
"If you grep through the kernel source you will find a number of "
"architecture- specific implementations of clock sources, clockevents and "
"several likewise architecture-specific overrides of the sched_clock() "
"function and some delay timers."
msgstr ""

#: ../../../timers/timekeeping.rst:15
msgid ""
"To provide timekeeping for your platform, the clock source provides the "
"basic timeline, whereas clock events shoot interrupts on certain points on "
"this timeline, providing facilities such as high-resolution timers. "
"sched_clock() is used for scheduling and timestamping, and delay timers "
"provide an accurate delay source using hardware counters."
msgstr ""

#: ../../../timers/timekeeping.rst:23
msgid "Clock sources"
msgstr ""

#: ../../../timers/timekeeping.rst:25
msgid ""
"The purpose of the clock source is to provide a timeline for the system that "
"tells you where you are in time. For example issuing the command 'date' on a "
"Linux system will eventually read the clock source to determine exactly what "
"time it is."
msgstr ""

#: ../../../timers/timekeeping.rst:30
msgid ""
"Typically the clock source is a monotonic, atomic counter which will provide "
"n bits which count from 0 to (2^n)-1 and then wraps around to 0 and start "
"over. It will ideally NEVER stop ticking as long as the system is running. "
"It may stop during system suspend."
msgstr ""

#: ../../../timers/timekeeping.rst:35
msgid ""
"The clock source shall have as high resolution as possible, and the "
"frequency shall be as stable and correct as possible as compared to a real-"
"world wall clock. It should not move unpredictably back and forth in time or "
"miss a few cycles here and there."
msgstr ""

#: ../../../timers/timekeeping.rst:40
msgid ""
"It must be immune to the kind of effects that occur in hardware where e.g. "
"the counter register is read in two phases on the bus lowest 16 bits first "
"and the higher 16 bits in a second bus cycle with the counter bits "
"potentially being updated in between leading to the risk of very strange "
"values from the counter."
msgstr ""

#: ../../../timers/timekeeping.rst:46
msgid ""
"When the wall-clock accuracy of the clock source isn't satisfactory, there "
"are various quirks and layers in the timekeeping code for e.g. synchronizing "
"the user-visible time to RTC clocks in the system or against networked time "
"servers using NTP, but all they do basically is update an offset against the "
"clock source, which provides the fundamental timeline for the system. These "
"measures does not affect the clock source per se, they only adapt the system "
"to the shortcomings of it."
msgstr ""

#: ../../../timers/timekeeping.rst:54
msgid ""
"The clock source struct shall provide means to translate the provided "
"counter into a nanosecond value as an unsigned long long (unsigned 64 bit) "
"number. Since this operation may be invoked very often, doing this in a "
"strict mathematical sense is not desirable: instead the number is taken as "
"close as possible to a nanosecond value using only the arithmetic operations "
"multiply and shift, so in clocksource_cyc2ns() you find:"
msgstr ""

#: ../../../timers/timekeeping.rst:61
msgid "ns ~= (clocksource * mult) >> shift"
msgstr ""

#: ../../../timers/timekeeping.rst:63
msgid ""
"You will find a number of helper functions in the clock source code intended "
"to aid in providing these mult and shift values, such as "
"clocksource_khz2mult(), clocksource_hz2mult() that help determine the mult "
"factor from a fixed shift, and clocksource_register_hz() and "
"clocksource_register_khz() which will help out assigning both shift and mult "
"factors using the frequency of the clock source as the only input."
msgstr ""

#: ../../../timers/timekeeping.rst:70
msgid ""
"For real simple clock sources accessed from a single I/O memory location "
"there is nowadays even clocksource_mmio_init() which will take a memory "
"location, bit width, a parameter telling whether the counter in the register "
"counts up or down, and the timer clock rate, and then conjure all necessary "
"parameters."
msgstr ""

#: ../../../timers/timekeeping.rst:76
msgid ""
"Since a 32-bit counter at say 100 MHz will wrap around to zero after some 43 "
"seconds, the code handling the clock source will have to compensate for "
"this. That is the reason why the clock source struct also contains a 'mask' "
"member telling how many bits of the source are valid. This way the "
"timekeeping code knows when the counter will wrap around and can insert the "
"necessary compensation code on both sides of the wrap point so that the "
"system timeline remains monotonic."
msgstr ""

#: ../../../timers/timekeeping.rst:86
msgid "Clock events"
msgstr ""

#: ../../../timers/timekeeping.rst:88
msgid ""
"Clock events are the conceptual reverse of clock sources: they take a "
"desired time specification value and calculate the values to poke into "
"hardware timer registers."
msgstr ""

#: ../../../timers/timekeeping.rst:92
msgid ""
"Clock events are orthogonal to clock sources. The same hardware and register "
"range may be used for the clock event, but it is essentially a different "
"thing. The hardware driving clock events has to be able to fire interrupts, "
"so as to trigger events on the system timeline. On an SMP system, it is "
"ideal (and customary) to have one such event driving timer per CPU core, so "
"that each core can trigger events independently of any other core."
msgstr ""

#: ../../../timers/timekeeping.rst:100
msgid ""
"You will notice that the clock event device code is based on the same basic "
"idea about translating counters to nanoseconds using mult and shift "
"arithmetic, and you find the same family of helper functions again for "
"assigning these values. The clock event driver does not need a 'mask' "
"attribute however: the system will not try to plan events beyond the time "
"horizon of the clock event."
msgstr ""

#: ../../../timers/timekeeping.rst:109
msgid "sched_clock()"
msgstr ""

#: ../../../timers/timekeeping.rst:111
msgid ""
"In addition to the clock sources and clock events there is a special weak "
"function in the kernel called sched_clock(). This function shall return the "
"number of nanoseconds since the system was started. An architecture may or "
"may not provide an implementation of sched_clock() on its own. If a local "
"implementation is not provided, the system jiffy counter will be used as "
"sched_clock()."
msgstr ""

#: ../../../timers/timekeeping.rst:118
msgid ""
"As the name suggests, sched_clock() is used for scheduling the system, "
"determining the absolute timeslice for a certain process in the CFS "
"scheduler for example. It is also used for printk timestamps when you have "
"selected to include time information in printk for things like bootcharts."
msgstr ""

#: ../../../timers/timekeeping.rst:123
msgid ""
"Compared to clock sources, sched_clock() has to be very fast: it is called "
"much more often, especially by the scheduler. If you have to do trade-offs "
"between accuracy compared to the clock source, you may sacrifice accuracy "
"for speed in sched_clock(). It however requires some of the same basic "
"characteristics as the clock source, i.e. it should be monotonic."
msgstr ""

#: ../../../timers/timekeeping.rst:129
msgid ""
"The sched_clock() function may wrap only on unsigned long long boundaries, i."
"e. after 64 bits. Since this is a nanosecond value this will mean it wraps "
"after circa 585 years. (For most practical systems this means \"never\".)"
msgstr ""

#: ../../../timers/timekeeping.rst:133
msgid ""
"If an architecture does not provide its own implementation of this function, "
"it will fall back to using jiffies, making its maximum resolution 1/HZ of "
"the jiffy frequency for the architecture. This will affect scheduling "
"accuracy and will likely show up in system benchmarks."
msgstr ""

#: ../../../timers/timekeeping.rst:138
msgid ""
"The clock driving sched_clock() may stop or reset to zero during system "
"suspend/sleep. This does not matter to the function it serves of scheduling "
"events on the system. However it may result in interesting timestamps in "
"printk()."
msgstr ""

#: ../../../timers/timekeeping.rst:143
msgid ""
"The sched_clock() function should be callable in any context, IRQ- and NMI-"
"safe and return a sane value in any context."
msgstr ""

#: ../../../timers/timekeeping.rst:146
msgid ""
"Some architectures may have a limited set of time sources and lack a nice "
"counter to derive a 64-bit nanosecond value, so for example on the ARM "
"architecture, special helper functions have been created to provide a "
"sched_clock() nanosecond base from a 16- or 32-bit counter. Sometimes the "
"same counter that is also used as clock source is used for this purpose."
msgstr ""

#: ../../../timers/timekeeping.rst:152
msgid ""
"On SMP systems, it is crucial for performance that sched_clock() can be "
"called independently on each CPU without any synchronization performance "
"hits. Some hardware (such as the x86 TSC) will cause the sched_clock() "
"function to drift between the CPUs on the system. The kernel can work around "
"this by enabling the CONFIG_HAVE_UNSTABLE_SCHED_CLOCK option. This is "
"another aspect that makes sched_clock() different from the ordinary clock "
"source."
msgstr ""

#: ../../../timers/timekeeping.rst:161
msgid "Delay timers (some architectures only)"
msgstr ""

#: ../../../timers/timekeeping.rst:163
msgid ""
"On systems with variable CPU frequency, the various kernel delay() functions "
"will sometimes behave strangely. Basically these delays usually use a hard "
"loop to delay a certain number of jiffy fractions using a \"lpj\" (loops per "
"jiffy) value, calibrated on boot."
msgstr ""

#: ../../../timers/timekeeping.rst:168
msgid ""
"Let's hope that your system is running on maximum frequency when this value "
"is calibrated: as an effect when the frequency is geared down to half the "
"full frequency, any delay() will be twice as long. Usually this does not "
"hurt, as you're commonly requesting that amount of delay *or more*. But "
"basically the semantics are quite unpredictable on such systems."
msgstr ""

#: ../../../timers/timekeeping.rst:174
msgid ""
"Enter timer-based delays. Using these, a timer read may be used instead of a "
"hard-coded loop for providing the desired delay."
msgstr ""

#: ../../../timers/timekeeping.rst:177
msgid ""
"This is done by declaring a struct delay_timer and assigning the appropriate "
"function pointers and rate settings for this delay timer."
msgstr ""

#: ../../../timers/timekeeping.rst:180
msgid "This is available on some architectures like OpenRISC or ARM."
msgstr ""
