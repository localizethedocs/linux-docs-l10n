# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../infiniband/user_mad.rst:3
msgid "Userspace MAD access"
msgstr ""

#: ../../../infiniband/user_mad.rst:6
msgid "Device files"
msgstr ""

#: ../../../infiniband/user_mad.rst:8
msgid ""
"Each port of each InfiniBand device has a \"umad\" device and an \"issm\" "
"device attached.  For example, a two-port HCA will have two umad devices and "
"two issm devices, while a switch will have one device of each type (for "
"switch port 0)."
msgstr ""

#: ../../../infiniband/user_mad.rst:14
msgid "Creating MAD agents"
msgstr ""

#: ../../../infiniband/user_mad.rst:16
msgid ""
"A MAD agent can be created by filling in a struct ib_user_mad_reg_req and "
"then calling the IB_USER_MAD_REGISTER_AGENT ioctl on a file descriptor for "
"the appropriate device file.  If the registration request succeeds, a 32-bit "
"id will be returned in the structure. For example::"
msgstr ""

#: ../../../infiniband/user_mad.rst:29
msgid ""
"Agents can be unregistered with the IB_USER_MAD_UNREGISTER_AGENT ioctl.  "
"Also, all agents registered through a file descriptor will be unregistered "
"when the descriptor is closed."
msgstr ""

#: ../../../infiniband/user_mad.rst:33
msgid "2014"
msgstr ""

#: ../../../infiniband/user_mad.rst:34
msgid ""
"a new registration ioctl is now provided which allows additional fields to "
"be provided during registration. Users of this registration call are "
"implicitly setting the use of pkey_index (see below)."
msgstr ""

#: ../../../infiniband/user_mad.rst:40
msgid "Receiving MADs"
msgstr ""

#: ../../../infiniband/user_mad.rst:42
msgid ""
"MADs are received using read().  The receive side now supports RMPP. The "
"buffer passed to read() must be at least one struct ib_user_mad + 256 bytes. "
"For example:"
msgstr ""

#: ../../../infiniband/user_mad.rst:46
msgid ""
"If the buffer passed is not large enough to hold the received MAD (RMPP), "
"the errno is set to ENOSPC and the length of the buffer needed is set in mad."
"length."
msgstr ""

#: ../../../infiniband/user_mad.rst:50
msgid "Example for normal MAD (non RMPP) reads::"
msgstr ""

#: ../../../infiniband/user_mad.rst:60
msgid "Example for RMPP reads::"
msgstr ""

#: ../../../infiniband/user_mad.rst:76
msgid ""
"In addition to the actual MAD contents, the other struct ib_user_mad fields "
"will be filled in with information on the received MAD.  For example, the "
"remote LID will be in mad.lid."
msgstr ""

#: ../../../infiniband/user_mad.rst:80
msgid ""
"If a send times out, a receive will be generated with mad.status set to "
"ETIMEDOUT.  Otherwise when a MAD has been successfully received, mad.status "
"will be 0."
msgstr ""

#: ../../../infiniband/user_mad.rst:84
msgid "poll()/select() may be used to wait until a MAD can be read."
msgstr ""

#: ../../../infiniband/user_mad.rst:87
msgid "Sending MADs"
msgstr ""

#: ../../../infiniband/user_mad.rst:89
msgid ""
"MADs are sent using write().  The agent ID for sending should be filled into "
"the id field of the MAD, the destination LID should be filled into the lid "
"field, and so on.  The send side does support RMPP so arbitrary length MAD "
"can be sent. For example::"
msgstr ""

#: ../../../infiniband/user_mad.rst:109
msgid "Transaction IDs"
msgstr ""

#: ../../../infiniband/user_mad.rst:111
msgid ""
"Users of the umad devices can use the lower 32 bits of the transaction ID "
"field (that is, the least significant half of the field in network byte "
"order) in MADs being sent to match request/response pairs.  The upper 32 "
"bits are reserved for use by the kernel and will be overwritten before a MAD "
"is sent."
msgstr ""

#: ../../../infiniband/user_mad.rst:118
msgid "P_Key Index Handling"
msgstr ""

#: ../../../infiniband/user_mad.rst:120
msgid ""
"The old ib_umad interface did not allow setting the P_Key index for MADs "
"that are sent and did not provide a way for obtaining the P_Key index of "
"received MADs.  A new layout for struct ib_user_mad_hdr with a pkey_index "
"member has been defined; however, to preserve binary compatibility with "
"older applications, this new layout will not be used unless one of "
"IB_USER_MAD_ENABLE_PKEY or IB_USER_MAD_REGISTER_AGENT2 ioctl's are called "
"before a file descriptor is used for anything else."
msgstr ""

#: ../../../infiniband/user_mad.rst:128
msgid ""
"In September 2008, the IB_USER_MAD_ABI_VERSION will be incremented to 6, the "
"new layout of struct ib_user_mad_hdr will be used by default, and the "
"IB_USER_MAD_ENABLE_PKEY ioctl will be removed."
msgstr ""

#: ../../../infiniband/user_mad.rst:133
msgid "Setting IsSM Capability Bit"
msgstr ""

#: ../../../infiniband/user_mad.rst:135
msgid ""
"To set the IsSM capability bit for a port, simply open the corresponding "
"issm device file.  If the IsSM bit is already set, then the open call will "
"block until the bit is cleared (or return immediately with errno set to "
"EAGAIN if the O_NONBLOCK flag is passed to open()).  The IsSM bit will be "
"cleared when the issm file is closed.  No read, write or other operations "
"can be performed on the issm file."
msgstr ""

#: ../../../infiniband/user_mad.rst:144
msgid "/dev files"
msgstr ""

#: ../../../infiniband/user_mad.rst:146
msgid ""
"To create the appropriate character device files automatically with udev, a "
"rule like::"
msgstr ""

#: ../../../infiniband/user_mad.rst:152
msgid "can be used.  This will create device nodes named::"
msgstr ""

#: ../../../infiniband/user_mad.rst:157
msgid ""
"for the first port, and so on.  The InfiniBand device and port associated "
"with these devices can be determined from the files::"
msgstr ""

#: ../../../infiniband/user_mad.rst:163
msgid "and::"
msgstr ""
