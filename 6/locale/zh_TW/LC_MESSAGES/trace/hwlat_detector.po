# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../trace/hwlat_detector.rst:3
msgid "Hardware Latency Detector"
msgstr ""

#: ../../../trace/hwlat_detector.rst:6
msgid "Introduction"
msgstr ""

#: ../../../trace/hwlat_detector.rst:8
msgid ""
"The tracer hwlat_detector is a special purpose tracer that is used to detect "
"large system latencies induced by the behavior of certain underlying "
"hardware or firmware, independent of Linux itself. The code was developed "
"originally to detect SMIs (System Management Interrupts) on x86 systems, "
"however there is nothing x86 specific about this patchset. It was originally "
"written for use by the \"RT\" patch since the Real Time kernel is highly "
"latency sensitive."
msgstr ""

#: ../../../trace/hwlat_detector.rst:16
msgid ""
"SMIs are not serviced by the Linux kernel, which means that it does not even "
"know that they are occurring. SMIs are instead set up by BIOS code and are "
"serviced by BIOS code, usually for \"critical\" events such as management of "
"thermal sensors and fans. Sometimes though, SMIs are used for other tasks "
"and those tasks can spend an inordinate amount of time in the handler "
"(sometimes measured in milliseconds). Obviously this is a problem if you are "
"trying to keep event service latencies down in the microsecond range."
msgstr ""

#: ../../../trace/hwlat_detector.rst:24
msgid ""
"The hardware latency detector works by hogging one of the cpus for "
"configurable amounts of time (with interrupts disabled), polling the CPU "
"Time Stamp Counter for some period, then looking for gaps in the TSC data. "
"Any gap indicates a time when the polling was interrupted and since the "
"interrupts are disabled, the only thing that could do that would be an SMI "
"or other hardware hiccup (or an NMI, but those can be tracked)."
msgstr ""

#: ../../../trace/hwlat_detector.rst:31
msgid ""
"Note that the hwlat detector should *NEVER* be used in a production "
"environment. It is intended to be run manually to determine if the hardware "
"platform has a problem with long system firmware service routines."
msgstr ""

#: ../../../trace/hwlat_detector.rst:36
msgid "Usage"
msgstr ""

#: ../../../trace/hwlat_detector.rst:38
msgid ""
"Write the ASCII text \"hwlat\" into the current_tracer file of the tracing "
"system (mounted at /sys/kernel/tracing or /sys/kernel/tracing). It is "
"possible to redefine the threshold in microseconds (us) above which latency "
"spikes will be taken into account."
msgstr ""

#: ../../../trace/hwlat_detector.rst:43
msgid "Example::"
msgstr ""

#: ../../../trace/hwlat_detector.rst:48
msgid ""
"The /sys/kernel/tracing/hwlat_detector interface contains the following "
"files:"
msgstr ""

#: ../../../trace/hwlat_detector.rst:50
msgid "width - time period to sample with CPUs held (usecs)"
msgstr ""

#: ../../../trace/hwlat_detector.rst:51
msgid "must be less than the total window size (enforced)"
msgstr ""

#: ../../../trace/hwlat_detector.rst:52
msgid "window - total period of sampling, width being inside (usecs)"
msgstr ""

#: ../../../trace/hwlat_detector.rst:54
msgid ""
"By default the width is set to 500,000 and window to 1,000,000, meaning that "
"for every 1,000,000 usecs (1s) the hwlat detector will spin for 500,000 "
"usecs (0.5s). If tracing_thresh contains zero when hwlat tracer is enabled, "
"it will change to a default of 10 usecs. If any latencies that exceed the "
"threshold is observed then the data will be written to the tracing ring "
"buffer."
msgstr ""

#: ../../../trace/hwlat_detector.rst:60
msgid ""
"The minimum sleep time between periods is 1 millisecond. Even if width is "
"less than 1 millisecond apart from window, to allow the system to not be "
"totally starved."
msgstr ""

#: ../../../trace/hwlat_detector.rst:64
msgid ""
"If tracing_thresh was zero when hwlat detector was started, it will be set "
"back to zero if another tracer is loaded. Note, the last value in "
"tracing_thresh that hwlat detector had will be saved and this value will be "
"restored in tracing_thresh if it is still zero when hwlat detector is "
"started again."
msgstr ""

#: ../../../trace/hwlat_detector.rst:70
msgid "The following tracing directory files are used by the hwlat_detector:"
msgstr ""

#: ../../../trace/hwlat_detector.rst:72
msgid "in /sys/kernel/tracing:"
msgstr ""

#: ../../../trace/hwlat_detector.rst:74
msgid "tracing_threshold    - minimum latency value to be considered (usecs)"
msgstr ""

#: ../../../trace/hwlat_detector.rst:75
msgid ""
"tracing_max_latency  - maximum hardware latency actually observed (usecs)"
msgstr ""

#: ../../../trace/hwlat_detector.rst:76
msgid "tracing_cpumask      - the CPUs to move the hwlat thread across"
msgstr ""

#: ../../../trace/hwlat_detector.rst:77
msgid ""
"hwlat_detector/width - specified amount of time to spin within window (usecs)"
msgstr ""

#: ../../../trace/hwlat_detector.rst:78
msgid ""
"hwlat_detector/window        - amount of time between (width) runs (usecs)"
msgstr ""

#: ../../../trace/hwlat_detector.rst:79
msgid "hwlat_detector/mode  - the thread mode"
msgstr ""

#: ../../../trace/hwlat_detector.rst:81
msgid ""
"By default, one hwlat detector's kernel thread will migrate across each CPU "
"specified in cpumask at the beginning of a new window, in a round-robin "
"fashion. This behavior can be changed by changing the thread mode, the "
"available options are:"
msgstr ""

#: ../../../trace/hwlat_detector.rst:86
msgid "none:        do not force migration"
msgstr ""

#: ../../../trace/hwlat_detector.rst:87
msgid "round-robin: migrate across each CPU specified in cpumask [default]"
msgstr ""

#: ../../../trace/hwlat_detector.rst:88
msgid "per-cpu:     create one thread for each cpu in tracing_cpumask"
msgstr ""
