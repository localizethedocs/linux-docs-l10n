# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../driver-api/aperture.rst:4
msgid "Managing Ownership of the Framebuffer Aperture"
msgstr ""

#: ../../../driver-api/aperture:6: drivers/video/aperture.c:17
msgid ""
"A graphics device might be supported by different drivers, but only one "
"driver can be active at any given time. Many systems load a generic graphics "
"drivers, such as EFI-GOP or VESA, early during the boot process. During "
"later boot stages, they replace the generic driver with a dedicated, "
"hardware-specific driver. To take over the device, the dedicated driver "
"first has to remove the generic driver. Aperture functions manage ownership "
"of framebuffer memory and hand-over between drivers."
msgstr ""

#: ../../../driver-api/aperture:6: drivers/video/aperture.c:25
msgid ""
"Graphics drivers should call aperture_remove_conflicting_devices() at the "
"top of their probe function. The function removes any generic driver that is "
"currently associated with the given framebuffer memory. An example for a "
"graphics device on the platform bus is shown below."
msgstr ""

#: ../../../driver-api/aperture:6: drivers/video/aperture.c:59
msgid ""
"The given example reads the platform device's I/O-memory range from the "
"device instance. An active framebuffer will be located within this range. "
"The call to aperture_remove_conflicting_devices() releases drivers that have "
"previously claimed ownership of the range and are currently driving output "
"on the framebuffer. If successful, the new driver can take over the device."
msgstr ""

#: ../../../driver-api/aperture:6: drivers/video/aperture.c:66
msgid ""
"While the given example uses a platform device, the aperture helpers work "
"with every bus that has an addressable framebuffer. In the case of PCI, "
"device drivers can also call aperture_remove_conflicting_pci_devices() and "
"let the function detect the apertures automatically. Device drivers without "
"knowledge of the framebuffer's location can call "
"aperture_remove_all_conflicting_devices(), which removes all known devices."
msgstr ""

#: ../../../driver-api/aperture:6: drivers/video/aperture.c:73
msgid ""
"Drivers that are susceptible to being removed by other drivers, such as "
"generic EFI or VESA drivers, have to register themselves as owners of their "
"framebuffer apertures. Ownership of the framebuffer memory is achieved by "
"calling devm_aperture_acquire_for_platform_device(). If successful, the "
"driver is the owner of the framebuffer range. The function fails if the "
"framebuffer is already owned by another driver. See below for an example."
msgstr ""

#: ../../../driver-api/aperture:6: drivers/video/aperture.c:117
msgid ""
"The similar to the previous example, the generic driver claims ownership of "
"the framebuffer memory from its probe function. This will fail if the memory "
"range, or parts of it, is already owned by another driver."
msgstr ""

#: ../../../driver-api/aperture:6: drivers/video/aperture.c:121
msgid ""
"If successful, the generic driver is now subject to forced removal by "
"another driver. This only works for platform drivers that support hot "
"unplugging. When a driver calls aperture_remove_conflicting_devices() et al "
"for the registered framebuffer range, the aperture helpers call "
"platform_device_unregister() and the generic driver unloads itself. The "
"generic driver also has to provide a remove function to make this work. Once "
"hot unplugged from hardware, it may not access the device's registers, "
"framebuffer memory, ROM, etc afterwards."
msgstr ""

#: ../../../driver-api/aperture:9: include/linux/aperture.h:48
msgid "remove all existing framebuffers"
msgstr ""

#: ../../../driver-api/aperture:12: drivers/video/aperture.c:224
#: drivers/video/aperture.c:278 drivers/video/aperture.c:309
#: drivers/video/aperture.c:340 ../../../driver-api/aperture:9:
#: include/linux/aperture.h:52
msgid "**Parameters**"
msgstr ""

#: ../../../driver-api/aperture:12: drivers/video/aperture.c:278
#: drivers/video/aperture.c:339 ../../../driver-api/aperture:9:
#: include/linux/aperture.h:54
msgid "``const char *name``"
msgstr ""

#: ../../../driver-api/aperture:12: drivers/video/aperture.c:277
#: drivers/video/aperture.c:338 ../../../driver-api/aperture:9:
#: include/linux/aperture.h:49
msgid "a descriptive name of the requesting driver"
msgstr ""

#: ../../../driver-api/aperture:12: drivers/video/aperture.c:226
#: drivers/video/aperture.c:279 drivers/video/aperture.c:308
#: drivers/video/aperture.c:340 ../../../driver-api/aperture:9:
#: include/linux/aperture.h:51
msgid "**Description**"
msgstr ""

#: ../../../driver-api/aperture:9: include/linux/aperture.h:50
msgid ""
"This function removes all graphics device drivers. Use this function on "
"systems that can have their framebuffer located anywhere in memory."
msgstr ""

#: ../../../driver-api/aperture:12: drivers/video/aperture.c:235
#: drivers/video/aperture.c:280 drivers/video/aperture.c:321
#: drivers/video/aperture.c:343 ../../../driver-api/aperture:9:
#: include/linux/aperture.h:53
msgid "**Return**"
msgstr ""

#: ../../../driver-api/aperture:12: drivers/video/aperture.c:281
#: drivers/video/aperture.c:322 drivers/video/aperture.c:344
#: ../../../driver-api/aperture:9: include/linux/aperture.h:54
msgid "0 on success, or a negative errno code otherwise"
msgstr ""

#: ../../../driver-api/aperture:12: drivers/video/aperture.c:220
msgid "Acquires ownership of an aperture on behalf of a platform device."
msgstr ""

#: ../../../driver-api/aperture:12: drivers/video/aperture.c:226
msgid "``struct platform_device *pdev``"
msgstr ""

#: ../../../driver-api/aperture:12: drivers/video/aperture.c:222
msgid "the platform device to own the aperture"
msgstr ""

#: ../../../driver-api/aperture:12: drivers/video/aperture.c:224
#: drivers/video/aperture.c:280
msgid "``resource_size_t base``"
msgstr ""

#: ../../../driver-api/aperture:12: drivers/video/aperture.c:223
msgid "the aperture's byte offset in physical memory"
msgstr ""

#: ../../../driver-api/aperture:12: drivers/video/aperture.c:225
#: drivers/video/aperture.c:277
msgid "``resource_size_t size``"
msgstr ""

#: ../../../driver-api/aperture:12: drivers/video/aperture.c:224
msgid "the aperture size in bytes"
msgstr ""

#: ../../../driver-api/aperture:12: drivers/video/aperture.c:225
msgid ""
"Installs the given device as the new owner of the aperture. The function "
"expects the aperture to be provided by a platform device. If another driver "
"takes over ownership of the aperture, aperture helpers will then unregister "
"the platform device automatically. All acquired apertures are released "
"automatically when the underlying device goes away."
msgstr ""

#: ../../../driver-api/aperture:12: drivers/video/aperture.c:231
msgid ""
"The function fails if the aperture, or parts of it, is currently owned by "
"another device. To evict current owners, callers should use "
"remove_conflicting_devices() et al. before calling this function."
msgstr ""

#: ../../../driver-api/aperture:12: drivers/video/aperture.c:236
msgid "0 on success, or a negative errno value otherwise."
msgstr ""

#: ../../../driver-api/aperture:12: drivers/video/aperture.c:274
msgid "remove devices in the given range"
msgstr ""

#: ../../../driver-api/aperture:12: drivers/video/aperture.c:275
msgid "the aperture's base address in physical memory"
msgstr ""

#: ../../../driver-api/aperture:12: drivers/video/aperture.c:276
msgid "aperture size in bytes"
msgstr ""

#: ../../../driver-api/aperture:12: drivers/video/aperture.c:278
msgid ""
"This function removes devices that own apertures within **base** and "
"**size**."
msgstr ""

#: ../../../driver-api/aperture:12: drivers/video/aperture.c:305
msgid "remove legacy VGA devices of a PCI devices"
msgstr ""

#: ../../../driver-api/aperture:12: drivers/video/aperture.c:311
#: drivers/video/aperture.c:342
msgid "``struct pci_dev *pdev``"
msgstr ""

#: ../../../driver-api/aperture:12: drivers/video/aperture.c:306
#: drivers/video/aperture.c:337
msgid "PCI device"
msgstr ""

#: ../../../driver-api/aperture:12: drivers/video/aperture.c:307
msgid ""
"This function removes VGA devices provided by **pdev**, such as a VGA "
"framebuffer or a console. This is useful if you have a VGA-compatible PCI "
"graphics device with framebuffers in non-BAR locations. Drivers should "
"acquire ownership of those memory areas and afterwards call this helper to "
"release remaining VGA devices."
msgstr ""

#: ../../../driver-api/aperture:12: drivers/video/aperture.c:313
msgid ""
"If your hardware has its framebuffers accessible via PCI BARS, use "
"aperture_remove_conflicting_pci_devices() instead. The function will release "
"any VGA devices automatically."
msgstr ""

#: ../../../driver-api/aperture:12: drivers/video/aperture.c:317
msgid "WARNING: Apparently we must remove graphics drivers before calling"
msgstr ""

#: ../../../driver-api/aperture:12: drivers/video/aperture.c:318
msgid ""
"this helper. Otherwise the vga fbdev driver falls over if we have vgacon "
"configured."
msgstr ""

#: ../../../driver-api/aperture:12: drivers/video/aperture.c:336
msgid "remove existing framebuffers for PCI devices"
msgstr ""

#: ../../../driver-api/aperture:12: drivers/video/aperture.c:339
msgid ""
"This function removes devices that own apertures within any of **pdev**'s "
"memory bars. The function assumes that PCI device with shadowed ROM drives a "
"primary display and therefore kicks out vga16fb as well."
msgstr ""
