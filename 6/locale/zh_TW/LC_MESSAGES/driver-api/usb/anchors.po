# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../driver-api/usb/anchors.rst:2
msgid "USB Anchors"
msgstr ""

#: ../../../driver-api/usb/anchors.rst:5
msgid "What is anchor?"
msgstr ""

#: ../../../driver-api/usb/anchors.rst:7
msgid ""
"A USB driver needs to support some callbacks requiring a driver to cease all "
"IO to an interface. To do so, a driver has to keep track of the URBs it has "
"submitted to know they've all completed or to call usb_kill_urb for them. "
"The anchor is a data structure takes care of keeping track of URBs and "
"provides methods to deal with multiple URBs."
msgstr ""

#: ../../../driver-api/usb/anchors.rst:16
msgid "Allocation and Initialisation"
msgstr ""

#: ../../../driver-api/usb/anchors.rst:18
msgid ""
"There's no API to allocate an anchor. It is simply declared as struct "
"usb_anchor. :c:func:`init_usb_anchor` must be called to initialise the data "
"structure."
msgstr ""

#: ../../../driver-api/usb/anchors.rst:23
msgid "Deallocation"
msgstr ""

#: ../../../driver-api/usb/anchors.rst:25
msgid ""
"Once it has no more URBs associated with it, the anchor can be freed with "
"normal memory management operations."
msgstr ""

#: ../../../driver-api/usb/anchors.rst:29
msgid "Association and disassociation of URBs with anchors"
msgstr ""

#: ../../../driver-api/usb/anchors.rst:31
msgid ""
"An association of URBs to an anchor is made by an explicit call to :c:func:"
"`usb_anchor_urb`. The association is maintained until an URB is finished by "
"(successful) completion. Thus disassociation is automatic. A function is "
"provided to forcibly finish (kill) all URBs associated with an anchor. "
"Furthermore, disassociation can be made with :c:func:`usb_unanchor_urb`"
msgstr ""

#: ../../../driver-api/usb/anchors.rst:39
msgid "Operations on multitudes of URBs"
msgstr ""

#: ../../../driver-api/usb/anchors.rst:42
msgid ":c:func:`usb_kill_anchored_urbs`"
msgstr ""

#: ../../../driver-api/usb/anchors.rst:44
msgid ""
"This function kills all URBs associated with an anchor. The URBs are called "
"in the reverse temporal order they were submitted. This way no data can be "
"reordered."
msgstr ""

#: ../../../driver-api/usb/anchors.rst:49
msgid ":c:func:`usb_scuttle_anchored_urbs`"
msgstr ""

#: ../../../driver-api/usb/anchors.rst:51
msgid "All URBs of an anchor are unanchored en masse."
msgstr ""

#: ../../../driver-api/usb/anchors.rst:54
msgid ":c:func:`usb_wait_anchor_empty_timeout`"
msgstr ""

#: ../../../driver-api/usb/anchors.rst:56
msgid ""
"This function waits for all URBs associated with an anchor to finish or a "
"timeout, whichever comes first. Its return value will tell you whether the "
"timeout was reached."
msgstr ""

#: ../../../driver-api/usb/anchors.rst:61
msgid ":c:func:`usb_anchor_empty`"
msgstr ""

#: ../../../driver-api/usb/anchors.rst:63
msgid ""
"Returns true if no URBs are associated with an anchor. Locking is the "
"caller's responsibility."
msgstr ""

#: ../../../driver-api/usb/anchors.rst:67
msgid ":c:func:`usb_get_from_anchor`"
msgstr ""

#: ../../../driver-api/usb/anchors.rst:69
msgid ""
"Returns the oldest anchored URB of an anchor. The URB is unanchored and "
"returned with a reference. As you may mix URBs to several destinations in "
"one anchor you have no guarantee the chronologically first submitted URB is "
"returned."
msgstr ""
