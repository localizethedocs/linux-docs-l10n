# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../driver-api/firewire.rst:3
msgid "Firewire (IEEE 1394) driver Interface Guide"
msgstr ""

#: ../../../driver-api/firewire.rst:6
msgid "Introduction and Overview"
msgstr ""

#: ../../../driver-api/firewire.rst:8
msgid ""
"The Linux FireWire subsystem adds some interfaces into the Linux system to"
msgstr ""

#: ../../../driver-api/firewire.rst:9
msgid "use/maintain+any resource on IEEE 1394 bus."
msgstr ""

#: ../../../driver-api/firewire.rst:11
msgid ""
"The main purpose of these interfaces is to access address space on each node "
"on IEEE 1394 bus by ISO/IEC 13213 (IEEE 1212) procedure, and to control "
"isochronous resources on the bus by IEEE 1394 procedure."
msgstr ""

#: ../../../driver-api/firewire.rst:15
msgid ""
"Two types of interfaces are added, according to consumers of the interface. "
"A set of userspace interfaces is available via `firewire character devices`. "
"A set of kernel interfaces is available via exported symbols in `firewire-"
"core` module."
msgstr ""

#: ../../../driver-api/firewire.rst:20
msgid "Firewire char device data structures"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:56
msgid "Common part of all fw_cdev_event_* types"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:60
#: include/uapi/linux/firewire-cdev.h:77 include/uapi/linux/firewire-cdev.h:107
#: include/uapi/linux/firewire-cdev.h:128
#: include/uapi/linux/firewire-cdev.h:170
#: include/uapi/linux/firewire-cdev.h:194
#: include/uapi/linux/firewire-cdev.h:225
#: include/uapi/linux/firewire-cdev.h:298
#: include/uapi/linux/firewire-cdev.h:358
#: include/uapi/linux/firewire-cdev.h:395
#: include/uapi/linux/firewire-cdev.h:424
#: include/uapi/linux/firewire-cdev.h:446
#: include/uapi/linux/firewire-cdev.h:488
#: include/uapi/linux/firewire-cdev.h:602
#: include/uapi/linux/firewire-cdev.h:636
#: include/uapi/linux/firewire-cdev.h:660
#: include/uapi/linux/firewire-cdev.h:680
#: include/uapi/linux/firewire-cdev.h:725
#: include/uapi/linux/firewire-cdev.h:737
#: include/uapi/linux/firewire-cdev.h:754
#: include/uapi/linux/firewire-cdev.h:791
#: include/uapi/linux/firewire-cdev.h:808
#: include/uapi/linux/firewire-cdev.h:851
#: include/uapi/linux/firewire-cdev.h:875
#: include/uapi/linux/firewire-cdev.h:949
#: include/uapi/linux/firewire-cdev.h:983
#: include/uapi/linux/firewire-cdev.h:1001
#: include/uapi/linux/firewire-cdev.h:1009
#: include/uapi/linux/firewire-cdev.h:1028
#: include/uapi/linux/firewire-cdev.h:1044
#: include/uapi/linux/firewire-cdev.h:1070
#: include/uapi/linux/firewire-cdev.h:1121
#: include/uapi/linux/firewire-cdev.h:1147
#: include/uapi/linux/firewire-cdev.h:1169
msgid "**Definition**::"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:67
#: include/uapi/linux/firewire-cdev.h:90 include/uapi/linux/firewire-cdev.h:117
#: include/uapi/linux/firewire-cdev.h:141
#: include/uapi/linux/firewire-cdev.h:182
#: include/uapi/linux/firewire-cdev.h:210
#: include/uapi/linux/firewire-cdev.h:243
#: include/uapi/linux/firewire-cdev.h:308
#: include/uapi/linux/firewire-cdev.h:366
#: include/uapi/linux/firewire-cdev.h:405
#: include/uapi/linux/firewire-cdev.h:434
#: include/uapi/linux/firewire-cdev.h:457
#: include/uapi/linux/firewire-cdev.h:505
#: include/uapi/linux/firewire-cdev.h:613
#: include/uapi/linux/firewire-cdev.h:647
#: include/uapi/linux/firewire-cdev.h:669
#: include/uapi/linux/firewire-cdev.h:690
#: include/uapi/linux/firewire-cdev.h:731
#: include/uapi/linux/firewire-cdev.h:743
#: include/uapi/linux/firewire-cdev.h:764
#: include/uapi/linux/firewire-cdev.h:797
#: include/uapi/linux/firewire-cdev.h:819
#: include/uapi/linux/firewire-cdev.h:858
#: include/uapi/linux/firewire-cdev.h:882
#: include/uapi/linux/firewire-cdev.h:958
#: include/uapi/linux/firewire-cdev.h:992
#: include/uapi/linux/firewire-cdev.h:1007
#: include/uapi/linux/firewire-cdev.h:1015
#: include/uapi/linux/firewire-cdev.h:1035
#: include/uapi/linux/firewire-cdev.h:1053
#: include/uapi/linux/firewire-cdev.h:1079
#: include/uapi/linux/firewire-cdev.h:1134
#: include/uapi/linux/firewire-cdev.h:1155
#: include/uapi/linux/firewire-cdev.h:1175
msgid "**Members**"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:57
#: include/uapi/linux/firewire-cdev.h:74 include/uapi/linux/firewire-cdev.h:104
#: include/uapi/linux/firewire-cdev.h:125
#: include/uapi/linux/firewire-cdev.h:167
#: include/uapi/linux/firewire-cdev.h:191
#: include/uapi/linux/firewire-cdev.h:222
#: include/uapi/linux/firewire-cdev.h:295
#: include/uapi/linux/firewire-cdev.h:355
#: include/uapi/linux/firewire-cdev.h:392
#: include/uapi/linux/firewire-cdev.h:421
#: include/uapi/linux/firewire-cdev.h:443
#: include/uapi/linux/firewire-cdev.h:636
#: include/uapi/linux/firewire-cdev.h:678
#: include/uapi/linux/firewire-cdev.h:810
#: include/uapi/linux/firewire-cdev.h:1067
#: include/uapi/linux/firewire-cdev.h:1122
#: include/uapi/linux/firewire-cdev.h:1144
#: include/uapi/linux/firewire-cdev.h:1166
msgid "``closure``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:58
msgid "For arbitrary use by userspace"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:58
#: include/uapi/linux/firewire-cdev.h:75 include/uapi/linux/firewire-cdev.h:107
#: include/uapi/linux/firewire-cdev.h:128
#: include/uapi/linux/firewire-cdev.h:168
#: include/uapi/linux/firewire-cdev.h:192
#: include/uapi/linux/firewire-cdev.h:223
#: include/uapi/linux/firewire-cdev.h:297
#: include/uapi/linux/firewire-cdev.h:357
#: include/uapi/linux/firewire-cdev.h:394
#: include/uapi/linux/firewire-cdev.h:423
#: include/uapi/linux/firewire-cdev.h:445
#: include/uapi/linux/firewire-cdev.h:734
#: include/uapi/linux/firewire-cdev.h:805
msgid "``type``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:59
msgid "Discriminates the fw_cdev_event_* types"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:62
#: include/uapi/linux/firewire-cdev.h:85 include/uapi/linux/firewire-cdev.h:114
#: include/uapi/linux/firewire-cdev.h:140
#: include/uapi/linux/firewire-cdev.h:177
#: include/uapi/linux/firewire-cdev.h:205
#: include/uapi/linux/firewire-cdev.h:240
#: include/uapi/linux/firewire-cdev.h:304
#: include/uapi/linux/firewire-cdev.h:362
#: include/uapi/linux/firewire-cdev.h:402
#: include/uapi/linux/firewire-cdev.h:431
#: include/uapi/linux/firewire-cdev.h:460
#: include/uapi/linux/firewire-cdev.h:507
#: include/uapi/linux/firewire-cdev.h:618
#: include/uapi/linux/firewire-cdev.h:642
#: include/uapi/linux/firewire-cdev.h:664
#: include/uapi/linux/firewire-cdev.h:685
#: include/uapi/linux/firewire-cdev.h:738
#: include/uapi/linux/firewire-cdev.h:759
#: include/uapi/linux/firewire-cdev.h:793
#: include/uapi/linux/firewire-cdev.h:816
#: include/uapi/linux/firewire-cdev.h:853
#: include/uapi/linux/firewire-cdev.h:880
#: include/uapi/linux/firewire-cdev.h:953
#: include/uapi/linux/firewire-cdev.h:1010
#: include/uapi/linux/firewire-cdev.h:1030
#: include/uapi/linux/firewire-cdev.h:1048
#: include/uapi/linux/firewire-cdev.h:1075
#: include/uapi/linux/firewire-cdev.h:1129
#: include/uapi/linux/firewire-cdev.h:1150
#: include/uapi/linux/firewire-cdev.h:1170 ../../../driver-api/firewire:34:
#: drivers/firewire/core-device.c:120 ../../../driver-api/firewire:40:
#: drivers/firewire/core-transaction.c:295
#: drivers/firewire/core-transaction.c:416
#: drivers/firewire/core-transaction.c:575
#: drivers/firewire/core-transaction.c:632
#: drivers/firewire/core-transaction.c:860
#: drivers/firewire/core-transaction.c:909 ../../../driver-api/firewire:46:
#: include/linux/firewire.h:551 ../../../driver-api/firewire:48:
#: drivers/firewire/core-iso.c:216 drivers/firewire/core-iso.c:388
msgid "**Description**"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:59
msgid ""
"This struct may be used to access generic members of all fw_cdev_event_* "
"types regardless of the specific type."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:62
msgid ""
"Data passed in the **closure** field for a request will be returned in the "
"corresponding event.  It is big enough to hold a pointer on all platforms. "
"The ioctl used to set **closure** depends on the **type** of event."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:73
msgid "Sent when a bus reset occurred"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:75
msgid ""
"See :c:type:`fw_cdev_event_common`; set by ``FW_CDEV_IOC_GET_INFO`` ioctl"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:76
msgid "See :c:type:`fw_cdev_event_common`; always ``FW_CDEV_EVENT_BUS_RESET``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:76
msgid "``node_id``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:77
msgid "New node ID of this node"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:77
msgid "``local_node_id``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:78
msgid "Node ID of the local node, i.e. of the controller"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:78
msgid "``bm_node_id``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:79
msgid "Node ID of the bus manager"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:79
msgid "``irm_node_id``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:80
msgid "Node ID of the iso resource manager"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:80
msgid "``root_node_id``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:81
msgid "Node ID of the root node"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:81
#: include/uapi/linux/firewire-cdev.h:198
#: include/uapi/linux/firewire-cdev.h:229
#: include/uapi/linux/firewire-cdev.h:638
#: include/uapi/linux/firewire-cdev.h:1124
#: include/uapi/linux/firewire-cdev.h:1146
msgid "``generation``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:82
msgid "New bus generation"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:82
msgid ""
"This event is sent when the bus the device belongs to goes through a bus "
"reset.  It provides information about the new bus configuration, such as new "
"node ID for this device, new root ID, and others."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:86
msgid ""
"If **bm_node_id** is 0xffff right after bus reset it can be reread by an "
"``FW_CDEV_IOC_GET_INFO`` ioctl after bus manager selection was finished. "
"Kernels with ABI version < 4 do not set **bm_node_id**."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:103
#: include/uapi/linux/firewire-cdev.h:124
msgid "Sent when a response packet was received"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:105
#: include/uapi/linux/firewire-cdev.h:126
msgid ""
"See :c:type:`fw_cdev_event_common`; set by ``FW_CDEV_IOC_SEND_REQUEST`` or "
"``FW_CDEV_IOC_SEND_BROADCAST_REQUEST`` or ``FW_CDEV_IOC_SEND_STREAM_PACKET`` "
"ioctl"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:108
#: include/uapi/linux/firewire-cdev.h:129
msgid "See :c:type:`fw_cdev_event_common`; always ``FW_CDEV_EVENT_RESPONSE``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:108
#: include/uapi/linux/firewire-cdev.h:129
#: include/uapi/linux/firewire-cdev.h:424
#: include/uapi/linux/firewire-cdev.h:446
#: include/uapi/linux/firewire-cdev.h:657
msgid "``rcode``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:109
#: include/uapi/linux/firewire-cdev.h:130
msgid "Response code returned by the remote node"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:109
#: include/uapi/linux/firewire-cdev.h:130
#: include/uapi/linux/firewire-cdev.h:172
#: include/uapi/linux/firewire-cdev.h:200
#: include/uapi/linux/firewire-cdev.h:231
#: include/uapi/linux/firewire-cdev.h:425
#: include/uapi/linux/firewire-cdev.h:447
#: include/uapi/linux/firewire-cdev.h:634
#: include/uapi/linux/firewire-cdev.h:658
#: include/uapi/linux/firewire-cdev.h:679
#: include/uapi/linux/firewire-cdev.h:754
#: include/uapi/linux/firewire-cdev.h:1118
msgid "``length``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:110
#: include/uapi/linux/firewire-cdev.h:131
msgid "Data length, i.e. the response's payload size in bytes"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:110
#: include/uapi/linux/firewire-cdev.h:136
#: include/uapi/linux/firewire-cdev.h:173
#: include/uapi/linux/firewire-cdev.h:201
#: include/uapi/linux/firewire-cdev.h:236
#: include/uapi/linux/firewire-cdev.h:426
#: include/uapi/linux/firewire-cdev.h:456
#: include/uapi/linux/firewire-cdev.h:637
#: include/uapi/linux/firewire-cdev.h:659
#: include/uapi/linux/firewire-cdev.h:753
#: include/uapi/linux/firewire-cdev.h:947
#: include/uapi/linux/firewire-cdev.h:1123
#: include/uapi/linux/firewire-cdev.h:1145
msgid "``data``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:111
#: include/uapi/linux/firewire-cdev.h:137
msgid "Payload data, if any"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:111
msgid ""
"This event is sent instead of :c:type:`fw_cdev_event_response` if the kernel "
"or the client implements ABI version <= 5. It has the lack of time stamp "
"field comparing to :c:type:`fw_cdev_event_response2`."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:131
msgid "``request_tstamp``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:132
msgid "The time stamp of isochronous cycle at which the request was sent."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:132
msgid "``response_tstamp``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:133
msgid "The time stamp of isochronous cycle at which the response was sent."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:133
#: include/uapi/linux/firewire-cdev.h:233
msgid "``padding``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:134
#: include/uapi/linux/firewire-cdev.h:234
msgid ""
"Padding to keep the size of structure as multiples of 8 in various "
"architectures since 4 byte alignment is used for 8 byte of object type in "
"System V ABI for i386 architecture."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:137
msgid ""
"This event is sent when the stack receives a response to an outgoing request "
"sent by ``FW_CDEV_IOC_SEND_REQUEST`` ioctl.  The payload data for responses "
"carrying data (read and lock responses) follows immediately and can be "
"accessed through the **data** field."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:142
msgid ""
"The event is also generated after conclusions of transactions that do not "
"involve response packets.  This includes unified write transactions, "
"broadcast write transactions, and transmission of asynchronous stream "
"packets.  **rcode** indicates success or failure of such transmissions."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:147
msgid ""
"The value of **request_tstamp** expresses the isochronous cycle at which the "
"request was sent to initiate the transaction. The value of "
"**response_tstamp** expresses the isochronous cycle at which the response "
"arrived to complete the transaction. Each value is unsigned 16 bit integer "
"containing three low order bits of second field and all 13 bits of cycle "
"field in format of CYCLE_TIMER register."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:166
msgid "Old version of :c:type:`fw_cdev_event_request2`"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:168
#: include/uapi/linux/firewire-cdev.h:192
#: include/uapi/linux/firewire-cdev.h:223
msgid ""
"See :c:type:`fw_cdev_event_common`; set by ``FW_CDEV_IOC_ALLOCATE`` ioctl"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:169
msgid "See :c:type:`fw_cdev_event_common`; always ``FW_CDEV_EVENT_REQUEST``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:169
#: include/uapi/linux/firewire-cdev.h:193
#: include/uapi/linux/firewire-cdev.h:224
#: include/uapi/linux/firewire-cdev.h:633
msgid "``tcode``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:170
#: include/uapi/linux/firewire-cdev.h:194
#: include/uapi/linux/firewire-cdev.h:225
msgid "Transaction code of the incoming request"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:170
#: include/uapi/linux/firewire-cdev.h:194
#: include/uapi/linux/firewire-cdev.h:225
#: include/uapi/linux/firewire-cdev.h:635
#: include/uapi/linux/firewire-cdev.h:677
msgid "``offset``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:171
#: include/uapi/linux/firewire-cdev.h:195
#: include/uapi/linux/firewire-cdev.h:226
msgid "The offset into the 48-bit per-node address space"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:171
#: include/uapi/linux/firewire-cdev.h:199
#: include/uapi/linux/firewire-cdev.h:230
#: include/uapi/linux/firewire-cdev.h:396
#: include/uapi/linux/firewire-cdev.h:660
#: include/uapi/linux/firewire-cdev.h:680
#: include/uapi/linux/firewire-cdev.h:722
#: include/uapi/linux/firewire-cdev.h:755
#: include/uapi/linux/firewire-cdev.h:788
#: include/uapi/linux/firewire-cdev.h:812
#: include/uapi/linux/firewire-cdev.h:849
#: include/uapi/linux/firewire-cdev.h:949
#: include/uapi/linux/firewire-cdev.h:987
#: include/uapi/linux/firewire-cdev.h:998
#: include/uapi/linux/firewire-cdev.h:1006
#: include/uapi/linux/firewire-cdev.h:1070
msgid "``handle``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:172
#: include/uapi/linux/firewire-cdev.h:200
#: include/uapi/linux/firewire-cdev.h:231
msgid "Reference to the kernel-side pending request"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:173
#: include/uapi/linux/firewire-cdev.h:201
#: include/uapi/linux/firewire-cdev.h:232
msgid "Data length, i.e. the request's payload size in bytes"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:174
#: include/uapi/linux/firewire-cdev.h:202
#: include/uapi/linux/firewire-cdev.h:237
msgid "Incoming data, if any"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:174
msgid ""
"This event is sent instead of :c:type:`fw_cdev_event_request2` if the kernel "
"or the client implements ABI version <= 3.  :c:type:`fw_cdev_event_request` "
"lacks essential information; use :c:type:`fw_cdev_event_request2` instead."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:190
#: include/uapi/linux/firewire-cdev.h:221
msgid "Sent on incoming request to an address region"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:193
#: include/uapi/linux/firewire-cdev.h:224
msgid "See :c:type:`fw_cdev_event_common`; always ``FW_CDEV_EVENT_REQUEST2``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:195
#: include/uapi/linux/firewire-cdev.h:226
msgid "``source_node_id``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:196
#: include/uapi/linux/firewire-cdev.h:227
msgid "Sender node ID"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:196
#: include/uapi/linux/firewire-cdev.h:227
msgid "``destination_node_id``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:197
#: include/uapi/linux/firewire-cdev.h:228
msgid "Destination node ID"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:197
#: include/uapi/linux/firewire-cdev.h:228
#: include/uapi/linux/firewire-cdev.h:614
msgid "``card``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:198
#: include/uapi/linux/firewire-cdev.h:229
msgid "The index of the card from which the request came"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:199
#: include/uapi/linux/firewire-cdev.h:230
msgid "Bus generation in which the request is valid"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:202
msgid ""
"This event is sent instead of :c:type:`fw_cdev_event_request3` if the kernel "
"or the client implements ABI version <= 5. It has the lack of time stamp "
"field comparing to :c:type:`fw_cdev_event_request3`."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:232
#: include/uapi/linux/firewire-cdev.h:448
msgid "``tstamp``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:233
msgid "The time stamp of isochronous cycle at which the request arrived."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:237
msgid ""
"This event is sent when the stack receives an incoming request to an address "
"region registered using the ``FW_CDEV_IOC_ALLOCATE`` ioctl.  The request is "
"guaranteed to be completely contained in the specified region.  Userspace is "
"responsible for sending the response by ``FW_CDEV_IOC_SEND_RESPONSE`` ioctl, "
"using the same **handle**."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:243
msgid ""
"The payload data for requests carrying data (write and lock requests) "
"follows immediately and can be accessed through the **data** field."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:246
msgid ""
"Unlike :c:type:`fw_cdev_event_request`, **tcode** of lock requests is one of "
"the firewire-core specific ``TCODE_LOCK_MASK_SWAP``..."
"``TCODE_LOCK_VENDOR_DEPENDENT``, i.e. encodes the extended transaction code."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:250
msgid ""
"**card** may differ from :c:type:`fw_cdev_get_info.card <fw_cdev_get_info>` "
"because requests are received from all cards of the Linux host.  "
"**source_node_id**, **destination_node_id**, and **generation** pertain to "
"that card.  Destination node ID and bus generation may therefore differ from "
"the corresponding fields of the last :c:type:`fw_cdev_event_bus_reset`."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:256
msgid ""
"**destination_node_id** may also differ from the current node ID because of "
"a non-local bus ID part or in case of a broadcast write request.  Note, a "
"client must call an ``FW_CDEV_IOC_SEND_RESPONSE`` ioctl even in case of a "
"broadcast write request; the kernel will then release the kernel-side "
"pending request but will not actually send a response packet."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:262
msgid ""
"In case of a write request to FCP_REQUEST or FCP_RESPONSE, the kernel "
"already sent a write response immediately after the request was received; in "
"this case the client must still call an ``FW_CDEV_IOC_SEND_RESPONSE`` ioctl "
"to release the kernel-side pending request, though another response won't be "
"sent."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:268
msgid ""
"If the client subsequently needs to initiate requests to the sender node of "
"an :c:type:`fw_cdev_event_request3`, it needs to use a device file with "
"matching card index, node ID, and generation for outbound requests."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:272
msgid ""
"**tstamp** is isochronous cycle at which the request arrived. It is 16 bit "
"integer value and the higher 3 bits expresses three low order bits of second "
"field in the format of CYCLE_TIME register and the rest 13 bits expresses "
"cycle field."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:294
msgid "Sent when an iso packet was completed"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:296
#: include/uapi/linux/firewire-cdev.h:356
msgid ""
"See :c:type:`fw_cdev_event_common`; set by ``FW_CDEV_CREATE_ISO_CONTEXT`` "
"ioctl"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:298
msgid ""
"See :c:type:`fw_cdev_event_common`; always ``FW_CDEV_EVENT_ISO_INTERRUPT``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:298
#: include/uapi/linux/firewire-cdev.h:980
msgid "``cycle``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:299
msgid "Cycle counter of the last completed packet"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:299
msgid "``header_length``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:300
msgid "Total length of following headers, in bytes"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:300
#: include/uapi/linux/firewire-cdev.h:876
msgid "``header``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:301
msgid "Stripped headers, if any"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:301
msgid ""
"This event is sent when the controller has completed an :c:type:"
"`fw_cdev_iso_packet` with the ``FW_CDEV_ISO_INTERRUPT`` bit set, when "
"explicitly requested with ``FW_CDEV_IOC_FLUSH_ISO``, or when there have been "
"so many completed packets without the interrupt bit set that the kernel's "
"internal buffer for **header** is about to overflow.  (In the last case, ABI "
"versions < 5 drop header data up to the next interrupt packet.)"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:308
msgid ""
"Isochronous transmit events (context type ``FW_CDEV_ISO_CONTEXT_TRANSMIT``):"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:310
msgid ""
"In version 3 and some implementations of version 2 of the ABI, :c:type:"
"`header_length` is a multiple of 4 and :c:type:`header` contains timestamps "
"of all packets up until the interrupt packet.  The format of the timestamps "
"is as described below for isochronous reception.  In version 1 of the ABI, :"
"c:type:`header_length` was 0."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:315
msgid ""
"Isochronous receive events (context type ``FW_CDEV_ISO_CONTEXT_RECEIVE``):"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:317
msgid ""
"The headers stripped of all packets up until and including the interrupt "
"packet are returned in the **header** field.  The amount of header data per "
"packet is as specified at iso context creation by :c:type:"
"`fw_cdev_create_iso_context.header_size <fw_cdev_create_iso_context>`."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:322
msgid ""
"Hence, _interrupt.header_length / _context.header_size is the number of "
"packets received in this interrupt event.  The client can now iterate "
"through the mmap()'ed DMA buffer according to this number of packets and to "
"the buffer sizes as the client specified in :c:type:`fw_cdev_queue_iso`."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:327
msgid ""
"Since version 2 of this ABI, the portion for each packet in _interrupt."
"header consists of the 1394 isochronous packet header, followed by a "
"timestamp quadlet if :c:type:`fw_cdev_create_iso_context.header_size "
"<fw_cdev_create_iso_context>` > 4, followed by quadlets from the packet "
"payload if :c:type:`fw_cdev_create_iso_context.header_size "
"<fw_cdev_create_iso_context>` > 8."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:332
msgid ""
"Format of 1394 iso packet header:  16 bits data_length, 2 bits tag, 6 bits "
"channel, 4 bits tcode, 4 bits sy, in big endian byte order. data_length is "
"the actual received size of the packet without the four 1394 iso packet "
"header bytes."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:337
msgid ""
"Format of timestamp:  16 bits invalid, 3 bits cycleSeconds, 13 bits "
"cycleCount, in big endian byte order."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:340
msgid ""
"In version 1 of the ABI, no timestamp quadlet was inserted; instead, payload "
"data followed directly after the 1394 is header if header_size > 4. "
"Behaviour of ver. 1 of this ABI is no longer available since ABI ver. 2."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:354
msgid "An iso buffer chunk was completed"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:358
msgid "``FW_CDEV_EVENT_ISO_INTERRUPT_MULTICHANNEL``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:358
msgid "``completed``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:359
msgid "Offset into the receive buffer; data before this offset is valid"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:359
msgid ""
"This event is sent in multichannel contexts (context type "
"``FW_CDEV_ISO_CONTEXT_RECEIVE_MULTICHANNEL``) for :c:type:"
"`fw_cdev_iso_packet` buffer chunks that have been completely filled and that "
"have the ``FW_CDEV_ISO_INTERRUPT`` bit set, or when explicitly requested "
"with ``FW_CDEV_IOC_FLUSH_ISO``."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:365
msgid "The buffer is continuously filled with the following data, per packet:"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:366
msgid ""
"the 1394 iso packet header as described at :c:type:"
"`fw_cdev_event_iso_interrupt`, but in little endian byte order,"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:368
msgid ""
"packet payload (as many bytes as specified in the data_length field of the "
"1394 iso packet header) in big endian byte order,"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:370
msgid "0...3 padding bytes as needed to align the following trailer quadlet,"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:371
msgid ""
"trailer quadlet, containing the reception timestamp as described at :c:type:"
"`fw_cdev_event_iso_interrupt`, but in little endian byte order."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:374
msgid ""
"Hence the per-packet size is data_length (rounded up to a multiple of 4) + "
"8. When processing the data, stop before a packet that would cross the "
"**completed** offset."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:378
msgid ""
"A packet near the end of a buffer chunk will typically spill over into the "
"next queued buffer chunk.  It is the responsibility of the client to check "
"for this condition, assemble a broken-up packet from its parts, and not to "
"re-queue any buffer chunks in which as yet unread packet parts reside."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:391
msgid "Iso resources were allocated or freed"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:393
msgid ""
"See :c:type:`fw_cdev_event_common`; set "
"by``FW_CDEV_IOC_(DE)ALLOCATE_ISO_RESOURCE(_ONCE)`` ioctl"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:395
msgid ""
"``FW_CDEV_EVENT_ISO_RESOURCE_ALLOCATED`` or "
"``FW_CDEV_EVENT_ISO_RESOURCE_DEALLOCATED``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:397
msgid "Reference by which an allocated resource can be deallocated"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:397
#: include/uapi/linux/firewire-cdev.h:808
#: include/uapi/linux/firewire-cdev.h:1120
msgid "``channel``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:398
msgid "Isochronous channel which was (de)allocated, if any"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:398
#: include/uapi/linux/firewire-cdev.h:1069
msgid "``bandwidth``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:399
msgid "Bandwidth allocation units which were (de)allocated, if any"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:399
msgid ""
"An ``FW_CDEV_EVENT_ISO_RESOURCE_ALLOCATED`` event is sent after an "
"isochronous resource was allocated at the IRM.  The client has to check "
"**channel** and **bandwidth** for whether the allocation actually succeeded."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:403
msgid ""
"An ``FW_CDEV_EVENT_ISO_RESOURCE_DEALLOCATED`` event is sent after an "
"isochronous resource was deallocated at the IRM.  It is also sent when "
"automatic reallocation after a bus reset failed."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:407
msgid ""
"**channel** is <0 if no channel was (de)allocated or if reallocation failed. "
"**bandwidth** is 0 if no bandwidth was (de)allocated or if reallocation "
"failed."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:420
msgid "A PHY packet was transmitted or received"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:422
#: include/uapi/linux/firewire-cdev.h:444
msgid ""
"See :c:type:`fw_cdev_event_common`; set by ``FW_CDEV_IOC_SEND_PHY_PACKET`` "
"or ``FW_CDEV_IOC_RECEIVE_PHY_PACKETS`` ioctl"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:424
msgid "``FW_CDEV_EVENT_PHY_PACKET_SENT`` or %..._RECEIVED"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:425
#: include/uapi/linux/firewire-cdev.h:447
msgid "``RCODE_``..., indicates success or failure of transmission"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:426
#: include/uapi/linux/firewire-cdev.h:448
msgid "Data length in bytes"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:427
msgid ""
"Incoming data for ``FW_CDEV_IOC_RECEIVE_PHY_PACKETS``. For "
"``FW_CDEV_IOC_SEND_PHY_PACKET`` the field has the same data in the request, "
"thus the length of 8 bytes."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:428
msgid ""
"This event is sent instead of :c:type:`fw_cdev_event_phy_packet2` if the "
"kernel or the client implements ABI version <= 5. It has the lack of time "
"stamp field comparing to :c:type:`fw_cdev_event_phy_packet2`."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:442
msgid "A PHY packet was transmitted or received with time stamp."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:446
msgid ""
"``FW_CDEV_EVENT_PHY_PACKET_SENT2`` or ``FW_CDEV_EVENT_PHY_PACKET_RECEIVED2``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:449
msgid ""
"For ``FW_CDEV_EVENT_PHY_PACKET_RECEIVED2``, the time stamp of isochronous "
"cycle at which the packet arrived. For ``FW_CDEV_EVENT_PHY_PACKET_SENT2`` "
"and non-ping packet, the time stamp of isochronous cycle at which the packet "
"was sent. For ping packet, the tick count for round-trip time measured by "
"1394 OHCI controller."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:457
msgid "Incoming data"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:452
msgid ""
"The time stamp of isochronous cycle at which either the response was sent "
"for ``FW_CDEV_EVENT_PHY_PACKET_SENT2`` or the request arrived for "
"``FW_CDEV_EVENT_PHY_PACKET_RECEIVED2``."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:456
msgid ""
"If **type** is ``FW_CDEV_EVENT_PHY_PACKET_SENT2``, **length** is 8 and "
"**data** consists of the two PHY packet quadlets to be sent, in host byte "
"order,"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:459
msgid ""
"If **type** is ``FW_CDEV_EVENT_PHY_PACKET_RECEIVED2``, **length** is 8 and "
"**data** consists of the two PHY packet quadlets, in host byte order."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:462
msgid ""
"For ``FW_CDEV_EVENT_PHY_PACKET_RECEIVED2``, the **tstamp** is the "
"isochronous cycle at which the packet arrived. It is 16 bit integer value "
"and the higher 3 bits expresses three low order bits of second field and the "
"rest 13 bits expresses cycle field in the format of CYCLE_TIME register."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:466
msgid ""
"For ``FW_CDEV_EVENT_PHY_PACKET_SENT2``, the **tstamp** has different "
"meanings whether to sent the packet for ping or not. If it's not for ping, "
"the **tstamp** is the isochronous cycle at which the packet was sent, and "
"use the same format as the case of ``FW_CDEV_EVENT_PHY_PACKET_SENT2``. If "
"it's for ping, the **tstamp** is for round-trip time measured by 1394 OHCI "
"controller with 42.195 MHz resolution."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:484
msgid "Convenience union of fw_cdev_event_* types"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:485
msgid "``common``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:486
msgid "Valid for all types"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:486
#: include/uapi/linux/firewire-cdev.h:610
msgid "``bus_reset``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:487
msgid "Valid if **common.type** == ``FW_CDEV_EVENT_BUS_RESET``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:487
msgid "``response``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:488
msgid "Valid if **common.type** == ``FW_CDEV_EVENT_RESPONSE``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:488
msgid "``request``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:489
msgid "Valid if **common.type** == ``FW_CDEV_EVENT_REQUEST``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:489
msgid "``request2``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:490
msgid "Valid if **common.type** == ``FW_CDEV_EVENT_REQUEST2``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:490
msgid "``iso_interrupt``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:491
msgid "Valid if **common.type** == ``FW_CDEV_EVENT_ISO_INTERRUPT``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:491
msgid "``iso_interrupt_mc``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:492
msgid ""
"Valid if **common.type** == ``FW_CDEV_EVENT_ISO_INTERRUPT_MULTICHANNEL``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:493
msgid "``iso_resource``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:494
msgid ""
"Valid if **common.type** == ``FW_CDEV_EVENT_ISO_RESOURCE_ALLOCATED`` or "
"``FW_CDEV_EVENT_ISO_RESOURCE_DEALLOCATED``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:496
msgid "``phy_packet``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:497
msgid ""
"Valid if **common.type** == ``FW_CDEV_EVENT_PHY_PACKET_SENT`` or "
"``FW_CDEV_EVENT_PHY_PACKET_RECEIVED``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:500
msgid "``request3``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:501
msgid "Valid if **common.type** == ``FW_CDEV_EVENT_REQUEST3``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:501
msgid "``response2``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:502
msgid "Valid if **common.type** == ``FW_CDEV_EVENT_RESPONSE2``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:502
msgid "``phy_packet2``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:503
msgid ""
"Valid if **common.type** == ``FW_CDEV_EVENT_PHY_PACKET_SENT2`` or "
"``FW_CDEV_EVENT_PHY_PACKET_RECEIVED2``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:504
msgid ""
"Convenience union for userspace use.  Events could be read(2) into an "
"appropriately aligned char buffer and then cast to this union for further "
"processing.  Note that for a request, response or iso_interrupt event, the "
"data[] or header[] may make the size of the full event larger than "
"sizeof(union fw_cdev_event).  Also note that if you attempt to read(2) an "
"event into a buffer that is not large enough for it, the data that does not "
"fit will be discarded so that the next read(2) will return a new event."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:598
msgid "General purpose information ioctl"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:599
msgid "``version``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:600
msgid ""
"The version field is just a running serial number.  Both an input parameter "
"(ABI version implemented by the client) and output parameter (ABI version "
"implemented by the kernel). A client shall fill in the ABI **version** for "
"which the client was implemented.  This is necessary for forward "
"compatibility."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:604
msgid "``rom_length``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:605
msgid ""
"If **rom** is non-zero, up to **rom_length** bytes of Configuration ROM will "
"be copied into that user space address.  In either case, **rom_length** is "
"updated with the actual length of the Configuration ROM."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:608
msgid "``rom``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:609
msgid ""
"If non-zero, address of a buffer to be filled by a copy of the device's "
"Configuration ROM"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:611
msgid ""
"If non-zero, address of a buffer to be filled by a :c:type:`struct "
"fw_cdev_event_bus_reset <fw_cdev_event_bus_reset>` with the current state of "
"the bus.  This does not cause a bus reset to happen."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:613
msgid "``bus_reset_closure``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:614
msgid "Value of :c:type:`closure` in this and subsequent bus reset events"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:615
msgid "The index of the card this device belongs to"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:615
msgid ""
"The ``FW_CDEV_IOC_GET_INFO`` ioctl is usually the very first one which a "
"client performs right after it opened a /dev/fw* file."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:618
msgid ""
"As a side effect, reception of ``FW_CDEV_EVENT_BUS_RESET`` events to be "
"read(2) is started by this ioctl."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:632
msgid "Send an asynchronous request packet"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:634
msgid "Transaction code of the request"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:635
#: include/uapi/linux/firewire-cdev.h:659
#: include/uapi/linux/firewire-cdev.h:1119
msgid "Length of outgoing payload, in bytes"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:636
msgid "48-bit offset at destination node"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:637
#: include/uapi/linux/firewire-cdev.h:1123
msgid "Passed back to userspace in the response event"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:638
#: include/uapi/linux/firewire-cdev.h:660
#: include/uapi/linux/firewire-cdev.h:1124
msgid "Userspace pointer to payload"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:639
#: include/uapi/linux/firewire-cdev.h:1125
#: include/uapi/linux/firewire-cdev.h:1147
msgid "The bus generation where packet is valid"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:639
msgid ""
"Send a request to the device.  This ioctl implements all outgoing requests. "
"Both quadlet and block request specify the payload as a pointer to the data "
"in the **data** field. Once the transaction completes, the kernel writes "
"either :c:type:`fw_cdev_event_response` event or :c:type:"
"`fw_cdev_event_response` event back. The **closure** field is passed back to "
"user space in the response event."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:656
msgid "Send an asynchronous response packet"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:658
msgid "Response code as determined by the userspace handler"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:661
msgid "The handle from the :c:type:`fw_cdev_event_request`"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:661
msgid ""
"Send a response to an incoming request.  By setting up an address range "
"using the ``FW_CDEV_IOC_ALLOCATE`` ioctl, userspace can listen for incoming "
"requests.  An incoming request will generate an ``FW_CDEV_EVENT_REQUEST``, "
"and userspace must send a reply using this ioctl.  The event has a handle to "
"the kernel-side pending transaction, which should be used with this ioctl."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:676
msgid "Allocate a CSR in an address range"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:678
msgid "Start offset of the address range"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:679
msgid "To be passed back to userspace in request events"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:680
msgid "Length of the CSR, in bytes"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:681
msgid "Handle to the allocation, written by the kernel"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:681
msgid "``region_end``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:682
msgid "First address above the address range (added in ABI v4, 2.6.36)"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:682
msgid ""
"Allocate an address range in the 48-bit address space on the local node (the "
"controller).  This allows userspace to listen for requests with an offset "
"within that address range.  Every time when the kernel receives a request "
"within the range, an :c:type:`fw_cdev_event_request2` event will be emitted. "
"(If the kernel or the client implements ABI version <= 3, an :c:type:"
"`fw_cdev_event_request` will be generated instead.)"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:689
msgid ""
"The **closure** field is passed back to userspace in these request events. "
"The **handle** field is an out parameter, returning a handle to the "
"allocated range to be used for later deallocation of the range."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:693
msgid ""
"The address range is allocated on all local nodes.  The address allocation "
"is exclusive except for the FCP command and response registers.  If an "
"exclusive address region is already in use, the ioctl fails with errno set "
"to ``EBUSY``."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:698
msgid ""
"If kernel and client implement ABI version >= 4, the kernel looks up a free "
"spot of size **length** inside [**offset**..**region_end**) and, if found, "
"writes the start address of the new CSR back in **offset**.  I.e. **offset** "
"is an in and out parameter.  If this automatic placement of a CSR in a "
"bigger address range is not desired, the client simply needs to set "
"**region_end** = **offset** + **length**."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:705
msgid ""
"If the kernel or the client implements ABI version <= 3, **region_end** is "
"ignored and effectively assumed to be **offset** + **length**."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:708
msgid ""
"**region_end** is only present in a kernel header >= 2.6.36.  If necessary, "
"this can for example be tested by #ifdef FW_CDEV_EVENT_REQUEST2."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:721
msgid "Free a CSR address range or isochronous resource"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:723
msgid ""
"Handle to the address range or iso resource, as returned by the kernel when "
"the range or resource was allocated"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:733
msgid "Initiate a bus reset"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:735
msgid "``FW_CDEV_SHORT_RESET`` or ``FW_CDEV_LONG_RESET``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:735
msgid ""
"Initiate a bus reset for the bus this device is on.  The bus reset can be "
"either the original (long) bus reset or the arbitrated (short) bus reset "
"introduced in 1394a-2000."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:739
msgid ""
"The ioctl returns immediately.  A subsequent :c:type:"
"`fw_cdev_event_bus_reset` indicates when the reset actually happened.  Since "
"ABI v4, this may be considerably later than the ioctl because the kernel "
"ensures a grace period between subsequent bus resets as per IEEE 1394 bus "
"management specification."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:750
msgid "Add contents to the local node's config ROM"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:751
msgid "``immediate``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:752
msgid "If non-zero, immediate key to insert before pointer"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:752
msgid "``key``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:753
msgid "Upper 8 bits of root directory pointer"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:754
msgid "Userspace pointer to contents of descriptor block"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:755
msgid "Length of descriptor block data, in quadlets"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:756
msgid "Handle to the descriptor, written by the kernel"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:756
msgid ""
"Add a descriptor block and optionally a preceding immediate key to the local "
"node's Configuration ROM."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:759
msgid ""
"The **key** field specifies the upper 8 bits of the descriptor root "
"directory pointer and the **data** and **length** fields specify the "
"contents. The **key** should be of the form 0xXX000000. The offset part of "
"the root directory entry will be filled in by the kernel."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:764
msgid ""
"If not 0, the **immediate** field specifies an immediate key which will be "
"inserted before the root directory pointer."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:767
msgid ""
"**immediate**, **key**, and **data** array elements are CPU-endian quadlets."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:769
msgid ""
"If successful, the kernel adds the descriptor and writes back a **handle** "
"to the kernel-side object to be used for later removal of the descriptor "
"block and immediate key.  The kernel will also generate a bus reset to "
"signal the change of the Configuration ROM to other nodes."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:774
msgid ""
"This ioctl affects the Configuration ROMs of all local nodes. The ioctl only "
"succeeds on device files which represent a local node."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:787
msgid "Remove contents from the Configuration ROM"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:789
msgid ""
"Handle to the descriptor, as returned by the kernel when the descriptor was "
"added"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:790
msgid ""
"Remove a descriptor block and accompanying immediate key from the local "
"nodes' Configuration ROMs.  The kernel will also generate a bus reset to "
"signal the change of the Configuration ROM to other nodes."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:804
msgid "Create a context for isochronous I/O"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:806
msgid ""
"``FW_CDEV_ISO_CONTEXT_TRANSMIT`` or ``FW_CDEV_ISO_CONTEXT_RECEIVE`` or "
"``FW_CDEV_ISO_CONTEXT_RECEIVE_MULTICHANNEL``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:807
msgid "``header_size``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:808
msgid "Header size to strip in single-channel reception"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:809
msgid "Channel to bind to in single-channel reception or transmission"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:809
#: include/uapi/linux/firewire-cdev.h:1125
msgid "``speed``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:810
msgid "Transmission speed"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:811
msgid ""
"To be returned in :c:type:`fw_cdev_event_iso_interrupt` or :c:type:"
"`fw_cdev_event_iso_interrupt_multichannel`"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:813
msgid "Handle to context, written back by kernel"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:813
msgid ""
"Prior to sending or receiving isochronous I/O, a context must be created. "
"The context records information about the transmit or receive configuration "
"and typically maps to an underlying hardware resource.  A context is set up "
"for either sending or receiving.  It is bound to a specific isochronous "
"**channel**."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:819
msgid ""
"In case of multichannel reception, **header_size** and **channel** are "
"ignored and the channels are selected by ``FW_CDEV_IOC_SET_ISO_CHANNELS``."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:822
msgid ""
"For ``FW_CDEV_ISO_CONTEXT_RECEIVE`` contexts, **header_size** must be at "
"least 4 and must be a multiple of 4.  It is ignored in other context types."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:825
msgid "**speed** is ignored in receive context types."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:827
msgid ""
"If a context was successfully created, the kernel writes back a handle to "
"the context, which must be passed in for subsequent operations on that "
"context."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:830
msgid ""
"Limitations: No more than one iso context can be created per fd. The total "
"number of contexts that all userspace and kernelspace drivers can create on "
"a card at a time is a hardware limit, typically 4 or 8 contexts per "
"direction, and of them at most one multichannel receive context."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:847
msgid "Select channels in multichannel reception"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:848
#: include/uapi/linux/firewire-cdev.h:1068
msgid "``channels``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:849
msgid "Bitmask of channels to listen to"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:850
msgid "Handle of the mutichannel receive context"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:850
msgid ""
"**channels** is the bitwise or of 1ULL << n for each channel n to listen to."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:852
msgid ""
"The ioctl fails with errno ``EBUSY`` if there is already another receive "
"context on a channel in **channels**.  In that case, the bitmask of all "
"unoccupied channels is returned in **channels**."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:871
msgid "Isochronous packet"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:872
msgid "``control``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:873
msgid ""
"Contains the header length (8 uppermost bits), the sy field (4 bits), the "
"tag field (2 bits), a sync flag or a skip flag (1 bit), an interrupt flag (1 "
"bit), and the payload length (16 lowermost bits)"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:877
msgid "Header and payload in case of a transmit context."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:877
msgid ""
":c:type:`struct fw_cdev_iso_packet <fw_cdev_iso_packet>` is used to describe "
"isochronous packet queues. Use the FW_CDEV_ISO_* macros to fill in "
"**control**. The **header** array is empty in case of receive contexts."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:881
msgid "Context type ``FW_CDEV_ISO_CONTEXT_TRANSMIT``:"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:883
msgid ""
"**control.HEADER_LENGTH** must be a multiple of 4.  It specifies the numbers "
"of bytes in **header** that will be prepended to the packet's payload.  "
"These bytes are copied into the kernel and will not be accessed after the "
"ioctl has returned."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:888
msgid ""
"The **control.SY** and TAG fields are copied to the iso packet header.  "
"These fields are specified by IEEE 1394a and IEC 61883-1."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:891
msgid ""
"The **control.SKIP** flag specifies that no packet is to be sent in a frame. "
"When using this, all other fields except **control.INTERRUPT** must be zero."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:894
msgid ""
"When a packet with the **control.INTERRUPT** flag set has been completed, "
"an :c:type:`fw_cdev_event_iso_interrupt` event will be sent."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:897
msgid "Context type ``FW_CDEV_ISO_CONTEXT_RECEIVE``:"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:899
msgid ""
"**control.HEADER_LENGTH** must be a multiple of the context's header_size. "
"If the HEADER_LENGTH is larger than the context's header_size, multiple "
"packets are queued for this entry."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:903
msgid "The **control.SY** and TAG fields are ignored."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:905
msgid ""
"If the **control.SYNC** flag is set, the context drops all packets until a "
"packet with a sy field is received which matches :c:type:`fw_cdev_start_iso."
"sync <fw_cdev_start_iso>`."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:908
msgid ""
"**control.PAYLOAD_LENGTH** defines how many payload bytes can be received "
"for one packet (in addition to payload quadlets that have been defined as "
"headers and are stripped and returned in the :c:type:"
"`fw_cdev_event_iso_interrupt` structure). If more bytes are received, the "
"additional bytes are dropped.  If less bytes are received, the remaining "
"bytes in this part of the payload buffer will not be written to, not even by "
"the next packet.  I.e., packets received in consecutive frames will not "
"necessarily be consecutive in memory.  If an entry has queued multiple "
"packets, the PAYLOAD_LENGTH is divided equally among them."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:918
msgid ""
"When a packet with the **control.INTERRUPT** flag set has been completed, "
"an :c:type:`fw_cdev_event_iso_interrupt` event will be sent.  An entry that "
"has queued multiple receive packets is completed when its last packet is "
"completed."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:922
msgid "Context type ``FW_CDEV_ISO_CONTEXT_RECEIVE_MULTICHANNEL``:"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:924
msgid ""
"Here, :c:type:`fw_cdev_iso_packet` would be more aptly named "
"_iso_buffer_chunk since it specifies a chunk of the mmap()'ed buffer, while "
"the number and alignment of packets to be placed into the buffer chunk is "
"not known beforehand."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:928
msgid ""
"**control.PAYLOAD_LENGTH** is the size of the buffer chunk and specifies "
"room for header, payload, padding, and trailer bytes of one or more packets. "
"It must be a multiple of 4."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:932
msgid ""
"**control.HEADER_LENGTH**, TAG and SY are ignored.  SYNC is treated as "
"described for single-channel reception."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:935
msgid ""
"When a buffer chunk with the **control.INTERRUPT** flag set has been filled "
"entirely, an :c:type:`fw_cdev_event_iso_interrupt_mc` event will be sent."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:945
msgid "Queue isochronous packets for I/O"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:946
msgid "``packets``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:947
msgid "Userspace pointer to an array of :c:type:`fw_cdev_iso_packet`"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:948
msgid "Pointer into mmap()'ed payload buffer"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:948
msgid "``size``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:949
msgid "Size of the **packets** array, in bytes"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:950
msgid "Isochronous context handle"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:950
msgid ""
"Queue a number of isochronous packets for reception or transmission. This "
"ioctl takes a pointer to an array of :c:type:`fw_cdev_iso_packet` structs, "
"which describe how to transmit from or receive into a contiguous region of a "
"mmap()'ed payload buffer.  As part of transmit packet descriptors, a series "
"of headers can be supplied, which will be prepended to the payload during "
"DMA."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:957
msgid ""
"The kernel may or may not queue all packets, but will write back updated "
"values of the **packets**, **data** and **size** fields, so the ioctl can be "
"resubmitted easily."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:961
msgid ""
"In case of a multichannel receive context, **data** must be quadlet-aligned "
"relative to the buffer start."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:979
msgid "Start an isochronous transmission or reception"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:981
msgid ""
"Cycle in which to start I/O.  If **cycle** is greater than or equal to 0, "
"the I/O will start on that cycle."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:982
msgid "``sync``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:983
msgid ""
"Determines the value to wait for receive packets that have the "
"``FW_CDEV_ISO_SYNC`` bit set"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:984
msgid "``tags``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:985
msgid ""
"Tag filter bit mask.  Only valid for isochronous reception. Determines the "
"tag values for which packets will be accepted. Use "
"FW_CDEV_ISO_CONTEXT_MATCH_* macros to set **tags**."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:988
msgid "Isochronous context handle within which to transmit or receive"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:997
msgid "Stop an isochronous transmission or reception"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:999
msgid "Handle of isochronous context to stop"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1005
msgid "flush completed iso packets"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1007
msgid "handle of isochronous context to flush"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1007
msgid ""
"For ``FW_CDEV_ISO_CONTEXT_TRANSMIT`` or ``FW_CDEV_ISO_CONTEXT_RECEIVE`` "
"contexts, report any completed packets."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1010
msgid ""
"For ``FW_CDEV_ISO_CONTEXT_RECEIVE_MULTICHANNEL`` contexts, report the "
"current offset in the receive buffer, if it has changed; this is typically "
"in the middle of some buffer chunk."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1014
msgid ""
"Any ``FW_CDEV_EVENT_ISO_INTERRUPT`` or "
"``FW_CDEV_EVENT_ISO_INTERRUPT_MULTICHANNEL`` events generated by this ioctl "
"are sent synchronously, i.e., are available for reading from the file "
"descriptor when this ioctl returns."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1024
#: include/uapi/linux/firewire-cdev.h:1040
msgid "read cycle timer register"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1025
msgid "``local_time``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1026
msgid "system time, in microseconds since the Epoch"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1026
#: include/uapi/linux/firewire-cdev.h:1044
msgid "``cycle_timer``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1027
#: include/uapi/linux/firewire-cdev.h:1045
msgid "Cycle Time register contents"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1027
msgid ""
"Same as ``FW_CDEV_IOC_GET_CYCLE_TIMER2``, but fixed to use "
"``CLOCK_REALTIME`` and only with microseconds resolution."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1030
msgid ""
"In version 1 and 2 of the ABI, this ioctl returned unreliable (non- "
"monotonic) **cycle_timer** values on certain controllers."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1041
msgid "``tv_sec``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1042
msgid "system time, seconds"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1042
msgid "``tv_nsec``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1043
msgid "system time, sub-seconds part in nanoseconds"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1043
msgid "``clk_id``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1044
msgid "input parameter, clock from which to get the system time"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1045
msgid ""
"The ``FW_CDEV_IOC_GET_CYCLE_TIMER2`` ioctl reads the isochronous cycle timer "
"and also the system clock.  This allows to correlate reception time of "
"isochronous packets with system time."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1049
msgid ""
"**clk_id** lets you choose a clock like with POSIX' clock_gettime function. "
"Supported **clk_id** values are POSIX' ``CLOCK_REALTIME`` and "
"``CLOCK_MONOTONIC`` and Linux' ``CLOCK_MONOTONIC_RAW``."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1053
msgid ""
"**cycle_timer** consists of 7 bits cycleSeconds, 13 bits cycleCount, and 12 "
"bits cycleOffset, in host byte order.  Cf. the Cycle Time register per IEEE "
"1394 or Isochronous Cycle Timer register per OHCI-1394."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1066
msgid "(De)allocate a channel or bandwidth"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1068
msgid "Passed back to userspace in corresponding iso resource events"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1069
msgid "Isochronous channels of which one is to be (de)allocated"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1070
msgid "Isochronous bandwidth units to be (de)allocated"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1071
msgid ""
"Handle to the allocation, written by the kernel (only valid in case of "
"``FW_CDEV_IOC_ALLOCATE_ISO_RESOURCE`` ioctls)"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1072
msgid ""
"The ``FW_CDEV_IOC_ALLOCATE_ISO_RESOURCE`` ioctl initiates allocation of an "
"isochronous channel and/or of isochronous bandwidth at the isochronous "
"resource manager (IRM).  Only one of the channels specified in **channels** "
"is allocated.  An ``FW_CDEV_EVENT_ISO_RESOURCE_ALLOCATED`` is sent after "
"communication with the IRM, indicating success or failure in the event data. "
"The kernel will automatically reallocate the resources after bus resets. "
"Should a reallocation fail, an ``FW_CDEV_EVENT_ISO_RESOURCE_DEALLOCATED`` "
"event will be sent.  The kernel will also automatically deallocate the "
"resources when the file descriptor is closed."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1082
msgid ""
"The ``FW_CDEV_IOC_DEALLOCATE_ISO_RESOURCE`` ioctl can be used to initiate "
"deallocation of resources which were allocated as described above. An "
"``FW_CDEV_EVENT_ISO_RESOURCE_DEALLOCATED`` event concludes this operation."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1086
msgid ""
"The ``FW_CDEV_IOC_ALLOCATE_ISO_RESOURCE_ONCE`` ioctl is a variant of "
"allocation without automatic re- or deallocation. An "
"``FW_CDEV_EVENT_ISO_RESOURCE_ALLOCATED`` event concludes this operation, "
"indicating success or failure in its data."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1091
msgid ""
"The ``FW_CDEV_IOC_DEALLOCATE_ISO_RESOURCE_ONCE`` ioctl works like "
"``FW_CDEV_IOC_ALLOCATE_ISO_RESOURCE_ONCE`` except that resources are freed "
"instead of allocated. An ``FW_CDEV_EVENT_ISO_RESOURCE_DEALLOCATED`` event "
"concludes this operation."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1096
msgid ""
"To summarize, ``FW_CDEV_IOC_ALLOCATE_ISO_RESOURCE`` allocates iso resources "
"for the lifetime of the fd or **handle**. In contrast, "
"``FW_CDEV_IOC_ALLOCATE_ISO_RESOURCE_ONCE`` allocates iso resources for the "
"duration of a bus generation."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1101
msgid ""
"**channels** is a host-endian bitfield with the least significant bit "
"representing channel 0 and the most significant bit representing channel 63: "
"1ULL << c for each channel c that is a candidate for (de)allocation."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1105
msgid ""
"**bandwidth** is expressed in bandwidth allocation units, i.e. the time to "
"send one quadlet of data (payload or header data) at speed S1600."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1117
msgid "send an asynchronous stream packet"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1119
msgid "``tag``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1120
msgid "Data format tag"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1121
msgid "Isochronous channel to transmit to"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1121
msgid "``sy``"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1122
msgid "Synchronization code"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1126
msgid "Speed to transmit at"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1126
msgid ""
"The ``FW_CDEV_IOC_SEND_STREAM_PACKET`` ioctl sends an asynchronous stream "
"packet to every device which is listening to the specified channel. The "
"kernel writes either :c:type:`fw_cdev_event_response` event or :c:type:"
"`fw_cdev_event_response2` event which indicates success or failure of the "
"transmission."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1143
msgid "send a PHY packet"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1145
msgid "Passed back to userspace in the PHY-packet-sent event"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1146
msgid "First and second quadlet of the PHY packet"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1147
msgid ""
"The ``FW_CDEV_IOC_SEND_PHY_PACKET`` ioctl sends a PHY packet to all nodes on "
"the same card as this device.  After transmission, either "
"``FW_CDEV_EVENT_PHY_PACKET_SENT`` event or ``FW_CDEV_EVENT_PHY_PACKET_SENT`` "
"event is generated."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1151
msgid ""
"The payload **data**\\[\\] shall be specified in host byte order.  Usually, "
"**data**\\[1\\] needs to be the bitwise inverse of **data**\\[0\\].  "
"VersaPHY packets are an exception to this rule."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1155
#: include/uapi/linux/firewire-cdev.h:1171
msgid ""
"The ioctl is only permitted on device files which represent a local node."
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1165
msgid "start reception of PHY packets"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1167
msgid "Passed back to userspace in phy packet events"
msgstr ""

#: ../../../driver-api/firewire:25: include/uapi/linux/firewire-cdev.h:1167
msgid ""
"This ioctl activates issuing of either ``FW_CDEV_EVENT_PHY_PACKET_RECEIVED`` "
"or ``FW_CDEV_EVENT_PHY_PACKET_RECEIVED2`` due to incoming PHY packets from "
"any node on the same bus as the device."
msgstr ""

#: ../../../driver-api/firewire.rst:29
msgid "Firewire device probing and sysfs interfaces"
msgstr ""

#: ../../../driver-api/firewire:34: drivers/firewire/core-device.c:114
msgid "reads a string from the configuration ROM"
msgstr ""

#: ../../../driver-api/firewire:34: drivers/firewire/core-device.c:118
#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:283
#: drivers/firewire/core-transaction.c:410
#: drivers/firewire/core-transaction.c:575
#: drivers/firewire/core-transaction.c:633
#: drivers/firewire/core-transaction.c:859
#: drivers/firewire/core-transaction.c:900
#: drivers/firewire/core-transaction.c:910
#: drivers/firewire/core-transaction.c:1156 ../../../driver-api/firewire:46:
#: include/linux/firewire.h:552 ../../../driver-api/firewire:48:
#: drivers/firewire/core-iso.c:217 drivers/firewire/core-iso.c:384
msgid "**Parameters**"
msgstr ""

#: ../../../driver-api/firewire:34: drivers/firewire/core-device.c:120
msgid "``const u32 *directory``"
msgstr ""

#: ../../../driver-api/firewire:34: drivers/firewire/core-device.c:115
msgid "e.g. root directory or unit directory"
msgstr ""

#: ../../../driver-api/firewire:34: drivers/firewire/core-device.c:117
msgid "``int key``"
msgstr ""

#: ../../../driver-api/firewire:34: drivers/firewire/core-device.c:116
msgid "the key of the preceding directory entry"
msgstr ""

#: ../../../driver-api/firewire:34: drivers/firewire/core-device.c:118
msgid "``char *buf``"
msgstr ""

#: ../../../driver-api/firewire:34: drivers/firewire/core-device.c:117
msgid "where to put the string"
msgstr ""

#: ../../../driver-api/firewire:34: drivers/firewire/core-device.c:119
msgid "``size_t size``"
msgstr ""

#: ../../../driver-api/firewire:34: drivers/firewire/core-device.c:118
msgid "size of **buf**, in bytes"
msgstr ""

#: ../../../driver-api/firewire:34: drivers/firewire/core-device.c:119
msgid ""
"The string is taken from a minimal ASCII text descriptor leaf just after the "
"entry with the **key**. The string is zero-terminated. An overlong string is "
"silently truncated such that it and the zero byte fit into **size**."
msgstr ""

#: ../../../driver-api/firewire:34: drivers/firewire/core-device.c:123
msgid "Returns strlen(buf) or a negative error code."
msgstr ""

#: ../../../driver-api/firewire.rst:38
msgid "Firewire core transaction interfaces"
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:279
msgid ""
"submit a request packet for transmission to generate callback for response "
"subaction with or without time stamp."
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:285
#: drivers/firewire/core-transaction.c:412
#: drivers/firewire/core-transaction.c:861 ../../../driver-api/firewire:48:
#: drivers/firewire/core-iso.c:386
msgid "``struct fw_card *card``"
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:281
msgid "interface to send the request at"
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:283
msgid "``struct fw_transaction *t``"
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:282
msgid "transaction instance to which the request belongs"
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:284
#: drivers/firewire/core-transaction.c:409
msgid "``int tcode``"
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:283
#: drivers/firewire/core-transaction.c:408
msgid "transaction code"
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:285
#: drivers/firewire/core-transaction.c:410
msgid "``int destination_id``"
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:284
#: drivers/firewire/core-transaction.c:409
msgid "destination node ID, consisting of bus_ID and phy_ID"
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:286
#: drivers/firewire/core-transaction.c:411 ../../../driver-api/firewire:48:
#: drivers/firewire/core-iso.c:383
msgid "``int generation``"
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:285
#: drivers/firewire/core-transaction.c:410
msgid "bus generation in which request and response are valid"
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:287
#: drivers/firewire/core-transaction.c:412
msgid "``int speed``"
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:286
#: drivers/firewire/core-transaction.c:411
msgid "transmission speed"
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:288
#: drivers/firewire/core-transaction.c:413
msgid "``unsigned long long offset``"
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:287
#: drivers/firewire/core-transaction.c:412
msgid "48bit wide offset into destination's address space"
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:289
#: drivers/firewire/core-transaction.c:414
msgid "``void *payload``"
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:288
#: drivers/firewire/core-transaction.c:413
msgid "data payload for the request subaction"
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:290
#: drivers/firewire/core-transaction.c:415
msgid "``size_t length``"
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:289
#: drivers/firewire/core-transaction.c:414
msgid "length of the payload, in bytes"
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:291
msgid "``union fw_transaction_callback callback``"
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:290
msgid ""
"union of two functions whether to receive time stamp or not for response "
"subaction."
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:293
msgid "``bool with_tstamp``"
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:292
msgid "Whether to receive time stamp or not for response subaction."
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:294
msgid "``void *callback_data``"
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:293
msgid "data to be passed to the transaction completion callback"
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:294
msgid ""
"Submit a request packet into the asynchronous request transmission queue. "
"Can be called from atomic context.  If you prefer a blocking API, use "
"fw_run_transaction() in a context that can sleep."
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:298
msgid ""
"In case of lock requests, specify one of the firewire-core specific "
"``TCODE_`` constants instead of ``TCODE_LOCK_REQUEST`` in **tcode**."
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:301
msgid ""
"Make sure that the value in **destination_id** is not older than the one in "
"**generation**.  Otherwise the request is in danger to be sent to a wrong "
"node."
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:304
msgid ""
"In case of asynchronous stream packets i.e. ``TCODE_STREAM_DATA``, the "
"caller needs to synthesize **destination_id** with "
"fw_stream_packet_destination_id(). It will contain tag, channel, and sy data "
"instead of a node ID then."
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:308
msgid ""
"The payload buffer at **data** is going to be DMA-mapped except in case of "
"**length** <= 8 or of local (loopback) requests.  Hence make sure that the "
"buffer complies with the restrictions of the streaming DMA mapping API. "
"**payload** must not be freed before the **callback** is called."
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:313
msgid ""
"In case of request types without payload, **data** is NULL and **length** is "
"0."
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:315
msgid ""
"After the transaction is completed successfully or unsuccessfully, the "
"**callback** will be called.  Among its parameters is the response code "
"which is either one of the rcodes per IEEE 1394 or, in case of internal "
"errors, the firewire-core specific ``RCODE_SEND_ERROR``.  The other firewire-"
"core specific rcodes (``RCODE_CANCELLED``, ``RCODE_BUSY``, "
"``RCODE_GENERATION``, ``RCODE_NO_ACK``) denote transaction timeout, busy "
"responder, stale request generation, or missing ACK respectively."
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:323
msgid ""
"Note some timing corner cases:  fw_send_request() may complete much earlier "
"than when the request packet actually hits the wire.  On the other hand, "
"transaction completion and hence execution of **callback** may happen even "
"before fw_send_request() returns."
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:406
msgid "send request and sleep until transaction is completed"
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:407
msgid "card interface for this request"
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:415
msgid ""
"Returns the RCODE.  See fw_send_request() for parameter documentation. "
"Unlike fw_send_request(), **data** points to the payload of the request or/"
"and to the payload of the response.  DMA mapping restrictions apply to "
"outbound request payloads of >= 8 bytes but not to inbound response payloads."
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:571
msgid "register for incoming requests"
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:577
#: drivers/firewire/core-transaction.c:635
msgid "``struct fw_address_handler *handler``"
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:572
#: drivers/firewire/core-transaction.c:630
msgid "callback"
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:574
msgid "``const struct fw_address_region *region``"
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:573
msgid "region in the IEEE 1212 node space address range"
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:574
msgid "region->start, ->end, and handler->length have to be quadlet-aligned."
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:576
msgid ""
"When a request is received that falls within the specified address range, "
"the specified callback is invoked.  The parameters passed to the callback "
"give the details of the particular request. The callback is invoked in the "
"workqueue context in most cases. However, if the request is initiated by the "
"local node, the callback is invoked in the initiator's context."
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:581
msgid ""
"To be called in process context. Return value:  0 on success, non-zero "
"otherwise."
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:584
msgid ""
"The start offset of the handler's address region is determined by "
"fw_core_add_address_handler() and is returned in handler->offset."
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:587
msgid "Address allocations are exclusive, except for the FCP registers."
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:629
msgid "unregister an address handler"
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:631
msgid "To be called in process context."
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:633
msgid ""
"When fw_core_remove_address_handler() returns, **handler->callback\\(\\)** "
"is guaranteed to not run on any CPU anymore."
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:855
msgid "send response packet for asynchronous transaction."
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:856
msgid "interface to send the response at."
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:858
#: drivers/firewire/core-transaction.c:902
msgid "``struct fw_request *request``"
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:857
msgid "firewire request data for the transaction."
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:859
#: drivers/firewire/core-transaction.c:1158
msgid "``int rcode``"
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:858
msgid "response code to send."
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:859
msgid ""
"Submit a response packet into the asynchronous response transmission queue. "
"The **request** is going to be released when the transmission successfully "
"finishes later."
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:896
msgid "returns speed at which the **request** was received"
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:897
msgid "firewire request data"
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:906
msgid "Get timestamp of the request."
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:912
msgid "``const struct fw_request *request``"
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:907
msgid "The opaque pointer to request structure."
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:908
msgid ""
"Get timestamp when 1394 OHCI controller receives the asynchronous request "
"subaction. The timestamp consists of the low order 3 bits of second field "
"and the full 13 bits of count field of isochronous cycle time register."
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:912
msgid "**Return**"
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:913
msgid "timestamp of the request."
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:1152
msgid "convert a firewire result code to an error description"
msgstr ""

#: ../../../driver-api/firewire:40: drivers/firewire/core-transaction.c:1153
msgid "the result code"
msgstr ""

#: ../../../driver-api/firewire.rst:44
msgid "Firewire Isochronous I/O interfaces"
msgstr ""

#: ../../../driver-api/firewire:46: include/linux/firewire.h:548
msgid "schedule work item to process isochronous context."
msgstr ""

#: ../../../driver-api/firewire:46: include/linux/firewire.h:554
#: ../../../driver-api/firewire:48: drivers/firewire/core-iso.c:219
msgid "``struct fw_iso_context *ctx``"
msgstr ""

#: ../../../driver-api/firewire:46: include/linux/firewire.h:549
#: ../../../driver-api/firewire:48: drivers/firewire/core-iso.c:214
msgid "the isochronous context"
msgstr ""

#: ../../../driver-api/firewire:46: include/linux/firewire.h:550
msgid ""
"Schedule a work item on workqueue to process the isochronous context. The "
"registered callback function is called by the worker when a queued packet "
"buffer with the interrupt flag is completed, either after transmission in "
"the IT context or after being filled in the IR context. The callback "
"function is also called when the header buffer in the context becomes full, "
"If it is required to process the context in the current context, "
"fw_iso_context_flush_completions() is available instead."
msgstr ""

#: ../../../driver-api/firewire:46: include/linux/firewire.h:557
#: ../../../driver-api/firewire:48: drivers/firewire/core-iso.c:223
msgid "**Context**"
msgstr ""

#: ../../../driver-api/firewire:46: include/linux/firewire.h:558
msgid "Any context."
msgstr ""

#: ../../../driver-api/firewire:48: drivers/firewire/core-iso.c:213
msgid "process isochronous context in current process context."
msgstr ""

#: ../../../driver-api/firewire:48: drivers/firewire/core-iso.c:215
msgid ""
"Process the isochronous context in the current process context. The "
"registered callback function is called when a queued packet buffer with the "
"interrupt flag is completed, either after transmission in the IT context or "
"after being filled in the IR context. Additionally, the callback function is "
"also called for the packet buffer completed at last. Furthermore, the "
"callback function is called as well when the header buffer in the context "
"becomes full. If it is required to process the context asynchronously, "
"fw_iso_context_schedule_flush_completions() is available instead."
msgstr ""

#: ../../../driver-api/firewire:48: drivers/firewire/core-iso.c:224
msgid "Process context. May sleep due to disable_work_sync()."
msgstr ""

#: ../../../driver-api/firewire:48: drivers/firewire/core-iso.c:380
msgid "Allocate or deallocate a channel and/or bandwidth"
msgstr ""

#: ../../../driver-api/firewire:48: drivers/firewire/core-iso.c:381
msgid "card interface for this action"
msgstr ""

#: ../../../driver-api/firewire:48: drivers/firewire/core-iso.c:382
msgid "bus generation"
msgstr ""

#: ../../../driver-api/firewire:48: drivers/firewire/core-iso.c:384
msgid "``u64 channels_mask``"
msgstr ""

#: ../../../driver-api/firewire:48: drivers/firewire/core-iso.c:383
msgid "bitmask for channel allocation"
msgstr ""

#: ../../../driver-api/firewire:48: drivers/firewire/core-iso.c:385
msgid "``int *channel``"
msgstr ""

#: ../../../driver-api/firewire:48: drivers/firewire/core-iso.c:384
msgid "pointer for returning channel allocation result"
msgstr ""

#: ../../../driver-api/firewire:48: drivers/firewire/core-iso.c:386
msgid "``int *bandwidth``"
msgstr ""

#: ../../../driver-api/firewire:48: drivers/firewire/core-iso.c:385
msgid "pointer for returning bandwidth allocation result"
msgstr ""

#: ../../../driver-api/firewire:48: drivers/firewire/core-iso.c:387
msgid "``bool allocate``"
msgstr ""

#: ../../../driver-api/firewire:48: drivers/firewire/core-iso.c:386
msgid "whether to allocate (true) or deallocate (false)"
msgstr ""

#: ../../../driver-api/firewire:48: drivers/firewire/core-iso.c:387
msgid ""
"In parameters: card, generation, channels_mask, bandwidth, allocate Out "
"parameters: channel, bandwidth"
msgstr ""

#: ../../../driver-api/firewire:48: drivers/firewire/core-iso.c:390
msgid "This function blocks (sleeps) during communication with the IRM."
msgstr ""

#: ../../../driver-api/firewire:48: drivers/firewire/core-iso.c:392
msgid ""
"Allocates or deallocates at most one channel out of channels_mask. "
"channels_mask is a bitfield with MSB for channel 63 and LSB for channel 0. "
"(Note, the IRM's CHANNELS_AVAILABLE is a big-endian bitfield with MSB for "
"channel 0 and LSB for channel 63.) Allocates or deallocates as many "
"bandwidth allocation units as specified."
msgstr ""

#: ../../../driver-api/firewire:48: drivers/firewire/core-iso.c:398
msgid ""
"Returns channel < 0 if no channel was allocated or deallocated. Returns "
"bandwidth = 0 if no bandwidth was allocated or deallocated."
msgstr ""

#: ../../../driver-api/firewire:48: drivers/firewire/core-iso.c:401
msgid ""
"If generation is stale, deallocations succeed but allocations fail with "
"channel = -EAGAIN."
msgstr ""

#: ../../../driver-api/firewire:48: drivers/firewire/core-iso.c:404
msgid ""
"If channel allocation fails, no bandwidth will be allocated either. If "
"bandwidth allocation fails, no channel will be allocated either. But "
"deallocations of channel and bandwidth are tried independently of each "
"other's success."
msgstr ""
