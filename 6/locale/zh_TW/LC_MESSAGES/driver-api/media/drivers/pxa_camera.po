# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../driver-api/media/drivers/pxa_camera.rst:4
msgid "PXA-Camera Host Driver"
msgstr ""

#: ../../../driver-api/media/drivers/pxa_camera.rst:6
msgid "Author: Robert Jarzmik <robert.jarzmik@free.fr>"
msgstr ""

#: ../../../driver-api/media/drivers/pxa_camera.rst:9
msgid "Constraints"
msgstr ""

#: ../../../driver-api/media/drivers/pxa_camera.rst:11
msgid ""
"Image size for YUV422P format All YUV422P images are enforced to have width "
"x height % 16 = 0. This is due to DMA constraints, which transfers only "
"planes of 8 byte multiples."
msgstr ""

#: ../../../driver-api/media/drivers/pxa_camera.rst:18
msgid "Global video workflow"
msgstr ""

#: ../../../driver-api/media/drivers/pxa_camera.rst:20
msgid ""
"QCI stopped Initially, the QCI interface is stopped. When a buffer is "
"queued, start_streaming is called and the QCI starts."
msgstr ""

#: ../../../driver-api/media/drivers/pxa_camera.rst:24
msgid ""
"QCI started More buffers can be queued while the QCI is started without "
"halting the capture.  The new buffers are \"appended\" at the tail of the "
"DMA chain, and smoothly captured one frame after the other."
msgstr ""

#: ../../../driver-api/media/drivers/pxa_camera.rst:29
msgid ""
"Once a buffer is filled in the QCI interface, it is marked as \"DONE\" and "
"removed from the active buffers list. It can be then requeud or dequeued by "
"userland application."
msgstr ""

#: ../../../driver-api/media/drivers/pxa_camera.rst:33
msgid "Once the last buffer is filled in, the QCI interface stops."
msgstr ""

#: ../../../driver-api/media/drivers/pxa_camera.rst:35
msgid "Capture global finite state machine schema"
msgstr ""

#: ../../../driver-api/media/drivers/pxa_camera.rst:88
msgid "DMA usage"
msgstr ""

#: ../../../driver-api/media/drivers/pxa_camera.rst:90
msgid "DMA flow"
msgstr ""

#: ../../../driver-api/media/drivers/pxa_camera.rst:91
msgid ""
"first buffer queued for capture Once a first buffer is queued for capture, "
"the QCI is started, but data transfer is not started. On \"End Of Frame\" "
"interrupt, the irq handler starts the DMA chain."
msgstr ""

#: ../../../driver-api/media/drivers/pxa_camera.rst:95
msgid ""
"capture of one videobuffer The DMA chain starts transferring data into "
"videobuffer RAM pages. When all pages are transferred, the DMA irq is raised "
"on \"ENDINTR\" status"
msgstr ""

#: ../../../driver-api/media/drivers/pxa_camera.rst:98
msgid ""
"finishing one videobuffer The DMA irq handler marks the videobuffer as "
"\"done\", and removes it from the active running queue Meanwhile, the next "
"videobuffer (if there is one), is transferred by DMA"
msgstr ""

#: ../../../driver-api/media/drivers/pxa_camera.rst:102
msgid ""
"finishing the last videobuffer On the DMA irq of the last videobuffer, the "
"QCI is stopped."
msgstr ""

#: ../../../driver-api/media/drivers/pxa_camera.rst:105
msgid "DMA prepared buffer will have this structure"
msgstr ""

#: ../../../driver-api/media/drivers/pxa_camera.rst:113
msgid ""
"This structure is pointed by dma->sg_cpu. The descriptors are used as "
"follows:"
msgstr ""

#: ../../../driver-api/media/drivers/pxa_camera.rst:116
msgid ""
"desc-sg[i]: i-th descriptor, transferring the i-th sg element to the video "
"buffer scatter gather"
msgstr ""

#: ../../../driver-api/media/drivers/pxa_camera.rst:118
msgid "finisher: has ddadr=DADDR_STOP, dcmd=ENDIRQEN"
msgstr ""

#: ../../../driver-api/media/drivers/pxa_camera.rst:119
msgid "linker: has ddadr= desc-sg[0] of next video buffer, dcmd=0"
msgstr ""

#: ../../../driver-api/media/drivers/pxa_camera.rst:121
msgid ""
"For the next schema, let's assume d0=desc-sg[0] .. dN=desc-sg[N], \"f\" "
"stands for finisher and \"l\" for linker. A typical running chain is :"
msgstr ""

#: ../../../driver-api/media/drivers/pxa_camera.rst:134
msgid "After the chaining is finished, the chain looks like :"
msgstr ""

#: ../../../driver-api/media/drivers/pxa_camera.rst:146
msgid "DMA hot chaining timeslice issue"
msgstr ""

#: ../../../driver-api/media/drivers/pxa_camera.rst:148
msgid ""
"As DMA chaining is done while DMA _is_ running, the linking may be done "
"while the DMA jumps from one Videobuffer to another. On the schema, that "
"would be a problem if the following sequence is encountered :"
msgstr ""

#: ../../../driver-api/media/drivers/pxa_camera.rst:152
msgid "DMA chain is Videobuffer1 + Videobuffer2"
msgstr ""

#: ../../../driver-api/media/drivers/pxa_camera.rst:153
msgid "pxa_videobuf_queue() is called to queue Videobuffer3"
msgstr ""

#: ../../../driver-api/media/drivers/pxa_camera.rst:154
msgid "DMA controller finishes Videobuffer2, and DMA stops"
msgstr ""

#: ../../../driver-api/media/drivers/pxa_camera.rst:166
msgid ""
"pxa_dma_add_tail_buf() is called, the Videobuffer2 \"finisher\" is replaced "
"by a \"linker\" to Videobuffer3 (creation of new_link)"
msgstr ""

#: ../../../driver-api/media/drivers/pxa_camera.rst:168
msgid "pxa_videobuf_queue() finishes"
msgstr ""

#: ../../../driver-api/media/drivers/pxa_camera.rst:169
msgid "the DMA irq handler is called, which terminates Videobuffer2"
msgstr ""

#: ../../../driver-api/media/drivers/pxa_camera.rst:170
msgid "Videobuffer3 capture is not scheduled on DMA chain (as it stopped !!!)"
msgstr ""

#: ../../../driver-api/media/drivers/pxa_camera.rst:183
msgid ""
"pxa_camera_check_link_miss() is called This checks if the DMA is finished "
"and a buffer is still on the pcdev->capture list. If that's the case, the "
"capture will be restarted, and Videobuffer3 is scheduled on DMA chain."
msgstr ""

#: ../../../driver-api/media/drivers/pxa_camera.rst:187
msgid "the DMA irq handler finishes"
msgstr ""

#: ../../../driver-api/media/drivers/pxa_camera.rst:191
msgid ""
"If DMA stops just after pxa_camera_check_link_miss() reads DDADR() value, we "
"have the guarantee that the DMA irq handler will be called back when the DMA "
"will finish the buffer, and pxa_camera_check_link_miss() will be called "
"again, to reschedule Videobuffer3."
msgstr ""
