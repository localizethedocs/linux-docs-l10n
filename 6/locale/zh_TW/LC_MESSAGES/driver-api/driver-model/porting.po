# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../driver-api/driver-model/porting.rst:3
msgid "Porting Drivers to the New Driver Model"
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:5
msgid "Patrick Mochel"
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:7
msgid "7 January 2003"
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:10
msgid "Overview"
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:12
msgid ""
"Please refer to `Documentation/driver-api/driver-model/*.rst` for "
"definitions of various driver types and concepts."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:15
msgid ""
"Most of the work of porting devices drivers to the new model happens at the "
"bus driver layer. This was intentional, to minimize the negative effect on "
"kernel drivers, and to allow a gradual transition of bus drivers."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:20
msgid ""
"In a nutshell, the driver model consists of a set of objects that can be "
"embedded in larger, bus-specific objects. Fields in these generic objects "
"can replace fields in the bus-specific objects."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:24
msgid ""
"The generic objects must be registered with the driver model core. By doing "
"so, they will exported via the sysfs filesystem. sysfs can be mounted by "
"doing::"
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:32
msgid "The Process"
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:34
msgid ""
"Step 0: Read include/linux/device.h for object and function definitions."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:36
msgid "Step 1: Registering the bus driver."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:39
msgid "Define a struct bus_type for the bus driver::"
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:46
msgid "Register the bus type."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:48
msgid ""
"This should be done in the initialization function for the bus type, which "
"is usually the module_init(), or equivalent, function::"
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:59
msgid ""
"The bus type may be unregistered (if the bus driver may be compiled as a "
"module) by doing::"
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:65
msgid "Export the bus type for others to use."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:67
msgid ""
"Other code may wish to reference the bus type, so declare it in a shared "
"header file and export the symbol."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:70
msgid "From include/linux/pci.h::"
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:75
msgid "From file the above code appears in::"
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:81
msgid ""
"This will cause the bus to show up in /sys/bus/pci/ with two subdirectories: "
"'devices' and 'drivers'::"
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:91
msgid "Step 2: Registering Devices."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:93
msgid ""
"struct device represents a single device. It mainly contains metadata "
"describing the relationship the device has to other entities."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:97
msgid "Embed a struct device in the bus-specific device type::"
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:106
msgid ""
"It is recommended that the generic device not be the first item in the "
"struct to discourage programmers from doing mindless casts between the "
"object types. Instead macros, or inline functions, should be created to "
"convert from the generic object type::"
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:121
msgid ""
"This allows the compiler to verify type-safety of the operations that are "
"performed (which is Good)."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:125
msgid "Initialize the device on registration."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:127
msgid ""
"When devices are discovered or registered with the bus type, the bus driver "
"should initialize the generic device. The most important things to "
"initialize are the bus_id, parent, and bus fields."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:131
msgid ""
"The bus_id is an ASCII string that contains the device's address on the bus. "
"The format of this string is bus-specific. This is necessary for "
"representing devices in sysfs."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:135
msgid ""
"parent is the physical parent of the device. It is important that the bus "
"driver sets this field correctly."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:138
msgid ""
"The driver model maintains an ordered list of devices that it uses for power "
"management. This list must be in order to guarantee that devices are "
"shutdown before their physical parents, and vice versa. The order of this "
"list is determined by the parent of registered devices."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:144
msgid ""
"Also, the location of the device's sysfs directory depends on a device's "
"parent. sysfs exports a directory structure that mirrors the device "
"hierarchy. Accurately setting the parent guarantees that sysfs will "
"accurately represent the hierarchy."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:149
msgid ""
"The device's bus field is a pointer to the bus type the device belongs to. "
"This should be set to the bus_type that was declared and initialized before."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:153
msgid ""
"Optionally, the bus driver may set the device's name and release fields."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:156
msgid "The name field is an ASCII string describing the device, like"
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:158
msgid "\"ATI Technologies Inc Radeon QD\""
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:160
msgid ""
"The release field is a callback that the driver model core calls when the "
"device has been removed, and all references to it have been released. More "
"on this in a moment."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:165
msgid "Register the device."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:167
msgid ""
"Once the generic device has been initialized, it can be registered with the "
"driver model core by doing::"
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:172
msgid "It can later be unregistered by doing::"
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:176
msgid ""
"This should happen on buses that support hotpluggable devices. If a bus "
"driver unregisters a device, it should not immediately free it. It should "
"instead wait for the driver model core to call the device's release method, "
"then free the bus-specific object. (There may be other code that is "
"currently referencing the device structure, and it would be rude to free the "
"device while that is happening)."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:185
msgid ""
"When the device is registered, a directory in sysfs is created. The PCI tree "
"in sysfs looks like::"
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:208
msgid ""
"Also, symlinks are created in the bus's 'devices' directory that point to "
"the device's directory in the physical hierarchy::"
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:228
msgid "Step 3: Registering Drivers."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:230
msgid ""
"struct device_driver is a simple driver structure that contains a set of "
"operations that the driver model core may call."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:234
msgid "Embed a struct device_driver in the bus-specific driver."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:236
msgid "Just like with devices, do something like::"
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:244
msgid "Initialize the generic driver structure."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:246
msgid ""
"When the driver registers with the bus (e.g. doing pci_register_driver()), "
"initialize the necessary fields of the driver: the name and bus fields."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:251
msgid "Register the driver."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:253
msgid "After the generic driver has been initialized, call::"
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:257
msgid "to register the driver with the core."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:259
msgid ""
"When the driver is unregistered from the bus, unregister it from the core by "
"doing::"
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:264
msgid ""
"Note that this will block until all references to the driver have gone away. "
"Normally, there will not be any."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:268
msgid "Sysfs representation."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:270
msgid ""
"Drivers are exported via sysfs in their bus's 'driver's directory. For "
"example::"
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:281
msgid "Step 4: Define Generic Methods for Drivers."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:283
msgid ""
"struct device_driver defines a set of operations that the driver model core "
"calls. Most of these operations are probably similar to operations the bus "
"already defines for drivers, but taking different parameters."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:288
msgid ""
"It would be difficult and tedious to force every driver on a bus to "
"simultaneously convert their drivers to generic format. Instead, the bus "
"driver should define single instances of the generic methods that forward "
"call to the bus-specific drivers. For instance::"
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:308
msgid ""
"The generic driver should be initialized with these methods before it is "
"registered::"
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:323
msgid ""
"Ideally, the bus should only initialize the fields if they are not already "
"set. This allows the drivers to implement their own generic methods."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:328
msgid "Step 5: Support generic driver binding."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:330
msgid ""
"The model assumes that a device or driver can be dynamically registered with "
"the bus at any time. When registration happens, devices must be bound to a "
"driver, or drivers must be bound to all devices that it supports."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:335
msgid ""
"A driver typically contains a list of device IDs that it supports. The bus "
"driver compares these IDs to the IDs of devices registered with it. The "
"format of the device IDs, and the semantics for comparing them are bus-"
"specific, so the generic model does attempt to generalize them."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:340
msgid ""
"Instead, a bus may supply a method in struct bus_type that does the "
"comparison::"
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:345
msgid ""
"match should return positive value if the driver supports the device, and "
"zero otherwise. It may also return error code (for example -EPROBE_DEFER) if "
"determining that given driver supports the device is not possible."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:350
msgid ""
"When a device is registered, the bus's list of drivers is iterated over. bus-"
">match() is called for each one until a match is found."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:353
msgid ""
"When a driver is registered, the bus's list of devices is iterated over. bus-"
">match() is called for each device that is not already claimed by a driver."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:357
msgid ""
"When a device is successfully bound to a driver, device->driver is set, the "
"device is added to a per-driver list of devices, and a symlink is created in "
"the driver's sysfs directory that points to the device's physical directory::"
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:373
msgid ""
"This driver binding should replace the existing driver binding mechanism the "
"bus currently uses."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:377
msgid "Step 6: Supply a hotplug callback."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:379
msgid ""
"Whenever a device is registered with the driver model core, the userspace "
"program /sbin/hotplug is called to notify userspace. Users can define "
"actions to perform when a device is inserted or removed."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:384
msgid ""
"The driver model core passes several arguments to userspace via environment "
"variables, including"
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:387
msgid "ACTION: set to 'add' or 'remove'"
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:388
msgid "DEVPATH: set to the device's physical path in sysfs."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:390
msgid ""
"A bus driver may also supply additional parameters for userspace to consume. "
"To do this, a bus must implement the 'hotplug' method in struct bus_type::"
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:397
msgid "This is called immediately before /sbin/hotplug is executed."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:400
msgid "Step 7: Cleaning up the bus driver."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:402
msgid ""
"The generic bus, device, and driver structures provide several fields that "
"can replace those defined privately to the bus driver."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:405
msgid "Device list."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:407
msgid ""
"struct bus_type contains a list of all devices registered with the bus type. "
"This includes all devices on all instances of that bus type. An internal "
"list that the bus uses may be removed, in favor of using this one."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:412
msgid "The core provides an iterator to access these devices::"
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:418
msgid "Driver list."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:420
msgid ""
"struct bus_type also contains a list of all drivers registered with it. An "
"internal list of drivers that the bus driver maintains may be removed in "
"favor of using the generic one."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:424
msgid "The drivers may be iterated over, like devices::"
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:430
msgid "Please see drivers/base/bus.c for more information."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:433
msgid "rwsem"
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:435
msgid ""
"struct bus_type contains an rwsem that protects all core accesses to the "
"device and driver lists. This can be used by the bus driver internally, and "
"should be used when accessing the device or driver lists the bus maintains."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:441
msgid "Device and driver fields."
msgstr ""

#: ../../../driver-api/driver-model/porting.rst:443
msgid ""
"Some of the fields in struct device and struct device_driver duplicate "
"fields in the bus-specific representations of these objects. Feel free to "
"remove the bus-specific ones and favor the generic ones. Note though, that "
"this will likely mean fixing up all the drivers that reference the bus-"
"specific fields (though those should all be 1-line changes)."
msgstr ""
