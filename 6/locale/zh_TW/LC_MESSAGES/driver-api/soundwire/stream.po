# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../driver-api/soundwire/stream.rst:3
msgid "Audio Stream in SoundWire"
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:5
msgid "An audio stream is a logical or virtual connection created between"
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:7
msgid "System memory buffer(s) and Codec(s)"
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:9
msgid "DSP memory buffer(s) and Codec(s)"
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:11
msgid "FIFO(s) and Codec(s)"
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:13
msgid "Codec(s) and Codec(s)"
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:15
msgid ""
"which is typically driven by a DMA(s) channel through the data link. An "
"audio stream contains one or more channels of data. All channels within "
"stream must have same sample rate and same sample size."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:19
msgid ""
"Assume a stream with two channels (Left & Right) is opened using SoundWire "
"interface. Below are some ways a stream can be represented in SoundWire."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:22
msgid "Stream Sample in memory (System memory, DSP memory or FIFOs) ::"
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:28
msgid ""
"Example 1: Stereo Stream with L and R channels is rendered from Master to "
"Slave. Both Master and Slave is using single port. ::"
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:41
msgid ""
"Example 2: Stereo Stream with L and R channels is captured from Slave to "
"Master. Both Master and Slave is using single port. ::"
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:55
msgid ""
"Example 3: Stereo Stream with L and R channels is rendered by Master. Each "
"of the L and R channel is received by two different Slaves. Master and both "
"Slaves are using single port. ::"
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:78
msgid ""
"Example 4: Stereo Stream with L and R channels is rendered by Master. Both "
"of the L and R channels are received by two different Slaves. Master and "
"both Slaves are using single port handling L+R. Each Slave device processes "
"the L + R data locally, typically based on static configuration or dynamic "
"orientation, and may drive one or more speakers. ::"
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:104
msgid ""
"Example 5: Stereo Stream with L and R channel is rendered by two different "
"Ports of the Master and is received by only single Port of the Slave "
"interface. ::"
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:129
msgid ""
"Example 6: Stereo Stream with L and R channel is rendered by 2 Masters, each "
"rendering one channel, and is received by two different Slaves, each "
"receiving one channel. Both Masters and both Slaves are using single port. ::"
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:151
msgid ""
"Example 7: Stereo Stream with L and R channel is rendered by 2 Masters, each "
"rendering both channels. Each Slave receives L + R. This is the same "
"application as Example 4 but with Slaves placed on separate links. ::"
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:174
msgid ""
"Example 8: 4-channel Stream is rendered by 2 Masters, each rendering a 2 "
"channels. Each Slave receives 2 channels. ::"
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:195
msgid ""
"Note1: In multi-link cases like above, to lock, one would acquire a global "
"lock and then go on locking bus instances. But, in this case the caller "
"framework(ASoC DPCM) guarantees that stream operations on a card are always "
"serialized. So, there is no race condition and hence no need for global lock."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:201
msgid ""
"Note2: A Slave device may be configured to receive all channels transmitted "
"on a link for a given Stream (Example 4) or just a subset of the data "
"(Example 3). The configuration of the Slave device is not handled by a "
"SoundWire subsystem API, but instead by the snd_soc_dai_set_tdm_slot() API. "
"The platform or machine driver will typically configure which of the slots "
"are used. For Example 4, the same slots would be used by all Devices, while "
"for Example 3 the Slave Device1 would use e.g. Slot 0 and Slave device2 slot "
"1."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:210
msgid ""
"Note3: Multiple Sink ports can extract the same information for the same "
"bitSlots in the SoundWire frame, however multiple Source ports shall be "
"configured with different bitSlot configurations. This is the same "
"limitation as with I2S/PCM TDM usages."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:216
msgid "SoundWire Stream Management flow"
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:219
msgid "Stream definitions"
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:221
msgid ""
"Current stream: This is classified as the stream on which operation has to "
"be performed like prepare, enable, disable, de-prepare etc."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:224
msgid ""
"Active stream: This is classified as the stream which is already active on "
"Bus other than current stream. There can be multiple active streams on the "
"Bus."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:228
msgid ""
"SoundWire Bus manages stream operations for each stream getting rendered/"
"captured on the SoundWire Bus. This section explains Bus operations done for "
"each of the stream allocated/released on Bus. Following are the stream "
"states maintained by the Bus for each of the audio stream."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:235
msgid "SoundWire stream states"
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:237
msgid ""
"Below shows the SoundWire stream states and state transition diagram. ::"
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:253
msgid ""
"NOTE: State transitions between ``SDW_STREAM_ENABLED`` and "
"``SDW_STREAM_DISABLED`` are only relevant when then INFO_PAUSE flag is "
"supported at the ALSA/ASoC level. Likewise the transition between "
"``SDW_DISABLED_STATE`` and ``SDW_PREPARED_STATE`` depends on the INFO_RESUME "
"flag."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:259
msgid ""
"NOTE2: The framework implements basic state transition checks, but does not "
"e.g. check if a transition from DISABLED to ENABLED is valid on a specific "
"platform. Such tests need to be added at the ALSA/ASoC level."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:265
msgid "Stream State Operations"
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:267
msgid ""
"Below section explains the operations done by the Bus on Master(s) and "
"Slave(s) as part of stream state transitions."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:271
msgid "SDW_STREAM_ALLOCATED"
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:273
msgid ""
"Allocation state for stream. This is the entry state of the stream. "
"Operations performed before entering in this state:"
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:276
msgid ""
"A stream runtime is allocated for the stream. This stream runtime is used as "
"a reference for all the operations performed on the stream."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:280
msgid ""
"The resources required for holding stream runtime information are allocated "
"and initialized. This holds all stream related information such as stream "
"type (PCM/PDM) and parameters, Master and Slave interface associated with "
"the stream, stream state etc."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:285
msgid ""
"After all above operations are successful, stream state is set to "
"``SDW_STREAM_ALLOCATED``."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:288
msgid ""
"Bus implements below API for allocate a stream which needs to be called once "
"per stream. From ASoC DPCM framework, this stream state maybe linked to ."
"startup() operation."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:296
msgid ""
"The SoundWire core provides a sdw_startup_stream() helper function, "
"typically called during a dailink .startup() callback, which performs stream "
"allocation and sets the stream pointer for all DAIs connected to a stream."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:302
msgid "SDW_STREAM_CONFIGURED"
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:304
msgid ""
"Configuration state of stream. Operations performed before entering in this "
"state:"
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:307
msgid ""
"The resources allocated for stream information in SDW_STREAM_ALLOCATED state "
"are updated here. This includes stream parameters, Master(s) and Slave(s) "
"runtime information associated with current stream."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:311
msgid ""
"All the Master(s) and Slave(s) associated with current stream provide the "
"port information to Bus which includes port numbers allocated by Master(s) "
"and Slave(s) for current stream and their channel mask."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:315
msgid ""
"After all above operations are successful, stream state is set to "
"``SDW_STREAM_CONFIGURED``."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:318
msgid ""
"Bus implements below APIs for CONFIG state which needs to be called by the "
"respective Master(s) and Slave(s) associated with stream. These APIs can "
"only be invoked once by respective Master(s) and Slave(s). From ASoC DPCM "
"framework, this stream state is linked to .hw_params() operation."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:337
msgid "SDW_STREAM_PREPARED"
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:339
msgid ""
"Prepare state of stream. Operations performed before entering in this state:"
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:341
msgid ""
"Steps 1 and 2 are omitted in the case of a resume operation, where the bus "
"bandwidth is known."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:344
msgid ""
"Bus parameters such as bandwidth, frame shape, clock frequency, are computed "
"based on current stream as well as already active stream(s) on Bus. Re-"
"computation is required to accommodate current stream on the Bus."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:349
msgid ""
"Transport and port parameters of all Master(s) and Slave(s) port(s) are "
"computed for the current as well as already active stream based on frame "
"shape and clock frequency computed in step 1."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:353
msgid ""
"Computed Bus and transport parameters are programmed in Master(s) and "
"Slave(s) registers. The banked registers programming is done on the "
"alternate bank (bank currently unused). Port(s) are enabled for the already "
"active stream(s) on the alternate bank (bank currently unused). This is done "
"in order to not disrupt already active stream(s)."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:359
msgid ""
"Once all the values are programmed, Bus initiates switch to alternate bank "
"where all new values programmed gets into effect."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:362
msgid ""
"Ports of Master(s) and Slave(s) for current stream are prepared by "
"programming PrepareCtrl register."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:365
msgid ""
"After all above operations are successful, stream state is set to "
"``SDW_STREAM_PREPARED``."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:368
msgid ""
"Bus implements below API for PREPARE state which needs to be called once per "
"stream. From ASoC DPCM framework, this stream state is linked to .prepare() "
"operation. Since the .trigger() operations may not follow the .prepare(), a "
"direct transition from ``SDW_STREAM_PREPARED`` to ``SDW_STREAM_DEPREPARED`` "
"is allowed."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:380
msgid "SDW_STREAM_ENABLED"
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:382
msgid ""
"Enable state of stream. The data port(s) are enabled upon entering this "
"state. Operations performed before entering in this state:"
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:385
msgid ""
"All the values computed in SDW_STREAM_PREPARED state are programmed in "
"alternate bank (bank currently unused). It includes programming of already "
"active stream(s) as well."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:389
msgid ""
"All the Master(s) and Slave(s) port(s) for the current stream are enabled on "
"alternate bank (bank currently unused) by programming ChannelEn register."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:393
msgid ""
"Once all the values are programmed, Bus initiates switch to alternate bank "
"where all new values programmed gets into effect and port(s) associated with "
"current stream are enabled."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:397
msgid ""
"After all above operations are successful, stream state is set to "
"``SDW_STREAM_ENABLED``."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:400
msgid ""
"Bus implements below API for ENABLE state which needs to be called once per "
"stream. From ASoC DPCM framework, this stream state is linked to .trigger() "
"start operation."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:409
msgid "SDW_STREAM_DISABLED"
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:411
msgid ""
"Disable state of stream. The data port(s) are disabled upon exiting this "
"state. Operations performed before entering in this state:"
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:414
msgid ""
"All the Master(s) and Slave(s) port(s) for the current stream are disabled "
"on alternate bank (bank currently unused) by programming ChannelEn register."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:418
msgid ""
"All the current configuration of Bus and active stream(s) are programmed "
"into alternate bank (bank currently unused)."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:421
msgid ""
"Once all the values are programmed, Bus initiates switch to alternate bank "
"where all new values programmed gets into effect and port(s) associated with "
"current stream are disabled."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:425
msgid ""
"After all above operations are successful, stream state is set to "
"``SDW_STREAM_DISABLED``."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:428
msgid ""
"Bus implements below API for DISABLED state which needs to be called once "
"per stream. From ASoC DPCM framework, this stream state is linked to ."
"trigger() stop operation."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:432
msgid ""
"When the INFO_PAUSE flag is supported, a direct transition to "
"``SDW_STREAM_ENABLED`` is allowed."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:435
msgid ""
"For resume operations where ASoC will use the .prepare() callback, the "
"stream can transition from ``SDW_STREAM_DISABLED`` to "
"``SDW_STREAM_PREPARED``, with all required settings restored but without "
"updating the bandwidth and bit allocation."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:446
msgid "SDW_STREAM_DEPREPARED"
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:448
msgid ""
"De-prepare state of stream. Operations performed before entering in this "
"state:"
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:451
msgid ""
"All the port(s) of Master(s) and Slave(s) for current stream are de-prepared "
"by programming PrepareCtrl register."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:454
msgid ""
"The payload bandwidth of current stream is reduced from the total bandwidth "
"requirement of bus and new parameters calculated and applied by performing "
"bank switch etc."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:458
msgid ""
"After all above operations are successful, stream state is set to "
"``SDW_STREAM_DEPREPARED``."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:461
msgid ""
"Bus implements below API for DEPREPARED state which needs to be called once "
"per stream. ALSA/ASoC do not have a concept of 'deprepare', and the mapping "
"from this stream state to ALSA/ASoC operation may be implementation specific."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:466
msgid ""
"When the INFO_PAUSE flag is supported, the stream state is linked to the ."
"hw_free() operation - the stream is not deprepared on a TRIGGER_STOP."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:470
msgid ""
"Other implementations may transition to the ``SDW_STREAM_DEPREPARED`` state "
"on TRIGGER_STOP, should they require a transition through the "
"``SDW_STREAM_PREPARED`` state."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:480
msgid "SDW_STREAM_RELEASED"
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:482
msgid ""
"Release state of stream. Operations performed before entering in this state:"
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:484
msgid ""
"Release port resources for all Master(s) and Slave(s) port(s) associated "
"with current stream."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:487
msgid ""
"Release Master(s) and Slave(s) runtime resources associated with current "
"stream."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:490
msgid "Release stream runtime resources associated with current stream."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:492
msgid ""
"After all above operations are successful, stream state is set to "
"``SDW_STREAM_RELEASED``."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:495
msgid ""
"Bus implements below APIs for RELEASE state which needs to be called by all "
"the Master(s) and Slave(s) associated with stream. From ASoC DPCM framework, "
"this stream state is linked to .hw_free() operation."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:507
msgid ""
"The .shutdown() ASoC DPCM operation calls below Bus API to release stream "
"assigned as part of ALLOCATED state."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:510
msgid ""
"In .shutdown() the data structure maintaining stream state are freed up."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:516
msgid ""
"The SoundWire core provides a sdw_shutdown_stream() helper function, "
"typically called during a dailink .shutdown() callback, which clears the "
"stream pointer for all DAIS connected to a stream and releases the memory "
"allocated for the stream."
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:522
msgid "Not Supported"
msgstr ""

#: ../../../driver-api/soundwire/stream.rst:524
msgid ""
"A single port with multiple channels supported cannot be used between two "
"streams or across stream. For example a port with 4 channels cannot be used "
"to handle 2 independent stereo streams even though it's possible in theory "
"in SoundWire."
msgstr ""
