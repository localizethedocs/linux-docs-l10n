# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../power/userland-swsusp.rst:3
msgid "Documentation for userland software suspend interface"
msgstr ""

#: ../../../power/userland-swsusp.rst:5
msgid "2006 Rafael J. Wysocki <rjw@sisk.pl>"
msgstr ""

#: ../../../power/userland-swsusp.rst:7
msgid "First, the warnings at the beginning of swsusp.txt still apply."
msgstr ""

#: ../../../power/userland-swsusp.rst:9
msgid ""
"Second, you should read the FAQ in swsusp.txt _now_ if you have not done it "
"already."
msgstr ""

#: ../../../power/userland-swsusp.rst:12
msgid ""
"Now, to use the userland interface for software suspend you need special "
"utilities that will read/write the system memory snapshot from/to the "
"kernel.  Such utilities are available, for example, from <http://suspend."
"sourceforge.net>.  You may want to have a look at them if you are going to "
"develop your own suspend/resume utilities."
msgstr ""

#: ../../../power/userland-swsusp.rst:18
msgid ""
"The interface consists of a character device providing the open(), "
"release(), read(), and write() operations as well as several ioctl() "
"commands defined in include/linux/suspend_ioctls.h .  The major and minor "
"numbers of the device are, respectively, 10 and 231, and they can be read "
"from /sys/class/misc/snapshot/dev."
msgstr ""

#: ../../../power/userland-swsusp.rst:24
msgid ""
"The device can be open either for reading or for writing.  If open for "
"reading, it is considered to be in the suspend mode.  Otherwise it is "
"assumed to be in the resume mode.  The device cannot be open for "
"simultaneous reading and writing.  It is also impossible to have the device "
"open more than once at a time."
msgstr ""

#: ../../../power/userland-swsusp.rst:30
msgid ""
"Even opening the device has side effects. Data structures are allocated, and "
"PM_HIBERNATION_PREPARE / PM_RESTORE_PREPARE chains are called."
msgstr ""

#: ../../../power/userland-swsusp.rst:34
msgid "The ioctl() commands recognized by the device are:"
msgstr ""

#: ../../../power/userland-swsusp.rst:36
msgid "SNAPSHOT_FREEZE"
msgstr ""

#: ../../../power/userland-swsusp.rst:37
msgid ""
"freeze user space processes (the current process is not frozen); this is "
"required for SNAPSHOT_CREATE_IMAGE and SNAPSHOT_ATOMIC_RESTORE to succeed"
msgstr ""

#: ../../../power/userland-swsusp.rst:41
msgid "SNAPSHOT_UNFREEZE"
msgstr ""

#: ../../../power/userland-swsusp.rst:42
msgid "thaw user space processes frozen by SNAPSHOT_FREEZE"
msgstr ""

#: ../../../power/userland-swsusp.rst:44
msgid "SNAPSHOT_CREATE_IMAGE"
msgstr ""

#: ../../../power/userland-swsusp.rst:45
msgid ""
"create a snapshot of the system memory; the last argument of ioctl() should "
"be a pointer to an int variable, the value of which will indicate whether "
"the call returned after creating the snapshot (1) or after restoring the "
"system memory state from it (0) (after resume the system finds itself "
"finishing the SNAPSHOT_CREATE_IMAGE ioctl() again); after the snapshot has "
"been created the read() operation can be used to transfer it out of the "
"kernel"
msgstr ""

#: ../../../power/userland-swsusp.rst:54
msgid "SNAPSHOT_ATOMIC_RESTORE"
msgstr ""

#: ../../../power/userland-swsusp.rst:55
msgid ""
"restore the system memory state from the uploaded snapshot image; before "
"calling it you should transfer the system memory snapshot back to the kernel "
"using the write() operation; this call will not succeed if the snapshot "
"image is not available to the kernel"
msgstr ""

#: ../../../power/userland-swsusp.rst:61
msgid "SNAPSHOT_FREE"
msgstr ""

#: ../../../power/userland-swsusp.rst:62
msgid "free memory allocated for the snapshot image"
msgstr ""

#: ../../../power/userland-swsusp.rst:64
msgid "SNAPSHOT_PREF_IMAGE_SIZE"
msgstr ""

#: ../../../power/userland-swsusp.rst:65
msgid ""
"set the preferred maximum size of the image (the kernel will do its best to "
"ensure the image size will not exceed this number, but if it turns out to be "
"impossible, the kernel will create the smallest image possible)"
msgstr ""

#: ../../../power/userland-swsusp.rst:70
msgid "SNAPSHOT_GET_IMAGE_SIZE"
msgstr ""

#: ../../../power/userland-swsusp.rst:71
msgid ""
"return the actual size of the hibernation image (the last argument should be "
"a pointer to a loff_t variable that will contain the result if the call is "
"successful)"
msgstr ""

#: ../../../power/userland-swsusp.rst:75
msgid "SNAPSHOT_AVAIL_SWAP_SIZE"
msgstr ""

#: ../../../power/userland-swsusp.rst:76
msgid ""
"return the amount of available swap in bytes (the last argument should be a "
"pointer to a loff_t variable that will contain the result if the call is "
"successful)"
msgstr ""

#: ../../../power/userland-swsusp.rst:80
msgid "SNAPSHOT_ALLOC_SWAP_PAGE"
msgstr ""

#: ../../../power/userland-swsusp.rst:81
msgid ""
"allocate a swap page from the resume partition (the last argument should be "
"a pointer to a loff_t variable that will contain the swap page offset if the "
"call is successful)"
msgstr ""

#: ../../../power/userland-swsusp.rst:85
msgid "SNAPSHOT_FREE_SWAP_PAGES"
msgstr ""

#: ../../../power/userland-swsusp.rst:86
msgid "free all swap pages allocated by SNAPSHOT_ALLOC_SWAP_PAGE"
msgstr ""

#: ../../../power/userland-swsusp.rst:89
msgid "SNAPSHOT_SET_SWAP_AREA"
msgstr ""

#: ../../../power/userland-swsusp.rst:90
msgid ""
"set the resume partition and the offset (in <PAGE_SIZE> units) from the "
"beginning of the partition at which the swap header is located (the last "
"ioctl() argument should point to a struct resume_swap_area, as defined in "
"kernel/power/suspend_ioctls.h, containing the resume device specification "
"and the offset); for swap partitions the offset is always 0, but it is "
"different from zero for swap files (see Documentation/power/swsusp-and-swap-"
"files.rst for details)."
msgstr ""

#: ../../../power/userland-swsusp.rst:99
msgid "SNAPSHOT_PLATFORM_SUPPORT"
msgstr ""

#: ../../../power/userland-swsusp.rst:100
msgid ""
"enable/disable the hibernation platform support, depending on the argument "
"value (enable, if the argument is nonzero)"
msgstr ""

#: ../../../power/userland-swsusp.rst:103
msgid "SNAPSHOT_POWER_OFF"
msgstr ""

#: ../../../power/userland-swsusp.rst:104
msgid ""
"make the kernel transition the system to the hibernation state (eg. ACPI S4) "
"using the platform (eg. ACPI) driver"
msgstr ""

#: ../../../power/userland-swsusp.rst:107
msgid "SNAPSHOT_S2RAM"
msgstr ""

#: ../../../power/userland-swsusp.rst:108
msgid ""
"suspend to RAM; using this call causes the kernel to immediately enter the "
"suspend-to-RAM state, so this call must always be preceded by the "
"SNAPSHOT_FREEZE call and it is also necessary to use the SNAPSHOT_UNFREEZE "
"call after the system wakes up.  This call is needed to implement the "
"suspend-to-both mechanism in which the suspend image is first created, as "
"though the system had been suspended to disk, and then the system is "
"suspended to RAM (this makes it possible to resume the system from RAM if "
"there's enough battery power or restore its state on the basis of the saved "
"suspend image otherwise)"
msgstr ""

#: ../../../power/userland-swsusp.rst:118
msgid ""
"The device's read() operation can be used to transfer the snapshot image "
"from the kernel.  It has the following limitations:"
msgstr ""

#: ../../../power/userland-swsusp.rst:121
msgid "you cannot read() more than one virtual memory page at a time"
msgstr ""

#: ../../../power/userland-swsusp.rst:122
msgid ""
"read()s across page boundaries are impossible (ie. if you read() 1/2 of a "
"page in the previous call, you will only be able to read() **at most** 1/2 "
"of the page in the next call)"
msgstr ""

#: ../../../power/userland-swsusp.rst:126
msgid ""
"The device's write() operation is used for uploading the system memory "
"snapshot into the kernel.  It has the same limitations as the read() "
"operation."
msgstr ""

#: ../../../power/userland-swsusp.rst:129
msgid ""
"The release() operation frees all memory allocated for the snapshot image "
"and all swap pages allocated with SNAPSHOT_ALLOC_SWAP_PAGE (if any). Thus it "
"is not necessary to use either SNAPSHOT_FREE or SNAPSHOT_FREE_SWAP_PAGES "
"before closing the device (in fact it will also unfreeze user space "
"processes frozen by SNAPSHOT_UNFREEZE if they are still frozen when the "
"device is being closed)."
msgstr ""

#: ../../../power/userland-swsusp.rst:136
msgid ""
"Currently it is assumed that the userland utilities reading/writing the "
"snapshot image from/to the kernel will use a swap partition, called the "
"resume partition, or a swap file as storage space (if a swap file is used, "
"the resume partition is the partition that holds this file).  However, this "
"is not really required, as they can use, for example, a special (blank) "
"suspend partition or a file on a partition that is unmounted before "
"SNAPSHOT_CREATE_IMAGE and mounted afterwards."
msgstr ""

#: ../../../power/userland-swsusp.rst:144
msgid ""
"These utilities MUST NOT make any assumptions regarding the ordering of data "
"within the snapshot image.  The contents of the image are entirely owned by "
"the kernel and its structure may be changed in future kernel releases."
msgstr ""

#: ../../../power/userland-swsusp.rst:148
msgid ""
"The snapshot image MUST be written to the kernel unaltered (ie. all of the "
"image data, metadata and header MUST be written in _exactly_ the same "
"amount, form and order in which they have been read).  Otherwise, the "
"behavior of the resumed system may be totally unpredictable."
msgstr ""

#: ../../../power/userland-swsusp.rst:153
msgid ""
"While executing SNAPSHOT_ATOMIC_RESTORE the kernel checks if the structure "
"of the snapshot image is consistent with the information stored in the image "
"header.  If any inconsistencies are detected, SNAPSHOT_ATOMIC_RESTORE will "
"not succeed.  Still, this is not a fool-proof mechanism and the userland "
"utilities using the interface SHOULD use additional means, such as "
"checksums, to ensure the integrity of the snapshot image."
msgstr ""

#: ../../../power/userland-swsusp.rst:160
msgid ""
"The suspending and resuming utilities MUST lock themselves in memory, "
"preferably using mlockall(), before calling SNAPSHOT_FREEZE."
msgstr ""

#: ../../../power/userland-swsusp.rst:163
msgid ""
"The suspending utility MUST check the value stored by SNAPSHOT_CREATE_IMAGE "
"in the memory location pointed to by the last argument of ioctl() and "
"proceed in accordance with it:"
msgstr ""

#: ../../../power/userland-swsusp.rst:167
msgid ""
"If the value is 1 (ie. the system memory snapshot has just been created and "
"the system is ready for saving it):"
msgstr ""

#: ../../../power/userland-swsusp.rst:170
msgid ""
"The suspending utility MUST NOT close the snapshot device _unless_ the whole "
"suspend procedure is to be cancelled, in which case, if the snapshot image "
"has already been saved, the suspending utility SHOULD destroy it, preferably "
"by zapping its header.  If the suspend is not to be cancelled, the system "
"MUST be powered off or rebooted after the snapshot image has been saved."
msgstr ""

#: ../../../power/userland-swsusp.rst:177
msgid ""
"The suspending utility SHOULD NOT attempt to perform any file system "
"operations (including reads) on the file systems that were mounted before "
"SNAPSHOT_CREATE_IMAGE has been called.  However, it MAY mount a file system "
"that was not mounted at that time and perform some operations on it (eg. use "
"it for saving the image)."
msgstr ""

#: ../../../power/userland-swsusp.rst:184
msgid ""
"If the value is 0 (ie. the system state has just been restored from the "
"snapshot image), the suspending utility MUST close the snapshot device.  "
"Afterwards it will be treated as a regular userland process, so it need not "
"exit."
msgstr ""

#: ../../../power/userland-swsusp.rst:189
msgid ""
"The resuming utility SHOULD NOT attempt to mount any file systems that could "
"be mounted before suspend and SHOULD NOT attempt to perform any operations "
"involving such file systems."
msgstr ""

#: ../../../power/userland-swsusp.rst:193
msgid "For details, please refer to the source code."
msgstr ""
