# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../i2c/dma-considerations.rst:3
msgid "Linux I2C and DMA"
msgstr ""

#: ../../../i2c/dma-considerations.rst:5
msgid ""
"Given that I2C is a low-speed bus, over which the majority of messages "
"transferred are small, it is not considered a prime user of DMA access. At "
"this time of writing, only 10% of I2C bus master drivers have DMA support "
"implemented. And the vast majority of transactions are so small that setting "
"up DMA for it will likely add more overhead than a plain PIO transfer."
msgstr ""

#: ../../../i2c/dma-considerations.rst:11
msgid ""
"Therefore, it is *not* mandatory that the buffer of an I2C message is DMA "
"safe. It does not seem reasonable to apply additional burdens when the "
"feature is so rarely used. However, it is recommended to use a DMA-safe "
"buffer if your message size is likely applicable for DMA. Most drivers have "
"this threshold around 8 bytes (as of today, this is mostly an educated "
"guess, however). For any message of 16 byte or larger, it is probably a "
"really good idea. Please note that other subsystems you use might add "
"requirements. E.g., if your I2C bus master driver is using USB as a bridge, "
"then you need to have DMA safe buffers always, because USB requires it."
msgstr ""

#: ../../../i2c/dma-considerations.rst:22
msgid "Clients"
msgstr ""

#: ../../../i2c/dma-considerations.rst:24
msgid ""
"For clients, if you use a DMA safe buffer in i2c_msg, set the I2C_M_DMA_SAFE "
"flag with it. Then, the I2C core and drivers know they can safely operate "
"DMA on it. Note that using this flag is optional. I2C host drivers which are "
"not updated to use this flag will work like before. And like before, they "
"risk using an unsafe DMA buffer. To improve this situation, using "
"I2C_M_DMA_SAFE in more and more clients and host drivers is the planned way "
"forward. Note also that setting this flag makes only sense in kernel space. "
"User space data is copied into kernel space anyhow. The I2C core makes sure "
"the destination buffers in kernel space are always DMA capable. Also, when "
"the core emulates SMBus transactions via I2C, the buffers for block "
"transfers are DMA safe. Users of i2c_master_send() and i2c_master_recv() "
"functions can now use DMA safe variants (i2c_master_send_dmasafe() and "
"i2c_master_recv_dmasafe()) once they know their buffers are DMA safe. Users "
"of i2c_transfer() must set the I2C_M_DMA_SAFE flag manually."
msgstr ""

#: ../../../i2c/dma-considerations.rst:40
msgid "Masters"
msgstr ""

#: ../../../i2c/dma-considerations.rst:42
msgid ""
"Bus master drivers wishing to implement safe DMA can use helper functions "
"from the I2C core. One gives you a DMA-safe buffer for a given i2c_msg as "
"long as a certain threshold is met::"
msgstr ""

#: ../../../i2c/dma-considerations.rst:48
msgid ""
"If a buffer is returned, it is either msg->buf for the I2C_M_DMA_SAFE case "
"or a bounce buffer. But you don't need to care about that detail, just use "
"the returned buffer. If NULL is returned, the threshold was not met or a "
"bounce buffer could not be allocated. Fall back to PIO in that case."
msgstr ""

#: ../../../i2c/dma-considerations.rst:53
msgid ""
"In any case, a buffer obtained from above needs to be released. Another "
"helper function ensures a potentially used bounce buffer is freed::"
msgstr ""

#: ../../../i2c/dma-considerations.rst:58
msgid ""
"The last argument 'xferred' controls if the buffer is synced back to the "
"message or not. No syncing is needed in cases setting up DMA had an error "
"and there was no data transferred."
msgstr ""

#: ../../../i2c/dma-considerations.rst:62
msgid ""
"The bounce buffer handling from the core is generic and simple. It will "
"always allocate a new bounce buffer. If you want a more sophisticated "
"handling (e.g. reusing pre-allocated buffers), you are free to implement "
"your own."
msgstr ""

#: ../../../i2c/dma-considerations.rst:66
msgid ""
"Please also check the in-kernel documentation for details. The i2c-sh_mobile "
"driver can be used as a reference example how to use the above helpers."
msgstr ""

#: ../../../i2c/dma-considerations.rst:69
msgid ""
"Final note: If you plan to use DMA with I2C (or with anything else, "
"actually) make sure you have CONFIG_DMA_API_DEBUG enabled during "
"development. It can help you find various issues which can be complex to "
"debug otherwise."
msgstr ""
