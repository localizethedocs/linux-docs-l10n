# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../i2c/i2c-sysfs.rst:5
msgid "Linux I2C Sysfs"
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:8
msgid "Overview"
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:10
msgid ""
"I2C topology can be complex because of the existence of I2C MUX (I2C "
"Multiplexer). The Linux kernel abstracts the MUX channels into logical I2C "
"bus numbers. However, there is a gap of knowledge to map from the I2C bus "
"physical number and MUX topology to logical I2C bus number. This doc is "
"aimed to fill in this gap, so the audience (hardware engineers and new "
"software developers for example) can learn the concept of logical I2C buses "
"in the kernel, by knowing the physical I2C topology and navigating through "
"the I2C sysfs in Linux shell. This knowledge is useful and essential to use "
"``i2c-tools`` for the purpose of development and debugging."
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:22
msgid "Target audience"
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:24
msgid ""
"People who need to use Linux shell to interact with I2C subsystem on a "
"system which the Linux is running on."
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:28
msgid "Prerequisites"
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:30
msgid "Knowledge of general Linux shell file system commands and operations."
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:32
msgid "General knowledge of I2C, I2C MUX and I2C topology."
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:35
msgid "Location of I2C Sysfs"
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:37
msgid ""
"Typically, the Linux Sysfs filesystem is mounted at the ``/sys`` directory, "
"so you can find the I2C Sysfs under ``/sys/bus/i2c/devices`` where you can "
"directly ``cd`` to it. There is a list of symbolic links under that "
"directory. The links that start with ``i2c-`` are I2C buses, which may be "
"either physical or logical. The other links that begin with numbers and end "
"with numbers are I2C devices, where the first number is I2C bus number, and "
"the second number is I2C address."
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:45
msgid "Google Pixel 3 phone for example::"
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:51
msgid ""
"``i2c-2`` is an I2C bus whose number is 2, and ``2-0049`` is an I2C device "
"on bus 2 address 0x49 bound with a kernel driver."
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:55
msgid "Terminology"
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:57
msgid "First, let us define some terms to avoid confusion in later sections."
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:60
msgid "(Physical) I2C Bus Controller"
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:62
msgid ""
"The hardware system that the Linux kernel is running on may have multiple "
"physical I2C bus controllers. The controllers are hardware and physical, and "
"the system may define multiple registers in the memory space to manipulate "
"the controllers. Linux kernel has I2C bus drivers under source directory "
"``drivers/i2c/busses`` to translate kernel I2C API into register operations "
"for different systems. This terminology is not limited to Linux kernel only."
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:71
msgid "I2C Bus Physical Number"
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:73
msgid ""
"For each physical I2C bus controller, the system vendor may assign a "
"physical number to each controller. For example, the first I2C bus "
"controller which has the lowest register addresses may be called ``I2C-0``."
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:78
msgid "Logical I2C Bus"
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:80
msgid ""
"Every I2C bus number you see in Linux I2C Sysfs is a logical I2C bus with a "
"number assigned. This is similar to the fact that software code is usually "
"written upon virtual memory space, instead of physical memory space."
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:84
msgid ""
"Each logical I2C bus may be an abstraction of a physical I2C bus controller, "
"or an abstraction of a channel behind an I2C MUX. In case it is an "
"abstraction of a MUX channel, whenever we access an I2C device via a such "
"logical bus, the kernel will switch the I2C MUX for you to the proper "
"channel as part of the abstraction."
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:91
msgid "Physical I2C Bus"
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:93
msgid ""
"If the logical I2C bus is a direct abstraction of a physical I2C bus "
"controller, let us call it a physical I2C bus."
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:97
msgid "Caveat"
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:99
msgid ""
"This may be a confusing part for people who only know about the physical I2C "
"design of a board. It is actually possible to rename the I2C bus physical "
"number to a different number in logical I2C bus level in Device Tree Source "
"(DTS) under section ``aliases``. See ``arch/arm/boot/dts/nuvoton-npcm730-gsj."
"dts`` for an example of DTS file."
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:105
msgid ""
"Best Practice: **(To kernel software developers)** It is better to keep the "
"I2C bus physical number the same as their corresponding logical I2C bus "
"number, instead of renaming or mapping them, so that it may be less "
"confusing to other users. These physical I2C buses can be served as good "
"starting points for I2C MUX fanouts. For the following examples, we will "
"assume that the physical I2C bus has a number same as their I2C bus physical "
"number."
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:113
msgid "Walk through Logical I2C Bus"
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:115
msgid ""
"For the following content, we will use a more complex I2C topology as an "
"example. Here is a brief graph for the I2C topology. If you do not "
"understand this graph at first glance, do not be afraid to continue reading "
"this doc and review it when you finish reading."
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:136
msgid "Distinguish Physical and Logical I2C Bus"
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:138
msgid ""
"One simple way to distinguish between a physical I2C bus and a logical I2C "
"bus, is to read the symbolic link ``device`` under the I2C bus directory by "
"using command ``ls -l`` or ``readlink``."
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:142
msgid ""
"An alternative symbolic link to check is ``mux_device``. This link only "
"exists in logical I2C bus directory which is fanned out from another I2C "
"bus. Reading this link will also tell you which I2C MUX device created this "
"logical I2C bus."
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:147
msgid ""
"If the symbolic link points to a directory ending with ``.i2c``, it should "
"be a physical I2C bus, directly abstracting a physical I2C bus controller. "
"For example::"
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:156
msgid ""
"In this case, ``i2c-7`` is a physical I2C bus, so it does not have the "
"symbolic link ``mux_device`` under its directory. And if the kernel software "
"developer follows the common practice by not renaming physical I2C buses, "
"this should also mean the physical I2C bus controller 7 of the system."
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:161
msgid ""
"On the other hand, if the symbolic link points to another I2C bus, the I2C "
"bus presented by the current directory has to be a logical bus. The I2C bus "
"pointed by the link is the parent bus which may be either a physical I2C bus "
"or a logical one. In this case, the I2C bus presented by the current "
"directory abstracts an I2C MUX channel under the parent bus."
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:167
msgid "For example::"
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:174
msgid ""
"``i2c-73`` is a logical bus fanout by an I2C MUX under ``i2c-7`` whose I2C "
"address is 0x71. Whenever we access an I2C device with bus 73, the kernel "
"will always switch the I2C MUX addressed 0x71 to the proper channel for you "
"as part of the abstraction."
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:181
msgid "Finding out Logical I2C Bus Number"
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:183
msgid ""
"In this section, we will describe how to find out the logical I2C bus number "
"representing certain I2C MUX channels based on the knowledge of physical "
"hardware I2C topology."
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:187
msgid ""
"In this example, we have a system which has a physical I2C bus 7 and not "
"renamed in DTS. There is a 4-channel MUX at address 0x71 on that bus. There "
"is another 8-channel MUX at address 0x72 behind the channel 1 of the 0x71 "
"MUX. Let us navigate through Sysfs and find out the logical I2C bus number "
"of the channel 3 of the 0x72 MUX."
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:193
msgid "First of all, let us go to the directory of ``i2c-7``::"
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:202
msgid "There, we see the 0x71 MUX as ``7-0071``. Go inside it::"
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:210
msgid "Read the link ``channel-1`` using ``readlink`` or ``ls -l``::"
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:215
msgid ""
"We find out that the channel 1 of 0x71 MUX on ``i2c-7`` is assigned with a "
"logical I2C bus number of 73. Let us continue the journey to directory "
"``i2c-73`` in either ways::"
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:231
msgid ""
"Either ways, you will end up in the directory of ``i2c-73``. Similar to "
"above, we can now find the 0x72 MUX and what logical I2C bus numbers that "
"its channels are assigned::"
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:251
msgid ""
"There, we find out the logical I2C bus number of the channel 3 of the 0x72 "
"MUX is 81. We can later use this number to switch to its own I2C Sysfs "
"directory or issue ``i2c-tools`` commands."
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:255
msgid ""
"Tip: Once you understand the I2C topology with MUX, command `i2cdetect -l "
"<https://manpages.debian.org/unstable/i2c-tools/i2cdetect.8.en.html>`_ in "
"`I2C Tools <https://i2c.wiki.kernel.org/index.php/I2C_Tools>`_ can give you "
"an overview of the I2C topology easily, if it is available on your system. "
"For example::"
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:278
msgid "Pinned Logical I2C Bus Number"
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:280
msgid ""
"If not specified in DTS, when an I2C MUX driver is applied and the MUX "
"device is successfully probed, the kernel will assign the MUX channels with "
"a logical bus number based on the current biggest logical bus number "
"incrementally. For example, if the system has ``i2c-15`` as the highest "
"logical bus number, and a 4-channel MUX is applied successfully, we will "
"have ``i2c-16`` for the MUX channel 0, and all the way to ``i2c-19`` for the "
"MUX channel 3."
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:287
msgid ""
"The kernel software developer is able to pin the fanout MUX channels to a "
"static logical I2C bus number in the DTS. This doc will not go through the "
"details on how to implement this in DTS, but we can see an example in: "
"``arch/arm/boot/dts/aspeed-bmc-facebook-wedge400.dts``"
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:292
msgid ""
"In the above example, there is an 8-channel I2C MUX at address 0x70 on "
"physical I2C bus 2. The channel 2 of the MUX is defined as ``imux18`` in "
"DTS, and pinned to logical I2C bus number 18 with the line of ``i2c18 = "
"&imux18;`` in section ``aliases``."
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:297
msgid ""
"Take it further, it is possible to design a logical I2C bus number schema "
"that can be easily remembered by humans or calculated arithmetically. For "
"example, we can pin the fanout channels of a MUX on bus 3 to start at 30. So "
"30 will be the logical bus number of the channel 0 of the MUX on bus 3, and "
"37 will be the logical bus number of the channel 7 of the MUX on bus 3."
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:304
msgid "I2C Devices"
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:306
msgid ""
"In previous sections, we mostly covered the I2C bus. In this section, let us "
"see what we can learn from the I2C device directory whose link name is in "
"the format of ``${bus}-${addr}``. The ``${bus}`` part in the name is a "
"logical I2C bus decimal number, while the ``${addr}`` part is a hex number "
"of the I2C address of each device."
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:313
msgid "I2C Device Directory Content"
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:315
msgid ""
"Inside each I2C device directory, there is a file named ``name``. This file "
"tells what device name it was used for the kernel driver to probe this "
"device. Use command ``cat`` to read its content. For example::"
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:326
msgid ""
"There is a symbolic link named ``driver`` to tell what Linux kernel driver "
"was used to probe this device::"
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:334
msgid ""
"But if the link ``driver`` does not exist at the first place, it may mean "
"that the kernel driver failed to probe this device due to some errors. The "
"error may be found in ``dmesg``::"
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:344
msgid ""
"Depending on what the I2C device is and what kernel driver was used to probe "
"the device, we may have different content in the device directory."
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:348
msgid "I2C MUX Device"
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:350
msgid ""
"While you may be already aware of this in previous sections, an I2C MUX "
"device will have symbolic link ``channel-*`` inside its device directory. "
"These symbolic links point to their logical I2C bus directories::"
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:365
msgid "I2C Sensor Device / Hwmon"
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:367
msgid ""
"I2C sensor device is also common to see. If they are bound by a kernel hwmon "
"(Hardware Monitoring) driver successfully, you will see a ``hwmon`` "
"directory inside the I2C device directory. Keep digging into it, you will "
"find the Hwmon Sysfs for the I2C sensor device::"
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:380
msgid "For more info on the Hwmon Sysfs, refer to the doc:"
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:382
msgid "../hwmon/sysfs-interface.rst"
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:385
msgid "Instantiate I2C Devices in I2C Sysfs"
msgstr ""

#: ../../../i2c/i2c-sysfs.rst:387
msgid ""
"Refer to section \"Method 4: Instantiate from user-space\" of instantiating-"
"devices.rst"
msgstr ""
