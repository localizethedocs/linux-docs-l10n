# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../iio/iio_dmabuf_api.rst:5
msgid "High-speed DMABUF interface for IIO"
msgstr ""

#: ../../../iio/iio_dmabuf_api.rst:8
msgid "1. Overview"
msgstr ""

#: ../../../iio/iio_dmabuf_api.rst:10
msgid ""
"The Industrial I/O subsystem supports access to buffers through a file-based "
"interface, with read() and write() access calls through the IIO device's dev "
"node."
msgstr ""

#: ../../../iio/iio_dmabuf_api.rst:14
msgid ""
"It additionally supports a DMABUF based interface, where the userspace can "
"attach DMABUF objects (externally created) to an IIO buffer, and "
"subsequently use them for data transfers."
msgstr ""

#: ../../../iio/iio_dmabuf_api.rst:18
msgid ""
"A userspace application can then use this interface to share DMABUF objects "
"between several interfaces, allowing it to transfer data in a zero-copy "
"fashion, for instance between IIO and the USB stack."
msgstr ""

#: ../../../iio/iio_dmabuf_api.rst:22
msgid ""
"The userspace application can also memory-map the DMABUF objects, and access "
"the sample data directly. The advantage of doing this vs. the read() "
"interface is that it avoids an extra copy of the data between the kernel and "
"userspace. This is particularly useful for high-speed devices which produce "
"several megabytes or even gigabytes of data per second. It does however "
"increase the userspace-kernelspace synchronization overhead, as the "
"DMA_BUF_SYNC_START and DMA_BUF_SYNC_END IOCTLs have to be used for data "
"integrity."
msgstr ""

#: ../../../iio/iio_dmabuf_api.rst:32
msgid "2. User API"
msgstr ""

#: ../../../iio/iio_dmabuf_api.rst:34
msgid ""
"As part of this interface, three new IOCTLs have been added. These three "
"IOCTLs have to be performed on the IIO buffer's file descriptor, which can "
"be obtained using the IIO_BUFFER_GET_FD_IOCTL() ioctl."
msgstr ""

#: ../../../iio/iio_dmabuf_api.rst:38
msgid "``IIO_BUFFER_DMABUF_ATTACH_IOCTL(int fd)``"
msgstr ""

#: ../../../iio/iio_dmabuf_api.rst:39
msgid ""
"Attach the DMABUF object, identified by its file descriptor, to the IIO "
"buffer. Returns zero on success, and a negative errno value on error."
msgstr ""

#: ../../../iio/iio_dmabuf_api.rst:43
msgid "``IIO_BUFFER_DMABUF_DETACH_IOCTL(int fd)``"
msgstr ""

#: ../../../iio/iio_dmabuf_api.rst:44
msgid ""
"Detach the given DMABUF object, identified by its file descriptor, from the "
"IIO buffer. Returns zero on success, and a negative errno value on error."
msgstr ""

#: ../../../iio/iio_dmabuf_api.rst:48
msgid ""
"Note that closing the IIO buffer's file descriptor will automatically detach "
"all previously attached DMABUF objects."
msgstr ""

#: ../../../iio/iio_dmabuf_api.rst:51
msgid "``IIO_BUFFER_DMABUF_ENQUEUE_IOCTL(struct iio_dmabuf *iio_dmabuf)``"
msgstr ""

#: ../../../iio/iio_dmabuf_api.rst:52
msgid ""
"Enqueue a previously attached DMABUF object to the buffer queue. Enqueued "
"DMABUFs will be read from (if output buffer) or written to (if input buffer) "
"as long as the buffer is enabled."
msgstr ""
