# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../usb/raw-gadget.rst:3
msgid "USB Raw Gadget"
msgstr ""

#: ../../../usb/raw-gadget.rst:5
msgid ""
"USB Raw Gadget is a gadget driver that gives userspace low-level control "
"over the gadget's communication process."
msgstr ""

#: ../../../usb/raw-gadget.rst:8
msgid ""
"Like any other gadget driver, Raw Gadget implements USB devices via the USB "
"gadget API. Unlike most gadget drivers, Raw Gadget does not implement any "
"concrete USB functions itself but requires userspace to do that."
msgstr ""

#: ../../../usb/raw-gadget.rst:12
msgid ""
"Raw Gadget is currently a strictly debugging feature and should not be used "
"in production. Use GadgetFS instead."
msgstr ""

#: ../../../usb/raw-gadget.rst:15
msgid "Enabled with CONFIG_USB_RAW_GADGET."
msgstr ""

#: ../../../usb/raw-gadget.rst:18
msgid "Comparison to GadgetFS"
msgstr ""

#: ../../../usb/raw-gadget.rst:20
msgid ""
"Raw Gadget is similar to GadgetFS but provides more direct access to the USB "
"gadget layer for userspace. The key differences are:"
msgstr ""

#: ../../../usb/raw-gadget.rst:23
msgid ""
"Raw Gadget passes every USB request to userspace to get a response, while "
"GadgetFS responds to some USB requests internally based on the provided "
"descriptors. Note that the UDC driver might respond to some requests on its "
"own and never forward them to the gadget layer."
msgstr ""

#: ../../../usb/raw-gadget.rst:28
msgid ""
"Raw Gadget allows providing arbitrary data as responses to USB requests, "
"while GadgetFS performs sanity checks on the provided USB descriptors. This "
"makes Raw Gadget suitable for fuzzing by providing malformed data as "
"responses to USB requests."
msgstr ""

#: ../../../usb/raw-gadget.rst:33
msgid ""
"Raw Gadget provides a way to select a UDC device/driver to bind to, while "
"GadgetFS currently binds to the first available UDC. This allows having "
"multiple Raw Gadget instances bound to different UDCs."
msgstr ""

#: ../../../usb/raw-gadget.rst:37
msgid ""
"Raw Gadget explicitly exposes information about endpoints addresses and "
"capabilities. This allows the user to write UDC-agnostic gadgets."
msgstr ""

#: ../../../usb/raw-gadget.rst:40
msgid ""
"Raw Gadget has an ioctl-based interface instead of a filesystem-based one."
msgstr ""

#: ../../../usb/raw-gadget.rst:44
msgid "Userspace interface"
msgstr ""

#: ../../../usb/raw-gadget.rst:46
msgid ""
"The user can interact with Raw Gadget by opening ``/dev/raw-gadget`` and "
"issuing ioctl calls; see the comments in include/uapi/linux/usb/raw_gadget.h "
"for details. Multiple Raw Gadget instances (bound to different UDCs) can be "
"used at the same time."
msgstr ""

#: ../../../usb/raw-gadget.rst:51
msgid "A typical usage scenario of Raw Gadget:"
msgstr ""

#: ../../../usb/raw-gadget.rst:53
msgid "Create a Raw Gadget instance by opening ``/dev/raw-gadget``."
msgstr ""

#: ../../../usb/raw-gadget.rst:54
msgid "Initialize the instance via ``USB_RAW_IOCTL_INIT``."
msgstr ""

#: ../../../usb/raw-gadget.rst:55
msgid "Launch the instance with ``USB_RAW_IOCTL_RUN``."
msgstr ""

#: ../../../usb/raw-gadget.rst:56
msgid ""
"In a loop issue ``USB_RAW_IOCTL_EVENT_FETCH`` to receive events from Raw "
"Gadget and react to those depending on what kind of USB gadget must be "
"implemented."
msgstr ""

#: ../../../usb/raw-gadget.rst:60
msgid ""
"Note that some UDC drivers have fixed addresses assigned to endpoints, and "
"therefore arbitrary endpoint addresses cannot be used in the descriptors. "
"Nevertheless, Raw Gadget provides a UDC-agnostic way to write USB gadgets. "
"Once ``USB_RAW_EVENT_CONNECT`` is received via "
"``USB_RAW_IOCTL_EVENT_FETCH``, ``USB_RAW_IOCTL_EPS_INFO`` can be used to "
"find out information about the endpoints that the UDC driver has. Based on "
"that, userspace must choose UDC endpoints for the gadget and assign "
"addresses in the endpoint descriptors correspondingly."
msgstr ""

#: ../../../usb/raw-gadget.rst:69
msgid "Raw Gadget usage examples and a test suite:"
msgstr ""

#: ../../../usb/raw-gadget.rst:71
msgid "https://github.com/xairy/raw-gadget"
msgstr ""

#: ../../../usb/raw-gadget.rst:74
msgid "Internal details"
msgstr ""

#: ../../../usb/raw-gadget.rst:76
msgid ""
"Every Raw Gadget endpoint read/write ioctl submits a USB request and waits "
"until its completion. This is done deliberately to assist with coverage-"
"guided fuzzing by having a single syscall fully process a single USB "
"request. This feature must be kept in the implementation."
msgstr ""

#: ../../../usb/raw-gadget.rst:82
msgid "Potential future improvements"
msgstr ""

#: ../../../usb/raw-gadget.rst:84
msgid ""
"Support ``O_NONBLOCK`` I/O. This would be another mode of operation, where "
"Raw Gadget would not wait until the completion of each USB request."
msgstr ""

#: ../../../usb/raw-gadget.rst:87
msgid ""
"Support USB 3 features (accept SS endpoint companion descriptor when "
"enabling endpoints; allow providing ``stream_id`` for bulk transfers)."
msgstr ""

#: ../../../usb/raw-gadget.rst:90
msgid ""
"Support ISO transfer features (expose ``frame_number`` for completed "
"requests)."
msgstr ""
