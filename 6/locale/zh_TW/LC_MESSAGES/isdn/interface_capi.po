# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-30 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../isdn/interface_capi.rst:3
msgid "Kernel CAPI Interface to Hardware Drivers"
msgstr ""

#: ../../../isdn/interface_capi.rst:6
msgid "1. Overview"
msgstr ""

#: ../../../isdn/interface_capi.rst:8
msgid ""
"From the CAPI 2.0 specification: COMMON-ISDN-API (CAPI) is an application "
"programming interface standard used to access ISDN equipment connected to "
"basic rate interfaces (BRI) and primary rate interfaces (PRI)."
msgstr ""

#: ../../../isdn/interface_capi.rst:13
msgid ""
"Kernel CAPI operates as a dispatching layer between CAPI applications and "
"CAPI hardware drivers. Hardware drivers register ISDN devices (controllers, "
"in CAPI lingo) with Kernel CAPI to indicate their readiness to provide their "
"service to CAPI applications. CAPI applications also register with Kernel "
"CAPI, requesting association with a CAPI device. Kernel CAPI then dispatches "
"the application registration to an available device, forwarding it to the "
"corresponding hardware driver. Kernel CAPI then forwards CAPI messages in "
"both directions between the application and the hardware driver."
msgstr ""

#: ../../../isdn/interface_capi.rst:22
msgid ""
"Format and semantics of CAPI messages are specified in the CAPI 2.0 "
"standard. This standard is freely available from https://www.capi.org."
msgstr ""

#: ../../../isdn/interface_capi.rst:27
msgid "2. Driver and Device Registration"
msgstr ""

#: ../../../isdn/interface_capi.rst:29
msgid ""
"CAPI drivers must register each of the ISDN devices they control with Kernel "
"CAPI by calling the Kernel CAPI function attach_capi_ctr() with a pointer to "
"a struct capi_ctr before they can be used. This structure must be filled "
"with the names of the driver and controller, and a number of callback "
"function pointers which are subsequently used by Kernel CAPI for "
"communicating with the driver. The registration can be revoked by calling "
"the function detach_capi_ctr() with a pointer to the same struct capi_ctr."
msgstr ""

#: ../../../isdn/interface_capi.rst:37
msgid ""
"Before the device can be actually used, the driver must fill in the device "
"information fields 'manu', 'version', 'profile' and 'serial' in the capi_ctr "
"structure of the device, and signal its readiness by calling "
"capi_ctr_ready(). From then on, Kernel CAPI may call the registered callback "
"functions for the device."
msgstr ""

#: ../../../isdn/interface_capi.rst:43
msgid ""
"If the device becomes unusable for any reason (shutdown, disconnect ...), "
"the driver has to call capi_ctr_down(). This will prevent further calls to "
"the callback functions by Kernel CAPI."
msgstr ""

#: ../../../isdn/interface_capi.rst:49
msgid "3. Application Registration and Communication"
msgstr ""

#: ../../../isdn/interface_capi.rst:51
msgid ""
"Kernel CAPI forwards registration requests from applications (calls to CAPI "
"operation CAPI_REGISTER) to an appropriate hardware driver by calling its "
"register_appl() callback function. A unique Application ID (ApplID, u16) is "
"allocated by Kernel CAPI and passed to register_appl() along with the "
"parameter structure provided by the application. This is analogous to the "
"open() operation on regular files or character devices."
msgstr ""

#: ../../../isdn/interface_capi.rst:58
msgid ""
"After a successful return from register_appl(), CAPI messages from the "
"application may be passed to the driver for the device via calls to the "
"send_message() callback function. Conversely, the driver may call Kernel "
"CAPI's capi_ctr_handle_message() function to pass a received CAPI message to "
"Kernel CAPI for forwarding to an application, specifying its ApplID."
msgstr ""

#: ../../../isdn/interface_capi.rst:64
msgid ""
"Deregistration requests (CAPI operation CAPI_RELEASE) from applications are "
"forwarded as calls to the release_appl() callback function, passing the same "
"ApplID as with register_appl(). After return from release_appl(), no CAPI "
"messages for that application may be passed to or from the device anymore."
msgstr ""

#: ../../../isdn/interface_capi.rst:71
msgid "4. Data Structures"
msgstr ""

#: ../../../isdn/interface_capi.rst:74
msgid "4.1 struct capi_driver"
msgstr ""

#: ../../../isdn/interface_capi.rst:76
msgid ""
"This structure describes a Kernel CAPI driver itself. It is used in the "
"register_capi_driver() and unregister_capi_driver() functions, and contains "
"the following non-private fields, all to be set by the driver before calling "
"register_capi_driver():"
msgstr ""

#: ../../../isdn/interface_capi.rst:81 ../../../isdn/interface_capi.rst:105
msgid "``char name[32]``"
msgstr ""

#: ../../../isdn/interface_capi.rst:82 ../../../isdn/interface_capi.rst:109
msgid "the name of the driver, as a zero-terminated ASCII string"
msgstr ""

#: ../../../isdn/interface_capi.rst:83
msgid "``char revision[32]``"
msgstr ""

#: ../../../isdn/interface_capi.rst:84
msgid "the revision number of the driver, as a zero-terminated ASCII string"
msgstr ""

#: ../../../isdn/interface_capi.rst:87
msgid "4.2 struct capi_ctr"
msgstr ""

#: ../../../isdn/interface_capi.rst:89
msgid ""
"This structure describes an ISDN device (controller) handled by a Kernel "
"CAPI driver. After registration via the attach_capi_ctr() function it is "
"passed to all controller specific lower layer interface and callback "
"functions to identify the controller to operate on."
msgstr ""

#: ../../../isdn/interface_capi.rst:94
msgid "It contains the following non-private fields:"
msgstr ""

#: ../../../isdn/interface_capi.rst:97
msgid "to be set by the driver before calling attach_capi_ctr():"
msgstr ""

#: ../../../isdn/interface_capi.rst:99
msgid "``struct module *owner``"
msgstr ""

#: ../../../isdn/interface_capi.rst:100
msgid "pointer to the driver module owning the device"
msgstr ""

#: ../../../isdn/interface_capi.rst:102
msgid "``void *driverdata``"
msgstr ""

#: ../../../isdn/interface_capi.rst:103
msgid "an opaque pointer to driver specific data, not touched by Kernel CAPI"
msgstr ""

#: ../../../isdn/interface_capi.rst:106
msgid "the name of the controller, as a zero-terminated ASCII string"
msgstr ""

#: ../../../isdn/interface_capi.rst:108
msgid "``char *driver_name``"
msgstr ""

#: ../../../isdn/interface_capi.rst:111
msgid "``int (*load_firmware)(struct capi_ctr *ctrlr, capiloaddata *ldata)``"
msgstr ""

#: ../../../isdn/interface_capi.rst:112
msgid ""
"(optional) pointer to a callback function for sending firmware and "
"configuration data to the device"
msgstr ""

#: ../../../isdn/interface_capi.rst:115 ../../../isdn/interface_capi.rst:126
msgid "The function may return before the operation has completed."
msgstr ""

#: ../../../isdn/interface_capi.rst:117
msgid "Completion must be signalled by a call to capi_ctr_ready()."
msgstr ""

#: ../../../isdn/interface_capi.rst:119
msgid ""
"Return value: 0 on success, error code on error Called in process context."
msgstr ""

#: ../../../isdn/interface_capi.rst:122
msgid "``void (*reset_ctr)(struct capi_ctr *ctrlr)``"
msgstr ""

#: ../../../isdn/interface_capi.rst:123
msgid ""
"(optional) pointer to a callback function for stopping the device, releasing "
"all registered applications"
msgstr ""

#: ../../../isdn/interface_capi.rst:128
msgid "Completion must be signalled by a call to capi_ctr_down()."
msgstr ""

#: ../../../isdn/interface_capi.rst:130
msgid "Called in process context."
msgstr ""

#: ../../../isdn/interface_capi.rst:132
msgid ""
"``void (*register_appl)(struct capi_ctr *ctrlr, u16 applid, "
"capi_register_params *rparam)``"
msgstr ""

#: ../../../isdn/interface_capi.rst:133
msgid ""
"pointers to callback function for registration of applications with the "
"device"
msgstr ""

#: ../../../isdn/interface_capi.rst:136 ../../../isdn/interface_capi.rst:143
msgid ""
"Calls to these functions are serialized by Kernel CAPI so that only one call "
"to any of them is active at any time."
msgstr ""

#: ../../../isdn/interface_capi.rst:139
msgid "``void (*release_appl)(struct capi_ctr *ctrlr, u16 applid)``"
msgstr ""

#: ../../../isdn/interface_capi.rst:140
msgid ""
"pointers to callback functions deregistration of applications with the device"
msgstr ""

#: ../../../isdn/interface_capi.rst:146
msgid "``u16  (*send_message)(struct capi_ctr *ctrlr, struct sk_buff *skb)``"
msgstr ""

#: ../../../isdn/interface_capi.rst:147
msgid "pointer to a callback function for sending a CAPI message to the device"
msgstr ""

#: ../../../isdn/interface_capi.rst:150
msgid "Return value: CAPI error code"
msgstr ""

#: ../../../isdn/interface_capi.rst:152
msgid ""
"If the method returns 0 (CAPI_NOERROR) the driver has taken ownership of the "
"skb and the caller may no longer access it. If it returns a non-zero (error) "
"value then ownership of the skb returns to the caller who may reuse or free "
"it."
msgstr ""

#: ../../../isdn/interface_capi.rst:157
msgid ""
"The return value should only be used to signal problems with respect to "
"accepting or queueing the message. Errors occurring during the actual "
"processing of the message should be signaled with an appropriate reply "
"message."
msgstr ""

#: ../../../isdn/interface_capi.rst:162
msgid "May be called in process or interrupt context."
msgstr ""

#: ../../../isdn/interface_capi.rst:164
msgid ""
"Calls to this function are not serialized by Kernel CAPI, ie. it must be "
"prepared to be re-entered."
msgstr ""

#: ../../../isdn/interface_capi.rst:167
msgid "``char *(*procinfo)(struct capi_ctr *ctrlr)``"
msgstr ""

#: ../../../isdn/interface_capi.rst:168
msgid ""
"pointer to a callback function returning the entry for the device in the "
"CAPI controller info table, /proc/capi/controller"
msgstr ""

#: ../../../isdn/interface_capi.rst:171
msgid "Note:"
msgstr ""

#: ../../../isdn/interface_capi.rst:172
msgid ""
"Callback functions except send_message() are never called in interrupt "
"context."
msgstr ""

#: ../../../isdn/interface_capi.rst:176
msgid "to be filled in before calling capi_ctr_ready():"
msgstr ""

#: ../../../isdn/interface_capi.rst:178
msgid "``u8 manu[CAPI_MANUFACTURER_LEN]``"
msgstr ""

#: ../../../isdn/interface_capi.rst:179
msgid "value to return for CAPI_GET_MANUFACTURER"
msgstr ""

#: ../../../isdn/interface_capi.rst:181
msgid "``capi_version version``"
msgstr ""

#: ../../../isdn/interface_capi.rst:182
msgid "value to return for CAPI_GET_VERSION"
msgstr ""

#: ../../../isdn/interface_capi.rst:184
msgid "``capi_profile profile``"
msgstr ""

#: ../../../isdn/interface_capi.rst:185
msgid "value to return for CAPI_GET_PROFILE"
msgstr ""

#: ../../../isdn/interface_capi.rst:187
msgid "``u8 serial[CAPI_SERIAL_LEN]``"
msgstr ""

#: ../../../isdn/interface_capi.rst:188
msgid "value to return for CAPI_GET_SERIAL"
msgstr ""

#: ../../../isdn/interface_capi.rst:192
msgid "4.3 SKBs"
msgstr ""

#: ../../../isdn/interface_capi.rst:194
msgid ""
"CAPI messages are passed between Kernel CAPI and the driver via "
"send_message() and capi_ctr_handle_message(), stored in the data portion of "
"a socket buffer (skb).  Each skb contains a single CAPI message coded "
"according to the CAPI 2.0 standard."
msgstr ""

#: ../../../isdn/interface_capi.rst:199
msgid ""
"For the data transfer messages, DATA_B3_REQ and DATA_B3_IND, the actual "
"payload data immediately follows the CAPI message itself within the same "
"skb. The Data and Data64 parameters are not used for processing. The Data64 "
"parameter may be omitted by setting the length field of the CAPI message to "
"22 instead of 30."
msgstr ""

#: ../../../isdn/interface_capi.rst:207
msgid "4.4 The _cmsg Structure"
msgstr ""

#: ../../../isdn/interface_capi.rst:209
msgid "(declared in <linux/isdn/capiutil.h>)"
msgstr ""

#: ../../../isdn/interface_capi.rst:211
msgid ""
"The _cmsg structure stores the contents of a CAPI 2.0 message in an easily "
"accessible form. It contains members for all possible CAPI 2.0 parameters, "
"including subparameters of the Additional Info and B Protocol structured "
"parameters, with the following exceptions:"
msgstr ""

#: ../../../isdn/interface_capi.rst:216
msgid "second Calling party number (CONNECT_IND)"
msgstr ""

#: ../../../isdn/interface_capi.rst:218
msgid "Data64 (DATA_B3_REQ and DATA_B3_IND)"
msgstr ""

#: ../../../isdn/interface_capi.rst:220
msgid ""
"Sending complete (subparameter of Additional Info, CONNECT_REQ and INFO_REQ)"
msgstr ""

#: ../../../isdn/interface_capi.rst:222
msgid ""
"Global Configuration (subparameter of B Protocol, CONNECT_REQ, CONNECT_RESP "
"and SELECT_B_PROTOCOL_REQ)"
msgstr ""

#: ../../../isdn/interface_capi.rst:225
msgid ""
"Only those parameters appearing in the message type currently being "
"processed are actually used. Unused members should be set to zero."
msgstr ""

#: ../../../isdn/interface_capi.rst:228
msgid ""
"Members are named after the CAPI 2.0 standard names of the parameters they "
"represent. See <linux/isdn/capiutil.h> for the exact spelling. Member data "
"types are:"
msgstr ""

#: ../../../isdn/interface_capi.rst:233
msgid "u8"
msgstr ""

#: ../../../isdn/interface_capi.rst:233
msgid "for CAPI parameters of type 'byte'"
msgstr ""

#: ../../../isdn/interface_capi.rst:235
msgid "u16"
msgstr ""

#: ../../../isdn/interface_capi.rst:235
msgid "for CAPI parameters of type 'word'"
msgstr ""

#: ../../../isdn/interface_capi.rst:237
msgid "u32"
msgstr ""

#: ../../../isdn/interface_capi.rst:237
msgid "for CAPI parameters of type 'dword'"
msgstr ""

#: ../../../isdn/interface_capi.rst:239
msgid "_cstruct"
msgstr ""

#: ../../../isdn/interface_capi.rst:239
msgid ""
"for CAPI parameters of type 'struct' The member is a pointer to a buffer "
"containing the parameter in CAPI encoding (length + content). It may also be "
"NULL, which will be taken to represent an empty (zero length) parameter. "
"Subparameters are stored in encoded form within the content part."
msgstr ""

#: ../../../isdn/interface_capi.rst:245
msgid "_cmstruct"
msgstr ""

#: ../../../isdn/interface_capi.rst:245
msgid ""
"alternative representation for CAPI parameters of type 'struct' (used only "
"for the 'Additional Info' and 'B Protocol' parameters) The representation is "
"a single byte containing one of the values: CAPI_DEFAULT: The parameter is "
"empty/absent. CAPI_COMPOSE: The parameter is present. Subparameter values "
"are stored individually in the corresponding _cmsg structure members."
msgstr ""

#: ../../../isdn/interface_capi.rst:256
msgid "5. Lower Layer Interface Functions"
msgstr ""

#: ../../../isdn/interface_capi.rst:263
msgid "register/unregister a device (controller) with Kernel CAPI"
msgstr ""

#: ../../../isdn/interface_capi.rst:270
msgid "signal controller ready/not ready"
msgstr ""

#: ../../../isdn/interface_capi.rst:277
msgid ""
"pass a received CAPI message to Kernel CAPI for forwarding to the specified "
"application"
msgstr ""

#: ../../../isdn/interface_capi.rst:282
msgid "6. Helper Functions and Macros"
msgstr ""

#: ../../../isdn/interface_capi.rst:284
msgid ""
"Macros to extract/set element values from/in a CAPI message header (from "
"<linux/isdn/capiutil.h>):"
msgstr ""

#: ../../../isdn/interface_capi.rst:288
msgid "Get Macro"
msgstr ""

#: ../../../isdn/interface_capi.rst:288
msgid "Set Macro"
msgstr ""

#: ../../../isdn/interface_capi.rst:288
msgid "Element (Type)"
msgstr ""

#: ../../../isdn/interface_capi.rst:290
msgid "CAPIMSG_LEN(m)"
msgstr ""

#: ../../../isdn/interface_capi.rst:290
msgid "CAPIMSG_SETLEN(m, len)"
msgstr ""

#: ../../../isdn/interface_capi.rst:290
msgid "Total Length (u16)"
msgstr ""

#: ../../../isdn/interface_capi.rst:291
msgid "CAPIMSG_APPID(m)"
msgstr ""

#: ../../../isdn/interface_capi.rst:291
msgid "CAPIMSG_SETAPPID(m, applid)"
msgstr ""

#: ../../../isdn/interface_capi.rst:291
msgid "ApplID (u16)"
msgstr ""

#: ../../../isdn/interface_capi.rst:292
msgid "CAPIMSG_COMMAND(m)"
msgstr ""

#: ../../../isdn/interface_capi.rst:292
msgid "CAPIMSG_SETCOMMAND(m,cmd)"
msgstr ""

#: ../../../isdn/interface_capi.rst:292
msgid "Command (u8)"
msgstr ""

#: ../../../isdn/interface_capi.rst:293
msgid "CAPIMSG_SUBCOMMAND(m)"
msgstr ""

#: ../../../isdn/interface_capi.rst:293
msgid "CAPIMSG_SETSUBCOMMAND(m, cmd)"
msgstr ""

#: ../../../isdn/interface_capi.rst:293
msgid "Subcommand (u8)"
msgstr ""

#: ../../../isdn/interface_capi.rst:294
msgid "CAPIMSG_CMD(m)"
msgstr ""

#: ../../../isdn/interface_capi.rst:294
msgid "Command*256 + Subcommand (u16)"
msgstr ""

#: ../../../isdn/interface_capi.rst:296
msgid "CAPIMSG_MSGID(m)"
msgstr ""

#: ../../../isdn/interface_capi.rst:296
msgid "CAPIMSG_SETMSGID(m, msgid)"
msgstr ""

#: ../../../isdn/interface_capi.rst:296
msgid "Message Number (u16)"
msgstr ""

#: ../../../isdn/interface_capi.rst:298
msgid "CAPIMSG_CONTROL(m)"
msgstr ""

#: ../../../isdn/interface_capi.rst:298
msgid "CAPIMSG_SETCONTROL(m, contr)"
msgstr ""

#: ../../../isdn/interface_capi.rst:298
msgid "Controller/PLCI/NCCI (u32)"
msgstr ""

#: ../../../isdn/interface_capi.rst:300
msgid "CAPIMSG_DATALEN(m)"
msgstr ""

#: ../../../isdn/interface_capi.rst:300
msgid "CAPIMSG_SETDATALEN(m, len)"
msgstr ""

#: ../../../isdn/interface_capi.rst:300
msgid "Data Length (u16)"
msgstr ""

#: ../../../isdn/interface_capi.rst:304
msgid ""
"Library functions for working with _cmsg structures (from <linux/isdn/"
"capiutil.h>):"
msgstr ""

#: ../../../isdn/interface_capi.rst:307
msgid "``char *capi_cmd2str(u8 Command, u8 Subcommand)``"
msgstr ""

#: ../../../isdn/interface_capi.rst:308
msgid ""
"Returns the CAPI 2.0 message name corresponding to the given command and "
"subcommand values, as a static ASCII string. The return value may be NULL if "
"the command/subcommand is not one of those defined in the CAPI 2.0 standard."
msgstr ""

#: ../../../isdn/interface_capi.rst:315
msgid "7. Debugging"
msgstr ""

#: ../../../isdn/interface_capi.rst:317
msgid ""
"The module kernelcapi has a module parameter showcapimsgs controlling some "
"debugging output produced by the module. It can only be set when the module "
"is loaded, via a parameter \"showcapimsgs=<n>\" to the modprobe command, "
"either on the command line or in the configuration file."
msgstr ""

#: ../../../isdn/interface_capi.rst:322
msgid ""
"If the lowest bit of showcapimsgs is set, kernelcapi logs controller and "
"application up and down events."
msgstr ""

#: ../../../isdn/interface_capi.rst:325
msgid ""
"In addition, every registered CAPI controller has an associated traceflag "
"parameter controlling how CAPI messages sent from and to the controller are "
"logged. The traceflag parameter is initialized with the value of the "
"showcapimsgs parameter when the controller is registered, but can later be "
"changed via the MANUFACTURER_REQ command KCAPI_CMD_TRACE."
msgstr ""

#: ../../../isdn/interface_capi.rst:331
msgid ""
"If the value of traceflag is non-zero, CAPI messages are logged. DATA_B3 "
"messages are only logged if the value of traceflag is > 2."
msgstr ""

#: ../../../isdn/interface_capi.rst:334
msgid ""
"If the lowest bit of traceflag is set, only the command/subcommand and "
"message length are logged. Otherwise, kernelcapi logs a readable "
"representation of the entire message."
msgstr ""
