# SOME DESCRIPTIVE TITLE.
# Copyright (C) The kernel development community
# This file is distributed under the same license as the The Linux Kernel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Linux Kernel 6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-27 13:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../admin-guide/hw-vuln/spectre.rst:4
msgid "Spectre Side Channels"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:6
msgid ""
"Spectre is a class of side channel attacks that exploit branch prediction "
"and speculative execution on modern CPUs to read memory, possibly bypassing "
"access controls. Speculative execution side channel exploits do not modify "
"memory but attempt to infer privileged data in the memory."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:11
msgid "This document covers Spectre variant 1 and Spectre variant 2."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:14
msgid "Affected processors"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:16
msgid ""
"Speculative execution side channel methods affect a wide range of modern "
"high performance processors, since most modern high speed processors use "
"branch prediction and speculative execution."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:20
msgid "The following CPUs are vulnerable:"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:22
msgid "Intel Core, Atom, Pentium, and Xeon processors"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:24
msgid "AMD Phenom, EPYC, and Zen processors"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:26
msgid "IBM POWER and zSeries processors"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:28
msgid "Higher end ARM processors"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:30
msgid "Apple CPUs"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:32
msgid "Higher end MIPS CPUs"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:34
msgid ""
"Likely most other high performance CPUs. Contact your CPU vendor for details."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:36
msgid ""
"Whether a processor is affected or not can be read out from the Spectre "
"vulnerability files in sysfs. See :ref:`spectre_sys_info`."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:40
msgid "Related CVEs"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:42
msgid "The following CVE entries describe Spectre variants:"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:45
msgid "CVE-2017-5753"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:45
msgid "Bounds check bypass"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:45
#: ../../../admin-guide/hw-vuln/spectre.rst:156
#: ../../../admin-guide/hw-vuln/spectre.rst:460
msgid "Spectre variant 1"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:46
msgid "CVE-2017-5715"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:46
msgid "Branch target injection"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:46
#: ../../../admin-guide/hw-vuln/spectre.rst:201
#: ../../../admin-guide/hw-vuln/spectre.rst:478
msgid "Spectre variant 2"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:47
msgid "CVE-2019-1125"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:47
msgid "Spectre v1 swapgs"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:47
#: ../../../admin-guide/hw-vuln/spectre.rst:171
msgid "Spectre variant 1 (swapgs)"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:51
msgid "Problem"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:53
msgid ""
"CPUs use speculative operations to improve performance. That may leave "
"traces of memory accesses or computations in the processor's caches, "
"buffers, and branch predictors. Malicious software may be able to influence "
"the speculative execution paths, and then use the side effects of the "
"speculative execution in the CPUs' caches and buffers to infer privileged "
"data touched during the speculative execution."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:60
msgid ""
"Spectre variant 1 attacks take advantage of speculative execution of "
"conditional branches, while Spectre variant 2 attacks use speculative "
"execution of indirect branches to leak privileged memory. See :ref:`[1] "
"<spec_ref1>` :ref:`[5] <spec_ref5>` :ref:`[6] <spec_ref6>` :ref:`[7] "
"<spec_ref7>` :ref:`[10] <spec_ref10>` :ref:`[11] <spec_ref11>`."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:67
msgid "Spectre variant 1 (Bounds Check Bypass)"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:69
msgid ""
"The bounds check bypass attack :ref:`[2] <spec_ref2>` takes advantage of "
"speculative execution that bypasses conditional branch instructions used for "
"memory access bounds check (e.g. checking if the index of an array results "
"in memory access within a valid range). This results in memory accesses to "
"invalid memory (with out-of-bound index) that are done speculatively before "
"validation checks resolve. Such speculative memory accesses can leave side "
"effects, creating side channels which leak information to the attacker."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:78
msgid ""
"There are some extensions of Spectre variant 1 attacks for reading data over "
"the network, see :ref:`[12] <spec_ref12>`. However such attacks are "
"difficult, low bandwidth, fragile, and are considered low risk."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:82
msgid ""
"Note that, despite \"Bounds Check Bypass\" name, Spectre variant 1 is not "
"only about user-controlled array bounds checks.  It can affect any "
"conditional checks.  The kernel entry code interrupt, exception, and NMI "
"handlers all have conditional swapgs checks.  Those may be problematic in "
"the context of Spectre v1, as kernel code can speculatively run with a user "
"GS."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:90
msgid "Spectre variant 2 (Branch Target Injection)"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:92
msgid ""
"The branch target injection attack takes advantage of speculative execution "
"of indirect branches :ref:`[3] <spec_ref3>`.  The indirect branch predictors "
"inside the processor used to guess the target of indirect branches can be "
"influenced by an attacker, causing gadget code to be speculatively executed, "
"thus exposing sensitive data touched by the victim. The side effects left in "
"the CPU's caches during speculative execution can be measured to infer data "
"values."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:102
msgid ""
"In Spectre variant 2 attacks, the attacker can steer speculative indirect "
"branches in the victim to gadget code by poisoning the branch target buffer "
"of a CPU used for predicting indirect branch addresses. Such poisoning could "
"be done by indirect branching into existing code, with the address offset of "
"the indirect branch under the attacker's control. Since the branch "
"prediction on impacted hardware does not fully disambiguate branch address "
"and uses the offset for prediction, this could cause privileged code's "
"indirect branch to jump to a gadget code with the same offset."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:112
msgid ""
"The most useful gadgets take an attacker-controlled input parameter (such as "
"a register value) so that the memory read can be controlled. Gadgets without "
"input parameters might be possible, but the attacker would have very little "
"control over what memory can be read, reducing the risk of the attack "
"revealing useful data."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:118
msgid ""
"One other variant 2 attack vector is for the attacker to poison the return "
"stack buffer (RSB) :ref:`[13] <spec_ref13>` to cause speculative subroutine "
"return instruction execution to go to a gadget.  An attacker's imbalanced "
"subroutine call instructions might \"poison\" entries in the return stack "
"buffer which are later consumed by a victim's subroutine return "
"instructions.  This attack can be mitigated by flushing the return stack "
"buffer on context switch, or virtual machine (VM) exit."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:126
msgid ""
"On systems with simultaneous multi-threading (SMT), attacks are possible "
"from the sibling thread, as level 1 cache and branch target buffer (BTB) may "
"be shared between hardware threads in a CPU core.  A malicious program "
"running on the sibling thread may influence its peer's BTB to steer its "
"indirect branch speculations to gadget code, and measure the speculative "
"execution's side effects left in level 1 cache to infer the victim's data."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:134
msgid ""
"Yet another variant 2 attack vector is for the attacker to poison the Branch "
"History Buffer (BHB) to speculatively steer an indirect branch to a specific "
"Branch Target Buffer (BTB) entry, even if the entry isn't associated with "
"the source address of the indirect branch. Specifically, the BHB might be "
"shared across privilege levels even in the presence of Enhanced IBRS."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:141
msgid ""
"Previously the only known real-world BHB attack vector was via unprivileged "
"eBPF. Further research has found attacks that don't require unprivileged "
"eBPF. For a full mitigation against BHB attacks it is recommended to set "
"BHI_DIS_S or use the BHB clearing sequence."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:147
msgid "Attack scenarios"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:149
msgid ""
"The following list of attack scenarios have been anticipated, but may not "
"cover all possible attack vectors."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:153
msgid "1. A user process attacking the kernel"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:158
msgid ""
"The attacker passes a parameter to the kernel via a register or via a known "
"address in memory during a syscall. Such parameter may be used later by the "
"kernel as an index to an array or to derive a pointer for a Spectre variant "
"1 attack.  The index or pointer is invalid, but bound checks are bypassed in "
"the code branch taken for speculative execution. This could cause privileged "
"memory to be accessed and leaked."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:166
msgid ""
"For kernel code that has been identified where data pointers could "
"potentially be influenced for Spectre attacks, new \"nospec\" accessor "
"macros are used to prevent speculative loading of data."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:173
msgid ""
"An attacker can train the branch predictor to speculatively skip the swapgs "
"path for an interrupt or exception.  If they initialize the GS register to a "
"user-space value, if the swapgs is speculatively skipped, subsequent GS-"
"related percpu accesses in the speculation window will be done with the "
"attacker-controlled GS value.  This could cause privileged memory to be "
"accessed and leaked."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:180
msgid "For example:"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:189
msgid ""
"When coming from user space, the CPU can speculatively skip the swapgs, and "
"then do a speculative percpu load using the user GS value.  So the user can "
"speculatively force a read of any kernel value.  If a gadget exists which "
"uses the percpu value as an address in another load/store, then the contents "
"of the kernel value may become visible via an L1 side channel attack."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:196
msgid ""
"A similar attack exists when coming from kernel space.  The CPU can "
"speculatively do the swapgs, causing the user GS to get used for the rest of "
"the speculative window."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:203
msgid ""
"A spectre variant 2 attacker can :ref:`poison <poison_btb>` the branch "
"target buffer (BTB) before issuing syscall to launch an attack. After "
"entering the kernel, the kernel could use the poisoned branch target buffer "
"on indirect jump and jump to gadget code in speculative execution."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:209
msgid ""
"If an attacker tries to control the memory addresses leaked during "
"speculative execution, he would also need to pass a parameter to the gadget, "
"either through a register or a known address in memory. After the gadget has "
"executed, he can measure the side effect."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:214
msgid ""
"The kernel can protect itself against consuming poisoned branch target "
"buffer entries by using return trampolines (also known as \"retpoline\") :"
"ref:`[3] <spec_ref3>` :ref:`[9] <spec_ref9>` for all indirect branches. "
"Return trampolines trap speculative execution paths to prevent jumping to "
"gadget code during speculative execution. x86 CPUs with Enhanced Indirect "
"Branch Restricted Speculation (Enhanced IBRS) available in hardware should "
"use the feature to mitigate Spectre variant 2 instead of retpoline. Enhanced "
"IBRS is more efficient than retpoline."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:224
msgid ""
"There may be gadget code in firmware which could be exploited with Spectre "
"variant 2 attack by a rogue user process. To mitigate such attacks on x86, "
"Indirect Branch Restricted Speculation (IBRS) feature is turned on before "
"the kernel invokes any firmware code."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:230
msgid "2. A user process attacking another user process"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:232
msgid ""
"A malicious user process can try to attack another user process, either via "
"a context switch on the same hardware thread, or from the sibling "
"hyperthread sharing a physical processor core on simultaneous multi-"
"threading (SMT) system."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:237
msgid ""
"Spectre variant 1 attacks generally require passing parameters between the "
"processes, which needs a data passing relationship, such as remote procedure "
"calls (RPC).  Those parameters are used in gadget code to derive invalid "
"data pointers accessing privileged memory in the attacked process."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:243
msgid ""
"Spectre variant 2 attacks can be launched from a rogue process by :ref:"
"`poisoning <poison_btb>` the branch target buffer.  This can influence the "
"indirect branch targets for a victim process that either runs later on the "
"same hardware thread, or running concurrently on a sibling hardware thread "
"sharing the same physical core."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:249
msgid ""
"A user process can protect itself against Spectre variant 2 attacks by using "
"the prctl() syscall to disable indirect branch speculation for itself.  An "
"administrator can also cordon off an unsafe process from polluting the "
"branch target buffer by disabling the process's indirect branch speculation. "
"This comes with a performance cost from not using indirect branch "
"speculation and clearing the branch target buffer.  When SMT is enabled on "
"x86, for a process that has indirect branch speculation disabled, Single "
"Threaded Indirect Branch Predictors (STIBP) :ref:`[4] <spec_ref4>` are "
"turned on to prevent the sibling thread from controlling branch target "
"buffer.  In addition, the Indirect Branch Prediction Barrier (IBPB) is "
"issued to clear the branch target buffer when context switching to and from "
"such process."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:262
msgid ""
"On x86, the return stack buffer is stuffed on context switch. This prevents "
"the branch target buffer from being used for branch prediction when the "
"return stack buffer underflows while switching to a deeper call stack. Any "
"poisoned entries in the return stack buffer left by the previous process "
"will also be cleared."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:268
msgid ""
"User programs should use address space randomization to make attacks more "
"difficult (Set /proc/sys/kernel/randomize_va_space = 1 or 2)."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:272
msgid "3. A virtualized guest attacking the host"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:274
msgid ""
"The attack mechanism is similar to how user processes attack the kernel.  "
"The kernel is entered via hyper-calls or other virtualization exit paths."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:278
msgid ""
"For Spectre variant 1 attacks, rogue guests can pass parameters (e.g. in "
"registers) via hyper-calls to derive invalid pointers to speculate into "
"privileged memory after entering the kernel.  For places where such kernel "
"code has been identified, nospec accessor macros are used to stop "
"speculative memory access."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:284
msgid ""
"For Spectre variant 2 attacks, rogue guests can :ref:`poison <poison_btb>` "
"the branch target buffer or return stack buffer, causing the kernel to jump "
"to gadget code in the speculative execution paths."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:288
msgid ""
"To mitigate variant 2, the host kernel can use return trampolines for "
"indirect branches to bypass the poisoned branch target buffer, and flushing "
"the return stack buffer on VM exit.  This prevents rogue guests from "
"affecting indirect branching in the host kernel."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:293
msgid ""
"To protect host processes from rogue guests, host processes can have "
"indirect branch speculation disabled via prctl().  The branch target buffer "
"is cleared before context switching to such processes."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:298
msgid "4. A virtualized guest attacking other guest"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:300
msgid ""
"A rogue guest may attack another guest to get data accessible by the other "
"guest."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:303
msgid ""
"Spectre variant 1 attacks are possible if parameters can be passed between "
"guests.  This may be done via mechanisms such as shared memory or message "
"passing.  Such parameters could be used to derive data pointers to "
"privileged data in guest.  The privileged data could be accessed by gadget "
"code in the victim's speculation paths."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:309
msgid ""
"Spectre variant 2 attacks can be launched from a rogue guest by :ref:"
"`poisoning <poison_btb>` the branch target buffer or the return stack "
"buffer. Such poisoned entries could be used to influence speculation "
"execution paths in the victim guest."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:314
msgid ""
"Linux kernel mitigates attacks to other guests running in the same CPU "
"hardware thread by flushing the return stack buffer on VM exit, and clearing "
"the branch target buffer before switching to a new guest."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:318
msgid ""
"If SMT is used, Spectre variant 2 attacks from an untrusted guest in the "
"sibling hyperthread can be mitigated by the administrator, by turning off "
"the unsafe guest's indirect branch speculation via prctl().  A guest can "
"also protect itself by turning on microcode based mitigations (such as IBPB "
"or STIBP on x86) within the guest."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:327
msgid "Spectre system information"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:329
msgid ""
"The Linux kernel provides a sysfs interface to enumerate the current "
"mitigation status of the system for Spectre: whether the system is "
"vulnerable, and which mitigations are active."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:333
msgid "The sysfs file showing Spectre variant 1 mitigation status is:"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:335
msgid "/sys/devices/system/cpu/vulnerabilities/spectre_v1"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:337
#: ../../../admin-guide/hw-vuln/spectre.rst:375
msgid "The possible values in this file are:"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:341
#: ../../../admin-guide/hw-vuln/spectre.rst:380
msgid "'Not affected'"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:342
msgid "The processor is not vulnerable."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:343
msgid ""
"'Vulnerable: __user pointer sanitization and usercopy barriers only; no "
"swapgs barriers'"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:344
msgid ""
"The swapgs protections are disabled; otherwise it has protection in the "
"kernel on a case by case base with explicit pointer sanitation and usercopy "
"LFENCE barriers."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:347
msgid "'Mitigation: usercopy/swapgs barriers and __user pointer sanitization'"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:348
msgid ""
"Protection in the kernel on a case by case base with explicit pointer "
"sanitation, usercopy LFENCE barriers, and swapgs LFENCE barriers."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:352
msgid ""
"However, the protections are put in place on a case by case basis, and there "
"is no guarantee that all possible attack vectors for Spectre variant 1 are "
"covered."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:356
msgid ""
"The spectre_v2 kernel file reports if the kernel has been compiled with "
"retpoline mitigation or if the CPU has hardware mitigation, and if the CPU "
"has support for additional process-specific mitigation."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:360
msgid ""
"This file also reports CPU features enabled by microcode to mitigate attack "
"between user processes:"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:363
msgid ""
"Indirect Branch Prediction Barrier (IBPB) to add additional isolation "
"between processes of different users."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:365
msgid ""
"Single Thread Indirect Branch Predictors (STIBP) to add additional isolation "
"between CPU threads running on the same core."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:368
msgid ""
"These CPU features may impact performance when used and can be enabled per "
"process on a case-by-case base."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:371
msgid "The sysfs file showing Spectre variant 2 mitigation status is:"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:373
msgid "/sys/devices/system/cpu/vulnerabilities/spectre_v2"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:377
msgid "Kernel status:"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:380
msgid "The processor is not vulnerable"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:381
msgid "'Mitigation: None'"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:381
msgid "Vulnerable, no mitigation"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:382
msgid "'Mitigation: Retpolines'"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:382
msgid "Use Retpoline thunks"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:383
msgid "'Mitigation: LFENCE'"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:383
msgid "Use LFENCE instructions"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:384
msgid "'Mitigation: Enhanced IBRS'"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:384
msgid "Hardware-focused mitigation"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:385
msgid "'Mitigation: Enhanced IBRS + Retpolines'"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:385
msgid "Hardware-focused + Retpolines"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:386
msgid "'Mitigation: Enhanced IBRS + LFENCE'"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:386
msgid "Hardware-focused + LFENCE"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:389
msgid ""
"Firmware status: Show if Indirect Branch Restricted Speculation (IBRS) is "
"used to protect against Spectre variant 2 attacks when calling firmware (x86 "
"only)."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:393
msgid "'IBRS_FW'"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:393
msgid "Protection against user program attacks when calling firmware"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:396
msgid ""
"Indirect branch prediction barrier (IBPB) status for protection between "
"processes of different users. This feature can be controlled through prctl() "
"per process, or through kernel command line options. This is an x86 only "
"feature. For more details see below."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:402
msgid "'IBPB: disabled'"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:402
msgid "IBPB unused"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:403
msgid "'IBPB: always-on'"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:403
msgid "Use IBPB on all tasks"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:404
msgid "'IBPB: conditional'"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:404
msgid "Use IBPB on SECCOMP or indirect branch restricted tasks"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:407
msgid ""
"Single threaded indirect branch prediction (STIBP) status for protection "
"between different hyper threads. This feature can be controlled through "
"prctl per process, or through kernel command line options. This is x86 only "
"feature. For more details see below."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:413
msgid "'STIBP: disabled'"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:413
msgid "STIBP unused"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:414
msgid "'STIBP: forced'"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:414
msgid "Use STIBP on all tasks"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:415
msgid "'STIBP: conditional'"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:415
msgid "Use STIBP on SECCOMP or indirect branch restricted tasks"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:418
msgid "Return stack buffer (RSB) protection status:"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:421
msgid "'RSB filling'"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:421
msgid "Protection of RSB on context switch enabled"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:424
msgid "EIBRS Post-barrier Return Stack Buffer (PBRSB) protection status:"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:427
msgid "'PBRSB-eIBRS: SW sequence'"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:427
msgid "CPU is affected and protection of RSB on VMEXIT enabled"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:428
msgid "'PBRSB-eIBRS: Vulnerable'"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:428
msgid "CPU is vulnerable"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:429
msgid "'PBRSB-eIBRS: Not affected'"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:429
msgid "CPU is not affected by PBRSB"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:432
msgid "Branch History Injection (BHI) protection status:"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:436
msgid "BHI: Not affected"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:437
msgid "System is not affected"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:438
msgid "BHI: Retpoline"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:439
msgid "System is protected by retpoline"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:440
msgid "BHI: BHI_DIS_S"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:441
msgid "System is protected by BHI_DIS_S"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:442
msgid "BHI: SW loop, KVM SW loop"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:443
msgid "System is protected by software clearing sequence"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:444
msgid "BHI: Vulnerable"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:445
msgid "System is vulnerable to BHI"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:446
msgid "BHI: Vulnerable, KVM: SW loop"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:447
msgid "System is vulnerable; KVM is protected by software clearing sequence"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:449
msgid ""
"Full mitigation might require a microcode update from the CPU vendor. When "
"the necessary microcode is not available, the kernel will report "
"vulnerability."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:454
msgid "Turning on mitigation for Spectre variant 1 and Spectre variant 2"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:457
msgid "1. Kernel mitigation"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:462
msgid ""
"For the Spectre variant 1, vulnerable kernel code (as determined by code "
"audit or scanning tools) is annotated on a case by case basis to use nospec "
"accessor macros for bounds clipping :ref:`[2] <spec_ref2>` to avoid any "
"usable disclosure gadgets. However, it may not cover all attack vectors for "
"Spectre variant 1."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:468
msgid ""
"Copy-from-user code has an LFENCE barrier to prevent the access_ok() check "
"from being mis-speculated.  The barrier is done by the barrier_nospec() "
"macro."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:472
msgid ""
"For the swapgs variant of Spectre variant 1, LFENCE barriers are added to "
"interrupt, exception and NMI entry where needed.  These barriers are done by "
"the FENCE_SWAPGS_KERNEL_ENTRY and FENCE_SWAPGS_USER_ENTRY macros."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:480
msgid ""
"For Spectre variant 2 mitigation, the compiler turns indirect calls or jumps "
"in the kernel into equivalent return trampolines (retpolines) :ref:`[3] "
"<spec_ref3>` :ref:`[9] <spec_ref9>` to go to the target addresses.  "
"Speculative execution paths under retpolines are trapped in an infinite loop "
"to prevent any speculative execution jumping to a gadget."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:487
msgid ""
"To turn on retpoline mitigation on a vulnerable CPU, the kernel needs to be "
"compiled with a gcc compiler that supports the -mindirect-branch=thunk-"
"extern -mindirect-branch-register options. If the kernel is compiled with a "
"Clang compiler, the compiler needs to support -mretpoline-external-thunk "
"option.  The kernel config CONFIG_MITIGATION_RETPOLINE needs to be turned "
"on, and the CPU needs to run with the latest updated microcode."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:495
msgid ""
"On Intel Skylake-era systems the mitigation covers most, but not all, cases. "
"See :ref:`[3] <spec_ref3>` for more details."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:498
msgid ""
"On CPUs with hardware mitigation for Spectre variant 2 (e.g. IBRS or "
"enhanced IBRS on x86), retpoline is automatically disabled at run time."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:501
msgid ""
"Systems which support enhanced IBRS (eIBRS) enable IBRS protection once at "
"boot, by setting the IBRS bit, and they're automatically protected against "
"some Spectre v2 variant attacks. The BHB can still influence the choice of "
"indirect branch predictor entry, and although branch predictor entries are "
"isolated between modes when eIBRS is enabled, the BHB itself is not isolated "
"between modes. Systems which support BHI_DIS_S will set it to protect "
"against BHI attacks."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:509
msgid ""
"On Intel's enhanced IBRS systems, this includes cross-thread branch target "
"injections on SMT systems (STIBP). In other words, Intel eIBRS enables "
"STIBP, too."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:513
msgid ""
"AMD Automatic IBRS does not protect userspace, and Legacy IBRS systems clear "
"the IBRS bit on exit to userspace, therefore both explicitly enable STIBP."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:516
msgid ""
"The retpoline mitigation is turned on by default on vulnerable CPUs. It can "
"be forced on or off by the administrator via the kernel command line and "
"sysfs control files. See :ref:`spectre_mitigation_control_command_line`."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:521
msgid ""
"On x86, indirect branch restricted speculation is turned on by default "
"before invoking any firmware code to prevent Spectre variant 2 exploits "
"using the firmware."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:525
msgid ""
"Using kernel address space randomization (CONFIG_RANDOMIZE_BASE=y and "
"CONFIG_SLAB_FREELIST_RANDOM=y in the kernel configuration) makes attacks on "
"the kernel generally more difficult."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:530
msgid "2. User program mitigation"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:532
msgid ""
"User programs can mitigate Spectre variant 1 using LFENCE or \"bounds "
"clipping\". For more details see :ref:`[2] <spec_ref2>`."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:535
msgid ""
"For Spectre variant 2 mitigation, individual user programs can be compiled "
"with return trampolines for indirect branches. This protects them from "
"consuming poisoned entries in the branch target buffer left by malicious "
"software."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:540
msgid ""
"On legacy IBRS systems, at return to userspace, implicit STIBP is disabled "
"because the kernel clears the IBRS bit. In this case, the userspace programs "
"can disable indirect branch speculation via prctl() (See :ref:`Documentation/"
"userspace-api/spec_ctrl.rst <set_spec_ctrl>`). On x86, this will turn on "
"STIBP to guard against attacks from the sibling thread when the user program "
"is running, and use IBPB to flush the branch target buffer when switching to/"
"from the program."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:548
msgid ""
"Restricting indirect branch speculation on a user program will also prevent "
"the program from launching a variant 2 attack on x86.  Administrators can "
"change that behavior via the kernel command line and sysfs control files. "
"See :ref:`spectre_mitigation_control_command_line`."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:554
msgid ""
"Programs that disable their indirect branch speculation will have more "
"overhead and run slower."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:557
msgid ""
"User programs should use address space randomization (/proc/sys/kernel/"
"randomize_va_space = 1 or 2) to make attacks more difficult."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:562
msgid "3. VM mitigation"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:564
msgid ""
"Within the kernel, Spectre variant 1 attacks from rogue guests are mitigated "
"on a case by case basis in VM exit paths. Vulnerable code uses nospec "
"accessor macros for \"bounds clipping\", to avoid any usable disclosure "
"gadgets.  However, this may not cover all variant 1 attack vectors."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:570
msgid ""
"For Spectre variant 2 attacks from rogue guests to the kernel, the Linux "
"kernel uses retpoline or Enhanced IBRS to prevent consumption of poisoned "
"entries in branch target buffer left by rogue guests.  It also flushes the "
"return stack buffer on every VM exit to prevent a return stack buffer "
"underflow so poisoned branch target buffer could be used, or attacker guests "
"leaving poisoned entries in the return stack buffer."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:577
msgid ""
"To mitigate guest-to-guest attacks in the same CPU hardware thread, the "
"branch target buffer is sanitized by flushing before switching to a new "
"guest on a CPU."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:581
msgid "The above mitigations are turned on by default on vulnerable CPUs."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:583
msgid ""
"To mitigate guest-to-guest attacks from sibling thread when SMT is in use, "
"an untrusted guest running in the sibling thread can have its indirect "
"branch speculation disabled by administrator via prctl()."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:587
msgid ""
"The kernel also allows guests to use any microcode based mitigation they "
"choose to use (such as IBPB or STIBP on x86) to protect themselves."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:593
msgid "Mitigation control on the kernel command line"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:595
msgid ""
"In general the kernel selects reasonable default mitigations for the current "
"CPU."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:598
msgid ""
"Spectre default mitigations can be disabled or changed at the kernel command "
"line with the following options:"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:601
msgid "nospectre_v1"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:602
msgid "nospectre_v2"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:603
msgid "spectre_v2={option}"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:604
msgid "spectre_v2_user={option}"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:605
msgid "spectre_bhi={option}"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:607
msgid ""
"For more details on the available options, refer to Documentation/admin-"
"guide/kernel-parameters.txt"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:610
msgid "Mitigation selection guide"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:613
msgid "1. Trusted userspace"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:615
msgid ""
"If all userspace applications are from trusted sources and do not execute "
"externally supplied untrusted code, then the mitigations can be disabled."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:620
msgid "2. Protect sensitive programs"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:622
msgid ""
"For security-sensitive programs that have secrets (e.g. crypto keys), "
"protection against Spectre variant 2 can be put in place by disabling "
"indirect branch speculation when the program is running (See :ref:"
"`Documentation/userspace-api/spec_ctrl.rst <set_spec_ctrl>`)."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:628
msgid "3. Sandbox untrusted programs"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:630
msgid ""
"Untrusted programs that could be a source of attacks can be cordoned off by "
"disabling their indirect branch speculation when they are run (See :ref:"
"`Documentation/userspace-api/spec_ctrl.rst <set_spec_ctrl>`). This prevents "
"untrusted programs from polluting the branch target buffer.  This behavior "
"can be changed via the kernel command line and sysfs control files. See :ref:"
"`spectre_mitigation_control_command_line`."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:639
msgid "3. High security mode"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:641
msgid ""
"All Spectre variant 2 mitigations can be forced on at boot time for all "
"programs (See the \"on\" option in :ref:"
"`spectre_mitigation_control_command_line`).  This will add overhead as "
"indirect branch speculations for all programs will be restricted."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:647
msgid ""
"On x86, branch target buffer will be flushed with IBPB when switching to a "
"new program. STIBP is left on all the time to protect programs against "
"variant 2 attacks originating from programs running on sibling threads."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:652
msgid ""
"Alternatively, STIBP can be used only when running programs whose indirect "
"branch speculation is explicitly disabled, while IBPB is still used all the "
"time when switching to a new program to clear the branch target buffer (See "
"\"ibpb\" option in :ref:`spectre_mitigation_control_command_line`).  This "
"\"ibpb\" option has less performance cost than the \"on\" option, which "
"leaves STIBP on all the time."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:661
msgid "References on Spectre"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:663
msgid "Intel white papers:"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:667
msgid ""
"[1] `Intel analysis of speculative execution side channels <https://newsroom."
"intel.com/wp-content/uploads/sites/11/2018/01/Intel-Analysis-of-Speculative-"
"Execution-Side-Channels.pdf>`_."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:671
msgid ""
"[2] `Bounds check bypass <https://software.intel.com/security-software-"
"guidance/software-guidance/bounds-check-bypass>`_."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:675
msgid ""
"[3] `Deep dive: Retpoline: A branch target injection mitigation <https://"
"software.intel.com/security-software-guidance/insights/deep-dive-retpoline-"
"branch-target-injection-mitigation>`_."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:679
msgid ""
"[4] `Deep Dive: Single Thread Indirect Branch Predictors <https://software."
"intel.com/security-software-guidance/insights/deep-dive-single-thread-"
"indirect-branch-predictors>`_."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:681
msgid "AMD white papers:"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:685
msgid ""
"[5] `AMD64 technology indirect branch control extension <https://developer."
"amd.com/wp-content/resources/"
"Architecture_Guidelines_Update_Indirect_Branch_Control.pdf>`_."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:689
msgid ""
"[6] `Software techniques for managing speculation on AMD processors <https://"
"developer.amd.com/wp-content/resources/Managing-Speculation-on-AMD-"
"Processors.pdf>`_."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:691
msgid "ARM white papers:"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:695
msgid ""
"[7] `Cache speculation side-channels <https://developer.arm.com/support/arm-"
"security-updates/speculative-processor-vulnerability/download-the-"
"whitepaper>`_."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:699
msgid ""
"[8] `Cache speculation issues update <https://developer.arm.com/support/arm-"
"security-updates/speculative-processor-vulnerability/latest-updates/cache-"
"speculation-issues-update>`_."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:701
msgid "Google white paper:"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:705
msgid ""
"[9] `Retpoline: a software construct for preventing branch-target-injection "
"<https://support.google.com/faqs/answer/7625886>`_."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:707
msgid "MIPS white paper:"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:711
msgid ""
"[10] `MIPS: response on speculative execution and side channel "
"vulnerabilities <https://www.mips.com/blog/mips-response-on-speculative-"
"execution-and-side-channel-vulnerabilities/>`_."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:713
msgid "Academic papers:"
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:717
msgid ""
"[11] `Spectre Attacks: Exploiting Speculative Execution <https://"
"spectreattack.com/spectre.pdf>`_."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:721
msgid ""
"[12] `NetSpectre: Read Arbitrary Memory over Network <https://arxiv.org/"
"abs/1807.10535>`_."
msgstr ""

#: ../../../admin-guide/hw-vuln/spectre.rst:725
msgid ""
"[13] `Spectre Returns! Speculation Attacks using the Return Stack Buffer "
"<https://www.usenix.org/system/files/conference/woot18/woot18-paper-koruyeh."
"pdf>`_."
msgstr ""
